# -*- coding: cp1254 -*-
from header_common import *
from header_dialogs import *
from header_operations import *
from header_parties import *
from header_item_modifiers import *
from header_skills import *
from header_triggers import *
from ID_troops import *
from ID_party_templates import *
##diplomacy start+
from header_troops import *
from header_terrain_types import *
from header_items import * #For ek_food, and so forth
from header_mission_templates import grc_infantry, grc_archers, grc_cavalry, grc_everyone
##diplomacy end+
from module_constants import *

from compiler import *
####################################################################################################################
# During a dialog, the dialog lines are scanned from top to bottom.
# If the dialog-line is spoken by the player, all the matching lines are displayed for the player to pick from.
# If the dialog-line is spoken by another, the first (top-most) matching line is selected.
#
#  Each dialog line contains the following fields:
# 1) Dialogue partner: This should match the person player is talking to.
#    Usually this is a troop-id.
#    You can also use a party-template-id by appending '|party_tpl' to this field.
#    Use the constant 'anyone' if you'd like the line to match anybody.
#    Appending '|plyr' to this field means that the actual line is spoken by the player
#    Appending '|other(troop_id)' means that this line is spoken by a third person on the scene.
#       (You must make sure that this third person is present on the scene)
#
# 2) Starting dialog-state:
#    During a dialog there's always an active Dialog-state.
#    A dialog-line's starting dialog state must be the same as the active dialog state, for the line to be a possible candidate.
#    If the dialog is started by meeting a party on the map, initially, the active dialog state is "start"
#    If the dialog is started by speaking to an NPC in a town, initially, the active dialog state is "start"
#    If the dialog is started by helping a party defeat another party, initially, the active dialog state is "party_relieved"
#    If the dialog is started by liberating a prisoner, initially, the active dialog state is "prisoner_liberated"
#    If the dialog is started by defeating a party led by a hero, initially, the active dialog state is "enemy_defeated"
#    If the dialog is started by a trigger, initially, the active dialog state is "event_triggered"
# 3) Conditions block (list): This must be a valid operation block. See header_operations.py for reference.
# 4) Dialog Text (string):
# 5) Ending dialog-state:
#    If a dialog line is picked, the active dialog-state will become the picked line's ending dialog-state.
# 6) Consequences block (list): This must be a valid operation block. See header_operations.py for reference.
# 7) Voice-over (string): sound filename for the voice over. Leave here empty for no voice over
####################################################################################################################

dialogs = [
[anyone ,"start", [(store_conversation_troop, "$g_talk_troop"),
               (store_conversation_agent, "$g_talk_agent"),
               (store_troop_faction, "$g_talk_troop_faction", "$g_talk_troop"),
#                     (troop_get_slot, "$g_talk_troop_relation", "$g_talk_troop", slot_troop_player_relation),
               (call_script, "script_troop_get_player_relation", "$g_talk_troop"),
               (assign, "$g_talk_troop_relation", reg0),

          #This may be different way to handle persuasion, which might be a little more transparent to the player in its effects
          #Persuasion will affect the player's relation with the other character -- but only for 1 on 1 conversations
          (store_skill_level, ":persuasion", "skl_persuasion", "trp_player"),
          (assign, "$g_talk_troop_effective_relation", "$g_talk_troop_relation"),
          (val_add, "$g_talk_troop_effective_relation", ":persuasion"),
          (try_begin),
            (gt, "$g_talk_troop_effective_relation", 0),
            (store_add, ":persuasion_modifier", 10, ":persuasion"),
            (val_mul, "$g_talk_troop_effective_relation", ":persuasion_modifier"),
            (val_div, "$g_talk_troop_effective_relation", 10),
          (else_try),
            (lt, "$g_talk_troop_effective_relation", 0),
            (store_sub, ":persuasion_modifier", 20, ":persuasion"),
            (val_mul, "$g_talk_troop_effective_relation", ":persuasion_modifier"),
            (val_div, "$g_talk_troop_effective_relation", 20),
          (try_end),
          (val_clamp, "$g_talk_troop_effective_relation", -100, 101),
          (try_begin),
            (eq, "$cheat_mode", 1),
            (assign, reg3, "$g_talk_troop_effective_relation"),
            (display_message, "str_test_effective_relation_=_reg3"),
          (try_end),

               (try_begin),
                 (this_or_next|is_between, "$g_talk_troop", village_elders_begin, village_elders_end),
                 # (this_or_next|is_between, "$g_talk_troop", tavernkeepers_begin, tavernkeepers_end),
                 (is_between, "$g_talk_troop", mayors_begin, mayors_end),
                 (party_get_slot, "$g_talk_troop_relation", "$current_town", slot_center_player_relation),
               (try_end),
               (store_relation, "$g_talk_troop_faction_relation", "$g_talk_troop_faction", "fac_player_faction"),

               (assign, "$g_talk_troop_party", "$g_encountered_party"),
               (try_begin),
                 (troop_slot_ge, "$g_talk_troop", slot_troop_leaded_party, 1),
                 (troop_get_slot, "$g_talk_troop_party", "$g_talk_troop", slot_troop_leaded_party),
               (try_end),

#                     (assign, "$g_talk_troop_kingdom_relation", 0),
#                     (try_begin),
#                       (gt, "$players_kingdom", 0),
#                       (store_relation, "$g_talk_troop_kingdom_relation", "$g_talk_troop_faction", "$players_kingdom"),
#                     (try_end),



               (store_current_hours, "$g_current_hours"),
               (troop_get_slot, "$g_talk_troop_last_talk_time", "$g_talk_troop", slot_troop_last_talk_time),
               (troop_set_slot, "$g_talk_troop", slot_troop_last_talk_time, "$g_current_hours"),
               (store_sub, "$g_time_since_last_talk","$g_current_hours","$g_talk_troop_last_talk_time"),
               (troop_get_slot, "$g_talk_troop_met", "$g_talk_troop", slot_troop_met),
          (val_min, "$g_talk_troop_met", 1), #the global variable goes no higher than one
          (try_begin),
            (troop_slot_eq, "$g_talk_troop", slot_troop_met, 0),
            (troop_set_slot, "$g_talk_troop", slot_troop_met, 1),

            #Possible later activations of notes
            (try_begin),
               (is_between, "$g_talk_troop", kingdom_ladies_begin, kingdom_ladies_end),
            (try_end),

          (try_end),

               (try_begin),
#                       (this_or_next|eq, "$talk_context", tc_party_encounter),
#                       (this_or_next|eq, "$talk_context", tc_castle_commander),
                 ##diplomacy start+
				 (try_begin),
					#Use terrain advantage if appropriate
			        (ge, "$g_dplmc_terrain_advantage", DPLMC_TERRAIN_ADVANTAGE_ENABLE),
					(assign, ":terrain_code", -1),
				    (try_begin),
						(encountered_party_is_attacker),
                        #SB : set encountered agent with a weapon
                        (call_script, "script_encounter_agent_draw_weapon"),
						(call_script, "script_dplmc_get_terrain_code_for_battle", "$g_encountered_party", "p_main_party"),
						(assign, ":terrain_code", reg0),
				    (else_try),
						(call_script, "script_dplmc_get_terrain_code_for_battle", "p_main_party", "$g_encountered_party"),
						(assign, ":terrain_code", reg0),
				    (try_end),
					#Call adjusting for terrain
					(call_script, "script_dplmc_party_calculate_strength_in_terrain", "p_collective_enemy",":terrain_code",0,1),
					(assign, "$g_enemy_strength", reg0),
					(call_script, "script_dplmc_party_calculate_strength_in_terrain", "p_main_party",":terrain_code",0,1),
					(assign, "$g_ally_strength", reg0),
				 (else_try),
				     #Old method: no terrain advantage
					 (call_script, "script_party_calculate_strength", "p_collective_enemy",0),
					 (assign, "$g_enemy_strength", reg0),
					 (call_script, "script_party_calculate_strength", "p_main_party",0),
					 (assign, "$g_ally_strength", reg0),
		         (try_end),
				 ##diplomacy end+
                 (store_mul, "$g_strength_ratio", "$g_ally_strength", 100),
                 (assign, ":enemy_strength", "$g_enemy_strength"), #these two lines added to avoid div by zero error
                 (val_max, ":enemy_strength", 1),
                 (val_div, "$g_strength_ratio", ":enemy_strength"),
               (try_end),

                (assign, "$g_comment_found", 0),

                (assign, "$g_comment_has_rejoinder", 0),
                (assign, "$g_romantic_comment_made", 0),
                (assign, "$skip_lord_assumes_argument", 0), #a lord pre-empts a player's issue, ie, when the player is conducting a rebellion
                (assign, "$bypass_female_vassal_explanation", 0),
                (assign, "$g_done_wedding_comment", 0),

                (try_begin),
                  (troop_is_hero, "$g_talk_troop"),
                  (talk_info_show, 1),
                  (call_script, "script_setup_talk_info"),
                (try_end),

                (assign, "$g_last_comment_copied_to_s42", 0),
                (try_begin),
                  (troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_hero),
                  (call_script, "script_get_relevant_comment_to_s42"),
                  (assign, "$g_comment_found", reg0),
                (try_end),

			   ##diplomacy start+
			   #(troop_get_type, reg65, "$g_talk_troop"),
			   ##Override reg65 with script for gender
                (call_script, "script_dplmc_store_troop_is_female_reg", "$g_talk_troop", 65),
			   ##diplomacy end+
                (try_begin),
                  (faction_slot_eq,"$g_talk_troop_faction",slot_faction_leader,"$g_talk_troop"),
                  (str_store_string,s64,"@{reg65?my Lady:my Lord}"), #bug fix
                  (str_store_string,s65,"@{reg65?my Lady:my Lord}"),
                  (str_store_string,s66,"@{reg65?My Lady:My Lord}"),
                  (str_store_string,s67,"@{reg65?My Lady:My Lord}"), #bug fix
                (else_try),
                  (str_store_string,s64,"@{reg65?madame:sir}"), #bug fix
                  (str_store_string,s65,"@{reg65?madame:sir}"),
                  (str_store_string,s66,"@{reg65?Madame:Sir}"),
                  (str_store_string,s67,"@{reg65?Madame:Sir}"), #bug fix
                (try_end),

          (try_begin),
            (gt, "$cheat_mode", 0),
            (assign, reg4, "$talk_context"),
            (display_message, "@{!}DEBUG -- Talk context: {reg4}"),
          (try_end),

          (try_begin),
            (gt, "$cheat_mode", 0),
            (assign, reg4, "$g_time_since_last_talk"),
            (display_message, "@{!}DEBUG -- Time since last talk: {reg4}"),
          (try_end),


          (try_begin),
            (eq, "$cheat_mode", 0),
            (store_partner_quest, ":quest"),
            (ge, ":quest", 0),
            (str_store_quest_name, s4, ":quest"),

          (try_end),

               (eq, 1, 0)],
"{!}Warning: This line is never displayed. It is just for storing conversation variables.", "close_window", []],

[anyone ,"member_chat", [
         (store_conversation_troop, "$g_talk_troop"),
              (try_begin),
                  (is_between, "$g_talk_troop", companions_begin, companions_end),
                  (talk_info_show, 1),
                  (call_script, "script_setup_talk_info_companions"),
              (else_try),
                  (this_or_next|troop_slot_eq, "trp_player", slot_troop_spouse, "$g_talk_troop"),
                  # (this_or_next|troop_slot_eq, "$g_talk_troop", slot_troop_spouse, "trp_player"),
                  (is_between, "$g_talk_troop", pretenders_begin, pretenders_end),
                  (talk_info_show, 1),
                  (call_script, "script_setup_talk_info"),
# ##diplomacy start+
# ##Allow wife to join as companion, by Lathrael (modified)
# ##Show morale bar
              # (else_try),
                  # (troop_is_hero, "$g_talk_troop"),
                  # (talk_info_show, 1),
                  # (call_script, "script_setup_talk_info"),
# ##diplomacy end+
              (try_end),

            ##diplomacy start+ Get gender for troop
            (call_script, "script_dplmc_store_troop_is_female_reg", "$g_talk_troop", 65),

            ##ALSO OLD: #  (troop_get_type, reg65, "$g_talk_troop"),
            ##diplomacy end+
            (try_begin),
              (faction_slot_eq,"$g_talk_troop_faction",slot_faction_leader,"$g_talk_troop"),
              (str_store_string,s64,"@{reg65?my Lady:my Lord}"), #bug fix
              (str_store_string,s65,"@{reg65?my Lady:my Lord}"),
              (str_store_string,s66,"@{reg65?My Lady:My Lord}"),
            (else_try),
              (str_store_string,s64,"@{reg65?madame:sir}"), #bug fix
              (str_store_string,s65,"@{reg65?madame:sir}"),
              (str_store_string,s66,"@{reg65?Madame:Sir}"),
            (try_end),

            (store_current_hours, "$g_current_hours"),
            (troop_set_slot, "$g_talk_troop", slot_troop_last_talk_time, "$g_current_hours"),

            (eq, 1, 0)],
"{!}Warning: This line is never displayed. It is just for storing conversation variables.", "close_window", []],

[anyone ,"event_triggered", [(store_conversation_troop, "$g_talk_troop"),
                     (try_begin),
                         (is_between, "$g_talk_troop", companions_begin, companions_end),
                         (talk_info_show, 1),
                         (call_script, "script_setup_talk_info_companions"),
                     (try_end),

	 			##diplomacy start+ Get gender for troop
				##OLD:
				#(troop_get_type, reg65, "$g_talk_troop"),
				##NEW:
				(try_begin),
					(call_script, "script_cf_dplmc_troop_is_female", "$g_talk_troop"),
					(assign, reg65, 1),
				(else_try),
					(assign, reg65, 0),
				(try_end),
				##diplomacy end+
               (try_begin),
                 (faction_slot_eq,"$g_talk_troop_faction",slot_faction_leader,"$g_talk_troop"),
                 (str_store_string,s64,"@{reg65?my Lady:my Lord}"), #bug fix
                 (str_store_string,s65,"@{reg65?my Lady:my Lord}"),
                 (str_store_string,s66,"@{reg65?My Lady:My Lord}"),
               (else_try),
                 (str_store_string,s64,"@{reg65?madame:sir}"), #bug fix
                 (str_store_string,s65,"@{reg65?madame:sir}"),
                 (str_store_string,s66,"@{reg65?Madame:Sir}"),
               (try_end),


               (eq, 1, 0)],
"{!}Warning: This line is never displayed. It is just for storing conversation variables.", "close_window", []],

#SB: because we now use change_screen_map_conversation, this is a duplicate
[anyone, "start",
[
(eq, "$talk_context", tc_give_center_to_fief),
(neq, "$g_talk_troop", "$supported_pretender"), #SB : addition here
(assign, ":there_are_vassals", 0),
##diplomacy start+ Handle player is co-ruler of kingdom
(assign, ":alt_faction", "fac_player_supporters_faction"),
(try_begin),
	(is_between, "$players_kingdom", npc_kingdoms_begin, npc_kingdoms_end),
	(call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", "$players_kingdom"),
	(ge, reg0, DPLMC_FACTION_STANDING_LEADER_SPOUSE),
	(assign, ":alt_faction", "$players_kingdom"),
(try_end),
#Support promoted ladies
#(assign, ":end_cond", active_npcs_end),
(assign, ":end_cond", heroes_end),
##diplomacy end+
(try_for_range, ":troop_no", active_npcs_begin, ":end_cond"),
 (troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_hero),
 (neq, "trp_player", ":troop_no"),
 (store_troop_faction, ":faction_no", ":troop_no"),
 ##diplomacy start+
 (this_or_next|eq, ":faction_no", ":alt_faction"),
 ##diplomacy end+
 (eq, ":faction_no", "fac_player_supporters_faction"),
 (val_add, ":there_are_vassals", 1),
 (assign, ":end_cond", 0),
(try_end),

(try_begin),
 (gt, ":there_are_vassals", 0),
 (str_store_string, s2, "str_do_you_wish_to_award_it_to_one_of_your_vassals"),
(else_try),
 (str_store_string, s2, "str_who_do_you_wish_to_give_it_to"),
(try_end),

(str_store_party_name, s1, "$g_center_taken_by_player_faction"),
(str_store_string, s5, "str_sire_my_lady_we_have_taken_s1_s2"),
],
"{!}{s5}", "award_fief_to_vassal",
[]],
[anyone, "event_triggered",
[
(eq, "$talk_context", tc_give_center_to_fief),

(assign, ":there_are_vassals", 0),
##diplomacy start+ Handle player is co-ruler of kingdom
(assign, ":alt_faction", "fac_player_supporters_faction"),
(try_begin),
	(is_between, "$players_kingdom", npc_kingdoms_begin, npc_kingdoms_end),
	(call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", "$players_kingdom"),
	(ge, reg0, DPLMC_FACTION_STANDING_LEADER_SPOUSE),
	(assign, ":alt_faction", "$players_kingdom"),
(try_end),
#Support promoted ladies
#(assign, ":end_cond", active_npcs_end),
(assign, ":end_cond", heroes_end),
##diplomacy end+
(try_for_range, ":troop_no", active_npcs_begin, ":end_cond"),
 (troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_hero),
 (neq, "trp_player", ":troop_no"),
 (store_troop_faction, ":faction_no", ":troop_no"),
 ##diplomacy start+
 (this_or_next|eq, ":faction_no", ":alt_faction"),
 ##diplomacy end+
 (eq, ":faction_no", "fac_player_supporters_faction"),
 (val_add, ":there_are_vassals", 1),
 (assign, ":end_cond", 0),
(try_end),

(try_begin),
 (gt, ":there_are_vassals", 0),
 (str_store_string, s2, "str_do_you_wish_to_award_it_to_one_of_your_vassals"),
(else_try),
 (str_store_string, s2, "str_who_do_you_wish_to_give_it_to"),
(try_end),

(str_store_party_name, s1, "$g_center_taken_by_player_faction"),
(str_store_string, s5, "str_sire_my_lady_we_have_taken_s1_s2"),
],
"{!}{s5}", "award_fief_to_vassal",
[]],

[anyone|plyr, "award_fief_to_vassal",
[
(is_between, "$g_player_court", centers_begin, centers_end),
(store_faction_of_party, ":player_court_faction", "$g_player_court"),
##diplomacy start+ Handle player is co-ruler of kingdom
(assign, ":is_coruler", 0),
(try_begin),
	(is_between, "$players_kingdom", npc_kingdoms_begin, npc_kingdoms_end),
	(call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", "$players_kingdom"),
	(ge, reg0, DPLMC_FACTION_STANDING_LEADER_SPOUSE),
	(assign, ":is_coruler", 1),
(try_end),
(this_or_next|eq, ":is_coruler", 1),
##diplomacy end+
(eq, ":player_court_faction", "fac_player_supporters_faction"),
],
"I wish to defer the appointment of a lord, until I take the counsel of my subjects", "award_fief_to_vassal_defer",
[
]],

[anyone, "award_fief_to_vassal_defer",
[
],
"As you wish, {sire/my lady}. You may decide this matter at a later date.", "close_window",
[
(try_begin),
(faction_slot_eq, "$players_kingdom", slot_faction_political_issue, -1),
(faction_set_slot, "$players_kingdom", slot_faction_political_issue, "$g_center_taken_by_player_faction"),
(try_end),
(call_script, "script_give_center_to_lord", "$g_center_taken_by_player_faction", -1, 0), #-1 for the faction lord in this script is used exclusively in this context
#It is only used because script_give_center_to_faction does not reset the town lord if fac_player_supporters_faction is the attacker

(assign, "$g_center_taken_by_player_faction", -1),

#new start
(try_begin),
 (eq, "$g_next_menu", "mnu_castle_taken"),
 (jump_to_menu, "$g_next_menu"),
(try_end),
#new end

]],

[anyone|plyr|repeat_for_troops,"award_fief_to_vassal",
[
(store_repeat_object, ":troop_no"),
(troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_hero),
(neq, "trp_player", ":troop_no"),
(store_troop_faction, ":faction_no", ":troop_no"),
##diplomacy start+ Handle player is co-ruler of kingdom
(assign, ":alt_faction", "fac_player_supporters_faction"),
(try_begin),
	(is_between, "$players_kingdom", npc_kingdoms_begin, npc_kingdoms_end),
	(call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", "$players_kingdom"),
	(ge, reg0, DPLMC_FACTION_STANDING_LEADER_SPOUSE),
	(assign, ":alt_faction", "$players_kingdom"),
(try_end),
(this_or_next|eq, ":faction_no", ":alt_faction"),
##diplomacy end+
(eq, ":faction_no", "fac_player_supporters_faction"),
(str_store_troop_name, s11, ":troop_no"),
(call_script, "script_print_troop_owned_centers_in_numbers_to_s0", ":troop_no"),

(try_begin),
##diplomacy start+ fixed bug that was preventing "promised fief" from appearing
(troop_slot_eq, ":troop_no", slot_lord_recruitment_argument, argument_benefit),
##diplomacy end+
(str_store_string, s12, "str__promised_fief"),
(else_try),
(str_clear, s12),
(try_end),

(try_begin),
 (eq, reg0, 0),
  ##diplomacy start+ write to s0 instead of s1
 (str_store_string, s0, "str_no_fiefss12"),
 ##diplomacy end+
(else_try),
 ##diplomacy start+ write to s0 instead of s1
 (str_store_string, s0, "str_fiefs_s0s12"),
 ##diplomacy end+
(try_end),

##diplomacy start+ add relation to list of lords
#add relation string
(str_store_string_reg, s12, s63),#save s63, clobbering s12 (overwritten earlier)
(call_script, "script_troop_get_player_relation", ":troop_no"),
(call_script, "script_describe_relation_to_s63", reg0),
(str_store_string_reg, s1, s63),#clobber s1
(str_store_string_reg, s63, s12),#revert s63
(str_store_string, s1, "str_dplmc_s0_comma_s1"),#write to s1
##diplomacy end+
],
"{!}{s11} {s1}.", "award_fief_to_vassal_2",[(store_repeat_object, "$temp")]],

[anyone|plyr, "award_fief_to_vassal",
[
(call_script, "script_print_troop_owned_centers_in_numbers_to_s0", "trp_player"),
(str_store_party_name, s1, "$g_center_taken_by_player_faction"),

(try_begin),
(is_between, "$g_talk_troop", pretenders_begin, pretenders_end),
(str_store_string, s12, "str_please_s65_"),
(else_try),
(str_clear, s12),
(try_end),

(assign, ":there_are_vassals", 0),
##diplomacy start+
#Support promoted ladies
#(assign, ":end_cond", active_npcs_end),
(assign, ":end_cond", heroes_end),
#Handle player is co-ruler of kingdom
(assign, ":alt_faction", "fac_player_supporters_faction"),
(try_begin),
	(is_between, "$players_kingdom", npc_kingdoms_begin, npc_kingdoms_end),
	(call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", "$players_kingdom"),
	(ge, reg0, DPLMC_FACTION_STANDING_LEADER_SPOUSE),
	(assign, ":alt_faction", "$players_kingdom"),
(try_end),
##diplomacy end+
(try_for_range, ":troop_no", active_npcs_begin, ":end_cond"),
 (troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_hero),
 (neq, "trp_player", ":troop_no"),
 (store_troop_faction, ":faction_no", ":troop_no"),
 ##diplomacy start+
 (this_or_next|eq, ":faction_no", ":alt_faction"),
 ##diplomacy end+
 (eq, ":faction_no", "fac_player_supporters_faction"),
 (val_add, ":there_are_vassals", 1),
 (assign, ":end_cond", 0),
(try_end),

(try_begin),
 (gt, ":there_are_vassals", 0),
(str_store_string, s2, "str_fiefs_s0"),
(else_try),
(str_clear, s2),
(try_end),

(str_store_string, s5, "str_s12i_want_to_have_s1_for_myself"),
],
"{!}{s5}", "award_fief_to_vassal_2",
[
(assign, "$temp", "trp_player"),
]],

[anyone, "award_fief_to_vassal_2",
[
],
"As you wish, {sire/my lady}. {reg6?I:{reg7?You:{s11}}} will be the new {reg3?lady:lord} of {s1}.", "close_window",
[
(assign, ":new_owner", "$temp"),

(call_script, "script_give_center_to_lord", "$g_center_taken_by_player_faction", ":new_owner", 0),
(try_begin),
(faction_slot_eq, "$players_kingdom", slot_faction_political_issue, "$g_center_taken_by_player_faction"),
(faction_set_slot, "$players_kingdom", slot_faction_political_issue, -1),
(try_end),

(assign, reg6, 0),
(assign, reg7, 0),
(try_begin),
 (eq, ":new_owner", "$g_talk_troop"),
 (assign, reg6, 1),
(else_try),
 (eq, ":new_owner", "trp_player"),
 (assign, reg7, 1),
(else_try),
 (str_store_troop_name, s11, ":new_owner"),
(try_end),
(str_store_party_name, s1, "$g_center_taken_by_player_faction"),
##diplomacy start+
##OLD: #(troop_get_type, reg3, ":new_owner"),
##NEW:
(assign, reg3, 0),
(try_begin),
	(call_script, "script_cf_dplmc_troop_is_female", ":new_owner"),
	(assign, reg3, 1),
(try_end),
##diplomacy end+

(assign, "$g_center_taken_by_player_faction", -1),

#new start
(try_begin),
 (eq, "$g_next_menu", "mnu_castle_taken"),
 (jump_to_menu, "$g_next_menu"),
(try_end),
#new end
]],

# Awarding fiefs in rebellion...

[anyone, "start",
[
#SB : add context check
(eq, "$talk_context", tc_give_center_to_fief),
##diplomacy start+ Handle g_talk_troop and player are co-rulers of kingdom
(assign, ":is_coruler", 0),
(try_begin),
	(is_between, "$players_kingdom", npc_kingdoms_begin, npc_kingdoms_end),
	(faction_slot_eq, "$players_kingdom", slot_faction_leader, "$g_talk_troop"),
	(call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", "$players_kingdom"),
	(ge, reg0, DPLMC_FACTION_STANDING_LEADER_SPOUSE),
	(assign, ":is_coruler", 1),
(try_end),
(this_or_next|eq, ":is_coruler", 1),
##diplomacy end+
(faction_slot_eq, "fac_player_supporters_faction", slot_faction_leader, "$g_talk_troop"),
(ge, "$g_center_taken_by_player_faction", 0),
(str_store_party_name, s1, "$g_center_taken_by_player_faction"),
],
"{s1} is not being managed by anyone. Whom shall I put in charge?", "center_captured_rebellion",
[]],


[anyone, "event_triggered",
[
#SB : add context check
(eq, "$talk_context", tc_give_center_to_fief),
##diplomacy start+ Handle g_talk_troop and player are co-rulers of kingdom
(assign, ":is_coruler", 0),
(try_begin),
	(is_between, "$players_kingdom", npc_kingdoms_begin, npc_kingdoms_end),
	(faction_slot_eq, "$players_kingdom", slot_faction_leader, "$g_talk_troop"),
	(call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", "$players_kingdom"),
	(ge, reg0, DPLMC_FACTION_STANDING_LEADER_SPOUSE),
	(assign, ":is_coruler", 1),
(try_end),
(this_or_next|eq, ":is_coruler", 1),
##diplomacy end+
(faction_slot_eq, "fac_player_supporters_faction", slot_faction_leader, "$g_talk_troop"),
(ge, "$g_center_taken_by_player_faction", 0),
(str_store_party_name, s1, "$g_center_taken_by_player_faction"),
],
"{s1} is not being managed by anyone. Whom shall I put in charge?", "center_captured_rebellion",
[]],

[anyone|plyr|repeat_for_troops, "center_captured_rebellion",
[
(store_repeat_object, ":troop_no"),
(troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_hero),
(neq, "$g_talk_troop", ":troop_no"),
(neq, "trp_player", ":troop_no"),
(store_troop_faction, ":faction_no", ":troop_no"),
##diplomacy start+ Handle player is co-ruler of kingdom
(assign, ":alt_faction", "fac_player_supporters_faction"),
(try_begin),
	(is_between, "$players_kingdom", npc_kingdoms_begin, npc_kingdoms_end),
	(call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", "$players_kingdom"),
	(ge, reg0, DPLMC_FACTION_STANDING_LEADER_SPOUSE),
	(assign, ":alt_faction", "$players_kingdom"),
(try_end),
(this_or_next|eq, ":faction_no", ":alt_faction"),
##diplomacy end+
(eq, ":faction_no", "fac_player_supporters_faction"),
(str_store_troop_name, s11, ":troop_no"),
(call_script, "script_print_troop_owned_centers_in_numbers_to_s0", ":troop_no"),
(try_begin),
 (eq, reg0, 0),
 (str_store_string, s1, "@(no fiefs)"),
(else_try),
 (str_store_string, s1, "@(fiefs: {s0})"),
(try_end),
],
"{s11}. {s1}", "center_captured_rebellion_2",
[
(store_repeat_object, "$temp"),
]],

[anyone|plyr, "center_captured_rebellion",
[
(call_script, "script_print_troop_owned_centers_in_numbers_to_s0", "trp_player"),
(str_store_party_name, s1, "$g_center_taken_by_player_faction"),
##diplomacy start+
#Remove the "please" if the player is co-ruler
(assign, reg0, 0),
(try_begin),
	(this_or_next|troop_slot_eq, "trp_player", slot_troop_spouse, "$g_talk_troop"),
	(troop_slot_eq, "$g_talk_troop", slot_troop_spouse, "trp_player"),
(try_end),
],
#"Please {s65}, I want to have {s1} for myself. (fiefs: {s0})", "center_captured_rebellion_2",
"{reg0?{s65}:Please {s65}}, I want to have {s1} for myself. (fiefs: {s0})", "center_captured_rebellion_2",
##diplomacy end+
[
(assign, "$temp", "trp_player"),
]],

[anyone|plyr, "center_captured_rebellion",
[
(call_script, "script_print_troop_owned_centers_in_numbers_to_s0", "$g_talk_troop"),
(str_store_party_name, s1, "$g_center_taken_by_player_faction"),
],
"{s66}, you should have {s1} for yourself. (fiefs: {s0})", "center_captured_rebellion_2",
[
(assign, "$temp", "$g_talk_troop"),
]],

##diplomacy start+ allow not assigning newly-captured territories in a claimant quest
[anyone|plyr, "center_captured_rebellion",
[
(str_store_party_name, s1, "$g_center_taken_by_player_faction"),
],
"You should appoint no one yet, and decide later.",
 "center_captured_rebellion_2_defer",
[
]],

[anyone, "center_captured_rebellion_2_defer",
[
],
"Hmmm. All right, {playername}. I value your counsel highly.  I shall defer appointment of a lord for {s1} for the time.", "close_window",
[
 (call_script, "script_give_center_to_lord", "$g_center_taken_by_player_faction", -1, 0),
 (try_begin),
          (faction_slot_eq, "$players_kingdom", slot_faction_political_issue, "$g_center_taken_by_player_faction"),
(faction_set_slot, "$players_kingdom", slot_faction_political_issue, -1),
(try_end),
 (str_store_party_name, s1, "$g_center_taken_by_player_faction"),
 (assign, "$g_center_taken_by_player_faction", -1),
 #new start
 (try_begin),
    (eq, "$g_next_menu", "mnu_castle_taken"),
    (jump_to_menu, "$g_next_menu"),
 (try_end),
],
],
##diplomacy end+

[anyone, "center_captured_rebellion_2",
[
#     (faction_slot_eq, "fac_player_supporters_faction", slot_faction_leader, "$g_talk_troop"),
#     (ge, "$g_center_taken_by_player_faction", 0),
],
"Hmmm. All right, {playername}. I value your counsel highly. {reg6?I:{reg7?You:{s11}}} will be the new {reg3?lady:lord} of {s1}.", "close_window",
[
(assign, ":new_owner", "$temp"),
(call_script, "script_calculate_troop_score_for_center", ":new_owner", "$g_center_taken_by_player_faction"),
(assign, ":new_owner_score", reg0),
##diplomacy start+
#(assign, ":total_negative_effect"),
(assign, ":total_negative_effect", 0),
##Handle player is co-ruler of kingdom
(assign, ":alt_faction", "fac_player_supporters_faction"),
(try_begin),
	(is_between, "$players_kingdom", npc_kingdoms_begin, npc_kingdoms_end),
	(call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", "$players_kingdom"),
	(ge, reg0, DPLMC_FACTION_STANDING_LEADER_SPOUSE),
	(assign, ":alt_faction", "$players_kingdom"),
(try_end),
##Change next line to support promoted kingdom ladies:
#(try_for_range, ":cur_troop", active_npcs_begin, active_npcs_end),
(try_for_range, ":cur_troop", heroes_begin, heroes_end),
##diplomacy end+
(troop_slot_eq, ":cur_troop", slot_troop_occupation, slto_kingdom_hero),
 (store_troop_faction, ":cur_faction", ":cur_troop"),
 ##diplomacy start+
 (this_or_next|eq, ":cur_faction", ":alt_faction"),
 ##diplomacy end+
 (eq, ":cur_faction", "fac_player_supporters_faction"),
 (neq, ":cur_troop", ":new_owner"),
(neg|troop_slot_eq, ":cur_troop", slot_troop_stance_on_faction_issue, ":new_owner"),
(call_script, "script_troop_get_relation_with_troop", ":cur_troop", ":new_owner"),
(lt, reg0, 25),


 (call_script, "script_calculate_troop_score_for_center", ":cur_troop", "$g_center_taken_by_player_faction"),
 (assign, ":cur_troop_score", reg0),
 (gt, ":cur_troop_score", ":new_owner_score"),
 (store_sub, ":difference", ":cur_troop_score", ":new_owner_score"),
 (store_random_in_range, ":random_dif", 0, ":difference"),
 (val_div, ":random_dif", 1000),
 (gt, ":random_dif", 0),
 (val_add, ":total_negative_effect", ":random_dif"),
 (val_mul, ":random_dif", -1),
 (call_script, "script_change_player_relation_with_troop", ":cur_troop", ":random_dif"),
(try_end),
(val_mul, ":total_negative_effect", 2),
(val_div, ":total_negative_effect", 3),
(val_add, ":total_negative_effect", 5),
(try_begin),
 (neq, ":new_owner", "trp_player"),
 (val_min, ":total_negative_effect", 30),
 (call_script, "script_change_player_relation_with_troop", ":new_owner", ":total_negative_effect"),
(try_end),

(call_script, "script_give_center_to_lord", "$g_center_taken_by_player_faction", ":new_owner", 0),
(try_begin),
(faction_slot_eq, "$players_kingdom", slot_faction_political_issue, "$g_center_taken_by_player_faction"),
(faction_set_slot, "$players_kingdom", slot_faction_political_issue, -1),
(try_end),

(assign, reg6, 0),
(assign, reg7, 0),
(try_begin),
 (eq, ":new_owner", "$g_talk_troop"),
 (assign, reg6, 1),
(else_try),
 (eq, ":new_owner", "trp_player"),
 (assign, reg7, 1),
(else_try),
 (str_store_troop_name, s11, ":new_owner"),
(try_end),
(str_store_party_name, s1, "$g_center_taken_by_player_faction"),
##diplomacy start+
##OLD:
#(troop_get_type, reg3, ":new_owner"),
##NEW:
(assign, reg3, 0),
(try_begin),
	(call_script, "script_cf_dplmc_troop_is_female", ":new_owner"),
	(assign, reg3, 1),
(try_end),
##diplomacy end+

(assign, "$g_center_taken_by_player_faction", -1),

#new start
(try_begin),
 (eq, "$g_next_menu", "mnu_castle_taken"),
 (jump_to_menu, "$g_next_menu"),
(try_end),
#new end
]],

#TUTORIAL START
[anyone, "start",
[
(is_between, "$g_talk_troop", tutorial_fighters_begin, tutorial_fighters_end),
(eq, "$g_tutorial_training_ground_conversation_state", 0),
(eq, "$g_tutorial_fighter_talk_before", 0)],
"Hello there. We are polishing off our combat skills here with a bit of sparring practice.\
You look like you could use a bit of training. Why don't you join us, and we can show you a few tricks.\
And if you need explanation of any combat concepts, just ask, and I will do my best to fill you in.", "fighter_talk",
[
(try_begin),
 (eq, "$g_tutorial_training_ground_intro_message_being_displayed", 1),
 (assign, "$g_tutorial_training_ground_intro_message_being_displayed", 0),
 (tutorial_message, -1), #remove tutorial intro immediately before a conversation
(try_end),
(assign, "$g_tutorial_fighter_talk_before", 1)]],

[anyone, "start",
[(is_between, "$g_talk_troop", tutorial_fighters_begin, tutorial_fighters_end),
(eq, "$g_tutorial_training_ground_conversation_state", 0)],
"What do you want to practice?", "fighter_talk", []],

[anyone, "fighter_pretalk", [],
"Tell me what kind of practice you want.", "fighter_talk", []],

[anyone|plyr, "fighter_talk",
[],
"I want to practice attacking.", "fighter_talk_train_attack", []],

[anyone|plyr, "fighter_talk",
[],
"I want to practice blocking with my weapon.", "fighter_talk_train_parry", []],

[anyone|plyr, "fighter_talk",
[],
"Let's do some sparring practice.", "fighter_talk_train_combat", []],

[anyone|plyr, "fighter_talk",
[(eq,1,0)],
"{!}TODO: Let's train chamber blocking.", "fighter_talk_train_chamber", []],

[anyone|plyr, "fighter_talk",
[],
"[Leave]", "close_window", []],

[anyone, "fighter_talk_train_attack",
[
(get_player_agent_no, ":player_agent"),
(agent_has_item_equipped, ":player_agent", "itm_practice_sword"), #TODO: add other melee weapons
],
"All right. There are four principle directions for attacking. These are overhead swing, right swing, left swing and thrust.\
Now, I will tell you which direction to attack from and you must try to do the correct attack.\
^^(Move your mouse while you press the left mouse button to specify attack direction. For example, to execute an overhead attack, move the mouse up at the instant you press the left mouse button.\
The icons on your screen will help you do the correct action.)" , "fighter_talk_train_attack_2",
[]],

[anyone|plyr, "fighter_talk_train_attack_2",  [],
"Let's begin then. I am ready.", "close_window",
[
(assign, "$g_tutorial_training_ground_melee_trainer_attack", "$g_talk_troop"),
(assign, "$g_tutorial_training_ground_melee_state", 0),
(assign, "$g_tutorial_training_ground_melee_trainer_action_state", 0),
(assign, "$g_tutorial_training_ground_current_score", 0),
(assign, "$g_tutorial_training_ground_current_score_2", 0),
(assign, "$g_tutorial_update_mouse_presentation", 0),
]],

[anyone|plyr, "fighter_talk_train_attack_2",  [],
"Actually I want to do something else.", "fighter_pretalk", []],

[anyone, "fighter_talk_train_attack",
[(str_store_string, s3, "str_tutorial_training_ground_warning_no_weapon")],
"{!}{s3}", "close_window",
[]],

[anyone, "fighter_talk_train_parry",
[
(get_player_agent_no, ":player_agent"),
(agent_has_item_equipped, ":player_agent", "itm_practice_sword"), #TODO: add other melee weapons
],
"Unlike a shield, blocking with a weapon can only stop attacks coming from one direction.\
For example if you block up, you'll deflect overhead attacks, but you can still be hit by side swings or thrust attacks.\
^^(You must press and hold down the right mouse button to block.)", "fighter_talk_train_parry_2", [ ]],

[anyone, "fighter_talk_train_parry_2", [],
"I'll now attack you with different types of strokes, and I will wait until you do the correct block before attacking.\
Try to do the correct block as soon as you can.\
^^(This practice is easy to do with the 'automatic block direction' setting which is the default.\
If you go to the Options menu and change defend direction control to 'mouse movement' or 'keyboard', you'll need to manually choose block direction. This is much more challenging, but makes the game much more interesting.\
This practice can be very useful if you use manual blocking.)", "fighter_talk_train_parry_3",
[]],

[anyone|plyr, "fighter_talk_train_parry_3",  [],
"Let's begin then. I am ready.", "close_window",
[
(assign, "$g_tutorial_training_ground_melee_trainer_parry", "$g_talk_troop"),
(assign, "$g_tutorial_training_ground_melee_state", 0),
(assign, "$g_tutorial_training_ground_melee_trainer_action_state", 0),
(assign, "$g_tutorial_training_ground_current_score", 0),
]],

[anyone|plyr, "fighter_talk_train_parry_3",  [],
"Actually I want to do something else.", "fighter_pretalk", []],



[anyone, "fighter_talk_train_parry",
[(str_store_string, s3, "str_tutorial_training_ground_warning_no_weapon")],
"{!}{s3}", "close_window",
[]],

[anyone, "fighter_talk_train_chamber",
[
(get_player_agent_no, ":player_agent"),
(agent_has_item_equipped, ":player_agent", "itm_practice_sword"), #TODO: add other melee weapons
],
"{!}TODO: OK.", "close_window",
[
(assign, "$g_tutorial_training_ground_melee_trainer_chamber", "$g_talk_troop"),
(assign, "$g_tutorial_training_ground_melee_state", 0),
(assign, "$g_tutorial_training_ground_melee_trainer_action_state", 0),
(assign, "$g_tutorial_training_ground_current_score", 0),
]],

[anyone, "fighter_talk_train_chamber",
[(str_store_string, s3, "str_tutorial_training_ground_warning_no_weapon")],
"{!}{s3}", "close_window",
[]],

[anyone, "fighter_talk_train_combat",
[
(get_player_agent_no, ":player_agent"),
(agent_has_item_equipped, ":player_agent", "itm_practice_sword"), #TODO: add other melee weapons
],
"Sparring is an excellent way to prepare for actual combat.\
We'll fight each other with non-lethal weapons now, until one of us falls to the ground.\
You can get some bruises of course, but better that than being cut down in the real thing.", "fighter_talk_train_combat_2",
[]],

[anyone|plyr, "fighter_talk_train_combat_2",  [],
"Let's begin then. I am ready.", "close_window", [
(assign, "$g_tutorial_training_ground_melee_trainer_combat", "$g_talk_troop"),
(assign, "$g_tutorial_training_ground_melee_state", 0),
(assign, "$g_tutorial_training_ground_melee_trainer_action_state", 0),
]],

[anyone|plyr, "fighter_talk_train_combat_2",  [],
"Actually I want to do something else.", "fighter_pretalk", []],

[anyone, "fighter_talk_train_combat",
[(str_store_string, s3, "str_tutorial_training_ground_warning_no_weapon")],
"{!}{s3}", "close_window",
[]],

[anyone, "start",
[(is_between, "$g_talk_troop", tutorial_fighters_begin, tutorial_fighters_end),
(eq, "$g_tutorial_training_ground_conversation_state", 1)], #parry complete
"Good. You were able to block my attacks successfully. You may repeat this practice and try to get faster each time, until you are confident of your defense skills. Do you want to have another go?", "fighter_parry_try_again",
[
(assign, "$g_tutorial_training_ground_conversation_state", 0),
]],

[anyone, "start",
[(is_between, "$g_talk_troop", tutorial_fighters_begin, tutorial_fighters_end),
(eq, "$g_tutorial_training_ground_conversation_state", 2)], #player knocked down in parry
"Well that didn't go too well, did it? (Remember, you must press and hold down the right mouse button to keep your block effective.) Do you want to try again?", "fighter_parry_try_again",
[
(assign, "$g_tutorial_training_ground_conversation_state", 0),
]],

[anyone|plyr, "fighter_parry_try_again",
[],
"Yes. Let's try again.", "fighter_talk_train_parry", []],

[anyone|plyr, "fighter_parry_try_again",
[],
"No, I think I am done for now.", "fighter_talk_leave_parry", []],

[anyone, "start",
[(is_between, "$g_talk_troop", tutorial_fighters_begin, tutorial_fighters_end),
(eq, "$g_tutorial_training_ground_conversation_state", 3)], #trainer knocked down in parry
"Hey! We are doing a blocking practice, mate! You are supposed to block my attacks, not attack me back.", "fighter_parry_warn",
[
(assign, "$g_tutorial_training_ground_conversation_state", 0),
]],

[anyone|plyr, "fighter_parry_warn",
[],
"I am sorry. Let's try once again.", "fighter_talk_train_parry", []],

[anyone|plyr, "fighter_parry_warn",
[],
"Sorry. I must leave this practice now.", "fighter_talk_leave_parry", []],

[anyone, "fighter_talk_leave_parry",
[],
"All right. As you wish.", "close_window", []],

[anyone, "start",
[(is_between, "$g_talk_troop", tutorial_fighters_begin, tutorial_fighters_end),
(eq, "$g_tutorial_training_ground_conversation_state", 4)], #player knocked down in combat
"Well that didn't go too well, did it?  Don't feel bad, and try not to do same mistakes next time. Do you want to have a go again?", "fighter_combat_try_again",
[
(assign, "$g_tutorial_training_ground_conversation_state", 0),
]],

[anyone|plyr, "fighter_combat_try_again",
[],
"Yes. Let's do another round.", "fighter_talk_train_combat", []],

[anyone|plyr, "fighter_combat_try_again",
[],
"No. That was enough for me.", "fighter_talk_leave_combat", []],

[anyone, "fighter_talk_leave_combat",
[],
"Well, all right. Talk to me again if you change your mind.", "close_window", []],

[anyone, "start",
[(is_between, "$g_talk_troop", tutorial_fighters_begin, tutorial_fighters_end),
(eq, "$g_tutorial_training_ground_conversation_state", 5)], #trainer knocked down in combat
"Hey, that was good sparring. You defeated me, but next time I'll be more careful. Do you want to have a go again?", "fighter_combat_try_again",
[
(assign, "$g_tutorial_training_ground_conversation_state", 0),
]],

# [anyone, "start",
# [(is_between, "$g_talk_troop", tutorial_fighters_begin, tutorial_fighters_end),
# (eq, "$g_tutorial_training_ground_conversation_state", 6)], #chamber complete
# "{!}TODO: Congratulations. Anything else?", "fighter_talk",
# [
# (assign, "$g_tutorial_training_ground_conversation_state", 0),
# ]],

# [anyone, "start",
# [(is_between, "$g_talk_troop", tutorial_fighters_begin, tutorial_fighters_end),
# (eq, "$g_tutorial_training_ground_conversation_state", 7)], #player knocked down in chamber
# "{!}TODO: Want to try again?", "fighter_chamber_try_again",
# [
# (assign, "$g_tutorial_training_ground_conversation_state", 0),
# ]],

# [anyone|plyr, "fighter_chamber_try_again",
# [],
# "{!}TODO: OK let's try again.", "fighter_talk_train_chamber", []],

# [anyone|plyr, "fighter_chamber_try_again",
# [],
# "TODO: No, let's leave it there.", "fighter_talk_leave_chamber", []],

# [anyone, "fighter_talk_leave_chamber",
# [],
# "{!}TODO: OK. Bye.", "close_window", []],

[anyone, "start",
[(is_between, "$g_talk_troop", tutorial_fighters_begin, tutorial_fighters_end),
(eq, "$g_tutorial_training_ground_conversation_state", 8)], #trainer knocked down in chamber
"{!}TODO: What are you doing? Don't attack me except while chambering!", "fighter_chamber_warn",
[
(assign, "$g_tutorial_training_ground_conversation_state", 0),
]],

[anyone, "start",
[(is_between, "$g_talk_troop", tutorial_fighters_begin, tutorial_fighters_end),
(eq, "$g_tutorial_training_ground_conversation_state", 9)], #attack complete
"Very good. You have learned how to attack from any direction you want. If you like we can try this again or move to a different exercise.", "fighter_talk",
[
(assign, "$g_tutorial_training_ground_conversation_state", 0),
]],


  [anyone|plyr, "fighter_chamber_warn", # unused
[],
"{!}TODO: Sorry, let's try once again.", "fighter_talk_train_chamber", []],

  [anyone|plyr, "fighter_chamber_warn", # unused
[],
   "{!}TODO: Sorry. I want to leave the exercise.", "close_window", []],

[trp_tutorial_archer_1|auto_proceed, "start",
[],
"{!}.", "tutorial_troop_default",
[]],

[trp_tutorial_master_archer, "start",
[
(eq, "$g_tutorial_training_ground_archer_trainer_completed_chapters", 1),
],
"Not bad. Not bad at all! You seem to have grasped the basics of archery. Now, try to do the same thing with a crossbow.\
Take the crossbow and the bolts over there and shoot those three targets. The crossbow is much easier to shoot with compared with the bow,\
but you need to reload it after each shot.", "archer_challenge_2", []],

[trp_tutorial_master_archer, "start",
[
(eq, "$g_tutorial_training_ground_archer_trainer_completed_chapters", 2),
],
"Good. You didn't have too much difficulty using the crossbow either. Next you will learn to use throwing weapons.\
Pick up the javelins you see over there and try to hit those three targets. ",
"archer_challenge_2", []],

[trp_tutorial_master_archer, "start",
[
(eq, "$g_tutorial_training_ground_archer_trainer_completed_chapters", 3),
],
"Well, with that you have recevied the basic skills to use all three types of ranged weapons. The rest will come with practice. Train each and every day, and in time you will be as good as the best marksmen in Calradia.",
"ranged_end", []],

[trp_tutorial_master_archer, "ranged_end", [],
"Now, you can go talk with the melee fighters or the horsemanship trainer if you haven't already done so. They can teach you important skills too.",
"close_window", []],

[trp_tutorial_master_archer, "start",
[
(try_begin),
 (eq, "$g_tutorial_training_ground_intro_message_being_displayed", 1),
 (assign, "$g_tutorial_training_ground_intro_message_being_displayed", 0),
 (tutorial_message, -1), #remove tutorial intro immediately before a conversation
(try_end),

],
"Good day to you, young fellow. I spend my days teaching about ranged weapons to anyone that is willing to learn.\
If you need a tutor, let me know and I'll teach you how to use the bow, the crossbow and the javelin.", "archer_talk",
[]],

[anyone|plyr, "archer_talk",
[
(eq, "$g_tutorial_training_ground_archer_trainer_completed_chapters", 0),
],
"Yes, show me how to use ranged weapons.", "archer_challenge", []],

# [anyone|plyr, "archer_talk",
# [
# (gt, "$g_tutorial_training_ground_archer_trainer_completed_chapters", 0),
# ],
# "{!}TODO: I want to move to the next stage.", "archer_challenge", []],

[anyone|plyr, "archer_talk",
[],
"No, not now.", "close_window", []],

[trp_tutorial_master_archer, "archer_challenge",
[
(eq, "$g_tutorial_training_ground_archer_trainer_completed_chapters", 0),
],
"All right. Your first training will be in bowmanship. The bow is a difficult weapon to master. But once you are sufficiently good at it, you can shoot quickly and with great power.\
Go pick up the bow and arrows you see over there now and shoot those targets.", "archer_challenge_2",
[]],

# [trp_tutorial_master_archer, "archer_challenge",
# [
# (eq, "$g_tutorial_training_ground_archer_trainer_completed_chapters", 1),
# ],
# "{!}TODO: Make 3 shots with crossbow.", "archer_challenge_2",
# []],

# [trp_tutorial_master_archer, "archer_challenge",
# [],
# "{!}TODO: Make 3 shots with javelin.", "archer_challenge_2",
# []],

[anyone|plyr, "archer_challenge_2",
[],
"All right. I am ready.", "close_window",
[
(assign, "$g_tutorial_training_ground_archer_trainer_state", 1),
(try_begin),
 (eq, "$g_tutorial_training_ground_archer_trainer_completed_chapters", 0),
 (assign, "$g_tutorial_training_ground_archer_trainer_item_1", "itm_practice_bow"),
 (assign, "$g_tutorial_training_ground_archer_trainer_item_2", "itm_practice_arrows"),
(else_try),
 (eq, "$g_tutorial_training_ground_archer_trainer_completed_chapters", 1),
 (assign, "$g_tutorial_training_ground_archer_trainer_item_1", "itm_practice_crossbow"),
 (assign, "$g_tutorial_training_ground_archer_trainer_item_2", "itm_practice_bolts"),
(else_try),
 (assign, "$g_tutorial_training_ground_archer_trainer_item_1", "itm_practice_javelin"),
 (assign, "$g_tutorial_training_ground_archer_trainer_item_2", -1),
(try_end),
]],

[anyone|plyr, "archer_challenge_2",
[],
"Just a minute. I want to do something else first.", "close_window",
[]],


[trp_tutorial_master_horseman, "start",
[
(eq, "$g_tutorial_training_ground_horseman_trainer_completed_chapters", 1),
],
"I hope you enjoyed the ride. Now we move on to something a bit more difficult. Grab the lance you see over there and ride around the course hitting each target at least once.",
"horseman_melee_challenge_2", []],

[trp_tutorial_master_horseman, "start",
[
(eq, "$g_tutorial_training_ground_horseman_trainer_completed_chapters", 2),
],
"Good! You have been able to hit all targets on horseback. That's no easy feat for a starter. Your next challenge will be using a bow and arrows to shoot at the archery targets by the road. You need to put an arrow to each target to consider yourself successful.",
"horseman_melee_challenge_2", []],
#SB : challange -> challenge
[trp_tutorial_master_horseman, "start",
[
(eq, "$g_tutorial_training_ground_horseman_trainer_completed_chapters", 3),
],
"Very good. You were able to shoot all targets from horseback. Keep riding and practicing each day and in time you will be an expert horseman.", "horsemanship_end",
[
]],

[trp_tutorial_master_horseman, "horsemanship_end",
[
],
"Now, you can go talk with the melee fighters or the archery trainer if you haven't already done so. You need to learn everything you can to be prepared when you have to defend yourself.", "close_window",
[]],



[trp_tutorial_master_horseman, "start",
[
(try_begin),
 (eq, "$g_tutorial_training_ground_intro_message_being_displayed", 1),
 (assign, "$g_tutorial_training_ground_intro_message_being_displayed", 0),
 (tutorial_message, -1), #remove tutorial intro immediately before a conversation
(try_end),
],
"Good day! I have come here for some riding practice, but my old bones are aching badly so I decided to give myself a rest today.\
If you would like to practice your horsemanship, you can take my horse here. The exercise would be good for her.", "horseman_talk",
[]],

[anyone|plyr, "horseman_talk",
[],
"Yes, I would like to practice riding.", "horseman_challenge", []],

[anyone|plyr, "horseman_talk",
[],
"Uhm. Maybe later.", "close_window", []],

# [trp_tutorial_master_horseman, "horseman_challenge",
# [
# (eq, "$g_tutorial_training_ground_player_continue_without_basics", 0),
# (this_or_next|eq, "$g_tutorial_training_ground_melee_trainer_attack_completed", 0),
# (eq, "$g_tutorial_training_ground_archer_trainer_completed_chapters", 0),
# ],
# "Hmm. Do you know how to use your weapons? You'd better learn to use those on foot before you start to train using them on horseback.", "horseman_ask",
# []],

# [anyone|plyr, "horseman_ask",
# [],
# "Yes, I know ", "horseman_challenge",
# [
# (assign, "$g_tutorial_training_ground_player_continue_without_basics", 1),
# ]],

# [anyone|plyr, "horseman_ask",
# [],
# "{!}TODO: No", "horseman_ask_2",
# []],

# [trp_tutorial_master_horseman, "horseman_ask_2",
# [],
# "{!}TODO: Come back later then.", "close_window",
# []],

[trp_tutorial_master_horseman, "horseman_challenge",
[
(eq, "$g_tutorial_training_ground_horseman_trainer_completed_chapters", 0),
],
"Good. Now, I will give you a few exercises that'll teach you riding and horseback weapon use.\
 Your first assignment is simple. Just take your horse for a ride around the course.\
 Go as slow or as fast as you like.\
 Come back when you feel confident as a rider and I'll give you some tougher exercises.", "horseman_melee_challenge_2",
[]],

[anyone|plyr, "horseman_melee_challenge_2",
[],
"All right. I am ready.", "close_window",
[
(assign, "$g_tutorial_training_ground_horseman_trainer_state", 1),
(try_begin),
 (eq, "$g_tutorial_training_ground_horseman_trainer_completed_chapters", 0),
 (assign, "$g_tutorial_training_ground_horseman_trainer_item_1", -1),
 (assign, "$g_tutorial_training_ground_horseman_trainer_item_2", -1),
(else_try),
 (eq, "$g_tutorial_training_ground_horseman_trainer_completed_chapters", 1),
 (assign, "$g_tutorial_training_ground_horseman_trainer_item_1", "itm_arena_lance"),
 (assign, "$g_tutorial_training_ground_horseman_trainer_item_2", -1),
(else_try),
 (assign, "$g_tutorial_training_ground_horseman_trainer_item_1", "itm_practice_bow_2"),
 (assign, "$g_tutorial_training_ground_horseman_trainer_item_2", "itm_practice_arrows_2"),
(try_end),
]],

[anyone|plyr, "horseman_melee_challenge_2",
[],
"Just a minute. I need to do something else first.", "close_window", []],

[trp_tutorial_rider_1|auto_proceed, "start",
[],
"{!}Warning: This line is never displayed.", "tutorial_troop_default",
[]],

[trp_tutorial_rider_2|auto_proceed, "start",
[],
"{!}Warning: This line is never displayed.", "tutorial_troop_default",
[]],

[anyone, "tutorial_troop_default",
[
(try_begin),
 (eq, "$g_tutorial_training_ground_intro_message_being_displayed", 1),
 (assign, "$g_tutorial_training_ground_intro_message_being_displayed", 0),
 (tutorial_message, -1), #remove tutorial intro immediately before a conversation
(try_end),
],
"Hey, I am trying to practice here. Go, talk with the archery trainer if you need guidance about ranged weapons.", "close_window", []],


#PRISON BREAK START
[anyone,"start",
[
(eq, "$talk_context", tc_prison_break),
(troop_slot_eq, "$g_talk_troop", slot_troop_prisoner_of_party, "$g_encountered_party"),
(troop_slot_ge, "$g_talk_troop", slot_troop_mission_participation, mp_stay_out),
],
"Is there a change of plans?", "lord_prison_break_confirm_3",[]],

[anyone,"start",
[
(eq, "$talk_context", tc_prison_break),
(try_begin),
 (eq, "$cheat_mode", 1),
 (assign, reg0, "$g_talk_troop"),
 (assign, reg1, "$g_encountered_party"),
 (troop_get_slot, reg2, "$g_talk_troop", slot_troop_prisoner_of_party),
 (display_message, "@{!}g_talk_troop = {reg0} , g_encountered_party = {reg1} , slot value = {reg2}"),
(try_end),
(troop_slot_eq, "$g_talk_troop", slot_troop_prisoner_of_party, "$g_encountered_party"),
],
"What's going on?", "lord_prison_break",[]],


#TAVERN DRUNK DIALOGS
[anyone, "start",
[
(eq, "$g_talk_troop", "trp_belligerent_drunk"),
],
"What are you looking at?", "drunk_response",
[
(try_begin),
 (eq, "$g_main_attacker_agent", 0),
 (call_script, "script_activate_tavern_attackers"),
(try_end),
(mission_disable_talk),
]],

[anyone, "start",
[
(eq, "$g_talk_troop", "trp_hired_assassin"),
],
"Are you looking at me?", "drunk_response",
[
(try_begin),
 (eq, "$g_main_attacker_agent", 0),
 (call_script, "script_activate_tavern_attackers"),
(try_end),
(mission_disable_talk),
]],

[anyone, "start",
[
(eq, "$g_talk_troop", "trp_hired_assassin"),
(eq,1,0),
],
"{!}Added to match dialog ids with translations.", "close_window",
[]],


[anyone, "start", [
(is_between, "$g_talk_troop", tavernkeepers_begin, tavernkeepers_end),
(gt, "$g_main_attacker_agent", 0),
(neg|agent_is_alive, "$g_main_attacker_agent"),

(try_begin),
  (neg|agent_is_alive, "$g_main_attacker_agent"),
  (agent_get_troop_id, ":type", "$g_main_attacker_agent"),
  (eq, ":type", "trp_hired_assassin"),
  (str_store_string, s9, "str_strange_that_one_didnt_seem_like_your_ordenary_troublemaker_he_didnt_drink_all_that_much__he_just_stood_there_quietly_and_watched_the_door_you_may_wish_to_consider_whether_you_have_any_enemies_who_know_you_are_in_town_a_pity_that_blood_had_to_be_spilled_in_my_establishment"),
  
  (try_begin), #random "good" imod
    (store_random_in_range, ":imod", imod_old, imod_exquisite),
    (gt, "$g_attacker_drawn_weapon", 0),
    (troop_add_item, "trp_player", "$g_attacker_drawn_weapon", ":imod"), # SB: add attacker sword
  (try_end),
(else_try),
#(display_message, "str_wielded_item_reg3"),

  (lt, "$g_attacker_drawn_weapon", "itm_tutorial_spear"),
  (str_store_string, s9, "str_you_never_let_him_draw_his_weapon_still_it_looked_like_he_was_going_to_kill_you_take_his_sword_and_purse_i_suppose_he_was_trouble_but_its_not_good_for_an_establishment_to_get_a_name_as_a_place_where_men_are_killed"),

  (try_begin),
    (try_for_range, ":item_slot", ek_item_0, ek_head),
      (agent_get_item_slot, ":item_no", "$g_main_attacker_agent", ":item_slot"),
      (troop_add_item, "trp_player", ":item_no", 0), # SB: add attacker sword  
    (try_end),
  (try_end),
  #SB : this is useless, change with town instead
  (call_script, "script_change_player_relation_with_center", "$current_town", -1),
(else_try),
  (neg|agent_is_alive, "$g_main_attacker_agent"),
  (str_store_string, s9, "str_well_id_say_that_he_started_it_that_entitles_you_to_his_sword_and_purse_i_suppose_have_a_drink_on_the_house_as_i_daresay_youve_saved_a_patron_or_two_a_broken_skull_still_i_hope_he_still_has_a_pulse_its_not_good_for_an_establishment_to_get_a_name_as_a_place_where_men_are_killed"),
  (troop_add_item, "trp_player", "$g_attacker_drawn_weapon", 0), # SB: add attacker sword
  (try_begin),
    (agent_is_wounded, "$g_main_attacker_agent"),
    (call_script, "script_change_player_relation_with_center", "$current_town", 1), #useless, increase with town instead
  (try_end),
(try_end),

(troop_add_gold, "trp_player", 50),
(assign, "$g_main_attacker_agent", 0),
(troop_set_slot, "trp_hired_assassin", slot_troop_cur_center, -1),
],
"{!}{s9}", "player_duel_response", [
]],


[anyone, "start", [
  (is_between, "$g_talk_troop", tavernkeepers_begin, tavernkeepers_end),
  (gt, "$g_main_attacker_agent", 0),
  (try_begin),
    (get_player_agent_no, ":player_agent"),
    (agent_get_wielded_item, ":wielded_item", ":player_agent", 0),
    (item_get_type, ":itp", ":wielded_item"), #SB : itp check to match mission_templates
    (this_or_next|is_between, ":itp", itp_type_bow, itp_type_goods),
    (is_between, ":itp", itp_type_pistol, itp_type_bullets),
    # (is_between, ":wielded_item", "itm_darts", "itm_torch"),
    # (neq, ":wielded_item", "itm_javelin_melee"),
    # (neq, ":wielded_item", "itm_throwing_spear_melee"),
    # (neq, ":wielded_item", "itm_jarid_melee"),
    # (neq, ":wielded_item", "itm_light_throwing_axes_melee"),
    # (neq, ":wielded_item", "itm_throwing_axes_melee"),
    # (neq, ":wielded_item", "itm_heavy_throwing_axes_melee"),
    (str_store_string, s9, "str_stop_no_shooting_no_shooting"),
    (try_begin), #auto-swap to melee
      # # (eq, ":itp", itp_type_thrown),
      # (item_has_property, ":wielded_item", itp_next_item_as_melee),
      # (store_add, ":default_item", ":wielded_item", 1),
    # (else_try),
      (assign, ":default_item", -1),
      (troop_get_inventory_capacity, ":end_cond", "trp_player"),
      (try_for_range, ":i_slot", 0, ":end_cond"),
        (troop_get_inventory_slot, ":item_id", "trp_player", ":i_slot"),
        (gt, ":item_id", 0),
        (neq, ":item_id", ":wielded_item"),
        (item_get_type, ":itp", ":item_id"),
        (is_between, ":itp", itp_type_one_handed_wpn, itp_type_arrows),
        (assign, ":default_item", ":item_id"),
        (assign, ":end_cond", 0), #break
      (try_end),
    (try_end),

    (agent_set_wielded_item, ":player_agent", ":default_item"),
  (else_try),
    (str_store_string, s9, "str_em_ill_stay_out_of_this"),
  (try_end),
],
"{!}{s9}", "close_window", [
]],

[anyone|plyr, "player_duel_response", [],
"Such a waste...", "close_window", [
]],

[anyone|plyr, "player_duel_response", [],
"Better him than me", "close_window", [
]],


[anyone|plyr, "drunk_response", [],
"I'm not sure... Some sort of animal, clearly", "drunk_fight_start", [
]],

[anyone|plyr, "drunk_response", [],
##diplomacy start+ Change this so there is some chance of success
#to avoid a fight.
##OLD:
#"Excuse me -- please accept my apologies", "drunk_fight_start", [
#]],
##NEW:
"Excuse me -- please accept my apologies", "dplmc_drunk_attempt_placate", [
]],

[anyone, "dplmc_drunk_attempt_placate", [
(neq, "$g_talk_troop", "trp_hired_assassin"),
#Right now this is the same as the check in Native to persuade a companion to stay in your party
(store_skill_level, reg1, "skl_persuasion", "trp_player"),
(store_random_in_range, reg0, -2, 13),
(try_begin),
   (ge, "$cheat_mode", 1),
	(display_message, "@{!}Persuasion attempt: skill {reg1} versus random roll {reg0} (-2 through 12)"),
(try_end),
(le, reg0, reg1),
#The persuasion attempt succeeded.
(call_script, "script_deactivate_tavern_attackers"),
],
"I'll let it slide... this time.  Now buzz off.", "close_window", [
#SB : close the tavern mission template
(finish_mission),
]],

[anyone|auto_proceed, "dplmc_drunk_attempt_placate", [],
#The persuasion attempt failed.  Fall back to the standard behavior.
"I'll wipe that smirk right off your face!", "drunk_fight_start", [
# (troop_set_slot, "trp_belligerent_drunk", slot_troop_cur_center, 0),
]],
##diplomacy end+

[anyone, "drunk_fight_start", [],
"I'll wipe that smirk right off your face!", "close_window", [
(troop_set_slot, "trp_belligerent_drunk", slot_troop_cur_center, 0),
]],

[anyone|plyr, "drunk_response",
[
##diplomacy start+
#In Native this only shows up when it is guaranteed to succeed, but that
#isn't particularly interesting.
##REMOVED:
#(troop_slot_ge, "trp_player", slot_troop_renown, 150),
##diplomacy end+
],
"Do you have any idea who I am?", "drunk_player_high_renown", [
]],

#SB : always fail if disguised
[anyone, "drunk_player_high_renown", [
(eq, "$sneaked_into_town", disguise_pilgrim),
],
"You're a funny-smelling wretch, that's what you are!", "drunk_fight_start", [
# (play_sound, "snd_encounter_nobleman"),
]],

[anyone, "drunk_player_high_renown", [
##diplomacy start+ Failure is also possible because you can get to this line with insufficient renown
(this_or_next|neg|troop_slot_ge, "trp_player", slot_troop_renown, dplmc_command_renown_limit / 2), # SB : const / 2
##diplomacy end+
(eq, "$g_talk_troop", "trp_hired_assassin"),
],
"Do I care?", "drunk_fight_start", [
]],


##diplomacy start+ If prejudice is high, possibly increase the renown threshold required
[anyone, "drunk_player_high_renown", [
   (lt, "$g_disable_condescending_comments", 0),#prejudice mode: high
   (call_script, "script_cf_dplmc_faction_has_bias_against_gender", "$g_encountered_party_faction", "$character_gender"),
   (neg|troop_slot_ge, "trp_player", slot_troop_renown, dplmc_command_renown_limit), #SB : const
],
"Big talk from a little runt. I'll put you in your place!", "drunk_fight_start", [
]],
##diplomacy end+

[anyone, "drunk_player_high_renown", [
##diplomacy start+ change to use script_dplmc_print_subordinate_says_sir_madame_to_s0
(call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),
##diplomacy end+
],
##diplomacy start+ change to use script_dplmc_print_subordinate_says_sir_madame_to_s0
"Emmm... Actually... Yes, yes, I do know who you are, {s0}. Please forgive me, your grace -- it must be the drink. I'll be leaving, now...", "drunk_player_high_renown", [
##diplomacy end+
]],

[anyone|plyr, "drunk_player_high_renown", [],
"Why, if you want a fight, you shall have one!", "drunk_fight_start", [
]],

[anyone|plyr, "drunk_player_high_renown", [],
"I thought as much. Now, remove yourself from here", "close_window",
[
(assign, "$drunks_dont_pick_fights", 1),
(troop_set_slot, "trp_belligerent_drunk", slot_troop_cur_center, 0),

(call_script, "script_deactivate_tavern_attackers"),

(assign, "$g_belligerent_drunk_leaving", "$g_main_attacker_agent"),

(mission_enable_talk),

(try_for_agents, ":agent"),
 (agent_is_alive, ":agent"),
 (agent_get_position, pos4, ":agent"),
 (agent_set_scripted_destination, ":agent", pos4),
(try_end),

(entry_point_get_position, pos1, 0),
(agent_set_scripted_destination, "$g_main_attacker_agent", pos1),

(assign, "$g_main_attacker_agent", 0),
]],


[anyone, "start",
[
(eq, "$g_talk_troop", "trp_fight_promoter"),
],
"You look like a {fellow/lady} who can take a few hard knocks -- and deal them out, too. I have a business proposition for you.", "fistfight_response", [
]],

[anyone|plyr, "fistfight_response", [],
"How's that?", "fistfight_response_2", [
]],

[anyone, "fistfight_response_2", [
],
"Good -- I'm glad you're interested. Here's the plan... It's a little complicated, so listen well. ", "fistfight_response_2a", [
]],

[anyone, "fistfight_response_2a", [
],
"You and this other fellow will start up a fight here. No weapons, no armor -- I'll sit back and take bets, and split the profits with the winner. If we make a loss, then I'll cover it. You've got nothing to lose -- except a bit of blood, of course.", "fistfight_response_3", [
]],

[anyone, "fistfight_response_3", [
],
"However, we can't organize this like one of those nice arena bouts, where everyone places their bets beforehand. People will walk in, drawn by the noise, and put a denar or two on whichever one of your two they think is winning. I'll give 'em even odds -- anything else is going to be too tricky for someone who's already on his third flagon of ale.", "fistfight_response_4", [
]],

[anyone, "fistfight_response_4", [
],
"So, as you can see, the trick is to stretch things out for as long as possible where it looks like you're losing, and people bet against you -- and then come back fast, and win, before the betting can turn. The best way to make money is for you to be battered almost to the floor, and then jump back off your feet and take the other guy down. However, you have to win in the end in order for me, and you, to make money. ", "fistfight_response_4a", [
]],

[anyone, "fistfight_response_4a", [
],
"Also, you can't stretch the fight out too long, or people will suspect a fix. So, one of you has to take a punch every so often. I don't care whose blood is spilled, but there has to be some blood.", "fistfight_response_5", [
]],

[anyone, "fistfight_response_5", [
],
"And one other thing -- my mate, your opponent, he doesn't take to well to complexity. So he's just going to come straight at you. It's up to you to supply the artistry.", "fistfight_response_5a", [
]],

[anyone, "fistfight_response_5a", [
],
"So, what do you think?", "fistfight_response_confirm", [
]],

[anyone|plyr, "fistfight_response_confirm", [
],
"{!}[Yes -- not yet implemented]", "close_window", [
]],

[anyone|plyr, "fistfight_response_confirm", [
],
"I have better things to do", "close_window", [
]],



[trp_ramun_the_slave_trader, "start", [
(eq, "$g_talk_troop_met", 0), #SB : use global
], "Good day to you, {young man/lassie}.", "ramun_introduce_1",[]],
[trp_ramun_the_slave_trader|plyr, "ramun_introduce_1", [], "Forgive me, you look like a trader, but I see none of your merchandise.", "ramun_introduce_2",[
# (troop_set_slot, "$g_talk_troop", slot_troop_met_previously, 1),
]],
[trp_ramun_the_slave_trader|plyr, "ramun_introduce_1", [], "Never mind.", "close_window",[]],
[trp_ramun_the_slave_trader, "ramun_introduce_2", [], "A trader? Oh, aye, I certainly am that.\
 My merchandise is a bit different from most, however. It has to be fed and watered twice a day and tries to run away if I turn my back.", "ramun_introduce_3",[]],
[trp_ramun_the_slave_trader|plyr, "ramun_introduce_3", [], "Livestock?", "ramun_introduce_4",[]],
[trp_ramun_the_slave_trader, "ramun_introduce_4", [], "Close enough. I like to call myself the man who keeps every boat on this ocean moving.\
 Boats are driven by oars, you see, and oars need men to pull them or they stop. That's where I come in.", "ramun_introduce_5",[]],
[trp_ramun_the_slave_trader|plyr, "ramun_introduce_5", [], "Galley slaves.", "ramun_introduce_6",[]],
[trp_ramun_the_slave_trader, "ramun_introduce_6", [], "Now you're catching on! A trading port like this couldn't survive without them.\
 The ships lose a few hands on every voyage, so there's always a high demand. The captains come to me and they pay well.", "ramun_introduce_7",[]],
[trp_ramun_the_slave_trader|plyr, "ramun_introduce_7", [], "Where do the slaves come from?", "ramun_introduce_8",[]],
[trp_ramun_the_slave_trader, "ramun_introduce_8", [], "Mostly I deal in convicted criminals bought from the authorities.\
 Others are prisoners of war from various nations, brought to me because I offer the best prices.\
 However, on occasion I'll buy from privateers and other . . . 'individuals'. You can't be picky about your suppliers in this line of work.\
 You wouldn't happen to have any prisoners with you, would you?", "ramun_introduce_9",[]],
[trp_ramun_the_slave_trader|plyr, "ramun_introduce_9", [], "Me? ", "ramun_introduce_10",[]],
[trp_ramun_the_slave_trader, "ramun_introduce_10", [], "Why not? If you intend to set foot outside this town,\
 you're going to cross swords with someone sooner or later. And, God willing, you'll come out on top.\
 Why not make some extra money off the whole thing? Take them alive, bring them back to me, and I'll pay you fifty denars for each head.\
 Don't much care who they are or where they come from.", "ramun_introduce_11",[]],
[trp_ramun_the_slave_trader|plyr, "ramun_introduce_11", [], "Hmm. I'll think about it.", "ramun_introduce_12",[]],
[trp_ramun_the_slave_trader, "ramun_introduce_12", [], "Do think about it!\
 There's a lot of silver to be made, no mistake. More than enough for the both of us.", "close_window",[]],

[trp_ramun_the_slave_trader,"start", [], "Hello, {playername}.", "ramun_talk",[]],
[trp_ramun_the_slave_trader,"ramun_pre_talk", [], "Anything else?", "ramun_talk",[]],

[trp_ramun_the_slave_trader|plyr,"ramun_talk",
[[store_num_regular_prisoners,reg(0)],[ge,reg(0),1]],
"I've brought you some prisoners, Ramun. Would you like a look?", "ramun_sell_prisoners",[]],
##diplomacy start+
#Sell all prisoneers, a la rubik's Custom Commander, except when you are asked
#to confirm he tells you the number/price.
  [trp_ramun_the_slave_trader|plyr,"ramun_talk",
   [(store_num_regular_prisoners,reg0),(ge,reg0,1)],
   "I want to sell all the prisoners I have with me.", "ramun_sell_prisoners_all",[]],
  [trp_ramun_the_slave_trader,"ramun_sell_prisoners_all", [
  (store_num_regular_prisoners,reg0),
  (store_mul, reg1, reg0, 50),
  (store_sub, reg2, reg0, 1),
  ],
  "I'll take your {reg0} {reg2?prisoners:prisoner} off your hands for {reg1} denars.  We have a deal?", "ramun_sell_prisoners_all_2", []],
  [trp_ramun_the_slave_trader|plyr,"ramun_sell_prisoners_all_2", [],
   "We have a deal.", "ramun_sell_prisoners_2", [
    (call_script, "script_dplmc_sell_all_prisoners", 1, 50),
    #SB : objection
    (call_script, "script_objectionable_action", tmt_egalitarian, "str_sell_slavery"),
    ]
  ],
  [trp_ramun_the_slave_trader|plyr,"ramun_sell_prisoners_all_2", [],
   "Let me think about it again.", "ramun_pre_talk",[]],
##diplomacy end+
[trp_ramun_the_slave_trader,"ramun_sell_prisoners", [],
"Let me see what you have...", "ramun_sell_prisoners_2",
[[change_screen_trade_prisoners]]],
[trp_ramun_the_slave_trader, "ramun_sell_prisoners_2", [], "A pleasure doing business with you.", "close_window",[
  #SB : objection
  (call_script, "script_objectionable_action", tmt_egalitarian, "str_sell_slavery"),
]],

#SB : use global
[trp_ramun_the_slave_trader|plyr,"ramun_talk", [(eq, "$g_talk_troop_met", 0), ], "How do I take somebody as prisoner?", "ramun_ask_about_capturing",[]],
[trp_ramun_the_slave_trader|plyr,"ramun_talk", [(ge, "$g_talk_troop_met", 0), ], "Can you tell me again about capturing prisoners?", "ramun_ask_about_capturing",[(troop_set_slot,"$g_talk_troop", slot_troop_met_previously, 2)]],

[trp_ramun_the_slave_trader,"ramun_ask_about_capturing", [(neg|troop_slot_ge,"$g_talk_troop",slot_troop_met_previously,1)],
"You're new to this, aren't you? Let me explain it in simple terms.\
The basic rule of taking someone prisoner is knocking him down with a blunt weapon, like a mace or a club,\
rather than cutting him open with a sword. That way he goes to sleep for a little while rather than bleeding to death, you see?\
I'm assuming you have a blunt weapon with you . . .", "ramun_have_blunt_weapon",[]],
[trp_ramun_the_slave_trader|plyr,"ramun_have_blunt_weapon", [],
"Of course.", "ramun_have_blunt_weapon_yes",[]],
[trp_ramun_the_slave_trader|plyr,"ramun_have_blunt_weapon", [],
"As a matter of fact, I don't.", "ramun_have_blunt_weapon_no",[]],
[trp_ramun_the_slave_trader,"ramun_have_blunt_weapon_yes", [],
"Good. Then all you need to do is beat the bugger down with your weapon, and when the fighting's over you clap him in irons.\
It's a bit different for nobles and such, they tend to be protected enough that it won't matter what kind of weapon you use,\
but your average rabble-rouser will bleed like a stuck pig if you get him with something sharp. I don't have many requirements in my merchandise,\
but I do insist they be breathing when I buy them.", "ramun_ask_about_capturing_2",[]],
[trp_ramun_the_slave_trader,"ramun_have_blunt_weapon_no", [],
"No? Heh, well, this must be your lucky day. I've got an old club lying around that I was going to throw away.\
It a bit battered, but still good enough bash someone until he stops moving.\
Here, have it.","ramun_have_blunt_weapon_no_2",[(troop_add_item, "trp_player","itm_club",imod_cracked)]],
[trp_ramun_the_slave_trader|plyr,"ramun_have_blunt_weapon_no_2", [],
"Thanks, Ramun. Perhaps I may try my hand at it.", "ramun_have_blunt_weapon_yes",[]],
[trp_ramun_the_slave_trader,"ramun_ask_about_capturing", [],
"Alright, I'll try and expain it again in simple terms. The basic rule of taking someone prisoner is knocking him down with a blunt weapon, like a mace or a club,\
rather than cutting him open with a sword. That way he goes to sleep for a little while rather than bleeding to death, you see?\
It's a bit different for nobles and such, they tend to be protected enough that it won't matter what kind of weapon you use,\
but your average rabble-rouser will bleed like a stuck pig if you get him with something sharp.", "ramun_ask_about_capturing_2",[]],
[trp_ramun_the_slave_trader|plyr,"ramun_ask_about_capturing_2", [], "Alright, I think I understand. Anything else?", "ramun_ask_about_capturing_3",[]],
[trp_ramun_the_slave_trader,"ramun_ask_about_capturing_3", [],
"Well, it's not as simple as all that. Blunt weapons don't do as much damage as sharp ones, so they won't bring your enemies down as quickly.\
And trust me, given the chance, most of the scum you run across would just as soon kill you as look at you, so don't expect any courtesy when you pull out a club instead of a sword.\
Moreover, having to drag prisoners to and fro will slow down your party, which is why some people simply set their prisoners free after the fighting's done.\
It's madness. How could anyone turn down all that silver, eh?", "ramun_ask_about_capturing_4",[]],
[trp_ramun_the_slave_trader|plyr,"ramun_ask_about_capturing_4", [],
"Is that everything?", "ramun_ask_about_capturing_5",[]],
[trp_ramun_the_slave_trader,"ramun_ask_about_capturing_5", [],
"Just one final thing. Managing prisoners safely is not an easy thing to do, you could call it a skill in itself.\
If you want to capture a lot of prisoners, you should try and learn the tricks of it yourself,\
or you won't be able to hang on to a single man you catch.", "ramun_ask_about_capturing_7",[]],
[trp_ramun_the_slave_trader|plyr,"ramun_ask_about_capturing_7", [],
"Thanks, I'll keep it in mind.", "ramun_pre_talk",[]],

#SB : alternate branch
[trp_ramun_the_slave_trader|plyr,"ramun_talk", [(ge, "$cheat_mode", 1)], "Do you also sell these livestock as well?", "ramun_buy",[]],
[trp_ramun_the_slave_trader|plyr,"ramun_talk", [], "I'd better be going.", "ramun_leave",[]],
[trp_ramun_the_slave_trader,"ramun_leave", [], "Remember, any prisoners you've got, bring them to me. I'll pay you good silver for every one.", "close_window",[]],

  #SB : quickbuy troops cheat
  [anyone|plyr,"tavernkeeper_talk", [(ge, "$cheat_mode", 1)], "CHEAT: So I heard you had troops.", "ramun_buy",[]],
  [anyone,"ramun_buy", [], "Of course. What kind would you like?", "ramun_faction",[]],
  [anyone|repeat_for_factions|plyr,"ramun_faction",
    [  (store_repeat_object, ":faction_no"),
       (this_or_next|is_between, ":faction_no", npc_kingdoms_begin, kingdoms_end),
       (this_or_next|is_between, ":faction_no", "fac_commoners", "fac_neutral"),
       (this_or_next|is_between, ":faction_no", "fac_manhunters", "fac_mountain_bandits"),
       (eq, ":faction_no", "fac_slavers"),
       #(assign, reg1, ":faction_no"),
        (try_begin),
            (is_between, ":faction_no", npc_kingdoms_begin, kingdoms_end),
            (faction_get_slot, ":str", ":faction_no", slot_faction_adjective),
            (str_store_string, s1, ":str"),
            # (store_sub, ":faction_adj", ":faction_no", kingdoms_begin),
            # (val_add, ":faction_adj", "str_kingdoms_adjectives"),
            # (str_store_string, s1, ":faction_adj"),
        (else_try), #fallback
            (str_store_faction_name, s1, ":faction_no"),
        (try_end),
    ], "Some {s1} please.", "ramun_select",
    [(store_repeat_object, "$diplomacy_var"),(str_store_faction_name, s1, "$diplomacy_var"),]
    ],
  [anyone|plyr,"ramun_faction",[], "Nevermind.", "close_window", []],

  [anyone,"ramun_select", [], "So you want some troops from the {s1}?", "ramun_troops",[]],

  [anyone|repeat_for_troops|plyr,"ramun_troops",
    [
        (store_repeat_object, ":troop"),
        (is_between, ":troop", regular_troops_begin, "trp_kidnapped_girl"),#eliminates a load
        (store_faction_of_troop, ":faction", ":troop"),#eliminates the rest
        (eq, ":faction", "$diplomacy_var"),#by faction obviously
        (neg|troop_is_hero, ":troop"),#patrol leaders
        (str_store_troop_name_plural, s2, ":troop"),
        # (assign, reg2, ":troop"),
    ],
    "{s2}", "ramun_select", [(store_repeat_object, ":troop"),(party_add_members, "p_main_party", ":troop", 5)]],
  [anyone|plyr,"ramun_troops",[], "Let's try some other kind of grunts.", "ramun_buy", []],





[trp_nurse_for_lady, "start", [
#  (eq, "$talk_context", tc_garden),
##diplomacy start+ just in case make gender-correct
], "I humbly request that your {lordship/ladyship} keeps {his/her} hands where I can see them.", "close_window",[]],
##diplomacy end+

##  [trp_tutorial_trainer, "start", [(eq, "$tutorial_1_state", 1),], "TODO: Watch me.", "tutorial_1_1_1",[]],
##  [trp_tutorial_trainer, "tutorial_1_1_1", [], "TODO: This is up.", "tutorial_1_1_2",[(agent_set_attack_action, "$g_talk_agent", 3),]],
##  [trp_tutorial_trainer, "tutorial_1_1_2", [], "TODO: This is left.", "tutorial_1_1_3",[(agent_set_attack_action, "$g_talk_agent", 2),]],
##  [trp_tutorial_trainer, "tutorial_1_1_3", [], "TODO: This is right.", "tutorial_1_1_4",[(agent_set_attack_action, "$g_talk_agent", 1),]],
##  [trp_tutorial_trainer|plyr, "tutorial_1_1_4", [], "TODO: OK.", "close_window",[]],


#old tutorial is below

##  [trp_tutorial_trainer,"start", [(eq, "$tutorial_quest_award_taken", 1),], "I think you have trained enough. Perhaps you should go to Zendar for the next step of your adventure.", "close_window",[]],
##  [trp_tutorial_trainer,"start", [(store_character_level, ":player_level", "trp_player"),(gt, ":player_level", 1)], "I think you have trained enough. Perhaps you should go to Zendar for the next step of your adventure.", "close_window",[]],
##  [trp_tutorial_trainer,"start", [(eq, "$tutorial_quest_taken", 0),], "Greetings stranger. What's your name?", "tutorial1_1",[]],
##  [trp_tutorial_trainer|plyr, "tutorial1_1", [], "Greetings sir, it's {playername}.", "tutorial1_2", []],
##  [trp_tutorial_trainer, "tutorial1_2", [], "Well {playername}, this place you see is the training ground. Locals come here to practice their combat skills. Since you are here you may have a go as well.", "tutorial1_3", []],
##  [trp_tutorial_trainer|plyr, "tutorial1_3", [], "I'd like that very much sir. Thank you.", "tutorial1_4", []],
##  [trp_tutorial_trainer, "tutorial1_4", [], "You will learn the basics of weapons and riding a horse here.\
##  First you'll begin with melee weapons. Then you'll enter an archery range to test your skills. And finally you'll see a horse waiting for you.\
##  I advise you to train in all these 3 areas. But you can skip some of them, it's up to you.", "tutorial1_6", []],
##  [trp_tutorial_trainer, "tutorial1_6", [], "Tell you what, if you destroy at least 10 dummies while training, I will give you my old knife as a reward. It's a little rusty but it's a good blade.", "tutorial1_7", []],
##  [trp_tutorial_trainer|plyr, "tutorial1_7", [], "Sounds nice, I'm ready for training.", "tutorial1_9", []],
##  [trp_tutorial_trainer, "tutorial1_9", [], "Good. Return to me when you have earned your reward.", "close_window", [(eq, "$tutorial_quest_taken", 0),
##                                                                                                                     (str_store_troop_name, 1, "trp_tutorial_trainer"),
##                                                                                                                     (str_store_party_name, 2, "p_training_ground"),
##                                                                                                                     (setup_quest_giver, "qst_destroy_dummies", "str_given_by_s1_at_s2"),
##                                                                                                                     (str_store_string, s2, "@Trainer ordered you to destroy 10 dummies in the training camp."),
##                                                                                                                     (call_script, "script_start_quest", "qst_destroy_dummies", "$g_talk_troop"),
##                                                                                                                     (assign, "$tutorial_quest_taken", 1)]],
##
##  [trp_tutorial_trainer,"start", [(eq, "$tutorial_quest_taken", 1),
##                                  (eq, "$tutorial_quest_succeeded", 1),], "Well done {playername}. Now you earned this knife. There you go.", "tutorial2_1",[]],
##  [trp_tutorial_trainer|plyr, "tutorial2_1", [], "Thank you master.", "close_window", [(call_script, "script_end_quest", "qst_destroy_dummies"),(assign, "$tutorial_quest_award_taken", 1),(add_xp_to_troop, 100, "trp_player"),(troop_add_item, "trp_player","itm_knife",imod_chipped),]],
##
##  [trp_tutorial_trainer,"start", [(eq, "$tutorial_quest_taken", 1),
##                                  (eq, "$tutorial_quest_succeeded", 1),], "Greetings {playername}. Feel free to train with the targets.", "tutorial2_1",[]],
##
##  [trp_tutorial_trainer,"start", [(eq, "$tutorial_quest_taken", 1),
##                                  (eq, "$tutorial_quest_succeeded", 0),], "I don't see 10 dummies on the floor from here. You haven't earned your reward yet.", "tutorial3_1",[]],
##  [trp_tutorial_trainer|plyr, "tutorial3_1", [], "Alright alright, I was just tired and wanted to talk to you while resting.", "tutorial3_2", []],
##  [trp_tutorial_trainer, "tutorial3_2", [], "Less talk, more work.", "close_window", []],


##  [party_tpl|pt_peasant,"start", [(eq,"$talk_context",tc_party_encounter)], "Greetings traveller.", "peasant_talk_1",[(play_sound,"snd_encounter_farmers")]],
##  [party_tpl|pt_peasant|plyr,"peasant_talk_1", [[eq,"$quest_accepted_zendar_looters"]], "Greetings to you too.", "close_window",[(assign, "$g_leave_encounter",1)]],
##  [party_tpl|pt_peasant|plyr,"peasant_talk_1", [[neq,"$quest_accepted_zendar_looters"],[eq,"$peasant_misunderstanding_said"]], "I have been charged with hunting down outlaws in this area...", "peasant_talk_2",[[assign,"$peasant_misunderstanding_said",1]]],
##  [party_tpl|pt_peasant|plyr,"peasant_talk_1", [[neq,"$quest_accepted_zendar_looters"],[neq,"$peasant_misunderstanding_said"]], "Greetings. I am hunting outlaws. Have you seen any around here?", "peasant_talk_2b",[]],
##  [party_tpl|pt_peasant,"peasant_talk_2", [], "I swear to God {sir/madam}. I am not an outlaw... I am just a simple peasant. I am taking my goods to the market, see.", "peasant_talk_3",[]],
##  [party_tpl|pt_peasant|plyr,"peasant_talk_3", [], "I was just going to ask if you saw any outlaws around here.", "peasant_talk_4",[]],
##  [party_tpl|pt_peasant,"peasant_talk_4", [], "Oh... phew... yes, outlaws are everywhere. They are making life miserable for us.\
## I pray to God you will kill them all.", "close_window",[(assign, "$g_leave_encounter",1)]],
##  [party_tpl|pt_peasant,"peasant_talk_2b", [], "Outlaws? They are everywhere. They are making life miserable for us.\
## I pray to God you will kill them all.", "close_window",[(assign, "$g_leave_encounter",1)]],

[party_tpl|pt_manhunters,"start", [(eq,"$talk_context",tc_party_encounter)], "Hey, you there! You seen any outlaws around here?", "manhunter_talk_b",[]],
[party_tpl|pt_manhunters|plyr,"manhunter_talk_b", [], "Yes, they went this way about an hour ago.", "manhunter_talk_b1",[]],
[party_tpl|pt_manhunters,"manhunter_talk_b1", [], "I knew it! Come on, lads, lets go get these bastards! Thanks a lot, friend.", "close_window",[(assign, "$g_leave_encounter",1)]],
[party_tpl|pt_manhunters|plyr,"manhunter_talk_b", [], "No, haven't seen any outlaws lately.", "manhunter_talk_b2",[]],
[party_tpl|pt_manhunters,"manhunter_talk_b2", [], "Bah. They're holed up in this country like rats, but we'll smoke them out yet. Sooner or later.", "close_window",[(assign, "$g_leave_encounter",1)]],

[party_tpl|pt_looters|auto_proceed,"start", [(eq,"$talk_context",tc_party_encounter),(encountered_party_is_attacker),], "{!}Warning: This line should never be displayed.", "looters_1",[
(str_store_string, s11, "@It's your money or your life, {mate/girlie}. No sudden moves or we'll run you through."),
(str_store_string, s12, "@Lucky for you, you caught me in a good mood. Give us all your coin and I might just let you live."),
(str_store_string, s13, "@This a robbery, eh? I givin' you one chance to hand over everythin' you got, or me and my mates'll kill you. Understand?"),
(store_random_in_range, ":random", 11, 14),
(str_store_string_reg, s4, ":random"),
(play_sound, "snd_encounter_looters")
]],
[party_tpl|pt_looters,"looters_1", [], "{s4}", "looters_2",[]],
[party_tpl|pt_looters|plyr,"looters_2", [[store_character_level,reg(1),"trp_player"],[lt,reg(1),4]], "I'm not afraid of you lot. Fight me if you dare!", "close_window",
[[encounter_attack]]],
[party_tpl|pt_looters|plyr,"looters_2", [[store_character_level,reg(1),"trp_player"],[ge,reg(1),4]], "You'll have nothing of mine but cold steel, scum.", "close_window",
[[encounter_attack]]],

[party_tpl|pt_village_farmers,"start", [(eq,"$talk_context",tc_party_encounter),
                                    (agent_play_sound, "$g_talk_agent", "snd_encounter_farmers"),
],
#SB : commoner scripted title instead of "My {lord/lady}"
"We're only poor farmers from the village of {s11}, {s0}. {reg1?We are taking our products to the market at {s12}.:We are returning from the market at {s12} back to our village.}", "village_farmer_talk",
[(party_get_slot, ":target_center", "$g_encountered_party", slot_party_ai_object),
(party_get_slot, ":home_center", "$g_encountered_party", slot_party_home_center),
(party_get_slot, ":market_town", ":home_center", slot_village_market_town),
(str_store_party_name, s11, ":home_center"),
(str_store_party_name, s12, ":market_town"),

(call_script, "script_dplmc_print_commoner_at_arg1_says_sir_madame_to_s0", ":market_town"),
(assign, reg1, 1),
(try_begin),
  (party_slot_eq, ":target_center", slot_party_type, spt_village),
  (assign, reg1, 0),
(try_end),
]],

[anyone|plyr,"village_farmer_talk",
[(check_quest_active, "qst_track_down_bandits"),
(neg|check_quest_succeeded, "qst_track_down_bandits"),

], "I am hunting a group of bandits with the following description... Have you seen them?", "farmer_bandit_information",[]],

[anyone,"farmer_bandit_information", [
(call_script, "script_get_manhunt_information_to_s15", "qst_track_down_bandits"),
], "{s15}", "village_farmer_talk",[]],


[anyone|plyr,"village_farmer_talk",
[
(store_faction_of_party, ":faction_of_villager", "$g_encountered_party"),

(neq, ":faction_of_villager", "$players_kingdom"),
(neq, ":faction_of_villager", "fac_player_supporters_faction"),
],
"We'll see how poor you are after I take what you've got!", "close_window",
[(party_get_slot, ":home_center", "$g_encountered_party", slot_party_home_center),
(party_get_slot, ":market_town", ":home_center", slot_village_market_town),
(party_get_slot, ":village_owner", ":home_center", slot_town_lord),
(call_script, "script_change_player_relation_with_center", ":home_center", -4),
(call_script, "script_change_player_relation_with_center", ":market_town", -2),
(call_script, "script_change_player_relation_with_troop", ":village_owner", -2),
(call_script, "script_diplomacy_party_attacks_neutral", "p_main_party", "$g_encountered_party"),

(store_relation,":rel", "$g_encountered_party_faction","fac_player_supporters_faction"),
(try_begin),
(gt, ":rel", 0),
(val_sub, ":rel", 5),
(try_end),

(val_sub, ":rel", 3),
(call_script, "script_set_player_relation_with_faction", "$g_encountered_party_faction", ":rel"),

(assign,"$encountered_party_hostile",1),
(assign,"$encountered_party_friendly",0),
]],
[anyone|plyr,"village_farmer_talk", [], "Carry on, then. Farewell.", "close_window",[(assign, "$g_leave_encounter",1)]],


### COMPANIONS

[anyone,"start", [(gt,"$g_talk_troop", 0),
              (eq, "$g_talk_troop", "$g_player_minister"),
		 ##diplomacy start+ Handle non-reflexive spouse slots (for example, for polygamy)
		 (this_or_next|neg|is_between, "$g_talk_troop", heroes_begin, heroes_end),#slot_troop_spouse may not be initialized to -1
			(neg|troop_slot_eq, "$g_talk_troop", slot_troop_spouse, "trp_player"),
		 ##diplomacy end+
         (neg|troop_slot_eq, "trp_player", slot_troop_spouse, "$g_talk_troop")],
"I am at your service, {sire/my lady}", "minister_issues",[]],

[anyone,"start", [(eq,"$g_talk_troop", "trp_temporary_minister"),
              (neq, "$g_talk_troop", "$g_player_minister")],
"It has been an honor to serve you, {sire/my lady}", "close_window",[]],


[anyone,"start", [(troop_slot_eq,"$g_talk_troop", slot_troop_occupation, slto_player_companion),
              (party_slot_eq, "$g_encountered_party", slot_party_type, spt_castle),
              (party_get_num_companion_stacks, ":num_stacks", "$g_encountered_party"),
              (ge, ":num_stacks", 1),
              (party_stack_get_troop_id, ":castle_leader", "$g_encountered_party", 0),
              (eq, ":castle_leader", "$g_talk_troop"),
              (eq, "$talk_context", 0)],
"Yes, {playername}? What can I do for you?", "member_castellan_talk",[]],

[anyone,"member_castellan_pretalk", [], "Anything else?", "member_castellan_talk",[]],

[anyone|plyr,"member_castellan_talk", [],
"I want to review the castle garrison.", "member_review_castle_garrison",[]],
[anyone,"member_review_castle_garrison", [], "Of course. Here are our lists, let me know of any changes you require...", "member_castellan_pretalk",[(change_screen_exchange_members,0)]],
[anyone|plyr,"member_castellan_talk", [],
"Let me see your equipment.", "member_review_castellan_equipment",[]],
[anyone,"member_review_castellan_equipment", [], "Very well, it's all here...", "member_castellan_pretalk",[(change_screen_equip_other)]],
[anyone|plyr,"member_castellan_talk", [],
"I want you to abandon the castle and join my party.", "member_castellan_join",[]],
[anyone,"member_castellan_join", [(party_can_join_party,"$g_encountered_party","p_main_party")],
"I've grown quite fond of the place... But if it is your wish, {playername}, I'll come with you.", "close_window", [
 (assign, "$g_move_heroes", 1),
 (call_script, "script_party_add_party", "p_main_party", "$g_encountered_party"),
 (party_clear, "$g_encountered_party"),
 ]],
[anyone,"member_castellan_join", [],
"And where would we sleep? You're dragging a whole army with you, {playername}, there's no more room for all of us.", "member_castellan_pretalk",[]],

[anyone|plyr,"member_castellan_talk", [], "[Leave]", "close_window",[]],


[anyone,"start", [(troop_slot_eq,"$g_talk_troop", slot_troop_occupation, slto_player_companion),
              (neg|main_party_has_troop,"$g_talk_troop"),
              (eq, "$talk_context", tc_party_encounter)],
   "{!}Do you want me to rejoin you?", "close_window",[]], # unused
  [anyone,"start", [(neg|main_party_has_troop,"$g_talk_troop"),(eq, "$g_encountered_party", "p_four_ways_inn")], "{!}Do you want me to rejoin you?", "close_window",[]], # unused
#  [anyone,"member_separate_inn", [], "I don't know what you will do without me, but you are the boss. I'll wait for you at the Four Ways inn.", "close_window",
#  [anyone,"member_separate_inn", [], "All right then. I'll meet you at the four ways inn. Good luck.", "close_window",
#   [(remove_member_from_party,"$g_talk_troop", "p_main_party"),(add_troop_to_site, "$g_talk_troop", "scn_four_ways_inn", borcha_inn_entry)]],

##diplomacy start+
##Allow wife to join as companion, by Lathrael (modified)
##Allow dialogues to work while wife is in party
[anyone,"member_chat", [
   (troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_lady),
   #Redundant checks below to work with polygamy
   (this_or_next|troop_slot_eq, "trp_player", slot_troop_spouse, "$g_talk_troop"),
   (troop_slot_eq, "$g_talk_troop", slot_troop_spouse, "trp_player"),
   #Next lines necessary because uninitialized memory = 0 = trp_player
   (this_or_next|troop_slot_eq, "trp_player", slot_troop_spouse, "$g_talk_troop"),
   (is_between, "$g_talk_troop", heroes_begin, heroes_end),
   (call_script, "script_dplmc_print_player_spouse_says_my_husband_wife_to_s0", "$g_talk_troop", 0),
   ], "Yes, {s0}?", "member_talk", []
],
##diplomacy end+

#Quest heroes member chats

[trp_kidnapped_girl,"member_chat", [], "Are we home yet?", "kidnapped_girl_chat_1",[]],
[trp_kidnapped_girl|plyr,"kidnapped_girl_chat_1", [], "Not yet.", "kidnapped_girl_chat_2",[]],
[trp_kidnapped_girl,"kidnapped_girl_chat_2", [], "I can't wait to get back. I've missed my family so much, I'd give anything to see them again.", "close_window",[]],

[anyone,"member_chat",
[
(troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_lady),
], "{playername}, when do you think we can reach our destination?", "member_lady_1",[]],
[anyone|plyr, "member_lady_1", [],  "We still have a long way ahead of us.", "member_lady_2a", []],
[anyone|plyr, "member_lady_1", [],  "Very soon. We're almost there.", "member_lady_2b", []],

[anyone ,"member_lady_2a", [],  "Ah, I am going to enjoy the road for a while longer then. I won't complain.\
 I find riding out in the open so much more pleasant than sitting in the castle all day.\
 You know, I envy you. You can live like this all the time.", "close_window", []],
[anyone ,"member_lady_2b", [],  "That's good news. Not that I don't like your company, but I did miss my little luxuries.\
Still I am sorry that I'll leave you soon. You must promise me, you'll come visit me when you can.", "close_window", []],

[anyone ,"member_chat", [(is_between, "$g_talk_troop", pretenders_begin, pretenders_end),],
"Greetings, {playername}, my first and foremost vassal. I await your counsel.", "supported_pretender_talk", []],
[anyone ,"supported_pretender_pretalk", [],
"Anything else?", "supported_pretender_talk", []],

[anyone|plyr,"supported_pretender_talk", [],
"What do you think about our progress so far?", "pretender_progress",[]],

[anyone,"pretender_progress", [
 (assign, reg11, 0),(assign, reg13, 0),(assign, reg14, 0),(assign, reg15, 0),
 (assign, reg21, 0),(assign, reg23, 0),(assign, reg24, 0),(assign, reg25, 0),

 (try_for_range, ":troop_no", active_npcs_begin, active_npcs_end),
  (troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_hero),
   (store_troop_faction, ":troop_faction", ":troop_no"),
   (try_begin),
     (eq, ":troop_faction", "fac_player_supporters_faction"),
     (neq, ":troop_no", "trp_player"),
     (neq, ":troop_no", "$supported_pretender"),
     (val_add, reg11, 1),
   (else_try),
     (eq, ":troop_faction", "$supported_pretender_old_faction"),
     (neg|faction_slot_eq, "$supported_pretender_old_faction", slot_faction_leader, ":troop_no"),
     (val_add, reg21, 1),
   (try_end),
 (try_end),
 (try_for_range, ":center_no", centers_begin, centers_end),
   (store_faction_of_party, ":center_faction", ":center_no"),
   (try_begin),
     (eq, ":center_faction", "fac_player_supporters_faction"),
     (try_begin),
       (party_slot_eq, ":center_no", slot_party_type, spt_town),
       (val_add, reg13, 1),
     (else_try),
       (party_slot_eq, ":center_no", slot_party_type, spt_castle),
       (val_add, reg14, 1),
     (else_try),
       (party_slot_eq, ":center_no", slot_party_type, spt_village),
       (val_add, reg15, 1),
     (try_end),
   (else_try),
     (eq, ":center_faction", "$supported_pretender_old_faction"),
     (try_begin),
       (party_slot_eq, ":center_no", slot_party_type, spt_town),
       (val_add, reg23, 1),
     (else_try),
       (party_slot_eq, ":center_no", slot_party_type, spt_castle),
       (val_add, reg24, 1),
     (else_try),
       (party_slot_eq, ":center_no", slot_party_type, spt_village),
       (val_add, reg25, 1),
     (try_end),
   (try_end),
 (try_end),
 (store_add, reg19, reg13, reg14),
 (val_add, reg19, reg15),
 (store_add, reg29, reg23, reg24),
 (val_add, reg29, reg25),
 (store_add, ":our_score", reg13, reg14),
 (val_add, ":our_score", reg11),
 (store_add, ":their_score", reg23, reg24),
 (val_add, ":their_score", reg21),
 (store_add, ":total_score", ":our_score", ":their_score"),
 (val_mul, ":our_score", 100),
 (store_div, ":our_ratio", ":our_score", ":total_score"),
 (try_begin),
   (lt, ":our_ratio", 10),
   (str_store_string, s30, "@we have made very little progress so far"),
 (else_try),
   (lt, ":our_ratio", 30),
   (str_store_string, s30, "@we have suceeded in gaining some ground, but we still have a long way to go"),
 (else_try),
   (lt, ":our_ratio", 50),
   (str_store_string, s30, "@we have become a significant force, and we have an even chance of victory"),
 (else_try),
   (lt, ":our_ratio", 75),
   (str_store_string, s30, "@we are winning the war, but our enemies are still holding on."),
 (else_try),
   (str_store_string, s30, "@we are on the verge of victory. The remaining enemies pose no threat, but we still need to hunt them down."),
 (try_end),
 (faction_get_slot, ":enemy_king", "$supported_pretender_old_faction", slot_faction_leader),
 (str_store_troop_name, s9, ":enemy_king"),
##diplomacy start+: Replace "lords" with "{s0}"; "no lord" with "no {s0}"; and use correct gender for enemy king
(call_script, "script_dplmc_print_cultural_word_to_sreg", "$g_talk_troop", DPLMC_CULTURAL_TERM_LORD_PLURAL, s11),
#SB : cultural term for both sides
(call_script, "script_dplmc_print_cultural_word_to_sreg", ":enemy_king", DPLMC_CULTURAL_TERM_LORD_PLURAL, s10),
(call_script, "script_dplmc_store_troop_is_female", ":enemy_king"),
],
##OLD:
#"{reg11?We have {reg11} lords on our side:We have no lord with us yet},\
#whereas {reg21?{s9} still has {reg21} lords supporting him:{s9} has no loyal lords left}.\
#{reg19?We control {reg13?{reg13} towns:} {reg14?{reg14} castles:} {reg15?and {reg15} villages:}:We don't control any settlements},\
#while {reg29?they have {reg23?{reg23} towns:} {reg24?{reg24} castles:} {reg25?and {reg25} villages:}:they have no remaining settlements}.\
#Overall, {s30}.", "pretender_progress_2",[]],
##NEW:
"{reg11?We have {reg11} {s11} on our side:We have no {s11} with us yet},\
 whereas {reg21?{s9} still has {reg21} {s10} supporting {reg0?her:him}:{s9} has no loyal {s10} left}.\
 {reg19?We control {reg13?{reg13} towns:} {reg14?{reg14} castles:} {reg15?and {reg15} villages:}:We don't control any settlements},\
 while {reg29?they have {reg23?{reg23} towns:} {reg24?{reg24} castles:} {reg25?and {reg25} villages:}:they have no remaining settlements}.\
 Overall, {s30}.", "pretender_progress_2",[]],
##diplomacy end+

[anyone|plyr,"pretender_progress_2", [],
"Then, we must keep fighting and rally our supporters!", "supported_pretender_pretalk",[]],

[anyone|plyr,"pretender_progress_2", [],
"It seems this rebellion is not going anywhere. We must give up.", "pretender_quit_rebel_confirm",[]],

[anyone,"pretender_quit_rebel_confirm", [],
"{playername}, you can't abandon me now. Are you serious?", "pretender_quit_rebel_confirm_2",[]],

[anyone|plyr,"pretender_quit_rebel_confirm_2", [],
"Indeed, I am. I can't support you any longer.", "pretender_quit_rebel_confirm_3",[]],

[anyone|plyr,"pretender_quit_rebel_confirm_2", [],
"I was jesting. I will fight for you until we succeed.", "supported_pretender_pretalk",[]],

[anyone,"pretender_quit_rebel_confirm_3", [],
"Are you absolutely sure? I will never forgive you if you abandon my cause.", "pretender_quit_rebel_confirm_4",[]],

[anyone|plyr,"pretender_quit_rebel_confirm_4", [],
"I am sure.", "pretender_quit_rebel",[]],

[anyone|plyr,"pretender_quit_rebel_confirm_4", [],
"Let me think about this some more.", "supported_pretender_pretalk",[]],

[anyone,"pretender_quit_rebel", [],
"So be it. Then my cause is lost. There is only one thing to do for me now. I will go from Calradia and never come back. With me gone, you may try to make your peace with {s4}.", "close_window",
[
(troop_get_slot, ":original_faction", "$g_talk_troop", slot_troop_original_faction),
(faction_get_slot, ":original_faction_leader", ":original_faction", slot_faction_leader),
(str_store_troop_name, s4, ":original_faction_leader"),

##diplomacy start+ Support promoted kingdom ladies
#(try_for_range, ":cur_troop", active_npcs_begin, active_npcs_end),##OLD
(try_for_range, ":cur_troop", heroes_begin, heroes_end),##NEW
##diplomacy end+
  (troop_slot_eq, ":cur_troop", slot_troop_occupation, slto_kingdom_hero),
  (neq, "$supported_pretender", ":cur_troop"),
  (store_troop_faction, ":cur_faction", ":cur_troop"),
  (eq, ":cur_faction", "fac_player_supporters_faction"),
  (call_script, "script_change_troop_faction", ":cur_troop", ":original_faction"),
(try_end),
(troop_set_faction, "$g_talk_troop", "fac_neutral"),
(faction_set_slot, "fac_player_supporters_faction", slot_faction_leader, "trp_player"),
(assign, ":has_center", 0),
(try_for_range, ":cur_center", centers_begin, centers_end),
  (store_faction_of_party, ":cur_faction", ":cur_center"),
  (eq, ":cur_faction", "fac_player_supporters_faction"),
  (assign, ":has_center", 1),
  (neg|party_slot_eq, ":cur_center", slot_town_lord, "trp_player"),
  (call_script, "script_give_center_to_lord", ":cur_center", "trp_player", 0),
(try_end),
(party_remove_members, "p_main_party", "$supported_pretender", 1),
(faction_set_slot, ":original_faction", slot_faction_has_rebellion_chance, 0),
(assign, "$supported_pretender", 0),
(try_begin), #Still has center
  (eq, ":has_center", 1),
  #SB : color does not reset
  (try_begin),
    (store_and, ":color_set", "$players_kingdom_name_set", rename_kingdom),
    (neq, ":color_set", rename_kingdom),
    (faction_set_color, "fac_player_supporters_faction", 0xFF0000),
  (try_end),
  (try_begin), #added to prevent no minister if player gives up rebellion
    (eq, "$g_player_minister", 0),
    (assign, "$g_player_minister", "trp_temporary_minister"),
  (try_end),
(else_try), #No center
  (call_script, "script_deactivate_player_faction"),
(try_end),
(call_script, "script_change_player_honor", -20),
(call_script, "script_fail_quest", "qst_rebel_against_kingdom"),
(call_script, "script_end_quest", "qst_rebel_against_kingdom"),
]],


[anyone|plyr,"supported_pretender_talk", [],
"{reg65?My lady:My lord}, would you allow me to check out your equipment?", "supported_pretender_equip",[]],
[anyone,"supported_pretender_equip", [], "Very well, it's all here...", "supported_pretender_pretalk",[
(change_screen_equip_other),
]],

#SB : fixed dialog state spelling
[anyone|plyr,"supported_pretender_talk", [], "If it would please you, can you tell me about your skills?", "pretender_view_char_requested",[]],
[anyone,"pretender_view_char_requested", [], "Well, all right.", "supported_pretender_pretalk",[(change_screen_view_character)]],


[anyone|plyr,"supported_pretender_talk", [
##diplomacy start+ Handle player is co-ruler of NPC kingdom
(assign, ":alt_faction", "fac_player_supporters_faction"),
(try_begin),
	(is_between, "$players_kingdom", npc_kingdoms_begin, npc_kingdoms_end),
	(call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", "$players_kingdom"),
	(ge, reg0, DPLMC_FACTION_STANDING_LEADER_SPOUSE),
	(assign, ":alt_faction", "$players_kingdom"),
(try_end),
##diplomacy end+
(assign, ":center_found", 0),
(try_for_range, ":fief_to_grant", centers_begin, centers_end),
(store_faction_of_party, ":fief_faction", ":fief_to_grant"),
##diplomacy start+
(this_or_next|eq, ":fief_faction", ":alt_faction"),
##diplomacy end+
(eq, ":fief_faction", "fac_player_supporters_faction"),
(party_slot_eq, ":fief_to_grant", slot_town_lord, -1),
(assign, ":center_found", 1),
(try_end),
(eq, ":center_found", 1),

],
"I suggest that you decide who should hold a fief that does not have a lord.", "supported_pretender_grant_fief",[]],

[anyone,"supported_pretender_grant_fief", [
],
"Which fief did you have in mind?", "supported_pretender_grant_fief_select",[]],

[anyone|plyr|repeat_for_parties,"supported_pretender_grant_fief_select", [
(store_repeat_object, ":fief_to_grant"),
(is_between, ":fief_to_grant", centers_begin, centers_end),
(store_faction_of_party, ":fief_faction", ":fief_to_grant"),
##diplomacy start+ Handle player is co-ruler of NPC kingdom
(assign, ":alt_faction", "fac_player_supporters_faction"),
(try_begin),
	(is_between, "$players_kingdom", npc_kingdoms_begin, npc_kingdoms_end),
	(call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", "$players_kingdom"),
	(ge, reg0, DPLMC_FACTION_STANDING_LEADER_SPOUSE),
	(assign, ":alt_faction", "$players_kingdom"),
(try_end),
(this_or_next|eq, ":fief_faction", ":alt_faction"),
##diplomacy end+
(eq, ":fief_faction", "fac_player_supporters_faction"),
(party_slot_eq, ":fief_to_grant", slot_town_lord, -1),
(str_store_party_name, s4, ":fief_to_grant"),
],
"{s4}", "supported_pretender_grant_fief_choose_recipient",[
(store_repeat_object, "$g_center_taken_by_player_faction"),
]],

[anyone,"supported_pretender_grant_fief_choose_recipient", [
],
"And who should receive it?", "center_captured_rebellion",[
(str_store_party_name, s4, "$g_center_taken_by_player_faction"),
]],

[anyone|plyr,"supported_pretender_grant_fief_select", [
],
"Never mind.", "supported_pretender_pretalk",[]],




[anyone|plyr,"supported_pretender_talk", [],
"Let us keep going, {reg65?my lady:sir}.", "close_window",[]],


[anyone,"do_member_trade", [], "Anything else?", "member_talk",[]],

[anyone,"member_pretalk", [], "Anything else?", "member_talk",[]],




[anyone,"member_chat",
[
(store_conversation_troop,"$g_talk_troop"), 
(troop_is_hero,"$g_talk_troop"),
(troop_get_slot, ":honorific", "$g_talk_troop", slot_troop_honorific),
##diplomacy start+
##To allow this to be used by non-companions
#(str_store_string, s5, ":honorific"),
(try_begin), #SB : polygamy
   (this_or_next|troop_slot_eq, "trp_player", slot_troop_spouse, "$g_talk_troop"),
   (troop_slot_eq, "$g_talk_troop", slot_troop_spouse, "trp_player"),
   (call_script, "script_dplmc_print_player_spouse_says_my_husband_wife_to_s0", "$g_talk_troop", 0),
   (str_store_string_reg, s5, s0),
(else_try), #SB : range
   (is_between, ":honorific", "str_npc1_honorific", "str_npc1_kingsupport_1"),
   (str_store_string, s5, ":honorific"),
(else_try),
   (str_store_string, s5, "@{!}{playername}"),
(try_end),
##diplomacy end+
], "Yes, {s5}?", "member_talk",
[
(try_begin),
  (is_between, "$g_talk_troop", companions_begin, companions_end),
  (unlock_achievement, ACHIEVEMENT_TALKING_HELPS),
(try_end),
]],

[anyone|plyr,"member_talk", [
(is_between, "$players_kingdom", kingdoms_begin, kingdoms_end),
(faction_slot_eq,  "$players_kingdom", slot_faction_marshall, "trp_player"),
], "As marshal, I wish you to send a message to the vassals of the realm", "member_direct_campaign",[]],


[anyone|plyr,"member_talk", [],

"Let me see your equipment.", "member_trade",[]],
[anyone,"member_trade", [], "Very well, it's all here...", "do_member_equip_trade",[
#      (change_screen_trade)
(change_screen_equip_other),
]],

#SB : lewd
[anyone,"do_member_equip_trade", [
  (troop_get_inventory_slot, ":armor", "$g_talk_troop", ek_body),
  (eq, ":armor", -1),
], "What happened to my clothes?", "member_talk",[
]],

[anyone,"do_member_equip_trade", [], "Anything else?", "member_talk",[]],

[anyone|plyr,"member_talk", [], "What can you tell me about your skills?", "view_member_char_requested",[]],
[anyone,"view_member_char_requested", [], "All right, let me tell you...", "do_member_view_char",[(change_screen_view_character)]],

##diplomacy start+
##Allow wife to join as companion, by Lathrael (modified)
##Separate dialogue for wife leaving party
[anyone|plyr,"member_talk", [
   (troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_lady),
   (this_or_next|troop_slot_eq, "trp_player", slot_troop_spouse, "$g_talk_troop"),
   (troop_slot_eq, "$g_talk_troop", slot_troop_spouse, "trp_player"),
   (troop_get_slot, ":cur_center", "$g_talk_troop", slot_troop_cur_center), #household
   (try_begin), #court
     (is_between, "$g_player_court", centers_begin, centers_end), #court has to exists
     (assign, ":cur_center", "$g_player_court"),
     (assign, reg5, 1),
   (else_try), #household
     (assign, reg5, 0),
   (try_end),
   (store_faction_of_party, ":court_faction", ":cur_center"),
   (eq, ":court_faction", "$players_kingdom"),
   (is_between, ":cur_center", walled_centers_begin, walled_centers_end),
   (str_store_party_name, s5, ":cur_center"),
   ], "This is unsafe for you. You should get back to our {reg5?court:household} in {s5}.", "spouse_leave",[
   
]],

#TODO: add relocate household in friendly $current_town

#SB : besieged court not "safe"
[anyone, "spouse_leave", [
   (troop_get_slot, ":cur_center", "$g_talk_troop", slot_troop_cur_center), #household
   (try_begin), #court
     (is_between, "$g_player_court", centers_begin, centers_end), #court has to exists
     (assign, ":cur_center", "$g_player_court"),
   (try_end),
   (neq, ":cur_center", "$current_town"), #same location
   (this_or_next|party_slot_eq, ":cur_center", slot_village_infested_by_bandits, "trp_peasant_woman"), #rebellion
   (party_slot_ge, ":cur_center", slot_center_is_besieged_by, 1), #obviously not sieged by player
   (call_script, "script_dplmc_print_player_spouse_says_my_husband_wife_to_s0", "$g_talk_troop", 0),
   ], "Are you trying to send me to my death, {playername}? We both know that our home is under attack.", "spouse_leave_confirm", []],


[anyone, "spouse_leave", [
   (call_script, "script_dplmc_print_player_spouse_says_my_husband_wife_to_s0", "$g_talk_troop", 0),
   ], "Are you sure, {s0}?", "spouse_leave_confirm", []],

[anyone|plyr,"spouse_leave_confirm", [], "Yes.", "close_window", [
   (remove_member_from_party, "$g_talk_troop"),
]],
[anyone|plyr,"spouse_leave_confirm", [], "No, I'd rather have you at my side.", "do_member_trade",[]],

#SB : TODO : add conditions to prevent separation/missions while defending a siege
#Non-wife version:
[anyone|plyr,"member_talk", [
   (neg|troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_lady),
   (this_or_next|neg|troop_slot_eq,"trp_player",slot_troop_spouse,"$g_talk_troop"),
   (neg|troop_slot_eq,"$g_talk_troop",slot_troop_spouse,"trp_player"),
   ],"We need to separate for a while.", "member_separate", [
   (call_script, "script_dplmc_npc_morale", "$g_talk_troop", 0), #SB : just numbers
   (assign, "$npc_quit_morale", reg0),
]],
#[anyone|plyr,"member_talk", [], "We need to separate for a while.", "member_separate",[
#      (call_script, "script_npc_morale", "$g_talk_troop"),
#      (assign, "$npc_quit_morale", reg0),
#]],
##diplomacy end+

##diplomacy start+
#Kingdom hero leaves party
[anyone,"member_separate", [
    #Determine if g_talk_troop is an enfeoffed lord in his own right who
    #had been temporarily with the party.
    (call_script, "script_get_number_of_hero_centers", "$g_talk_troop"),

    (this_or_next|gt, reg0, 0),
    (this_or_next|is_between, "$g_talk_troop", lords_begin, lords_end),
    (this_or_next|is_between, "$g_talk_troop", kings_begin, kings_end),
    (this_or_next|is_between, "$g_talk_troop", pretenders_begin, pretenders_end),
    (this_or_next|troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_hero),#<- I think that would be an error, since kingdom heroes are supposed to be leading parties, but it would mean that the character is really a lord
    (this_or_next|is_between, "$g_talk_troop", lords_begin, lords_end),
        (troop_slot_eq, "$g_talk_troop", slot_troop_playerparty_history, dplmc_pp_history_lord_rejoined),
], "Very well, I will return to managing my own estate.", "close_window",
[
    (troop_set_slot, "$g_talk_troop", slot_troop_occupation, slto_kingdom_hero),
    (remove_member_from_party, "$g_talk_troop"),
]],
##diplomacy end+

[anyone,"member_separate", [
      (gt, "$npc_quit_morale", 30),
], "Oh really? Well, I'm not just going to wait around here. I'm going to go to the towns to look for other work. Is that what you want?", "member_separate_confirm",
[]],

[anyone,"member_separate", [
], "Well, actually, there was something I needed to tell you.", "companion_quitting",
[
  (assign, "$player_can_refuse_npc_quitting", 0),
  (assign, "$player_can_persuade_npc", 0),
 ]],


[anyone|plyr,"member_separate_confirm", [], "That's right. We need to part ways.", "member_separate_yes",[]],
[anyone|plyr,"member_separate_confirm", [], "No, I'd rather have you at my side.", "do_member_trade",[]],

[anyone,"member_separate_yes", [
], "Well. I'll be off, then. Look me up if you need me.", "close_window",
[
      (troop_set_slot, "$g_talk_troop", slot_troop_occupation, 0),
      (troop_set_slot, "$g_talk_troop", slot_troop_playerparty_history, pp_history_dismissed),
      (remove_member_from_party, "$g_talk_troop"),
 ]],


[anyone|plyr,"member_talk", [
  #SB : can't ask wife those stupid questions
  (troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_player_companion),
  #also prevent people who are about to leave on a quest
  (neg|troop_slot_ge, "$g_talk_troop", slot_troop_current_mission, 1),
], "I'd like to ask you something.", "member_question",[]],

[anyone|plyr,"member_talk", [], "Never mind.", "close_window",[]],

[anyone,"member_question", [], "Very well. What did you want to ask?", "member_question_2",[]],

#SB : quest delegation
[anyone|plyr,"member_question_2", [
    #has an active quest, coarse range check
    (assign, ":end", delegate_quests_end),
    (try_for_range, ":quest_no", delegate_quests_begin, ":end"),
      (check_quest_active, ":quest_no"),
      (neg|quest_slot_eq, slot_quest_delegate_level, -1),
      (assign, ":end", delegate_quests_begin),
    (try_end),
    (neq, ":end", delegate_quests_end),
], "I have a job I'd like for you to handle...", "member_delegate_quest", [
  (call_script, "script_dplmc_init_quest_delegate_states"), #older savegames
  (troop_get_slot, ":honorific", "$g_talk_troop", slot_troop_honorific),
  (str_store_string, s5, ":honorific"),
]],
[anyone|plyr,"member_question_2", [], "How do you feel about the way things are going in this company?", "member_morale",[]],
#SB : removed duplicate member_background_recap
[anyone|plyr,"member_question_2", [
    ##diplomacy start+ Prevent this from appearing for non-"companion" troops
    (is_between, "$g_talk_troop", companions_begin, companions_end),
    ##diplomacy end+
], "Tell me your story again.", "member_background_recap",[]],
[anyone|plyr,"member_question_2", [
    ##diplomacy start+ Prevent this from appearing for non-"companion" troops
    (is_between, "$g_talk_troop", companions_begin, companions_end),
    (troop_slot_ge, "$g_talk_troop", slot_troop_home, 1),
    (troop_slot_ge, "$g_talk_troop", slot_troop_home_recap, 1),
    (troop_slot_ge, "$g_talk_troop", slot_troop_backstory_b, 1),
    ##diplomacy end+
    (troop_slot_eq, "$g_talk_troop", slot_troop_kingsupport_state, 0),
], "I suppose you know that I aspire to be {king/queen} of this land?", "member_kingsupport_1",[]],

[anyone|plyr,"member_question_2", [
    ##diplomacy start+ Prevent this from appearing for non-"companion" troops
    (is_between, "$g_talk_troop", companions_begin, companions_end),
    ##diplomacy end+
], "Do you have any connections that we could use to our advantage?", "member_intelgathering_1",[]],

# #TODO: steal some disguises from companions 
# [anyone|plyr,"member_question_2", [
    # (is_between, "$g_talk_troop", companions_begin, companions_end),
    # (call_script, "script_dplmc_store_troop_is_female_reg", "$g_talk_troop", 4),
    # (eq, reg4, "$character_gender"),
# ], "Do you have any old aclothing I could borrow?", "close_window",[]],

[anyone|plyr,"member_question_2", [
    ##diplomacy start+ Prevent this from appearing for already-enfeoffed troops
    (call_script, "script_get_number_of_hero_centers", "$g_talk_troop"),
    (eq, reg0, 0),
    (neg|troop_slot_eq, "$g_talk_troop", slot_troop_playerparty_history, dplmc_pp_history_lord_rejoined),
    (neg|troop_slot_eq, "$g_talk_troop", slot_troop_playerparty_history, dplmc_pp_history_granted_fief),
    (neg|troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_hero),
    (neg|is_between, "$g_talk_troop", lords_begin, lords_end),
    (neg|is_between, "$g_talk_troop", kings_begin, kings_end),
    (neg|is_between, "$g_talk_troop", pretenders_begin, pretenders_end),
    ##Enable promotion when player is co-ruler
    (assign, reg0, DPLMC_FACTION_STANDING_LEADER_SPOUSE - 1),
    (try_begin),
        (is_between, "$players_kingdom", npc_kingdoms_begin, npc_kingdoms_end),
        (call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", "$players_kingdom"),
    (try_end),
    (this_or_next|ge, reg0, DPLMC_FACTION_STANDING_LEADER_SPOUSE),
    (this_or_next|is_between, "$supported_pretender", pretenders_begin, pretenders_end), #SB : allow promotion while rebelling
##diplomacy end+
    (faction_slot_eq, "$players_kingdom", slot_faction_leader, "trp_player"),
], "Would you be interested in holding a fief?", "member_fief_grant_1",[]],


[anyone,"member_morale", [
  (call_script, "script_dplmc_npc_morale", "$g_talk_troop", 1), #SB : get verbose string
], "{s21}", "do_member_trade",[]],

[anyone,"member_background_recap", [
    (troop_get_slot, ":first_met", "$g_talk_troop", slot_troop_first_encountered),
    (str_store_party_name, s20, ":first_met"),
    (troop_get_slot, ":home", "$g_talk_troop", slot_troop_home),
    (str_store_party_name, s21, ":home"),
    (troop_get_slot, ":recap", "$g_talk_troop", slot_troop_home_recap),
    (str_store_string, s5, ":recap"),
], "{s5}", "member_background_recap_2",[]],

[anyone,"member_background_recap_2", [
    (str_clear, s19),
    (troop_get_slot, ":background", "$g_talk_troop", slot_troop_backstory_b),
    (str_store_string, s5, ":background"),
], "{s5}", "member_background_recap_3",[]],

[anyone,"member_background_recap_3", [
], "Then shortly after, I joined up with you.", "do_member_trade",[]],

[anyone,"do_member_view_char", [], "Anything else?", "member_talk",[]],


[anyone,"member_kingsupport_1", [
 (troop_get_slot, ":morality_grievances", "$g_talk_troop", slot_troop_morality_penalties),
 (gt, ":morality_grievances", 10),
  ], "Um... Yes. I had heard.", "do_member_trade",[]],

[anyone,"member_kingsupport_1", [
 (store_sub, ":npc_no", "$g_talk_troop", "trp_npc1"),
 (store_add, ":string", "str_npc1_kingsupport_1", ":npc_no"),
#		 (troop_get_slot, ":string", "$g_talk_troop", slot_troop_kingsupport_string_1),
 (str_store_string, s21, ":string"),
  ], "{s21}", "member_kingsupport_1a",[]],

[anyone|plyr,"member_kingsupport_1a", [
  ], "Would you then support my cause?", "member_kingsupport_2",[]],

[anyone|plyr,"member_kingsupport_1a", [
  ], "Very good. I shall keep that in mind.", "do_member_trade",[]],


[anyone,"member_kingsupport_2", [
(assign, ":companion_already_on_mission", -1),
(try_for_range, ":companion", companions_begin, companions_end),
   (troop_slot_eq, ":companion", slot_troop_occupation, slto_player_companion),
   (troop_get_slot, ":days_on_mission", ":companion", slot_troop_days_on_mission),
   (gt, ":days_on_mission", 17),
   (neg|main_party_has_troop, ":companion"),
   (assign, ":companion_already_on_mission", ":companion"),
(try_end),

(gt, ":companion_already_on_mission", -1),
(troop_get_slot, ":honorific", "$g_talk_troop", slot_troop_honorific),
(str_store_string, s21, ":honorific"),
(str_store_troop_name, s22, ":companion_already_on_mission"),

], "I would, {s21}. Moreover, I have a proposal on how I might help you attain your throne. But you recently sent {s22} off on a similar mission. Perhaps we should wait for a couple of weeks to avoid drawing too much attention to ourselves.", "do_member_trade",[]],


[anyone,"member_kingsupport_2", [
 (store_sub, ":npc_no", "$g_talk_troop", "trp_npc1"),
 (store_add, ":string", "str_npc1_kingsupport_2", ":npc_no"),
#		 (troop_get_slot, ":string", "$g_talk_troop", slot_troop_kingsupport_string_2),
 (str_store_string, s21, ":string"),
  ], "{s21}", "member_kingsupport_2a",[]],

[anyone|plyr,"member_kingsupport_2a", [
 (store_sub, ":npc_no", "$g_talk_troop", "trp_npc1"),
 (store_add, ":string", "str_npc1_kingsupport_2a", ":npc_no"),
#  		 (troop_get_slot, ":string", "$g_talk_troop", slot_troop_kingsupport_string_2a),
 (str_store_string, s21, ":string"),
  ], "{s21}", "member_kingsupport_3",[]],

[anyone|plyr,"member_kingsupport_2a", [
 (store_sub, ":npc_no", "$g_talk_troop", "trp_npc1"),
 (store_add, ":string", "str_npc1_kingsupport_2b", ":npc_no"),
#    	 (troop_get_slot, ":string", "$g_talk_troop", slot_troop_kingsupport_string_2b),
 (str_store_string, s21, ":string"),

  ], "{s21}", "do_member_trade",[]],

[anyone,"member_kingsupport_3", [
 (store_sub, ":npc_no", "$g_talk_troop", "trp_npc1"),
 (store_add, ":string", "str_npc1_kingsupport_3", ":npc_no"),
#		 (troop_get_slot, ":string", "$g_talk_troop", slot_troop_kingsupport_string_3),
 (str_store_string, s21, ":string"),
  ], "{s21}", "member_kingsupport_3a",[]],


[anyone|plyr,"member_kingsupport_3a", [
  ], "Very good. You do that.", "member_kingsupport_4",[
]],

[anyone|plyr,"member_kingsupport_3a", [
  ], "On second thought, stay with me for a while.", "do_member_trade",[]],

[anyone,"member_kingsupport_4", [
 (troop_set_slot, "$g_talk_troop", slot_troop_days_on_mission, 21),
 (troop_set_slot, "$g_talk_troop", slot_troop_current_mission, npc_mission_kingsupport),

 (remove_member_from_party, "$g_talk_troop", "p_main_party"),

 (troop_get_slot, ":string", "$g_talk_troop", slot_troop_honorific),
 (str_store_string, s21, ":string"),

 ], "Farewell then, {s21}, for a little while.", "close_window",[]],

#SB : prohibit intel-gathering in own faction
[anyone,"member_intelgathering_1", [
 (troop_get_slot, ":town_with_contacts", "$g_talk_troop", slot_troop_town_with_contacts),
 (store_faction_of_party, ":contact_town_faction", ":town_with_contacts"),
 (is_between, "$players_kingdom", kingdoms_begin, kingdoms_end),
 (eq, ":contact_town_faction", "$players_kingdom"), #own faction
 (str_store_party_name, s17, ":contact_town_faction"),
 (party_get_slot, ":town_ruler", ":town_with_contacts", slot_town_lord),
 (try_begin),
   (is_between, ":town_ruler", heroes_begin, heroes_end),
   (assign, reg18, 1),
   (str_store_troop_name, s18, ":town_ruler"),
 (else_try), #own city, unassigned, etc instead of defaulting to ruler
   (assign, reg18, 0),
 (try_end),
 
 #use cached instability value
 (faction_get_slot, ":instability", ":contact_town_faction", slot_faction_instability), #0 to 100
 (val_min, ":instability", 60), #no descriptor past that point
 (val_div, ":instability", 20), #3 to 0
 (store_sub, ":string", "str_the_s12_is_a_rock_of_stability_politically_speaking_whatever_the_lords_may_think_of_each_other_they_fight_as_one_against_the_common_foe", ":instability"),
 (str_store_string, s12, "@our realm"), #instead of directly storing faction name
 (str_store_string, s19, ":string"),
 (call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),
 ], "Aye, {s0}, I do have some friends back in {s17}... However, I do not believe {reg18?{s18} would take kindly to this sort of skullduggery:the political landscape is changing so drastically}. It is common knowledge that {s19}", "do_member_trade",[
 #SB : initialize global
 (assign, "$lord_selected", -1),
 ]],
 
[anyone,"member_intelgathering_1", [
 (troop_get_slot, ":town_with_contacts", "$g_talk_troop", slot_troop_town_with_contacts),
 (str_store_party_name, s17, ":town_with_contacts"),
 (store_faction_of_party, ":contact_town_faction", ":town_with_contacts"),
 (str_store_faction_name, s18, ":contact_town_faction"),

 (store_sub, ":npc_no", "$g_talk_troop", "trp_npc1"),
 (store_add, ":connections_string", "str_npc1_intel_mission", ":npc_no"),
 (str_store_string, s21, ":connections_string"),
 ], "{s21}", "member_intelgathering_3",[
 #SB : initialize global
 (assign, "$lord_selected", -1),
 ]],

[anyone,"member_intelgathering_3", [ #change back to member_intelgathering_2 if this will be used
(eq, 1, 0),
], "Of course, as few people should know of this as possible. If you want to collect the information, or pull me out, then don't send a messenger. Come and get me yourself -- even if that means you have to sneak through the gates.", "member_intelgathering_3",[]],

[anyone|plyr,"member_intelgathering_3", [
 ], "Splendid idea -- you do that.", "member_intelgathering_4",[]],

#SB : enable qst_rescue_prisoner branching instead of gathering intel
[anyone|plyr,"member_intelgathering_3", [
  (check_quest_active, "qst_rescue_prisoner"),
  (quest_get_slot, ":prisoner", "qst_rescue_prisoner", slot_quest_target_troop),
  (is_between, ":prisoner", active_npcs_begin, active_npcs_end),
  (troop_get_slot, ":center", ":prisoner", slot_troop_prisoner_of_party),
  (troop_slot_eq, "$g_talk_troop", slot_troop_town_with_contacts, ":center"),
  (str_store_troop_name, s10, ":prisoner"),
  (call_script, "script_dplmc_store_troop_is_female_reg", ":prisoner", 4),
 ], "Excellent. While you're there, do check on our chained friend {s10} and make sure {reg4?she:he} is still in one piece.", "member_intelgathering_rescue",[
   (quest_get_slot, "$lord_selected", "qst_rescue_prisoner", slot_quest_target_troop),
 ]],
 
#SB : enable this while not questing
[anyone|plyr,"member_intelgathering_3", [
  (troop_get_slot, ":center_no", "$g_talk_troop", slot_troop_town_with_contacts),
  (store_faction_of_party, ":faction_no", ":center_no"),
  #has to be hostile center - can't go around rescuing people without diplomatic incident
  (call_script, "script_dplmc_get_faction_truce_length_with_faction", "$players_kingdom", ":faction_no"),
  (le, reg0, 0),
  (try_begin), #do not use second option when first one exists
    (check_quest_active, "qst_rescue_prisoner"),
    (quest_get_slot, ":prisoner", "qst_rescue_prisoner", slot_quest_target_troop),
    (troop_slot_eq, ":prisoner", slot_troop_prisoner_of_party, ":center_no"),
    (assign, ":center_no", -1),
  (try_end),
  (is_between, ":center_no", walled_centers_begin, walled_centers_end),
  (party_get_num_prisoner_stacks, ":stack_no", ":center_no"),
  (try_for_range, ":prisoner_stack", 0, ":stack_no"),
    (party_prisoner_stack_get_troop_id, ":troop", ":center_no", ":prisoner_stack"),
    (troop_is_hero, ":troop"),
    (is_between, ":troop", active_npcs_begin, active_npcs_end),
    (store_faction_of_troop, ":faction_no", ":troop"),
    (this_or_next|eq, ":faction_no", "$players_kingdom"),
    (eq, ":faction_no", "fac_player_supporters_faction"),
    (assign, "$lord_selected", ":troop"),
    (assign, ":stack_no", -1), #loop break
    (call_script, "script_faction_get_adjective_to_s10", ":faction_no"),
  (try_end),
  
  (eq, ":stack_no", -1), #valid target
 
 ], "I heard rumours of a {s10} aristocrat jailed there.", "member_intelgathering_rescue",[]],
[anyone|plyr,"member_intelgathering_3", [
 ], "Actually, hold off for now.", "do_member_trade",[]],

[anyone,"member_intelgathering_rescue", [
 # (quest_get_slot, ":prisoner", "qst_rescue_prisoner", slot_quest_target_troop),
 (troop_set_slot, "$g_talk_troop", slot_troop_days_on_mission, 7),
 (troop_set_slot, "$g_talk_troop", slot_troop_current_mission, dplmc_npc_mission_rescue_prisoner),
 (troop_set_slot, "$g_talk_troop", slot_troop_mission_object, "$lord_selected"),

 (remove_member_from_party, "$g_talk_troop", "p_main_party"),

 (troop_get_slot, ":string", "$g_talk_troop", slot_troop_honorific),
 (str_store_string, s21, ":string"),
 (str_store_troop_name, s20, "$lord_selected"),

 ], "Yes, we can use this opportunity to ingratiate ourselves with {s20}. I will do my best to put together a rescue plan, {s21}. It will be about a week before you'll hear back from me.", "close_window",
 [
 #evaluate chance of success, three outcomes : successful rescue, failed rescue, failed and captured
 
 (store_skill_level, ":management", "skl_prisoner_management", "$g_talk_troop"),
 (store_skill_level, ":persuasion", "skl_persuasion", "$g_talk_troop"),
 (store_skill_level, ":athletics", "skl_athletics", "$g_talk_troop"),
 # (store_skill_level, ":riding", "skl_riding", "$g_talk_troop"), #in town, no horses for getaways
 (store_attribute_level, ":str", "$g_talk_troop", ca_strength),
 (store_attribute_level, ":agi", "$g_talk_troop", ca_agility),
 (store_attribute_level, ":int", "$g_talk_troop", ca_intelligence),
 (store_attribute_level, ":cha", "$g_talk_troop", ca_charisma),
 
 (store_add, ":base_score", ":management", ":persuasion"), #usually not levelled skills, oh well
 (val_mul, ":base_score", 3), #from 0 to 60 max
 (val_add, ":base_score", ":int"), #10 to 90ish
 (val_add, ":base_score", ":cha"), #20 to 100ish
 
 (troop_get_slot, ":center_no", "$g_talk_troop", slot_troop_town_with_contacts),
 #chance is calculated against player's relation with center inherited by companions
 (party_get_slot, ":center_relation", ":center_no", slot_center_player_relation),
 (val_div, ":center_relation", 4), #normalize -25 to 25
 (store_sub, ":center_relation", 125, ":center_relation"), #150 to 100
 (store_random_in_range, ":random", 0, ":center_relation"),
 (try_begin),
   (lt, ":random", ":base_score"),
   (troop_set_slot, "$g_talk_troop", dplmc_slot_troop_mission_diplomacy, 0), #success
 (else_try),
   (troop_set_slot, "$g_talk_troop", dplmc_slot_troop_mission_diplomacy, 1), #epic fail
   (store_mul, ":base_score", ":athletics", 4), #0 to 40
   (store_skill_level, ":athletics", "skl_athletics", "$lord_selected"), #lords have 1-5 athletics
   (val_mul, ":athletics", 3), #3 to 15
   (val_add, ":base_score", ":athletics"),
   # (val_mul, ":agi", 2),
   (val_add, ":base_score", ":agi"), #10 to 70
   (val_add, ":base_score", ":str"), #20 to 90
   (store_random_in_range, ":random", 0, 100),
   (lt, ":random", ":base_score"),
   (troop_set_slot, "$g_talk_troop", dplmc_slot_troop_mission_diplomacy, -1), #fail & not caught
 (try_end),
 
 #results should really take into account lord's health in a week + slot_town_last_nearby_fire_time
 ]],
 
[anyone,"member_intelgathering_4", [
 (troop_set_slot, "$g_talk_troop", slot_troop_days_on_mission, 5),
 (troop_set_slot, "$g_talk_troop", slot_troop_current_mission, npc_mission_gather_intel),

 (remove_member_from_party, "$g_talk_troop", "p_main_party"),

 (troop_get_slot, ":string", "$g_talk_troop", slot_troop_honorific),
 (str_store_string, s21, ":string"),

 ], "Good. I should be ready to report in about five days. Farewell then, {s21}, for a little while.", "close_window",[]],
 
#SB : quest delegation fail by health
[anyone,"member_delegate_quest", [
  (troop_is_wounded, "$g_talk_troop"),
], "Alas, {s5}, I have yet to heal from my wounds. Give me a few days to recuperate and I can be of more service then.", "do_member_trade",[]],


#fail by having too many active quests
[anyone,"member_delegate_quest", [
  #higher threshold from leadership level or faction standing?
  (assign, ":limit", 1),
  (assign, ":end", companions_end),
  (try_for_range, ":companion", companions_begin, ":end"),
    (troop_slot_ge, ":companion", slot_troop_current_mission, 1),
    (val_sub, ":limit", 1),
    (str_store_troop_name, s6, ":companion"),
    (try_begin),
      (le, ":limit", 0),
      (call_script, "script_companion_get_mission_string", ":companion"),
      (assign, ":end", companions_begin),
    (try_end),
  (try_end),
  (le, ":limit", 0),
], "I believe it would be wiser to stick together for now, since {s4} has yet to return from {s8}.", "do_member_trade",[]],

#fail by level
[anyone,"member_delegate_quest", [
  (store_character_level, ":level", "$g_talk_troop"),
  (lt, ":level", 5), #basic threshold for "Getting to know each-other" or "Worldly enough to listen"
  (troop_get_slot, ":m_type", "$g_talk_troop", slot_troop_morality_type),
  (troop_get_slot, ":m_val", "$g_talk_troop", slot_troop_morality_value),
  (str_store_string, s6, "@We've barely gotten to know one another and now you're sending me away!"),
  (try_begin), #strong objection
    (gt, ":m_val", 2),
    (try_begin),
      (eq, ":m_type", tmt_aristocratic),
      (str_store_string, s6, "@I am certainly not your errant {reg65?girl:boy}..."),
    (else_try),
      (eq, ":m_type", tmt_egalitarian),
      (str_store_string, s6, "@How do I know there will still be a place for me when I return from this journey?"),
    (else_try),
      (eq, ":m_type", tmt_humanitarian),
      (str_store_string, s6, "@I believe I would be of more use by staying with the other soldiers."),
    (try_end),
  (try_end),
], "This is not what I signed up for when I joined your company, {s5}. {s6}", "do_member_trade",[]],

#fail by morale
[anyone,"member_delegate_quest", [
  (call_script, "script_dplmc_npc_morale", "$g_talk_troop", 1),
  (lt, reg0, 30),
  (neq, "$disable_npc_complaints", 1),
 ], "Look, {s5} - if you want me out of your hair for a bit, just say the word and I'll gladly depart. But don't expect me to be doing you any favours while I'm gone.", "close_window",[]],

[anyone,"member_delegate_quest", [
  
], "Very well {s5}, what will you have me do?", "member_delegate_quest_list",[
  (store_conversation_agent, "$g_talk_agent"),
  (try_begin),
    (call_script, "script_cf_dplmc_troop_is_female", "$g_talk_troop"),
    (agent_set_animation, "$g_talk_agent", "anim_stand_lady"),
  (else_try),
    (agent_set_animation, "$g_talk_agent", "anim_stand_lord"),
  (try_end),
  (store_random_in_range, ":random_no", 0, 100),
  (agent_set_animation_progress, "$g_talk_agent", ":random_no"),
]],

# could do repeat_for_troops quest giver?
[anyone|plyr, "member_delegate_quest_list", [], "Nevermind.", "redo_member_quest", []],
[anyone|plyr|repeat_for_100, "member_delegate_quest_list",
[
  (store_repeat_object, ":quest"),
  (val_add, ":quest", all_quests_begin), #starts at 0
  (lt, ":quest", all_quests_end),
  (neg|quest_slot_eq, ":quest", slot_quest_delegate_level, -1),
  (check_quest_active, ":quest"),
  (neg|check_quest_concluded, ":quest"),
  # (str_store_quest_name, s2, ":quest"), #TODO replace with description rather than relying on preset
  (store_add, ":quest_string", ":quest", "str_dplmc_npc_qst_deliver_message"),
  (str_store_string, s2, ":quest_string"),
  (quest_get_slot, ":quest_giver", ":quest", slot_quest_giver_troop),
  (try_begin), #elders, guildmasters
    (is_between, ":quest_giver", merchants_begin, merchants_end),
    (quest_get_slot, ":quest_center", ":quest", slot_quest_giver_center),
    (str_store_party_name, s3, ":quest_center"),
  (else_try),
    (gt, ":quest_giver", 0),
    (str_store_troop_name, s3, ":quest_giver"),
  (else_try), #me_irl
    (str_store_string, s3, "str_me"),
  (try_end),
],
"{s2} for {s3}.", "member_delegate_quest_details",
[
  (store_repeat_object, "$random_merchant_quest_no"),
  (val_add, "$random_merchant_quest_no", all_quests_begin),
]],

#filter out the ones they can't do
# [anyone, "member_delegate_quest_details", [
  # (quest_slot_eq, "$random_merchant_quest_no", slot_quest_delegate_level, -1),
  # ],
 # "I believe you have a personal obligation to fulfil that instead of sending me there on your behalf.", "member_delegate_quest_list", []
 # ],

# #filter out the ones they can't do
# [anyone, "member_delegate_quest_details", [
  # (store_character_level, ":level", "$g_talk_troop"),
  # (quest_slot_ge, "$random_merchant_quest_no", slot_quest_delegate_level, ":level"),
  # ],
 # "I don't believe I can handle that one myself, {s5}.", "member_delegate_quest_list", []
 # ],

#debug printouts
[anyone, "member_delegate_quest_details", [
  (try_for_range, ":sreg", s10, s21),
    (str_clear, ":sreg"),
  (try_end),
  (try_begin),
    (quest_get_slot, ":target", "$random_merchant_quest_no", slot_quest_target_center),
    (gt, ":target", 0),
    (str_store_party_name, s10, ":target"),
  (try_end),
  (try_begin),
    (quest_get_slot, ":target", "$random_merchant_quest_no", slot_quest_target_troop),
    (gt, ":target", 0),
    (str_store_troop_name, s11, ":target"),
  (try_end),
  (try_begin),
    (quest_get_slot, ":target", "$random_merchant_quest_no", slot_quest_target_faction),
    (gt, ":target", 0),
    (str_store_faction_name, s12, ":target"),
  (try_end),
  (try_begin),
    (quest_get_slot, ":target", "$random_merchant_quest_no", slot_quest_object_troop),
    (gt, ":target", 0),
    (str_store_troop_name, s13, ":target"),
  (try_end),
  (try_begin),
    (quest_get_slot, ":target", "$random_merchant_quest_no", slot_quest_giver_troop),
    (gt, ":target", 0),
    (str_store_troop_name, s14, ":target"),
  (try_end),
  (try_begin),
    (quest_get_slot, ":target", "$random_merchant_quest_no", slot_quest_object_center),
    (gt, ":target", 0),
    (str_store_party_name, s15, ":target"),
  (try_end),
  (try_begin),
    (quest_get_slot, ":target", "$random_merchant_quest_no", slot_quest_target_party),
    (gt, ":target", 0),
    (str_store_party_name, s16, ":target"),
  (try_end),
  (try_begin),
    (quest_get_slot, ":target", "$random_merchant_quest_no", slot_quest_target_party_template),
    (gt, ":target", 0),
    (assign, reg1, ":target"),
    (str_store_string, s17, "str_reg1"),
    # (str_store_party_template_name, s16, ":target"),
  (try_end),
  (try_begin),
    (quest_get_slot, ":target", "$random_merchant_quest_no", slot_quest_giver_center),
    (gt, ":target", 0),
    (str_store_party_name, s18, ":target"),
  (try_end),
  (try_begin),
    (quest_get_slot, ":target", "$random_merchant_quest_no", slot_quest_target_item),
    (gt, ":target", 0),
    (str_store_item_name, s19, ":target"),
  (try_end),
  (try_begin),
    (quest_get_slot, ":target", "$random_merchant_quest_no", slot_quest_object_faction),
    (gt, ":target", 0),
    (str_store_faction_name, s20, ":target"),
  (try_end),
  
  #numerics (probably)
  (quest_get_slot, reg10, "$random_merchant_quest_no", 10),
  (quest_get_slot, reg11, "$random_merchant_quest_no", 11),
  (quest_get_slot, reg13, "$random_merchant_quest_no", 13),
  (quest_get_slot, reg16, "$random_merchant_quest_no", 16),
  (quest_get_slot, reg16, "$random_merchant_quest_no", 16),
  (quest_get_slot, reg17, "$random_merchant_quest_no", 17),
  # (quest_get_slot, reg18, "$random_merchant_quest_no", 18),
  (quest_get_slot, reg19, "$random_merchant_quest_no", 19),
  (quest_get_slot, reg20, "$random_merchant_quest_no", 20),
  (quest_get_slot, reg21, "$random_merchant_quest_no", 21),
  (quest_get_slot, reg22, "$random_merchant_quest_no", 22),
  (quest_get_slot, reg23, "$random_merchant_quest_no", 23),
  (quest_get_slot, reg24, "$random_merchant_quest_no", 24),
  (quest_get_slot, reg25, "$random_merchant_quest_no", 25),
  (quest_get_slot, reg26, "$random_merchant_quest_no", 26),
  (quest_get_slot, reg27, "$random_merchant_quest_no", 27),
  (quest_get_slot, reg28, "$random_merchant_quest_no", 28),

 ], 
"target center: {s10}\
 target troop: {s11}\
 target faction: {s12}^\
 object troop: {s13}\
 object center: {s15}\
 object faction: {s20}^\
 giver troop: {s14}^\
 giver center: {s18}\
 target party: {s16}\
 target pt: {s17}^\
 target item: {s19}^\
 target amt: {reg10}\
 target dna: {reg13}^\
 current state: {reg11}\
 target state: {reg16}\
 object state: {reg17}^\
 convince val: {reg19}\
 importance: {reg20}^\
 EXP reward: {reg21}\
 GOLD reward: {reg22}^\
 expiration days: {reg23}^\
 don't give period: {reg24}\
 don't give days: {reg25}\
 failure consequence: {reg26}^\
 TEMP slot: {reg27}^\
 delegate level pt: {reg28}", "member_delegate_quest_select",
 []
],

[anyone|plyr, "member_delegate_quest_select", [],
"Yes, that's correct.", "member_delegate_quest_destination", [
  (change_screen_notes, 4, "$random_merchant_quest_no"),
  (assign, "$diplomacy_var", 0),
  (assign, "$diplomacy_var2", 0),
]],

[anyone|plyr, "member_delegate_quest_select", [], 
"On second though, I better do this one myself.", "member_delegate_quest", []],

#calculate destination - usually target party takes x days
[anyone, "member_delegate_quest_destination", [
  (quest_get_slot, ":target", "$random_merchant_quest_no", slot_quest_target_center),
  (try_begin),
    (lt, ":target", -1),
    (quest_get_slot, ":target", "$random_merchant_quest_no", slot_quest_object_center),
  (try_end),
  (try_begin),
    (lt, ":target", -1),
    (quest_get_slot, ":target", "$random_merchant_quest_no", slot_quest_target_party),
  (try_end),
  (party_is_active, ":target"),
  (str_store_party_name, s10, ":target"),
  
  (store_skill_level, ":speed", "$g_talk_troop", "skl_pathfinding"),
  (val_add, ":speed", 45), #45 to 60
  (store_distance_to_party_from_party, ":distance", "p_main_party", ":target"),
  (val_mul, ":distance", 2), #back trip
  #could add in second leg to quest giver and back
  (store_div, reg10, ":distance", ":speed"),
  (val_max, reg10, 2), #base time to "complete"
  # (assign, reg11, ":distance"), #base time to "complete"
], 
"Very well. I will set forth for {s10}. I should be back in approximately {reg10} days but may need a few extra days to complete the mission satisfactorily.", "member_delegate_quest_inventory", [
  (troop_clear_inventory, "trp_temp_troop"),
  (party_clear, "p_temp_party"),
]],
#fallback
[anyone, "member_delegate_quest_destination", [], 
"I am actually lost on where I need to go for this. Do you happen to have a map of the area per chance?", "redo_member_quest", []],

#check for quest items: qst_deliver_wine, qst_deliver_grain
[anyone, "member_delegate_quest_inventory", [
  (this_or_next|eq, "$random_merchant_quest_no", "qst_deliver_wine"),
  (eq, "$random_merchant_quest_no", "qst_deliver_grain"),
  (assign, ":quest_object", -1),
  (try_begin),
    (quest_get_slot, ":item_no", "$random_merchant_quest_no", slot_quest_target_item),
    (try_begin), #if not set, fallback to grain
      (lt, ":item_no", 0),
      (eq, "$random_merchant_quest_no", "qst_deliver_grain"),
      (assign, ":item_no", "itm_grain"),
    (try_end),
    (str_store_item_name, s11, ":item_no"),
    (assign, ":quest_object", ":item_no"),
    (assign, "$diplomacy_var", ":quest_object"),
    (quest_get_slot, "$diplomacy_var2", "$random_merchant_quest_no", slot_quest_target_amount),
  (try_end),
  (neq, ":quest_object", -1),
  (assign, reg12, "$diplomacy_var2")
  ],
  "Of course, things would go better if I didn't arrive empty-handed - we do still have the {reg12} units of {s11}?", "member_delegate_quest_ask_for_items",
  [
    #calculate how much player has in inventory
    (item_get_max_ammo, ":stack_size", "$diplomacy_var"),
    (val_mul, ":stack_size", "$diplomacy_var2"),
    (troop_get_inventory_capacity, ":inv_cap", "trp_player"),
    (assign, ":total_units", 0),
    (try_for_range, ":i_slot", 10, ":inv_cap"),
      (troop_get_inventory_slot, ":item_no", "trp_player", ":i_slot"),
      (eq, ":item_no", "$diplomacy_var"),
      (troop_get_inventory_slot_modifier, ":imod", "trp_player", ":i_slot"),
      (neq, ":imod", imod_rotten),
      (troop_inventory_slot_get_item_amount, ":cur_amount", "trp_player", ":i_slot"),
      (val_add, ":total_units", ":cur_amount"),
    (try_end),
    (quest_set_slot, "$random_merchant_quest_no", slot_quest_temp_slot, ":total_units"),
  ]
],
[anyone|auto_proceed, "member_delegate_quest_inventory", [], "{!}.", "member_delegate_quest_soldiers", []],

[anyone|plyr, "member_delegate_quest_ask_for_items", [ 
  (gt, "$diplomacy_var", 0),
  (store_item_kind_count, ":item_count", "$diplomacy_var"),
  (item_get_max_ammo, ":item_size", "$diplomacy_var"),
  ],
"Of course, take care with these.", "member_delegate_quest_assess_for_items", [
  
]],
[anyone|plyr, "member_delegate_quest_ask_for_items", [ (gt, "$diplomacy_var", 0),],
"You'll have to pick up some more along the way. I can't be bothered to gather more at the moment.", "member_delegate_quest_confirm", [
]],
[anyone|plyr, "member_delegate_quest_ask_for_items", [ (gt, "$diplomacy_var", 0),],
"No, thank you for reminding me to restock.", "redo_member_quest", []],

#check for quest soldiers/prisoners
[anyone, "member_delegate_quest_soldiers", [
  (this_or_next|eq, "$random_merchant_quest_no", "qst_capture_prisoners"),
  (eq, "$random_merchant_quest_no", "qst_raise_troops"),
  (assign, ":quest_object", -1),
  (try_begin),
    (quest_get_slot, ":troop_no", "$random_merchant_quest_no", slot_quest_object_troop),
    (str_store_troop_name, s11, ":troop_no"),
    (assign, ":quest_object", ":troop_no"),
    (assign, "$diplomacy_var", ":quest_object"),
    (quest_get_slot, "$diplomacy_var2", "$random_merchant_quest_no", slot_quest_target_amount),
  (try_end),
  (neq, ":quest_object", -1),
  (assign, reg12, "$diplomacy_var2")
  ],
  "Alright, let me gather the soldiers and I'll be on my way. I believe we need {reg10} {s10} for the quota.", "member_delegate_quest_ask_for_troops",
  [
    

  ]
],
[anyone|auto_proceed, "member_delegate_quest_soldiers", [], "{!}.", "member_delegate_quest_confirm", []],


[anyone|plyr, "member_delegate_quest_ask_for_troops", [],
"Yes, here are the troops.", "member_delegate_quest_confirm", []],



[anyone|plyr, "member_delegate_quest_confirm", [],
"Good luck out there.", "do_member_quest", [
  
]],
[anyone|plyr, "member_delegate_quest_confirm", [],
"No, I've reconsidered.", "redo_member_quest", []],
#calculate 3 states - success, abort, failure, auto-abort if it expires
#on success - copy over the dialogue rewards since slots are usually empty
#on abort - set npc to rejoin party
#on failure - do same, apply failure consequence (if any)


#this reviews all the quest slots
[anyone, "do_member_quest", [
  
], "I'll be on my way then.", "close_window", [
  (str_store_troop_name, s1, "$g_talk_troop"),
  (add_quest_note_from_sreg, "$random_merchant_quest_no", 6, "@You have assigned this task to {s1}", 1),
  (troop_set_slot, "$g_talk_troop", slot_troop_current_mission, dplmc_npc_mission_delegate_quest),
  (troop_set_slot, "$g_talk_troop", slot_troop_mission_object, dplmc_npc_mission_delegate_quest),
  (troop_set_slot, "$g_talk_troop", slot_troop_days_on_mission, 0), #distance-based
]],
#this cancels all the temp quest slots
[anyone, "redo_member_quest", [
  (try_for_range, ":slot_no", slot_troop_days_on_mission, slot_troop_mission_object + 1),
    (troop_set_slot, "$g_talk_troop", ":slot_no", 0),
  (try_end),
  (troop_set_slot, "$g_talk_troop", dplmc_slot_troop_mission_diplomacy, 0), 
  (troop_set_slot, "$g_talk_troop", dplmc_slot_troop_mission_diplomacy2, 0),
  (troop_set_slot, "$g_talk_troop", slot_troop_mission_object, 0), #quest
  (troop_set_slot, "$g_talk_troop", slot_troop_days_on_mission, 0), #distance
  (troop_set_slot, "$g_talk_troop", slot_troop_current_mission, 0), #dplmc_npc_mission_delegate_quest
  (assign, "$random_merchant_quest_no", -1),
  (assign, "$diplomacy_var", -1),
  (assign, "$diplomacy_var2", -1),
  
], "How else may I be of service?", "do_member_trade", []],
[anyone|auto_proceed, "start",
[
(is_between, "$g_talk_troop", startup_merchants_begin, startup_merchants_end),
(eq, "$talk_context", tc_town_talk),
],
"{!}.", "merchant_quest_4_start",
[
]],


[anyone|auto_proceed, "start",
[
(is_between, "$g_talk_troop", startup_merchants_begin, startup_merchants_end),
(eq, "$talk_context", tc_town_talk),
],
"{!}.", "merchant_quest_4_start",
[
]],

[anyone, "merchant_quest_4_start",
[
],
"It's time, lads! Up and at them!", "close_window",
[
(try_for_agents, ":agent_no"),
(agent_get_troop_id, ":agent_troop_id", ":agent_no"),
(ge, ":agent_troop_id", "trp_looter"),
(le, ":agent_troop_id", "trp_desert_bandit"),
(agent_set_team, ":agent_no", 1),
(try_end),

(get_player_agent_no, ":player_agent"),

(assign, ":minimum_distance", 1000),
(try_for_agents, ":agent_id_1"),
(neq, ":agent_id_1", ":player_agent"),
(agent_get_team, ":agent_team_1", ":agent_id_1"),
(eq, ":agent_team_1", 0),
(agent_get_position, pos0, ":agent_id_1"),

(try_for_agents, ":agent_id_2"),
  (agent_get_team, ":agent_team_2", ":agent_id_2"),
  (eq, ":agent_team_2", 1),
  (agent_get_position, pos1, ":agent_id_2"),

  (get_distance_between_positions, ":dist", pos0, pos1),

  (le, ":dist", ":minimum_distance"),
  (assign, ":minimum_distance", ":dist"),
  (copy_position, pos2, pos1),
(try_end),

(agent_set_scripted_destination, ":agent_id_1", pos2, 0),
(agent_set_speed_limit, ":agent_id_1", 10),
(try_end),
]],

[anyone, "start",
[
(is_between, "$g_talk_troop", "trp_relative_of_merchant", "trp_relative_of_merchants_end"),

(try_begin),
(check_quest_active, "qst_save_relative_of_merchant"),
(call_script, "script_succeed_quest", "qst_save_relative_of_merchant"),
(try_end),

(str_store_party_name, s9, "$g_starting_town"),

(assign, "$relative_of_merchant_is_found", 1),
],
"Thank you! Thank you, {sir/my lady}, for rescuing me from those fiends. Did my brother in {s9} put you onto their track?", "relative_saved_1a",
[
]],

[anyone|plyr, "relative_saved_1a",
[],
"Yes. I told him that I would find you. I advise you to return to your family as quickly as you can -- and be careful on the road.", "close_window",
[
]],



[anyone, "start",
[
(is_between, "$g_talk_troop", "trp_sea_raider_leader", "trp_bandit_leaders_end"),
(eq,"$talk_context",tc_hero_defeated),
],
"Ay! Spare me! Spare my life! Let me go, and I'll go far away from here, and learn an honest trade, and you'll never hear of me again!", "bandit_leader_1a",
[]],

[anyone|plyr, "bandit_leader_1a",
[
(is_between, "$g_talk_troop", "trp_sea_raider_leader", "trp_bandit_leaders_end"),
],
"I'll spare your life -- but in exchange, I want information. Either you or your mates kidnapped the brother of a prominent merchant in town. Tell me where you're hiding him, and give me your word that you'll stop troubling the people of these parts, and you can go free.", "bandit_leader_1b",
[]],





[anyone,"start",
[
(eq,"$talk_context",tc_party_encounter),
(is_between, "$g_talk_troop", "trp_sea_raider_leader", "trp_bandit_leaders_end"),
],
"What do you want?", "looter_leader_1",
[]],

#SB : not necessary here
[anyone|plyr,"looter_leader_1",
[
    # (store_faction_of_party, ":starting_town_faction", "$g_starting_town"),
    # (store_sub, ":troop_of_merchant", ":starting_town_faction", npc_kingdoms_begin),
    # (val_add, ":troop_of_merchant", "trp_swadian_merchant"),

    # (str_store_troop_name, s9, ":troop_of_merchant"),
],
"I've been looking for you. Tell me where you keep your prisoners, and I'll let you go.", "looter_leader_2",
[]],

[anyone|plyr,"looter_leader_1",
[],
"Nothing. We'll leave you in peace.", "close_window",
[
(assign, "$g_leave_encounter", 1),
]],

[anyone,"looter_leader_2",
[],
"Hah! Those prisoners are only going free if you pay their ransom. Did you bring any silver?", "looter_leader_3",
[]],

[anyone|plyr,"looter_leader_3",
[],
"No, but I brought steel.", "close_window",
[]],



[anyone, "bandit_leader_1b",
[
(is_between, "$g_talk_troop", "trp_sea_raider_leader", "trp_bandit_leaders_end"),

(assign, ":possible_villages", 0),
(try_for_range, ":village_no", villages_begin, villages_end),
  (party_slot_eq, ":village_no", slot_village_bound_center, "$g_starting_town"),
  (val_add, ":possible_villages", 1),
(try_end),

(store_random_in_range, ":random_village", 0, ":possible_villages"),
(val_add, ":random_village", 1),

(try_for_range, ":village_no", villages_begin, villages_end),
  (party_slot_eq, ":village_no", slot_village_bound_center, "$g_starting_town"),
  (val_sub, ":random_village", 1),
  (eq, ":random_village", 0),
  (assign, "$lair_neighboor_village", ":village_no"),
(try_end),

(str_store_party_name_link, s9, "$lair_neighboor_village"),

(set_spawn_radius, 4),
(spawn_around_party, "$lair_neighboor_village", "pt_looter_lair"),
(party_set_flags, reg0, pf_always_visible, 1),
],
"Oh bless you, {sir/my lady}. Bless you. We've done the lad no harm. We've been keeping him in our hideout near {s9}. I'll describe the area nearby in detail, so there's no mistaking it...", "close_window",
[
(call_script, "script_succeed_quest", "qst_learn_where_merchant_brother_is"),
(call_script, "script_end_quest", "qst_learn_where_merchant_brother_is"),

#SB : offset here
(call_script, "script_get_troop_of_merchant"),
(assign, ":troop_of_merchant", reg0),
(str_store_troop_name, s10, ":troop_of_merchant"),

(str_store_string, s2, "str_find_the_lair_near_s9_and_free_the_brother_of_the_prominent_s10_merchant"),
(call_script, "script_start_quest", "qst_save_relative_of_merchant", ":troop_of_merchant"),
]],




[anyone,"start", [
(troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_hero),
(check_quest_active, "qst_rescue_prisoner"),
(check_quest_succeeded, "qst_rescue_prisoner"),
(quest_slot_eq, "qst_rescue_prisoner", slot_quest_giver_troop, "$g_talk_troop"),
(quest_get_slot, ":cur_lord", "qst_rescue_prisoner", slot_quest_target_troop),
(call_script, "script_troop_get_family_relation_to_troop", ":cur_lord", "$g_talk_troop"),
],
##diplomacy start+ Use correct pronoun (family relation script wrote gender to reg4)
"{playername}, you saved {reg4?her:him}! Thank you ever so much for rescuing my {s11}.\
 Please, take this as some small repayment for your noble deed.", "rescue_prisoner_succeed_2",
##diplomacy end+
[
(call_script, "script_finish_quest", "qst_rescue_prisoner", 100),
# (call_script, "script_change_player_relation_with_troop", "$g_talk_troop", 8),
# (add_xp_as_reward, 2000),
# (call_script, "script_troop_add_gold", "trp_player", 1500),
# (call_script, "script_end_quest", "qst_rescue_prisoner"),
]],#rescuerescue
[anyone|plyr,"rescue_prisoner_succeed_2", [], "Always an honour to serve, {s65}.", "lord_pretalk",[]],



#Quest 0 - Alley talk
[anyone|auto_proceed, "start",
[
(is_between, "$g_talk_troop", startup_merchants_begin, startup_merchants_end),
(eq, "$talk_context", tc_back_alley),
(eq, "$talked_with_merchant", 0),
],
"{!}.", "start_up_quest_1_next",
[]],

[anyone, "start_up_quest_1_next",
[],
"Are you all right? Well.... I guess you're alive, at any rate. I'm not sure that we can say the same for the other fellow. That's one less thief to trouble our streets at night, although Heaven knows he won't be the last.... Anyway, maybe you can help me with something. Let's talk more inside. Out here, we don't know who's listening", "close_window",
[
(assign, "$talked_with_merchant", 1),
(mission_disable_talk),
]],


#Quest 1 - Repeating dialog sentence
[anyone|auto_proceed, "start",
[
(is_between, "$g_talk_troop", startup_merchants_begin, startup_merchants_end),
(eq, "$talk_context", tc_tavern_talk),

#SB : this does not include the player troop, change le to lt
(call_script, "script_party_count_members_with_full_health", "p_main_party"),
(assign, ":total_party_size", reg0),

(assign, ":continue", 0),
(try_begin),
(check_quest_active, "qst_collect_men"),
(neg|check_quest_succeeded, "qst_collect_men"),

(lt, ":total_party_size", 5),

(try_begin),
  (le, ":total_party_size", 1),
  (str_store_string, s11, "str_please_sir_my_lady_go_find_some_volunteers_i_do_not_know_how_much_time_we_have"),
(else_try),
  (str_store_string, s11, "str_you_need_more_men_sir_my_lady"),
(try_end),
(assign, ":continue", 1),
(else_try),
(check_quest_active, "qst_learn_where_merchant_brother_is"),
(neg|check_quest_succeeded, "qst_learn_where_merchant_brother_is"),
(str_store_string, s11, "str_do_not_waste_time_go_and_learn_where_my_brother_is"),
(assign, ":continue", 1),
(try_end),
(eq, ":continue", 1),
],
"{!}.", "start_up_quest_2_next",
[]],

[anyone, "start_up_quest_2_next",
[],
"{!}{s11}", "close_window",
[]],

#Quest 2 - First dialog sentence
[anyone, "start",
[
(is_between, "$g_talk_troop", startup_merchants_begin, startup_merchants_end),
(eq, "$talk_context", tc_tavern_talk),

(check_quest_active, "qst_collect_men"),
(neg|check_quest_succeeded, "qst_duel_for_lady"),
(call_script, "script_party_count_members_with_full_health", "p_main_party"),
(ge, reg0, 5), #player not included, minus 1 from requirement

(str_store_party_name, s9, "$current_town"),
],
"Splendid work. You have hired enough men to take on the bandits. Now -- travellers entering {s9} have told us that there is a small group of robbers lurking on the outside of town. I suspect that they are all from the same band, the one that took my brother. Hunt them down and defeat them, and make them disclose the location of their lair!", "merchant_quest_2a",
[
(call_script, "script_succeed_quest", "qst_collect_men"),
(call_script, "script_end_quest", "qst_collect_men"),
]],

#Quest 3 - First dialog sentence/Repeating dialog sentence
[anyone, "start",
[
(is_between, "$g_talk_troop", startup_merchants_begin, startup_merchants_end),
(eq, "$talk_context", tc_tavern_talk),

(check_quest_active, "qst_save_relative_of_merchant"),
(neg|check_quest_succeeded, "qst_save_relative_of_merchant"),

(str_store_party_name, s9, "$current_town"),
],
"So, you've found out where they hid my brother? Splendid work. I flatter myself that I'm a fine judge of character, and you look to be a {man/woman} who can get things done. Now, go out and save his unworthy hide!", "merchant_quest_3a",
[
]],

#Quest 3 - All succeeded - First dialog sentence
[anyone, "start",
[
(is_between, "$g_talk_troop", startup_merchants_begin, startup_merchants_end),
(eq, "$talk_context", tc_tavern_talk),

(check_quest_active, "qst_save_relative_of_merchant"),
(check_quest_succeeded, "qst_save_relative_of_merchant"),
],
"Well... My brother is home safe. I'm not sure what to do with him -- maybe pack him off to a university outside Calradia. That way, if he gets knocked on the head in a street brawl, no one can say it's my fault. But that's not your problem. Here's the rest of your reward. It was well-earned.", "merchant_quest_3b",
[
(call_script, "script_finish_quest", "qst_save_relative_of_merchant", 100),
(troop_add_gold, "trp_player", 200),
]],

[anyone|plyr, "merchant_quest_3b", #was startup
[
],
"The money is most welcome, and I am glad to have been of service", "merchant_quest_4a",
[
]],

[anyone, "merchant_quest_4a", #was startup
[
],
"Good! Now... Are you interested in making some more?", "merchant_quest_4b",
[
]],

[anyone|plyr, "merchant_quest_4b",
[
],
"Possibly. What do you need?", "merchant_quest_4b1",
[
]],


[anyone, "merchant_quest_4b1",
[],
"Remember how I told you that the bandits had an ally inside the walls? I think I know who it is -- the captain of the watch, no less. Some months ago this captain, seeing the amount of profit we merchants were making from trade across the frontiers, decided to borrow some money to sponsor a caravan. Unfortunately, like many who are new to commerce, he failed to realize that great profit only comes with great risk. So he sank all his money into the most expensive commodities, and of course his caravan was captured and looted, and he lost everything.", "merchant_quest_4b2",
[]],

[anyone, "merchant_quest_4b2",
[],
"As a consequence, it seems, our captain turned to villainy to recoup his fortune. I supposed I'd do the same if, the Heavens forbid, I ever faced indebtedness and ruination. Now, any watch captain worth his salary will have a few thieves and robbers on his payroll, to inform on the rest, but our captain decides to employ these bastards wholesale. He brings them into the town, lets them do as they will, and takes a share of their take. You've heard of poachers turning gamekeepers? Well, in the unfortunate land of Calradia, sometimes gamekeepers will turn poacher. Luckily, there's are still a few brave, honest souls in the watch who've told me how he works.", "merchant_quest_4b3",
[]],

[anyone, "merchant_quest_4b3",
[
(faction_get_slot, ":local_ruler", "$g_encountered_party_faction", slot_faction_leader),
(str_store_troop_name, s4, ":local_ruler"),
##diplomacy start+ Gender-correct, and replace "king" with "{s0}"
(call_script, "script_dplmc_store_troop_is_female_reg", ":local_ruler", 4),
(call_script, "script_dplmc_print_cultural_word_to_sreg", ":local_ruler", DPLMC_CULTURAL_TERM_KING, s0),
],
#"Now -- here's my plan. I could bring this to the attention of {s4}, lord of the city, but that would mean an inquiry, my word against the captain's, and witnesses can be bought and evidence destroyed, or maybe the whole thing will be forgotten if the enemy comes across the border again, and all I'll get for my trouble is a knife in the ribs. In time of war, you see, a king's eye wanders far from his domain, and his subjects suffer. So I've got another idea. I've got a small group of townsfolk together, some men in my employ and some others who've lost relatives to these bandits, and we'll storm the captain's home and bring him in chains before {s4}, hopefully with a few captured bandits to explain how things stack up.", "merchant_quest_4b4",
"Now -- here's my plan. I could bring this to the attention of {s4}, lord of the city, but that would mean an inquiry, my word against the captain's, and witnesses can be bought and evidence destroyed, or maybe the whole thing will be forgotten if the enemy comes across the border again, and all I'll get for my trouble is a knife in the ribs. In time of war, you see, a {s0}'s eye wanders far from {reg4?her:his} domain, and {reg4?her:his} subjects suffer. So I've got another idea. I've got a small group of townsfolk together, some men in my employ and some others who've lost relatives to these bandits, and we'll storm the captain's home and bring him in chains before {s4}, hopefully with a few captured bandits to explain how things stack up.", "merchant_quest_4b4",
[]],
##diplomacy end+

[anyone, "merchant_quest_4b4",
[
],
"All I need now is someone to lead my little army into battle -- and I can't think of anyone better than you. So, what do you say?", "merchant_quest_4b5",
[
]],

[anyone|plyr, "merchant_quest_4b5",
[
],
"How do I know that you're telling me the truth?", "merchant_quest_4b6",
[
]],

[anyone, "merchant_quest_4b6",
[
(str_store_party_name, s4, "$g_encountered_party"),
],
"Oh, well, I suppose it's possible that I found a dozen bandits who were willing to give their lives to give a passing stranger a false impression of life in old {s4}... Well, I guess you can't really know if my word is good, but I reckon you've learned by now that my money is good, and there's another 100 denars, or maybe a bit more, that's waiting for you if you'll do me this last little favor. So what do you say?", "merchant_quest_4b7",
[
]],


[anyone|plyr, "merchant_quest_4b7",
[
],
"All right. I'll lead your men.", "merchant_quest_4b8",
[
]],

[anyone|plyr, "merchant_quest_4b7",
[
],
"I'm sorry. This is too much, too fast. I need time to think.", "merchant_quest_4_decline",
[
]],

[anyone, "merchant_quest_4b8",
[
],
"Splendid. It's been a long time since I staked so much on a single throw of the dice, and frankly I find it exhilarating. My men are ready to move on your word. Are you ready?", "merchant_quest_4b9",
[
]],

[anyone|plyr, "merchant_quest_4b9",
[
],
"Yes. Give them the sign.", "merchant_quest_4_accept",
[
]],

[anyone|plyr, "merchant_quest_4b9",
[
],
"Not now. I will need to rest before I can fight again.", "merchant_quest_4_decline",
[
]],

[anyone, "merchant_quest_4_accept",
[
],
"Good! Now -- strike hard, strike fast, and the captain and his henchmen won't know what hit them. May the heavens be with you!", "close_window",
[
(assign, "$current_startup_quest_phase", 3),
(jump_to_menu, "mnu_start_phase_3"),
(finish_mission),
]],

[anyone, "merchant_quest_4_decline", #was startup
[
],
"Right. I can keep my men standing by. If you let this go too long, then I suppose that I shall have to finish this affair without you, but I would be most pleased if you could be part of it as well. For now, take what time you need.", "close_window",
[]],



#QUEST 2 - Learning where prominent's brother is.
[anyone|plyr, "merchant_quest_2a",
[
],
"Very well. I shall hunt for bandits.", "close_window",
[
(str_store_party_name_link, s9, "$current_town"), #SB : link
(str_store_string, s2, "str_start_up_quest_message_2"),
(call_script, "script_start_quest", "qst_learn_where_merchant_brother_is", "$g_talk_troop"),

(set_spawn_radius, 2),
(spawn_around_party, "$current_town", "pt_leaded_looters"),
(assign, ":spawned_bandits", reg0),

(party_get_position, pos0, "$current_town"),
# (party_set_ai_behavior, ":spawned_bandits", ai_bhvr_patrol_location),
# (party_set_ai_patrol_radius, ":spawned_bandits", 3),
# (party_set_ai_target_position, ":spawned_bandits", pos0),
## SB : change default robber behaviour
(get_average_game_difficulty, ":gold"),
(val_add, ":gold", 1000),
(add_gold_to_party, ":gold", ":spawned_bandits"),
(party_set_ai_behavior, ":spawned_bandits", ai_bhvr_avoid_party),
(party_set_ai_object, ":spawned_bandits", "$current_town"),
]],

[anyone|plyr, "merchant_quest_2a",
[
],
"Why don't you come with us?", "merchant_quest_2a_whynotcome",
[
]],

[anyone, "merchant_quest_2a_whynotcome",
[
],
"Because I'm paying you to go take care of it. That's the short answer. The long answer is that I've got some leads to follow up here in town, and I have just as much chance of getting knocked on my head as you, if that's what you're asking. But I respect your question. Now, what do you say?", "merchant_quest_2a",
[
]],


[anyone|plyr, "merchant_quest_2a",
[
],
"I cannot deal with this matter at this time.", "close_window",
[
]],

#Quest 3 - Saving merchant's brother.
[anyone|plyr, "merchant_quest_3a",
[
],
"Very well. I go now to attack the bandits in their lair, and find your brother.", "close_window",
[
#no need to below three lines anymore, this quest is auto starting after player learn where bandits are hiding merchant's brother.
#(str_store_party_name, s9, "$lair_neighboor_village"),
#(str_store_string, s2, "str_start_up_quest_message_3"),
#(call_script, "script_start_quest", "qst_save_relative_of_merchant", "$g_talk_troop"),
]],





[anyone|plyr, "merchant_quest_3a",
[
],
"I cannot deal with this matter at this time.", "close_window",
[
#think about placing end_quest here. Because it is auto-starting. If player do not want this quest he/she should have a way to avoid it.
]],


[anyone, "start",
[
(is_between, "$g_talk_troop", startup_merchants_begin, startup_merchants_end),

(this_or_next|eq, "$talk_context", tc_tavern_talk),
(neq, "$dialog_with_merchant_ended", 0),

(assign, ":continue", 0),
(try_begin),
(neg|check_quest_succeeded, "qst_collect_men"),
(neg|check_quest_active, "qst_collect_men"),
(assign, ":continue", 1),
(else_try),
(neg|check_quest_active, "qst_collect_men"),
(neg|check_quest_succeeded, "qst_learn_where_merchant_brother_is"),
(neg|check_quest_active, "qst_learn_where_merchant_brother_is"),
(assign, ":continue", 1),
(else_try),
(neg|check_quest_active, "qst_collect_men"),
(neg|check_quest_active, "qst_learn_where_merchant_brother_is"),
(neg|check_quest_succeeded, "qst_save_relative_of_merchant"),
(neg|check_quest_active, "qst_save_relative_of_merchant"),
(assign, ":continue", 1),
(try_end),

(eq, ":continue", 1),
],
##diplomacy start+ replaced "a rich men" with "a rich {reg65?woman:man}"
#"You may do as you wish, {sir/my lady}, but I am disappointed. You would do well to reconsider. I am a rich men, and would show you my gratitude in coin.", "merchant_quest_persuasion",
"You may do as you wish, {sir/my lady}, but I am disappointed. You would do well to reconsider. I am a rich {reg65?woman:man}, and would show you my gratitude in coin.", "merchant_quest_persuasion",
##diplomacy end+
[
]],

[anyone|auto_proceed, "start",
[
(is_between, "$g_talk_troop", startup_merchants_begin, startup_merchants_end),

(this_or_next|eq, "$talk_context", tc_tavern_talk),
(neq, "$dialog_with_merchant_ended", 0),

(check_quest_finished, "qst_save_relative_of_merchant"),
(neg|check_quest_succeeded, "qst_save_town_from_bandits"),
(neg|check_quest_active, "qst_save_town_from_bandits"),
],
"{!}.", "merchant_quest_4b4",
[
]],

[anyone|plyr, "merchant_quest_persuasion",
[
(neg|check_quest_finished, "qst_collect_men"),
(neg|check_quest_active, "qst_collect_men"),
],
"You make a persuasive case. I will help you.", "merchant_quest_1_prologue_3",
[
]],

[anyone|plyr, "merchant_quest_persuasion",
[
(check_quest_finished, "qst_collect_men"),
(neg|check_quest_finished, "qst_learn_where_merchant_brother_is"),
(neg|check_quest_active, "qst_learn_where_merchant_brother_is"),
],
"You make a persuasive case. I will help you.", "merchant_quest_2",
[
]],

[anyone|plyr, "merchant_quest_persuasion",
[
(check_quest_finished, "qst_collect_men"),
(check_quest_finished, "qst_learn_where_merchant_brother_is"),
(neg|check_quest_finished, "qst_save_relative_of_merchant"),
(neg|check_quest_active, "qst_save_relative_of_merchant"),
],
"You make a persuasive case. I will help you.", "merchant_quest_3",
[
]],

[anyone|plyr, "merchant_quest_persuasion",
[
(check_quest_finished, "qst_collect_men"),
(check_quest_finished, "qst_learn_where_merchant_brother_is"),
(check_quest_finished, "qst_save_relative_of_merchant"),
(neg|check_quest_finished, "qst_save_town_from_bandits"),
(neg|check_quest_active, "qst_save_town_from_bandits"),
],
"You make a persuasive case. I will help you.", "merchant_quest_4b8",
[
]],

[anyone|plyr, "merchant_quest_persuasion",
[
],
"As I say, I have more important business elsewhere.", "close_window",
[
]],

##diplomacy start+ Allow skipping the tutorial.
[anyone|plyr,"merchant_quest_persuasion",
[
(ge, "$cheat_mode", 1),
],
"{!}[CHEAT] I have played this before, and would prefer to skip the tutorial.", "dplmc_devel_merchant_quest_skip",
[]],
##diplomacy end+

[anyone, "merchant_quest_2",
[
],
"Now -- go find and defeat that group of bandits.", "merchant_quest_2a",
[
]],

[anyone, "merchant_quest_3",
[
],
"Now -- go attack that bandit hideout, get my brother back, and show those brigands what happens to those who threaten my household.", "merchant_quest_3a",
[
]],

[anyone, "start",
[
(is_between, "$g_talk_troop", "trp_relative_of_merchant", "trp_relative_of_merchant"),
],
  "Oh -- thank the heavens... Thank the heavens... Am I safe?", "close_window",
[]],


[anyone,"start",
[
(is_between, "$g_talk_troop", startup_merchants_begin, startup_merchants_end),
(eq, "$g_do_one_more_meeting_with_merchant", 1),
(faction_get_slot, ":faction_leader", "$g_encountered_party_faction", slot_faction_leader),
(str_store_troop_name, s5, ":faction_leader"),
##diplomacy start+ fix the pronouns
(call_script, "script_dplmc_store_troop_is_female_reg", ":faction_leader", 4),
],
"Ah... {playername}. Things didn't go quite so well as I had hoped. {s5} couldn't quite find it in {reg4?her:him} to overlook my little breach of the peace. Oh, {reg4?she:he}'s grateful enough that I got rid of {reg4?her:his} crooked captain -- a guard who'll let in bandits will let in an enemy army, if the price is right -- but {reg4?she:he} can't exactly have me running around here as a lasting reminder of {reg4?her:his} failure to take care of things {reg4?herself:himself}.", "merchant_closing_statement_2",
##diplomacy end+
[]],

[anyone|plyr,"merchant_closing_statement_2",
[],
"That hardly seems fair...", "merchant_closing_statement_3",
[]],

[anyone,"merchant_closing_statement_3",
[
##diplomacy start+ fix pronouns
(faction_get_slot, ":faction_leader", "$g_encountered_party_faction", slot_faction_leader),
(call_script, "script_dplmc_store_troop_is_female_reg", ":faction_leader", 4),
],
#"my boy" = "my girl", not "my lady"
#change "He" to "{reg4?She:He}" and so forth
"Fair? This is Calradia, {my boy/my girl}! Kings do what they will, and the rest of us do as they must. {reg4?She:He} didn't string me up, and instead gave me time to sell my properties -- even put in a word with the other merchants that they best pay me a fair price, too. That's gracious enough, as kings go -- but {reg4?she:he}'s a weak king, as they all are here, and weak kings must always look to their authority first, and justice second. I suppose I'd do the same, in {reg4?her:his} shoes.", "merchant_closing_statement_4",
#diplomacy end+
[]],

[anyone,"merchant_closing_statement_4",
[
#diplomacy start+ fix pronouns
(call_script, "script_dplmc_print_cultural_word_to_sreg", "$g_talk_troop", DPLMC_CULTURAL_TERM_WEAPON, s0),
(faction_get_slot, ":faction_leader", "$g_encountered_party_faction", slot_faction_leader),
(call_script, "script_dplmc_store_troop_is_female_reg", ":faction_leader", 4),
],
#change "He" to "{reg4?She:He}" and so forth.  Replace "sell your sword" with "sell your {s0}".
"Anyway, I wouldn't go rubbing your part in this affair in {s5}'s face -- but {reg4?she:he}'s taken note of you, and decided that you're not worth hanging, and that's something to which I'll raise a glass any day of the week. {reg4?She:He} might even have work for you, further down the road. Or, you can sell your {s0} to one of {reg4?her:his} competitors. Anyway, I hope you've learned a bit about what it will take to stay alive in this troubled land, and I suspect that the money you've earned won't go to waste. Good luck.", "close_window",
#diplomacy end+
[
(assign, "$g_do_one_more_meeting_with_merchant", 2),
]],

[anyone|auto_proceed, "start",
[
(is_between, "$g_talk_troop", startup_merchants_begin, startup_merchants_end),
(check_quest_finished, "qst_save_town_from_bandits"),
(eq, "$g_do_one_more_meeting_with_merchant", 2),
],
"{!}.", "merchant_quests_last_word",
[]],

[anyone,"merchant_quests_last_word",
[
],
"I am preparing to leave town in a short while. It's been an honor to know you. Good luck.", "close_window",
[
]],







[anyone|plyr, "member_intel_liaison", [],
"What have you discovered?", "member_intel_liaison_results", []],


[anyone, "start", [(is_between, "$g_talk_troop", companions_begin, companions_end),
               (eq, "$talk_context", tc_tavern_talk),
               (troop_slot_eq, "$g_talk_troop", slot_troop_current_mission, npc_mission_gather_intel)],
"Greetings, stranger.", "member_intel_liaison", []],

[anyone|plyr, "member_intel_liaison", [
],
"What have you discovered?", "member_intel_liaison_results", []],

[anyone|plyr, "member_intel_liaison", [],
"It's time to pull you out. Let's leave town separately, but join me soon after", "close_window", [
(assign, "$npc_to_rejoin_party", "$g_talk_troop"),
]],

[anyone|plyr, "member_intel_liaison", [],
"You're doing good work. Stay here for a little longer", "close_window", []],



[anyone, "member_intel_liaison_results", [
(store_faction_of_party, ":town_faction", "$g_encountered_party"),
(call_script, "script_update_faction_political_notes", ":town_faction"),
(assign, ":instability_index", reg0),
(val_add, ":instability_index", reg0),
(val_add, ":instability_index", reg1),
#diplomacy start+ Also include promoted kingdom ladies
#(try_for_range, ":lord", active_npcs_begin, active_npcs_end),
(try_for_range, ":lord", heroes_begin, heroes_end),
#diplomacy end+
   (troop_slot_eq, ":lord", slot_troop_occupation, slto_kingdom_hero),
   (store_faction_of_troop, ":lord_faction", ":lord"),
   (eq, ":lord_faction", ":town_faction"),
   (call_script, "script_update_troop_political_notes", ":lord"),
(try_end),

(str_store_faction_name, s12, ":town_faction"),
(try_begin),
   (gt, ":instability_index", 60),
   (str_store_string, s11, "str_the_s12_is_a_labyrinth_of_rivalries_and_grudges_lords_ignore_their_lieges_summons_and_many_are_ripe_to_defect"),
(else_try),
   (is_between, ":instability_index", 40, 60),
   (str_store_string, s11, "str_the_s12_is_shaky_many_lords_do_not_cooperate_with_each_other_and_some_might_be_tempted_to_defect_to_a_liege_that_they_consider_more_worthy"),
(else_try),
   (is_between, ":instability_index", 20, 40),
   (str_store_string, s11, "str_the_s12_is_fairly_solid_some_lords_bear_enmities_for_each_other_but_they_tend_to_stand_together_against_outside_enemies"),
(else_try),
   (lt, ":instability_index", 20),
   (str_store_string, s11, "str_the_s12_is_a_rock_of_stability_politically_speaking_whatever_the_lords_may_think_of_each_other_they_fight_as_one_against_the_common_foe"),
(try_end),

],
"{s11} I notice that you have been keeping some notes about individual lords. I have annotated those with my findings.", "member_intel_liaison", []],



[anyone,"member_fief_grant_1", [
  ], "Which fief did you have in mind?", "member_fief_grant_2",[]],

[anyone|plyr|repeat_for_parties,"member_fief_grant_2", [
(store_repeat_object, ":center"),
(is_between, ":center", centers_begin, centers_end),
(neq, ":center", "$g_player_court"),
(store_faction_of_party, ":center_faction", ":center"),
##diplomacy start+ Handle player is co-ruler of kingdom
(assign, ":alt_faction", 0),
(try_begin),
	(eq, ":center_faction", "$players_kingdom"),
	(is_between, "$players_kingdom", npc_kingdoms_begin, npc_kingdoms_end),
	(call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", "$players_kingdom"),
	(ge, reg0, DPLMC_FACTION_STANDING_LEADER_SPOUSE),
	(assign, ":alt_faction", 1),
(try_end),
(this_or_next|eq, ":alt_faction", 1),
##diplomacy end+
(eq, ":center_faction", "fac_player_supporters_faction"),
(neg|party_slot_ge, ":center", slot_town_lord, active_npcs_begin), #ie, owned by player or unassigned
(str_store_party_name, s11, ":center"),

  ], "{s11}", "member_fief_grant_3",[
(store_repeat_object, "$temp"),
]],

[anyone|plyr, "member_fief_grant_2", [
  ], "Never mind -- there is no fief I can offer.", "do_member_trade",[
]],


[anyone,"member_fief_grant_3", [
  ], "{s5}", "close_window",[
# (call_script, "script_npc_morale", "$g_talk_troop"),
# (assign, ":npc_morale", reg0),

(remove_member_from_party, "$g_talk_troop", "p_main_party"),


(try_begin),
##diplomacy start+ Spouses use your banner
    (neg|troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_hero),
	(this_or_next|troop_slot_eq, "trp_player", slot_troop_spouse, "$g_talk_troop"),
	    (troop_slot_eq, "$g_talk_troop", slot_troop_spouse, "trp_player"),
	(this_or_next|is_between, "$g_talk_troop", heroes_begin, heroes_end),
			(troop_slot_eq, "trp_player", slot_troop_spouse, "$g_talk_troop"),
	(troop_get_slot, ":banner_id", "trp_player", slot_troop_banner_scene_prop),
	(gt, ":banner_id", 0),
	(troop_set_slot, "$g_talk_troop", slot_troop_banner_scene_prop, ":banner_id"),
	(troop_set_slot, "$g_talk_troop", slot_troop_occupation, slto_kingdom_hero),
(else_try),
##diplomacy end+
#SB : http://forums.taleworlds.com/index.php/topic,136832.0.html
    (neg|troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_hero),
    (neg|troop_slot_ge, "$g_talk_troop", slot_troop_banner_scene_prop, banner_scene_props_begin),
    (store_sub, ":banner_offset", banners_end_offset, 1),
    (assign, ":end_loop", banners_end_offset), #151 tries to not match the player/companions banner...not all will be used
    (try_for_range, ":unused", 0, ":end_loop"), 
        (store_random_in_range, ":banner_id", 0, ":banner_offset"),
        (val_add, ":banner_id", banner_scene_props_begin),
        (assign, ":duplicate", 0),
        (assign, ":end", companions_end),
        (try_for_range, ":troop", active_npcs_including_player_begin, ":end"), #Check player and companions
            (troop_slot_eq, ":troop", slot_troop_occupation, slto_kingdom_hero), #Check if a Lord
            (troop_slot_eq, ":troop", slot_troop_banner_scene_prop, ":banner_id"),
            (assign, ":duplicate", 1), #Duplicate found
            (assign, ":end", 0), #Break the loop
        (try_end),
        (neq, ":duplicate", 1), #No duplicate
        (assign, ":end_loop", 0), #Then break the loop, else try again
        (troop_set_slot, "$g_talk_troop", slot_troop_banner_scene_prop, ":banner_id"), 
    (try_end),
(try_end),
(troop_set_slot, "$g_talk_troop", slot_troop_occupation, slto_kingdom_hero),
##diplomacy start+
##Alternate use of this slot so we don't forget the enfeoffment, even if later
##the companion's occupation changes and he loses the fief.
(troop_set_slot, "$g_talk_troop", slot_troop_playerparty_history, dplmc_pp_history_granted_fief),

#Handle player is co-ruler of NPC faction
##OLD:
#(troop_set_faction, "$g_talk_troop", "fac_player_supporters_faction"),
##NEW:
(assign, ":is_coruler", 0),
(try_begin),
	(is_between, "$players_kingdom", npc_kingdoms_begin, npc_kingdoms_end),
	(neg|faction_slot_eq, "fac_player_supporters_faction", slot_faction_state, sfs_active),
	(call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", "$players_kingdom"),
	(ge, reg0, DPLMC_FACTION_STANDING_LEADER_SPOUSE),#player is co-ruler of an NPC faction
	(assign, ":is_coruler", 1),
	(troop_set_faction, "$g_talk_troop", "$players_kingdom"),
(else_try),
	(troop_set_faction, "$g_talk_troop", "fac_player_supporters_faction"),
(try_end),
##diplomacy end+

(call_script, "script_give_center_to_lord", "$temp", "$g_talk_troop", 0),
(try_begin),
   (faction_slot_eq, "$players_kingdom", slot_faction_political_issue, "$temp"),
   (faction_set_slot, "$players_kingdom", slot_faction_political_issue, -1),
(try_end),

(try_begin),
  (troop_slot_eq, "$g_talk_troop", slot_troop_original_faction, 0),
  (party_get_slot, ":fief_culture", "$temp", slot_center_original_faction),
  (troop_set_slot, "$g_talk_troop", slot_troop_original_faction, ":fief_culture"),
(try_end),

(store_character_level, ":renown", "$g_talk_troop"),
(val_mul, ":renown", 15),
(val_max, ":renown", 200),
# (troop_set_slot, "$g_talk_troop", slot_troop_renown, ":renown"),
(call_script, "script_change_troop_renown", "$g_talk_troop", ":renown"), #SB : leave original renown alone, those are around 100 base

##diplomacy start+
##Adjust starting gold by Looting and Trade skills
##(troop_set_slot, "$g_talk_troop", slot_troop_wealth, 2500), #represents accumulated loot
(troop_get_slot, ":initial_wealth", "$g_talk_troop", slot_troop_wealth),
(store_troop_gold, ":initial_gold", "$g_talk_troop"), #SB : account actual abstracted wealth, probably divide by 10?
(val_add, ":initial_gold", ":initial_wealth"),
(try_begin),
	#Changes must be enabled
	(ge, "$g_dplmc_gold_changes", DPLMC_GOLD_CHANGES_MEDIUM),
	#initial gold is 2500 * (10 + trade + looting) / 10, rounded.
	(store_skill_level, ":modifier", "skl_trade", "$g_talk_troop"),
	(store_skill_level, ":skill_level", "skl_looting", "$g_talk_troop"),
	(val_add, ":modifier", ":skill_level"),
	(val_add, ":modifier", 10),
	(val_mul, ":initial_gold", ":modifier"),
	(val_add, ":initial_gold", 5),
	(val_div, ":initial_gold", 10),
(try_end),
(troop_set_slot, "$g_talk_troop", slot_troop_wealth, ":initial_gold"), #represents accumulated loot
##diplomacy end+
#		(troop_set_slot, "$g_talk_troop", slot_troop_readiness_to_join_army, 100),
#		(troop_set_slot, "$g_talk_troop", slot_troop_readiness_to_follow_orders, 100),

(str_store_troop_name_plural, s12, "$g_talk_troop"),
   ##diplomacy start+
#(troop_get_type, ":is_female", "$g_talk_troop"),
(call_script, "script_dplmc_store_troop_is_female_reg", "$g_talk_troop", 65),
# (assign, reg65, reg0),
(assign, ":is_female", reg65), #SB : store into reg65
(try_begin),
   ##Enable the "Tribune" dialogue option for all Custodian or Benefactor companions
   ##from the Rhodok lands, instead of just Bunduk.  Currently there are no others
   ##besides him, but other mods may add them.
   #(eq, "$g_talk_troop", "trp_npc10"),
   (this_or_next|troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_benefactor),
      (troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_custodian),
   (troop_slot_eq, "$g_talk_troop", slot_troop_original_faction, "fac_kingdom_5"),
   ##diplomacy end+
   (str_store_string, s14, "str_tribune_s12"),
(else_try),
   (eq, ":is_female", 1),
   (str_store_string, s14, "str_lady_s12"),
(else_try),
   (str_store_string, s14, "str_lord_s12"),
(try_end),
(troop_set_name, "$g_talk_troop", s14),
          ##diplomacy start+
          ##Custom player kingdom vassal titles, credit Caba`drin start
          (try_begin),
            (eq, ":is_coruler", 1),
            (call_script, "script_troop_set_title_according_to_faction", "$g_talk_troop", "$players_kingdom"),
          (else_try),
            (call_script, "script_troop_set_title_according_to_faction", "$g_talk_troop", "fac_player_supporters_faction"),
          (try_end),
          ##Custom player kingdom vassal titles, credit Caba`drin start
          ##diplomacy end+
          (unlock_achievement, ACHIEVEMENT_I_DUB_THEE),

          (call_script, "script_check_concilio_calradi_achievement"),

# (try_begin),
   # (troop_add_item, "$g_talk_troop", "itm_saddle_horse", 0),
   # (troop_add_item, "$g_talk_troop", "itm_courser", 0),
   # (troop_add_item, "$g_talk_troop", "itm_courtly_outfit",0),
   # (troop_add_item, "$g_talk_troop", "itm_heraldic_mail_with_tabard",0),
   # (troop_add_item, "$g_talk_troop", "itm_red_gambeson",0),
   # (troop_add_item, "$g_talk_troop", "itm_sword_medieval_c",0),
   # (troop_add_item, "$g_talk_troop", "itm_tab_shield_kite_cav_b",0),
   # (troop_add_item, "$g_talk_troop", "itm_light_lance",0),
# (try_end),

#SB : add a heraldic armour if none present
(try_begin),
  (troop_slot_eq, "$g_talk_troop", dplmc_slot_upgrade_armor, 1),
  (troop_get_inventory_slot, ":cur_armor", "$g_talk_troop", ek_body),
  (try_begin), #if bare torso for whatever reason
    (eq, ":cur_armor", -1),
    (assign, reg0, 0),
  (else_try),
    # (item_get_body_armor, ":armor", ":cur_armor"),
    (troop_get_inventory_slot_modifier, ":imod", "$g_talk_troop", ek_body),
    (call_script, "script_dplmc_get_item_score_with_imod", ":cur_armor", ":imod"),
  (try_end),
  (lt, reg0, 66 + 6 + 6), #base heraldic armor + lordly*2
  (store_random_in_range, ":item_no","itm_heraldic_mail_with_surcoat", "itm_turret_hat_ruby"),
  # (troop_add_item, "$g_talk_troop", ":armor", imod_lordly),
  # (store_item_value, ":item_cost", ":item_no"),
  # (ge, ":initial_gold", ":item_cost"),
  (troop_set_inventory_slot, "$g_talk_troop", ek_body, ":item_no"),
  (troop_set_inventory_slot_modifier, "$g_talk_troop", ek_body, imod_lordly),
  (gt, ":cur_armor", 0), #move back to inventory
  (troop_add_item, "$g_talk_troop", ":cur_armor", ":imod"),
(try_end),

#SB : add a decent horse if none present
(try_begin),
  (troop_slot_eq, "$g_talk_troop", dplmc_slot_upgrade_horse, 1),
  #SB : add a random lance
  (store_random_in_range, ":item_no", "itm_light_lance", "itm_great_lance"),
  (troop_add_item, "$g_talk_troop", ":item_no", imod_balanced),
  (troop_get_inventory_slot, ":cur_horse", "$g_talk_troop", ek_horse),
  (eq, ":cur_horse", -1),
  (store_random_in_range, ":item_no","itm_arabian_horse_a", "itm_charger"),
  # (troop_add_item, "$g_talk_troop", ":armor", imod_spirited),
  (troop_set_inventory_slot, "$g_talk_troop", ek_horse, ":item_no"),
  (store_random_in_range, ":imod", imod_stubborn, imod_fresh),
  (troop_set_inventory_slot_modifier, "$g_talk_troop", ek_horse, ":imod"),
  #doesn't need to equip the horse
(try_end),
# (troop_equip_items, "$g_talk_troop"),

#SB : add a faction-appropriate tableau shield
(troop_get_slot, ":faction_no", "$g_talk_troop", slot_troop_original_faction),
#this slot is set even if it was 0 before from the fief_culture
(assign, ":item_no", "itm_shield_heater_c"), #brown lion shield
(try_begin),
  (eq, ":faction_no", "fac_kingdom_1"),#heater for swadian/rhodok
  (assign, ":item_no", "itm_tab_shield_heater_cav_b"),
(else_try),
  (eq, ":faction_no", "fac_kingdom_5"),  #heater for swadian/rhodok
  (assign, ":item_no", "itm_tab_shield_heater_d"),
(else_try),
  (eq, ":faction_no", "fac_kingdom_2"),  #kite for vaegir
  (assign, ":item_no", "itm_tab_shield_kite_cav_b"),
(else_try),
  (this_or_next|eq, ":faction_no", "fac_kingdom_3"),
  (eq, ":faction_no", "fac_kingdom_6"),  #cav for khergit/sarranid
  (assign, ":item_no", "itm_tab_shield_small_round_c"),
(else_try),
  (eq, ":faction_no", "fac_kingdom_4"),  #huscarl for nord
  (assign, ":item_no", "itm_tab_shield_round_e"),
(try_end),
(store_random_in_range, ":imod", imod_sturdy, imod_superb),
(troop_add_item, "$g_talk_troop", ":item_no", ":imod"),

#SB : change troop base type (if player hasn't touched it already) after adding equipment
(try_begin),
  (troop_get_class, ":class", "$g_talk_troop"),
  (eq, ":class", grc_infantry), #basic class

  (try_begin),
    (troop_get_inventory_slot, ":horse_no", "$g_talk_troop", ek_horse),
    (gt, ":horse_no", -1),
    (assign, ":class", grc_cavalry),
  (else_try),
    (assign, ":slot_end", ek_head),
    (try_for_range, ":item_slot", ek_item_0, ":slot_end"),
      (troop_get_inventory_slot, ":item_no", "$g_talk_troop", ":item_slot"),
      (item_get_type, ":itp", ":item_no"),
      (this_or_next|is_between, ":itp", itp_type_bow, itp_type_goods),
      (is_between, ":itp", itp_type_pistol, itp_type_bullets),
      (assign, ":class", grc_archers),
      (assign, ":slot_end", -1),
    (try_end),
  (try_end),
  (troop_set_class, "$g_talk_troop", ":class"),
(try_end),


(call_script, "script_dplmc_npc_morale", "$g_talk_troop", 0), #just get the number
(store_div, ":relation_boost", reg0, 3),
#		(val_add, ":relation_boost", 10),
(call_script, "script_troop_change_relation_with_troop", "$g_talk_troop", "trp_player", ":relation_boost"),

(str_store_party_name, s17, "$temp"),
(store_sub, ":npc_no", "$g_talk_troop", "trp_npc1"),
(store_add, ":speech", "str_npc1_fief_acceptance", ":npc_no"),
#        (troop_get_slot, ":speech", "$g_talk_troop", slot_troop_fief_acceptance_string),
(str_store_string, s5, ":speech"),
]],



[anyone, "start", [(is_between, "$g_talk_troop", companions_begin, companions_end),
               (this_or_next|eq, "$talk_context", tc_tavern_talk),
            (eq, "$talk_context", tc_court_talk),
               (main_party_has_troop, "$g_talk_troop")],
"Let's leave whenever you are ready.", "close_window", []],

[anyone, "start", [(is_between, "$g_talk_troop", companions_begin, companions_end),
               (troop_slot_eq, "$g_talk_troop", slot_troop_occupation, 0),
               (troop_slot_eq, "$g_talk_troop", slot_troop_turned_down_twice, 1),
],
"Please do not waste any more of my time today, {sir/madame}. Perhaps we shall meet again in our travels.", "close_window", [
    # (call_script, "script_change_player_relation_with_troop", "$g_talk_troop", -1),
 ]],


[anyone, "start", [(is_between, "$g_talk_troop", companions_begin, companions_end),
               (troop_slot_eq, "$g_talk_troop", slot_troop_occupation, 0),
               (eq, "$g_talk_troop_met", 0),
               (troop_get_slot, ":intro", "$g_talk_troop", slot_troop_intro),
               (str_store_string, 5, ":intro"),
               (str_store_party_name, 20, "$g_encountered_party"),
],
"{s5}", "companion_recruit_intro_response", [
              (troop_set_slot, "$g_talk_troop", slot_troop_first_encountered, "$g_encountered_party"),
 ]],


[anyone|plyr, "companion_recruit_intro_response", [
               (troop_get_slot, ":intro_response", "$g_talk_troop", slot_troop_intro_response_1),
               (str_store_string, 6, ":intro_response")
], "{s6}", "companion_recruit_backstory_a", []],

[anyone|plyr, "companion_recruit_intro_response", [
               (troop_get_slot, ":intro_response", "$g_talk_troop", slot_troop_intro_response_2),
               (str_store_string, 7, ":intro_response")
],  "{s7}", "close_window", [
    ]],

[anyone, "companion_recruit_backstory_a", [(troop_get_slot, ":backstory_a", "$g_talk_troop", slot_troop_backstory_a),
               (str_store_string, 5, ":backstory_a"),
               (str_store_string, 19, "str_here_plus_space"),
               (str_store_party_name, 20, "$g_encountered_party"),
],
"{s5}", "companion_recruit_backstory_b", []],

[anyone, "companion_recruit_backstory_b", [(troop_get_slot, ":backstory_b", "$g_talk_troop", slot_troop_backstory_b),
               (str_store_string, 5, ":backstory_b"),
               (str_store_party_name, 20, "$g_encountered_party"),
],
"{s5}", "companion_recruit_backstory_c", []],

[anyone, "companion_recruit_backstory_c", [(troop_get_slot, ":backstory_c", "$g_talk_troop", slot_troop_backstory_c),
               (str_store_string, 5, ":backstory_c"),
],
"{s5}", "companion_recruit_backstory_response", []],

[anyone|plyr, "companion_recruit_backstory_response", [
               (troop_get_slot, ":backstory_response", "$g_talk_troop", slot_troop_backstory_response_1),
               (str_store_string, 6, ":backstory_response")
], "{s6}", "companion_recruit_signup", []],

[anyone|plyr, "companion_recruit_backstory_response", [
               (troop_get_slot, ":backstory_response", "$g_talk_troop", slot_troop_backstory_response_2),
               (str_store_string, 7, ":backstory_response")
],  "{s7}", "close_window", [
    ]],

[anyone, "companion_recruit_signup", [(troop_get_slot, ":signup", "$g_talk_troop", slot_troop_signup),
               (str_store_string, 5, ":signup"),
               (str_store_party_name, 20, "$g_encountered_party"),

],
"{s5}", "companion_recruit_signup_b", []],

[anyone, "companion_recruit_signup_b", [
(troop_get_slot, ":signup", "$g_talk_troop", slot_troop_signup_2),
(troop_get_slot, reg3, "$g_talk_troop", slot_troop_payment_request),#

(str_store_string, 5, ":signup"),
(str_store_party_name, 20, "$g_encountered_party"),

],
"{s5}", "companion_recruit_signup_response", []],

[anyone|plyr, "companion_recruit_signup_response", [(neg|hero_can_join, "p_main_party"),], "Unfortunately, I can't take on any more hands in my party right now.", "close_window", [
]],

[anyone|plyr, "companion_recruit_signup_response", [
              (hero_can_join, "p_main_party"),
              (troop_get_slot, ":signup_response", "$g_talk_troop", slot_troop_signup_response_1),
              (str_store_string, 6, ":signup_response")
], "{s6}", "companion_recruit_payment", []],

[anyone|plyr, "companion_recruit_signup_response", [
              (hero_can_join, "p_main_party"),
               (troop_get_slot, ":signup_response", "$g_talk_troop", slot_troop_signup_response_2),
               (str_store_string, 7, ":signup_response")
],  "{s7}", "close_window", [
    ]],

[anyone|auto_proceed, "companion_recruit_payment", [
(troop_slot_eq, "$g_talk_troop", slot_troop_payment_request, 0),
],
".", "companion_recruit_signup_confirm", []],

[anyone, "companion_recruit_payment", [
(store_sub, ":npc_offset", "$g_talk_troop", "trp_npc1"),
(store_add, ":dialog_line", "str_npc1_payment", ":npc_offset"),
(str_store_string, s5, ":dialog_line"),
(troop_get_slot, reg3, "$g_talk_troop", slot_troop_payment_request),
(str_store_party_name, s20, "$g_encountered_party"),
],
"{s5}", "companion_recruit_payment_response", []],

[anyone|plyr, "companion_recruit_payment_response", [
              (hero_can_join, "p_main_party"),
              (troop_get_slot, ":amount_requested", "$g_talk_troop", slot_troop_payment_request),#
              (store_troop_gold, ":gold", "trp_player"),#
              (ge, ":gold", ":amount_requested"),#
              (assign, reg3, ":amount_requested"),
              (store_sub, ":npc_offset", "$g_talk_troop", "trp_npc1"),
              (store_add, ":dialog_line", "str_npc1_payment_response", ":npc_offset"),
              (str_store_string, s6, ":dialog_line"),
], "{s6}", "companion_recruit_signup_confirm", [
              (troop_get_slot, ":amount_requested", "$g_talk_troop", slot_troop_payment_request),#
              (gt, ":amount_requested", 0),#
              (troop_remove_gold, "trp_player", ":amount_requested"),  #
              #SB : add gold to companion's coffer
              (troop_add_gold, "$g_talk_troop", ":amount_requested"),
              (troop_set_slot, "$g_talk_troop", slot_troop_payment_request, 0),#
    ]],

[anyone|plyr, "companion_recruit_payment_response", [
               (troop_get_slot, ":signup_response", "$g_talk_troop", slot_troop_signup_response_2),
               (str_store_string, s7, ":signup_response")
],  "Sorry. I can't afford that at the moment.", "close_window", [
    ]],

[anyone, "start", [(is_between, "$g_talk_troop", companions_begin, companions_end),
               (troop_slot_eq, "$g_talk_troop", slot_troop_occupation, 0),
               (troop_slot_eq, "$g_talk_troop", slot_troop_met_previously, 1),
               (troop_slot_eq, "$g_talk_troop", slot_troop_playerparty_history, 0),

],
"We meet again.", "companion_recruit_meet_again", [
               (troop_set_slot, "$g_talk_troop", slot_troop_turned_down_twice, 1),
 ]],

[anyone|plyr, "companion_recruit_meet_again", [
], "So... What have you been doing since our last encounter?", "companion_recruit_backstory_delayed", []],

[anyone|plyr, "companion_recruit_meet_again", [
],  "Good day to you.", "close_window", [
    ]],


[anyone, "start", [(is_between, "$g_talk_troop", companions_begin, companions_end),
               (troop_slot_eq, "$g_talk_troop", slot_troop_occupation, 0),
               (troop_slot_eq, "$g_talk_troop", slot_troop_met_previously, 0),
               (troop_slot_eq, "$g_talk_troop", slot_troop_playerparty_history, 0),
],
"Yes?", "companion_recruit_secondchance", [
               (troop_set_slot, "$g_talk_troop", slot_troop_turned_down_twice, 1),
 ]],


[anyone|plyr, "companion_recruit_secondchance", [
], "My apologies if I was rude, earlier. What was your story again?", "companion_recruit_backstory_b", []],

[anyone|plyr, "companion_recruit_secondchance", [
],  "Never mind.", "close_window", [
    ]],

[anyone, "companion_recruit_backstory_delayed",
[(troop_get_slot, ":backstory_delayed", "$g_talk_troop", slot_troop_backstory_delayed),
(str_store_string, s5, ":backstory_delayed")
],
"{s5}", "companion_recruit_backstory_delayed_response", []],

[anyone|plyr, "companion_recruit_backstory_delayed_response", [
], "I might be able to use you in my company.", "companion_recruit_signup_b", [
    ]],

[anyone|plyr, "companion_recruit_backstory_delayed_response", [
],  "I'll let you know if I hear of anything.", "close_window", [
    ]],

[anyone, "companion_recruit_signup_confirm", [], "Good! Give me a few moments to prepare and I'll be ready to move.", "close_window",
[(call_script, "script_recruit_troop_as_companion", "$g_talk_troop")]],



### Rehire dialogues
[anyone, "start", [(is_between, "$g_talk_troop", companions_begin, companions_end),
          (neg|troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_hero),
               (troop_slot_eq, "$g_talk_troop", slot_troop_playerparty_history, pp_history_indeterminate),

               (troop_get_slot, ":prison_center", "$g_talk_troop", slot_troop_prisoner_of_party),
               (lt, ":prison_center", centers_begin),
],
"My offer to rejoin you still stands, if you'll have me.", "companion_rehire", []],

### If the companion and the player were separated in battle
[anyone, "start",
[
(is_between, "$g_talk_troop", companions_begin, companions_end),
(neg|troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_hero),
(troop_slot_eq, "$g_talk_troop", slot_troop_playerparty_history, pp_history_scattered),

(this_or_next|eq, "$talk_context", tc_hero_freed),
(neg|troop_slot_ge, "$g_talk_troop", slot_troop_prisoner_of_party, 0),

(neq, "$talk_context", tc_prison_break),

(assign, ":battle_fate", "str_battle_fate_1"),
(store_random_in_range, ":fate_roll", 0, 5),
(val_add, ":battle_fate", ":fate_roll"),
(str_store_string, s6, ":battle_fate"),
(troop_get_slot, ":honorific", "$g_talk_troop", slot_troop_honorific),
(str_store_string, s5, ":honorific"),
],
"It is good to see you alive, {s5}! {s6}, and I did not know whether you had been captured, or slain, or got away. I've been roaming around since then, looking for you. Shall I get my gear together and rejoin your company?","companion_rehire",
[
(troop_set_slot, "$g_talk_troop", slot_troop_playerparty_history, pp_history_indeterminate),
(troop_set_slot, "$g_talk_troop", slot_troop_prisoner_of_party, -1),
]],

[anyone|plyr,"start",
[
(is_between, "$g_talk_troop", companions_begin, companions_end),
(neg|troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_hero),
(troop_slot_eq, "$g_talk_troop", slot_troop_playerparty_history, pp_history_scattered),

(troop_slot_ge, "$g_talk_troop", slot_troop_prisoner_of_party, 0),

(neq, "$talk_context", tc_prison_break),

(assign, ":battle_fate", "str_battle_fate_1"),
(store_random_in_range, ":fate_roll", 0, 5),
(val_add, ":battle_fate", ":fate_roll"),
(str_store_string, s6, ":battle_fate"),
(troop_get_slot, ":honorific", "$g_talk_troop", slot_troop_honorific),
(str_store_string, s5, ":honorific"),
],
"I've come to break you out of here.", "companion_prison_break_chains",[]],

[anyone,"companion_prison_break_chains", [],
"Thank the heavens you came! However, I'm not going anywhere with these chains on my legs. You'll need to get the key away from the guard somehow.", "close_window",[]],




### If the player and the companion parted on bad terms
[anyone, "start", [(is_between, "$g_talk_troop", companions_begin, companions_end),
               (troop_slot_eq, "$g_talk_troop", slot_troop_occupation, 0),
               (troop_slot_eq, "$g_talk_troop", slot_troop_turned_down_twice, 0),
               (troop_slot_eq, "$g_talk_troop", slot_troop_playerparty_history, pp_history_quit),
               (troop_get_slot, ":speech", "$g_talk_troop", slot_troop_rehire_speech),
               (str_store_string, 5, ":speech"),
],
"{s5}", "companion_rehire", [
               (troop_set_slot, "$g_talk_troop", slot_troop_playerparty_history, pp_history_indeterminate),
]],


###If the player and the companion parted on good terms
[anyone, "start", [(is_between, "$g_talk_troop", companions_begin, companions_end),
               (troop_slot_eq, "$g_talk_troop", slot_troop_occupation, 0),
               (troop_slot_eq, "$g_talk_troop", slot_troop_playerparty_history, pp_history_dismissed),
               (troop_get_slot, ":honorific", "$g_talk_troop", slot_troop_honorific),
               (str_store_string, 21, ":honorific"),
               (troop_get_slot, ":speech", "$g_talk_troop", slot_troop_backstory_delayed),
               (str_store_string, 5, ":speech"),
],
"It is good to see you, {s21}! To tell you the truth, I had hoped to run into you.",
"companion_was_dismissed", [
               (troop_set_slot, "$g_talk_troop", slot_troop_playerparty_history, pp_history_indeterminate),
]],

[anyone, "companion_was_dismissed", [
          (neg|troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_hero),
                (troop_get_slot, ":speech", "$g_talk_troop", slot_troop_backstory_delayed),
               (str_store_string, 5, ":speech"),
],
"{s5}. Would you want me to rejoin your company?", "companion_rehire", [
]],


[anyone|plyr, "companion_rehire",
[
(hero_can_join, "p_main_party"),
], "Welcome back, my friend!", "companion_recruit_signup_confirm", []],

[anyone|plyr, "companion_rehire",
[],
"Sorry, I can't take on anyone else right now.", "companion_rehire_refused", []],

[anyone, "companion_rehire_refused", [], "Well... Look me up if you change your mind, eh?", "close_window",
[
(troop_get_slot, ":current_town_no", "$g_talk_troop", slot_troop_cur_center),

(try_begin),
 (neg|is_between, ":current_town_no", towns_begin, towns_end),

 (store_random_in_range, ":town_no", towns_begin, towns_end),
 (troop_set_slot, "$g_talk_troop", slot_troop_cur_center, ":town_no"),

 (try_begin),
   (ge, "$cheat_mode", 1),
   (assign, reg1, ":current_town_no"),
   (str_store_party_name, s7, ":town_no"),
   (display_message, "@{!}current town was {reg1}, now moved to {s7}"),
 (try_end),
(try_end),
]],

#Default dialog added - for rehire
[anyone, "start", [
(is_between, "$g_talk_troop", companions_begin, companions_end),
(neg|troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_hero),

(troop_get_slot, ":prison_center", "$g_talk_troop", slot_troop_prisoner_of_party),
(lt, ":prison_center", centers_begin),
], "So... Do you want me back yet?", "companion_rehire",
[]],
#Ministerial issues




[anyone, "minister_issues",
[
(check_quest_active, "qst_consult_with_minister"),
(eq, "$g_minister_notification_quest", "qst_resolve_dispute"),

(setup_quest_text,"qst_resolve_dispute"),

(quest_get_slot, ":lord_1", "qst_resolve_dispute", slot_quest_target_troop),
(str_store_troop_name, s11, ":lord_1"),

(quest_get_slot, ":lord_2", "qst_resolve_dispute", slot_quest_object_troop),
(str_store_troop_name, s12, ":lord_2"),

(str_store_string, s2, "str_resolve_the_dispute_between_s11_and_s12"),
(call_script, "script_start_quest", "qst_resolve_dispute", -1),
(quest_set_slot, "qst_resolve_dispute", slot_quest_expiration_days, 30),
(quest_set_slot, "qst_resolve_dispute", slot_quest_giver_troop, "$g_player_minister"),
(quest_set_slot, "qst_resolve_dispute", slot_quest_target_state, 0),
(quest_set_slot, "qst_resolve_dispute", slot_quest_object_state, 0),

(quest_get_slot, ":lord_1", "qst_resolve_dispute", slot_quest_target_troop), #this block just to check if the slots work
(str_store_troop_name, s11, ":lord_1"),
(quest_get_slot, ":lord_2", "qst_resolve_dispute", slot_quest_object_troop),
(str_store_troop_name, s12, ":lord_2"),

],
"There is a matter which needs your attention. The quarrel between {s11} and {s12} has esclatated to a point where it has become unseemly. If you do intervene, you risk offending one of the lords. However, if you do nothing, you risk appearing weak. Such are the burdens of kingship, {sire/my lady}.", "minister_pretalk",
[
(call_script, "script_end_quest", "qst_consult_with_minister"),
]],

[anyone, "minister_issues",
[
(assign, "$g_center_taken_by_player_faction", -1),
(try_for_range, ":center_no", centers_begin, centers_end),
(eq, "$g_center_taken_by_player_faction", -1),
(store_faction_of_party, ":center_faction", ":center_no"),
##diplomacy start+ Handle player is co-ruler of kingdom
(assign, ":alt_faction", 0),
(try_begin),
	(eq, ":center_faction", "$players_kingdom"),
	(is_between, "$players_kingdom", npc_kingdoms_begin, npc_kingdoms_end),
	(call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", "$players_kingdom"),
	(ge, reg0, DPLMC_FACTION_STANDING_LEADER_SPOUSE),
	(assign, ":alt_faction", 1),
(try_end),
(this_or_next|eq, ":alt_faction",  1),
##diplomacy end+
(eq, ":center_faction", "fac_player_supporters_faction"),
(neg|party_slot_ge, ":center_no", slot_town_lord, 0),
(assign, "$g_center_taken_by_player_faction", ":center_no"),
(try_end),
(is_between, "$g_center_taken_by_player_faction", centers_begin, centers_end),
(str_store_party_name, s1, "$g_center_taken_by_player_faction"),
],
"{s1} currently does not have a lord. You may wish to keep it this way, as lords will sometimes gravitate towards lieges who have land to offer, but for the time being, no one is collecting any of its rents.", "minister_talk",
[]],

[anyone, "minister_issues",
[
(neg|is_between, "$g_player_minister", active_npcs_begin, kingdom_ladies_end),
],
"At this point, there are no particularly urgent matters which need your attention. I should point out though, sire, that I am not very skilled in the ways of politics, and that I am anxious to return to private life. If you wish to issue any but the most basic directives, I suggest appointing a trusted companion in my stead. In the meantime, is there anything you wish done?", "minister_talk",[]],

[anyone, "minister_issues",
[
(eq, 1, 0),
],
"{!}[Should not appear - there to prevent error related to center_captured_lord_advice]", "center_captured_lord_advice",[]],

[anyone, "minister_issues",
[
(lt, "$player_right_to_rule", 30),
],
"If I may offer you a world of advice, my {lord/lady}, it seems that your right to rule as an independent monarch is not sufficiently recognized, and this may bring us problems further down the road. It may be advisable to find another kingdom with whom you have shared interests and seek its recognition, to establish yourself as an equal with Calradia's other kings.", "minister_talk",[]],


[anyone, "minister_issues",
[],
"At this point, there are no particularly urgent matters which need your attention. Is there anything you wish done?", "minister_talk",[]],

[anyone, "minister_pretalk",
[],
"Is there anything you wish done?", "minister_talk",
[]],

[anyone|plyr,"minister_talk",
[
(is_between, "$g_player_minister", active_npcs_begin, kingdom_ladies_end),
],
"Do you have any ideas to strengthen our kingdom's unity?", "combined_political_quests",[
(call_script, "script_get_political_quest", "$g_talk_troop"),
(assign, "$political_quest_found", reg0),
(assign, "$political_quest_target_troop", reg1),
(assign, "$political_quest_object_troop", reg2),

]],


[anyone|plyr,"minister_talk",
[
(assign, "$political_quest_to_cancel", -1),
(try_begin),
  (check_quest_active, "qst_offer_gift"),
  (quest_slot_eq, "qst_offer_gift", slot_quest_giver_troop, "$g_talk_troop"),
  (assign, "$political_quest_to_cancel", "qst_offer_gift"),
  (str_store_string, s10, "str_offer_gift_description"),
(else_try),
  (check_quest_active, "qst_resolve_dispute"),
  (quest_slot_eq, "qst_resolve_dispute", slot_quest_giver_troop, "$g_talk_troop"),
  (assign, "$political_quest_to_cancel", "qst_resolve_dispute"),
  (str_store_string, s10, "str_resolve_dispute_description"),
(try_end),
(gt, "$political_quest_to_cancel", 0),
],
"Let's abandon our plan to {s10}.", "minister_cancel_political_quest",[
]],

[anyone,"minister_cancel_political_quest",
[],
"Are you sure you want to drop that idea?", "minister_cancel_political_quest_confirm",[
]],

[anyone|plyr,"minister_cancel_political_quest_confirm",
[],
"Yes, I am sure. Let's abandon that idea.", "minister_pretalk",[
(call_script, "script_abort_quest", "$political_quest_to_cancel", 1),
]],

[anyone|plyr,"minister_cancel_political_quest_confirm",
[],
"Actually, never mind.", "minister_pretalk",[
]],



[anyone|plyr, "minister_talk",
[
(is_between, "$g_player_minister", active_npcs_begin, kingdom_ladies_end),
],
"I wish to dispatch an emissary.", "minister_diplomatic_kingdoms",
[]],

[anyone|plyr, "minister_talk",
[
(is_between, "$g_player_minister", active_npcs_begin, kingdom_ladies_end),
],
"I wish to indict a disloyal vassal for treason.", "minister_indict",
[]],

[anyone|plyr, "minister_talk",
[
(faction_get_slot, ":current_marshal", "$players_kingdom", slot_faction_marshall),
(ge, ":current_marshal", 0),
(try_begin),
(gt, ":current_marshal", 0),
(str_store_troop_name, s4, ":current_marshal"),
(else_try),
(str_store_string, s4, "str_myself"),
(try_end),
],
"I wish to replace {s4} as marshal.", "minister_change_marshal",
[]],

[anyone|plyr, "minister_talk",
[
(faction_slot_eq,  "$players_kingdom", slot_faction_marshall, -1),
],
"I wish to appoint a new marshal.", "minister_change_marshal",
[]],

[anyone, "minister_change_marshal",
[
(store_current_hours, ":hours"),
(val_sub, ":hours", "$g_player_faction_last_marshal_appointment"),
##diplomacy start+ Change based on centralization
#(lt, ":hours", 48), (Standard 48 hours, minimum 24 hours, maximum 72 hours)
(faction_get_slot, ":centralization", "fac_player_supporters_faction", dplmc_slot_faction_centralization),
(val_clamp, ":centralization", -3, 4),
(store_mul, ":reset_time", ":centralization", 8),
(val_add, ":reset_time", 48),
(lt, ":hours", ":reset_time"),
##diplomacy end+
],
"You have just made such an appointment, {sire/my lady}. If you countermand your decree so soon, there will be great confusion. We will need to wait a few days.", "minister_pretalk",
[]],

#SB : jump to renaming menu
[anyone|plyr, "minister_talk",
[
  (is_between, "$g_player_minister", active_npcs_begin, kingdom_ladies_end),
  (party_slot_eq, "$g_player_court", slot_town_lord, "trp_player"),
  (eq, "$g_player_court", "$current_town"),
],
"I wish to rename our capital.", "minister_rename_court",
[]],

[anyone, "minister_rename_court",
  [
    (store_and, ":name_set", "$players_kingdom_name_set", rename_center),
    (ge, ":name_set", 1),
  ],
  "We have already have rededicated the old capital under your auspices. The townfolks won't stand for it this time.", "minister_pretalk",
  []],

[anyone, "minister_rename_court",
  [
    (neg|faction_slot_ge, "fac_player_supporters_faction", dplmc_slot_faction_centralization, 0),
  ],
  "Unfortunately we cannot make this decision for the people, as our realm is not centralized enough and will not recognize {s1} as the capital.", "minister_pretalk",
  [(str_store_party_name, s1, "$g_player_court"),]],

[anyone, "minister_rename_court",
  [],
  "Are you sure, my liege? The good citizens of {s1} might not welcome this arbitrary change. Signs will need to be torn down, records must be reinked, and we'll need at least 10,000 denars in the treasury to officialize our decision -- alternatively we can host a feast here for both the townspeople and any attending lords so as to spread the word more easily. Oh, and my niece just made this lace doily for your high table, we need a bolt of linen to make a new set.", "minister_rename_confirm",
  [(str_store_party_name, s1, "$g_player_court"),]],

[anyone|plyr, "minister_rename_confirm",
  [
    (store_troop_gold, ":treasury", "trp_household_possessions"),
    (ge, ":treasury", 10000),
    (player_has_item, "itm_linen"),
  ],
    "A new era dawns here - send out the heralds and sign painters!", "minister_pretalk",
    [
    # (faction_get_slot, ":centralization", "fac_player_supporters_faction", dplmc_slot_faction_centralization),
    # (val_add, ":centralization", 1),
    # (val_clamp, ":centralization", -3, 3),
    # (faction_set_slot, "fac_player_supporters_faction", dplmc_slot_faction_centralization, ":centralization"),
    # (val_or, "$players_kingdom_name_set", 2), #this is done from presentation
    (troop_remove_item, "trp_player", "itm_linen"),
    (call_script, "script_change_player_right_to_rule", 3), #arbitrary low value
    (call_script, "script_change_troop_renown", "trp_player", 25),
    (call_script, "script_dplmc_withdraw_from_treasury", 10000),
    (jump_to_menu, "mnu_rename_court"),
    (finish_mission),
    ]],
    
   [anyone|plyr, "minister_rename_confirm",
    [
    (faction_slot_eq, "fac_player_supporters_faction", slot_faction_ai_state, sfai_feast),
    (faction_slot_eq, "fac_player_supporters_faction", slot_faction_ai_object, "$g_player_court"),
    (player_has_item, "itm_linen"),
    #add the condition that at least one lord attends - we talk from the court so assume script_get_heroes_attached_to_center has been called
    (party_get_num_companion_stacks, ":num_stacks","p_temp_party"),
    (gt, ":num_stacks", 0),
    
    ],
    "Very well -- let all the attendant lords and townsfolk know of our decision.", "minister_pretalk",
    [
    (troop_remove_item, "trp_player", "itm_linen"),
    (party_get_num_companion_stacks, ":num_stacks","p_temp_party"),
    (call_script, "script_change_player_right_to_rule", ":num_stacks"), #1 per attending lord
    (jump_to_menu, "mnu_rename_court"),
    ]],

   [anyone|plyr, "minister_rename_confirm",
    [
    (store_troop_gold, ":treasury", "trp_household_possessions"),
    (lt, ":treasury", 10000),
    ],
    "We can't afford that yet.", "minister_pretalk",
    []],

   [anyone|plyr, "minister_rename_confirm",
    [
    (neg|check_quest_active, "qst_organize_feast"),
    (this_or_next|troop_slot_eq, "$g_talk_troop", slot_troop_spouse, "trp_player"),
    (troop_slot_eq, "trp_player", slot_troop_spouse, "$g_talk_troop"),
    ],
    "We had best start preparations for the feast.", "spouse_organize_feast",
    []],
    
   [anyone|plyr, "minister_rename_confirm",
    [
    (neg|player_has_item, "itm_linen"),
    ],
    "I'd better go shopping then.", "minister_pretalk",
    []],

[anyone|plyr, "minister_talk",
[
(neg|is_between, "$g_player_minister", active_npcs_begin, active_npcs_end),
],
"I wish for you to retire as minister.", "minister_replace",
[]],

[anyone|plyr, "minister_talk",
[
(is_between, "$g_player_minister", active_npcs_begin, active_npcs_end),
(neg|troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_hero),

],
"I wish you to rejoin my party.", "minister_replace",
[]],

[anyone|plyr, "minister_talk",
[
(is_between, "$g_player_minister", active_npcs_begin, kingdom_ladies_end),
],
"I wish you to grant one of my vassals a fief.", "minister_grant_fief",
[]],

[anyone|plyr, "minister_talk",
[
(is_between, "$g_player_minister", active_npcs_begin, kingdom_ladies_end),
(assign, ":fief_found", -1),
##diplomacy start+ Handle player is co-ruler of kingdom
(assign, ":alt_faction", "fac_player_supporters_faction"),
(try_begin),
	(is_between, "$players_kingdom", npc_kingdoms_begin, npc_kingdoms_end),
	(call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", "$players_kingdom"),
	(ge, reg0, DPLMC_FACTION_STANDING_LEADER_SPOUSE),
	(assign, ":alt_faction", "$players_kingdom"),
(try_end),
##diplomacy end+
(try_for_range, ":center", centers_begin, centers_end),
(eq, ":fief_found", -1),
(store_faction_of_party, ":center_faction", ":center"),
##diplomacy start+ Handle player is co-ruler of kingdom
(this_or_next|eq, ":center_faction", ":alt_faction"),
##diplomacy end+
(eq, ":center_faction", "fac_player_supporters_faction"),
(party_get_slot, ":town_lord", ":center", slot_town_lord),
(try_begin),
(ge, ":town_lord", active_npcs_begin),
(store_faction_of_troop, ":town_lord_faction", ":town_lord"),
##diplomacy start+ Handle player is co-ruler of kingdom
(neq, ":town_lord_faction", ":alt_faction"),
##diplomacy end+
(neq, ":town_lord_faction", "fac_player_supporters_faction"),
(assign, ":town_lord", -1),
(try_end),
(lt, ":town_lord", 0),
(assign, ":fief_found", ":center"),
(try_end),
(gt, ":fief_found", -1),
(str_store_party_name, s4, ":fief_found"),
],
"I wish to make myself lord of {s4}.", "minister_grant_self_fief",
[]],

[anyone, "minister_grant_self_fief",
[
],
"As you wish. You shall be lord of {s4}.", "minister_pretalk",
[
(assign, ":fief_found", -1),
##diplomacy start+ Handle player is co-ruler of kingdom
(assign, ":alt_faction", "fac_player_supporters_faction"),
(try_begin),
	(is_between, "$players_kingdom", npc_kingdoms_begin, npc_kingdoms_end),
	(call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", "$players_kingdom"),
	(ge, reg0, DPLMC_FACTION_STANDING_LEADER_SPOUSE),
	(assign, ":alt_faction", "$players_kingdom"),
(try_end),
##diplomacy end+
(try_for_range, ":center", centers_begin, centers_end),
  (eq, ":fief_found", -1),
  (store_faction_of_party, ":center_faction", ":center"),
  ##diplomacy start+ Handle player is co-ruler of kingdom
  (this_or_next|eq, ":center_faction", ":alt_faction"),
  ##diplomacy end+
  (eq, ":center_faction", "fac_player_supporters_faction"),
  (party_get_slot, ":town_lord", ":center", slot_town_lord),
(try_begin),
(ge, ":town_lord", active_npcs_begin),
(store_faction_of_troop, ":town_lord_faction", ":town_lord"),
##diplomacy start+ Handle player is co-ruler of kingdom
(neq, ":town_lord_faction", ":alt_faction"),
##diplomacy end+
(neq, ":town_lord_faction", "fac_player_supporters_faction"),
(assign, ":town_lord", -1),
(try_end),
  (lt, ":town_lord", 0),
  (assign, ":fief_found", ":center"),
(try_end),


(call_script, "script_give_center_to_lord", ":fief_found", "trp_player", 0),
(try_begin),
  (faction_slot_eq, "$players_kingdom", slot_faction_political_issue, ":fief_found"),
  (faction_set_slot, "$players_kingdom", slot_faction_political_issue, -1),
(try_end),
(str_store_party_name, s4, ":fief_found"),

]],


#SB : fix for redirecting dialog after encounter
[anyone,"start", [(eq,"$talk_context",tc_ally_thanks),
    (this_or_next|party_slot_eq, "$g_encountered_party", slot_party_type, spt_patrol),
    (party_slot_eq, "$g_encountered_party", slot_party_type, spt_reinforcement),
    (call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),
    (call_script, "script_dplmc_print_cultural_word_to_sreg", "$g_talk_troop", DPLMC_CULTURAL_TERM_WEAPON, s1),
],
   "Thank you for lending your {s1}, {s0}. It was fortunate to have you nearby.", "close_window", []],

#also another for the more fragile civilian parties
[anyone,"start", [(eq,"$talk_context",tc_ally_thanks),
    (this_or_next|party_slot_eq, "$g_encountered_party", slot_party_type, dplmc_spt_gift_caravan),
    (this_or_next|party_slot_eq, "$g_encountered_party", slot_party_type, spt_messenger),
    (this_or_next|party_slot_eq, "$g_encountered_party", slot_party_type, dplmc_spt_recruiter),
    (party_slot_eq, "$g_encountered_party", slot_party_type, spt_scout),
    (call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),
    (party_get_num_companions, ":num_companions", "$g_encountered_party"),
    (store_sub, reg1, ":num_companions", 1),
],
   "It was fortunate to have you here, {s0}. I don't know what {reg1?we:I} could have done without you.", "close_window", []],




##diplomacy begin
#SB : replaced trp with pt template
#SB : this skips the other dialog options that can screw up behaviour
[pt_dplmc_recruiter|party_tpl, "start", [
  (call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),
  (get_party_ai_object, ":object", "$g_encountered_party"),
  (party_slot_eq, "$g_encountered_party", dplmc_slot_party_recruiter_origin, ":object"),
  (party_slot_eq, "$g_encountered_party", slot_party_ai_object, ":object"),
  (str_store_party_name, s1, ":object"),
], "Don't worry {s0}. We are making our way towards {s1}.", "close_window",[
  (assign, "$g_leave_encounter",1)
]],
# Recruiter kit begin
[pt_dplmc_recruiter|party_tpl, "start", [
##diplomacy start+ replace {reg65?madame:sir} with {s0}.  Also replace "okay to you" with "okay with you".
  (call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),
], "Hello {s0}. If it's ok with you, I would like to get on with my assignment.", "dplmc_recruiter_talk",[]],

#TODO add traveller/merchant caravan gossip

##diplomacy end+
[anyone|plyr, "dplmc_recruiter_talk", [], "Ok, keep going.", "close_window",[(assign, "$g_leave_encounter",1)]],
#SB : gather recruits at either destination or right here
[anyone|plyr, "dplmc_recruiter_talk", [
      (party_get_num_companions, ":amount", "$g_encountered_party"),
      (val_sub, ":amount", 1),   #the recruiter himself doesn't count.
      (gt, ":amount", 0),
      (party_slot_ge, "$g_encountered_party", dplmc_slot_party_recruiter_needed_recruits, ":amount"),
], "We have all the troops we need for now.", "dplmc_recruiter_enough_talk", []], #SB : todo use temp party for parsing


[anyone, "dplmc_recruiter_enough_talk", [
      (party_get_num_companions, ":amount", "$g_encountered_party"),
      (gt, ":amount", 1),
      #TODO : filter out high-level drops to prevent recruiters from being used as troop convoy
], "Excellent, I will take my leave as soon as I've delivered these {reg1} conscripts to {s1}. Would you like to take some with you?", "dplmc_recruiter_enough_option",[
  #refresh slot values
  (party_get_num_companions, ":amount", "$g_encountered_party"),
  (val_sub, ":amount", 1),   #the recruiter himself doesn't count.
  (party_set_slot, "$g_encountered_party", dplmc_slot_party_recruiter_needed_recruits, ":amount"),
  (assign, reg1, ":amount"),
  (party_get_slot, ":recruit_origin", "$g_encountered_party", dplmc_slot_party_recruiter_origin),
  (str_store_party_name, s1, ":recruit_origin"),
]],
[anyone, "dplmc_recruiter_enough_talk", [
      (party_get_num_companion_stacks, ":amount", "$g_encountered_party"),
      (le, ":amount", 1),   #the recruiter himself
], "Well, it looks like my job here is done. Give the constable my regards.", "close_window", 
[
  (remove_party, "$g_encountered_party"), #not sure how safe this is
  (assign, "$g_leave_encounter", 1),
]],

[anyone|plyr, "dplmc_recruiter_enough_option", [], "No, proceed with all haste.", "close_window",[
  (assign, "$g_leave_encounter",1),
  (call_script, "script_dplmc_set_recruiter_extra_text", "$g_encountered_party", -1), #SB : text update (ai re-eval next hour)
]],
[anyone|plyr, "dplmc_recruiter_enough_option", [
  (party_get_free_companions_capacity, ":cap", "p_main_party"),
  (gt, ":cap", 1),
], "Yes, I need to replenish my forces.", "dplmc_recruiter_enough_recruits",[(change_screen_exchange_members, 0),]],

[anyone, "dplmc_recruiter_enough_recruits", [], "I hope you found this batch of recruits to your satisfaction.", "dplmc_recruiter_talk",[]],
[anyone|plyr, "dplmc_recruiter_talk", [], "I want you to recruit different troops.", "dplmc_recruiter_talk_2",[]],

[anyone, "dplmc_recruiter_talk_2", [
(party_get_slot, reg1, "$g_encountered_party", dplmc_slot_party_recruiter_needed_recruits),
(party_get_slot, ":recruit_faction", "$g_encountered_party", dplmc_slot_party_recruiter_needed_recruits_faction),

(try_begin), #specific
  (is_between, ":recruit_faction", npc_kingdoms_begin, npc_kingdoms_end),
  (faction_get_slot, ":offset", ":recruit_faction", slot_faction_adjective),
  # (store_sub, ":offset", ":recruit_faction", "fac_kingdom_1"),
  # (val_add, ":offset", "str_kingdom_1_adjective"),
  (str_store_string, s1, ":offset"),
  (assign, reg10, 1),
(else_try), #any
  (assign, reg10, 0),
(try_end),

], "My current task is to recruit {reg1}{reg10? {s1}:} troops for you. Should I recruit different soldiers from now on?", "dplmc_recruiter_talk_3",[]],
[anyone|plyr, "dplmc_recruiter_talk_3", [], "No, keep going.", "close_window",[(assign, "$g_leave_encounter",1)]],

[anyone|plyr|repeat_for_factions, "dplmc_recruiter_talk_3",
[
(store_repeat_object, ":faction_no"),
(is_between, ":faction_no", npc_kingdoms_begin, npc_kingdoms_end),
(store_sub, ":offset", ":faction_no", "fac_kingdom_1"),
(val_add, ":offset", "str_kingdom_1_adjective"),
(str_store_string, s11, ":offset"),
],
"{s11}.", "dplmc_recruiter_talk_4",
[
(store_repeat_object, ":faction_no"),
(assign, "$temp", ":faction_no"),
]],

[anyone|plyr, "dplmc_recruiter_talk_3", [], "Recruit any troops.", "dplmc_recruiter_talk_4",[(assign,"$temp",-1)]],

[anyone, "dplmc_recruiter_talk_4", [
(party_set_slot, "$g_encountered_party", dplmc_slot_party_recruiter_needed_recruits_faction, "$temp"),
(call_script, "script_dplmc_set_recruiter_extra_text", "$g_encountered_party", 0), #SB : script call
##diplomacy start+ replace {reg65?madame:sir} with {s0}
(call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),
], "Sure {s0}. I will. Anything else you want?", "dplmc_recruiter_talk",[]],
##diplomacy end+
# Recruiter kit end


##SB : Messenger changed to template, store actual mission
[pt_messenger_party|party_tpl, "start", [], "Greetings. Sorry but I don't have time to talk now. I am delivering a very important message to {s6}.", "dplmc_messenger_talk", [
  (party_get_slot, ":party_no", "$g_encountered_party", slot_party_ai_object),
  (str_store_party_name, s6, ":party_no"),
]],

[anyone|plyr, "dplmc_messenger_talk", [], "Alright, I don't want to delay you. Godspeed!", "dplmc_messenger_talk_farewell",[]],
[anyone, "dplmc_messenger_talk_farewell", [], "Thank you. Farewell!", "close_window", [(assign, "$g_leave_encounter", 1),]],

##patrol
[anyone, "start",
[
(party_slot_eq, "$g_encountered_party", slot_party_type, spt_patrol),
(party_slot_eq, "$g_encountered_party", dplmc_slot_party_mission_diplomacy, "trp_player"),
(party_get_slot, ":target_party", "$g_encountered_party", slot_party_ai_object),
(str_store_party_name, s6, ":target_party"),
##nested diplomacy start+ Replace "Sire" with {s0}
(call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),
#], "Greetings, Sire. We are still patrolling {s6}. Do you have new orders?", "dplmc_patrol_talk", []
], "Greetings, {s0}. We are still patrolling {s6}. Do you have new orders?", "dplmc_patrol_talk", []
##nested diplomacy end+
],

##nested diplomacy start+ Replace "Sire" with {s0}
#[anyone, "dplmc_patrol_pretalk", [], "Greetings, Sire. Do you have new orders?", "dplmc_patrol_talk",
[anyone, "dplmc_patrol_pretalk", [
(call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),
], "Greetings, {s0}. Do you have new orders?", "dplmc_patrol_talk",
##nested diplomacy end+
[]],

##patrol new area
[anyone|plyr, "dplmc_patrol_talk", [], "Please patrol a new area.", "dplmc_patrol_orders_area_ask",
[]],

[anyone, "dplmc_patrol_orders_area_ask", [], "Where should we go?", "dplmc_patrol_orders_area",
[]],

[anyone|plyr|repeat_for_parties, "dplmc_patrol_orders_area",
[
(store_repeat_object, ":party_no"),
(is_between, ":party_no", centers_begin, centers_end),
(store_faction_of_party, ":party_faction", ":party_no"),
(eq, ":party_faction", "$players_kingdom"),
(str_store_party_name, s11, ":party_no"),
],
"{s11}.", "dplmc_patrol_confirm_ask",
[
(store_repeat_object, "$diplomacy_var"),
]
],

[anyone|plyr, "dplmc_patrol_orders_area", [], "Nevermind.", "dplmc_patrol_pretalk",
[]],

[anyone, "dplmc_patrol_confirm_ask",
[(str_store_party_name, s5, "$diplomacy_var"),],
"As you wish, we will patrol {s5}.", "dplmc_patrol_confirm",
[]
],

[anyone|plyr, "dplmc_patrol_confirm", [(str_store_party_name, s5, "$diplomacy_var"),], "Thank you.", "close_window",
[
(party_set_name, "$g_encountered_party", "str_s5_patrol"),
(party_set_slot, "$g_encountered_party", slot_party_ai_object, "$diplomacy_var"),
(party_set_slot, "$g_encountered_party", slot_party_ai_state, spai_patrolling_around_center),
(party_set_ai_behavior, "$g_encountered_party", ai_bhvr_travel_to_party),
(party_set_ai_object, "$g_encountered_party", "$diplomacy_var"),
(assign, "$g_leave_encounter", 1),
]],

[anyone|plyr, "dplmc_patrol_confirm", [], "Wait, I changed my mind.", "dplmc_patrol_pretalk",
[]],


##reinforce garrison
[anyone|plyr, "dplmc_patrol_talk", [], "I need you to reinforce a garrison.", "dplmc_patrol_orders_garrison_ask",
[]],

[anyone, "dplmc_patrol_orders_garrison_ask", [], "Where should we go?", "dplmc_patrol_garrison_target",
[]],

[anyone|plyr|repeat_for_parties, "dplmc_patrol_garrison_target",
[
(store_repeat_object, ":party_no"),
(is_between, ":party_no", centers_begin, centers_end),
(store_faction_of_party, ":party_faction", ":party_no"),
(eq, ":party_faction", "$players_kingdom"),
(str_store_party_name, s11, ":party_no"),
],
"{!}{s11}.", "dplmc_patrol_garrison_confirm_ask",
[
(store_repeat_object, "$diplomacy_var"),
]
],

[anyone|plyr, "dplmc_patrol_garrison_target", [], "Nevermind.", "dplmc_patrol_pretalk",
[]],

[anyone, "dplmc_patrol_garrison_confirm_ask",
[(str_store_party_name, s5, "$diplomacy_var"),],
"As you wish, we will reinforce {s5}.", "dplmc_patrol_garrison_confirm",
[]
],

[anyone|plyr, "dplmc_patrol_garrison_confirm", [(str_store_party_name, s5, "$diplomacy_var"),], "Thank you.", "close_window",
[
#SB : quickstring, fix name
(party_set_name, "$g_encountered_party", "str_s5_transfer"),
(party_set_slot, "$g_encountered_party", slot_party_ai_object, "$diplomacy_var"),
(party_set_slot, "$g_encountered_party", slot_party_ai_state, spai_retreating_to_center),
(party_set_ai_behavior, "$g_encountered_party", ai_bhvr_travel_to_party),
(party_set_ai_object, "$g_encountered_party", "$diplomacy_var"),
(assign, "$g_leave_encounter", 1),
]],

[anyone|plyr, "dplmc_patrol_garrison_confirm", [], "Wait, I changed my mind.", "dplmc_patrol_pretalk",
[]],

##give troops
[anyone|plyr,"dplmc_patrol_talk", [],
"I want to give some troops to you.", "dplmc_patrol_give_troops",[]],


[anyone,"dplmc_patrol_give_troops", [],
"Well, I could use some good soldiers. Thank you.", "dplmc_patrol_pretalk",
[
(change_screen_give_members, "$g_talk_troop_party"),
(change_screen_exchange_members, 0),
]],

##disband
[anyone|plyr, "dplmc_patrol_talk", [], "I don't need you any longer. Please disband.", "close_window",
[
(remove_party, "$g_encountered_party"),
(assign, "$g_leave_encounter", 1),
]],

[anyone|plyr, "dplmc_patrol_talk", [], "Please continue.", "close_window",
[(assign, "$g_leave_encounter", 1),]],

##gift caravan
[pt_dplmc_gift_caravan|party_tpl, "start",
[
(party_slot_eq, "$g_talk_troop_party", slot_party_type, dplmc_spt_gift_caravan),
(party_get_slot, ":target_party", "$g_talk_troop_party", slot_party_ai_object),
(party_get_slot, ":gift", "$g_talk_troop_party", dplmc_slot_party_mission_diplomacy),
(str_store_item_name, s12, ":gift"),

(try_begin),
  (party_slot_ge, "$g_talk_troop_party",  slot_party_orders_object,  0),
  (party_get_slot, ":target_troop", "$g_talk_troop_party",  slot_party_orders_object),
  (str_store_troop_name, s13, ":target_troop"),
(else_try),
  (str_store_party_name, s13, ":target_party"),
(try_end),

],
"Greetings. I am currently delivering {s12} to {s13}.", "dplmc_gift_talk", []],

[pt_dplmc_gift_caravan|party_tpl, "dplmc_gift_talk", [], "Very well! Have a nice trip.", "dplmc_gift_talk_farewell",[]],

[pt_dplmc_gift_caravan|party_tpl, "dplmc_gift_talk_farewell", [], "Thank you. Farewell!", "close_window", [(assign, "$g_leave_encounter", 1),]],

[trp_dplmc_scout, "start",
[], "Sire, I haven't finished my mission yet.", "dplmc_scout_talk",
[]],

[anyone|plyr,"dplmc_scout_talk",[
],
"Ok, please go on.", "close_window",
[]],

#SB : TODO add actual intro to role when troop not met
##Chancellor
[anyone,"start",
[
(eq, "$g_player_chancellor","$g_talk_troop"),
],
##nested diplomacy start+ Change "Milord" to "Milord/Milady"
"{Milord/Milady}?", "dplmc_chancellor_talk",[
##nested diplomacy end+
]],

[anyone,"dplmc_chancellor_pretalk",
[
#SB : subordinate string replacing Sire
(call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),
],
"Do you need anything else, {s0}?", "dplmc_chancellor_talk",[
]],

[anyone|plyr,"dplmc_chancellor_talk",[
],
"Let's talk about domestic policy.", "dplmc_chancellor_domestic_policy_options_ask",
##nested diplomacy start+
[
(try_begin),
	(neq, "$players_kingdom", "fac_player_supporters_faction"),
	(is_between, "$players_kingdom", kingdoms_begin, kingdoms_end),
	(try_for_range, ":slot_no", dplmc_slot_faction_policies_begin, dplmc_slot_faction_policies_end),
		(faction_get_slot, reg0, "$players_kingdom", ":slot_no"),
		(faction_set_slot, "fac_player_supporters_faction", ":slot_no",  reg0),
	(try_end),
(try_end),
##nested diplomacy end+
]],

[anyone,"dplmc_chancellor_domestic_policy_options_ask",
[
#SB : subordinate string
(call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),
],
"As you wish, {s0}.", "dplmc_chancellor_domestic_policy_options",[
]],

##select kingdom culture
[anyone|plyr, "dplmc_chancellor_domestic_policy_options",
[
(is_between, "$g_player_minister", active_npcs_begin, kingdom_ladies_end),
],
##diplomacy start+ add apostrophe
"I wish to select the kingdom's culture.", "dplmc_chancellor_kingdom_culture_ask",
##diplomacy end+
[]],

##diplomacy start+
#Don't enable this when the player is co-ruler of one of the original kingdoms.
[anyone, "dplmc_chancellor_kingdom_culture_ask",
[
(is_between, "$players_kingdom", npc_kingdoms_begin, npc_kingdoms_end),
(assign, ":end_cond", active_npcs_end),
(try_for_range, ":lord", active_npcs_begin, ":end_cond"),
	(store_faction_of_troop, reg0, ":lord"),
	(eq, reg0, "$players_kingdom"),
	(troop_slot_eq, ":lord", slot_troop_original_faction, "$players_kingdom"),
	(assign, ":end_cond", ":lord"),
(try_end),
(lt, ":end_cond", active_npcs_end),
(str_store_faction_name, s11, "$players_kingdom"),
(call_script, "script_dplmc_print_cultural_word_to_sreg", ":end_cond", DPLMC_CULTURAL_TERM_LORD_PLURAL, s0),
], "The {s0} of the {s11} would be unlikely to accept the imposition of other culture.", "dplmc_chancellor_talk",
[]],
##diplomacy end+
[anyone, "dplmc_chancellor_kingdom_culture_ask",
[
(try_begin),
  (this_or_next|le, "$g_player_culture", 0),
  (neg|is_between, "$g_player_culture", npc_kingdoms_begin, npc_kingdoms_end),
  (str_store_string, s11, "@Your kingdom has no specified culture"),
(else_try),
  (store_sub, ":offset", "$g_player_culture", npc_kingdoms_begin),
  (val_add, ":offset", "str_kingdom_1_adjective"),
  (str_store_string, s11, ":offset"),
  (str_store_string, s11, "@Your kingdom culture is: {s11}"),
(try_end),
],
"{s11}. Do you want to change it?", "dplmc_chancellor_kingdom_culture_select",
[]],

[anyone|plyr|repeat_for_factions, "dplmc_chancellor_kingdom_culture_select",
[
(store_repeat_object, ":faction_no"),
(is_between, ":faction_no", npc_kingdoms_begin, npc_kingdoms_end),
##nested diplomacy start+
#To be eligible to establish a culture, you need some connection to it.
(assign, ":faction_allowed", 0),
(try_begin),
   #If it is the faction you left (or is otherwise somehow your faction)
   (this_or_next|eq, ":faction_no", "$players_oath_renounced_against_kingdom"),
   (eq, ":faction_no", "$players_kingdom"),
   (assign, ":faction_allowed", 1),
(else_try),
   #If it's the faction of the town you started in
   (is_between, "$g_starting_town", centers_begin, centers_end),
   (party_slot_eq, "$g_starting_town", slot_center_original_faction, ":faction_no"),
   (assign, ":faction_allowed", 1),
(else_try),
   #If you currently control any centers of that faction
   (assign, ":end_cond", walled_centers_end),
   (try_for_range, ":iter_no", walled_centers_begin, ":end_cond"),
      (store_faction_of_party, ":iter_faction", ":iter_no"),
      (eq, ":iter_faction", "$players_kingdom"),
      (party_slot_eq, ":iter_no", slot_center_original_faction, ":faction_no"),
#      (party_slot_eq, ":iter_no", slot_town_lord, "trp_player"),
      (assign, ":end_cond", ":iter_no"),
      (assign, ":faction_allowed", 1),
   (try_end),
   (eq, ":faction_allowed", 1),
(else_try),
   #If any of your lords come from that faction
   (assign, ":end_cond", heroes_end),
   (try_for_range, ":iter_no", heroes_begin, ":end_cond"),
      (store_faction_of_troop, ":iter_faction", ":iter_no"),
      (eq, ":iter_faction", "$players_kingdom"),
      (troop_slot_eq, ":iter_no", slot_troop_original_faction, ":faction_no"),
      (assign, ":end_cond", ":iter_no"),
      (assign, ":faction_allowed", 1),
   (try_end),
(try_end),
(eq, ":faction_allowed", 1),
##nested diplomacy end+
(store_sub, ":offset", ":faction_no", "fac_kingdom_1"),
(val_add, ":offset", "str_kingdom_1_adjective"),
(str_store_string, s11, ":offset"),
],
"{s11}.", "dplmc_chancellor_pretalk",
[
(store_repeat_object, ":faction_no"),
(assign, "$g_player_culture", ":faction_no"),
#SB : todo copy over faction slots for cultural troops
(try_begin),
  (this_or_next|le, "$g_player_culture", 0),
  (neg|is_between, "$g_player_culture", npc_kingdoms_begin, npc_kingdoms_end),
  (str_store_string, s11, "@Kingdom culture: None"),
(else_try),
  (store_sub, ":offset", "$g_player_culture", "fac_kingdom_1"),
  (val_add, ":offset", "str_kingdom_1_adjective"),
  (str_store_string, s11, ":offset"),
  (str_store_string, s11, "@Kingdom culture: {s11}"),
(try_end),
(display_message, s11),
]],

##select kingdom culture
[anyone|plyr, "dplmc_chancellor_kingdom_culture_select",
[],
##diplomacy start+ Reword
#"None.", "dplmc_chancellor_pretalk",
"Favor no culture over others.", "dplmc_chancellor_pretalk",
##diplomacy end+
[(assign, "$g_player_culture", 0),
]],

##diplomacy start+
[anyone|plyr, "dplmc_chancellor_kingdom_culture_select",
[],
"Make no change.", "dplmc_chancellor_pretalk",
[]],
##diplomacy end+

[anyone|plyr,"dplmc_chancellor_domestic_policy_options",[
# (faction_slot_eq, "fac_player_supporters_faction", slot_faction_state, sfs_active),
],
"Please give me information about the domestic policy of a kingdom.", "dplmc_chancellor_domestic_policy_info_ask",
[]],

[anyone,"dplmc_chancellor_domestic_policy_info_ask",
[],
"About which kingdom do you need information?", "dplmc_chancellor_domestic_policy_info_select",[
]],

[anyone|plyr|repeat_for_factions,"dplmc_chancellor_domestic_policy_info_select",[
  (store_repeat_object, ":faction"), #SB : show active kingdoms
  (is_between, ":faction", npc_kingdoms_begin, npc_kingdoms_end),
  (faction_slot_eq, ":faction", slot_faction_state, sfs_active),
  (str_store_faction_name, s10, ":faction"),
],
"{s10}.", "dplmc_chancellor_domestic_policy_info",
[(store_repeat_object, "$diplomacy_var"),]],

[anyone|plyr,"dplmc_chancellor_domestic_policy_info_select",[],
"None.", "dplmc_chancellor_pretalk",
[]],

[anyone,"dplmc_chancellor_domestic_policy_info",
[
##SB : move building policy strings to display_policy_string_to_reg
(str_store_faction_name_link, s5, "$diplomacy_var"),
(str_clear, s20),
(try_begin),
  (eq, "$diplomacy_var", "$players_kingdom"),
  (assign, ":our_kingdom", 1),
(else_try),
  (assign, ":our_kingdom", 0),
(try_end),
(call_script, "script_display_policy_string_to_reg", "$diplomacy_var", ":our_kingdom", 0),
],
"{s20}", "dplmc_chancellor_domestic_policy_info_select",[#<- dplmc+ added {s20}
]],##nested diplomacy end+

[anyone|plyr,"dplmc_chancellor_domestic_policy_options",[
(faction_slot_eq, "fac_player_supporters_faction", slot_faction_state, sfs_active),
],
"Let's change our domestic policy.", "dplmc_chancellor_domestic_policy_ask",
[(str_clear, s20),]],

[anyone|plyr,"dplmc_chancellor_domestic_policy_options",[
],
"Nevermind.", "dplmc_chancellor_pretalk",
[]],


[anyone,"dplmc_chancellor_domestic_policy_ask",[
(store_current_hours, ":current_hours"),
##zParsifal 2011-10-07: Change the policy change interval from always 30 days to (Centralization * 5) + 30 days.
(faction_get_slot, ":policy_time", "fac_player_supporters_faction", dplmc_slot_faction_centralization),
(val_mul, ":policy_time", -5),
(val_add, ":policy_time", 30),
(val_clamp, ":policy_time", 15, 46),#This line should be unnecessary
(val_mul, ":policy_time", 24),
(val_sub, ":current_hours", ":policy_time"),
(faction_get_slot, ":policy_time", "fac_player_supporters_faction", dplmc_slot_faction_policy_time),
(ge, ":current_hours", ":policy_time"),

# SB : unify domestic policy descriptions, first person, space breaks
(str_clear, s20),
(call_script, "script_display_policy_string_to_reg", "fac_player_supporters_faction", 1, 0),
],
"{s20} What do you want to change?", "dplmc_chancellor_domestic_policy",#<- dplmc+ added {s0}
[]],##nested diplomacy end+


[anyone,"dplmc_chancellor_domestic_policy_ask",[
(faction_get_slot, ":centralization", "fac_player_supporters_faction", dplmc_slot_faction_centralization),
(store_current_hours, ":current_hours"),
##zParsifal 2011-10-07: Change the policy change interval from always 30 days to (Centralization * 5) + 30 days.
(store_mul, reg1, ":centralization", -5),#Use reg1 for the number of days you have to wait, to display further below.
(val_add, reg1, 30),
(val_clamp, reg1, 15, 46),#This line should be unnecessary
(store_mul, ":policy_time", reg1, 24),
(val_sub, ":current_hours", ":policy_time"),
(faction_get_slot, ":policy_time", "fac_player_supporters_faction", dplmc_slot_faction_policy_time),
(store_sub, ":wait_hours" , ":policy_time", ":current_hours"),
(store_div, ":wait_days", ":wait_hours", 24),
(store_mod, ":wait_mod", ":wait_hours", 24),
(try_begin), #SB : probably rounding up
  (ge, ":wait_mod", 12),
  (val_add, ":wait_days", 1),
(try_end),
(assign, reg0, ":wait_days"),
# SB : unify domestic policy descriptions, first person, space breaks
(str_clear, s20),
(call_script, "script_display_policy_string_to_reg", "fac_player_supporters_faction", 1, 0),
],
##nested diplomacy start+
"{s20} We can only change the policy every {reg1} days, the people have to get used to it. We must wait {reg0} days.",#<- dplmc+ added {s0}
 "dplmc_chancellor_pretalk",[]],
##nested diplomacy end+

[anyone|plyr,"dplmc_chancellor_domestic_policy",
[
(faction_get_slot, ":serfdom", "fac_player_supporters_faction", dplmc_slot_faction_serfdom),
(lt, ":serfdom", 3),
],
"Bring more people into serfdom.", "dplmc_chancellor_domestic_policy_confirm",
[
(faction_get_slot, ":serfdom", "fac_player_supporters_faction", dplmc_slot_faction_serfdom),
(val_add, ":serfdom", 1),
(faction_set_slot, "fac_player_supporters_faction", dplmc_slot_faction_serfdom ,":serfdom"),
]],

[anyone|plyr,"dplmc_chancellor_domestic_policy",
[
(faction_get_slot, ":serfdom", "fac_player_supporters_faction", dplmc_slot_faction_serfdom),
(gt, ":serfdom", -3),
],
"I want more freedom for the people.", "dplmc_chancellor_domestic_policy_confirm",
[
(faction_get_slot, ":serfdom", "fac_player_supporters_faction", dplmc_slot_faction_serfdom),
(val_sub, ":serfdom", 1),
(faction_set_slot, "fac_player_supporters_faction", dplmc_slot_faction_serfdom ,":serfdom"),
]],

[anyone|plyr,"dplmc_chancellor_domestic_policy",
[
(faction_get_slot, ":centralization", "fac_player_supporters_faction", dplmc_slot_faction_centralization),
(lt, ":centralization", 3),
],
"Let's centralize the decisions.", "dplmc_chancellor_domestic_policy_confirm",
[
(faction_get_slot, ":centralization", "fac_player_supporters_faction", dplmc_slot_faction_centralization),
(val_add, ":centralization", 1),
(faction_set_slot, "fac_player_supporters_faction", dplmc_slot_faction_centralization,  ":centralization"),
]],

[anyone|plyr,"dplmc_chancellor_domestic_policy",
[
(faction_get_slot, ":centralization", "fac_player_supporters_faction", dplmc_slot_faction_centralization),
(gt, ":centralization", -3),
],
#diplomacy start+
#changed "Give the lords more authority to decide" to "Grant increased autonomy to local regions"
"Grant increased autonomy to local authorities.", "dplmc_chancellor_domestic_policy_confirm",
#diplomacy end+
[
(faction_get_slot, ":centralization", "fac_player_supporters_faction", dplmc_slot_faction_centralization),
(val_sub, ":centralization", 1),
(faction_set_slot,  "fac_player_supporters_faction", dplmc_slot_faction_centralization, ":centralization"),
]],

[anyone|plyr,"dplmc_chancellor_domestic_policy",
[
(faction_get_slot, ":quality", "fac_player_supporters_faction", dplmc_slot_faction_quality),
(lt, ":quality", 3),
],
"I prefer quality troops to many troops.", "dplmc_chancellor_domestic_policy_confirm",
[
(faction_get_slot, ":quality", "fac_player_supporters_faction", dplmc_slot_faction_quality),
(val_add, ":quality", 1),
(faction_set_slot, "fac_player_supporters_faction", dplmc_slot_faction_quality, ":quality"),
]],

[anyone|plyr,"dplmc_chancellor_domestic_policy",
[
(faction_get_slot, ":quality", "fac_player_supporters_faction", dplmc_slot_faction_quality),
(gt, ":quality", -3),
],
#diplomacy start+
"Quantity has a quality of its own.  I prefer many troops to few quality troops.", "dplmc_chancellor_domestic_policy_confirm",
#diplomacy start+
[
(faction_get_slot, ":quality", "fac_player_supporters_faction", dplmc_slot_faction_quality),
(val_sub, ":quality", 1),
(faction_set_slot, "fac_player_supporters_faction", dplmc_slot_faction_quality, ":quality"),
]],

[anyone|plyr,"dplmc_chancellor_domestic_policy",
[
(faction_get_slot, ":aristocraty", "fac_player_supporters_faction", dplmc_slot_faction_aristocracy),
(lt, ":aristocraty", 3),
],
"Give the nobles more power.", "dplmc_chancellor_domestic_policy_confirm",
[
(faction_get_slot, ":aristocraty", "fac_player_supporters_faction", dplmc_slot_faction_aristocracy),
(val_add, ":aristocraty", 1),
(faction_set_slot, "fac_player_supporters_faction", dplmc_slot_faction_aristocracy,  ":aristocraty"),
]],

[anyone|plyr,"dplmc_chancellor_domestic_policy",
[
(faction_get_slot, ":aristocraty", "fac_player_supporters_faction", dplmc_slot_faction_aristocracy),
(gt, ":aristocraty", -3),
],
#diplomacy start+
"Give the merchants and trade guilds more power.", "dplmc_chancellor_domestic_policy_confirm",#dplmc+ edited
#diplomacy end+
[
(faction_get_slot, ":aristocraty", "fac_player_supporters_faction", dplmc_slot_faction_aristocracy),
(val_sub, ":aristocraty", 1),
(faction_set_slot, "fac_player_supporters_faction", dplmc_slot_faction_aristocracy,  ":aristocraty"),
]],

##diplomacy start+ add mercantilism
[anyone|plyr,"dplmc_chancellor_domestic_policy",
[
(faction_get_slot, ":mercantilism", "fac_player_supporters_faction", dplmc_slot_faction_mercantilism),
(lt, ":mercantilism", 3),
],
"Manage the economy more actively to increase production and maximize exports.", "dplmc_chancellor_domestic_policy_confirm",
[
(faction_get_slot, ":mercantilism", "fac_player_supporters_faction", dplmc_slot_faction_mercantilism),
(val_add, ":mercantilism", 1),
(faction_set_slot, "fac_player_supporters_faction", dplmc_slot_faction_mercantilism,  ":mercantilism"),
]],

[anyone|plyr,"dplmc_chancellor_domestic_policy",
[
(faction_get_slot, ":mercantilism", "fac_player_supporters_faction", dplmc_slot_faction_mercantilism),
(gt, ":mercantilism", -3),
],
"Reduce the crown's role in managing industry and commerce.", "dplmc_chancellor_domestic_policy_confirm",
[
(faction_get_slot, ":mercantilism", "fac_player_supporters_faction", dplmc_slot_faction_mercantilism),
(val_sub, ":mercantilism", 1),
(faction_set_slot, "fac_player_supporters_faction", dplmc_slot_faction_mercantilism,  ":mercantilism"),
]],
##diplomacy end+

[anyone|plyr,"dplmc_chancellor_domestic_policy",
[],
"Never mind.", "dplmc_chancellor_pretalk",
[]],

[anyone,"dplmc_chancellor_domestic_policy_confirm",
[],
"I will initiate all necessary steps.", "dplmc_chancellor_pretalk",[
(store_current_hours, ":current_hours"),
(faction_set_slot, "fac_player_supporters_faction", dplmc_slot_faction_policy_time, ":current_hours"),
##diplomacy start+
(try_begin),
	(neq, "$players_kingdom", "fac_player_supporters_faction"),
	(is_between, "$players_kingdom", kingdoms_begin, kingdoms_end),
	(try_for_range, ":slot_no", dplmc_slot_faction_policies_begin, dplmc_slot_faction_policies_end),
	   (faction_get_slot, reg0, "fac_player_supporters_faction", ":slot_no"),
		(faction_set_slot, "$players_kingdom", ":slot_no",  reg0),
	(try_end),
(try_end),
##diplomacy end+
]],


[anyone|plyr,"dplmc_chancellor_talk",[
                      ],
"Please give me some information about a lord.", "dplmc_chancellor_info_kingdom_ask",[]],

#SB : replace "Where is he from"
[anyone,"dplmc_chancellor_info_kingdom_ask",
[],
"You'll have to be more specific, I need to consult a ledger to remember which faction all these bickering lord belong to...", "dplmc_chancellor_info_kingdom_select",[
]],

[anyone|plyr|repeat_for_factions, "dplmc_chancellor_info_kingdom_select",
[
(store_repeat_object, ":faction_no"),
(is_between, ":faction_no", kingdoms_begin, kingdoms_end),
(faction_slot_eq, ":faction_no", slot_faction_state, sfs_active),
(str_store_faction_name, s11, ":faction_no"),
],
"{s11}.", "dplmc_chancellor_info_person_ask",
[
(store_repeat_object, "$g_faction_selected"),
]],

[anyone|plyr, "dplmc_chancellor_info_kingdom_select",
[
],
"Never mind.", "dplmc_chancellor_pretalk",[
]],

[anyone,"dplmc_chancellor_info_person_ask",
[],
"About which lord do you want information?", "dplmc_chancellor_info_person_select",[
]],

[anyone|plyr|repeat_for_troops, "dplmc_chancellor_info_person_select",
[
(store_repeat_object, ":troop_no"),
(neq, "$g_talk_troop", ":troop_no"),
(is_between, ":troop_no", active_npcs_begin, kingdom_ladies_end),
(neq, ":troop_no", "trp_player"),
(neg|faction_slot_eq, "$g_faction_selected", slot_faction_leader, ":troop_no"),
(troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_hero),
(store_troop_faction, ":faction_no", ":troop_no"),
(eq, "$g_faction_selected", ":faction_no"),
(str_store_troop_name, s1, ":troop_no"),
],"{s1}.", "dplmc_chancellor_info_person",
[
(store_repeat_object, "$lord_selected"),
]],

[anyone|plyr, "dplmc_chancellor_info_person_select",
[
],
"About no one.", "dplmc_chancellor_pretalk",[
]],

[anyone,"dplmc_chancellor_info_person",
[
(call_script, "script_dplmc_troop_political_notes_to_s47", "$lord_selected"),
],
"{s47}", "dplmc_chancellor_pretalk",[
]],

[anyone|plyr,"dplmc_chancellor_talk",[
               (faction_get_slot, ":political_issue", "$players_kingdom", slot_faction_political_issue),
               (is_between, ":political_issue", centers_begin, centers_end),
               (str_store_party_name, s4, ":political_issue"),
                      ],
"What's the mood of the lords regarding the fief of {s4}?", "dplmc_chancellor_cur_stance",[]],

[anyone, "dplmc_chancellor_cur_stance",
[
##diplomacy start+ Handle player is co-ruler of kingdom
(assign, ":alt_faction", "fac_player_supporters_faction"),
(try_begin),
	(is_between, "$players_kingdom", npc_kingdoms_begin, npc_kingdoms_end),
	(call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", "$players_kingdom"),
	(ge, reg0, DPLMC_FACTION_STANDING_LEADER_SPOUSE),
	(assign, ":alt_faction", "$players_kingdom"),
(try_end),
##diplomacy end+
(try_for_parties, ":party_no"),
(party_slot_eq, ":party_no", slot_party_type, spt_kingdom_hero_party),
(store_faction_of_party, ":faction_no", ":party_no"),
##diplomacy start+
(this_or_next|eq, ":alt_faction", ":faction_no"),
##diplomacy end+
(eq, "fac_player_supporters_faction", ":faction_no"),
(party_stack_get_troop_id, ":party_leader", ":party_no", 0),
(is_between, ":party_leader", heroes_begin, heroes_end),
(troop_set_slot, ":party_leader", dplmc_slot_troop_political_stance, 0),
(try_end),

(try_for_parties, ":party_no"),
(party_slot_eq, ":party_no", slot_party_type, spt_kingdom_hero_party),
(store_faction_of_party, ":faction_no", ":party_no"),
##diplomacy start+
(this_or_next|eq, ":alt_faction", ":faction_no"),
##diplomacy end+
(eq, "fac_player_supporters_faction", ":faction_no"),
(party_stack_get_troop_id, ":party_leader", ":party_no", 0),
(is_between, ":party_leader", heroes_begin, heroes_end),
(troop_get_slot, ":fav_troop", ":party_leader", slot_troop_stance_on_faction_issue),
(is_between, ":fav_troop", heroes_begin, heroes_end),
(troop_get_slot, ":stance", ":fav_troop", dplmc_slot_troop_political_stance),
(val_add, ":stance", 1),
(troop_set_slot, ":fav_troop", dplmc_slot_troop_political_stance, ":stance"),
(try_end),

(assign, ":report", 0),
(str_store_string, s10, "@According  to the report of our spies"),
(try_for_parties, ":party_no"),
(party_slot_eq, ":party_no", slot_party_type, spt_kingdom_hero_party),
(store_faction_of_party, ":faction_no", ":party_no"),
##diplomacy start+
(this_or_next|eq, ":alt_faction", ":faction_no"),
##diplomacy end+
(eq, "fac_player_supporters_faction", ":faction_no"),
(party_stack_get_troop_id, ":party_leader", ":party_no", 0),
(is_between, ":party_leader", heroes_begin, heroes_end),
(troop_get_slot, ":stance", ":party_leader", dplmc_slot_troop_political_stance),
(try_begin),
  (gt, ":stance", 0),
  (str_store_troop_name, s9, ":party_leader"),
  (assign, reg3, ":stance"),
  (str_store_string, s10, "@{s10} {reg3} lords support {s9}."),
  (assign, ":report", 1),
(try_end),
(try_end),

(try_begin),
  (eq, ":report",0), #SB : lords -> realm's; (since) our
  (str_store_string, s10, "@Sorry, currently I can't provide any information about the realm's mood, since our spies haven't reported back yet."),
(try_end),
],
"{s10}", "dplmc_chancellor_pretalk",[
]],


##send messenger to another lord
[anyone|plyr, "dplmc_chancellor_talk",
[],
"Please send a message to another lord.", "dplmc_chancellor_message_ask_type",
[]],

[anyone, "dplmc_chancellor_message_ask_type",
[
],
#SB : grammar whom do -> whom would
"To whom would you like to send the message?", "dplmc_chancellor_message_lord_select",[
]],

##select the lord who shall receive the message to hand over
[anyone|plyr|repeat_for_troops, "dplmc_chancellor_message_lord_select",
[
(store_repeat_object, ":troop_no"),
(is_between, ":troop_no", heroes_begin, heroes_end),
(neq, ":troop_no", "$g_talk_troop"),
(neq, ":troop_no", "trp_player"),
#SB : awaiting pledge
(this_or_next|troop_slot_eq, ":troop_no", slot_troop_occupation, slto_inactive),
(troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_hero),
(store_troop_faction, ":faction_no", ":troop_no"),
(eq, "$players_kingdom", ":faction_no"),
# (troop_slot_eq, ":troop_no", slot_troop_met, 1),
#SB: stipulate it must have a party or valid home as target
(neg|troop_slot_ge, ":troop_no", slot_troop_prisoner_of_party, 0),
(str_store_troop_name, s1, ":troop_no"),
(troop_get_slot, ":leaded_party", ":troop_no", slot_troop_leaded_party),

(try_begin),
  (ge, ":leaded_party", 1),
  (party_is_active, ":leaded_party"),
  (str_store_party_name, s1, ":leaded_party"),
(else_try),
  (call_script, "script_lord_get_home_center", ":troop_no"),
  (assign, ":leaded_party", reg0),
  (is_between, ":leaded_party", centers_begin, centers_end),
  (str_store_party_name, s2, ":leaded_party"),
  (str_store_string, s1, "@{s1} at {s2}"), #str_s8_in_s12
(try_end),

(gt, ":leaded_party", 0),
(party_is_active, ":leaded_party"),
(assign, "$pout_party", ":leaded_party"), #cache for later
],"{s1}.", "dplmc_chancellor_message_ask",
[
  (store_repeat_object, "$lord_selected"),
  (str_store_troop_name, s6, "$lord_selected"),
]],

[anyone|plyr, "dplmc_chancellor_message_lord_select",
[],"Nevermind.", "dplmc_chancellor_pretalk",
[]],

[anyone|plyr, "dplmc_chancellor_gift_lord_select",
[
],
"I can't think of anyone.", "dplmc_chancellor_pretalk",[
]],

#SB : redirect conversation
[anyone, "dplmc_chancellor_message_ask",
[
  (party_is_active, "$pout_party"),
  (this_or_next|eq, "$pout_party", "$current_town"),
  (party_is_in_town, "$pout_party", "$current_town"),
],
"Ahem, {s6} is right here, perhaps you should do the honors if it's not too awkward?", "close_window",[
  (assign, "$pout_party", -1),
  # (call_script, "script_change_player_relation_with_troop", "$lord_selected", -1),
]],

# #SB : not-found precondition
# [anyone, "dplmc_chancellor_message_ask",
# [
# # (str_store_troop_name, s6, "$lord_selected"),
# (call_script, "script_get_information_about_troops_position", "$lord_selected", 0),
# (eq, reg0, 0),
# ],
# "We won't be able track down {s2}, unfortunately.", "dplmc_chancellor_pretalk",[
  # (assign, "$lord_selected", -1),
  # (assign, "$pout_party", -1),
# ]],
[anyone, "dplmc_chancellor_message_ask",
[
(str_store_troop_name, s6, "$lord_selected"),
(call_script, "script_get_information_about_troops_position", "$lord_selected", 0),
# ##diplomacy start+ Save gender to reg4
# (assign, reg4, 0),
# (try_begin),
  # (call_script, "script_cf_dplmc_troop_is_female", "$lord_selected"),
  # (assign, reg4, 1),
# (try_end),
# ##diplomacy end+
],
"What do you want to tell {s6}? {s1}", "dplmc_chancellor_message_select",[
]],

#SB : todo check existing messengers
##ask to accompany to another lord
[anyone|plyr, "dplmc_chancellor_message_select",
[
  (gt, "$pout_party", centers_end),
  # (neg|troop_slot_eq, "$lord_selected", slot_troop_occupation, slto_inactive), #SB : army condition
],
##diplomacy start+ make gender correct using reg4 (set above)
"Ask {reg4?her:him} if {reg4?she:he} is willing to accompany me in the field.", "dplmc_chancellor_message_lord_ask",
##diplomacy end+
[
(assign, "$temp", spai_accompanying_army),
(assign, "$temp_2", "p_main_party"),
]],

##ask to goto a center
[anyone|plyr, "dplmc_chancellor_message_select",
[
],
##diplomacy start+ make gender correct using reg4 (set above)
"Ask {reg4?her:him} if {reg4?she:he} is willing to go to a location.", "dplmc_chancellor_message_goto_lord_ask",
##diplomacy end+
[
(assign, "$temp", spai_holding_center),
]],

##ask to patrol a center
[anyone|plyr, "dplmc_chancellor_message_select",
[
  (gt, "$pout_party", centers_end),
],
##diplomacy start+ make gender correct using reg4 (set above)
"Ask {reg4?her:him} if {reg4?she:he} is willing to patrol a location.", "dplmc_chancellor_message_goto_lord_ask",
##diplomacy end+
[
(assign, "$temp", spai_patrolling_around_center),
]],

##ask to flee to a center
[anyone|plyr, "dplmc_chancellor_message_select",
[
],
##diplomacy start+ make gender correct using reg4 (set above)
"Ask {reg4?her:him} if {reg4?she:he} is willing to flee to a location.", "dplmc_chancellor_message_goto_lord_ask",
##diplomacy end+
[
(assign, "$temp", spai_retreating_to_center),
]],

##ask to besiege a center
[anyone|plyr, "dplmc_chancellor_message_select",
[
  (gt, "$pout_party", centers_end),
  (neg|troop_slot_eq, "$lord_selected", slot_troop_occupation, slto_inactive), #SB : army condition
],
##diplomacy start+ make gender correct using reg4 (set above)
"Ask {reg4?her:him} if {reg4?she:he} is willing to besiege a location.", "dplmc_chancellor_message_goto_lord_ask",
##diplomacy end+
[
(assign, "$temp", spai_besieging_center),
]],

##ask to besiege a center
[anyone|plyr, "dplmc_chancellor_message_select",
[
  (gt, "$pout_party", centers_end),
  (neg|troop_slot_eq, "$lord_selected", slot_troop_occupation, slto_inactive), #SB : army condition
],
##diplomacy start+ make gender correct using reg4 (set above)
"Ask {reg4?her:him} if {reg4?she:he} is willing to raid around a location.", "dplmc_chancellor_message_goto_lord_ask",
##diplomacy end+
[
(assign, "$temp", spai_raiding_around_center),
]],

[anyone|plyr, "dplmc_chancellor_message_select",
[
],
"Never mind.", "dplmc_chancellor_pretalk",
[]],

[anyone,"dplmc_chancellor_message_goto_lord_ask", [],
##diplomacy start+ make gender correct using reg4 (set above)
"Where shall you order {reg4?her:him}?", "dplmc_chancellor_message_order_details",[]], #SB : do -> shall
##diplomacy end+

#SB : include here as an option
[anyone|plyr, "dplmc_chancellor_message_order_details",
[
  (is_between, "$current_town", walled_centers_begin, walled_centers_end),
  (neq, "$temp", spai_raiding_around_center), #not hostile action
  (neq, "$temp", spai_besieging_center),
],
"Here", "dplmc_chancellor_message_lord_ask",[
  (assign, "$temp_2", "$current_town"),
]],
[anyone|plyr|repeat_for_parties, "dplmc_chancellor_message_order_details",
[
(store_repeat_object, ":party_no"),
(store_faction_of_party, ":party_faction", ":party_no"),
(store_relation, ":relation", ":party_faction", "$players_kingdom"),
(assign, ":continue", 0),
(try_begin),
 (this_or_next|eq, "$temp", spai_retreating_to_center),
   (eq, "$temp", spai_holding_center),
 (try_begin),
   (this_or_next|party_slot_eq, ":party_no", slot_party_type, spt_castle),
   (party_slot_eq, ":party_no", slot_party_type, spt_town),
   (eq, ":party_faction", "$players_kingdom"),
   (assign, ":continue", 1),
 (try_end),
(else_try),
 (eq, "$temp", spai_raiding_around_center),
 (try_begin),
   (party_slot_eq, ":party_no", slot_party_type, spt_village),
   (lt, ":relation", 0),
   (assign, ":continue", 1),
 (try_end),
(else_try),
 (eq, "$temp", spai_besieging_center),
 (try_begin),
   (this_or_next|party_slot_eq, ":party_no", slot_party_type, spt_castle),
   (party_slot_eq, ":party_no", slot_party_type, spt_town),
 (party_slot_eq, ":party_no", slot_center_is_besieged_by, -1),
   (lt, ":relation", 0),
   (assign, ":continue", 1),
 (try_end),
(else_try),
  (eq, "$temp", spai_patrolling_around_center),
  (try_begin),
    (eq, ":party_faction", "$players_kingdom"),
    (is_between, ":party_no", centers_begin, centers_end),
    (assign, ":continue", 1),
  (else_try),
    (is_between, ":party_no", centers_begin, centers_end),
    (store_distance_to_party_from_party, ":distance", ":party_no", "p_main_party"),
    (le, ":distance", 25),
    (assign, ":continue", 1),
  (try_end),
(try_end),
(eq, ":continue", 1),
(neq, ":party_no", "$g_encountered_party"),
(str_store_party_name, s1, ":party_no")],
"{s1}", "dplmc_chancellor_message_lord_ask",
[
(store_repeat_object, "$temp_2"),
# (store_current_hours, ":hours"),
## SB: wtf is this doing here, "$g_talk_troop_party" is holdover from old dialogue
# (party_set_slot, "$g_talk_troop_party", slot_party_following_orders_of_troop, "trp_kingdom_heroes_including_player_begin"),
# (party_set_slot, "$g_talk_troop_party", slot_party_orders_type, "$temp"),
# (party_set_slot, "$g_talk_troop_party", slot_party_orders_object, "$temp_2"),
# (party_set_slot, "$g_talk_troop_party", slot_party_orders_time, ":hours"),

]],

[anyone|plyr, "dplmc_chancellor_message_order_details",
[
],
"Nowhere.", "dplmc_chancellor_pretalk",
[]],


[anyone, "dplmc_chancellor_message_lord_ask",
[
##diplomacy start+ make center correct
(assign, reg4, 0),
(try_begin),
(call_script, "script_cf_dplmc_troop_is_female", "$lord_selected"),
(assign, reg4, 1),
(try_end),
##diplomacy end+
(eq, "$temp", spai_accompanying_army),
(str_store_troop_name, s11, "$lord_selected"),
],
##diplomacy start+ make gender correct using reg4 (set above)
"Of course, I will send a messenger to {s11} and ask {reg4?her:him} if {reg4?she:he} is willing to accompany you in the field.", "dplmc_message_send_confirm",[
##diplomacy end+
]],

[anyone, "dplmc_chancellor_message_lord_ask",
[
(eq, "$temp", spai_holding_center),
(str_store_troop_name, s11, "$lord_selected"),
(str_store_party_name, s12, "$temp_2"),
],
##diplomacy start+ make gender correct using reg4 (set above)
"Of course, I will send a messenger to {s11} and ask {reg4?her:him} if {reg4?she:he} is willing to go to {s12}.", "dplmc_message_send_confirm",[
##diplomacy end+
]],

[anyone, "dplmc_chancellor_message_lord_ask",
[
(eq, "$temp", spai_patrolling_around_center),
(str_store_troop_name, s11, "$lord_selected"),
(str_store_party_name, s12, "$temp_2"),
],
##diplomacy start+ make gender correct using reg4 (set above)
"Of course, I will send a messenger to {s11} and ask {reg4?her:him} if {reg4?she:he} is willing to patrol around {s12}.", "dplmc_message_send_confirm",[
##diplomacy end+
]],

[anyone, "dplmc_chancellor_message_lord_ask",
[
(eq, "$temp", spai_retreating_to_center),
(str_store_troop_name, s11, "$lord_selected"),
(str_store_party_name, s12, "$temp_2"),
],
##diplomacy start+ make gender correct using reg4 (set above)
"Of course, I will send a messenger to {s11} and ask {reg4?her:him} if {reg4?she:he} is willing to retreat to {s12}.", "dplmc_message_send_confirm",[
##diplomacy end+
]],

[anyone, "dplmc_chancellor_message_lord_ask",
[
(eq, "$temp", spai_besieging_center),
(str_store_troop_name, s11, "$lord_selected"),
(str_store_party_name, s12, "$temp_2"),
],
##diplomacy start+ make gender correct using reg4 (set above)
"Of course, I will send a messenger to {s11} and ask {reg4?her:him} if {reg4?she:he} is willing to besiege {s12}.", "dplmc_message_send_confirm",[
##diplomacy end+
]],

[anyone, "dplmc_chancellor_message_lord_ask",
[
(eq, "$temp", spai_raiding_around_center),
(str_store_troop_name, s11, "$lord_selected"),
(str_store_party_name, s12, "$temp_2"),
],
##diplomacy start+ make gender correct using reg4 (set above)
"Of course, I will send a messenger to {s11} and ask {reg4?her:him} if {reg4?she:he} is willing to raid around {s12}.", "dplmc_message_send_confirm",[
##diplomacy end+
]],

[anyone|plyr, "dplmc_message_send_confirm",
[
],
"Thank you.", "dplmc_chancellor_pretalk",[
(call_script, "script_dplmc_send_messenger_to_troop", "$lord_selected", "$temp", "$temp_2"),
]],

[anyone|plyr, "dplmc_message_send_confirm",
[
],
"I changed my mind.", "dplmc_chancellor_pretalk",[
]],


##send gift
[anyone|plyr, "dplmc_chancellor_talk",
[],
"Please send a gift.", "dplmc_chancellor_gift_ask_where",
[]],

[anyone, "dplmc_chancellor_gift_ask_where",
[
(store_troop_gold, ":gold", "trp_household_possessions"),
(le, ":gold", 50),
],
"We don't have enough money in our treasury to send a gift! It will cost us 50 denars to send a gift.", "dplmc_chancellor_pretalk",
[]],

[anyone, "dplmc_chancellor_gift_ask_where",
[
(store_troop_gold, ":gold", "trp_household_possessions"),
(ge, ":gold", 50),
],
"Sending a gift will cost us 50 denars. I will withdraw the money from the treasury. Do you want to send your gift to a person or a settlement?", "dplmc_chancellor_gift_where",
[]],

[anyone|plyr, "dplmc_chancellor_gift_where",
[],
"To a person.", "dplmc_chancellor_gift_ask_person",
[]],

[anyone|plyr, "dplmc_chancellor_gift_where",
[],
"To a settlement.", "dplmc_chancellor_center_gift_ask_type",
[]],

[anyone|plyr, "dplmc_chancellor_gift_where",
[],
"Nowhere.", "dplmc_chancellor_pretalk",
[]],

[anyone, "dplmc_chancellor_center_gift_ask_type",
[
],
#SB : to send -> sending
"I recommend sending 300 units of smoked fish, cheese, or honey. If we have enough in our household I will induce a servant to deliver it.", "dplmc_chancellor_center_gift_select",[
]],

##send fish
[anyone|plyr, "dplmc_chancellor_center_gift_select",
[
(troop_get_inventory_capacity, ":capacity", "trp_household_possessions"),
(assign, ":amount", 0),
(try_for_range, ":inventory_slot", 0, ":capacity"),
  (troop_get_inventory_slot, ":item", "trp_household_possessions", ":inventory_slot"),
  (eq, ":item", "itm_smoked_fish"),
  (troop_inventory_slot_get_item_amount, ":tmp_amount", "trp_household_possessions", ":inventory_slot"),
  (val_add, ":amount", ":tmp_amount"),
(try_end),
(ge, ":amount", 300),
],
"Send some fish.", "dplmc_chancellor_center_gift_kingdom_ask",[
(assign, "$diplomacy_var", "itm_smoked_fish"),
(assign, "$diplomacy_var2", 300),
]],

##send cheese
[anyone|plyr, "dplmc_chancellor_center_gift_select",
[
(troop_get_inventory_capacity, ":capacity", "trp_household_possessions"),
(assign, ":amount", 0),
(try_for_range, ":inventory_slot", 0, ":capacity"),
  (troop_get_inventory_slot, ":item", "trp_household_possessions", ":inventory_slot"),
  (eq, ":item", "itm_cheese"),
  (troop_inventory_slot_get_item_amount, ":tmp_amount", "trp_household_possessions", ":inventory_slot"),
  (val_add, ":amount", ":tmp_amount"),
(try_end),
(ge, ":amount", 300),
],
"Send some cheese.", "dplmc_chancellor_center_gift_kingdom_ask",[
(assign, "$diplomacy_var", "itm_cheese"),
(assign, "$diplomacy_var2", 300),
]],

##send honey
[anyone|plyr, "dplmc_chancellor_center_gift_select",
[
(troop_get_inventory_capacity, ":capacity", "trp_household_possessions"),
(assign, ":amount", 0),
(try_for_range, ":inventory_slot", 0, ":capacity"),
  (troop_get_inventory_slot, ":item", "trp_household_possessions", ":inventory_slot"),
  (eq, ":item", "itm_honey"),
  (troop_inventory_slot_get_item_amount, ":tmp_amount", "trp_household_possessions", ":inventory_slot"),
  (val_add, ":amount", ":tmp_amount"),
(try_end),
(ge, ":amount", 300),
],
"Send some honey.", "dplmc_chancellor_center_gift_kingdom_ask",[
(assign, "$diplomacy_var", "itm_honey"),
(assign, "$diplomacy_var2", 300),
]],

[anyone|plyr, "dplmc_chancellor_center_gift_select",
[
],
"Never mind.", "dplmc_chancellor_pretalk",[
]],

[anyone, "dplmc_chancellor_center_gift_kingdom_ask",
[
],
"Where is the settlement?", "dplmc_chancellor_center_gift_kingdom_select",[
]],

[anyone|plyr|repeat_for_factions, "dplmc_chancellor_center_gift_kingdom_select",
[
(store_repeat_object, ":faction_no"),
(is_between, ":faction_no", kingdoms_begin, kingdoms_end),
(faction_slot_eq, ":faction_no", slot_faction_state, sfs_active),
(str_store_faction_name, s11, ":faction_no"),
],
"In {s11}.", "dplmc_chancellor_center_gift_lord_ask",
[
(store_repeat_object, "$g_faction_selected"),
]],

[anyone|plyr, "dplmc_chancellor_center_gift_kingdom_select",
[
],
"Never mind.", "dplmc_chancellor_pretalk",[
]],

##nested diplomacy start+ Disable gift-sending during a war with a nation that doesn't recognize you
[anyone, "dplmc_chancellor_center_gift_lord_ask",
[
(is_between, "$g_faction_selected", npc_kingdoms_begin, npc_kingdoms_end),
(neg|is_between, "$players_kingdom", npc_kingdoms_begin, npc_kingdoms_end),
(store_relation, reg0, "$players_kingdom", "$g_faction_selected"),
(lt, reg0, 0),
(neg|faction_slot_ge, "$g_faction_selected", slot_faction_recognized_player, 1),
],
"Given that we are currently at war with the {s11} and they do not officially recognize your legitimacy, any messengers we sent would run the risk of being hanged as bandits.", "dplmc_chancellor_pretalk",[
]],
##nested diplomacy end+

[anyone, "dplmc_chancellor_center_gift_lord_ask",
[
],
#SB : grammar
"To which settlement would you like to confer this gift?", "dplmc_chancellor_center_gift_lord_select",[
]],

##select the lord who shall receive the gift to hand over
[anyone|plyr|repeat_for_parties, "dplmc_chancellor_center_gift_lord_select",
[
(store_repeat_object, ":party_no"),
(this_or_next|party_slot_eq, ":party_no", slot_party_type, spt_town),
(party_slot_eq, ":party_no", slot_party_type, spt_village),
(store_faction_of_party, ":faction_no", ":party_no"),
(eq, ":faction_no", "$g_faction_selected"),
(str_store_party_name, s11, ":party_no"),

],"{s11}.", "dplmc_chancellor_center_gift_send_ask",
[
(store_repeat_object, "$lord_selected"),
]],

[anyone|plyr, "dplmc_chancellor_center_gift_lord_select",
[
],
"I changed my mind.", "dplmc_chancellor_pretalk",[
]],

[anyone, "dplmc_chancellor_center_gift_send_ask",
[
(str_store_item_name,s6,"$diplomacy_var"),
(str_store_party_name, s11, "$lord_selected"),
],
"I will send a servant with the {s6} to {s11}.", "dplmc_chancellor_center_gift_send_confirm",[

]],

[anyone|plyr, "dplmc_chancellor_center_gift_send_confirm",
[
],
"Thank you.", "dplmc_chancellor_pretalk",[
(call_script, "script_dplmc_send_gift_to_center", "$lord_selected", "$diplomacy_var", "$diplomacy_var2"),
]],

[anyone|plyr, "dplmc_chancellor_center_gift_send_confirm",
[
],
"Never mind.", "dplmc_chancellor_pretalk",[
]],


##send gift to person
[anyone, "dplmc_chancellor_gift_ask_person",
[],
"Do you want to send your gift to a lady or to a lord?.", "dplmc_chancellor_gift_lady_or_lord",
[]],


##send gift to a lord
[anyone|plyr, "dplmc_chancellor_gift_lady_or_lord",
[],
"Please send a gift to a lord.", "dplmc_chancellor_gift_ask_type",
[]],


[anyone, "dplmc_chancellor_gift_ask_type",
[
],
#SB : to send -> sending
"I recommend sending 150 units of Ale, Wine or Oil. If we have enough in our household I will order a porter to deliver it.", "dplmc_chancellor_gift_select",[
]],

##send ale
[anyone|plyr, "dplmc_chancellor_gift_select",
[
(troop_get_inventory_capacity, ":capacity", "trp_household_possessions"),
(assign, ":amount", 0),
(try_for_range, ":inventory_slot", 0, ":capacity"),
  (troop_get_inventory_slot, ":item", "trp_household_possessions", ":inventory_slot"),
  (eq, ":item", "itm_ale"),
  (troop_inventory_slot_get_item_amount, ":tmp_amount", "trp_household_possessions", ":inventory_slot"),
  (val_add, ":amount", ":tmp_amount"),
(try_end),
(ge, ":amount", 150),
],
"Send some ale.", "dplmc_chancellor_gift_kingdom_ask",[
(assign, "$diplomacy_var", "itm_ale"),
(assign, "$diplomacy_var2", 150),
]],

##send wine
[anyone|plyr, "dplmc_chancellor_gift_select",
[
(troop_get_inventory_capacity, ":capacity", "trp_household_possessions"),
(assign, ":amount", 0),
(try_for_range, ":inventory_slot", 0, ":capacity"),
  (troop_get_inventory_slot, ":item", "trp_household_possessions", ":inventory_slot"),
  (eq, ":item", "itm_wine"),
  (troop_inventory_slot_get_item_amount, ":tmp_amount", "trp_household_possessions", ":inventory_slot"),
(val_add, ":amount", ":tmp_amount"),
(try_end),
(ge, ":amount", 150),
],
"Send some wine.", "dplmc_chancellor_gift_kingdom_ask",[
(assign, "$diplomacy_var", "itm_wine"),
(assign, "$diplomacy_var2", 150),
]],

##send oil
[anyone|plyr, "dplmc_chancellor_gift_select",
[
(troop_get_inventory_capacity, ":capacity", "trp_household_possessions"),
(assign, ":amount", 0),
(try_for_range, ":inventory_slot", 0, ":capacity"),
  (troop_get_inventory_slot, ":item", "trp_household_possessions", ":inventory_slot"),
  (eq, ":item", "itm_oil"),
  (troop_inventory_slot_get_item_amount, ":tmp_amount", "trp_household_possessions", ":inventory_slot"),
(val_add, ":amount", ":tmp_amount"),
(try_end),
(ge, ":amount", 150),
],
"Send some oil.", "dplmc_chancellor_gift_kingdom_ask",[
(assign, "$diplomacy_var", "itm_oil"),
(assign, "$diplomacy_var2", 150),
]],

[anyone|plyr, "dplmc_chancellor_gift_select",
[
],
"Never mind.", "dplmc_chancellor_pretalk",[
]],

[anyone, "dplmc_chancellor_gift_kingdom_ask",
[
],
"Where does the lord live whom you want to make a present?", "dplmc_chancellor_gift_kingdom_select",[
]],

[anyone|plyr|repeat_for_factions, "dplmc_chancellor_gift_kingdom_select",
[
(store_repeat_object, ":faction_no"),
(is_between, ":faction_no", kingdoms_begin, kingdoms_end),
(faction_slot_eq, ":faction_no", slot_faction_state, sfs_active),
(str_store_faction_name, s11, ":faction_no"),
],
"In {s11}.", "dplmc_chancellor_gift_lord_ask",
[
(store_repeat_object, "$g_faction_selected"),
]],

[anyone|plyr, "dplmc_chancellor_gift_kingdom_select",
[
],
"Never mind.", "dplmc_chancellor_pretalk",[
]],

##nested diplomacy start+ Disable gift-sending during a war with a nation that doesn't recognize you
[anyone, "dplmc_chancellor_gift_lord_ask",
[
(is_between, "$g_faction_selected", npc_kingdoms_begin, npc_kingdoms_end),
(neg|is_between, "$players_kingdom", npc_kingdoms_begin, npc_kingdoms_end),
(store_relation, reg0, "$players_kingdom", "$g_faction_selected"),
(lt, reg0, 0),
(neg|faction_slot_ge, "$g_faction_selected", slot_faction_recognized_player, 1),
],
"Given that we are currently at war with the {s11} but they do not officially recognize your legitimacy, any messengers we sent would run the risk of being hanged as bandits.", "dplmc_chancellor_pretalk",[
]],
##nested diplomacy end+

[anyone, "dplmc_chancellor_gift_lord_ask",
[
],
"To whom do you like to send the gift?", "dplmc_chancellor_gift_lord_select",[
]],

##select the lord who shall receive the gift to hand over
[anyone|plyr|repeat_for_troops, "dplmc_chancellor_gift_lord_select",
[
(store_repeat_object, ":troop_no"),
(troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_hero),
(neg|troop_slot_ge, ":troop_no", slot_troop_prisoner_of_party, 0),
(troop_slot_eq, ":troop_no", slot_troop_met, 1),
(neq, "trp_player", ":troop_no"),
(troop_get_slot, ":target_party", ":troop_no", slot_troop_leaded_party),
(gt, ":target_party", 0),
(store_troop_faction, ":faction_no", ":troop_no"),
(eq, ":faction_no", "$g_faction_selected"),
(str_store_troop_name, s11, ":troop_no"),

],"{s11}.", "dplmc_chancellor_gift_send_ask",
[
(store_repeat_object, "$lord_selected"),
]],

[anyone|plyr, "dplmc_chancellor_gift_lord_select",
[
],
"I can't think of anyone.", "dplmc_chancellor_pretalk",[
]],

[anyone, "dplmc_chancellor_gift_send_ask",
[
(str_store_item_name,s6,"$diplomacy_var"),
(str_store_troop_name, s11, "$lord_selected"),
],
"I will send a servant with the {s6} to {s11}.", "dplmc_chancellor_gift_send_confirm",[

]],

[anyone|plyr, "dplmc_chancellor_gift_send_confirm",
[
],
"Thank you.", "dplmc_chancellor_pretalk",[
(call_script, "script_dplmc_send_gift", "$lord_selected", "$diplomacy_var", "$diplomacy_var2"),
]],

[anyone|plyr, "dplmc_chancellor_gift_send_confirm",
[
],
"Never mind.", "dplmc_chancellor_pretalk",[
]],




##send gift to a lady
[anyone|plyr, "dplmc_chancellor_gift_lady_or_lord",
[],
"Please send a gift to a lady.", "dplmc_chancellor_lady_gift_ask_type",
[]],

[anyone|plyr, "dplmc_chancellor_gift_lady_or_lord",
[],
"Never mind.", "dplmc_chancellor_pretalk",
[]],


[anyone, "dplmc_chancellor_lady_gift_ask_type",
[
],
"I recommend to send dyes, silk or velvets. If we have enough in our household I will induce a servant to deliver it.", "dplmc_chancellor_lady_gift_select",[
]],

##send ale
[anyone|plyr, "dplmc_chancellor_lady_gift_select",
[
(troop_get_inventory_capacity, ":capacity", "trp_household_possessions"),
(assign, ":amount", 0),
(try_for_range, ":inventory_slot", 0, ":capacity"),
  (troop_get_inventory_slot, ":item", "trp_household_possessions", ":inventory_slot"),
  (eq, ":item", "itm_raw_dyes"),
  (val_add, ":amount", 1),
(try_end),
(ge, ":amount", 1),
],
"Send dyes.", "dplmc_chancellor_lady_gift_kingdom_ask",[
(assign, "$diplomacy_var", "itm_raw_dyes"),
(assign, "$diplomacy_var2", 1),
]],

##send wine
[anyone|plyr, "dplmc_chancellor_lady_gift_select",
[
(troop_get_inventory_capacity, ":capacity", "trp_household_possessions"),
(assign, ":amount", 0),
(try_for_range, ":inventory_slot", 0, ":capacity"),
  (troop_get_inventory_slot, ":item", "trp_household_possessions", ":inventory_slot"),
  (eq, ":item", "itm_raw_silk"),
  (val_add, ":amount", 1),
(try_end),
(ge, ":amount", 1),
],
"Send silk.", "dplmc_chancellor_lady_gift_kingdom_ask",[
(assign, "$diplomacy_var", "itm_raw_silk"),
(assign, "$diplomacy_var2", 1),
]],

##send velvet
[anyone|plyr, "dplmc_chancellor_lady_gift_select",
[
(troop_get_inventory_capacity, ":capacity", "trp_household_possessions"),
(assign, ":amount", 0),
(try_for_range, ":inventory_slot", 0, ":capacity"),
  (troop_get_inventory_slot, ":item", "trp_household_possessions", ":inventory_slot"),
  (eq, ":item", "itm_velvet"),
  (val_add, ":amount", 1),
(try_end),
(ge, ":amount", 1),
],
"Send velvet.", "dplmc_chancellor_lady_gift_kingdom_ask",[
(assign, "$diplomacy_var", "itm_velvet"),
(assign, "$diplomacy_var2", 1),
]],

[anyone|plyr, "dplmc_chancellor_lady_gift_select",
[
],
"Never mind.", "dplmc_chancellor_pretalk",[
]],

[anyone, "dplmc_chancellor_lady_gift_kingdom_ask",
[
],
"Where does the lady live?", "dplmc_chancellor_lady_gift_kingdom_select",[
]],

[anyone|plyr|repeat_for_factions, "dplmc_chancellor_lady_gift_kingdom_select",
[
(store_repeat_object, ":faction_no"),
(is_between, ":faction_no", kingdoms_begin, kingdoms_end),
(faction_slot_eq, ":faction_no", slot_faction_state, sfs_active),
(str_store_faction_name, s11, ":faction_no"),
],
"In {s11}.", "dplmc_chancellor_lady_gift_lady_ask",
[
(store_repeat_object, "$g_faction_selected"),
]],

[anyone|plyr, "dplmc_chancellor_lady_gift_kingdom_select",
[
],
"Never mind.", "dplmc_chancellor_pretalk",[
]],

##nested diplomacy start+ Disable gift-sending during a war with a nation that doesn't recognize you
[anyone, "dplmc_chancellor_lady_gift_lady_ask",
[
(is_between, "$g_faction_selected", npc_kingdoms_begin, npc_kingdoms_end),
(neg|is_between, "$players_kingdom", npc_kingdoms_begin, npc_kingdoms_end),
(store_relation, reg0, "$players_kingdom", "$g_faction_selected"),
(lt, reg0, 0),
(neg|faction_slot_ge, "$g_faction_selected", slot_faction_recognized_player, 1),
],
"Given that we are currently at war with the {s11} but they do not officially recognize your legitimacy, any messengers we sent would run the risk of being hanged as bandits.", "dplmc_chancellor_pretalk",[
]],
##nested diplomacy end+

[anyone, "dplmc_chancellor_lady_gift_lady_ask",
[
],
"Which lady should receive the gift?", "dplmc_chancellor_lady_gift_lady_select",[
]],

##select the lord who shall receive the gift to hand over
[anyone|plyr|repeat_for_troops, "dplmc_chancellor_lady_gift_lady_select",
[
(store_repeat_object, ":troop_no"),
(troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_lady),
(neg|troop_slot_ge, ":troop_no", slot_troop_prisoner_of_party, 0),
(troop_slot_eq, ":troop_no", slot_troop_met, 1),
(neq, "trp_player", ":troop_no"),
(store_troop_faction, ":faction_no", ":troop_no"),
(eq, ":faction_no", "$g_faction_selected"),
(str_store_troop_name, s11, ":troop_no"),

],"{s11}.", "dplmc_chancellor_lady_gift_send_ask",
[
(store_repeat_object, "$lord_selected"),
]],

[anyone|plyr, "dplmc_chancellor_lady_gift_lady_select",
[
],
"I can't think of anyone.", "dplmc_chancellor_pretalk",[
]],

[anyone, "dplmc_chancellor_lady_gift_send_ask",
[
(str_store_item_name,s6,"$diplomacy_var"),
(str_store_troop_name, s11, "$lord_selected"),
],
"I will send a servant with the {s6} to {s11}.", "dplmc_chancellor_lady_gift_send_confirm",[

]],

[anyone|plyr, "dplmc_chancellor_lady_gift_send_confirm",
[
],
"Thank you.", "dplmc_chancellor_pretalk",[
(call_script, "script_dplmc_send_gift", "$lord_selected", "$diplomacy_var", "$diplomacy_var2"),
]],

[anyone|plyr, "dplmc_chancellor_lady_gift_send_confirm",
[
],
"Never mind.", "dplmc_chancellor_pretalk",[
]],

##chancellor household
[anyone|plyr, "dplmc_chancellor_talk",
[
],
"Let us check our household possessions.", "dplmc_chancellor_talk_household",[
(change_screen_loot, "trp_household_possessions"),
]],

[anyone, "dplmc_chancellor_talk_household",
[
],
"You should store all important things in the household.", "dplmc_chancellor_pretalk",[
]],

##diplomacy start+
[anyone|plyr, "dplmc_chancellor_talk",
[(eq, 0, 1),],
"I would like to take a look through the items in my secondary storage houses.", "dplmc_chancellor_pretalk",
[(change_screen_loot, "trp_dplmc_chancellor"),]],
##diplomacy end+

##zerilius changes begin
#dismiss chancellor
[anyone|plyr, "dplmc_chancellor_talk",
[],
"I no longer need your services.", "dplmc_chancellor_dismiss_confirm_ask",
[]],

[anyone, "dplmc_chancellor_dismiss_confirm_ask",
[
],
"Are you sure that you don't need me anymore?", "dplmc_chancellor_dismiss_confirm",
[]],

[anyone|plyr, "dplmc_chancellor_dismiss_confirm",
[
],
"Yes I am.", "dplmc_chancellor_dismiss_confirm_yes",
[]],

[anyone, "dplmc_chancellor_dismiss_confirm_yes",
[
],
"As you wish.", "close_window",
[
(assign, "$g_player_chancellor", -1),
]],

[anyone|plyr, "dplmc_chancellor_dismiss_confirm",
[
],
"No I am not.", "dplmc_chancellor_pretalk",
[]],
##zerilius changes end

[anyone|plyr, "dplmc_chancellor_talk",
[],
"Farewell!", "close_window",
[]],

#SB : add outro after dismissal
[trp_dplmc_chancellor, "start",
[
  (eq, "$talk_context", tc_court_talk),
  (neq, "$g_player_chancellor", "$g_talk_troop")
],
"I'll be leaving this court soon. I hope I was of some small service to you, {playername}.", "close_window", []],

#SB : TODO add actual intro to role when troop not met
##Constable
[anyone,"start",
[
(eq, "$g_player_constable","$g_talk_troop"),
],
"Always at your service!", "dplmc_constable_talk",[
]],

[anyone,"dplmc_constable_pretalk",
##diplomacy start+ Replace "Sire" with {s0}
#[],
#"Do you need anything else, Sire?", "dplmc_constable_talk",[
[(call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),
],
"Do you need anything else, {s0}?", "dplmc_constable_talk",[
##diplomacy end+
]],

##ask about war
[anyone|plyr,"dplmc_constable_talk", [],
"How goes the war?", "dplmc_constable_talk_ask_war",[]],

[anyone,"dplmc_constable_talk_ask_war", [],
"{s12}", "dplmc_constable_talk_ask_war_2",
[
(assign, ":num_enemies", 0),
(try_for_range_backwards, ":cur_faction", kingdoms_begin, kingdoms_end),
(faction_slot_eq, ":cur_faction", slot_faction_state, sfs_active),
(store_relation, ":cur_relation", ":cur_faction", "fac_player_supporters_faction"),
(lt, ":cur_relation", 0),
(try_begin),
  (eq, ":num_enemies", 0),
  (str_store_faction_name_link, s12, ":cur_faction"),
(else_try),
  (eq, ":num_enemies", 1),
  (str_store_faction_name_link, s11, ":cur_faction"),
  (str_store_string, s12, "@{s11} and {s12}"),
(else_try),
  (str_store_faction_name_link, s11, ":cur_faction"),
  (str_store_string, s12, "@{!}{s11}, {s12}"),
(try_end),
(val_add, ":num_enemies", 1),
(try_end),
(try_begin),
(eq, ":num_enemies", 0),
(str_store_string, s12, "@We are not at war with anyone."),
(else_try),
(str_store_string, s12, "@We are at war with {s12}."),
(try_end),
]],

[anyone|plyr|repeat_for_factions, "dplmc_constable_talk_ask_war_2", [(store_repeat_object, ":faction_no"),
                                                            (is_between, ":faction_no", kingdoms_begin, kingdoms_end),
                                                            (faction_slot_eq, ":faction_no", slot_faction_state, sfs_active),
                                                               (store_relation, ":cur_relation", ":faction_no", "fac_player_supporters_faction"),
                                                               (lt, ":cur_relation", 0),
                                                               (str_store_faction_name, s1, ":faction_no")],
"Tell me more about the war with {s1}.", "dplmc_constable_talk_ask_war_details",[(store_repeat_object, "$faction_requested_to_learn_more_details_about_the_war_against")]],

[anyone|plyr,"dplmc_constable_talk_ask_war_2", [], "That's all I wanted to know. Thank you.", "dplmc_constable_pretalk",[]],

[anyone,"dplmc_constable_talk_ask_war_details", [],
"{!}{s9}.",
"dplmc_constable_talk_ask_war_2",
[
(store_add, ":war_damage_slot", "$faction_requested_to_learn_more_details_about_the_war_against", slot_faction_war_damage_inflicted_on_factions_begin),
(val_sub, ":war_damage_slot", kingdoms_begin),
 (faction_get_slot, ":war_damage_inflicted", "fac_player_supporters_faction", ":war_damage_slot"),

(store_add, ":war_damage_slot", "fac_player_supporters_faction", slot_faction_war_damage_inflicted_on_factions_begin),
(val_sub, ":war_damage_slot", kingdoms_begin),
 (faction_get_slot, ":war_damage_suffered", "$faction_requested_to_learn_more_details_about_the_war_against", ":war_damage_slot"),

(val_max, ":war_damage_suffered", 1),

(store_mul, ":war_damage_ratio", ":war_damage_inflicted", 100),
(val_div, ":war_damage_ratio", ":war_damage_suffered"),

(try_begin),
   (eq, "$cheat_mode", 1),
   (assign, reg3, ":war_damage_inflicted"),
   (assign, reg4, ":war_damage_suffered"),
   (assign, reg5, ":war_damage_ratio"),
   (display_message, "str_war_damage_inflicted_reg3_suffered_reg4_ratio_reg5"),
(try_end),

(str_store_string, s9, "str_error__did_not_calculate_war_progress_string_properly"),
(try_begin),
   (lt, ":war_damage_inflicted", 5),
   (str_store_string, s9, "str_the_war_has_barely_begun_so_and_it_is_too_early_to_say_who_is_winning_and_who_is_losing"),
(else_try),
   (gt, ":war_damage_inflicted", 100),
   (gt, ":war_damage_ratio", 200),
   (str_store_string, s9, "str_we_have_been_hitting_them_very_hard_and_giving_them_little_chance_to_recover"),
(else_try),
   (gt, ":war_damage_inflicted", 80),
   (gt, ":war_damage_ratio", 150),
   (str_store_string, s9, "str_the_fighting_has_been_hard_but_we_have_definitely_been_getting_the_better_of_them"),
(else_try),
   (gt, ":war_damage_suffered", 100),
   (lt, ":war_damage_ratio", 50),
   (str_store_string, s9, "str_they_have_been_hitting_us_very_hard_and_causing_great_suffering"),
(else_try),
   (gt, ":war_damage_suffered", 80),
   (lt, ":war_damage_ratio", 68),
   (str_store_string, s9, "str_the_fighting_has_been_hard_and_i_am_afraid_that_we_have_been_having_the_worst_of_it"),
(else_try),
   (gt, ":war_damage_suffered", 50),
   (gt, ":war_damage_inflicted", 50),
   (gt, ":war_damage_ratio", 65),
   (str_store_string, s9, "str_both_sides_have_suffered_in_the_fighting"),
(else_try),
   (gt, ":war_damage_ratio", 125),
   (str_store_string, s9, "str_no_clear_winner_has_yet_emerged_in_the_fighting_but_i_think_we_are_getting_the_better_of_them"),
(else_try),
   (gt, ":war_damage_ratio", 80),
   (str_store_string, s9, "str_no_clear_winner_has_yet_emerged_in_the_fighting_but_i_fear_they_may_be_getting_the_better_of_us"),
(else_try),
   (str_store_string, s9, "str_no_clear_winner_has_yet_emerged_in_the_fighting"),
(try_end),

(try_begin),
   (neg|faction_slot_eq, "fac_player_supporters_faction", slot_faction_leader, "$g_talk_troop"),
   (call_script, "script_npc_decision_checklist_peace_or_war", "$players_kingdom", "$faction_requested_to_learn_more_details_about_the_war_against", -1),
   (str_store_string, s9, "str_s9_s14"),
  (try_end),
]],

##send scout
[anyone|plyr, "dplmc_constable_talk",
[],
"I want information about a settlement.", "dplmc_constable_scout_ask",
[]],

[anyone, "dplmc_constable_scout_ask",
[
],
"We can send a spy which will cost you 300 denars. Where do you want to send the spy?", "dplmc_constable_scout_location",[
]],

[anyone|plyr|repeat_for_factions, "dplmc_constable_scout_location",
[
(store_troop_gold, ":cur_gold", "trp_household_possessions"),
(ge, ":cur_gold", 300),
(store_repeat_object, ":faction"),
(is_between, ":faction", kingdoms_begin, kingdoms_end),
(str_store_faction_name, s11, ":faction"),
],
"{!}{s11}.", "dplmc_constable_scout_location_confirm_ask",
[
(store_repeat_object, "$diplomacy_var"),
]
],

[anyone|plyr, "dplmc_constable_scout_location",
[],
"I changed my mind.", "dplmc_constable_pretalk",
[]],

[anyone, "dplmc_constable_scout_location_confirm_ask",
[
],
#SB : spy out -> spy on
"Which settlement do you want to spy on?", "dplmc_constable_scout_location2",[
]],

[anyone|plyr|repeat_for_parties, "dplmc_constable_scout_location2",
[
(store_repeat_object, ":party_no"),
(is_between, ":party_no", walled_centers_begin, walled_centers_end),
(store_faction_of_party, ":faction", ":party_no"),
(eq, ":faction", "$diplomacy_var"),
(str_store_party_name, s11, ":party_no"),
],
"{!}{s11}.", "dplmc_constable_scout_location_confirm_ask2",
[
(store_repeat_object, "$diplomacy_var"),
]
],

[anyone|plyr, "dplmc_constable_scout_location2",
[],
"I changed my mind.", "dplmc_constable_pretalk",
[]],

[anyone, "dplmc_constable_scout_location_confirm_ask2",
[(str_store_party_name, s11, "$diplomacy_var"),
],
"As you wish, I will send a spy to {s11} and withdraw 300 denars from your treasury.", "dplmc_constable_scout_location_confirm",[
]],

[anyone|plyr, "dplmc_constable_scout_location_confirm",
[
],
"Great.", "dplmc_constable_pretalk",
[
  (call_script, "script_dplmc_withdraw_from_treasury", 300),
  (call_script, "script_dplmc_send_scout_party", "$current_town", "$diplomacy_var", "$players_kingdom"),
]],

[anyone|plyr, "dplmc_constable_scout_location_confirm",
[],
"Hold on!", "dplmc_constable_pretalk",
[]],

##release prisoner
[anyone|plyr,"dplmc_constable_talk", [],
"I want to release a prisoner.", "dplmc_constable_talk_ask_prisoner",[]],

[anyone,"dplmc_constable_talk_ask_prisoner",
[],
"Alright, which prisoner do you want to release?", "dplmc_constable_talk_prisoner_select",[
]],

##select enemy prisoner
[anyone|plyr|repeat_for_troops, "dplmc_constable_talk_prisoner_select",
[
(store_repeat_object, ":troop_no"),
(troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_hero),
(is_between, ":troop_no", kings_begin, lords_end),
(troop_get_slot, ":party", ":troop_no", slot_troop_prisoner_of_party),

(assign, ":can_release", 0),
(try_begin),
(is_between, ":party", walled_centers_begin, walled_centers_end),
(party_slot_eq, ":party", slot_town_lord, "trp_player"),
(assign, ":can_release", 1),
(else_try),
(eq, ":party", "p_main_party"),
(assign, ":can_release", 1),
(try_end),
(eq, ":can_release", 1),

(str_store_troop_name, s10, ":troop_no"),
(store_faction_of_troop, ":faction_no", ":troop_no"),
(str_store_faction_name_link, s11, ":faction_no"),
],
"{s10} of {s11}.", "dplmc_constable_exchange_prisoner_ask_confirm",
[
(store_repeat_object, "$diplomacy_var"),
(store_faction_of_troop, "$g_faction_selected", "$diplomacy_var"),
]],

[anyone|plyr,"dplmc_constable_talk_prisoner_select", [],
"No one.", "dplmc_constable_pretalk",
[
]],

[anyone,"dplmc_constable_exchange_prisoner_ask_confirm",
[
(str_store_troop_name, s10, "$diplomacy_var"),
(store_faction_of_troop, ":faction_no", "$diplomacy_var"),
(str_store_faction_name_link, s11, ":faction_no"),
],
"As you wish, I will tell the prison guard to release {s10} of {s11}.", "dplmc_constable_exchange_prisoner_confirm",[
]],

[anyone|plyr,"dplmc_constable_exchange_prisoner_confirm", [],
"Very well.", "dplmc_constable_pretalk",
[
(troop_get_slot, ":party", "$diplomacy_var", slot_troop_prisoner_of_party),

(try_begin),
  (eq, "$cheat_mode", 1),
  (str_store_party_name, s7, ":party"), #debug
  (display_message, "@{!}DEBUG - prisoner of: {s7}"),
(try_end),

(party_remove_prisoners, ":party", "$diplomacy_var", 1),
(try_begin),
  (main_party_has_troop, "$diplomacy_var"),
  (party_remove_prisoners, "p_main_party", "$diplomacy_var", 1),
(try_end),
(call_script, "script_remove_troop_from_prison", "$diplomacy_var"),
(str_store_troop_name, s7, "$diplomacy_var"),
(display_message, "str_dplmc_has_been_set_free"),
(call_script, "script_change_player_relation_with_troop", "$diplomacy_var", 3),
(call_script, "script_change_player_honor", 1),
]],

[anyone|plyr,"dplmc_constable_exchange_prisoner_confirm", [],
"No, I changed my mind.", "dplmc_constable_pretalk",[]],

[anyone|plyr, "dplmc_constable_talk",
[],
"Please give me a report.", "dplmc_constable_reports_ask",
[]],

[anyone, "dplmc_constable_reports_ask",
[],
"About what do you want to have a report?", "dplmc_constable_reports",
[]],

[anyone|plyr, "dplmc_constable_reports",
[
##diplomacy start+ Handle player is co-ruler of kingdom
(assign, ":is_coruler", 0),
(try_begin),
	(is_between, "$players_kingdom", npc_kingdoms_begin, npc_kingdoms_end),
	(call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", "$players_kingdom"),
	(ge, reg0, DPLMC_FACTION_STANDING_LEADER_SPOUSE),
	(assign, ":is_coruler", 1),
(try_end),
(this_or_next|eq, ":is_coruler", 1),
##diplomacy end+
 (eq, "$players_kingdom", "fac_player_supporters_faction"),
],
"Please give me a report about the kingdom's army.", "dplmc_constable_kingdom_overview",
[]],

[anyone, "dplmc_constable_kingdom_overview",
[
(assign, ":garrison_size", 0),
(assign, ":field_size", 0),
(assign, ":castle_count", 0),
(assign, ":town_count", 0),
(assign, ":army_count", 1), #SB : include player party
##diplomacy start+ Handle player is co-ruler of kingdom
(assign, ":alt_faction", "fac_player_supporters_faction"),
(try_begin),
	(is_between, "$players_kingdom", npc_kingdoms_begin, npc_kingdoms_end),
	(call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", "$players_kingdom"),
	(ge, reg0, DPLMC_FACTION_STANDING_LEADER_SPOUSE),
	(assign, ":alt_faction", "$players_kingdom"),
(try_end),
##diplomacy end+

(try_for_parties, ":selected_party"),
  (try_begin),
    (this_or_next|party_slot_eq, ":selected_party", slot_party_type, spt_town),
    (party_slot_eq, ":selected_party", slot_party_type, spt_castle),
    (store_faction_of_party, ":party_faction", ":selected_party"),
    ##diplomacy start+
    (this_or_next|eq, ":party_faction", ":alt_faction"),
    ##diplomacy end+
    (eq, ":party_faction", "fac_player_supporters_faction"),

    (party_get_num_companion_stacks, ":num_stacks", ":selected_party"),
    (try_for_range, ":i_stack", 0, ":num_stacks"),
      (party_stack_get_size, ":stack_size", ":selected_party", ":i_stack"),
      (val_add, ":garrison_size", ":stack_size"),
    (try_end),

    (try_begin),
      (party_slot_eq, ":selected_party", slot_party_type, spt_castle),
      (val_add, ":castle_count", 1),
    (else_try),
      (val_add, ":town_count", 1),
    (try_end),
  (else_try),
    (party_slot_eq, ":selected_party", slot_party_type, spt_kingdom_hero_party),
    (store_faction_of_party, ":party_faction", ":selected_party"),
    ##diplomacy start+
    (this_or_next|eq, ":party_faction", ":alt_faction"),
    ##diplomacy end+
    (eq, ":party_faction", "fac_player_supporters_faction"),
    (party_get_num_companion_stacks, ":num_stacks", ":selected_party"),
    (try_for_range, ":i_stack", 0, ":num_stacks"),
      (party_stack_get_size, ":stack_size", ":selected_party", ":i_stack"),
      (val_add, ":field_size", ":stack_size"),
    (try_end),
    (val_add, ":army_count", 1), #SB : count party
  (else_try),
    (eq, ":selected_party", "p_main_party"),
    (party_get_num_companion_stacks, ":num_stacks", ":selected_party"),
    (try_for_range, ":i_stack", 0, ":num_stacks"),
      (party_stack_get_size, ":stack_size", ":selected_party", ":i_stack"),
      (val_add, ":field_size", ":stack_size"),
    (try_end),
(try_end),

(try_end),
(assign, reg2, ":garrison_size"),
(str_store_string, s6, "@Our kingdom currently has {reg2} soldiers garrisoned in"),
#SB : reformat
(try_begin),
  (gt, ":town_count", 0),
  (store_sub, reg1, ":town_count", 1),
  (assign, reg2, ":town_count"),
  (assign, reg3, ":castle_count"),
  (str_store_string, s6, "@{s6} {reg2} {reg1?towns:town}{reg3? and:.}"),
(try_end),

(try_begin),
  (gt, ":castle_count", 0),
  (assign, reg3, ":castle_count"),
  (store_sub, reg1, ":castle_count", 1), #SB : castle count
  (str_store_string, s6, "@{s6} {reg3} {reg1?castles:castle}."),
(try_end),
(try_begin),
  (gt, ":field_size", 0),
  (assign, reg2, ":field_size"),
  (assign, reg3, ":army_count"),  #SB : army count
  (store_sub, reg1, ":army_count", 1),
  (str_store_string, s6, "@{s6} In addition we have {reg2} soldiers in the field {reg1?across {reg3} armies:in a single army}."),
(try_end),

],
"{!}{s6}", "dplmc_constable_reports_ask",
[]],

[anyone|plyr, "dplmc_constable_reports",
[
],
"Please give me a report about my army.", "dplmc_constable_overview",
[]],

[anyone, "dplmc_constable_overview",
[

(assign, ":garrison_size", 0),
(assign, ":field_size", 0),
(assign, ":patrol_size", 0),
(assign, ":castle_count", 0),
(assign, ":town_count", 0),
(try_for_parties, ":selected_party"),

(try_begin),
  (this_or_next|party_slot_eq, ":selected_party", slot_party_type, spt_town),
  (party_slot_eq, ":selected_party", slot_party_type, spt_castle),
  (party_slot_eq, ":selected_party", slot_town_lord, "trp_player"),

  (party_get_num_companion_stacks, ":num_stacks", ":selected_party"),
  (try_for_range, ":i_stack", 0, ":num_stacks"),
    (party_stack_get_size, ":stack_size", ":selected_party", ":i_stack"),
    (val_add, ":garrison_size", ":stack_size"),
  (try_end),

  (try_begin),
    (party_slot_eq, ":selected_party", slot_party_type, spt_castle),
    (val_add, ":castle_count", 1),
  (else_try),
    (val_add, ":town_count", 1),
  (try_end),
(else_try),
  (eq, ":selected_party", "p_main_party"),
  (party_get_num_companion_stacks, ":num_stacks", ":selected_party"),
  (try_for_range, ":i_stack", 0, ":num_stacks"),
    (party_stack_get_size, ":stack_size", ":selected_party", ":i_stack"),
    (val_add, ":field_size", ":stack_size"),
  (try_end),
(else_try),
  (party_slot_eq, ":selected_party", slot_party_type, spt_patrol),
  (party_slot_eq, ":selected_party", dplmc_slot_party_mission_diplomacy, "trp_player"),
  (party_get_num_companion_stacks, ":num_stacks", ":selected_party"),
  (try_for_range, ":i_stack", 0, ":num_stacks"),
    (party_stack_get_size, ":stack_size", ":selected_party", ":i_stack"),
    (val_add, ":patrol_size", ":stack_size"),
  (try_end),
(try_end),

(try_end),
(assign, reg2, ":garrison_size"),
(str_store_string, s6, "@We currently have {reg2} soldiers"),
#SB : reformat
(assign, reg2, ":town_count"),
(assign, reg3, ":castle_count"),
(str_store_string, s6, "@{s6} garrisoned in {reg2?{reg2} towns:}{reg2?{reg3?: and }:}{reg3?{reg3} castles:}."),
(try_begin),
  (gt, ":field_size", 0),
  (assign, reg2, ":field_size"),
  (assign, reg3, ":patrol_size"),
  (str_store_string, s6, "@{s6} In addition you have {reg2} soldiers in your warband and {reg3} soldiers out in patrols."),
(try_end),

],
"{!}{s6}", "dplmc_constable_reports_ask",
[]],

#SB : convoy -> warband
[anyone|plyr, "dplmc_constable_reports",
[
#SB : add restriction to this option showing up
(call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", "$g_encountered_party_faction"),
(ge, reg0, DPLMC_FACTION_STANDING_MARSHALL),
#alternatively add affiliated troops?
],
"Please give me a status report about the warband of a lord.", "dplmc_constable_lord",
[]],

#SB : grammar
[anyone, "dplmc_constable_lord",
[],
"Alright, which lord's party would you like to know about?", "dplmc_constable_status_lord_select",
[]],

[anyone|plyr|repeat_for_troops, "dplmc_constable_status_lord_select",
[
(store_repeat_object, ":troop_no"),
(troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_hero),
(neq, "trp_player", ":troop_no"),
(troop_slot_ge, ":troop_no", slot_troop_leaded_party, 0),
(neg|troop_slot_ge, ":troop_no", slot_troop_prisoner_of_party, 0),
(store_troop_faction, ":faction_no", ":troop_no"),
##diplomacy start+ Handle player is co-ruler of faction
##OLD:
#(eq, ":faction_no", "fac_player_supporters_faction"),
##NEW:
(call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", ":faction_no"),
(ge, reg0, DPLMC_FACTION_STANDING_MARSHALL), #SB : lower standings requirement from ruler to marshal
##diplomacy end+
(str_store_troop_name, s11, ":troop_no"),
],
"{!}{s11}.", "dplmc_constable_status_lord_info",
[
(store_repeat_object, "$diplomacy_var"),
]],

[anyone|plyr, "dplmc_constable_status_lord_select",
[],
"Never mind.", "dplmc_constable_reports_ask",
[]],

[anyone, "dplmc_constable_status_lord_info",
    [
    (assign, ":selected_troop", "$diplomacy_var"),
    (str_store_troop_name, s60, ":selected_troop"),


    (call_script, "script_update_troop_location_notes", ":selected_troop", 1),
    (call_script, "script_get_information_about_troops_position", ":selected_troop", 0),

    (assign, ":party_size", 0),
    (troop_get_slot, ":selected_party", ":selected_troop", slot_troop_leaded_party),
    (str_store_string, s52, "str_empty_string"),
    (party_get_num_companion_stacks, ":num_stacks", ":selected_party"),

    (le, ":num_stacks", 20),

    (try_for_range, ":i_stack", 1, ":num_stacks"),
      (party_stack_get_troop_id, ":stack_troop", ":selected_party", ":i_stack"),
      (party_stack_get_size, ":stack_size", ":selected_party", ":i_stack"),
      (val_add, ":party_size", ":stack_size"),
      (assign, reg2, ":stack_size"),
      (str_store_troop_name, s53, ":stack_troop"),
      (str_store_string, s52, "@{!}{s52} {reg2} {s53}."),
    (try_end),

    (assign, reg2, ":party_size"),
    ## SB : update legacy dialogue with gender strings
    (call_script, "script_dplmc_store_troop_is_female", ":selected_troop"),
    (str_store_string, s51, "@{reg0?She:He} fields {reg2} soldiers."),
    ],
    "{!}{s1} {s51} {s52}", "dplmc_constable_lord", []],

  [anyone, "dplmc_constable_status_lord_info", [
    (assign, ":selected_troop", "$diplomacy_var"),
    (str_store_troop_name, s60, ":selected_troop"),


    (call_script, "script_update_troop_location_notes", ":selected_troop", 1),
    (call_script, "script_get_information_about_troops_position", ":selected_troop", 0),

    (assign, ":party_size", 0),
    (troop_get_slot, ":selected_party", ":selected_troop", slot_troop_leaded_party),
    (str_store_string, s52, "str_empty_string"),
    (party_get_num_companion_stacks, ":num_stacks", ":selected_party"),

    (try_for_range, ":i_stack", 1, ":num_stacks"),
      (party_stack_get_troop_id, ":stack_troop", ":selected_party", ":i_stack"),
      (party_stack_get_size, ":stack_size", ":selected_party", ":i_stack"),
      (val_add, ":party_size", ":stack_size"),
      (try_begin),
        (le, ":i_stack", 20),
        (assign, reg2, ":stack_size"),
        (str_store_troop_name, s53, ":stack_troop"),
        (str_store_string, s52, "@{!}{s52} {reg2} {s53}."),
      (try_end),
    (try_end),

    (assign, reg2, ":party_size"),
    ## SB : update legacy dialogue with gender strings
    (call_script, "script_dplmc_store_troop_is_female", ":selected_troop"),
    (str_store_string, s51, "@{reg0?She:He} fields {reg2} soldiers."),
  ],
"{!}{s1} {s51} {s52}", "dplmc_constable_status_lord_info_6",
[]],

[anyone, "dplmc_constable_status_lord_info_6",
[
(assign, ":selected_troop", "$diplomacy_var"),
(str_store_troop_name, s60, ":selected_troop"),

(assign, ":party_size", 0),
(troop_get_slot, ":selected_party", ":selected_troop", slot_troop_leaded_party),
(str_store_string, s52, "str_empty_string"),
(party_get_num_companion_stacks, ":num_stacks", ":selected_party"),

(try_for_range, ":i_stack", 20, ":num_stacks"),
(party_stack_get_troop_id, ":stack_troop", ":selected_party", ":i_stack"),
(party_stack_get_size, ":stack_size", ":selected_party", ":i_stack"),
(val_add, ":party_size", ":stack_size"),
(assign, reg2, ":stack_size"),
(str_store_troop_name, s53, ":stack_troop"),
(str_store_string, s52, "@{!}{s52} {reg2} {s53}."),
(try_end),

(assign, reg2, ":party_size"),
],
"{!}{s52}", "dplmc_constable_lord",
[]],


#SB : grammar fixes
##garrison status
[anyone|plyr, "dplmc_constable_reports",
[
(call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", "$g_encountered_party_faction"),
(ge, reg0, DPLMC_FACTION_STANDING_LORD), #SB : lower standings requirement, we assume the garrisons are public knowledge
],
"Please give me a status report on the garrison of a fief.", "dplmc_constable_status",
[]],

#SB : grammar fixes
[anyone, "dplmc_constable_status",
[],
"Which fief would you like to be informed about?", "dplmc_constable_status_select_fief",
[]],

[anyone|plyr|repeat_for_parties, "dplmc_constable_status_select_fief",
[
(store_repeat_object, ":party_no"),
(is_between, ":party_no", walled_centers_begin, walled_centers_end),
(store_faction_of_party, ":party_faction", ":party_no"),

##diplomacy start+ Handle player is co-ruler of faction
##OLD:
#(eq, ":party_faction", "fac_player_supporters_faction"),
##NEW:
#SB : fix order of operations
(call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", ":party_faction"),
(this_or_next|ge, reg0, DPLMC_FACTION_STANDING_LORD),
(party_slot_eq, ":party_no", slot_town_lord, "trp_player"),
##diplomacy end+
(str_store_party_name, s60, ":party_no"),
],
"{!}{s60}.", "dplmc_constable_status_info",
[
(store_repeat_object, "$diplomacy_var"),
]],

#SB : empty garrisons
[anyone, "dplmc_constable_status_info", [
    (party_get_num_companion_stacks, ":num_stacks", "$diplomacy_var"),
    (eq, ":num_stacks", 0),
  ], "We don't have any soldiers garrisoned there. Luckily the sight of our banner should scare any bandits away.", "dplmc_constable_status", 
  []],

[anyone, "dplmc_constable_status_info",
[
(assign, ":selected_party", "$diplomacy_var"),
(str_store_party_name, s60, ":selected_party"),

(assign, ":garrison_size", 0),

(str_store_string, s52, "str_empty_string"),
(party_get_num_companion_stacks, ":num_stacks", ":selected_party"),
(le, ":num_stacks", 20),

(party_get_num_companions, reg2, ":selected_party"),
(str_store_string, s52, "@We currently have {reg2} soldiers garrisoned in {s60}."),
(try_for_range, ":i_stack", 0, ":num_stacks"),
  (party_stack_get_troop_id, ":stack_troop", ":selected_party", ":i_stack"),
  (party_stack_get_size, ":stack_size", ":selected_party", ":i_stack"),
  (val_add, ":garrison_size", ":stack_size"),
  (assign, reg2, ":stack_size"),
  (str_store_troop_name_by_count, s53, ":stack_troop", reg2),
  (str_store_string, s52, "@{!}{s52} {reg2} {s53}."),
(try_end),

],
"{!}{s52}", "dplmc_constable_status",
[]],

[anyone, "dplmc_constable_status_info",
[
(assign, ":selected_party", "$diplomacy_var"),
(str_store_party_name, s60, ":selected_party"),

(party_get_num_companions, ":garrison_size", ":selected_party"),

#SB : restructure string
(assign, reg2, ":garrison_size"),
(str_store_string, s52, "@We currently have {reg2} soldiers garrisoned in {s60}."),
(party_get_num_companion_stacks, ":num_stacks", ":selected_party"),
(gt, ":num_stacks", 20),
(try_for_range, ":i_stack", 0, 20),
  (party_stack_get_troop_id, ":stack_troop", ":selected_party", ":i_stack"),
  (party_stack_get_size, ":stack_size", ":selected_party", ":i_stack"),
  (val_add, ":garrison_size", ":stack_size"),
  (assign, reg2, ":stack_size"),
  (str_store_troop_name_by_count, s53, ":stack_troop", reg2),
  (str_store_string, s52, "@{!}{s52} {reg2} {s53}."),
(try_end),
],
"{!}{s52}", "dplmc_constable_status_info_6",
[]],

[anyone, "dplmc_constable_status_info_6",
[
(assign, ":selected_party", "$diplomacy_var"),
(str_store_party_name, s60, ":selected_party"),

(str_store_string, s52, "str_empty_string"),
(party_get_num_companion_stacks, ":num_stacks", ":selected_party"),

(try_for_range, ":i_stack", 20, ":num_stacks"),
  (party_stack_get_troop_id, ":stack_troop", ":selected_party", ":i_stack"),
  (party_stack_get_size, ":stack_size", ":selected_party", ":i_stack"),
  (assign, reg2, ":stack_size"),
  (str_store_troop_name, s53, ":stack_troop"),
  (str_store_string, s52, "@{!}{s52} {reg2} {s53}."),
(try_end),

],
"{!}{s52}", "dplmc_constable_status",
[]],

[anyone|plyr, "dplmc_constable_status_select_fief",
[],
"Never mind.", "dplmc_constable_reports_ask",
[]],

[anyone|plyr, "dplmc_constable_reports",
[
],
"Thank you, that's all for now.", "dplmc_constable_pretalk",
[]],

##diplomacy start+
[anyone|plyr, "dplmc_constable_talk",
[],
"I would like to take a look at the armory.", "dplmc_constable_pretalk",
[(change_screen_loot, "trp_dplmc_constable"),]],
##diplomacy end+

[anyone|plyr, "dplmc_constable_talk",
[],
"Let's talk about recruits and training.", "dplmc_constable_recruits_and_training_ask",
[]],

[anyone, "dplmc_constable_recruits_and_training_ask",
[],
"Of course.", "dplmc_constable_recruits_and_training",
[]],

##train recruits
[anyone|plyr, "dplmc_constable_recruits_and_training",
[
(neg|is_between, "$g_constable_training_center", walled_centers_begin, walled_centers_end),
],
"Can you train some recruits, please?", "dplmc_constable_train_ask",
[]
],

[anyone, "dplmc_constable_train_ask",
[],
"Of course, where should I train them?", "dplmc_constable_train_select",
[]
],

[anyone|plyr|repeat_for_parties, "dplmc_constable_train_select",
[
(store_repeat_object, ":party_no"),
(this_or_next|party_slot_eq, ":party_no", slot_party_type, spt_town),
(party_slot_eq, ":party_no", slot_party_type, spt_castle),
(party_slot_eq, ":party_no", slot_town_lord, "trp_player"),
(str_store_party_name, s11, ":party_no"),
],
"{!}{s11}.", "dplmc_constable_train_type_ask",
[
(store_repeat_object, "$diplomacy_var"),
]
],

#SB : restructure dialogue
[anyone, "dplmc_constable_train_type_ask",
[
(str_store_party_name, s11, "$diplomacy_var"),
(assign, ":count", 0),
(try_for_range, ":grounds", training_grounds_begin, training_grounds_end),
  (store_distance_to_party_from_party, ":distance", ":grounds", "$diplomacy_var"),
  (lt, ":distance", 50),
  (val_add, ":count", 1),
(try_end),
(try_begin),
  (gt, ":count", 0),
  (assign, reg10, ":count"),
  (store_sub, reg11, reg10, 1),
  (str_store_string, s10, "@Since we are close to {reg11?{reg10} training centers:a training center}, you can talk to the trainers to get a bigger batch trained."),
(try_end),
],
"What type of units would you prefer me to train up in {s11}{s10}", "dplmc_constable_train_type",
[]
],

[anyone|plyr, "dplmc_constable_train_type",
[],
"Never mind.", "dplmc_constable_pretalk",
[]
],
#prompt iterates over all troop classes

[anyone|plyr|repeat_for_100, "dplmc_constable_train_type",
[(store_repeat_object, ":grc"),
(call_script, "script_cf_troop_class_activated", ":grc", "$diplomacy_var"),
(str_store_class_name, s1, ":grc"),
],
"{s1}.", "dplmc_constable_train_improved_ask",
[(store_repeat_object, "$g_constable_training_type"),]
],
# [anyone|plyr, "dplmc_constable_train_type",
# [],
# "Melee.", "dplmc_constable_train_improved_ask",
# [(assign, "$g_constable_training_type", 0),]
# ],

# [anyone|plyr, "dplmc_constable_train_type",
# [],
# "Ranged.", "dplmc_constable_train_improved_ask",
# [(assign, "$g_constable_training_type", 1),]
# ],

#cannot add trainers if policy is low quality
[anyone|auto_proceed, "dplmc_constable_train_improved_ask",
[(neg|faction_slot_ge, "$players_kingdom", dplmc_slot_faction_quality, 0)],
"If you want I can hire additional trainers so we can train the recruits faster and better. This will cost {reg10} denars extra per day.", "dplmc_constable_train_center",
[(assign, "$g_constable_training_improved", 0), #SB : salary reg
(assign, reg10, dplmc_trainers_cost),
]
],

#SB : otherwise give player choice of tiers, raising cost slightly
[anyone, "dplmc_constable_train_improved_ask",
[],
"If you want I can hire additional trainers so we can train the recruits better. This will cost {reg10} denars extra per day for every tier of training.", "dplmc_constable_train_improved",
[ #SB : salary reg
(assign, reg10, dplmc_trainers_cost),
]
],

[anyone|plyr, "dplmc_constable_train_improved",
[(faction_slot_ge, "$players_kingdom", dplmc_slot_faction_quality, 0),
(str_store_string, s1, "str_dplmc_mediocre_quality"),],
"We'll be fine with trainers of {s1}.", "dplmc_constable_train_center",
[(assign, "$g_constable_training_improved", 1),]
],

[anyone|plyr, "dplmc_constable_train_improved",
[(faction_slot_ge, "$players_kingdom", dplmc_slot_faction_quality, 1),
(str_store_string, s1, "str_dplmc_good_quality"),],
"Yes, please hire trainers of {s1}.", "dplmc_constable_train_center",
[(assign, "$g_constable_training_improved", 2),]
],

[anyone|plyr, "dplmc_constable_train_improved",
[(faction_slot_ge, "$players_kingdom", dplmc_slot_faction_quality, 2),
(str_store_string, s1, "str_dplmc_great_quality"),],
"I think we deserve {s1} trainer.", "dplmc_constable_train_center",
[(assign, "$g_constable_training_improved", 3),]
],

[anyone|plyr, "dplmc_constable_train_improved",
[(faction_slot_ge, "$players_kingdom", dplmc_slot_faction_quality, 3),
(str_store_string, s1, "str_dplmc_very_quality"),],
"Go all the way, we need a {s1} trainer.", "dplmc_constable_train_center",
[(assign, "$g_constable_training_improved", 4),]
],

[anyone|plyr, "dplmc_constable_train_improved",
[],
"No, you'll have to train them alone.", "dplmc_constable_train_center",
[(assign, "$g_constable_training_improved", 0),]
],

[anyone, "dplmc_constable_train_center",
[
(str_store_party_name, s11, "$diplomacy_var"),
(try_begin), #SB : obvious string storage
  (is_between, "$g_constable_training_type", grc_infantry, grc_everyone),
  (str_store_class_name, s12, "$g_constable_training_type"),
  (str_store_string, s12, "@, preferring {s12} units."),
(else_try),
  (str_clear, s12),
(try_end),

(str_clear, s13),
(try_begin),
  (ge, "$g_constable_training_improved", 1),
  (store_add, ":string", "str_dplmc_good_quantity", "$g_constable_training_improved"), #Off by one
  (str_store_string, s13, ":string"),
  #SB : add actual level threshold
  (store_mul, reg13, "$g_constable_training_improved", 2),
  (val_add, reg13, 7),
  (str_store_string, s13, "@ and the additional trainers of {s13}, allowing level {reg13} troops to be promoted"),
(try_end),
],
#SB : prompt to describe order of training (first stack trickle down) + training grounds bonus
"Alright, I will train the first bunch of recruits I see in {s11}{s12}. Please, make sure we have enough money in the treasury to pay for equipment{s13}. We will be able to train more troops if a training ground is nearby.", "dplmc_constable_pretalk",
[(assign, "$g_constable_training_center", "$diplomacy_var"),]
],

[anyone|plyr, "dplmc_constable_train_select",
[],
"I changed my mind, maybe you shouldn't train them.", "dplmc_constable_pretalk",
[]
],

[anyone|plyr, "dplmc_constable_recruits_and_training",
[
(is_between, "$g_constable_training_center", walled_centers_begin, walled_centers_end),
(str_store_party_name, s11, "$g_constable_training_center"),

],
"Please stop training the recruits in {s11}.", "dplmc_constable_train_stop",
[]
],

[anyone, "dplmc_constable_train_stop",
[
(is_between, "$g_constable_training_center", walled_centers_begin, walled_centers_end),

],
"As you wish.", "dplmc_constable_pretalk",
[(assign, "$g_constable_training_center", -1),]
],

[anyone|plyr, "dplmc_constable_recruits_and_training",
[
],
"I want to recruit new soldiers.", "dplmc_constable_recruit",
[]],

[anyone, "dplmc_constable_recruit",
[
(le, "$g_player_chamberlain", 0),
],
"We need a treasury to recruit new soldiers. You have to appoint a chamberlain first.", "dplmc_constable_pretalk",
[]],

[anyone, "dplmc_constable_recruit",
[
(gt, "$g_player_chamberlain", 0),
(assign, ":recruiter_amount", 0),

(try_begin),
  (party_slot_eq, "$current_town", slot_party_type, spt_town),
  (assign, ":max_recruiters", 4),
  (assign, reg0, 1),
(else_try),
  (assign, ":max_recruiters", 2),
  (assign, reg0, 0),
(try_end),

(try_for_parties, ":party_no"),
  (party_slot_eq,":party_no", slot_party_type, dplmc_spt_recruiter),
  (party_slot_eq, ":party_no", dplmc_slot_party_recruiter_origin, "$current_town"),
  (val_add, ":recruiter_amount", 1),
(try_end),

(ge, ":recruiter_amount", ":max_recruiters"),
],
"You have already hired the maximum amount of {reg0?4:2} recruiters from this {reg0?town:castle}.", "dplmc_constable_pretalk",
[]],


[anyone, "dplmc_constable_recruit",
[
(gt, "$g_player_chamberlain", 0),
(assign, ":recruiter_amount", 0),

(try_begin),
  (party_slot_eq, "$current_town", slot_party_type, spt_town),
  (assign, ":max_recruiters", 4),
(else_try),
  (assign, ":max_recruiters", 2),
(try_end),

(try_for_parties, ":party_no"),
  (party_slot_eq, ":party_no", slot_party_type, dplmc_spt_recruiter),
  (party_slot_eq, ":party_no", dplmc_slot_party_recruiter_origin, "$current_town"),
  (val_add, ":recruiter_amount", 1),
(try_end),

(lt, ":recruiter_amount", ":max_recruiters"),
],
#SB : puts to put, other grammatical fixes
"If you want, I will send someone to visit nearby villages and enlist their population to our forces. \
After he has recruited the amount you ordered he returns to this {reg0?town:castle} and put the recruits in the garrison. \
There's a limit for concurrent recruiters, which is 2 for castles and 4 for towns. \
What kind of recruits do you want?", "dplmc_constable_recruit_select",
[]],

[anyone|plyr|repeat_for_factions, "dplmc_constable_recruit_select",
[
(store_repeat_object, ":faction_no"),
(is_between, ":faction_no", npc_kingdoms_begin, npc_kingdoms_end),
# (store_sub, ":offset", ":faction_no", "fac_kingdom_1"),
# (val_add, ":offset", "str_kingdom_1_adjective"),
(faction_get_slot, ":offset", ":faction_no", slot_faction_adjective),
(str_store_string, s11, ":offset"),
],
"{s11}.", "dplmc_constable_recruit_amount",
[
(store_repeat_object, ":faction_no"),
(assign, "$diplomacy_var2", ":faction_no"),
]],

[anyone, "dplmc_constable_recruit_amount",
[
#SB : salary register
],
"You have to pay {reg10} denars for each recruit and {reg11} denars for the recruiter. I will take the money from the treasury. How many recruits are you willing to pay for?", "dplmc_constable_recruit_amount_select",
[
(assign, reg10, dplmc_recruits_cost),
(assign, reg11, dplmc_recruiter_salary),
(store_troop_gold, "$temp", "trp_household_possessions"),
]],

#SB : changed "none" to a better response
[anyone|plyr,"dplmc_constable_recruit_amount_select",
[],
"I can enlist them myself.", "dplmc_constable_pretalk",[
]],

#SB : use consts instead of hardcoded checks
[anyone|plyr|repeat_for_100,"dplmc_constable_recruit_amount_select",
[
(store_repeat_object, ":value"),
(store_mod, ":mod", ":value", 10),
(neq, ":value", 0), #first option is a "nevermind"
(eq, ":mod", 0), #multiples of 10
(assign, reg12, ":value"),
#check if affordable
(val_mul, ":value", dplmc_recruits_cost),
(val_add, ":value", dplmc_recruiter_salary),
(le, ":value", "$temp"),
],
"{reg12}.", "dplmc_constable_recruit_confirm_ask",[
(store_repeat_object, "$diplomacy_var"),
]],
# [anyone|plyr,"dplmc_constable_recruit_amount_select",
# [(store_troop_gold,":gold","trp_household_possessions"), (ge,":gold",110),],
# "5.", "dplmc_constable_recruit_confirm_ask",[

# (assign, "$diplomacy_var", 5),
# ]],

# [anyone|plyr,"dplmc_constable_recruit_amount_select",
# [(store_troop_gold,":gold","trp_household_possessions"), (ge,":gold",210),],
# "10.", "dplmc_constable_recruit_confirm_ask",[
# (assign, "$diplomacy_var", 10),
# ]],

# [anyone|plyr,"dplmc_constable_recruit_amount_select",
# [(store_troop_gold,":gold","trp_household_possessions"), (ge,":gold",410),],
# "20.", "dplmc_constable_recruit_confirm_ask",[
# (assign, "$diplomacy_var", 20),
# ]],

# [anyone|plyr,"dplmc_constable_recruit_amount_select",
# [(store_troop_gold,":gold","trp_household_possessions"), (ge,":gold",610),],
# "30.", "dplmc_constable_recruit_confirm_ask",[
# (assign, "$diplomacy_var", 30),
# ]],

# [anyone|plyr,"dplmc_constable_recruit_amount_select",
# [(store_troop_gold,":gold","trp_household_possessions"), (ge,":gold",810),],
# "40.", "dplmc_constable_recruit_confirm_ask",[
# (assign, "$diplomacy_var", 40),
# ]],

# [anyone|plyr,"dplmc_constable_recruit_amount_select",
# [(store_troop_gold,":gold","trp_household_possessions"), (ge,":gold",1110),],
# "50.", "dplmc_constable_recruit_confirm_ask",[
# (assign, "$diplomacy_var", 50),
# ]],

#SB : why was this marked as anyone|plyr?
[anyone,"dplmc_constable_recruit_confirm_ask",
[
(assign, reg11, "$diplomacy_var"),
(store_mul, reg12, "$diplomacy_var", dplmc_recruits_cost),
(val_add, reg12, dplmc_recruiter_salary),
# (str_store_string, s6, "@{!}{reg2}"),
# (faction_get_slot, ":offset", "$diplomacy_var2", slot_faction_adjective),
# (store_sub, ":offset", "$diplomacy_var2", "fac_kingdom_1"),
# (val_add, ":offset", "str_kingdom_1_adjective"),
# (str_store_string, s11, ":offset"),
#SB : use actual recruit troop names
(try_begin),
  (faction_get_slot, ":recruit_troop", "$diplomacy_var2", slot_faction_tier_1_troop),
  (is_between, ":recruit_troop", soldiers_begin, soldiers_end),
  (str_store_troop_name_by_count, s11, ":recruit_troop", reg11),
(else_try),
  (faction_get_slot, ":offset", "$diplomacy_var2", slot_faction_adjective),
  (str_store_string, s11, ":offset"),
  (str_store_string, s11, "@{s11} peasants"),
(try_end),
],
"Do you really want to recruit {reg11} {s11}? This will cost us {reg12} denars in total.", "dplmc_constable_recruit_confirm",[
]],

[anyone|plyr,"dplmc_constable_recruit_confirm",
[],
"Yes.", "dplmc_constable_pretalk",[
(call_script, "script_dplmc_send_recruiter", "$diplomacy_var", "$diplomacy_var2"),
]],

[anyone|plyr,"dplmc_constable_recruit_confirm",
[],
"No.", "dplmc_constable_pretalk",[
]],

#SB : change gender ratio
[anyone|plyr, "dplmc_constable_recruits_and_training",
[
  (ge, "$g_disable_condescending_comments", 4),
  (call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", "$players_kingdom"),
  (ge, reg0, DPLMC_FACTION_STANDING_LEADER),  
],
"I want to focus on the gender balance of our troops.", "dplmc_constable_gender_ratio",
[]],

[anyone, "dplmc_constable_gender_ratio",
[],
#SB : add small blurb
"Very well. Currently, for every 100 men we field, we will also have {reg10} women fighting alongside them. How would you like to redistribute our recruiting efforts?", "dplmc_constable_gender_ratio_select",
[
  (faction_get_slot, "$diplomacy_var", "fac_player_supporters_faction", slot_faction_gender_ratio),
  (assign, reg10, "$diplomacy_var"),
]],

[anyone|plyr, "dplmc_constable_gender_ratio_select",
[
  (gt, "$diplomacy_var", 0),
],
"Lower.", "dplmc_constable_gender_ratio",
[
  (val_sub, "$diplomacy_var", 10),
  (faction_set_slot, "fac_player_supporters_faction", slot_faction_gender_ratio, "$diplomacy_var"),
]],

[anyone|plyr, "dplmc_constable_gender_ratio_select",
[
  (lt, "$diplomacy_var", 1000), #ceiling I guess
],
"Higher.", "dplmc_constable_gender_ratio",
[
  (val_add, "$diplomacy_var", 10),
  (faction_set_slot, "fac_player_supporters_faction", slot_faction_gender_ratio, "$diplomacy_var"),
]],

[anyone|plyr, "dplmc_constable_gender_ratio_select",
[
  (neg|faction_slot_eq, "fac_player_supporters_faction", slot_faction_gender_ratio, 100),
],
"Equal.", "dplmc_constable_gender_ratio",
[
  (faction_set_slot, "fac_player_supporters_faction", slot_faction_gender_ratio, 100),
]],

[anyone|plyr, "dplmc_constable_gender_ratio_select",
[
],
"I think we're fine now.", "dplmc_constable_pretalk",
[]],

[anyone|plyr, "dplmc_constable_talk",
[
],
"Let's talk about patrols and troop movement.", "dplmc_constable_security_ask",
[]],

[anyone|plyr, "dplmc_constable_recruits_and_training",
[
],
"I changed my mind.", "dplmc_constable_pretalk",
[]
],

##talk about security
[anyone|plyr, "dplmc_constable_talk",
[
],
"Let's talk about patrols and troop movement.", "dplmc_constable_security_ask",
[]],

[anyone, "dplmc_constable_security_ask",
[
],
"Of course.", "dplmc_constable_security",
[]],

##move tropps
[anyone|plyr, "dplmc_constable_security",
[],
"I want to move troops to another location.", "dplmc_constable_move_troops",
[
(party_clear, "p_temp_party"),
(assign, "$g_move_heroes", 1),
(call_script, "script_party_add_party", "p_temp_party", "p_main_party"),
(party_clear, "p_main_party"),
(party_remove_members, "p_main_party", "trp_player", 1),

(change_screen_exchange_members, 1),
]],

[anyone, "dplmc_constable_move_troops",
[
],
"Where do you want to move the troops?", "dplmc_constable_move_troops_location",
[]],

[anyone|plyr|repeat_for_parties, "dplmc_constable_move_troops_location",
[
(store_repeat_object, ":party_no"),
(is_between, ":party_no", towns_begin, castles_end),
(neq, ":party_no", "$current_town"),
(store_faction_of_party, ":party_faction", ":party_no"),
(eq, ":party_faction", "$players_kingdom"),
(str_store_party_name, s11, ":party_no"),
],
"{!}{s11}.", "dplmc_constable_move_troops_location_confirm_ask",
[
(store_repeat_object, "$diplomacy_var"),
(party_clear, "p_temp_party_2"),
(try_begin),
(store_party_size, ":party_size", "p_main_party"),
(gt, ":party_size", 0),
(call_script, "script_party_add_party","p_temp_party_2", "p_main_party"),
(party_clear, "p_main_party"),
(party_stack_get_troop_id, ":troop_id", "p_main_party", 0),

(try_begin),
  (ge, ":troop_id", 0),
  (party_stack_get_size, ":troop_size", "p_main_party", 0),
  (party_remove_members, "p_main_party",":troop_id",":troop_size"),
(try_end),
(party_stack_get_troop_id, ":troop_id", "p_main_party", 1),
(try_begin),
  (ge, ":troop_id", 0),
  (party_stack_get_size, ":troop_size", "p_main_party", 1),
  (party_remove_members, "p_main_party",":troop_id",":troop_size"),
(try_end),
(try_end),

(call_script, "script_party_add_party", "p_main_party", "p_temp_party"),
(assign, "$g_move_heroes", 0),
]],

[anyone|plyr, "dplmc_constable_move_troops_location",
[],
"Nowhere.", "dplmc_constable_pretalk",
[
(party_clear, "p_temp_party_2"),
(try_begin),
(store_party_size, ":party_size", "p_main_party"),
(gt, ":party_size", 0),
(call_script, "script_party_add_party","p_temp_party_2", "p_main_party"),
(party_clear, "p_main_party"),
(party_stack_get_troop_id, ":troop_id", "p_main_party", 0),

(try_begin),
  (ge, ":troop_id", 0),
  (party_stack_get_size, ":troop_size", "p_main_party", 0),
  (party_remove_members, "p_main_party",":troop_id",":troop_size"),
(try_end),
(party_stack_get_troop_id, ":troop_id", "p_main_party", 1),
(try_begin),
  (ge, ":troop_id", 0),
  (party_stack_get_size, ":troop_size", "p_main_party", 1),
  (party_remove_members, "p_main_party",":troop_id",":troop_size"),
(try_end),
(try_end),

(call_script, "script_party_add_party", "p_main_party", "p_temp_party"),
(assign, "$g_move_heroes", 0),

#reset town party
(call_script, "script_party_add_party", "$current_town", "p_temp_party_2"),
(party_clear, "p_temp_party_2"),
]],

[anyone, "dplmc_constable_move_troops_location_confirm_ask",
[
(store_party_size, ":party_size", "p_temp_party_2"),

  (assign, ":prisoner_size", 0),
  (party_get_num_prisoner_stacks, ":num_prisoner_stacks","p_temp_party_2"),
  (try_for_range_backwards, ":stack_no", 0, ":num_prisoner_stacks"),
    (party_prisoner_stack_get_size, ":stack_size","p_temp_party_2",":stack_no"),
    (val_add, ":prisoner_size", ":stack_size"),
  (try_end),

  (le, ":party_size", ":prisoner_size"),

],
"You didn't choose any soldiers. Seems like you changed your mind.", "dplmc_constable_pretalk",
[]],

[anyone, "dplmc_constable_move_troops_location_confirm_ask",
[
(str_store_party_name, s9, "$diplomacy_var"),
(store_party_size, ":party_size", "p_temp_party_2"),
(store_mul, reg5, ":party_size", 5),
(assign, "$diplomacy_var2", reg5), #SB : global
],
"Do you really want to send the troops to {s9}? This will cost us {reg5} denars.", "dplmc_constable_move_troops_location_confirm",
[]],

[anyone|plyr, "dplmc_constable_move_troops_location_confirm",
[
(store_troop_gold, ":player_wealth", "trp_household_possessions"),
(ge, ":player_wealth", "$diplomacy_var2"), #SB : global
],
"Yes.", "dplmc_constable_pretalk",
[
(call_script, "script_dplmc_withdraw_from_treasury", "$diplomacy_var2"), #SB : global
(call_script, "script_dplmc_move_troops_party", "$current_town", "$diplomacy_var", "p_temp_party_2", "fac_player_faction"),
(party_clear, "p_temp_party_2"),
]
],

[anyone|plyr, "dplmc_constable_move_troops_location_confirm",
[],
"No. Let me check if we can afford that.", "dplmc_constable_pretalk",
[
(call_script, "script_party_add_party", "$current_town", "p_temp_party_2"),
(party_clear, "p_temp_party_2"),
]],

##send patrol
[anyone|plyr, "dplmc_constable_security",
[],
"I want to enlist a patrol.", "dplmc_constable_patrol_size_ask",
[]],

[anyone, "dplmc_constable_patrol_size_ask",
[
(store_current_hours, ":current_hours"),
(val_sub, ":current_hours", 24 * 7),
(faction_get_slot, ":policy_time", "fac_player_faction", dplmc_slot_faction_patrol_time),
(ge, ":current_hours", ":policy_time"),
],
"You can take troops from your garrison or enlist fresh troops. In the latter case you can enlist a small patrol for 1000 denars, a medium patrol for 2000 denars or a big patrol for 3000 denars. You can also enlist a small elite patrol for 2000 denars. We have to pay weekly wages for the soldiers so make sure you have enough money in the treasury.", "dplmc_constable_patrol_size",
[]],


[anyone, "dplmc_constable_patrol_size_ask",
[

(store_current_hours, ":current_hours"),
(val_sub, ":current_hours", 24 * 7),
(faction_get_slot, ":policy_time", "fac_player_faction", dplmc_slot_faction_patrol_time),
(store_sub, ":wait_hours" , ":policy_time", ":current_hours"),
(store_div, ":wait_days", ":wait_hours", 24),
(store_mod, ":wait_mod", ":wait_hours", 24),
(try_begin),
(lt, ":wait_mod", 0),
(val_add, ":wait_days", 1),
(try_end),
(assign, reg0, ":wait_days"),

#SB : don't give wrong prompt
(store_party_size_wo_prisoners, reg1, "$current_town"),
# (le, ":garrison_size", 0),
],
"Currently there are no fresh troops available. We have to wait {reg0} days. {reg1?But you can take troops from your garrison:We do not have any troops ready in the garrison either}.", "dplmc_constable_patrol_size",
[]],

[anyone|plyr, "dplmc_constable_patrol_size",
[
#SB : condition here
(store_party_size_wo_prisoners, ":garrison_size", "$current_town"), #zerilius changes
(gt, ":garrison_size", 0), #zerilius changes
],
"Take troops out of the garrison.", "dplmc_constable_patrol_garrison",
[
#SB : moved conditions up
# (store_party_size_wo_prisoners, ":garrison_size", "$current_town"), #zerilius changes
# (gt, ":garrison_size", 0), #zerilius changes
(party_clear, "p_temp_party"),
(assign, "$g_move_heroes", 1),
(call_script, "script_party_add_party", "p_temp_party", "p_main_party"),
(party_clear, "p_main_party"),
(party_remove_members, "p_main_party", "trp_player", 1),

(change_screen_exchange_members, 1),
]],

#zerilius changes begin
# [anyone, "dplmc_constable_patrol_garrison",
# [
 # (store_party_size_wo_prisoners, ":garrison_size", "$current_town"),
 # (le, ":garrison_size", 0),
# ],
# "We do not have any troops in the garrison.", "dplmc_constable_patrol_size",
# []],

[anyone, "dplmc_constable_patrol_garrison",
[],
"My {lord/lady}, lets muster the patrol troops.", "dplmc_constable_patrol_garrison_2",
[]],

[anyone, "dplmc_constable_patrol_garrison_2",
[
 (store_party_size_wo_prisoners, ":garrison_size", "p_main_party"),
 (le, ":garrison_size", 0),
 (party_add_members, "p_main_party", "trp_swadian_militia", 1), #zerilius included otherwise gives errors
],
"You didn't choose any soldiers. Seems like you changed your mind.", "dplmc_constable_pretalk",
[
(party_remove_members, "p_main_party", "trp_swadian_militia", 1),
(call_script, "script_party_add_party", "p_main_party", "p_temp_party"),
(assign, "$g_move_heroes", 0),
]],
#zerilius changes end

[anyone, "dplmc_constable_patrol_garrison_2",
[
],
"Where do you want to send the patrol?", "dplmc_constable_patrol_garrison_location",
[]],

[anyone|plyr|repeat_for_parties, "dplmc_constable_patrol_garrison_location",
[
(store_repeat_object, ":party_no"),
(is_between, ":party_no", centers_begin, centers_end),
(store_faction_of_party, ":party_faction", ":party_no"),
(eq, ":party_faction", "$players_kingdom"),
(str_store_party_name, s11, ":party_no"),
],
"{!}{s11}.", "dplmc_constable_patrol_garrison_confirm_ask",
[
(store_repeat_object, "$diplomacy_var"),
(party_clear, "p_temp_party_2"),
(call_script, "script_party_add_party","p_temp_party_2", "p_main_party"),
(party_clear, "p_main_party"),
(party_stack_get_troop_id, ":troop_id", "p_main_party", 0),
(try_begin),
  (ge, ":troop_id", 0),
  (party_stack_get_size, ":troop_size", "p_main_party", 0),
  (party_remove_members, "p_main_party",":troop_id",":troop_size"),
(try_end),
(party_stack_get_troop_id, ":troop_id", "p_main_party", 1),
(try_begin),
  (ge, ":troop_id", 0),
  (party_stack_get_size, ":troop_size", "p_main_party", 1),
  (party_remove_members, "p_main_party",":troop_id",":troop_size"),
(try_end),

(call_script, "script_party_add_party", "p_main_party", "p_temp_party"),
(assign, "$g_move_heroes", 0),
]],


[anyone, "dplmc_constable_patrol_garrison_confirm_ask",
[
  (store_party_size, ":party_size", "p_temp_party_2"),

  (assign, ":prisoner_size", 0),
  (party_get_num_prisoner_stacks, ":num_prisoner_stacks","p_temp_party_2"),
  (try_for_range_backwards, ":stack_no", 0, ":num_prisoner_stacks"),
    (party_prisoner_stack_get_size, ":stack_size","p_temp_party_2",":stack_no"),
    (val_add, ":prisoner_size", ":stack_size"),
  (try_end),

  (le, ":party_size", ":prisoner_size"),

],
"You didn't choose any soldiers. Seems like you changed your mind.", "dplmc_constable_pretalk",
[]],



[anyone, "dplmc_constable_patrol_garrison_confirm_ask",
[
(str_store_party_name, s9, "$diplomacy_var"),
],
"Do you really want to send the patrol to {s9}?", "dplmc_constable_patrol_garrison_confirm",
[]],

[anyone|plyr, "dplmc_constable_patrol_garrison_confirm",
[],
"Yes.", "dplmc_constable_pretalk",
[
(call_script, "script_dplmc_send_patrol_party", "$current_town", "$diplomacy_var", "p_temp_party_2", "$players_kingdom", "trp_player"),
(party_clear, "p_temp_party_2"),
]
],

[anyone|plyr, "dplmc_constable_patrol_garrison_confirm",
[],
"No.", "dplmc_constable_pretalk",
[
(call_script, "script_party_add_party", "$current_town", "p_temp_party_2"),
(party_clear, "p_temp_party_2"),
]],

[anyone|plyr, "dplmc_constable_patrol_size",
[
(store_current_hours, ":current_hours"),
(val_sub, ":current_hours", 24 * 7),
(faction_get_slot, ":policy_time", "fac_player_faction", dplmc_slot_faction_patrol_time),
(ge, ":current_hours", ":policy_time"),

(store_troop_gold,":gold","trp_household_possessions"),
(ge,":gold",1000),
],
"A small one.", "dplmc_constable_patrol_location_ask",
[
(assign, "$temp", 0),
]],

[anyone|plyr, "dplmc_constable_patrol_size",
[
(store_current_hours, ":current_hours"),
(val_sub, ":current_hours", 24 * 7),
(faction_get_slot, ":policy_time", "fac_player_faction", dplmc_slot_faction_patrol_time),
(ge, ":current_hours", ":policy_time"),

(store_troop_gold,":gold","trp_household_possessions"),
(ge,":gold",2000),
],
"A medium one.", "dplmc_constable_patrol_location_ask",
[
(assign, "$temp", 1),
]],

[anyone|plyr, "dplmc_constable_patrol_size",
[
(store_current_hours, ":current_hours"),
(val_sub, ":current_hours", 24 * 7),
(faction_get_slot, ":policy_time", "fac_player_faction", dplmc_slot_faction_patrol_time),
(ge, ":current_hours", ":policy_time"),

(store_troop_gold,":gold","trp_household_possessions"),
(ge,":gold",3000),
],
"A big one.", "dplmc_constable_patrol_location_ask",
[
(assign, "$temp", 2),
]],

[anyone|plyr, "dplmc_constable_patrol_size",
[
(store_current_hours, ":current_hours"),
(val_sub, ":current_hours", 24 * 7),
(faction_get_slot, ":policy_time", "fac_player_faction", dplmc_slot_faction_patrol_time),
(ge, ":current_hours", ":policy_time"),

(store_troop_gold,":gold","trp_household_possessions"),
(ge,":gold",2000),
],
"Get the best troops around.", "dplmc_constable_patrol_location_ask",
[
(assign, "$temp", 3),
]],

[anyone|plyr, "dplmc_constable_patrol_size",
[],
"None.", "dplmc_constable_pretalk",
[]],

[anyone, "dplmc_constable_patrol_location_ask",
[],
"Where do you want to send the patrol?", "dplmc_constable_patrol_location",
[]],

[anyone|plyr|repeat_for_parties, "dplmc_constable_patrol_location",
[
(store_repeat_object, ":party_no"),
(is_between, ":party_no", centers_begin, centers_end),
(store_faction_of_party, ":party_faction", ":party_no"),
(eq, ":party_faction", "$players_kingdom"),
(str_store_party_name, s11, ":party_no"),
],
"{!}{s11}.", "dplmc_constable_patrol_confirm_ask",
[
(store_repeat_object, "$diplomacy_var"),
]
],

[anyone|plyr, "dplmc_constable_patrol_location",
[],
"Nowhere.", "dplmc_constable_pretalk",
[]],

[anyone, "dplmc_constable_patrol_confirm_ask",
[
(store_add, ":size", "str_dplmc_small", "$temp"),
(str_store_string, s8, ":size"),
(str_store_party_name, s9, "$diplomacy_var"),
],
"Do you really want to send a {s8} patrol to {s9}?", "dplmc_constable_patrol_confirm",
[]],

[anyone|plyr, "dplmc_constable_patrol_confirm",
[],
"Yes.", "dplmc_constable_pretalk",
[
(store_current_hours, ":current_hours"),
(faction_set_slot, "fac_player_faction", dplmc_slot_faction_patrol_time, ":current_hours"),
(call_script, "script_dplmc_send_patrol", "$current_town", "$diplomacy_var", "$temp", "$players_kingdom", "trp_player"),
]
],

[anyone|plyr, "dplmc_constable_patrol_confirm",
[],
"No.", "dplmc_constable_pretalk",
[]],

##change patrol target
[anyone|plyr, "dplmc_constable_security",
[],
"I want to change the target of a patrol.", "dplmc_constable_patrol_change_ask",
[]],

[anyone, "dplmc_constable_patrol_change_ask",
[],
"Which patrol should change the target?", "dplmc_constable_patrol_change",
[]],

[anyone|plyr|repeat_for_parties, "dplmc_constable_patrol_change",
[
(store_repeat_object, ":party_no"),
(party_slot_eq,":party_no", slot_party_type, spt_patrol),
(party_slot_eq, ":party_no", dplmc_slot_party_mission_diplomacy, "trp_player"),
(str_store_party_name, s11, ":party_no"),
],
"{!}{s11}.", "dplmc_constable_patrol_change_target_ask",
[
(store_repeat_object, "$diplomacy_var"),
]],

[anyone|plyr, "dplmc_constable_patrol_change",
[],
"None.", "dplmc_constable_security_ask",
[]],

[anyone, "dplmc_constable_patrol_change_target_ask",
[],
"Where do you want to send it?", "dplmc_constable_patrol_change_target",
[]],

[anyone|plyr|repeat_for_parties, "dplmc_constable_patrol_change_target",
[
(store_repeat_object, ":party_no"),
(is_between, ":party_no", centers_begin, centers_end),
(store_faction_of_party, ":party_faction", ":party_no"),
(eq, ":party_faction", "$players_kingdom"),
(str_store_party_name, s11, ":party_no"),
],
"{!}{s11}.", "dplmc_constable_patrol_change_target_confirm_ask",
[
(store_repeat_object, "$temp"),
]
],

[anyone|plyr, "dplmc_constable_patrol_change_target",
[],
"Nowhere.", "dplmc_constable_security_ask",
[]],

[anyone, "dplmc_constable_patrol_change_target_confirm_ask",
[
(str_store_party_name, s5, "$diplomacy_var"),
(str_store_party_name, s6, "$temp"),
],
"As you wish, I will send a messenger carrying the orders to patrol {s6} to the {s5}.", "dplmc_constable_patrol_change_target_confirm",
[]],

[anyone|plyr, "dplmc_constable_patrol_change_target_confirm",
[],
"Thank you.", "dplmc_constable_security_ask",
[
(call_script, "script_dplmc_send_messenger_to_party", "$diplomacy_var", spai_patrolling_around_center, "$temp"),
]],

[anyone|plyr, "dplmc_constable_patrol_change_target_confirm",
[],
"Oh maybe not.", "dplmc_constable_security_ask",
[]],

##move patrol to center
[anyone|plyr, "dplmc_constable_security",
[],
"I want a patrol to return to a center.", "dplmc_constable_patrol_to_center_ask",
[]],

[anyone, "dplmc_constable_patrol_to_center_ask",
[],
"Which patrol should move to a center?", "dplmc_constable_patrol_to_center",
[]],

[anyone|plyr|repeat_for_parties, "dplmc_constable_patrol_to_center",
[
(store_repeat_object, ":party_no"),
(party_slot_eq,":party_no", slot_party_type, spt_patrol),
(party_slot_eq, ":party_no", dplmc_slot_party_mission_diplomacy, "trp_player"),
(str_store_party_name, s11, ":party_no"),
],
"{!}{s11}.", "dplmc_constable_patrol_to_center_target_ask",
[
(store_repeat_object, "$diplomacy_var"),
]],

[anyone|plyr, "dplmc_constable_patrol_to_center",
[],
"None.", "dplmc_constable_security_ask",
[]],

[anyone, "dplmc_constable_patrol_to_center_target_ask",
[],
"Where do you want to send it?", "dplmc_constable_patrol_to_center_target",
[]],

[anyone|plyr|repeat_for_parties, "dplmc_constable_patrol_to_center_target",
[
(store_repeat_object, ":party_no"),
(is_between, ":party_no", centers_begin, centers_end),
(store_faction_of_party, ":party_faction", ":party_no"),
(eq, ":party_faction", "$players_kingdom"),
(str_store_party_name, s11, ":party_no"),
],
"{!}{s11}.", "dplmc_constable_patrol_change_to_center_confirm_ask",
[
(store_repeat_object, "$temp"),
]
],

[anyone|plyr, "dplmc_constable_patrol_to_center_target",
[],
"Nowhere.", "dplmc_constable_security_ask",
[]],

[anyone, "dplmc_constable_patrol_change_to_center_confirm_ask",
[
(str_store_party_name, s5, "$diplomacy_var"),
(str_store_party_name, s6, "$temp"),
],
"As you wish, I will send a messenger carrying the orders to move to {s6} to the {s5}.", "dplmc_constable_patrol_to_center_confirm",
[]],

[anyone|plyr, "dplmc_constable_patrol_to_center_confirm",
[],
"Thank you.", "dplmc_constable_security_ask",
[
(call_script, "script_dplmc_send_messenger_to_party", "$diplomacy_var", spai_retreating_to_center, "$temp"),
]],

[anyone|plyr, "dplmc_constable_patrol_to_center_confirm",
[],
"Oh maybe not.", "dplmc_constable_security_ask",
[]],

##disband patrol
[anyone|plyr, "dplmc_constable_security",
[],
"I want to disband a patrol.", "dplmc_constable_patrol_disband_ask",
[]],

[anyone, "dplmc_constable_patrol_disband_ask",
[],
"Which patrol do you want to disband?", "dplmc_constable_patrol_disband",
[]],

[anyone|plyr|repeat_for_parties, "dplmc_constable_patrol_disband",
[
(store_repeat_object, ":party_no"),
(party_slot_eq,":party_no", slot_party_type, spt_patrol),
(party_slot_eq, ":party_no", dplmc_slot_party_mission_diplomacy, "trp_player"),
(str_store_party_name, s11, ":party_no"),
],
"{!}{s11}.", "dplmc_constable_patrol_disband_confirm_ask",
[
(store_repeat_object, "$diplomacy_var"),
]],

[anyone|plyr, "dplmc_constable_patrol_disband",
[],
"None.", "dplmc_constable_pretalk",
[]],

[anyone, "dplmc_constable_patrol_disband_confirm_ask",
[
(str_store_party_name, s5, "$diplomacy_var"),
],
"As you wish, I will send a messenger who will tell {s5} to disband.", "dplmc_constable_patrol_disband_confirm",
[]],

[anyone|plyr, "dplmc_constable_patrol_disband_confirm",
[],
"Thank you.", "dplmc_constable_security_ask",
[
##diplomacy start+
#fix for the disbanding bug, credit Caba`drin
#OLD:
#(call_script, "script_dplmc_send_messenger_to_party", "$diplomacy_var", spai_retreating_to_center, -1),
#NEW:
(call_script, "script_dplmc_send_messenger_to_party", "$diplomacy_var", spai_undefined, -1),
##diplomacy end+
]],

[anyone|plyr, "dplmc_constable_patrol_disband_confirm",
[],
"No.", "dplmc_constable_security_ask",
[]],

[anyone|plyr, "dplmc_constable_security",
[],
"Nevermind.", "dplmc_constable_pretalk",
[]],

##prisoner
[anyone|plyr,"dplmc_constable_talk",
[(store_num_regular_prisoners,":prisoners", "p_main_party"),(ge,":prisoners",1)],
"I have some prisoners -- can you sell them for me?", "dplmc_constable_prisoner",[]],

##SB : convenience feature of selling prisoners in garrison
[anyone|plyr,"dplmc_constable_talk",
[(store_num_regular_prisoners,":prisoners", "$current_town"),(ge,":prisoners",1)],
"We have prisoners in the dungeon -- let's have a look over them.", "dplmc_constable_garrison_prisoner_manage",[
#move prisoner
(party_clear, "p_temp_party"),
(assign, "$g_move_heroes", 1),
(call_script, "script_party_prisoners_add_party_prisoners", "p_temp_party", "p_main_party"),
(call_script, "script_party_remove_all_prisoners", "p_main_party"),
#mark global variable here to allow player to hold all the prisoners
(party_get_num_prisoners, "$diplomacy_var2", "$current_town"),
(assign, "$diplomacy_var", DPLMC_CURRENT_VERSION_CODE),
(call_script, "script_party_prisoners_add_party_prisoners", "p_main_party", "$current_town"),
(assign, "$g_move_heroes", 0),
]],

[anyone,"dplmc_constable_garrison_prisoner_manage", [
(call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),
(party_get_num_prisoners, ":num_prisoners", "p_main_party"),
(store_num_regular_prisoners,reg0, "p_main_party"), #does this skip over heroes?
(store_sub, reg1, ":num_prisoners", reg0),
],
"Of course, {s0}. There are {reg0} prisoners left{reg1? and {reg1} nobles incarcerated:}.", "dplmc_constable_garrison_prisoner_sell",
[(change_screen_trade_prisoners)]],

[anyone|plyr,"dplmc_constable_garrison_prisoner_sell", [
# (call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),
(party_get_num_prisoners, ":num_prisoners", "p_main_party"),
(gt, ":num_prisoners", 0),
],
"Let's keep selling.", "dplmc_constable_garrison_prisoner_manage",
[(change_screen_trade_prisoners)]],

[anyone|plyr,"dplmc_constable_garrison_prisoner_sell", [],
"We're done here.", "dplmc_constable_garrison_prisoner_done",
[
#unset variables
(assign, "$diplomacy_var", 0),
(assign, "$diplomacy_var2", 0),
]],

[anyone,"dplmc_constable_garrison_prisoner_done", [
],
"Hopefully they'll get some honest labor done instead of languishing in the dungeon.", "dplmc_constable_pretalk",

[
(assign, "$g_move_heroes", 1),
#move remaining prisoners back to garrison
(call_script, "script_party_remove_all_prisoners", "$current_town"),
(call_script, "script_party_prisoners_add_party_prisoners", "$current_town", "p_main_party"),
#restore player's prisoner
(call_script, "script_party_remove_all_prisoners", "p_main_party"),
(call_script, "script_party_prisoners_add_party_prisoners", "p_main_party", "p_temp_party"),
(assign, "$g_move_heroes", 0),
]],

[anyone,"dplmc_constable_prisoner", [
#SB : replaced Sire
(call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),
],
"At once, {s0}.", "dplmc_constable_pretalk",
[(change_screen_trade_prisoners)]],

##dismiss constable
[anyone|plyr, "dplmc_constable_talk",
[
],
"You are dismissed.", "dplmc_constable_dismiss_confirm_ask",
[]],

#SB : add blurb about secondary inventory
[anyone, "dplmc_constable_dismiss_confirm_ask",
[
(troop_get_inventory_capacity, ":cap", "$g_talk_troop"),
(try_for_range, ":slots", ek_food + 1, ":cap"),
  (troop_get_inventory_slot, ":item_no", "$g_talk_troop", ":slots"),
  (gt, ":item_no", 0), #item found
  (neq, ":item_no", "itm_dplmc_coat_of_plates_red_constable"), #item found
  (neq, ":item_no", "itm_leather_boots"), #item found
  (assign, ":cap", -1), #break
(try_end),
(eq, ":cap", -1),
],
"If that's what you wish, {s0}. I still have some gear you entrusted me with, so I would be remiss in my duty if you sent me packing without seeing to the care of those items first.", "dplmc_constable_dismiss_inventory",
[(call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),]],

[anyone, "dplmc_constable_dismiss_confirm_ask", [], "Are you sure you no longer require my services?", "dplmc_constable_dismiss_confirm", []],


[anyone|plyr, "dplmc_constable_dismiss_inventory",
[(store_free_inventory_capacity, ":capacity"),
 (gt, ":capacity", 0),
],
"Well, let me take a look...", "dplmc_constable_dismiss_confirm_ask",
[(change_screen_loot, "$g_talk_troop")]],
[anyone|plyr, "dplmc_constable_dismiss_inventory", [], "On second thought, I still need you at your post.", "dplmc_constable_pretalk",[]],

[anyone|plyr, "dplmc_constable_dismiss_confirm", [], "Yes I am.", "dplmc_constable_dismiss_confirm_yes",[]],
[anyone|plyr, "dplmc_constable_dismiss_confirm", [], "No I am not.", "dplmc_constable_pretalk",[]],

[anyone, "dplmc_constable_dismiss_confirm_yes",
[
],
"As you wish.", "close_window",
[
(assign, "$g_player_constable", -1),
(assign, "$g_constable_training_center", -1),
]],
#SB : add outro after dismissal
[trp_dplmc_constable, "start",
[
  (eq, "$talk_context", tc_court_talk),
  (neq, "$g_player_constable", "$g_talk_troop")
],
"I'll miss my place at your side, {playername}. May your blades stay sharp and your arrows fly true.", "close_window", []],



[anyone|plyr,"dplmc_constable_talk",
[],
"Thank you, I will come back to you later.", "close_window",[
]],



#SB : sire -> subordinate script
[anyone,"start",
[
(eq, "$g_player_chamberlain","$g_talk_troop"),

],
"Yes, {s0}?", "dplmc_chamberlain_talk",[
  (call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),
]],

[anyone,"dplmc_chamberlain_pretalk",
[],
"Anything else, {s0}?", "dplmc_chamberlain_talk", [
  (call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),
]],


[anyone|plyr, "dplmc_chamberlain_talk",
[
],
"Please give me a report about financial affairs.", "dplmc_chamberlain_overview",
[]],

[anyone, "dplmc_chamberlain_overview",
[
(assign, ":income", 0),
(assign, ":total_wage", 0),
(assign, ":num_owned_center_values_for_tax_efficiency", 0),
(try_for_range, ":selected_party", centers_begin, centers_end),
  (party_slot_eq, ":selected_party", slot_town_lord, "trp_player"),

  (val_add, ":num_owned_center_values_for_tax_efficiency", 1),

  (party_get_slot, ":accumulated_rents", ":selected_party", slot_center_accumulated_rents),
  (val_add, ":income", ":accumulated_rents"),

  (str_clear, s60),
  (try_begin),
    (this_or_next|party_slot_eq, ":selected_party", slot_party_type, spt_town),
    (party_slot_eq, ":selected_party", slot_party_type, spt_castle),
    (party_get_num_companion_stacks, ":num_stacks", ":selected_party"),

    (assign, ":troop_size", 0),
    (party_get_num_companion_stacks, ":num_stacks", ":selected_party"),
    (try_for_range, ":i_stack", 0, ":num_stacks"),
      (party_stack_get_troop_id, ":stack_troop", ":selected_party", ":i_stack"),
      (party_stack_get_size, ":stack_size", ":selected_party", ":i_stack"),
      (val_add, ":troop_size", ":stack_size"),
      (call_script, "script_game_get_troop_wage", ":stack_troop", ":selected_party"),
      (assign, ":cur_wage", reg0),
      (val_mul, ":cur_wage", ":stack_size"),
      (val_add, ":total_wage", ":cur_wage"),
    (try_end),

    (try_begin),
      (party_slot_eq, ":selected_party", slot_party_type, spt_town),

      (val_add, ":num_owned_center_values_for_tax_efficiency", 1),
      (party_get_slot, ":accumulated_tariffs", ":selected_party", slot_center_accumulated_tariffs),
      # (assign, reg0, ":accumulated_tariffs"),
      (val_add, ":income", ":accumulated_tariffs"),
    (try_end),
  (try_end),
(try_end),
(val_div, ":total_wage", 2), #Half payment for garrisons
(assign, reg0, ":income"),
(assign, reg1, ":total_wage"),
#SB : garrion -> garrisons
(str_store_string, s6, "@We currently have an income of {reg0} denars and costs of {reg1} denars from our fiefs and garrisons."),

(try_begin),
  (call_script, "script_cf_dplmc_calculate_tax_inefficiency", ":num_owned_center_values_for_tax_efficiency", ":income", -1),
  (gt, reg0, 0),
  (assign, ":tax_lost", reg0),
  (str_store_string, s6, "@{s6} We are losing {reg0} denars due to tax inefficiency. That means {reg1} percent."),
(try_end),

(assign, ":overall", ":income"),
(val_sub, ":overall", ":total_wage"),
(val_sub, ":overall", ":tax_lost"),
(assign, reg0, ":overall"),
(str_store_string, s6, "@{s6} Overall this sums up to {reg0} denars."),
],
"{!}{s6}", "dplmc_chamberlain_pretalk",
[]],

[anyone|plyr, "dplmc_chamberlain_talk",
[
],
"Let us inspect the treasury.", "dplmc_chamberlain_treasury",
[]],

[anyone, "dplmc_chamberlain_treasury",
[
(store_troop_gold, ":treasury", "trp_household_possessions"),
(call_script, "script_game_get_money_text", ":treasury"),
(str_store_string, s4, s1),
(try_begin), #SB : add up more debt globals
  (store_add, ":debt", "$g_player_debt_to_party_members", "$debt_to_merchants_guild"),
  (assign, ":lord_debt", 0),
  (try_for_range, ":troop_no", heroes_begin, heroes_end),
    (this_or_next|is_between, ":troop_no", active_npcs_begin, active_npcs_end),
    (troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_hero),
    (troop_get_slot, ":cur_debt", ":troop_no", slot_troop_player_debt),#Increasing debt
    (lt, ":cur_debt", dplmc_ransom_debt_mask), #qst_rescue_prisoner does not accumulate
    (val_add, ":lord_debt", ":cur_debt"),
  (try_end),
  (troop_set_slot, "trp_kingdom_heroes_including_player_begin", slot_troop_player_debt, ":lord_debt"),
  (val_add, ":debt", ":lord_debt"),
  (gt, ":debt", 0),
  (call_script, "script_game_get_money_text", ":debt"),
  (str_store_string, s6, s1),
(else_try),
  
  (str_store_string, s6, "@no outstanding amount"),
(try_end),
], #SB : use money string
"There are currently {s4} in the treasury and we have {s6} of debt. What do you want to do?", "dplmc_chamberlain_treasury_action",
[]],

# [anyone|plyr, "dplmc_chamberlain_treasury_action",
# [
  # (this_or_next|gt, "$g_player_debt_to_party_members", 0),
  # (this_or_next|gt, "$debt_to_merchants_guild", 0),
  # (troop_slot_ge, "trp_kingdom_heroes_including_player_begin", slot_troop_player_debt, 1),
# ],
# "I would like to pay my debts.", "dplmc_chamberlain_treasury_action_pay_debt",
# []], #TODO add branches for these

[anyone|plyr, "dplmc_chamberlain_treasury_action",
[
],
"I would like to pay into the treasury.", "dplmc_chamberlain_treasury_action_pay",
[]],

[anyone, "dplmc_chamberlain_treasury_action_pay",
[
(store_troop_gold, ":treasury", "trp_household_possessions"),
(call_script, "script_game_get_money_text", ":treasury"), #SB : script call
],
"We currently have {s1} in the treasury. How much money do you like to pay into the treasury, Sire?", "dplmc_chamberlain_treasury_action_pay_select",
[]],

[anyone|plyr, "dplmc_chamberlain_treasury_action_pay_select",
[
(store_troop_gold, ":gold", "trp_player"),
(ge, ":gold", 100),
],
"100.", "dplmc_chamberlain_treasury_action_pay",
[
(troop_remove_gold, "trp_player", 100),
(call_script, "script_dplmc_pay_into_treasury", 100),
]],

[anyone|plyr, "dplmc_chamberlain_treasury_action_pay_select",
[
(store_troop_gold, ":gold", "trp_player"),
(ge, ":gold", 200),
],
"200.", "dplmc_chamberlain_treasury_action_pay",
[
(troop_remove_gold, "trp_player", 200),
(call_script, "script_dplmc_pay_into_treasury", 200),
]],

[anyone|plyr, "dplmc_chamberlain_treasury_action_pay_select",
[
(store_troop_gold, ":gold", "trp_player"),
(ge, ":gold", 500),
],
"500.", "dplmc_chamberlain_treasury_action_pay",
[
(troop_remove_gold, "trp_player", 500),
(call_script, "script_dplmc_pay_into_treasury", 500),
]],

[anyone|plyr, "dplmc_chamberlain_treasury_action_pay_select",
[
(store_troop_gold, ":gold", "trp_player"),
(ge, ":gold", 1000),
],
"1000.", "dplmc_chamberlain_treasury_action_pay",
[
(troop_remove_gold, "trp_player", 1000),
(call_script, "script_dplmc_pay_into_treasury", 1000),
]],

[anyone|plyr, "dplmc_chamberlain_treasury_action_pay_select",
[
(store_troop_gold, ":gold", "trp_player"),
(ge, ":gold", 2000),
],
"2000.", "dplmc_chamberlain_treasury_action_pay",
[
(troop_remove_gold, "trp_player", 2000),
(call_script, "script_dplmc_pay_into_treasury", 2000),
]],

[anyone|plyr, "dplmc_chamberlain_treasury_action_pay_select",
[
(store_troop_gold, ":gold", "trp_player"),
(ge, ":gold", 5000),
],
"5000.", "dplmc_chamberlain_treasury_action_pay",
[
(troop_remove_gold, "trp_player", 5000),
(call_script, "script_dplmc_pay_into_treasury", 5000),
]],

[anyone|plyr, "dplmc_chamberlain_treasury_action_pay_select",
[
(store_troop_gold, ":gold", "trp_player"),
(ge, ":gold", 10000),
],
"10000.", "dplmc_chamberlain_treasury_action_pay",
[
(troop_remove_gold, "trp_player", 10000),
(call_script, "script_dplmc_pay_into_treasury", 10000),
]],

[anyone|plyr, "dplmc_chamberlain_treasury_action_pay_select",
[],
"Never mind.", "dplmc_chamberlain_pretalk",
[]],

[anyone|plyr, "dplmc_chamberlain_treasury_action",
[
],
"I would like to withdraw money from the treasury.", "dplmc_chamberlain_treasury_action_withdraw",
[]],

[anyone, "dplmc_chamberlain_treasury_action_withdraw",
[
(store_troop_gold, ":treasury", "trp_household_possessions"),
(assign, reg0, ":treasury"),
(str_store_string, s4, "@{!}{reg0}"),
],
"We currently have {s4} denars in the treasury. How much money do you like to withdraw from the treasury, Sire?", "dplmc_chamberlain_treasury_action_withdraw_select",
[]],

[anyone|plyr, "dplmc_chamberlain_treasury_action_withdraw_select",
[
(store_troop_gold, ":gold", "trp_household_possessions"),
(ge, ":gold", 100),
],
"100.", "dplmc_chamberlain_treasury_action_withdraw",
[
(call_script, "script_dplmc_withdraw_from_treasury", 100),
(troop_add_gold, "trp_player", 100),
]],


[anyone|plyr, "dplmc_chamberlain_treasury_action_withdraw_select",
[
(store_troop_gold, ":gold", "trp_household_possessions"),
(ge, ":gold", 200),
],
"200.", "dplmc_chamberlain_treasury_action_withdraw",
[
(call_script, "script_dplmc_withdraw_from_treasury", 200),
(troop_add_gold, "trp_player", 200),
]],

[anyone|plyr, "dplmc_chamberlain_treasury_action_withdraw_select",
[
(store_troop_gold, ":gold", "trp_household_possessions"),
(ge, ":gold", 500),
],
"500.", "dplmc_chamberlain_treasury_action_withdraw",
[
(call_script, "script_dplmc_withdraw_from_treasury", 500),
(troop_add_gold, "trp_player", 500),
]],

[anyone|plyr, "dplmc_chamberlain_treasury_action_withdraw_select",
[
(store_troop_gold, ":gold", "trp_household_possessions"),
(ge, ":gold", 1000),
],
"1000.", "dplmc_chamberlain_treasury_action_withdraw",
[
(call_script, "script_dplmc_withdraw_from_treasury", 1000),
(troop_add_gold, "trp_player", 1000),
]],

[anyone|plyr, "dplmc_chamberlain_treasury_action_withdraw_select",
[
(store_troop_gold, ":gold", "trp_household_possessions"),
(ge, ":gold", 2000),
],
"2000.", "dplmc_chamberlain_treasury_action_withdraw",
[
(call_script, "script_dplmc_withdraw_from_treasury", 2000),
(troop_add_gold, "trp_player", 2000),
]],

[anyone|plyr, "dplmc_chamberlain_treasury_action_withdraw_select",
[
(store_troop_gold, ":gold", "trp_household_possessions"),
(ge, ":gold", 5000),
],
"5000.", "dplmc_chamberlain_treasury_action_withdraw",
[
(call_script, "script_dplmc_withdraw_from_treasury", 5000),
(troop_add_gold, "trp_player", 5000),
]],

[anyone|plyr, "dplmc_chamberlain_treasury_action_withdraw_select",
[
(store_troop_gold, ":gold", "trp_household_possessions"),
(ge, ":gold", 10000),
],
"10000.", "dplmc_chamberlain_treasury_action_withdraw",
[
(call_script, "script_dplmc_withdraw_from_treasury", 10000),
(troop_add_gold, "trp_player", 10000),
]],

[anyone|plyr, "dplmc_chamberlain_treasury_action_withdraw_select",
[],
"Never mind.", "dplmc_chamberlain_pretalk",
[]],

[anyone|plyr, "dplmc_chamberlain_treasury_action",
[
],
"Thank you, let's talk about something else.", "dplmc_chamberlain_pretalk",
[]],


[anyone|plyr, "dplmc_chamberlain_talk",
[
],
"Please give me a status report about the financial situation of a fief.", "dplmc_chamberlain_status",
[]],

[anyone, "dplmc_chamberlain_status",
[], #SB : Rephrase prompt
"Which fief would you like a report on?", "dplmc_chamberlain_status_select_fief",
[]],

[anyone|plyr|repeat_for_parties, "dplmc_chamberlain_status_select_fief",
[
(store_repeat_object, ":party_no"),
(is_between, ":party_no", centers_begin, centers_end),
(party_slot_eq, ":party_no", slot_town_lord, "trp_player"),
(str_store_party_name, s60, ":party_no"),
],
"{!}{s60}", "dplmc_chamberlain_status_info",
[
(store_repeat_object, "$diplomacy_var"),
]],

[anyone|plyr, "dplmc_chamberlain_status_select_fief",
[],
"Never mind.", "dplmc_chamberlain_pretalk",
[]],

[anyone, "dplmc_chamberlain_status_info",
[
(assign, ":selected_party", "$diplomacy_var"),
(str_store_party_name, s60, ":selected_party"),
(try_begin),
  (party_slot_ge, ":selected_party", slot_village_infested_by_bandits, 1),
  (str_store_string, s51, "@{s60} is currently occupied by outlaws you should counter them as soon as possible."),
(else_try),
(party_get_slot, ":relation", ":selected_party", slot_center_player_relation),
(call_script, "script_describe_center_relation_to_s3", ":relation"),
(party_get_slot, ":tax_rate", ":selected_party", dplmc_slot_center_taxation),
(call_script, "script_dplmc_describe_tax_rate_to_s50", ":tax_rate"),

(party_get_slot, ":accumulated_rents", ":selected_party", slot_center_accumulated_rents),
(assign, reg0, ":accumulated_rents"),
(str_store_string, s61, "@ We are expecting {reg0} denars for rents"),

(assign, ":overall", ":accumulated_rents"),
(assign, ":total_wage", 0),
(str_clear, s59),
(try_begin),
  (this_or_next|party_slot_eq, ":selected_party", slot_party_type, spt_town),
  (party_slot_eq, ":selected_party", slot_party_type, spt_castle),
  (party_get_num_companion_stacks, ":num_stacks", ":selected_party"),

  (assign, ":troop_size", 0),
  (party_get_num_companion_stacks, ":num_stacks", ":selected_party"),
  (try_for_range, ":i_stack", 0, ":num_stacks"),
    (party_stack_get_troop_id, ":stack_troop", ":selected_party", ":i_stack"),
    (party_stack_get_size, ":stack_size", ":selected_party", ":i_stack"),
    (val_add, ":troop_size", ":stack_size"),
    (call_script, "script_game_get_troop_wage", ":stack_troop", ":selected_party"),
    (assign, ":cur_wage", reg0),
    (val_mul, ":cur_wage", ":stack_size"),
    (val_add, ":total_wage", ":cur_wage"),
  (try_end),
  (val_div, ":total_wage", 2), #Half payment for garrisons
  (assign, reg0, ":troop_size"),
  (assign, reg1, ":total_wage"),
  (str_store_string, s59, "@ The troop wages for {reg0} troops cost us {reg1} denars."),


  (try_begin),
    (party_slot_eq, ":selected_party", slot_party_type, spt_town),
    (party_get_slot, ":accumulated_tariffs", ":selected_party", slot_center_accumulated_tariffs),
    (assign, reg0, ":accumulated_tariffs"),
    (str_store_string, s61, "@{s61} and {reg0} denars for tariffs"),
    (val_add, ":overall", ":accumulated_tariffs"),
  (try_end),
(try_end),

(try_begin),
  (this_or_next|is_between, ":selected_party", villages_begin, villages_end),
  (is_between, ":selected_party", towns_begin, towns_end),
  (call_script, "script_dplmc_describe_prosperity_to_s4", ":selected_party"),
(else_try),
  (str_store_string, s4, "@Well, {s60}."),
(try_end),

(val_sub, ":overall", ":total_wage"),
(call_script, "script_game_get_money_text", ":overall"),
# (assign, reg0, ":overall"),
# (str_store_string, s62, "@{!}{reg0}"),

#SB : use game denars
(str_store_string, s51, "@{s4} {s3}. The tax rate is {s50}.{s59}{s61}. Overall this sums up to {s1}."),
(try_end),
],
"{!}{s51}", "dplmc_chamberlain_status",
[]],

##set taxes
[anyone|plyr, "dplmc_chamberlain_talk",
[
],
"I wish to change the tax rate for a fief.", "dplmc_chamberlain_tax",
[]],

[anyone, "dplmc_chamberlain_tax",
[
],
"For which fief?", "dplmc_chamberlain_tax_select_center",
[]],

[anyone|plyr|repeat_for_parties, "dplmc_chamberlain_tax_select_center",
[
(store_repeat_object, ":center_no"),
(this_or_next|is_between, ":center_no", towns_begin, towns_end),
(is_between, ":center_no", villages_begin, villages_end),
(party_slot_eq, ":center_no", slot_town_lord, "trp_player"),
(store_faction_of_party, ":center_faction", ":center_no"),
(this_or_next|eq, ":center_faction", "fac_player_supporters_faction"),
(eq, ":center_faction", "$players_kingdom"),
(str_store_party_name, s6, ":center_no"),
(try_begin), #SB : preview tax rate
  (party_get_slot, ":tax_rate", ":center_no", dplmc_slot_center_taxation),
  (neq, ":tax_rate", 0),
  (call_script, "script_dplmc_describe_tax_rate_to_s50", ":tax_rate"),
  (str_store_string, s6, "@{s6} ({s50})"),
(try_end),
],
"{!}{s6}", "dplmc_chamberlain_tax_ask_rate",
[
(store_repeat_object, "$diplomacy_var"),
]],

[anyone|plyr, "dplmc_chamberlain_tax_select_center",
[
],
"Never mind.", "dplmc_chamberlain_pretalk",
[]],

[anyone, "dplmc_chamberlain_tax_ask_rate",
[
(str_store_party_name, s6, "$diplomacy_var"),
],
#SB : add small blurb
"How high do you want to set the tax rate for {s6}? The people are likely to grumble while they toil under a high tax regime, while they might become more accepting towards us or even prosper under a more forgiving hand.", "dplmc_chamberlain_tax_select_rate",
[
]],

[anyone|plyr, "dplmc_chamberlain_tax_select_rate",
[
(neg|party_slot_eq, "$diplomacy_var", dplmc_slot_center_taxation, -50),
],
"Very low.", "dplmc_chamberlain_tax_ask_confirm",
[
(str_store_string, s11, "str_dplmc_tax_very_low"),
(assign, "$diplomacy_tax_rate", -50),
]],

[anyone|plyr, "dplmc_chamberlain_tax_select_rate",
[
(neg|party_slot_eq, "$diplomacy_var", dplmc_slot_center_taxation, -25),
],
"Low.", "dplmc_chamberlain_tax_ask_confirm",
[
(str_store_string, s11, "str_dplmc_tax_low"),
(assign, "$diplomacy_tax_rate", -25),
]],

[anyone|plyr, "dplmc_chamberlain_tax_select_rate",
[
(neg|party_slot_eq, "$diplomacy_var", dplmc_slot_center_taxation, 0),
],
"Normal.", "dplmc_chamberlain_tax_ask_confirm",
[
(str_store_string, s11, "str_dplmc_tax_normal"),
(assign, "$diplomacy_tax_rate", 0),
]],

[anyone|plyr, "dplmc_chamberlain_tax_select_rate",
[
(neg|party_slot_eq, "$diplomacy_var", dplmc_slot_center_taxation, 25),
],
"High.", "dplmc_chamberlain_tax_ask_confirm",
[
(str_store_string, s11, "str_dplmc_tax_high"),
(assign, "$diplomacy_tax_rate", 25),
]],

[anyone|plyr, "dplmc_chamberlain_tax_select_rate",
[
(neg|party_slot_eq, "$diplomacy_var", dplmc_slot_center_taxation, 50),
],
"Very High.", "dplmc_chamberlain_tax_ask_confirm",
[
(str_store_string, s11, "str_dplmc_tax_very_high"),
(assign, "$diplomacy_tax_rate", 50),
]],

[anyone|plyr, "dplmc_chamberlain_tax_select_rate",
[
],
"Never mind.", "dplmc_chamberlain_pretalk",
[]],

[anyone, "dplmc_chamberlain_tax_ask_confirm",
[
],
"Do you really want to set the tax rate for {s6} to {s11}?", "dplmc_chamberlain_tax_confirm",
[]],

[anyone|plyr, "dplmc_chamberlain_tax_confirm",
[
],
"Yes.", "dplmc_chamberlain_pretalk",
[
(party_set_slot, "$diplomacy_var", dplmc_slot_center_taxation, "$diplomacy_tax_rate"),
(display_message, "@Tax rate for {s6}: {s11}"),
]],

[anyone|plyr, "dplmc_chamberlain_tax_confirm",
[
],
"No I changed, my mind.", "dplmc_chamberlain_pretalk",
[
]],

##buildings
[anyone|plyr, "dplmc_chamberlain_talk",
[
],
"I would like to manage fief improvements.", "dplmc_chamberlain_manage_fiefs",
[]],

[anyone, "dplmc_chamberlain_manage_fiefs",
[
(assign, ":fief_count", 0),
(assign, ":center_count", 0),
(assign, ":num_improvements", 0),
(try_for_parties, ":center_no"),
(this_or_next|is_between, ":center_no", towns_begin, towns_end),
(is_between, ":center_no", villages_begin, villages_end),
(party_slot_eq, ":center_no", slot_town_lord, "trp_player"),
(store_faction_of_party, ":center_faction", ":center_no"),
(this_or_next|eq, ":center_faction", "fac_player_supporters_faction"),
(eq, ":center_faction", "$players_kingdom"),

(val_add, ":fief_count", 1),

(try_begin),
  (party_slot_eq, ":center_no", slot_party_type, spt_village),
  (assign, ":begin", village_improvements_begin),
  (assign, ":end", village_improvements_end),
(else_try),
  (party_slot_eq, ":center_no", slot_party_type, spt_town),
  (assign, ":begin", walled_center_improvements_begin),
  (assign, ":end", walled_center_improvements_end),
(try_end),

(assign, ":has_building", 0),
(try_for_range, ":improvement_no", ":begin", ":end"),
  (party_slot_ge, ":center_no", ":improvement_no", 1),
  (val_add,  ":num_improvements", 1),
  (assign, ":has_building", 1),
(try_end),

(val_add, ":center_count", ":has_building"),

(try_end),

(assign, reg0, ":num_improvements"),
(assign, reg1, ":center_count"),
(assign, reg2, ":fief_count"),

],
"We are currently have {reg0} improvements in {reg1} of your {reg2} fiefs. Do you want to build another one?", "dplmc_chamberlain_manage_fiefs_options",
[]],

[anyone|plyr, "dplmc_chamberlain_manage_fiefs_options",
[
],
"Yes, I want to build an improvement.", "dplmc_chamberlain_manage_fiefs_build",
[]],

[anyone|plyr, "dplmc_chamberlain_manage_fiefs_options",
[
],
"No.", "dplmc_chamberlain_pretalk",
[]],

[anyone, "dplmc_chamberlain_manage_fiefs_build",
[
],
"Where do you want to build an improvement?", "dplmc_chamberlain_manage_fiefs_build_location",
[]],

[anyone|plyr|repeat_for_parties, "dplmc_chamberlain_manage_fiefs_build_location",
[
(store_repeat_object, ":center_no"),
(is_between, ":center_no", centers_begin, centers_end),
(party_slot_eq, ":center_no", slot_town_lord, "trp_player"),
(store_faction_of_party, ":center_faction", ":center_no"),
(this_or_next|eq, ":center_faction", "fac_player_supporters_faction"),
(eq, ":center_faction", "$players_kingdom"),

(assign, ":improvement_possible", 0),
(try_begin),
(party_slot_eq, ":center_no", slot_party_type, spt_village),
(assign, ":begin", village_improvements_begin),
(assign, ":end", village_improvements_end),
(else_try),
(assign, ":begin", walled_center_improvements_begin),
(assign, ":end", walled_center_improvements_end),
(try_end),

(try_for_range, ":improvement_no", ":begin", ":end"),
(party_slot_eq, ":center_no", ":improvement_no", 0),
(assign, ":improvement_possible", 1),
(try_end),
(eq, ":improvement_possible", 1),

(str_store_party_name, s2, ":center_no"),

],
"{s2}.", "dplmc_chamberlain_manage_fiefs_build_ask",
[
(store_repeat_object, "$diplomacy_var"),
]],

[anyone|plyr, "dplmc_chamberlain_manage_fiefs_build_location",
[
],
"Nowhere.", "dplmc_chamberlain_pretalk",
[]],

[anyone, "dplmc_chamberlain_manage_fiefs_build_ask",
[

(try_begin),
 (party_slot_eq, "$diplomacy_var", slot_party_type, spt_village),
 (assign, ":begin", village_improvements_begin),
 (assign, ":end", village_improvements_end),
 (str_store_string, s17, "@village"),
(else_try),
 (assign, ":begin", walled_center_improvements_begin),
 (assign, ":end", walled_center_improvements_end),
 (party_slot_eq, "$diplomacy_var", slot_party_type, spt_town),
 (str_store_string, s17, "@town"),
(else_try),
 (str_store_string, s17, "@castle"),
(try_end),

(assign, ":num_improvements", 0),
(try_for_range, ":improvement_no", ":begin", ":end"),
 (party_slot_ge, "$diplomacy_var", ":improvement_no", 1),
 (val_add,  ":num_improvements", 1),
 (call_script, "script_get_improvement_details", ":improvement_no"),
 (try_begin),
   (eq,  ":num_improvements", 1),
   (str_store_string, s18, "@{!}{s0}"),
 (else_try),
   (str_store_string, s18, "@{!}{s18}, {s0}"),
 (try_end),
(try_end),

(try_begin),
 (eq,  ":num_improvements", 0),
 (str_store_string, s19, "@The {s17} has no improvements."),
(else_try),
 (str_store_string, s19, "@The {s17} has the following improvements: {s18}."),
(try_end),

(party_get_slot, ":cur_improvement", "$diplomacy_var", slot_center_current_improvement),
(gt, ":cur_improvement", 0),
(call_script, "script_get_improvement_details", ":cur_improvement"),
(str_store_string, s7, s0),
(assign, reg6, 1),
(store_current_hours, ":cur_hours"),
(party_get_slot, ":finish_time", "$diplomacy_var", slot_center_improvement_end_hour),
(val_sub, ":finish_time", ":cur_hours"),
(store_div, reg8, ":finish_time", 24),
(val_max, reg8, 1),
(store_sub, reg9, reg8, 1),

],
"{s19}  You are currently building {s7}. The building will be completed after {reg8} day{reg9?s:}. We have to wait until it's finished.", "dplmc_chamberlain_pretalk",
[]],

[anyone, "dplmc_chamberlain_manage_fiefs_build_ask",
[

(try_begin),
 (party_slot_eq, "$diplomacy_var", slot_party_type, spt_village),
 (assign, ":begin", village_improvements_begin),
 (assign, ":end", village_improvements_end),
 (str_store_string, s17, "@village"),
(else_try),
 (assign, ":begin", walled_center_improvements_begin),
 (assign, ":end", walled_center_improvements_end),
 (party_slot_eq, "$diplomacy_var", slot_party_type, spt_town),
 (str_store_string, s17, "@town"),
(else_try),
 (str_store_string, s17, "@castle"),
(try_end),

(assign, ":num_improvements", 0),
(try_for_range, ":improvement_no", ":begin", ":end"),
 (party_slot_ge, "$diplomacy_var", ":improvement_no", 1),
 (val_add,  ":num_improvements", 1),
 (call_script, "script_get_improvement_details", ":improvement_no"),
 (try_begin),
   (eq,  ":num_improvements", 1),
   (str_store_string, s18, "@{!}{s0}"),
 (else_try),
   (str_store_string, s18, "@{!}{s18}, {s0}"),
 (try_end),
(try_end),

(try_begin),
 (eq,  ":num_improvements", 0),
 (str_store_string, s19, "@The {s17} has no improvements."),
(else_try),
 (str_store_string, s19, "@The {s17} has the following improvements: {s18}."),
(try_end),
],
"{s19}  What do you want to build?", "dplmc_chamberlain_manage_fiefs_build_ask2",
[]],

[anyone|plyr, "dplmc_chamberlain_manage_fiefs_build_ask2",
[
(party_slot_eq, "$diplomacy_var", slot_party_type, spt_village),
(party_slot_eq, "$diplomacy_var", slot_center_has_manor, 0),
],
"Build a manor.", "dplmc_chamberlain_manage_fiefs_build_confirm_ask",
[(assign, "$g_improvement_type", slot_center_has_manor),]
],

[anyone|plyr, "dplmc_chamberlain_manage_fiefs_build_ask2",
[
(party_slot_eq, "$diplomacy_var", slot_party_type, spt_village),
(party_slot_eq, "$diplomacy_var", slot_center_has_fish_pond, 0),
],
"Build a mill.", "dplmc_chamberlain_manage_fiefs_build_confirm_ask",
[(assign, "$g_improvement_type", slot_center_has_fish_pond),]
],

[anyone|plyr, "dplmc_chamberlain_manage_fiefs_build_ask2",
[
(party_slot_eq, "$diplomacy_var", slot_party_type, spt_village),
(party_slot_eq, "$diplomacy_var", slot_center_has_watch_tower, 0),
],
"Build a watch tower.", "dplmc_chamberlain_manage_fiefs_build_confirm_ask",
[(assign, "$g_improvement_type", slot_center_has_watch_tower),]
],

[anyone|plyr, "dplmc_chamberlain_manage_fiefs_build_ask2",
[
(party_slot_eq, "$diplomacy_var", slot_party_type, spt_village),
(party_slot_eq, "$diplomacy_var", slot_center_has_school, 0),
],
"Build a school.", "dplmc_chamberlain_manage_fiefs_build_confirm_ask",
[(assign, "$g_improvement_type", slot_center_has_school),]
],

[anyone|plyr, "dplmc_chamberlain_manage_fiefs_build_ask2",
[
(party_slot_eq, "$diplomacy_var", slot_party_type, spt_village),
(party_slot_eq, "$diplomacy_var", slot_center_has_messenger_post, 0),
],
"Build a messenger post.", "dplmc_chamberlain_manage_fiefs_build_confirm_ask",
[(assign, "$g_improvement_type", slot_center_has_messenger_post),]
],

[anyone|plyr, "dplmc_chamberlain_manage_fiefs_build_ask2",
[
(this_or_next|party_slot_eq, "$diplomacy_var", slot_party_type, spt_town),
(party_slot_eq, "$diplomacy_var", slot_party_type, spt_castle),
(party_slot_eq, "$diplomacy_var", slot_center_has_prisoner_tower, 0),
],
"Build a prisoner tower.", "dplmc_chamberlain_manage_fiefs_build_confirm_ask",
[(assign, "$g_improvement_type", slot_center_has_prisoner_tower),]
],

[anyone|plyr, "dplmc_chamberlain_manage_fiefs_build_ask2",
[
],
"Nothing.", "dplmc_chamberlain_pretalk",
[]],

[anyone, "dplmc_chamberlain_manage_fiefs_build_confirm_ask",
[
(str_store_party_name, s2, "$diplomacy_var"),

(call_script, "script_get_improvement_details", "$g_improvement_type"),
(assign, ":improvement_cost", reg0),
(str_store_string, s4, s0),
(str_store_string, s19, s1),
(call_script, "script_get_max_skill_of_player_party", "skl_engineer"),
(assign, ":max_skill", reg0),
(assign, ":max_skill_owner", reg1),
(assign, reg2, ":max_skill"),

(store_sub, ":multiplier", 21, ":max_skill"),
(val_mul, ":improvement_cost", ":multiplier"),
(val_div, ":improvement_cost", 20),

(store_div, ":improvement_time", ":improvement_cost", 100),
(val_add, ":improvement_time", 4),

(assign, reg5, ":improvement_cost"),
(assign, reg6, ":improvement_time"),

(try_begin),
 (eq, ":max_skill_owner", "trp_player"),
 (assign, reg3, 1),
(else_try),
 (assign, reg3, 0),
 (str_store_troop_name, s3, ":max_skill_owner"),
(try_end),

(store_troop_gold, reg7, "trp_household_possessions"),
],
"Are you sure that you want to build a {s4} for {reg5} in {s2}? It will take {reg6} days. We currently have {reg7} denars in the treasury.", "dplmc_chamberlain_manage_fiefs_confirm",
[]],

[anyone|plyr, "dplmc_chamberlain_manage_fiefs_confirm",
[
(store_troop_gold, ":cur_gold", "trp_household_possessions"),
(ge, ":cur_gold", reg5),
],
"Yes.", "dplmc_chamberlain_pretalk",
[
(call_script, "script_dplmc_withdraw_from_treasury", reg5),
#SB : hero action, although technically we should be using the court member's skill and not counting player party at all
(call_script, "script_get_max_skill_of_player_party", "skl_engineer"),
(call_script, "script_improve_center", "$diplomacy_var", reg1, reg6),
]],

[anyone|plyr, "dplmc_chamberlain_manage_fiefs_confirm",
[],
"No, I don't have the money.", "dplmc_chamberlain_pretalk",
[]],


##manage pools
[anyone|plyr, "dplmc_chamberlain_talk",
[
##diplomacy start+
(assign, ":can_use_secondary_storage", 0),
(try_begin),
   #If the player already has things in the former item pool, allow access to it.
   (troop_get_inventory_capacity, ":capacity", "trp_dplmc_chamberlain"),
   (try_for_range, ":inventory_slot", ek_food + 1, ":capacity"),
     (troop_inventory_slot_get_item_amount, reg0, "trp_dplmc_chamberlain", ":inventory_slot"),
     (gt, reg0, 0),
     (troop_get_inventory_slot, reg0, "trp_dplmc_chamberlain", ":inventory_slot"),
     (neg|troop_has_item_equipped, "trp_dplmc_chamberlain", reg0),
     (assign, ":can_use_secondary_storage", 1),
     (assign, ":capacity", ":inventory_slot"),#stop the loop
   (try_end),
   (eq, ":can_use_secondary_storage", 1),
(else_try),
   #If the player owns any towns or castles, allow use of the former item pool
   #as secondary storage.
   (try_for_range, reg0, walled_centers_begin, walled_centers_end),
      (party_slot_eq, reg0, slot_town_lord, "trp_player"),
	  (assign, ":can_use_secondary_storage", 1),
   (try_end),
(try_end),
(assign, reg0, ":can_use_secondary_storage"),
##diplomacy end+
],
##diplomacy end+
#"I would like to manage the item pool and household.", "dplmc_chamberlain_pools_ask",
"I would like to manage the {reg0?household and secondary storage:household}.", "dplmc_chamberlain_pools_ask",
##diplomacy end+
[]],
#SB : fix |plyr flag
[anyone, "dplmc_chamberlain_pools_ask",
[
],
"What do you want to do?", "dplmc_chamberlain_pools",
[]],

##item pool
[anyone|plyr, "dplmc_chamberlain_pools",
##diplomacy start+
[
(assign, ":can_use_secondary_storage", 0),
(try_begin),
   #If the player already has things in the former item pool, allow access to it.
   (troop_get_inventory_capacity, ":capacity", "trp_dplmc_chamberlain"),
   (try_for_range, ":inventory_slot", ek_food + 1, ":capacity"),
     (troop_inventory_slot_get_item_amount, reg0, "trp_dplmc_chamberlain", ":inventory_slot"),
     (gt, reg0, 0),
     (troop_get_inventory_slot, reg0, "trp_dplmc_chamberlain", ":inventory_slot"),
     (neg|troop_has_item_equipped, "trp_dplmc_chamberlain", reg0),
     (assign, ":can_use_secondary_storage", 1),
     (assign, ":capacity", ":inventory_slot"),#stop the loop
   (try_end),
   (eq, ":can_use_secondary_storage", 1),
(else_try),
   #If the player owns any towns or castles, allow use of the former item pool
   #as secondary storage.
   (try_for_range, reg0, walled_centers_begin, walled_centers_end),
      (party_slot_eq, reg0, slot_town_lord, "trp_player"),
      (assign, ":can_use_secondary_storage", 1),
   (try_end),
(try_end),
(eq, ":can_use_secondary_storage", 1),
],
#"I would like to manage the item pool.", "dplmc_chamberlain_pretalk",
"I would like to manage the goods in secondary storage.", "dplmc_chamberlain_pretalk",
[(change_screen_loot, "trp_dplmc_chamberlain"),]],
##diplomacy end+

[anyone|plyr, "dplmc_chamberlain_pools",
[
##diplomacy start+
(eq, 0, 1),#This is no longer used as the primary autoloot pool!
##diplomacy end+
   (eq, "$g_autoloot", 1),
(store_skill_level, ":inv_skill", "skl_inventory_management", "trp_player"),
(gt, "$g_player_chamberlain", 0),
(ge, ":inv_skill", 3),
],
"Let my companions take the items out of the item pool.", "dplmc_chamberlain_item_pool",
[]],

[anyone, "dplmc_chamberlain_item_pool",
[
],
"Are you sure you wish to do this?", "dplmc_chamberlain_item_pool_confirm",
[]],

[anyone|plyr, "dplmc_chamberlain_item_pool_confirm",
[
##diplomacy start+
(eq, 0, 1),#This is no longer used as the primary autoloot pool!
##diplomacy end+
],
"Yes.", "dplmc_chamberlain_pretalk",
[
(call_script, "script_dplmc_auto_loot_all", "$g_talk_troop", dplmc_loot_string),
]],

[anyone|plyr, "dplmc_chamberlain_item_pool_confirm",
[
],
"No I changed, my mind.", "dplmc_chamberlain_pretalk",
[
]],

##household
[anyone|plyr, "dplmc_chamberlain_pools",
[
],
"I would like to manage the household.", "dplmc_chamberlain_pretalk",
[(change_screen_loot, "trp_household_possessions"),]],


[anyone|plyr, "dplmc_chamberlain_pools",
[],
"Nevermind.", "dplmc_chamberlain_pretalk",
[]],

[anyone|plyr, "dplmc_chamberlain_talk",
[
],
"You are dismissed.", "dplmc_chamberlain_dismiss_confirm_ask",
[]],

#SB : add blurb about secondary inventory
[anyone, "dplmc_chamberlain_dismiss_confirm_ask",
[
(troop_get_inventory_capacity, ":cap", "$g_talk_troop"),
(try_for_range, ":slots", ek_food + 1, ":cap"),
  (troop_get_inventory_slot, ":item_no", "$g_talk_troop", ":slots"),
  (gt, ":item_no", 0), #item found
  (neq, ":item_no", "itm_tabard"), #item found
  (neq, ":item_no", "itm_leather_boots"), #item found
  (assign, ":cap", -1), #break
(try_end),
(eq, ":cap", -1),
],
"You left certain items in my keeping. If you are sure about this, would you kindly go through them to see what you wish to retain first?", "dplmc_chamberlain_dismiss_inventory",
[]],

[anyone|plyr, "dplmc_chamberlain_dismiss_inventory",
[(store_free_inventory_capacity,":capacity"),
 (gt, ":capacity", 0),
],
"Let me take a look...", "dplmc_chamberlain_dismiss_confirm_ask",
[(change_screen_loot, "$g_talk_troop")]],

[anyone|plyr, "dplmc_chamberlain_dismiss_inventory", [], "I've got better things to do - you can keep your job.", "dplmc_chamberlain_pretalk",
[]],

[anyone, "dplmc_chamberlain_dismiss_confirm_ask",
[
],
"Are you sure that you want to handle all financial affairs by yourself?", "dplmc_chamberlain_dismiss_confirm",
[
]],

[anyone|plyr, "dplmc_chamberlain_dismiss_confirm",
[
],
"Yes I am.", "dplmc_chamberlain_dismiss_confirm_yes",
[]],

[anyone|plyr, "dplmc_chamberlain_dismiss_confirm",
[
],
"No I am not.", "dplmc_chamberlain_pretalk",
[]],

[anyone, "dplmc_chamberlain_dismiss_confirm_yes",
[
],
"As you wish. Let's go through the documents and hand over your estate.", "close_window",
[
(assign, "$g_player_chamberlain", -1),
(store_troop_gold, ":treasury", "trp_household_possessions"),
(call_script, "script_dplmc_withdraw_from_treasury",  ":treasury"),
(troop_add_gold, "trp_player", ":treasury"),
]],

[anyone|plyr,"dplmc_chamberlain_talk",
[],
"Oh nothing, I just wanted to check the documents.", "close_window",[
]],
#SB : add outro after dismissal
[trp_dplmc_chamberlain, "start",
[
  (eq, "$talk_context", tc_court_talk),
  (neq, "$g_player_chamberlain", "$g_talk_troop")
],
"I bid you goodbye, {playername}. May you have the best of luck with the realm's finances, and don't forget to spend less on butter for the feasts.", "close_window", []],


##hire staff
[anyone|plyr, "spouse_talk",
[
(assign, ":has_fief", 0),
(try_for_range, ":center_no", centers_begin, centers_end),
  (party_get_slot,  ":lord_troop_id", ":center_no", slot_town_lord),
  (eq, ":lord_troop_id", "trp_player"),
  (assign, ":has_fief", 1),
(try_end),
##diplomacy start+ remove superfluous
#(try_begin),
##diplomacy end+
(eq, ":has_fief", 1),
(this_or_next|le, "$g_player_constable", 0),
(this_or_next|le, "$g_player_chamberlain", 0),
(le, "$g_player_chancellor", 0),
],
"I want to hire a new staff member.", "dplmc_spouse_staff_talk_ask",
[]],

[anyone, "dplmc_spouse_staff_talk_ask",
[
],
##diplomacy start+ rephrase
#"Which staff member do you like to hire?", "dplmc_talk_staff",
"What sort of staff member would you like to hire?", "dplmc_talk_staff",
##diplomacy end+
[
#SB : set up sreg
(assign, reg10, 0),
(assign, reg11, dplmc_employee_appoint_cost),

]],

##appoint constable
[anyone|plyr, "dplmc_talk_staff",
[
(le, "$g_player_constable", 0),
(assign, ":has_fief", 0),
(try_for_range, ":center_no", walled_centers_begin, walled_centers_end),
  (party_get_slot,  ":lord_troop_id", ":center_no", slot_town_lord),
  (eq, ":lord_troop_id", "trp_player"),
  (assign, ":has_fief", 1),
(try_end),
##diplomacy start+ remove superfluous
#(try_begin),
##diplomacy end+
(eq, ":has_fief", 1),
],
"I want to appoint a constable.", "dplmc_talk_appoint_constable",
[
#SB : salary sreg
(assign, reg10, dplmc_constable_salary),
]],

##diplomacy start+
#Variant: rehiring your constable
[anyone, "dplmc_talk_appoint_constable",
[(troop_slot_ge, "trp_dplmc_constable", slot_troop_met, 1),
],
"I assume you will want to rehire your former constable Miles de Gloucester?  His rate is still {reg10} denars each week, and the appointment will cost us {reg11} denars.", "dplmc_talk_appoint_constable_confirm", []],

#Variant: Don't give the "friend of the family" description if it is not appropriate
#(it might be for some companions in some mods, but by default it probably isn't)
[anyone, "dplmc_talk_appoint_constable",
[(is_between, "$g_talk_troop", companions_begin, companions_end),
],
"I have heard good things about a local nobleman by the name of Miles de Gloucester, and I believe he would be well-suited for the job. He demands {reg10} denars each week, though. The appointment will cost us {reg11} denars.", "dplmc_talk_appoint_constable_confirm",
[]],
##diplomacy end+

[anyone, "dplmc_talk_appoint_constable",
[
],
"That's a wise idea. May I suggest a very capable nobleman and friend of my family? His name is Miles de Gloucester. He demands {reg10} denars each week, though. The appointment will cost us {reg11} denars.", "dplmc_talk_appoint_constable_confirm",
[]],

#SB : dplmc_employee_appoint_cost
[anyone|plyr, "dplmc_talk_appoint_constable_confirm",
[
(store_troop_gold, ":gold", "trp_player"),
(ge, ":gold", dplmc_employee_appoint_cost),
],
"So be it.", "dplmc_talk_appoint_confirm_yes",
[
(call_script, "script_dplmc_appoint_constable"),
(troop_remove_gold, "trp_player", dplmc_employee_appoint_cost),
]],

[anyone|plyr, "dplmc_talk_appoint_constable_confirm",
[
(troop_get_slot, ":player_spouse", "trp_player", slot_troop_spouse),
##diplomacy start+ Handle non-reflexive spouse slots (for example, for polygamy)
(this_or_next|troop_slot_eq, "$g_talk_troop", slot_troop_spouse, "trp_player"),
	(eq, "$g_talk_troop", ":player_spouse"),
(this_or_next|is_between, "$g_talk_troop", heroes_begin, heroes_end),#slot_troop_spouse may not be initialized to -1
 ##diplomacy end+
(eq, "$g_talk_troop", ":player_spouse"),
],
"Maybe later.", "spouse_pretalk",
[]],

[anyone|plyr, "dplmc_talk_appoint_constable_confirm",
[
(eq, "$g_talk_troop", "$g_player_minister"),
(troop_get_slot, ":player_spouse", "trp_player", slot_troop_spouse),
##diplomacy start+ Handle non-reflexive spouse slots (for example, for polygamy)
(this_or_next|neg|is_between, "$g_talk_troop", heroes_begin, heroes_end),#slot_troop_spouse may not be initialized to -1
   (neg|troop_slot_eq, "$g_talk_troop", slot_troop_spouse, "trp_player"),
##diplomacy end+
(neq, ":player_spouse", "$g_player_minister"),
],
"Maybe later.", "minister_pretalk",
[]],

[anyone, "dplmc_talk_appoint_confirm_yes",
[
(troop_get_slot, ":player_spouse", "trp_player", slot_troop_spouse),
##diplomacy start+ Handle non-reflexive spouse slots (for example, for polygamy)
(this_or_next|troop_slot_eq, "$g_talk_troop", slot_troop_spouse, "trp_player"),
	(eq, "$g_talk_troop", ":player_spouse"),
(this_or_next|is_between, "$g_talk_troop", heroes_begin, heroes_end),#slot_troop_spouse may not be initialized to -1
 ##diplomacy end+
(eq, "$g_talk_troop", ":player_spouse"),
],
#SB : personalized
"Very well, I will send him a letter - he should arrive at our court soon.", "spouse_pretalk",
[]],

[anyone, "dplmc_talk_appoint_confirm_yes",
[
(eq, "$g_talk_troop", "$g_player_minister"),
],
#SB : comma
"I will send him a letter, he should arrive at the court soon.", "minister_pretalk",
[]],


##appoint chamberlain
[anyone|plyr, "dplmc_talk_staff",
[
(le, "$g_player_chamberlain", 0),
(assign, ":has_fief", 0),
(try_for_range, ":center_no", centers_begin, centers_end),
(party_get_slot,  ":lord_troop_id", ":center_no", slot_town_lord),
(eq, ":lord_troop_id", "trp_player"),
(assign, ":has_fief", 1),
(try_end),
##diplomacy start+ remove superfluous
#(try_begin),
##diplomacy end+
(eq, ":has_fief", 1),
],
"I want to appoint a chamberlain to handle financial affairs.", "dplmc_talk_appoint_chamberlain",
[ #SB : salary
(assign, reg10, dplmc_chamberlain_salary),
(assign, reg11, dplmc_employee_appoint_cost),
]],

##diplomacy start+
#SB : reg for salary
#Variant: rehiring a former employee
[anyone, "dplmc_talk_appoint_chamberlain",
[(troop_slot_ge, "trp_dplmc_chamberlain", slot_troop_met, 1),
],
"I assume you will want to rehire your former chamberlain Aubrey de Vere?  His rate is still {reg10} denars each week, and the appointment will cost us {reg11} denars.", "dplmc_talk_appoint_chamberlain_confirm", []],

#Variant: Don't give the "friend of the family" description if it is not appropriate
#(it might be for some companions in some mods, but by default it probably isn't)
[anyone, "dplmc_talk_appoint_chamberlain",
[(is_between, "$g_talk_troop", companions_begin, companions_end),
],
"I have heard good things about a local nobleman by the name of Aubrey de Vere, and I believe he would be well-suited for the job. He demands {reg10} denars each week, though. The appointment will cost us {reg11} denars.", "dplmc_talk_appoint_chamberlain_confirm",
[]],
##diplomacy end+
[anyone, "dplmc_talk_appoint_chamberlain",
[
],
"That's a wise idea. May I suggest a very capable nobleman and friend of my family? His name is Aubrey de Vere. He demands {reg10} denars each week, though. The appointment will cost us {reg11} denars.", "dplmc_talk_appoint_chamberlain_confirm",
[]],

#SB : dplmc_employee_appoint_cost
[anyone|plyr, "dplmc_talk_appoint_chamberlain_confirm",
[
(store_troop_gold, ":gold", "trp_player"),
(ge, ":gold", dplmc_employee_appoint_cost),
],
"So be it.", "dplmc_talk_appoint_confirm_yes",
[
  (call_script, "script_dplmc_appoint_chamberlain"),
  (troop_remove_gold, "trp_player", dplmc_employee_appoint_cost),
]],

[anyone|plyr, "dplmc_talk_appoint_chamberlain_confirm",
[
(troop_get_slot, ":player_spouse", "trp_player", slot_troop_spouse),
##diplomacy start+
(this_or_next|troop_slot_eq, "$g_talk_troop", slot_troop_spouse, "trp_player"),
	(troop_slot_eq, "trp_player", slot_troop_spouse, "$g_talk_troop"),
(this_or_next|is_between, "$g_talk_troop", heroes_begin, heroes_end),
##diplomacy end+
(eq, "$g_talk_troop", ":player_spouse"),
],
"Maybe later.", "spouse_pretalk",
[]],

[anyone|plyr, "dplmc_talk_appoint_chamberlain_confirm",
[
(eq, "$g_talk_troop", "$g_player_minister"),
(troop_get_slot, ":player_spouse", "trp_player", slot_troop_spouse),
##diplomacy start+
(this_or_next|neg|troop_slot_eq, "$g_talk_troop", slot_troop_spouse, "trp_player"),
	(neg|is_between, "$g_talk_troop", heroes_begin, heroes_end),
##diplomacy end+
(neq, ":player_spouse", "$g_player_minister"),
],
"Maybe later.", "minister_pretalk",
[]],

##appoint chancellor
[anyone|plyr, "dplmc_talk_staff",
[
(le, "$g_player_chancellor", 0),
(assign, ":has_fief", 0),
(try_for_range, ":center_no", towns_begin, towns_end),
  (party_slot_eq, ":center_no", slot_town_lord, "trp_player"),
  (assign, ":has_fief", 1),
(try_end),
(eq, ":has_fief", 1),
],
"I want to appoint a chancellor.", "dplmc_talk_appoint_chancellor",
[ #SB : salary
(assign, reg10, dplmc_chancellor_salary),
(assign, reg11, dplmc_employee_appoint_cost),
]],

##diplomacy start+
#SB : salary reg
#Variant: rehiring a former employee
[anyone, "dplmc_talk_appoint_chancellor",
[(troop_slot_ge, "trp_dplmc_chamberlain", slot_troop_met, 1),
],
#SB : extra space
"I assume you will want to rehire your former chancellor Herfast? His rate is still {reg11} denars each week, and the appointment will cost us {reg10} denars.", "dplmc_talk_appoint_chancellor_confirm", []],

#Variant: Don't give the "friend of the family" description if it is not appropriate
#(it might be for some companions in some mods, but by default it probably isn't)
[anyone, "dplmc_talk_appoint_chancellor",
[(is_between, "$g_talk_troop", companions_begin, companions_end),
],
"I have heard good things about a local nobleman by the name of Herfast, and I believe he would be well-suited for the job. He demands {reg10} denars each week, though. The appointment will cost us {reg11} denars.", "dplmc_talk_appoint_chancellor_confirm",
[]],
##diplomacy end+
[anyone, "dplmc_talk_appoint_chancellor",
[
],
"That's a wise idea. May I suggest a very capable nobleman and friend of my family? His name is Herfast. He demands {reg10} denars each week, though. The appointment will cost us {reg11} denars.", "dplmc_talk_appoint_chancellor_confirm",
[]],

[anyone|plyr, "dplmc_talk_appoint_chancellor_confirm",
[
(store_troop_gold, ":gold", "trp_player"),
(ge, ":gold", dplmc_employee_appoint_cost),
],
"So be it.", "dplmc_talk_appoint_confirm_yes",
[
  (call_script, "script_dplmc_appoint_chancellor"),
  (troop_remove_gold, "trp_player", dplmc_employee_appoint_cost),
]],

[anyone|plyr, "dplmc_talk_appoint_chancellor_confirm",
[
(troop_get_slot, ":player_spouse", "trp_player", slot_troop_spouse),
(eq, "$g_talk_troop", ":player_spouse"),
],
"Maybe later.", "spouse_pretalk",
[]],

[anyone|plyr, "dplmc_talk_appoint_chancellor_confirm",
[
(eq, "$g_talk_troop", "$g_player_minister"),
(troop_get_slot, ":player_spouse", "trp_player", slot_troop_spouse),
(neq, ":player_spouse", "$g_player_minister"),
],
"Maybe later.", "minister_pretalk",
[]],

[anyone|plyr, "dplmc_talk_staff",
[
(eq, "$g_talk_troop", "$g_player_minister"),
],
"None.", "minister_pretalk",
[]],

[anyone|plyr, "dplmc_talk_staff",
[
(troop_get_slot, ":player_spouse", "trp_player", slot_troop_spouse),
(eq, "$g_talk_troop", ":player_spouse"),
(neq, ":player_spouse", "$g_player_minister"),
],
"None.", "spouse_pretalk",
[]],

##buy food
[anyone|plyr, "spouse_talk",
[ ##diplomacy start+
#
##OLD:
#(troop_get_slot, ":player_spouse", "trp_player", slot_troop_spouse),
#(troop_slot_ge, ":player_spouse", slot_troop_cur_center, -1),
##NEW:
(assign, ":player_spouse", "$g_talk_troop"),
(troop_slot_ge, ":player_spouse", slot_troop_cur_center, -1),
(party_slot_eq, "$current_town", slot_center_is_besieged_by, -1), #SB : not under siege
##Also, to avoid strange bugs, do not enable this for heroes or ministers
(neg|troop_slot_eq, ":player_spouse", slot_troop_occupation, slto_kingdom_hero),
(neq, ":player_spouse", "$g_player_minister"), #too important to shop
(neg|main_party_has_troop, ":player_spouse"), #SB : not currently a companion
(neg|troop_slot_ge, ":player_spouse", slot_troop_leaded_party, 1),
(neg|troop_slot_ge, ":player_spouse", slot_troop_prisoner_of_party, 0),
##diplomacy end+

#make sure no spouse party exists
(assign, ":spouse_party_exists", 0),
(try_for_parties, ":spouse_party"), #SB : additional checks
  (eq, ":spouse_party_exists", 0),
  (party_is_active, ":spouse_party"),
  (party_slot_eq, ":spouse_party", slot_party_type, dplmc_spt_spouse),
  (assign, ":spouse_party_exists", 1),
(try_end),
(neq, ":spouse_party_exists", 1),

],
"Can you please buy some bread?", "dplmc_spouse_talk_buy_food_amount_ask",
[]],
#TODO : integrate this with "shopping list" autobuy

[anyone, "dplmc_spouse_talk_buy_food_amount_ask",
[
],
##diplomacy start+ "like" to "want"
"How much bread do you want?", "dplmc_spouse_talk_buy_food_amount",
##diplomacy end+
[]],

#SB : assume bread = 50 units
[anyone|plyr, "dplmc_spouse_talk_buy_food_amount",
[
],
"{!}50.", "dplmc_spouse_talk_buy_food",
[
(troop_get_slot, ":player_spouse", "trp_player", slot_troop_spouse),
(troop_set_slot, ":player_spouse", dplmc_slot_troop_mission_diplomacy, 1),
]],

[anyone|plyr, "dplmc_spouse_talk_buy_food_amount",
[
],
"{!}100.", "dplmc_spouse_talk_buy_food",
[
(troop_get_slot, ":player_spouse", "trp_player", slot_troop_spouse),
(troop_set_slot, ":player_spouse", dplmc_slot_troop_mission_diplomacy, 2),
]],

[anyone|plyr, "dplmc_spouse_talk_buy_food_amount",
[
],
"{!}150.", "dplmc_spouse_talk_buy_food",
[
(troop_get_slot, ":player_spouse", "trp_player", slot_troop_spouse),
(troop_set_slot, ":player_spouse", dplmc_slot_troop_mission_diplomacy, 3),
]],

[anyone|plyr, "dplmc_spouse_talk_buy_food_amount",
[
],
"{!}200.", "dplmc_spouse_talk_buy_food",
[
(troop_get_slot, ":player_spouse", "trp_player", slot_troop_spouse),
(troop_set_slot, ":player_spouse", dplmc_slot_troop_mission_diplomacy, 4),
]],

#SB : how much -> nevermind not nothing
[anyone|plyr, "dplmc_spouse_talk_buy_food_amount",
[
],
"Nevermind.", "spouse_pretalk",
[]],

[anyone, "dplmc_spouse_talk_buy_food",
[
(troop_get_slot, ":player_spouse", "trp_player", slot_troop_spouse),
(troop_slot_eq, ":player_spouse", slot_troop_cur_center, "$current_town"),
(troop_get_slot, ":amount", ":player_spouse", dplmc_slot_troop_mission_diplomacy),

# (assign, ":can_leave", 1),
# (try_begin),
# (is_between,"$current_town",castles_begin, castles_end),
# (try_begin),
 # (is_between, "$current_town", walled_centers_begin, walled_centers_end),
 # (neg|party_slot_eq, "$current_town", slot_center_is_besieged_by, -1),
 # (assign, ":can_leave", 0),
# (try_end),
# (try_end),
# (eq, ":can_leave", 1),

(assign, ":mission_object", -1),
(try_begin),
(store_faction_of_party, ":party_faction", "$current_town"),
(assign, ":distance", 1000),
(try_for_range, ":center_no", centers_begin, centers_end),
  (neg|is_between, ":center_no", castles_begin, castles_end),
  (store_faction_of_party, ":center_faction", ":center_no"),
  (eq, ":center_faction", ":party_faction"),

  (assign, ":proceed", 1),
  (try_begin),
    (is_between, ":center_no", towns_begin, towns_end),
    (party_get_slot,":cur_merchant",":center_no",slot_town_merchant),
    (neg|party_slot_eq, ":center_no", slot_center_is_besieged_by, -1), #SB : not under siege
    (assign, ":proceed", 0),
  (else_try),
    (is_between, ":center_no", villages_begin, villages_end),
    (party_get_slot,":cur_merchant",":center_no", slot_town_elder),
    (neg|party_slot_eq, ":center_no", slot_village_state, svs_normal),
    (assign, ":proceed", 0),
  (try_end),
  (eq, ":proceed", 1),


  (troop_get_inventory_capacity, ":capacity", ":cur_merchant"),
  (assign, ":bread_amount", 0),
  (try_for_range, ":inventory_slot", 0, ":capacity"),
     (troop_get_inventory_slot, ":item", ":cur_merchant", ":inventory_slot"),
     (eq, ":item", "itm_bread"),
     (val_add, ":bread_amount", 1),
   (try_end),
   (ge, ":bread_amount", ":amount"),

  (store_distance_to_party_from_party, ":tmp_distance", ":center_no", "$current_town"),
  (lt, ":tmp_distance", ":distance"),
  (assign, ":distance", ":tmp_distance"),

  (assign, ":mission_object", ":center_no"),
(try_end),
(try_end),

(neq, ":mission_object", -1),
(troop_set_slot, ":player_spouse", slot_troop_mission_object, ":mission_object"),

##nested diplomacy start+
#(call_script, "script_dplmc_get_item_buy_price_factor", "itm_bread", ":mission_object"),
#Use player skill for now (we could revisit this, but it's not important)
(call_script, "script_dplmc_get_item_buy_price_factor", "itm_bread", ":mission_object", "trp_player", -1),
##nested diplomacy end+
(store_item_value, ":value", "itm_bread"),
(store_mul, ":price", ":value", reg0),
(val_div, ":price", 100),
(val_max, ":price", 1),
(val_mul, ":price", ":amount"),
(assign, reg0, ":price"),
#SB : store into global
(assign, "$enterprise_cost", ":price"),
(str_store_party_name, s6, ":mission_object"),
],
"Yes of course, I will go to the merchant in {s6} and buy some bread. This will cost us {reg0} denars.", "dplmc_spouse_talk_buy_food_confirm",
[]],

[anyone, "dplmc_spouse_talk_buy_food",
[
],
"Currently no merchant has enough bread. We have to wait.", "spouse_pretalk",
[]],

##confirm spouse buy food
[anyone|plyr, "dplmc_spouse_talk_buy_food_confirm",
[
(store_troop_gold, ":gold", "trp_player"),
(ge, ":gold", "$enterprise_cost"),
],
"Ok, we can afford that, please go. Thank you.", "close_window",
[
(troop_get_slot, ":player_spouse", "trp_player", slot_troop_spouse),
(troop_get_slot, ":mission_object", ":player_spouse", slot_troop_mission_object),

(troop_remove_gold, "trp_player", reg0),
(try_begin),
  (neq, ":mission_object", "$current_town"),

  (try_begin),
    (troop_get_slot, ":player_spouse", "trp_player", slot_troop_spouse),

    (set_spawn_radius, 1),
    (spawn_around_party, "$g_encountered_party", "pt_dplmc_spouse"),
    (assign, ":spouse_party", reg0),

    (party_add_members, ":spouse_party", ":player_spouse", 1),
    (party_set_faction, ":spouse_party", "fac_neutral"), #no capture
    (party_set_slot, ":spouse_party", slot_party_home_center, "$g_encountered_party"),
    (party_set_slot, ":spouse_party", slot_party_type, dplmc_spt_spouse),
    (party_set_slot, ":spouse_party", slot_party_orders_object, ":mission_object"),
    (party_set_ai_object, ":spouse_party", ":mission_object"),
    (party_set_ai_behavior, ":spouse_party", ai_bhvr_travel_to_party),
    (party_set_slot, ":spouse_party", slot_party_ai_state, spai_undefined),
    (troop_set_slot, ":player_spouse", slot_troop_cur_center, -1),
  (try_end),
(else_try), #SB : use actual amount in previous dialog for local merchant
  (troop_get_slot, ":amount", ":player_spouse", dplmc_slot_troop_mission_diplomacy),
  (party_get_slot,":cur_merchant",":mission_object",slot_town_merchant),
  (troop_add_gold, ":cur_merchant", "$enterprise_cost"),
  (troop_remove_items, ":cur_merchant", "itm_bread", ":amount"),
  (troop_add_items, "trp_household_possessions", "itm_bread", ":amount"),
(try_end),
(assign, "$enterprise_cost", 0),
]],

[anyone|plyr, "dplmc_spouse_talk_buy_food_confirm",
[
],
"Oh, maybe later.", "close_window",
[
#SB : unset global
(assign, "$enterprise_cost", 0),
]],

##hire staff
[anyone|plyr, "minister_talk",
[
(troop_get_slot, ":player_spouse", "trp_player", slot_troop_spouse),
(neq,"$g_talk_troop",":player_spouse"), #only if spouse != minister
(assign, ":has_fief", 0),
(try_for_range, ":center_no", centers_begin, centers_end),
  (party_get_slot,  ":lord_troop_id", ":center_no", slot_town_lord),
  (eq, ":lord_troop_id", "trp_player"),
(assign, ":has_fief", 1),
(try_end),
##diplomacy start+ remove superfluous
#(try_begin),
##diplomacy end+
(eq, ":has_fief", 1), #SB : basic condition
(this_or_next|le, "$g_player_constable", 0),
(this_or_next|le, "$g_player_chamberlain", 0),
(le, "$g_player_chancellor", 0),
],
"I want to hire a new staff member.", "dplmc_minister_staff_talk_ask",
[]],

[anyone, "dplmc_minister_staff_talk_ask",
[
],
##diplomacy start+ rephrase
#"Which staff member do you like to hire?", "dplmc_talk_staff",
"What sort of staff member would you like to hire?", "dplmc_talk_staff",
##diplomacy end+
[]],

##return fief to king
[anyone|plyr,"lord_talk", [
(le,"$talk_context", tc_party_encounter),
(ge, "$g_talk_troop_faction_relation", 0),
#(troop_slot_eq, "$g_talk_troop", slot_troop_is_prisoner, 0),
(neg|troop_slot_ge, "$g_talk_troop", slot_troop_prisoner_of_party, 0),
(faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "$g_talk_troop"),
(eq, "$players_kingdom", "$g_talk_troop_faction"),
(eq, "$player_has_homage", 1),
],
"{s66}, I want to give up a fief you enfeoffed to me.", "dplmc_lord_give_back_fief",[
]],

[anyone, "dplmc_lord_give_back_fief",
[
], "Oh, so you can't manage it? Well, which fief do you have in mind?", "dplmc_lord_give_back_fief_select",
[]],

[anyone|plyr|repeat_for_parties,"dplmc_lord_give_back_fief_select", [
(store_repeat_object, ":center"),
(is_between, ":center", centers_begin, centers_end),
(neq, ":center", "$g_player_court"), #court can't be returned
(party_slot_eq, ":center", slot_center_is_besieged_by, -1),
(party_slot_eq, ":center", slot_town_lord, "trp_player"),
(str_store_party_name, s11, ":center"),
],
"{!}{s11}.", "dplmc_lord_give_back_fief_confirm_ask",[
(store_repeat_object, "$diplomacy_var"),
]],

[anyone|plyr,"dplmc_lord_give_back_fief_select", [],
"Never mind.", "lord_pretalk",[
]],

[anyone, "dplmc_lord_give_back_fief_confirm_ask",
[
(str_store_party_name, s11, "$diplomacy_var"),
], "So you think you can't fulfill your promise and manage {s11}?", "dplmc_lord_give_back_fief_confirm",
[]],

[anyone|plyr, "dplmc_lord_give_back_fief_confirm",
[
(str_store_party_name, s11, "$diplomacy_var"),
], "Yes I want to give up on {s11}.", "lord_pretalk",
[
(call_script, "script_change_player_honor", -1),
(call_script, "script_change_player_relation_with_troop", "$g_talk_troop", -3),
(troop_get_slot, ":player_renown", "trp_player", slot_troop_renown),
(val_sub, ":player_renown", 5),
(val_max, ":player_renown", 0),
(troop_set_slot, "trp_player", slot_troop_renown, ":player_renown"),
(call_script, "script_give_center_to_faction", "$diplomacy_var", "fac_neutral"),
(call_script, "script_give_center_to_faction", "$diplomacy_var", "$players_kingdom"),
]],

[anyone|plyr, "dplmc_lord_give_back_fief_confirm",
[
(str_store_party_name, s11, "$diplomacy_var"),
], "No, I will keep the promise.", "lord_pretalk",
[]],


##SB : persuade peace
##persuade king to declare truce
[anyone|plyr,"lord_talk", [(le,"$talk_context", tc_party_encounter),
                       (ge, "$g_talk_troop_faction_relation", 0),
                       #(troop_slot_eq, "$g_talk_troop", slot_troop_is_prisoner, 0),
                       (neg|troop_slot_ge, "$g_talk_troop", slot_troop_prisoner_of_party, 0),
                       (faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "$g_talk_troop"),
                       (eq, "$players_kingdom", "$g_talk_troop_faction"),
                       (eq, "$player_has_homage", 1),
                       (assign, ":continue", npc_kingdoms_end),
                       (try_for_range, ":other_kingdom", npc_kingdoms_begin, ":continue"),
                         (neq, ":other_kingdom", "$players_kingdom"),
                         (store_relation, ":relation", ":other_kingdom", "$players_kingdom"),
                         (lt, ":relation", 0),
                         (assign, ":continue", -1),
                       (try_end),
                       (neq, ":continue", npc_kingdoms_end),
                       #make sure peace talks aren't in progress (also can't declare peace for all wars)
                       (eq, "$g_force_peace_faction_1", 0),
                       (eq, "$g_force_peace_faction_2", 0),
                      ],
"{s66}, you should declare a truce for this war.", "dplmc_lord_declare_peace",[
    # clear constants
    (assign, ":num_enemies", 0),
    (try_for_range, ":other_kingdom", npc_kingdoms_begin, npc_kingdoms_end),
      (neq, ":other_kingdom", "$players_kingdom"),
      (store_relation, ":relation", ":other_kingdom", "$players_kingdom"),
      (lt, ":relation", 0),
      (val_add, ":num_enemies", 1),
      (str_store_faction_name, s1, ":other_kingdom"),
      (assign, "$g_faction_selected", ":other_kingdom"),
    (try_end),

    (try_begin), #do a selection if more than 1
      (neq, ":num_enemies", 1),
      (assign, "$g_faction_selected", -1),
    (try_end),
]],

#fail if player has bad relations/renown
[anyone, "dplmc_lord_declare_peace",
[
(troop_get_slot, ":renown", "trp_player", slot_troop_renown), #renown
(troop_get_slot, ":relation_to_king", "$g_talk_troop", slot_troop_player_relation),
(this_or_next|lt, ":relation_to_king", 5),
(lt, ":renown", dplmc_command_renown_limit), #SB : higher threshold to promote pax
(val_sub, ":relation_to_king", 5),
(assign, ":sum", ":renown"),
(val_mul, ":relation_to_king", 5),
(val_add, ":sum", ":relation_to_king"),
(val_add, ":sum", "$player_honor"),

(lt, ":sum", dplmc_command_renown_limit),
], "Who do you think you are, to dictate such terms of strategy? I'll not suffer another word from you!", "close_window",
[
(call_script, "script_change_player_relation_with_troop", "$g_talk_troop", -1),
(try_begin),
  (eq,"$talk_context",tc_party_encounter), #Added line by zerilius
  (assign, "$g_leave_encounter", 1), #Added line by zerilius
(try_end),
]],

#fail if player has high controversy or high relations with target enemy ruler
[anyone, "dplmc_lord_declare_peace",
[
(troop_get_slot, ":controversy", "trp_player", slot_troop_controversy), #renown
(troop_get_slot, ":relation_to_king", "$g_talk_troop", slot_troop_player_relation),

#probably store enemy affiliated troop/inlaws first?
(assign, ":enemy_relation", 0),
(assign, ":enemy_ruler", 0),

#get player's "best friend"
(try_for_range, ":other_kingdom", npc_kingdoms_begin, npc_kingdoms_end),
  (neq, ":other_kingdom", "$players_kingdom"),
  (store_relation, ":relation", ":other_kingdom", "$players_kingdom"),
  (lt, ":relation", 0),
  (try_begin),
    (faction_get_slot, ":enemy_leader", ":other_kingdom", slot_faction_leader),
    (gt, ":enemy_leader", 0),
    (call_script, "script_troop_get_player_relation", ":enemy_leader"),
    (gt, reg0, ":enemy_relation"),
    (assign, ":enemy_relation", reg0),
    (assign, ":enemy_ruler", ":enemy_leader"),
  (try_end),
  (try_begin),
    (faction_get_slot, ":enemy_leader", ":other_kingdom", slot_faction_marshall),
    (gt, ":enemy_leader", 0),
    (call_script, "script_troop_get_player_relation", ":enemy_leader"),
    (gt, reg0, ":enemy_relation"),
    (assign, ":enemy_relation", reg0),
    (assign, ":enemy_ruler", ":enemy_leader"),
  (try_end),
(try_end),

(val_sub, ":enemy_relation", ":relation_to_king"), #does not track actual relation between the two rulers
(this_or_next|gt, ":controversy", 50),
(gt, ":enemy_relation", 50),
(try_begin),
  (gt, ":enemy_ruler", 0),
  (str_store_troop_name, s10, ":enemy_ruler"),
  (assign, reg10, 1),
(else_try),
  (assign, reg10, 0),
(try_end),
], "Do you take me for a fool, {playername}? My spies bring me tales of your transgressions in this campaign, do not think your sweet words will make up for your gross misconduct. \
{reg10?I know of your fraternization with our foe, {s10}. :}Your cowardice is noted and your petition is denied.", "close_window",
[
(call_script, "script_change_player_relation_with_troop", "$g_talk_troop", -3),
(try_begin),
  (eq,"$talk_context",tc_party_encounter), #Added line by zerilius
  (assign, "$g_leave_encounter", 1), #Added line by zerilius
(try_end),
]],
#if there is only one war
[anyone, "dplmc_lord_declare_peace",
[
    # (assign, ":num_enemies", 0),
    # (try_begin),
      # (eq, "$g_faction_selected", -1), #parse if selected already
      # (try_for_range, ":other_kingdom", npc_kingdoms_begin, npc_kingdoms_end),
        # (neq, ":other_kingdom", "$players_kingdom"),
        # (store_relation, ":relation", ":other_kingdom", "$players_kingdom"),
        # (lt, ":relation", 0),
        # (val_add, ":num_enemies", 1),
        # (str_store_faction_name, s1, ":other_kingdom"),
      # (try_end),
    # (else_try),
      # (str_store_faction_name, s1, "$g_faction_selected"),
    # (try_end),
    # (this_or_next|eq, ":num_enemies", 1),
    (gt, "$g_faction_selected", 0),
    (str_store_faction_name, s1, "$g_faction_selected"),
], "You believe we should stop fighting the {s1}?", "dplmc_lord_declare_pax_why",
[
    # (try_begin), #fetch again if not set
      # (eq, "$g_faction_selected", -1),
      # (try_for_range, ":other_kingdom", npc_kingdoms_begin, npc_kingdoms_end),
        # (neq, ":other_kingdom", "$players_kingdom"),
        # (store_relation, ":relation", ":other_kingdom", "$players_kingdom"),
        # (lt, ":relation", 0),
        # (assign, "$g_faction_selected", ":other_kingdom"),
      # (try_end),
    # (try_end),
    # (store_repeat_object, "$g_faction_selected"),
    (call_script, "script_npc_decision_checklist_peace_or_war", "$players_kingdom", "$g_faction_selected", "trp_player"),
    (assign, "$diplomacy_var", reg0),
    (val_mul, "$diplomacy_var", -6),
    (val_min, "$diplomacy_var", 2),

    (try_for_range, ":kingdom", kingdoms_begin, kingdoms_end),
      (neq, ":kingdom", "$players_kingdom"),
      (neq, ":kingdom", "$g_faction_selected"),
      (call_script, "script_diplomacy_faction_get_diplomatic_status_with_faction",  "$players_kingdom", ":kingdom"),
      (eq, reg0, -2),
      (val_sub, "$diplomacy_var", 4),
    (try_end),

    (store_skill_level, ":player_persuasion_skill", "skl_persuasion", "trp_player"),
    (val_add, "$diplomacy_var", ":player_persuasion_skill"),

    (assign, reg50, 0),
    (assign, reg51, 0),
    (assign, reg52, 0),
    (assign, reg53, 1), #pre-empt this reason if only 1 active war
]],
#if there are multiple opponents
[anyone, "dplmc_lord_declare_peace",
[], "I will humour your request. Which of our opponents do you believe to be worthy of a truce?", "dplmc_lord_declare_peace_kingdoms_select",
[
#reset here if it falls through

]],

[anyone|plyr, "dplmc_lord_declare_peace_kingdoms_select",
[], "Never mind.", "lord_pretalk",
[]],
##select war target
[anyone|plyr|repeat_for_factions, "dplmc_lord_declare_peace_kingdoms_select",
[
  (store_repeat_object, ":faction_no"),
  (is_between, ":faction_no", kingdoms_begin, kingdoms_end),
  ##diplomacy start+
  (neq, ":faction_no", "fac_player_supporters_faction"),
  (neq, ":faction_no", "$g_talk_troop_faction"),
  ##diplomacy end+
  (neq, ":faction_no", "$players_kingdom"),
  (call_script, "script_diplomacy_faction_get_diplomatic_status_with_faction", "$players_kingdom", ":faction_no"),
  (eq, reg0, -2), #at war
  (faction_slot_eq, ":faction_no", slot_faction_state, sfs_active),
  (faction_get_slot, ":leader_no", ":faction_no", slot_faction_leader),
  (str_store_troop_name, s10, ":leader_no"),
  (str_store_faction_name, s11, ":faction_no"),
],
"{s10} of the {s11}", "dplmc_lord_declare_peace", #go back to start
[
  (store_repeat_object, "$g_faction_selected"),
  (call_script, "script_npc_decision_checklist_peace_or_war", "$players_kingdom", "$g_faction_selected", "trp_player"),
  (assign, "$diplomacy_var", reg0),
  (val_mul, "$diplomacy_var", -6),
  (val_min, "$diplomacy_var", 2),

  (try_for_range, ":kingdom", kingdoms_begin, kingdoms_end),
    (neq, ":kingdom", "$players_kingdom"),
    (neq, ":kingdom", "$g_faction_selected"),
    (call_script, "script_diplomacy_faction_get_diplomatic_status_with_faction",  "$players_kingdom", ":kingdom"),
    (eq, reg0, -2),
    (val_sub, "$diplomacy_var", 4),
  (try_end),

  (store_skill_level, ":player_persuasion_skill", "skl_persuasion", "trp_player"),
  (val_add, "$diplomacy_var", ":player_persuasion_skill"),

#4 reasons
  (assign, reg50, 0),
  (assign, reg51, 0),
  (assign, reg52, 0),
  (assign, reg53, 0),

]],

[anyone|plyr, "dplmc_lord_declare_pax_why",
[
(eq, reg50, 0),
], "They have far more holdings, we are not making enough progress.", "dplmc_lord_declare_peace_anything_else",
[(assign, reg50, 1)]],
[anyone|plyr, "dplmc_lord_declare_pax_why",
[
(eq, reg51, 0),
], "We have already reclaimed the objective of the war.", "dplmc_lord_declare_peace_anything_else",
[(assign, reg51, 1)]],
[anyone|plyr, "dplmc_lord_declare_pax_why",
[
(eq, reg52, 0),
], "The bloodshed has gone on long enough. The people are suffering.", "dplmc_lord_declare_peace_anything_else",
[(assign, reg52, 1)]],
[anyone|plyr, "dplmc_lord_declare_pax_why",
[
(eq, reg53, 0),
], "We are fighting on too many fronts simultaneously.", "dplmc_lord_declare_peace_anything_else",
[(assign, reg53, 1)]],

[anyone|plyr, "dplmc_lord_declare_pax_why",
[(str_store_faction_name, s11, "$g_faction_selected"),
], "I mentioned all reasons for peace to be brokered between our realm and {s11}. I truly believe this is a necessary step.", "dplmc_lord_declare_pax_decision",
[
#SB : TODO warscore calculations here
]],

[anyone|plyr, "dplmc_lord_declare_pax_why",
[], "I will be back with more evidence.", "lord_pretalk",
[]],

[anyone, "dplmc_lord_declare_peace_anything_else",
[
], "Interesting, anything else you'd like to contribute?", "dplmc_lord_declare_pax_why",
[]],

[anyone, "dplmc_lord_declare_pax_decision",
[
], "Your words have convinced me. I will send out the heralds - we will no longer fight against the {s11}.", "close_window",
[
  (call_script, "script_change_player_relation_with_troop", "$g_talk_troop", 1),
  (call_script, "script_change_player_honor", 1),
  # (call_script, "script_diplomacy_start_peace_between_kingdoms", "$players_kingdom", "$g_faction_selected", 1),
  (assign, "$g_force_peace_faction_1", "$players_kingdom"),
  (assign, "$g_force_peace_faction_2", "$g_faction_selected"),
  #this is the same mechanic as peace quest from guildmaster, delayed by up to 72h
  (try_begin),
    (eq,"$talk_context",tc_party_encounter), #Added line by zerilius
    (assign, "$g_leave_encounter", 1), #Added line by zerilius
  (try_end),
]],

[anyone, "dplmc_lord_declare_pax_decision",
[
], "No, I am far from convinced. We must keep fighting {s11}.", "close_window",
[
  (call_script, "script_change_player_relation_with_troop", "$g_talk_troop", -1),
  (try_begin),
    (eq,"$talk_context",tc_party_encounter), #Added line by zerilius
    (assign, "$g_leave_encounter", 1), #Added line by zerilius
  (try_end),
]],


##persuade king to declare war
[anyone|plyr,"lord_talk", [(le,"$talk_context", tc_party_encounter),
                       (ge, "$g_talk_troop_faction_relation", 0),
                       #(troop_slot_eq, "$g_talk_troop", slot_troop_is_prisoner, 0),
                       (neg|troop_slot_ge, "$g_talk_troop", slot_troop_prisoner_of_party, 0),
                       (faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "$g_talk_troop"),
                       (eq, "$players_kingdom", "$g_talk_troop_faction"),
                       (eq, "$player_has_homage", 1),
                      ],
"{s66}, you should declare war on a kingdom.", "dplmc_lord_declare_war",[
]],

[anyone, "dplmc_lord_declare_war",
[
(troop_get_slot, ":renown", "trp_player", slot_troop_renown), #renown
(lt, ":renown", 150),
(troop_get_slot, ":relation_to_king", "$g_talk_troop", slot_troop_player_relation),
(lt, ":relation_to_king", 5),
(val_sub, ":relation_to_king", 5),
(assign, ":sum", ":renown"),
(val_mul, ":relation_to_king", 5),
(val_add, ":sum", ":relation_to_king"),
(val_add, ":sum", "$player_honor"),

(try_begin), #debug
  (eq, "$cheat_mode", 1),
  (assign, reg0, ":sum"),
  (display_message, "@{!}DEBUG : sum: {reg0}"),
(try_end),

(lt, ":sum", 300),
], "How can you dare? Who do you think you are? Get out of my sight!", "close_window",
[
(call_script, "script_change_player_relation_with_troop", "$g_talk_troop", -1),
(try_begin),
  (eq,"$talk_context",tc_party_encounter), #Added line by zerilius
  (assign, "$g_leave_encounter", 1), #Added line by zerilius
(try_end),
]],

[anyone, "dplmc_lord_declare_war",
[], "Against whom?", "dplmc_lord_declare_war_kingdoms_select",
[]],


##select war target
[anyone|plyr|repeat_for_factions, "dplmc_lord_declare_war_kingdoms_select",
[
(store_repeat_object, ":faction_no"),
(is_between, ":faction_no", kingdoms_begin, kingdoms_end),
##diplomacy start+
(neq, ":faction_no", "fac_player_supporters_faction"),
(neq, ":faction_no", "$g_talk_troop_faction"),
##diplomacy end+
(neq, ":faction_no", "$players_kingdom"),
(call_script, "script_diplomacy_faction_get_diplomatic_status_with_faction", "$players_kingdom", ":faction_no"),
(ge, reg0, -1),
(faction_slot_eq, ":faction_no", slot_faction_state, sfs_active),
(faction_get_slot, ":leader_no", ":faction_no", slot_faction_leader),
(str_store_troop_name, s10, ":leader_no"),
(str_store_faction_name, s11, ":faction_no"),
],
"{s11}", "dplmc_lord_declare_war_ask_why",
[
(store_repeat_object, "$g_faction_selected"),
(call_script, "script_npc_decision_checklist_peace_or_war", "$players_kingdom", "$g_faction_selected", "trp_player"),
(assign, "$diplomacy_var", reg0),
(val_mul, "$diplomacy_var", -6),
(val_min, "$diplomacy_var", 2),

(try_for_range, ":kingdom", kingdoms_begin, kingdoms_end),
(neq, ":kingdom", "$players_kingdom"),
(neq, ":kingdom", "$g_faction_selected"),
(call_script, "script_diplomacy_faction_get_diplomatic_status_with_faction",  "$players_kingdom", ":kingdom"),
(eq, reg0, -2),
(val_sub, "$diplomacy_var", 4),
(try_end),

(store_skill_level, ":player_persuasion_skill", "skl_persuasion", "trp_player"),
(val_add, "$diplomacy_var", ":player_persuasion_skill"),

(assign, reg50, 0),
(assign, reg51, 0),
(assign, reg52, 0),
(assign, reg53, 0),

(try_begin), #debug
(eq, "$cheat_mode", 1),
(assign, reg0, "$diplomacy_var"),
(display_message, "@{!}DEBUG : diplomacy_var: {reg0}"),
(try_end),
]],

[anyone|plyr, "dplmc_lord_declare_war_kingdoms_select",
[], "Never mind.", "lord_pretalk",
[]],

[anyone, "dplmc_lord_declare_war_ask_why",
[
(str_store_faction_name, s11, "$g_faction_selected"),
##nested diplomacy start+ Fix capitalization
], "Why should I declare war against the {s11}?", "dplmc_lord_declare_war_why",
##nested diplomacy end+
[]],

[anyone|plyr, "dplmc_lord_declare_war_why",
[
(eq, reg50, 0),
], "They are weaker and we can easily beat them.", "dplmc_lord_declare_war_anything_else",
[
(assign, reg50, 1),
(assign, ":persuasion", -1),
(assign, ":player_kingdom_str", 0),
(assign, ":target_kingdom_str", 0),

(try_for_parties, ":party_no"),
(assign, ":party_value", 0),
(try_begin),
   (is_between, ":party_no", towns_begin, towns_end),
   (assign, ":party_value", 3),
(else_try),
   (is_between, ":party_no", castles_begin, castles_end),
   (assign, ":party_value", 2),
(else_try),
   (is_between, ":party_no", villages_begin, villages_end),
   (assign, ":party_value", 1),
(else_try),
   (party_get_template_id, ":template", ":party_no"),
   (eq, ":template", "pt_kingdom_hero_party"),
   (assign, ":party_value", 2),
(try_end),

(store_faction_of_party, ":party_current_faction", ":party_no"),
(try_begin),
  (eq, ":party_current_faction", "$players_kingdom"),
  (val_add, ":player_kingdom_str", ":party_value"),
(else_try),
  (eq, ":party_current_faction", "$g_faction_selected"),
  (val_add, ":target_kingdom_str", ":party_value"),
(try_end),
(try_end),

(try_begin),
(gt, ":player_kingdom_str", ":target_kingdom_str"),
(assign, ":persuasion", 1),
(try_end),

(store_skill_level, ":player_persuasion_skill", "skl_persuasion", "trp_player"),
(val_mul, ":player_persuasion_skill", ":persuasion"),
(val_add, ":persuasion", ":player_persuasion_skill"),
(val_add, "$diplomacy_var", ":persuasion"),

(try_begin), #debug
(eq, "$cheat_mode", 1),
(assign, reg0, ":persuasion"),
(display_message, "@{!}DEBUG : persuasion: {reg0}"),
(assign, reg0, "$diplomacy_var"),
(display_message, "@{!}DEBUG : diplomacy_var: {reg0}"),
(try_end),
]],

[anyone|plyr, "dplmc_lord_declare_war_why",
[
(eq, reg51, 0),
], "We can't tolerate their provocations any longer.", "dplmc_lord_declare_war_anything_else",
[
(assign, reg51, 1),
(assign, ":persuasion", -1),
(call_script, "script_diplomacy_faction_get_diplomatic_status_with_faction", "$players_kingdom", "$g_faction_selected"),
(assign, ":war_peace_truce_status", reg0),

(try_begin),
(eq, ":war_peace_truce_status", -1),
(assign, ":persuasion", 1),
(try_end),
(store_skill_level, ":player_persuasion_skill", "skl_persuasion", "trp_player"),
(val_mul, ":player_persuasion_skill", ":persuasion"),
(val_add, ":persuasion", ":player_persuasion_skill"),
(val_add, "$diplomacy_var", ":persuasion"),

(try_begin), #debug
(eq, "$cheat_mode", 1),
(assign, reg0, ":persuasion"),
(display_message, "@{!}DEBUG : persuasion: {reg0}"),
(assign, reg0, "$diplomacy_var"),
(display_message, "@{!}DEBUG : diplomacy_var: {reg0}"),
(try_end),
]],

[anyone|plyr, "dplmc_lord_declare_war_why",
[
(eq, reg52, 0),
], "They are already in war and currently distracted.", "dplmc_lord_declare_war_anything_else",
[
(assign, reg52, 1),
(assign, ":persuasion", -1),
(try_for_range, ":kingdom", kingdoms_begin, kingdoms_end),
(neq, ":kingdom", "$players_kingdom"),
(neq, ":kingdom", "$g_faction_selected"),
(call_script, "script_diplomacy_faction_get_diplomatic_status_with_faction",  "$g_faction_selected", ":kingdom"),
(eq, reg0, -2),
(assign, ":persuasion", 1),
(try_end),
(store_skill_level, ":player_persuasion_skill", "skl_persuasion", "trp_player"),
(val_mul, ":player_persuasion_skill", ":persuasion"),
(val_add, ":persuasion", ":player_persuasion_skill"),
(val_add, "$diplomacy_var", ":persuasion"),

(try_begin), #debug
(eq, "$cheat_mode", 1),
(assign, reg0, ":persuasion"),
(display_message, "@{!}DEBUG : persuasion: {reg0}"),
(assign, reg0, "$diplomacy_var"),
(display_message, "@{!}DEBUG : diplomacy_var: {reg0}"),
(try_end),
]],

[anyone|plyr, "dplmc_lord_declare_war_why",
[
(eq, reg53, 0),
], "It's the right time to attack.", "dplmc_lord_declare_war_anything_else",
[
(assign, reg53, 1),
(assign, ":persuasion", 1),
(try_for_range, ":kingdom", kingdoms_begin, kingdoms_end),
(neq, ":kingdom", "$g_faction_selected"),
(call_script, "script_diplomacy_faction_get_diplomatic_status_with_faction",  "$players_kingdom", ":kingdom"),
(eq, reg0, -2),
(assign, ":persuasion", -1),
(try_end),
(store_skill_level, ":player_persuasion_skill", "skl_persuasion", "trp_player"),
(val_mul, ":player_persuasion_skill", ":persuasion"),
(val_add, ":persuasion", ":player_persuasion_skill"),
(val_add, "$diplomacy_var", ":persuasion"),

(try_begin), #debug
(eq, "$cheat_mode", 1),
(assign, reg0, ":persuasion"),
(display_message, "@{!}DEBUG : persuasion: {reg0}"),
(assign, reg0, "$diplomacy_var"),
(display_message, "@{!}DEBUG : diplomacy_var: {reg0}"),
(try_end),
]],

[anyone|plyr, "dplmc_lord_declare_war_why",
[
(eq, reg54, 0),
], "We should get back our lost land.", "dplmc_lord_declare_war_anything_else",
[
(assign, reg54, 1),
(assign, ":persuasion", -1),
(try_for_parties, ":party_no"),
(store_faction_of_party, ":party_current_faction", ":party_no"),
(party_get_slot, ":party_original_faction", ":party_no", slot_center_original_faction),
(party_get_slot, ":party_ex_faction", ":party_no", slot_center_ex_faction),
   (eq, ":party_current_faction", "$g_faction_selected"),
   (this_or_next|eq, ":party_original_faction", "$players_kingdom"),
  (eq, ":party_ex_faction", "$players_kingdom"),
  (assign, ":persuasion", 1),
(try_end),
(store_skill_level, ":player_persuasion_skill", "skl_persuasion", "trp_player"),
(val_mul, ":player_persuasion_skill", ":persuasion"),
(val_add, ":persuasion", ":player_persuasion_skill"),
(val_add, "$diplomacy_var", ":persuasion"),

(try_begin), #debug
(eq, "$cheat_mode", 1),
(assign, reg0, ":persuasion"),
(display_message, "@{!}DEBUG : persuasion: {reg0}"),
(assign, reg0, "$diplomacy_var"),
(display_message, "@{!}DEBUG : diplomacy_var: {reg0}"),
(try_end),
]],

[anyone|plyr, "dplmc_lord_declare_war_why",
[
], "I mentioned all reasons for war. Please think about it!", "dplmc_lord_declare_war_decision",
[]],

[anyone|plyr, "dplmc_lord_declare_war_why",
[], "I need to think about that in peace and quiet.", "lord_pretalk",
[]],

[anyone, "dplmc_lord_declare_war_anything_else",
[
], "Well, anything else?", "dplmc_lord_declare_war_why",
[]],

[anyone, "dplmc_lord_declare_war_decision",
[
(troop_get_slot, ":relation_to_king", "$g_talk_troop", slot_troop_player_relation),
(val_sub, ":relation_to_king", 15),
(val_min, ":relation_to_king", 35),
(val_add, "$diplomacy_var", ":relation_to_king"),
##nested diplomacy start+
#If there is currently a treaty, apply a penalty to the persuasion attempt.
(call_script, "script_dplmc_get_faction_truce_length_with_faction", "$players_kingdom", "$g_faction_selected"),
(try_begin),
	(gt, reg0, 0),

    (try_begin),
       (eq, "$cheat_mode", 1),
       (assign, reg0, "$diplomacy_var"),
       (display_message, "@{!}DEBUG : pre-treaty diplomacy_var: {reg0}"),
    (try_end),

        ##TODO: Perhaps re-enable this later, but also balance it with the
        ##lords who would be pleased by the declaration of war.
	#(try_for_range, ":troop_no", heroes_begin, heroes_end),
	#   (troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_hero),
	#   (neq, ":troop_no", "$g_talk_troop"),
	#   (store_troop_faction, ":troop_faction"),
	#   (eq, ":troop_faction", "$g_talk_troop_faction"),
	#   #Would be angered by breaking the treaty
	#   (this_or_next|troop_slot_eq, ":troop_no", slot_lord_reputation_type, lrep_martial),
	#   (this_or_next|troop_slot_eq, ":troop_no", slot_lord_reputation_type, lrep_goodnatured),
	#   (this_or_next|troop_slot_eq, ":troop_no", slot_lord_reputation_type, lrep_selfrighteous),
	#   (this_or_next|troop_slot_eq, ":troop_no", slot_lord_reputation_type, lrep_benefactor), #new for enfiefed commoners
	#   (this_or_next|troop_slot_eq, ":troop_no", slot_lord_reputation_type, lrep_custodian), #new for enfiefed commoners
	#      (troop_slot_eq, ":troop_no", slot_lord_reputation_type, lrep_upstanding),
	#   (val_sub, "$diplomacy_var", 1),
	#(try_end),
    (try_begin),
    (gt, reg0, dplmc_treaty_alliance_days_expire),
      (val_div, "$diplomacy_var", 5),
      (val_min, "$diplomacy_var", 15),
    (else_try),
      (gt, reg0, dplmc_treaty_defense_days_expire),
      (val_div, "$diplomacy_var", 4),
      (val_min, "$diplomacy_var", 17),
    (else_try),
      (gt, reg0, dplmc_treaty_trade_days_expire),
      (val_div, "$diplomacy_var", 3),
      (val_min, "$diplomacy_var", 19),
    (else_try),
      (gt, reg0, dplmc_treaty_truce_days_expire),
      (val_div, "$diplomacy_var", 2),
      (val_min, "$diplomacy_var", 21),
    (try_end),
(try_end),
##diplomacy end+
(store_random_in_range, ":random", 5, 25),

(try_begin), #debug
(eq, "$cheat_mode", 1),
(assign, reg0, ":random"),
(display_message, "@{!}DEBUG : random: {reg0}"),
(assign, reg0, "$diplomacy_var"),
(display_message, "@{!}DEBUG : final diplomacy_var: {reg0}"),
(try_end),

(gt, "$diplomacy_var", ":random"),

##diplomacy start+
#Replace "sword" with a culturally-appropriate alternative (TODO: does "gird" make sense for everything?)
(call_script, "script_dplmc_print_cultural_word_to_sreg", "$g_talk_troop", DPLMC_CULTURAL_TERM_WEAPON, s0),
], "Gird your {s0} we are going to war against {s11}.", "close_window",
##nested diplomacy end+
[
(call_script, "script_change_player_relation_with_troop", "$g_talk_troop", 1),
(call_script, "script_diplomacy_start_war_between_kingdoms", "$players_kingdom", "$g_faction_selected", 1),
(try_begin),
  (eq,"$talk_context",tc_party_encounter), #Added line by zerilius
  (assign, "$g_leave_encounter", 1), #Added line by zerilius
(try_end),
]],

[anyone, "dplmc_lord_declare_war_decision",
[
], "No, I am not convinced. We won't attack {s11}.", "close_window",
[
(call_script, "script_change_player_relation_with_troop", "$g_talk_troop", -1),
(try_begin),
  (eq,"$talk_context",tc_party_encounter), #Added line by zerilius
  (assign, "$g_leave_encounter", 1), #Added line by zerilius
(try_end),
]],

##affiliate to family
#leave
[anyone|plyr,"lord_talk_ask_something_2", [
 (call_script, "script_dplmc_is_affiliated_family_member", "$g_talk_troop"),
 (eq, reg0, 1),],
"I have done my share with your family, I want to be discharged of my pledge.", "dplmc_lord_family_affiliate_end",[
]],

[anyone,"dplmc_lord_family_affiliate_end", [],
"What did you say?.", "script_dplmc_affiliate_confirm",[
]],

[anyone|plyr,"script_dplmc_affiliate_confirm", [],
"I do not want to be related to your house anymore.", "dplmc_lord_family_affiliate_leave",[
]],

[anyone|plyr,"script_dplmc_affiliate_confirm", [],
"Oh nothing.", "lord_pretalk",[
]],

[anyone,"dplmc_lord_family_affiliate_leave", [],
"You dare stand and face me to declaim your disavowal ! Well, your betrayal cannot make up for frankness. You disappoint the confidence my clan have put in you, {playername}. Each will condemn you in all conscience... but since I avouched your phoney allegiance, I will personally report to Calradia noblemen about your frivolous plot.", "close_window",[
(call_script, "script_dplmc_affiliate_end", 0),
]],


#join
[anyone|plyr,"lord_talk_ask_something_2", [
(store_current_hours, ":current_hours"),
(val_sub, ":current_hours", 24 * 6),
(ge, ":current_hours", "$g_last_affiliate_attempt"),

(ge, "$g_talk_troop_faction_relation", 0),
(neg|troop_slot_ge, "$g_talk_troop", slot_troop_prisoner_of_party, 0),
(eq, "$players_kingdom", "$g_talk_troop_faction"),
(eq, "$player_has_homage", 1),
##diplomacy start+
#(eq, "$g_player_affiliated_troop", 0),
(lt, "$g_player_affiliated_troop", 1),
##diplomacy end+
(troop_slot_eq, "$g_talk_troop", dplmc_slot_troop_affiliated, 0),
(call_script, "script_troop_get_player_relation", "$g_talk_troop"),
(gt, reg0, 0),
(call_script, "script_troop_get_family_relation_to_troop", "trp_player", "$g_talk_troop"),
(le, reg0, 0),
                      ],
"I have great respect for your lineage, I wish to be affiliated to your family.", "dplmc_lord_family_affiliate",[
]],

[anyone, "dplmc_lord_family_affiliate",
[
(str_clear, s10),
(assign, ":approved", 0),
(troop_get_slot, ":lord_renown", "$g_talk_troop", slot_troop_renown),
(try_begin),
(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_martial),
(troop_get_slot, ":player_renown", "trp_player", slot_troop_renown),
(try_begin),
  (ge, ":player_renown", ":lord_renown"),
  (str_store_string, s10, "@You have shown great strength on the battlefield. But why should I enlist you within us?"),
  (assign, ":approved", 1),
(try_end),

(else_try),
##diplomacy start+ Add support for additional types
(this_or_next|troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_ambitious),
##diplomacy end+
(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_cunning),
(assign, ":has_center", 0),
(try_for_range, ":center_no", centers_begin, centers_end),
  (this_or_next|party_slot_eq, ":center_no", slot_party_type, spt_town),
  (party_slot_eq, ":center_no", slot_party_type, spt_castle),
  (party_slot_eq, ":center_no", slot_town_lord, "trp_player"),
  (assign, ":has_center", 1),
(try_end),
(try_begin),
  (eq, ":has_center", 1),
  (str_store_string, s10, "@All of life is about pros and cons. Why would we allow you to be our fellow?"),
  (assign, ":approved", 1),
(try_end),
(else_try),
(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_debauched),
(try_begin),
  (le, "$player_honor", -10),
  (str_store_string, s10, "@I know, people do fear your harshness. Should we though?"),
  (assign, ":approved", 1),
(try_end),
(else_try),
##diplomacy start+ Add support for additional types
(this_or_next|troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_moralist),
##diplomacy end+
(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_upstanding),
(try_begin),
  (ge, "$player_honor", 10),
  (str_store_string, s10, "@Indeed, I have heard of your loyalty and valor. But is it enough to join us?"),
  (assign, ":approved", 1),
(try_end),
(else_try),
##diplomacy start+ Add support for additional types
(this_or_next|troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_conventional),
##diplomacy end+
(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_goodnatured),
(try_begin),
  (ge, "$g_talk_troop_faction_relation", 60),
  (str_store_string, s10, "@I'm glad you want to support us. But, would it be wise for you, to affiliate to our family?"),
  (assign, ":approved", 1),
(try_end),
(else_try),
(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_selfrighteous),
(try_begin),
  (store_troop_gold, ":wealth", "trp_household_possessions"),
  (store_troop_gold, ":cash", "trp_player"),
  (val_add, ":wealth", ":cash"),
  (val_sub, ":wealth", "$g_player_debt_to_party_members"),

  (val_mul, ":lord_renown", 65),
  (ge, ":wealth", ":lord_renown"),

  (str_store_string, s10, "@Beside your wealth, how could you possibly serve me and my family?"),
  (assign, ":approved", 1),
(try_end),
(else_try),
(try_begin),
  (call_script, "script_troop_get_player_relation", "$g_talk_troop"),
  (gt, reg0, 18),
  ##diplomacy start+ Reworded
  #(str_store_string, s10, "@My friend, I see you reasoning. But would you really risk our friendship on partnership?"),
  (str_store_string, s10, "@My friend, I see your reasoning. But would you really risk straining our friendship by entering into a formal partnership?"),
  ##diplomacy end+
  (assign, ":approved", 1),
(try_end),
(try_end),
(eq, ":approved", 1),
],
"{!}{s10}", "dplmc_lord_family_affiliate_response",[
]],

##diplomacy start+ Give a less confusing error message when the lord likes the player
[anyone, "dplmc_lord_family_affiliate",
[(ge, "$g_talk_troop_relation", 0),
(assign, reg0, 0),
(try_begin),
  (ge, "$g_talk_troop_relation", 18),
  (assign, reg0, 1),
(try_end),
],
"I {reg0?like you well enough:have nothing against you}, but I just don't think it would work out, so I will not sponsor you.", "lord_pretalk",[
]],
##diplomacy end+

[anyone, "dplmc_lord_family_affiliate",
[
],
"Not a chance. Since I dislike you, I will not sponsor you.", "lord_pretalk",[
]],

[anyone|plyr, "dplmc_lord_family_affiliate_response",
[
],
"Please {reg65?my lady:sire}, let me serve your family.", "dplmc_lord_family_affiliate_persuasion",[
]],

[anyone|plyr, "dplmc_lord_family_affiliate_response",
[
],
"On second thought, I have to reconsider this decision.", "lord_pretalk",[
]],

[anyone, "dplmc_lord_family_affiliate_persuasion",
[
(troop_get_slot, ":lord_renown", "$g_talk_troop", slot_troop_renown),
(store_skill_level, ":player_persuasion_skill", "skl_persuasion", "trp_player"),
(val_add, ":player_persuasion_skill", 1),

(call_script, "script_troop_get_player_relation", "$g_talk_troop"),
(assign, ":relation", 0),
(try_for_range, ":aristocrat", lords_begin, kingdom_ladies_end),
(neq, ":aristocrat", "$g_talk_troop"),
(call_script, "script_troop_get_family_relation_to_troop", ":aristocrat", "$g_talk_troop"),
(gt, reg0, 0),
(call_script, "script_troop_get_player_relation", "$g_talk_troop"),
(val_add, ":relation", reg0),
(try_end),

(ge, ":relation", 0),

(assign, ":approved", 0),
(try_for_range, ":skill_level", 0, ":player_persuasion_skill"),
(store_random_in_range, ":random_lord_renown", 0, ":lord_renown"),
(store_random_in_range, ":random_lord_relation", 0, ":relation"),
(val_add, ":random_lord_relation", ":skill_level"),

(try_begin),
  (le, ":random_lord_renown", ":random_lord_relation"),
  (assign, ":approved", 1),
(try_end),
(try_end),

(eq, ":approved", 1),

(str_clear, s10),
(try_begin),
  (troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_martial),
  (call_script, "script_dplmc_print_cultural_word_to_sreg", "$g_talk_troop", DPLMC_CULTURAL_TERM_WEAPON, s10),
  (str_store_string, s10, "@Agreed! Your words convince me as much as your {s10}."), #SB : typo, string
(else_try),
  (troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_cunning),
  (str_store_string, s10, "@I trust you, my family could use your resourcefulness. Together we will spread our influence all over Calradia."),
(else_try),
  (troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_debauched),
  (str_store_string, s10, "@May God have mercy on the souls of our enemies, because we won't!"),
(else_try),
  (troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_upstanding),
  (str_store_string, s10, "@So be it. We are honored to accept you into our family."),
(else_try),
  (troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_goodnatured),
  (str_store_string, s10, "@ I will appreciate you as much as a {son/daughter}."), #SB : gender string
(else_try),
  (troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_selfrighteous),
  (str_store_string, s10, "@I accept your request. We will back you if you in turn support my family."),
(else_try), #SB : worthy fellow
  (str_store_string, s10, "@Since you are worthy of our esteem, you are welcome to our family."),
(try_end),
],
"{!}{s10}", "dplmc_lord_family_affiliate_thank",[
(assign, "$g_player_affiliated_troop", "$g_talk_troop"),
(store_current_hours, ":cur_hours"),
(assign, "$g_player_affiliated_time", ":cur_hours"),

(try_for_range, ":family_member", lords_begin, kingdom_ladies_end),
  (call_script, "script_dplmc_is_affiliated_family_member", ":family_member"),
  (gt, reg0, 0),
  (troop_set_slot, ":family_member", dplmc_slot_troop_affiliated, 1),
(try_end),
]],

[anyone, "dplmc_lord_family_affiliate_persuasion",
[],
#SB : fix string
"Maybe some of my family doesn't think too highly of you. Or maybe I just need some time to get used to the idea. Either way, let's talk further about it next week.", "lord_pretalk",
[
(store_current_hours, "$g_last_affiliate_attempt"),
]],

[anyone|plyr, "dplmc_lord_family_affiliate_thank",
[],
"I am honored and grateful to be affiliated with your family.", "dplmc_lord_family_affiliate_conclusion",[
]],

[anyone, "dplmc_lord_family_affiliate_conclusion",
[],
"You have pledged allegiance to our family, now all of my brethen are yours as well. Our fellowship is about knighthood : Never betray your family, always protect it.", "lord_pretalk",[

(try_for_range, ":aristocrat", lords_begin, kingdom_ladies_end),
(neq, ":aristocrat", "$g_talk_troop"),
(call_script, "script_troop_get_family_relation_to_troop", ":aristocrat", "$g_talk_troop"),
(gt, reg0, 0),
(call_script, "script_change_player_relation_with_troop", ":aristocrat", 10),
(try_end),

(try_for_range, ":kingdom_hero", active_npcs_begin, active_npcs_end),
(call_script, "script_troop_get_relation_with_troop", "$g_talk_troop", ":kingdom_hero"),
(lt, reg0, -10),
(call_script, "script_change_player_relation_with_troop", ":kingdom_hero", -8),
(try_end),
]],


##move court
[anyone|plyr, "spouse_talk",
[
(assign, ":has_fief", walled_centers_end),
(troop_get_slot, ":cur_residence", "$g_talk_troop", slot_troop_cur_center),
(try_for_range, ":center_no", walled_centers_begin, ":has_fief"),
#SB : skip current center in count
  (neq, ":center_no", ":cur_residence"),
  # (neq, ":center_no", "$current_town"),
  (party_get_slot,  ":lord_troop_id", ":center_no", slot_town_lord),
  (eq, ":lord_troop_id", "trp_player"),
  (assign, ":has_fief", walled_centers_begin), #break loop
(try_end),
(neq, ":has_fief", walled_centers_end),
],
"I want to move our residence.", "dplmc_spouse_move_residence_ask",[
]],


[anyone, "dplmc_spouse_move_residence_ask",
[
], #SB : househould -> "to start", describe requirements
"To move our residence will require a small refurbishment. In particular, we need a set of tools and two bolts of fabric to start - piles of wool, yards of linen or luxurious velvet.", "dplmc_spouse_move_residence_tools",[

#SB : moved counter up here

(call_script, "script_dplmc_count_item_for_court", "trp_player", -1, -1),
(assign, "$diplomacy_var", reg0),
(assign, "$diplomacy_var2", reg1),
(call_script, "script_dplmc_count_item_for_court", "trp_household_possessions", -1, -1),
(val_add, "$diplomacy_var", reg0),
(val_add, "$diplomacy_var2", reg1),
]],

[anyone|plyr, "dplmc_spouse_move_residence_tools",
[
  (ge, "$diplomacy_var", 2),
  (ge, "$diplomacy_var2", 1), #SB : one set of tools
],
"Ok, I think we have all necessary things to establish the residence.", "dplmc_spouse_move_residence_select_ask",[
]],

[anyone|plyr, "dplmc_spouse_move_residence_tools",
[
  #SB : set up registers for displaying what you're missing
  (this_or_next|lt, "$diplomacy_var", 2),
  (lt, "$diplomacy_var2", 1),
  (try_begin),
    (lt, "$diplomacy_var2", 1),
    (assign, reg10, 1),
  (else_try),
    (assign, reg10, 0),
  (try_end),
  
  (try_begin),
    (lt, "$diplomacy_var", 2),
    (assign, reg12, 1),
    (try_begin), #middle phrase
      (eq, reg10, 0),
      (assign, reg11, 0),
    (else_try),
      (assign, reg11, 1),
    (try_end),
  (else_try),
    (assign, reg12, 0),
    (assign, reg11, 0),
  (try_end),
],
"Well, I guess I have to get the {reg10?set of tools:}{reg11? and the :}{reg12?decoration material:} first.", "spouse_pretalk",[
]],

[anyone, "dplmc_spouse_move_residence_select_ask",
[],
"Where do you want to move the residence?", "dplmc_spouse_move_residence_select",[
]],

[anyone|plyr|repeat_for_parties, "dplmc_spouse_move_residence_select",
[
(store_repeat_object, ":center"),
(is_between, ":center", walled_centers_begin, walled_centers_end),
(troop_get_slot, ":cur_residence", "$g_talk_troop", slot_troop_cur_center),
(neq, ":center", ":cur_residence"),
(party_slot_eq, ":center", slot_town_lord, "trp_player"),
(str_store_party_name, s6, ":center"),
],
"{s6}.", "dplmc_spouse_move_residence_ask_confirm",[
(store_repeat_object, "$diplomacy_var"),
]],

[anyone|plyr, "dplmc_spouse_move_residence_select",
[],
"I changed my mind.", "spouse_pretalk",[
]],

[anyone, "dplmc_spouse_move_residence_ask_confirm",
[
 (str_store_party_name, s6, "$diplomacy_var"),
],
"Are you sure that you want to move your residence to {s6}?", "dplmc_spouse_move_residence_confirm",[
]],

[anyone|plyr, "dplmc_spouse_move_residence_confirm",
[],
"Yes,  please arrange everything.", "dplmc_spouse_move_residence_moved",[

#SB : remove from household before inv
(call_script, "script_dplmc_count_item_for_court", "trp_household_possessions", 2, 1),
(call_script, "script_dplmc_count_item_for_court", "trp_player", reg0, reg1),
# (troop_remove_items, "trp_household_possessions", "itm_wool_cloth", 2),
# (troop_remove_item, "trp_household_possessions", "itm_tools"),

##diplomacy start+
#Fix bug: do not set spouse's current center if spouse is active or a party member
(try_begin),
  (troop_get_slot, ":player_spouse", "trp_player", slot_troop_spouse),
  (troop_slot_eq, ":player_spouse", slot_troop_occupation, slto_kingdom_lady),
##diplomacy end+
  (troop_set_slot, "$g_talk_troop", slot_troop_cur_center, "$diplomacy_var"),
##diplomacy start+
(try_end),
##diplomacy end+
#SB : todo move all other kingdom ladies, applicants
]],

[anyone|plyr, "dplmc_spouse_move_residence_confirm",
[],
"No.", "spouse_pretalk",[
]],

[anyone, "dplmc_spouse_move_residence_moved",
[],
"As you wish, I will move the residence to {s6}.", "spouse_pretalk",[
]],

##threaten with war
[anyone|plyr, "minister_diplomatic_initiative_type_select",
[
(call_script, "script_diplomacy_faction_get_diplomatic_status_with_faction", "$players_kingdom", "$g_faction_selected"),
(is_between, reg0, -1, 1), #no war, no truce
(gt, "$g_player_chamberlain", 0),
],
"Threaten them with war and see what you can squeeze out of them.", "minister_diplomatic_emissary",
[(assign, "$g_initiative_selected", dplmc_npc_mission_threaten_request)]],

##companion returning after threaten request
[anyone, "event_triggered", [
(store_conversation_troop, "$map_talk_troop"),
(eq, "$map_talk_troop", "$npc_to_rejoin_party"),
(troop_slot_eq, "$g_talk_troop", slot_troop_current_mission, dplmc_npc_mission_threaten_request),
(troop_get_slot, ":string", "$map_talk_troop", slot_troop_honorific),
(str_store_string, s21, ":string"),
(troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
(str_store_faction_name, s31, ":mission_object"),
(call_script, "script_npc_decision_checklist_peace_or_war", ":mission_object", "fac_player_supporters_faction", "$g_talk_troop"),
(assign, "$g_mission_result", reg0),
],
"Well, {s21}, at last I've found you. I have returned from my mission to {s31}.","dplmc_companion_threaten_request_response",
[
(troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
(store_relation, ":player_relation", ":mission_object", "fac_player_supporters_faction"),
(val_sub, ":player_relation", 3),
(val_max, ":player_relation", 0),
(set_relation, ":mission_object", "fac_player_supporters_faction", ":player_relation"),
]],

##response to threaten request
[anyone, "dplmc_companion_threaten_request_response", [
(troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
(gt, "$g_player_chamberlain", 0),
(call_script, "script_diplomacy_faction_get_diplomatic_status_with_faction", "$players_kingdom", ":mission_object"),
(neq, reg0, -2), #no war
(ge, "$g_mission_result", 2), #doesn't want war with us
(store_random_in_range, ":random", 1000, 8000),

(val_div, ":random", 100),
(val_mul, ":random", 100),
#SB : proper script call
(call_script, "script_game_get_money_text", ":random"),
(assign, "$diplomacy_var", ":random"),
# (str_store_string, s21, "@{!}{reg0}"),
],
"They paid {s1} and are expecting that you leave them alone. I agreed on a truce of 40 days.","companion_rejoin_response",
[
  (call_script, "script_dplmc_pay_into_treasury", "$diplomacy_var"),
  (troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
  (call_script, "script_diplomacy_start_peace_between_kingdoms", ":mission_object", "fac_player_supporters_faction", 1),
  (call_script, "script_change_troop_renown", "$g_talk_troop", dplmc_companion_emissary_renown), #SB : renown gain
]],

##response to threaten request
[anyone, "dplmc_companion_threaten_request_response", [
(troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
(call_script, "script_diplomacy_faction_get_diplomatic_status_with_faction", "$players_kingdom", ":mission_object"),
(neq, reg0, -2), #no war
(le, "$g_mission_result", 0), #they want war or are undecided
],
"They send you a declaration of war.","companion_rejoin_response", [
  (troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
  (call_script, "script_diplomacy_start_war_between_kingdoms", ":mission_object", "fac_player_supporters_faction", 1),
  (call_script, "script_change_troop_renown", "$g_talk_troop", dplmc_companion_emissary_renown * -1), #SB : renown loss
]],

##response to threaten request
[anyone, "dplmc_companion_threaten_request_response", [],
"They are not willing to fold facing your threats.","companion_rejoin_response", [
  # (call_script, "script_change_troop_renown", "$g_talk_troop", -1), #SB : renown loss
 ]],

##send a gift to another kingdom
[anyone|plyr, "minister_diplomatic_initiative_type_select",
[],
"I want to send a gift.", "dplmc_minister_gift_type",
[(assign, "$g_initiative_selected", npc_mission_peace_request)]],


[anyone, "dplmc_minister_gift_type",
[
(gt, "$g_player_chamberlain", 0),
(call_script, "script_cf_has_companion_emissary"), #SB : script call

],
"We can send them some excellent horses from the best horse breeder in our kingdom or we can hand over a fief.", "dplmc_minister_gift_type_select",
[]],

[anyone, "dplmc_minister_gift_type",
[
(le, "$g_player_chamberlain", 0),
(call_script, "script_cf_has_companion_emissary"), #SB : script call
],
"We currently only have the option to hand over a fief since we don't have a chamberlain.", "dplmc_minister_gift_type_select",
[]],

##send few horses
[anyone|plyr, "dplmc_minister_gift_type_select",
[
(gt, "$g_player_chamberlain", 0),
(store_troop_gold, ":gold", "trp_household_possessions"),
(try_begin),
(lt, ":gold", 3000),
(store_troop_gold, ":gold", "trp_player"),
(try_end),
(ge, ":gold", 3000),
],
"Send horses for 3000 denars.", "minister_diplomatic_emissary",
[
(assign, "$g_initiative_selected", dplmc_npc_mission_gift_horses_request),
(assign, "$diplomacy_var", 3000), # 6000 denars
]],

##send many horses
[anyone|plyr, "dplmc_minister_gift_type_select",
[
(gt, "$g_player_chamberlain", 0),
(store_troop_gold, ":gold", "trp_household_possessions"),
(try_begin),
(lt, ":gold", 6000),
(store_troop_gold, ":gold", "trp_player"),
(try_end),
(ge, ":gold", 6000),
],
"Send horses for 6000 denars.", "minister_diplomatic_emissary",
[
(assign, "$g_initiative_selected", dplmc_npc_mission_gift_horses_request),
(assign, "$diplomacy_var", 6000), # 6000 denars
]],

##hand over a fief
[anyone|plyr, "dplmc_minister_gift_type_select",
[
#SB : check eligibility
(call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", "$players_kingdom"),
(ge, reg0, DPLMC_FACTION_STANDING_LEADER_SPOUSE),
(assign, ":has_fief", centers_end),
(try_for_range, ":center_no", centers_begin, ":has_fief"),
  (neq, ":center_no", "$g_player_court"),
  (store_faction_of_party, ":center_faction", ":center_no"),
  (eq, ":center_faction", "$players_kingdom"),
  (assign, ":has_fief", -1), #loop break
(try_end),
(neq, ":has_fief", centers_end),
],
"Hand over a fief.", "dplmc_minister_gift_fief",
[]],

##never mind
[anyone|plyr, "dplmc_minister_gift_type_select", [], "Never mind.", "minister_pretalk",[]],

##ask which fief to hand over
[anyone, "dplmc_minister_gift_fief", [],
"Which fief do you want to hand over?", "dplmc_minister_gift_fief_select",
[]],

#SB : nevermind
[anyone|plyr, "dplmc_minister_gift_fief_select", [],
"On second thought, I would rather keep these fiefs.", "minister_pretalk",
[]],

##select the fief to hand over
[anyone|plyr|repeat_for_parties, "dplmc_minister_gift_fief_select",
[
(store_repeat_object, ":center_no"),
(is_between, ":center_no", centers_begin, centers_end),
(neq, ":center_no", "$g_player_court"),
(store_faction_of_party, ":center_faction", ":center_no"),
##diplomacy start+ Handle player is co-ruler of faction
##OLD:
#(eq, ":center_faction", "fac_player_supporters_faction"),
##NEW:
(call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", ":center_faction"),
(ge, reg0, DPLMC_FACTION_STANDING_LEADER_SPOUSE),
##diplomacy end+
(str_store_party_name, s1, ":center_no"),

],"{s1}", "minister_diplomatic_emissary",
[
(store_repeat_object, "$diplomacy_var"),
(assign, "$g_initiative_selected", dplmc_npc_mission_gift_fief_request),
]],

##dispatch emissary to bring gift
[anyone, "minister_emissary_dispatch",
[
(str_store_troop_name, s11, "$g_emissary_selected"),
(str_store_faction_name, s12, "$g_faction_selected"),
(this_or_next|eq, "$g_initiative_selected", dplmc_npc_mission_gift_fief_request),
(eq, "$g_initiative_selected", dplmc_npc_mission_gift_horses_request),
(str_store_string, s14, "str_dplmc_bring_gift"),
], "Very well -- I shall send {s11} to the {s12} to {s14}.", "minister_diplomatic_dispatch_confirm",[
]],

##companion returning after gift request
[anyone, "event_triggered", [
(store_conversation_troop, "$map_talk_troop"),
(eq, "$map_talk_troop", "$npc_to_rejoin_party"),
(troop_get_slot, ":mission", "$g_talk_troop", slot_troop_current_mission),
(this_or_next|eq, ":mission", dplmc_npc_mission_gift_fief_request),
(eq, ":mission", dplmc_npc_mission_gift_horses_request),
(troop_get_slot, ":string", "$map_talk_troop", slot_troop_honorific),
(str_store_string, 21, ":string"),
(troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
(str_store_faction_name, s31, ":mission_object"),
],
"Well, {s21}, at last I've found you. I have returned from my mission to {s31}. They were agreeably surprised.","companion_rejoin_response", [
(troop_get_slot, ":dipomacy_var", "$g_talk_troop", dplmc_slot_troop_mission_diplomacy),
(troop_get_slot, ":mission", "$g_talk_troop", slot_troop_current_mission),
(try_begin),
(troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
(eq, ":mission", dplmc_npc_mission_gift_fief_request),
(call_script, "script_give_center_to_faction", ":dipomacy_var", ":mission_object"),
(assign, ":concession_value", 1),
(try_begin),
 (is_between, ":dipomacy_var", towns_begin, towns_end),
 (assign, ":concession_value", 6),
(else_try),
  (is_between, ":dipomacy_var", castles_begin, castles_end),
  (assign, ":concession_value", 4),
(else_try),
  (is_between, ":dipomacy_var", villages_begin, villages_end),
  (assign, ":concession_value", 2),
(try_end),
(call_script, "script_change_troop_renown", "trp_player", ":concession_value"),
(val_mul, ":concession_value", 2),
(call_script, "script_change_troop_renown", "$g_talk_troop", ":concession_value"),
(call_script, "script_change_player_relation_with_faction", ":mission_object", ":concession_value"),
(else_try),
(eq, ":mission", dplmc_npc_mission_gift_horses_request),
(try_begin),
  (le, ":dipomacy_var", 3000),
  (call_script, "script_change_player_relation_with_faction", ":mission_object", 2),
  (call_script, "script_change_troop_renown", "trp_player", 1),
  (call_script, "script_change_troop_renown", "$g_talk_troop", 5),
(else_try),
  (gt, ":dipomacy_var", 3000),
  (call_script, "script_change_player_relation_with_faction", ":mission_object", 4),
  (call_script, "script_change_troop_renown", "trp_player", 2),
  (call_script, "script_change_troop_renown", "$g_talk_troop", 10),
(try_end),
(try_end),
]],

##prisoner exchange mission
[anyone|plyr, "minister_talk",
[
(is_between, "$g_player_minister", active_npcs_begin, kingdom_ladies_end),
],
"I wish to exchange a prisoner.", "dplmc_minister_exchange_prisoner_ask",
[]],

## ask for prisoner
[anyone, "dplmc_minister_exchange_prisoner_ask",
[
(call_script, "script_cf_has_companion_emissary"), #SB : script call

],
"Which prisoner do you want to exchange?", "dplmc_minister_exchange_prisoner_select",
[]],

[anyone, "dplmc_minister_exchange_prisoner_ask",
[
],
"Unfortunately, there is no one to send right now.", "minister_pretalk",
[]],

##select enemy prisoner
[anyone|plyr|repeat_for_troops, "dplmc_minister_exchange_prisoner_select",
[
(store_repeat_object, ":troop_no"),
(troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_hero),
(troop_get_slot, ":party", ":troop_no", slot_troop_prisoner_of_party),
(is_between, ":party", walled_centers_begin, walled_centers_end),
(party_slot_eq, ":party", slot_town_lord, "trp_player"),
(str_store_troop_name, s10, ":troop_no"),
(store_faction_of_troop, ":faction_no", ":troop_no"),
(str_store_faction_name, s11, ":faction_no"),
],
"{s10} of {s11}", "dplmc_minister_exchange_prisoner_lord_ask",
[
(store_repeat_object, "$diplomacy_var"),
(store_faction_of_troop, "$g_faction_selected", "$diplomacy_var"),
(assign, "$g_initiative_selected", dplmc_npc_mission_prisoner_exchange)
]],

[anyone|plyr, "dplmc_minister_exchange_prisoner_select",
[],
"Nobody.", "minister_pretalk",
[]],

[anyone, "dplmc_minister_exchange_prisoner_lord_ask",
[
],
"Which of our lords do you like to you want to set free?", "dplmc_minister_exchange_prisoner_lord_select",
[]],

##select own prisoner
[anyone|plyr|repeat_for_troops, "dplmc_minister_exchange_prisoner_lord_select",
[
(store_repeat_object, ":troop_no"),
(troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_hero),
(store_faction_of_troop, ":troop_faction", ":troop_no"),
##diplomacy start+ Handle player is co-ruler of kingdom
##OLD:
#(eq, ":troop_faction", "fac_player_supporters_faction"),
##NEW:
(call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", ":troop_faction"),
(ge, reg0, DPLMC_FACTION_STANDING_LEADER_SPOUSE),
##diplomacy end+
(troop_get_slot, ":party", ":troop_no", slot_troop_prisoner_of_party),
(is_between, ":party", walled_centers_begin, walled_centers_end),
(store_faction_of_party, ":party_faction", ":party"),
(eq, ":party_faction", "$g_faction_selected"),
(str_store_troop_name, s10, ":troop_no"),
],
"{s10}.", "dplmc_minister_prisoner_emissary",
[
(store_repeat_object, "$diplomacy_var2"),
]],

[anyone|plyr, "dplmc_minister_exchange_prisoner_lord_select",
[],
"Nobody.", "minister_pretalk",
[]],

[anyone, "dplmc_minister_prisoner_emissary",
[], "Who shall negotiate the exchange?", "minister_emissary_select",
[]],

##exchange prisoner
[anyone, "minister_emissary_dispatch",
[
(str_store_troop_name, s11, "$g_emissary_selected"),
(str_store_faction_name, s12, "$g_faction_selected"),
(eq, "$g_initiative_selected", dplmc_npc_mission_prisoner_exchange),
(str_store_troop_name, s10, "$diplomacy_var"),
(str_store_troop_name, s11, "$diplomacy_var2"),
(str_store_string, s14, "str_dplmc_exchange_prisoner"),
], "Very well -- I shall send {s11} to the {s12} to {s14}.", "minister_diplomatic_dispatch_confirm",[]],

##companion returning after exchange request
[anyone, "event_triggered", [
(store_conversation_troop, "$map_talk_troop"),
(eq, "$map_talk_troop", "$npc_to_rejoin_party"),

(troop_get_slot, ":mission", "$g_talk_troop", slot_troop_current_mission),
  (eq, ":mission", dplmc_npc_mission_prisoner_exchange),

(troop_get_slot, ":enemy_prisoner", "$g_talk_troop", dplmc_slot_troop_mission_diplomacy),
(troop_get_slot, ":own_prisoner", "$g_talk_troop", dplmc_slot_troop_mission_diplomacy2),

(troop_get_slot, ":own_prison", ":enemy_prisoner", slot_troop_prisoner_of_party),
(troop_get_slot, ":enemy_prison", ":own_prisoner", slot_troop_prisoner_of_party),
(is_between, ":own_prison", walled_centers_begin, walled_centers_end),
(is_between, ":enemy_prison", walled_centers_begin, walkers_end),


(call_script, "script_calculate_ransom_amount_for_troop", ":enemy_prisoner"),
(assign, ":enemy_value", reg0),
(call_script, "script_calculate_ransom_amount_for_troop", ":own_prisoner"),
(assign, ":own_value", reg0),
(ge, ":enemy_value", ":own_value"),

(troop_get_slot, ":string", "$map_talk_troop", slot_troop_honorific),
(str_store_string, 21, ":string"),
(str_store_troop_name, s32, ":enemy_prisoner"),
(str_store_troop_name, s33, ":own_prisoner"),
##diplomacy start+ Make pronouns correct
(call_script, "script_dplmc_store_troop_is_female", ":enemy_prisoner"),
(assign, reg4, reg0),
               ],#Next line, "exchange {s32} against {s33}"  -> "exchange {s32} for {s33}"
"Well, {s21}, at last I've found you. They agreed to exchange {s32} for {s33}. {s33} has accompanied me back here. Do you want to set {s32} free?","dplmc_companion_prisoner_exchange_confirm", [

        (troop_get_slot, ":own_prisoner", "$g_talk_troop", dplmc_slot_troop_mission_diplomacy2),
        #SB : affiliation increase for either options
        (set_show_messages, 0),
        (try_for_range, ":affiliated", lords_begin, kingdom_ladies_end),
          (neq, ":affiliated", ":own_prisoner"),
          (call_script, "script_dplmc_is_affiliated_family_member", ":affiliated"),
          (gt, reg0, 0),
          (call_script, "script_change_player_relation_with_troop", ":affiliated", 1),
        (try_end),
        (set_show_messages, 1),
              ]],
##diplomacy end+


[anyone|plyr, "dplmc_companion_prisoner_exchange_confirm",
[],
##diplomacy start+ correct pronount using reg4
"Yes, set {reg4?her:him} free at once.", "companion_rejoin_response",
##diplomacy end+
[  (troop_get_slot, ":enemy_prisoner", "$g_talk_troop", dplmc_slot_troop_mission_diplomacy),
(troop_get_slot, ":own_prisoner", "$g_talk_troop", dplmc_slot_troop_mission_diplomacy2),
(call_script, "script_remove_troop_from_prison", ":enemy_prisoner"),
(call_script, "script_remove_troop_from_prison", ":own_prisoner"),
(str_store_troop_name, s7, ":enemy_prisoner"),
(display_message, "str_dplmc_has_been_set_free"),
(str_store_troop_name, s7, ":own_prisoner"),
(display_message, "str_dplmc_has_been_set_free"),
(call_script, "script_change_player_relation_with_troop", ":own_prisoner", 3),
(troop_get_slot, ":reputation", ":enemy_prisoner", slot_lord_reputation_type),
(try_begin), #SB : reputation representing gratefulness
  (neg|is_between, ":reputation", lrep_quarrelsome, lrep_debauched),
  (call_script, "script_change_player_relation_with_troop", ":enemy_prisoner", 1),
(try_end),
(call_script, "script_change_player_honor", 1),
(call_script, "script_update_troop_notes", ":enemy_prisoner"),
(call_script, "script_update_troop_notes", ":own_prisoner"),
]],

[anyone|plyr, "dplmc_companion_prisoner_exchange_confirm",
[],
##diplomacy start+ correct pronount using reg4
"I think not. Back to the dungeons!", "companion_rejoin_response",
##diplomacy end+
[
(troop_get_slot, ":enemy_prisoner", "$g_talk_troop", dplmc_slot_troop_mission_diplomacy),
(troop_get_slot, ":own_prisoner", "$g_talk_troop", dplmc_slot_troop_mission_diplomacy2),
(troop_set_slot, ":own_prisoner", slot_troop_prisoner_of_party, -1),
(str_store_troop_name, s7, ":own_prisoner"),
(display_message, "str_dplmc_has_been_set_free"),
(call_script, "script_change_player_relation_with_troop", ":own_prisoner", 1),
(store_faction_of_troop, ":enemy_faction", ":enemy_prisoner"),
#SB : adjust values
(call_script, "script_change_player_relation_with_faction", ":enemy_faction", -6),
(call_script, "script_change_player_relation_with_troop", ":enemy_prisoner", -9),
(call_script, "script_troop_change_relation_with_troop", ":own_prisoner", ":enemy_prisoner", -3),
(call_script, "script_change_player_honor", -4), #SB : raise this penalty
(call_script, "script_update_troop_notes", ":own_prisoner"),
#SB : decrease in family relations
(set_show_messages, 0),
(try_for_range, ":affiliated", lords_begin, kingdom_ladies_end),
  (neq, ":affiliated", ":enemy_prisoner"),
  (call_script, "script_troop_get_family_relation_to_troop", ":enemy_prisoner", ":affiliated"),
  (gt, reg0, 0),
  (call_script, "script_troop_get_relation_with_troop", ":enemy_prisoner", ":affiliated"),
  (ge, reg0, -10),
  (call_script, "script_change_player_relation_with_troop", ":affiliated", -1),
(try_end),
(set_show_messages, 1),
]],

[anyone, "event_triggered", [
(store_conversation_troop, "$map_talk_troop"),
(eq, "$map_talk_troop", "$npc_to_rejoin_party"),

(troop_get_slot, ":mission", "$g_talk_troop", slot_troop_current_mission),
  (eq, ":mission", dplmc_npc_mission_prisoner_exchange),

(troop_get_slot, ":enemy_prisoner", "$g_talk_troop", dplmc_slot_troop_mission_diplomacy),
(troop_get_slot, ":own_prisoner", "$g_talk_troop", dplmc_slot_troop_mission_diplomacy2),

(troop_get_slot, ":string", "$map_talk_troop", slot_troop_honorific),
(str_store_string, 21, ":string"),
(str_store_troop_name, s32, ":enemy_prisoner"),
(str_store_troop_name, s33, ":own_prisoner"),
               ],##diplomacy start+ Change "exchange against" to "exchange for"
"Well, {s21}, at last I've found you. They didn't agree to exchange {s32} for {s33}.","companion_rejoin_response", [
              ]],
			  ##diplomacy end+

##persuasion mission
[anyone|plyr, "minister_talk",
[
(is_between, "$g_player_minister", active_npcs_begin, kingdom_ladies_end),
(faction_get_slot, ":faction_leader", "fac_player_supporters_faction", slot_faction_leader),
##diplomacy start+ Handle player is co-ruler of kingdom
(assign, ":is_coruler", 0),
(try_begin),
	(is_between, "$players_kingdom", npc_kingdoms_begin, npc_kingdoms_end),
	(call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", "$players_kingdom"),
	(ge, reg0, DPLMC_FACTION_STANDING_LEADER_SPOUSE),
	(assign, ":is_coruler", 1),
(try_end),
(this_or_next|eq, ":is_coruler", 1),
##diplomacy end+
(eq, ":faction_leader", "trp_player"),
],
"I want to persuade a lord of joining our kingdom.", "dplmc_minister_persuasion_fief_ask",
[]],

[anyone, "dplmc_minister_persuasion_fief_ask",
[
(call_script, "script_cf_has_companion_emissary"), #SB : script call

],
"Your emissary can't go with empty hands we have to offer a fief. Which one do you want to offer?", "dplmc_minister_persuasion_fief",
[]],

[anyone, "dplmc_minister_persuasion_fief_ask",
[
],
"Unfortunately, there is no one to send right now.", "minister_pretalk",
[]],


[anyone|plyr|repeat_for_parties,"dplmc_minister_persuasion_fief", [
(store_repeat_object, ":center"),
  (is_between, ":center", centers_begin, centers_end),
(neq, ":center", "$g_player_court"),
(store_faction_of_party, ":center_faction", ":center"),
##diplomacy start+ Handle player is co-ruler of kingdom
(assign, ":alt_faction", "fac_player_supporters_faction"),
(try_begin),
	(is_between, "$players_kingdom", npc_kingdoms_begin, npc_kingdoms_end),
	(call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", "$players_kingdom"),
	(ge, reg0, DPLMC_FACTION_STANDING_LEADER_SPOUSE),
	(assign, ":alt_faction", "$players_kingdom"),
(try_end),
(this_or_next|eq, ":alt_faction", ":center_faction"),
##diplomacy end+
(eq, ":center_faction", "fac_player_supporters_faction"),
(neg|party_slot_ge, ":center", slot_town_lord, active_npcs_begin), #ie, owned by player or unassigned
(str_store_party_name, s11, ":center"),

  ], "{s11}", "dplmc_minister_persuade_lord_faction_ask",[
(store_repeat_object, "$diplomacy_var2"),
]],

[anyone|plyr, "dplmc_minister_persuasion_fief", [
  ], "Never mind -- there is no fief I can offer.", "minister_pretalk",[
]],

[anyone, "dplmc_minister_persuade_lord_faction_ask",
[ ],
"Where does the lord live you want to persuade?", "dplmc_minister_persuade_lord_faction",
[]],

[anyone|plyr|repeat_for_factions, "dplmc_minister_persuade_lord_faction",
[
(store_repeat_object, ":faction_no"),
(is_between, ":faction_no", npc_kingdoms_begin, npc_kingdoms_end),
(faction_slot_eq, ":faction_no", slot_faction_state, sfs_active),
(str_store_faction_name, s11, ":faction_no"),
],
"{s11}", "dplmc_minister_persuade_lord_ask",
[
(store_repeat_object, "$g_faction_selected"),
]],

[anyone|plyr, "dplmc_minister_persuade_lord_faction", [
  ], "Nowhere.", "minister_pretalk",[
]],

[anyone, "dplmc_minister_persuade_lord_ask",
[
],
"Who shall be convinced?", "dplmc_minister_persuade_lord",
[]],

[anyone|plyr|repeat_for_troops, "dplmc_minister_persuade_lord",
[
(store_repeat_object, ":troop_no"),
(troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_hero),
(store_faction_of_troop, ":faction", ":troop_no"),
(is_between, ":faction", npc_kingdoms_begin, npc_kingdoms_end),
(faction_get_slot, ":faction_leader", ":faction", slot_faction_leader),
(neq, ":faction_leader", ":troop_no"),

(eq, ":faction", "$g_faction_selected"),
(troop_slot_eq, ":troop_no", slot_troop_met, 1),
#target still wants to talk
(neg|troop_slot_ge, ":troop_no", slot_troop_intrigue_impatience, 100),
(str_store_troop_name, s11, ":troop_no"),
],
"{s11}", "dplmc_minister_persuasion_emissary",
[
(store_repeat_object, "$diplomacy_var"),
(assign, "$g_initiative_selected", dplmc_npc_mission_persuasion),
]],

[anyone|plyr, "dplmc_minister_persuade_lord", [
  ], "I can't think of anyone.", "minister_pretalk",[
]],


[anyone, "dplmc_minister_persuasion_emissary",
[], "Who shall I send? You should choose one who has skills in persuasion!", "minister_emissary_select",
[]],

##dispatch emissary to persuade
[anyone, "minister_emissary_dispatch",
[
(str_store_troop_name, s11, "$g_emissary_selected"),
(str_store_faction_name, s12, "$g_faction_selected"),
(eq, "$g_initiative_selected", dplmc_npc_mission_persuasion),
(str_store_troop_name, s13, "$diplomacy_var"),
(str_store_party_name, s14, "$diplomacy_var2"),
##diplomacy start+ Use correct pronoun
(call_script, "script_dplmc_store_troop_is_female", "$diplomacy_var"),
(assign, reg4, reg0),#Next line, "him" -> {reg4?her:him}
], "Very well -- I shall send {s11} to {s12} to persuade {s13} and offer {reg4?her:him} {s14}.", "minister_diplomatic_dispatch_confirm",[
##diplomacy end+
]],

##companion returning after persuasion request
[anyone, "event_triggered", [
(store_conversation_troop, "$map_talk_troop"),
(eq, "$map_talk_troop", "$npc_to_rejoin_party"),
(troop_get_slot, ":mission", "$g_talk_troop", slot_troop_current_mission),
(eq, ":mission", dplmc_npc_mission_persuasion),
(troop_get_slot, ":string", "$map_talk_troop", slot_troop_honorific),
(str_store_string, s21, ":string"),
(troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
(str_store_faction_name, s30, ":mission_object"),
(troop_get_slot, ":target_troop", "$g_talk_troop", dplmc_slot_troop_mission_diplomacy),
(str_store_troop_name, s14, ":target_troop"),
#SB : change this to script call with right troop
# (troop_set_slot, "$g_talk_troop", slot_troop_intrigue_impatience, 500),
(call_script, "script_change_troop_intrigue_impatience", ":target_troop", 500),

(assign, ":no_join", 0),
(str_clear, s40),

  #player is still king
(faction_get_slot, ":faction_leader", "fac_player_supporters_faction", slot_faction_leader),
(try_begin),
  (neq, ":faction_leader", "trp_player"),
  (call_script, "script_dplmc_store_troop_is_female", ":faction_leader"), #SB : gender string
  (str_store_string, s40, "@Your leader is not even a {reg0?queen:king} and I shall join you?"),
  (assign, ":no_join", 1),
(try_end),

#player has fief
#SB : add loop break
(assign, ":one_fortress_found", walled_centers_end),
(try_for_range, ":walled_center", walled_centers_begin, ":one_fortress_found"),
  (this_or_next|party_slot_eq, ":walled_center", slot_town_lord, "$g_talk_troop"),
  (party_slot_eq, ":walled_center", slot_town_lord, "trp_player"),
  (assign, ":one_fortress_found", walled_centers_begin),
(try_end),

(try_begin), #SB : check loop was not broken
  (eq, ":one_fortress_found", walled_centers_end),
  (str_store_string, s40, "@{s40} I would never join someone who doesn't own a town or castle."),
  (assign, ":no_join", 1),
(try_end),

(assign, ":enough_renown", 1),
(try_begin),
  (troop_slot_eq, ":target_troop", slot_lord_reputation_type, lrep_martial),
  (this_or_next|lt, "$player_right_to_rule", 10),
  (neg|troop_slot_ge, "trp_player", slot_troop_renown, 400),
  (assign, ":enough_renown", 0),
(else_try),
  (troop_slot_eq, ":target_troop", slot_lord_reputation_type, lrep_upstanding),
  (this_or_next|lt, "$player_right_to_rule", 20),
  (neg|troop_slot_ge, "trp_player", slot_troop_renown, 200),
  (assign, ":enough_renown", 0),
(else_try),
  (troop_slot_eq, ":target_troop", slot_lord_reputation_type, lrep_selfrighteous),
  (this_or_next|lt, "$player_right_to_rule", 10),
  (neg|troop_slot_ge, "trp_player", slot_troop_renown, 200),
  (assign, ":enough_renown", 0),
(else_try),
  (troop_slot_eq, ":target_troop", slot_lord_reputation_type, lrep_cunning),
  (neg|troop_slot_ge, "trp_player", slot_troop_renown, 400),
    (assign, ":enough_renown", 0),
(else_try),
  (neg|troop_slot_ge, "trp_player", slot_troop_renown, 200),
  (assign, ":enough_renown", 0),
(try_end),

(try_begin),
  (eq, ":enough_renown", 0),
  ##diplomacy start+ "to" to "too"
  (str_store_string, s40, "@{s40} I know too little about your leader."),
  ##diplomacy end+
  (assign, ":no_join", 1),
(try_end),

#init random seed
(troop_get_slot, ":temp_ai_seed", ":target_troop", slot_troop_temp_decision_seed),
(store_div, ":persuasion_random", ":temp_ai_seed", 100),  #I used div instead of mod to have a different random value, value generated from (mod 100) will be used in next steps. These two values should be non-related.
##diplomacy start+
(troop_get_slot, ":target_reputation", ":target_troop", slot_lord_reputation_type),
(try_begin),
	(store_mod, reg0, ":target_troop", 2),
	(eq, reg0, 0),
	(val_add, ":persuasion_random", 50),#because we take mod 100, the average effect of this is zero, but it addresses problems such as "all high" or "all low"
(try_end),
(val_mod, ":persuasion_random", 100),#should take mod 100 after division
##diplomacy end+
(val_add, ":persuasion_random", 1),
(store_skill_level, ":persuasion_skill", "skl_persuasion", "$g_talk_troop"),
(val_mul, ":persuasion_skill", 7),
##diplomacy start+
#Add a base success chance, so that skill 5 has a 50% chance of failure instead of a 65% chance of failure.
(val_add, ":persuasion_skill", 15),
#SB : add relation between emissary and subject
(try_begin),
  (call_script, "script_troop_get_relation_with_troop", "$g_talk_troop", ":target_troop"),
  (val_add, ":persuasion_skill", reg0),
(try_end),
##diplomacy end+
(try_begin),
  (lt, ":persuasion_skill", ":persuasion_random"),
##diplomacy start+
##OLD:
#  (str_store_string, s40, "@{s40} Next time I prefer to talk to someone who doesn't act like a fool."),
#  (assign, ":no_join", 1),
##NEW:
  (try_begin),
     (ge, "$cheat_mode", 1),
	 (assign, reg0, ":persuasion_random"),
	 (assign, reg1, ":persuasion_skill"),
	 (display_message, "@{!} Emissary persuasion attempt: skill factor {reg1} versus random number {reg0}"),
  (try_end),
  (store_mul, reg0, ":persuasion_skill", 2),
  (try_begin),
     (this_or_next|ge, reg0, ":persuasion_random"),
		(eq, ":target_reputation", lrep_goodnatured),
	 (neq, ":target_reputation", lrep_debauched),
	 (neq, ":target_reputation", lrep_quarrelsome),
	 (str_store_string, s40, "@{s40} I found your messenger unconvincing."),
  (else_try),
	 (this_or_next|eq, ":target_reputation", lrep_debauched),
	 (this_or_next|eq, ":target_reputation", lrep_quarrelsome),
	 (this_or_next|eq, ":target_reputation", lrep_selfrighteous),
	 (this_or_next|eq, ":target_reputation", lrep_ambitious),
		(is_between, ":target_reputation", lrep_roguish, lrep_conventional),
     (str_store_string, s40, "@{s40} Next time I would prefer to talk to someone who doesn't act like a fool."),
  (else_try),
     (str_store_string, s40, "@{s40} Next time I would prefer to talk to someone more versed in courtly manners."),
  (try_end),
  (assign, ":no_join", 1),
(try_end),
##diplomacy end+

   (call_script, "script_calculate_troop_political_factors_for_liege", ":target_troop", "trp_player"),
   (assign, ":result_for_security", reg2),
   (assign, ":result_for_political", reg4),
   (assign, ":change_penalty", reg10),
   (assign, ":result_for_new_liege", reg0),
   (store_faction_of_troop, ":target_faction", ":target_troop"),
   (faction_get_slot, ":cur_liege", ":target_faction", slot_faction_leader),
   (call_script, "script_calculate_troop_political_factors_for_liege", ":target_troop", ":cur_liege"),

   (store_sub, ":result_for_security_comparative", ":result_for_security", reg2),
   (store_sub, ":result_for_political_comparative", ":result_for_political", reg4),
   (assign, ":result_for_old_liege", reg0),
   (store_sub, "$pledge_chance", ":result_for_new_liege", ":result_for_old_liege"),
   (val_add, "$pledge_chance", 50),
   (val_div, "$pledge_chance", 2),

(store_mod, ":random", ":temp_ai_seed", 100),

(try_begin),
  (eq, "$cheat_mode", 1),
  (assign, reg2, ":result_for_security"),
  (display_message, "@{!}DEBUG - result_for_security: {reg2} > 10"),
  (assign, reg2, ":result_for_political"),
  (display_message, "@{!}DEBUG - result_for_political: {reg2} > 0"),
  (assign, reg2, ":change_penalty"),
  (display_message, "@{!}DEBUG - change_penalty: {reg2} < 20"),
  (assign, reg2, ":random"),
  (display_message, "@{!}DEBUG - random: {reg2}"),
  (assign, reg2, "$pledge_chance"),
  (display_message, "@{!}DEBUG - > pledge_chance: {reg2}"),
  (assign, reg2, ":result_for_security_comparative"),
  (display_message, "@{!}DEBUG - result_for_security_comparative: {reg2} > 0"),
  (assign, reg2, ":result_for_political_comparative"),
  (display_message, "@{!}DEBUG - result_for_political_comparative: {reg2} > 0"),
(try_end),

(try_begin),
  (le, ":random", "$pledge_chance"),
  (assign, ":no_join", 1),
  #SB : king -> liege, added I "would"
  (str_store_string, s40, "@{s40} I 'd rather stay with my current liege."),
(try_end),

(try_begin),
  (eq, ":no_join", 0),
   (try_begin),
      (lt, ":result_for_political", 0),
      (assign, ":no_join", 1),
      (try_begin),
         (troop_slot_eq, ":target_troop", slot_lord_reputation_type, lrep_upstanding),
         (str_store_string, s31, "str_i_worry_about_those_with_whom_you_have_chosen_to_surround_yourself" ),
      (else_try),
         (troop_slot_eq, ":target_troop", slot_lord_reputation_type, lrep_martial),
         (str_store_string, s31, "str_there_are_some_outstanding_matters_between_me_and_some_of_your_vassals_"),
         (try_begin),
           (assign, reg41, ":result_for_political"),
           ##diplomacy start+ Only show debug messages with cheat mode on
           (ge, "$cheat_mode", 1),
           ##diplomacy end+
           (display_message, "str_result_for_political_=_reg41"),
         (try_end),
      (else_try),
         (troop_slot_eq, ":target_troop", slot_lord_reputation_type, lrep_quarrelsome),
         (str_store_string, s31, "str_my_liege_has_his_faults_but_i_dont_care_for_your_toadies"),
      (else_try),
         (troop_slot_eq, ":target_troop", slot_lord_reputation_type, lrep_goodnatured),
         (str_store_string, s31, "str_i_think_youre_a_good_man_but_im_worried_that_you_might_be_pushed_in_the_wrong_direction_by_some_of_those_around_you"),
      (else_try),
         (troop_slot_eq, ":target_troop", slot_lord_reputation_type, lrep_selfrighteous),
         (str_store_string, s31, "str_i_am_loathe_to_fight_alongside_you_so_long_as_you_take_under_your_wing_varlots_and_base_men"),
      (else_try),
         (troop_slot_eq, ":target_troop", slot_lord_reputation_type, lrep_cunning),
         (str_store_string, s31, "str_ill_be_honest__with_some_of_those_who_follow_you_i_think_id_be_more_comfortable_fighting_against_you_than_with_you"),
      (else_try),
         (troop_slot_eq, ":target_troop", slot_lord_reputation_type, lrep_debauched),
         (str_store_string, s31, "str_i_say_that_you_can_judge_a_man_by_the_company_he_keeps_and_you_have_surrounded_yourself_with_vipers_and_vultures"),
      (else_try),
         (troop_slot_ge, ":target_troop", slot_lord_reputation_type, lrep_roguish),
         (str_store_string, s31, "str_you_know_that_i_have_always_had_a_problem_with_some_of_our_companions"),
      (try_end),
   (else_try),
      (lt, ":result_for_political_comparative", 0),
      (assign, ":no_join", 1),
      (str_store_string, s31, "str_politically_i_would_be_a_better_position_in_the_court_of_my_current_liege_than_in_yours"),
   (else_try),
      (str_store_string, s31, "str_i_am_more_comfortable_with_you_and_your_companions_than_with_my_current_liege"),
   (try_end),

   (try_begin),
      (lt, ":result_for_security", 10),
      (assign, ":no_join", 1),

      (try_begin),
         (this_or_next|troop_slot_eq, ":target_troop", slot_lord_reputation_type, lrep_cunning),
         (troop_slot_ge, ":target_troop", slot_lord_reputation_type, lrep_roguish),
         (str_store_string, s32, "str_militarily_youre_in_no_position_to_protect_me_should_i_be_attacked_id_be_reluctant_to_join_you_until_you_could"),
      (else_try),
         (troop_slot_eq, ":target_troop", slot_lord_reputation_type, lrep_upstanding),
         (str_store_string, s32, "str_militarily_when_i_consider_the_lay_of_the_land_i_realize_that_to_pledge_myself_to_you_now_would_endanger_my_faithful_retainers_and_my_family"),
      (else_try),
         (troop_slot_eq, ":target_troop", slot_lord_reputation_type, lrep_martial),
         (str_store_string, s32, "str_militarily_youre_in_no_position_to_come_to_my_help_if_someone_attacked_me_i_dont_mind_a_good_fight_but_i_like_to_have_a_chance_of_winning"),
      (else_try),
         (troop_slot_eq, ":target_troop", slot_lord_reputation_type, lrep_goodnatured),
         (str_store_string, s32, "str_militarily_youre_in_no_position_to_come_to_my_help_if_someone_attacked_me_i_dont_mind_a_good_fight_but_i_like_to_have_a_chance_of_winning"),
      (else_try),
         (troop_slot_eq, ":target_troop", slot_lord_reputation_type, lrep_debauched),
         (str_store_string, s32, "str_militarily_you_would_have_me_join_you_only_to_find_myself_isolated_amid_a_sea_of_enemies"),
      (else_try),
         (troop_slot_eq, ":target_troop", slot_lord_reputation_type, lrep_selfrighteous),
         (str_store_string, s32, "str_militarily_you_would_have_me_join_you_only_to_find_myself_isolated_amid_a_sea_of_enemies"),
      (else_try),
         (troop_slot_eq, ":target_troop", slot_lord_reputation_type, lrep_quarrelsome),
         (str_store_string, s32, "str_militarily_youre_in_no_position_to_come_to_my_help_if_someone_attacked_me_youd_let_me_be_cut_down_like_a_dog_id_bet"),
      (try_end),
   (else_try),
      (lt, ":result_for_security_comparative", 0),
      (assign, ":no_join", 1),
      (str_store_string, s32, "str_militarily_i_wouldnt_be_any_safer_if_i_joined_you"),
   (else_try),
      (str_store_string, s32, "str_militarily_i_might_be_safer_if_i_joined_you"),
   (try_end),

   (try_begin),
      (gt, ":change_penalty", 40),
      (assign, ":no_join", 1),
      (str_store_string, s34, "str_finally_there_is_a_cost_to_ones_reputation_to_change_sides_in_this_case_the_cost_would_be_very_high"),
   (else_try),
      (gt, ":change_penalty", 20),
      (assign, ":no_join", 1),
      (str_store_string, s34, "str_finally_there_is_a_cost_to_ones_reputation_to_change_sides_in_this_case_the_cost_would_be_significant"),
   (else_try),
      (str_store_string, s34, "str_finally_there_is_a_cost_to_ones_reputation_to_change_sides_in_this_case_however_many_men_would_understand"),
   (try_end),
   (str_store_string, s40, "@{s31} {s32} {s34}"),
(try_end),

(eq, ":no_join", 1),
##diplomacy start+ use reg0 for gender
(call_script, "script_dplmc_store_troop_is_female", ":target_troop"),
],#Next line "He" to {reg0?She:he}
"Well, {s21}, at last I've found you. I have returned from my persuasion mission to {s30}. {s14} doesn't want to join you. {reg0?She:He} said: {s40}","companion_rejoin_response",
##diplomacy end+
[
]],


##companion returning after persuasion request
[anyone, "event_triggered", [
    (store_conversation_troop, "$map_talk_troop"),
    (eq, "$map_talk_troop", "$npc_to_rejoin_party"),
    (troop_get_slot, ":mission", "$g_talk_troop", slot_troop_current_mission),
    (eq, ":mission", dplmc_npc_mission_persuasion),
    (troop_get_slot, ":string", "$map_talk_troop", slot_troop_honorific),
    (str_store_string, s21, ":string"),
    (troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
    (str_store_faction_name, s31, ":mission_object"),
    (troop_get_slot, ":target_troop", "$g_talk_troop", dplmc_slot_troop_mission_diplomacy),

    (str_store_troop_name, s14, ":target_troop"),
               ],
"Well, {s21}, at last I've found you. I have returned from my persuasion mission to {s31}. {s14} agreed to join you.","companion_rejoin_response", [
  (troop_get_slot, ":target_troop", "$g_talk_troop", dplmc_slot_troop_mission_diplomacy),
  (call_script, "script_change_troop_faction", ":target_troop", "$players_kingdom"),

  (store_faction_of_troop, ":target_faction", ":target_troop"),
  (faction_get_slot, ":other_liege", ":target_faction", slot_faction_leader),
  (try_begin),
    (store_relation, ":relation", "$players_kingdom", ":target_faction"),
    (ge, ":relation", 0),

    (call_script, "script_add_log_entry", logent_border_incident_troop_suborns_lord, "trp_player", -1, ":target_troop",":target_faction"),
    (store_add, ":slot_provocation_days", "$players_kingdom", slot_faction_provocation_days_with_factions_begin),
    (val_sub, ":slot_provocation_days", kingdoms_begin),
    (faction_set_slot, ":target_faction", ":slot_provocation_days", 30),

    (faction_get_slot, ":other_liege", ":target_faction", slot_faction_leader),
    (call_script, "script_troop_change_relation_with_troop", "trp_player", ":other_liege", -3),
  (try_end),

  #SB : add 2 relation between emissary
  (call_script, "script_troop_change_relation_with_troop", "$g_talk_troop", ":target_troop", 2),
  (call_script, "script_change_troop_renown", "$g_talk_troop", dplmc_companion_skill_renown), #total of 5 for success
  (call_script, "script_change_player_right_to_rule", 2),
]],

##spy mission
[anyone|plyr, "minister_talk",
[
(is_between, "$g_player_minister", active_npcs_begin, kingdom_ladies_end),
],
"I wish to spy out another kingdom.", "dplmc_minister_spy_kingdoms",
[]],

## ask for spy target
[anyone, "dplmc_minister_spy_kingdoms",
[
(call_script, "script_cf_has_companion_emissary"), #SB : script call
],
"To whom do you wish to send this spy?", "dplmc_minister_spy_kingdoms_select",
[]],

[anyone, "dplmc_minister_spy_kingdoms",
[
],
"Unfortunately, there is no one to send right now.", "minister_pretalk",
[]],

##select spy target
[anyone|plyr|repeat_for_factions, "dplmc_minister_spy_kingdoms_select",
[
(store_repeat_object, ":faction_no"),
(is_between, ":faction_no", npc_kingdoms_begin, npc_kingdoms_end),
(faction_slot_eq, ":faction_no", slot_faction_state, sfs_active),
(faction_get_slot, ":leader_no", ":faction_no", slot_faction_leader),
(str_store_troop_name, s10, ":leader_no"),
(str_store_faction_name, s11, ":faction_no"),
(str_clear, s14),
],
"{s11}{s14}", "dplmc_minister_spy_emissary",
[
(store_repeat_object, "$g_faction_selected"),
(assign, "$g_initiative_selected", dplmc_npc_mission_spy_request)
]],

[anyone, "dplmc_minister_spy_emissary",
[], "Who shall be your spy? You should choose one whom you trust - and who has skills in spotting!", "minister_emissary_select",
[]],

##dispatch spy
[anyone, "minister_emissary_dispatch",
[
(str_store_troop_name, s11, "$g_emissary_selected"),
(str_store_faction_name, s12, "$g_faction_selected"),
(eq, "$g_initiative_selected", dplmc_npc_mission_spy_request),
(str_store_string, s14, "str_dplmc_gather_information"),
(store_skill_level, ":emissary_spotting", "skl_spotting", "$g_emissary_selected"),
(val_mul, ":emissary_spotting", 5),
(val_add, ":emissary_spotting", 65),
(val_min, ":emissary_spotting", 95),
(store_random_in_range, ":random", 0, 100),

(try_begin),#debug
  (eq, "$cheat_mode", 1),
  (assign, reg0, ":emissary_spotting"),
  (assign, reg1, ":random"),
  (display_message, "@{!}DEBUG : emissary_spotting: {reg0} random {reg1}"),
(try_end),

(try_begin),
  (ge, ":emissary_spotting", ":random"),
  (assign, "$diplomacy_var", 0), # not caught
(else_try),
  (lt, ":emissary_spotting", ":random"),
  (assign, "$diplomacy_var", 1), # caught
(try_end),
], "Very well -- I shall send {s11} to the {s12} to {s14}.", "minister_diplomatic_dispatch_confirm",[]],

##companion returning after spy request
[anyone, "event_triggered", [
    (store_conversation_troop, "$map_talk_troop"),
    (eq, "$map_talk_troop", "$npc_to_rejoin_party"),
    (troop_get_slot, ":mission", "$g_talk_troop", slot_troop_current_mission),
    (eq, ":mission", dplmc_npc_mission_spy_request),
    (troop_get_slot, ":emissary_caught", "$g_talk_troop", dplmc_slot_troop_mission_diplomacy),
    (troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
    (this_or_next|eq, ":emissary_caught", 0),
    (faction_slot_eq, ":mission_object", slot_faction_state, sfs_defeated),
    (troop_get_slot, ":string", "$map_talk_troop", slot_troop_honorific),
    (str_store_string, 21, ":string"),
    (str_store_faction_name, s31, ":mission_object"),
],
"Well, {s21}, at last I've found you. I have returned from my reconnaissance mission to {s31}. About which location do you need information?","dplmc_companion_spy_request_select_center", [
              ]],

##companion caught after spy request
[trp_hired_blade, "event_triggered", [
    (store_conversation_troop, "$map_talk_troop"),
    (troop_get_slot, "$g_talk_troop", "$g_talk_troop", slot_troop_mission_object), #switching npc
    (troop_get_slot, ":mission", "$g_talk_troop", slot_troop_current_mission),
    (eq, ":mission", dplmc_npc_mission_spy_request),
    (troop_get_slot, ":emissary_caught", "$g_talk_troop", dplmc_slot_troop_mission_diplomacy),
    (gt, ":emissary_caught", 0),

    (troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
    (str_store_faction_name, s31, ":mission_object"),
    (str_store_troop_name, s11, "$g_talk_troop"),
               ],
               #SB : gender string, rephrasing
"Pardon me, {lord/lady}. I am back from the reconnaissance mission to {s31}. I am sorry, we were caught off guard and they got {s11}. I barely escaped.","close_window", [
  (troop_set_slot, "$g_talk_troop", slot_troop_current_mission, 0),
  (troop_set_slot, "$g_talk_troop", slot_troop_days_on_mission, 0),
  (troop_set_slot, "$g_talk_troop", slot_troop_occupation, 0),
  (troop_set_slot, "trp_hired_blade", slot_troop_mission_object, 0), #SB : reset slot
  (assign, "$npc_to_rejoin_party", 0),

  (troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
  (troop_set_health, "$g_talk_troop", 0), #SB : wound companion

  (call_script, "script_change_player_relation_with_faction", ":mission_object", -3),
  (call_script, "script_change_player_honor", -2),
  (call_script, "script_change_troop_renown", "trp_player", -5),

  (faction_get_slot, ":faction_leader", ":mission_object", slot_faction_leader),
  (call_script, "script_lord_get_home_center", ":faction_leader"),
  (try_begin),
    (neq, reg0, -1),
    (assign, ":target_party", reg0),
  (else_try),
    (try_for_range, ":walled_center", walled_centers_begin, walled_centers_end),
      (store_faction_of_party, ":center_faction", ":walled_center"),
         (eq, ":mission_object", ":center_faction"),
         (assign, ":target_party", ":walled_center"),
       (try_end),
  (try_end),
  (try_begin),
    (is_between, ":target_party", walled_centers_begin, walled_centers_end),
    (party_add_prisoners, ":target_party", "$g_talk_troop", 1),
    (troop_set_slot, "$g_talk_troop", slot_troop_prisoner_of_party, ":target_party"), #SB : corresponding troop slot
  (try_end),
]],

[anyone|plyr|repeat_for_parties, "dplmc_companion_spy_request_select_center",
[
(store_repeat_object, ":center_no"),
(troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
(is_between, ":center_no", centers_begin, centers_end),
(store_faction_of_party, ":center_faction", ":center_no"),
(eq, ":center_faction", ":mission_object"),
(str_store_party_name, s60, ":center_no"),
],"{s60}", "dplmc_companion_spy_request_center_selected",
[
(store_repeat_object, "$spy_center_selected"),
]],

[anyone, "dplmc_companion_spy_request_center_selected", [
(call_script, "script_dplmc_party_calculate_strength", "$spy_center_selected", 0),
(try_begin),
  (le, reg0, 1),
  (str_store_string, s31, "str_dplmc_nearly_no"),
(else_try),
  (is_between, reg0, 1, 100),
  (str_store_string, s31, "str_dplmc_less_than_one_hundred"),
(else_try),
  (is_between, reg0, 101, 200),
  (str_store_string, s31, "str_dplmc_more_than_one_hundred"),
(else_try),
  (is_between, reg0, 201, 500),
  (str_store_string, s31, "str_dplmc_more_than_two_hundred"),
(else_try),
  (ge, reg0, 500),
  (str_store_string, s31, "str_dplmc_more_than_five_hundred"),
(try_end),

(call_script, "script_dplmc_describe_prosperity_to_s4", "$spy_center_selected"),

(party_get_slot, ":center_relation", "$spy_center_selected", slot_center_player_relation),
(call_script, "script_describe_center_relation_to_s3", ":center_relation"),

],  "{s4} {s3} and there are {s31} troops around.", "dplmc_companion_spy_request_select_newcenter", [
    ]],

[anyone, "dplmc_companion_spy_request_select_newcenter", [
],  "Do you need information about another location?", "dplmc_companion_spy_request_select_center", [
    ]],

[anyone|plyr, "dplmc_companion_spy_request_select_center", [
],  "Never mind.", "companion_rejoin_response", [
    ]],

##alliance request
[anyone|plyr, "minister_diplomatic_initiative_type_select",
[
(call_script, "script_diplomacy_faction_get_diplomatic_status_with_faction", "fac_player_supporters_faction", "$g_faction_selected"),
(eq, reg0, 1),  #player is at truce with the mission_faction

(assign, ":proceed", 0),
(try_begin),
(store_add, ":slot_truce_days", "$g_faction_selected", slot_faction_truce_days_with_factions_begin),
(val_sub, ":slot_truce_days", kingdoms_begin),
(faction_get_slot, ":truce_days", "fac_player_supporters_faction", ":slot_truce_days"),
(is_between, ":truce_days", 20, 50), #you need a trade aggreement or defensive pact for an alliance
(assign, ":proceed", 1),
(try_end),
(eq, ":proceed", 1),

(faction_slot_eq, "$g_faction_selected", slot_faction_recognized_player, 1), #recognized us
(faction_slot_eq, "$g_faction_selected", slot_faction_state, sfs_active),
(faction_get_slot, ":leader_no", "$g_faction_selected", slot_faction_leader),

(str_store_troop_name, s10, ":leader_no"),
(str_store_faction_name, s11, "$g_faction_selected"),
(str_clear, s14),
],
"Tell {s10} that I want to form an alliance with him.", "minister_diplomatic_emissary",
[ (assign, "$g_initiative_selected", dplmc_npc_mission_alliance_request),
]],

##companion returning after alliance request
[anyone, "event_triggered", [
     (store_conversation_troop, "$map_talk_troop"),
     (eq, "$map_talk_troop", "$npc_to_rejoin_party"),
     (troop_get_slot, ":mission", "$g_talk_troop", slot_troop_current_mission),
          (eq, ":mission", dplmc_npc_mission_alliance_request),

          (troop_get_slot, ":string", "$map_talk_troop", slot_troop_honorific),
     (str_store_string, 21, ":string"),
          (troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
          (str_store_faction_name, s31, ":mission_object"),

          (call_script, "script_npc_decision_checklist_peace_or_war", ":mission_object", "fac_player_supporters_faction", "$g_talk_troop"),
          (assign, "$g_mission_result_with_player", reg0),
               ],
"Well, {s21}, at last I've found you. I have returned from my mission to {s31}. ","dplmc_companion_alliance_request_response", [
              ]],

##response to alliance request success
[anyone, "dplmc_companion_alliance_request_response", [
(troop_slot_eq, "$g_talk_troop", slot_troop_current_mission, dplmc_npc_mission_alliance_request),
(troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
(call_script, "script_diplomacy_faction_get_diplomatic_status_with_faction", "fac_player_supporters_faction", ":mission_object"),
(ge, reg0, 0),  #player is at peace or truce with the mission_faction
(eq, "$g_concession_demanded", 0), #doesn't want a center from us
(ge, "$g_mission_result_with_player", 1), #doesn't want war with us
(store_relation, ":relation", "fac_player_supporters_faction", ":mission_object"),
(store_random_in_range,":random", 20, 95),
(ge, ":relation", ":random"),
(store_random_in_range,":random", 5, 75),
(ge, "$player_honor", ":random"),
(store_random_in_range,":random", 5, 50),
(ge, "$player_right_to_rule", ":random"),
(faction_get_slot, ":emissary_object", ":mission_object", slot_faction_leader),
(str_store_troop_name, s4, ":emissary_object"),
],
"{s4} is willing to form an alliance with you.","dplmc_companion_alliance_confirm", [
         ]],

[anyone|plyr, "dplmc_companion_alliance_confirm", [
(troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
(str_store_faction_name, s4, ":mission_object"),
],
"Very well -- let this alliance with {s4} be concluded.","companion_rejoin_response", [
(troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
(call_script, "script_dplmc_start_alliance_between_kingdoms", ":mission_object", "$players_kingdom", 1),
(str_store_faction_name, s4, ":mission_object"),
]],

[anyone|plyr, "dplmc_companion_alliance_confirm", [],
"On second thought, perhaps this is not now in our interests.","companion_rejoin_response", [
         ]],

##response to alliance request failed
[anyone, "dplmc_companion_alliance_request_response", [
(troop_slot_eq, "$g_talk_troop", slot_troop_current_mission, dplmc_npc_mission_alliance_request),
(troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
(faction_get_slot, ":emissary_object", ":mission_object", slot_faction_leader),
(str_store_troop_name, s4, ":emissary_object"),
],
"{s4} is not willing to form an alliance with you.","companion_rejoin_response", [
         ]],

##defensive request
[anyone|plyr, "minister_diplomatic_initiative_type_select",
[
(call_script, "script_diplomacy_faction_get_diplomatic_status_with_faction", "fac_player_supporters_faction", "$g_faction_selected"),
(eq, reg0, 1),  #player is at truce with the mission_faction

(assign, ":proceed", 0),
(try_begin),
(store_add, ":slot_truce_days", "$g_faction_selected", slot_faction_truce_days_with_factions_begin),
(val_sub, ":slot_truce_days", kingdoms_begin),
(faction_get_slot, ":truce_days", "fac_player_supporters_faction", ":slot_truce_days"),
#(gt, ":truce_days", 20), #if we have more than 20 truce days left don't proceed
(is_between, ":truce_days", 0, 30), #you need a non-aggression or trade aggreement for an defensive pact
(assign, ":proceed", 1),
(try_end),
(eq, ":proceed", 1),

(faction_slot_eq, "$g_faction_selected", slot_faction_recognized_player, 1), #recognized us
(faction_slot_eq, "$g_faction_selected", slot_faction_state, sfs_active),
(faction_get_slot, ":leader_no", "$g_faction_selected", slot_faction_leader),

(str_store_troop_name, s10, ":leader_no"),
(str_store_faction_name, s11, "$g_faction_selected"),
(str_clear, s14),
###diplomacy start+ Use reg0 for gender
(call_script, "script_dplmc_store_troop_is_female", ":leader_no"),
],#Next line "him" to {reg0?her:him}
"Tell {s10} that I want to conclude a defensive pact with {reg0?her:him}.", "minister_diplomatic_emissary",
##diplomacy end+
[ (assign, "$g_initiative_selected", dplmc_npc_mission_defensive_request),
]],

##companion returning after defensive request
[anyone, "event_triggered", [
     (store_conversation_troop, "$map_talk_troop"),
     (eq, "$map_talk_troop", "$npc_to_rejoin_party"),
     (troop_get_slot, ":mission", "$g_talk_troop", slot_troop_current_mission),
          (eq, ":mission", dplmc_npc_mission_defensive_request),

          (troop_get_slot, ":string", "$map_talk_troop", slot_troop_honorific),
     (str_store_string, 21, ":string"),
          (troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
          (str_store_faction_name, s31, ":mission_object"),

          (call_script, "script_npc_decision_checklist_peace_or_war", ":mission_object", "fac_player_supporters_faction", "$g_talk_troop"),
          (assign, "$g_mission_result_with_player", reg0),
               ],
"Well, {s21}, at last I've found you. I have returned from my mission to {s31}. ","dplmc_companion_defensive_request_response", [
              ]],

##response to defensive request success
[anyone, "dplmc_companion_defensive_request_response", [
(troop_slot_eq, "$g_talk_troop", slot_troop_current_mission, dplmc_npc_mission_defensive_request),
(troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
(call_script, "script_diplomacy_faction_get_diplomatic_status_with_faction", "fac_player_supporters_faction", ":mission_object"),
(ge, reg0, 0),  #player is at peace or truce with the mission_faction
(eq, "$g_concession_demanded", 0), #doesn't want a center from us
(ge, "$g_mission_result_with_player", 1), #doesn't want war with us
(store_relation, ":relation", "fac_player_supporters_faction", ":mission_object"),
(store_random_in_range,":random", 15, 70), #20 96 alliance
(ge, ":relation", ":random"),
(store_random_in_range,":random", 0, 50), #5 75 alliance
(ge, "$player_honor", ":random"),
(store_random_in_range,":random", 5, 30), #5 50 alliance
(ge, "$player_right_to_rule", ":random"),
(faction_get_slot, ":emissary_object", ":mission_object", slot_faction_leader),
(str_store_troop_name, s4, ":emissary_object"),
],
"{s4} is willing to form a defensive pact with you.","dplmc_companion_defensive_confirm", [
         ]],

[anyone|plyr, "dplmc_companion_defensive_confirm", [
(troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
(str_store_faction_name, s4, ":mission_object"),
],
"Very well -- let this defensive pact with {s4} be concluded.","companion_rejoin_response", [
(troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
(call_script, "script_dplmc_start_defensive_between_kingdoms", ":mission_object", "$players_kingdom", 1),
(str_store_faction_name, s4, ":mission_object"),
]],

[anyone|plyr, "dplmc_companion_defensive_confirm", [],
"On second thought, perhaps this is not now in our interests.","companion_rejoin_response", [
         ]],

##response to defensive request failed
[anyone, "dplmc_companion_defensive_request_response", [
(troop_slot_eq, "$g_talk_troop", slot_troop_current_mission, dplmc_npc_mission_defensive_request),
(troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
(faction_get_slot, ":emissary_object", ":mission_object", slot_faction_leader),
(str_store_troop_name, s4, ":emissary_object"),
],
"{s4} is not willing to conclude a defensive pact with you.","companion_rejoin_response", [
         ]],

##trade request
[anyone|plyr, "minister_diplomatic_initiative_type_select",
[
(call_script, "script_diplomacy_faction_get_diplomatic_status_with_faction", "fac_player_supporters_faction", "$g_faction_selected"),
(ge, reg0, 0),  #player is at peace or truce with the mission_faction

(assign, ":proceed", 0),
(try_begin),
(store_add, ":slot_truce_days", "$g_faction_selected", slot_faction_truce_days_with_factions_begin),
(val_sub, ":slot_truce_days", kingdoms_begin),
(faction_get_slot, ":truce_days", "fac_player_supporters_faction", ":slot_truce_days"),
(lt, ":truce_days", 10), #you need a non-aggression or peace for a trade pact
(assign, ":proceed", 1),
(try_end),
(eq, ":proceed", 1),

(faction_slot_eq, "$g_faction_selected", slot_faction_recognized_player, 1), #recognized us
(faction_slot_eq, "$g_faction_selected", slot_faction_state, sfs_active),
(faction_get_slot, ":leader_no", "$g_faction_selected", slot_faction_leader),

(str_store_troop_name, s10, ":leader_no"),
(str_store_faction_name, s11, "$g_faction_selected"),
(str_clear, s14),
##diplomacy start+ correct pronouns
(call_script, "script_dplmc_store_troop_is_female", ":leader_no"),
],
"Tell {s10} that I want to sign a trade agreement with {reg0?her:him}.", "minister_diplomatic_emissary",
##diplomacy end+
[ (assign, "$g_initiative_selected", dplmc_npc_mission_trade_request),
]],

##companion returning after trade request
[anyone, "event_triggered", [
     (store_conversation_troop, "$map_talk_troop"),
     (eq, "$map_talk_troop", "$npc_to_rejoin_party"),
     (troop_get_slot, ":mission", "$g_talk_troop", slot_troop_current_mission),
          (eq, ":mission", dplmc_npc_mission_trade_request),

          (troop_get_slot, ":string", "$map_talk_troop", slot_troop_honorific),
     (str_store_string, 21, ":string"),
          (troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
          (str_store_faction_name, s31, ":mission_object"),

          (call_script, "script_npc_decision_checklist_peace_or_war", ":mission_object", "fac_player_supporters_faction", "$g_talk_troop"),
          (assign, "$g_mission_result_with_player", reg0),
               ],
"Well, {s21}, at last I've found you. I have returned from my mission to {s31}. ","dplmc_companion_trade_request_response", [
              ]],

##response to trade request success
[anyone, "dplmc_companion_trade_request_response", [
(troop_slot_eq, "$g_talk_troop", slot_troop_current_mission, dplmc_npc_mission_trade_request),
(troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
(call_script, "script_diplomacy_faction_get_diplomatic_status_with_faction", "fac_player_supporters_faction", ":mission_object"),
(ge, reg0, 0),  #player is at peace or truce with the mission_faction
(eq, "$g_concession_demanded", 0), #doesn't want a center from us
(ge, "$g_mission_result_with_player", 1), #doesn't want war with us
(store_relation, ":relation", "fac_player_supporters_faction", ":mission_object"),
(store_random_in_range,":random", 10, 50), #20 96 alliance
(ge, ":relation", ":random"),
(store_random_in_range,":random", 0, 25), #5 75 alliance
(ge, "$player_honor", ":random"),
(store_random_in_range,":random", 5, 15), #5 50 alliance
(ge, "$player_right_to_rule", ":random"),
(faction_get_slot, ":emissary_object", ":mission_object", slot_faction_leader),
(str_store_troop_name, s4, ":emissary_object"),
],
"{s4} is willing to sign a trade agreement with you.","dplmc_companion_trade_confirm", [
         ]],

[anyone|plyr, "dplmc_companion_trade_confirm", [
(troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
(str_store_faction_name, s4, ":mission_object"),
],
"Very well -- let's sign the trade agreement with {s4}.","companion_rejoin_response", [
(troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
(call_script, "script_dplmc_start_trade_between_kingdoms", ":mission_object", "$players_kingdom", 1),
(str_store_faction_name, s4, ":mission_object"),
]],

[anyone|plyr, "dplmc_companion_trade_confirm", [],
"On second thought, perhaps this is not now in our interests.","companion_rejoin_response", [
         ]],

##response to trade request failed
[anyone, "dplmc_companion_trade_request_response", [
(troop_slot_eq, "$g_talk_troop", slot_troop_current_mission, dplmc_npc_mission_trade_request),
(troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
(faction_get_slot, ":emissary_object", ":mission_object", slot_faction_leader),
(str_store_troop_name, s4, ":emissary_object"),
],
"{s4} is not willing to sign a trade agreement.","companion_rejoin_response", [
         ]],

##nonaggression request
[anyone|plyr, "minister_diplomatic_initiative_type_select",
[
(call_script, "script_diplomacy_faction_get_diplomatic_status_with_faction", "fac_player_supporters_faction", "$g_faction_selected"),
(eq, reg0, 0),  #player is at peace

(faction_slot_eq, "$g_faction_selected", slot_faction_state, sfs_active),
(faction_get_slot, ":leader_no", "$g_faction_selected", slot_faction_leader),

(str_store_troop_name, s10, ":leader_no"),
(str_store_faction_name, s11, "$g_faction_selected"),
(str_clear, s14),
###diplomacy start+ Use reg0 for gender
(call_script, "script_dplmc_store_troop_is_female", ":leader_no"),
],#next line "him" to {reg0?her:him}
"Tell {s10} that I want to conclude a non-aggression treaty with {reg0?her:him}.", "minister_diplomatic_emissary",
##diplomacy end+
[ (assign, "$g_initiative_selected", dplmc_npc_mission_nonaggression_request),
]],

##companion returning after nonaggression request
[anyone, "event_triggered", [
     (store_conversation_troop, "$map_talk_troop"),
     (eq, "$map_talk_troop", "$npc_to_rejoin_party"),
     (troop_get_slot, ":mission", "$g_talk_troop", slot_troop_current_mission),
          (eq, ":mission", dplmc_npc_mission_nonaggression_request),

          (troop_get_slot, ":string", "$map_talk_troop", slot_troop_honorific),
     (str_store_string, 21, ":string"),
          (troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
          (str_store_faction_name, s31, ":mission_object"),

          (call_script, "script_npc_decision_checklist_peace_or_war", ":mission_object", "fac_player_supporters_faction", "$g_talk_troop"),
          (assign, "$g_mission_result_with_player", reg0),
               ],
"Well, {s21}, at last I've found you. I have returned from my mission to {s31}. ","dplmc_companion_nonaggression_request_response", [
              ]],

##response to nonaggression request success
[anyone, "dplmc_companion_nonaggression_request_response", [
(troop_slot_eq, "$g_talk_troop", slot_troop_current_mission, dplmc_npc_mission_nonaggression_request),
(troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
(call_script, "script_diplomacy_faction_get_diplomatic_status_with_faction", "fac_player_supporters_faction", ":mission_object"),
(ge, reg0, 0),  #player is at peace or truce with the mission_faction
(eq, "$g_concession_demanded", 0), #doesn't want a center from us
(ge, "$g_mission_result_with_player", 1), #doesn't want war with us
(store_relation, ":relation", "fac_player_supporters_faction", ":mission_object"),
(store_random_in_range,":random", 5, 25), #20 96 alliance
(ge, ":relation", ":random"),
(store_random_in_range,":random", 0, 20), #5 75 alliance
(ge, "$player_honor", ":random"),
(store_random_in_range,":random", 5, 10), #5 50 alliance
(ge, "$player_right_to_rule", ":random"),
(faction_get_slot, ":emissary_object", ":mission_object", slot_faction_leader),
(str_store_troop_name, s4, ":emissary_object"),
],
"{s4} is willing to conclude a non-aggression treaty with you.","dplmc_companion_nonaggression_confirm", [
         ]],

[anyone|plyr, "dplmc_companion_nonaggression_confirm", [
(troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
(str_store_faction_name, s4, ":mission_object"),
],
"Very well -- let this non-aggression treaty with {s4} be concluded.","companion_rejoin_response", [
(troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
(call_script, "script_dplmc_start_nonaggression_between_kingdoms", ":mission_object", "$players_kingdom", 1),
(str_store_faction_name, s4, ":mission_object"),
]],

[anyone|plyr, "dplmc_companion_nonaggression_confirm", [],
"On second thought, perhaps this is not now in our interests.","companion_rejoin_response", [
         ]],

##response to nonaggression request failed
[anyone, "dplmc_companion_nonaggression_request_response", [
(troop_slot_eq, "$g_talk_troop", slot_troop_current_mission, dplmc_npc_mission_nonaggression_request),
(troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
(faction_get_slot, ":emissary_object", ":mission_object", slot_faction_leader),
(str_store_troop_name, s4, ":emissary_object"),
],
"{s4} is not willing to conclude a non-aggression treaty with you.","companion_rejoin_response", [
         ]],

##war request
[anyone|plyr|repeat_for_factions, "minister_diplomatic_initiative_type_select",
[
(assign, ":proceed", 1),
(try_begin),
(eq, reg0, 2), #truce
(store_add, ":slot_truce_days", "$g_faction_selected", slot_faction_truce_days_with_factions_begin),
(val_sub, ":slot_truce_days", kingdoms_begin),
(faction_get_slot, ":truce_days", "fac_player_supporters_faction", ":slot_truce_days"),
(gt, ":truce_days", 0), #you need at least a non-aggression pact
(assign, ":proceed", 0),
(try_end),
(eq, ":proceed", 1),

(store_repeat_object, ":faction_no"),
(is_between, ":faction_no", kingdoms_begin, kingdoms_end),
(neq, ":faction_no", "fac_player_supporters_faction"),
(neq, ":faction_no", "$g_faction_selected"),
(call_script, "script_diplomacy_faction_get_diplomatic_status_with_faction", "fac_player_supporters_faction", ":faction_no"),
(eq, reg0, -2), #player is at war with the target faction
(call_script, "script_diplomacy_faction_get_diplomatic_status_with_faction", "fac_player_supporters_faction", "$g_faction_selected"),
(ge, reg0, 0),  #player is at peace or truce with the mission_faction
(call_script, "script_diplomacy_faction_get_diplomatic_status_with_faction", "$g_faction_selected", ":faction_no"),
(is_between, reg0, -1, 1),  #mission_faction provocated or peace with target_faction
(faction_slot_eq, "$g_faction_selected", slot_faction_recognized_player, 1), #recognized us
(faction_slot_eq, ":faction_no", slot_faction_state, sfs_active),
(faction_get_slot, ":leader_no", ":faction_no", slot_faction_leader),
(str_store_troop_name, s10, ":leader_no"),
(str_store_faction_name, s11, ":faction_no"),
(str_clear, s14),
###diplomacy start+ Use reg0 for gender
(call_script, "script_dplmc_store_troop_is_female", ":leader_no"),
],#next line "him" to {reg0?her:him}
"That I want {reg0?her:him} to help me and attack {s11}{s14}.", "minister_diplomatic_emissary",
##diplomacy end+
[ (assign, "$g_initiative_selected", dplmc_npc_mission_war_request),
(store_repeat_object, "$diplomacy_var"),
]],

##companion returning after war request
[anyone, "event_triggered", [
(store_conversation_troop, "$map_talk_troop"),
(eq, "$map_talk_troop", "$npc_to_rejoin_party"),
(troop_get_slot, ":mission", "$g_talk_troop", slot_troop_current_mission),
(eq, ":mission", dplmc_npc_mission_war_request),

(troop_get_slot, ":string", "$map_talk_troop", slot_troop_honorific),
(str_store_string, 21, ":string"),
(troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
(str_store_faction_name, s31, ":mission_object"),

(call_script, "script_npc_decision_checklist_peace_or_war", ":mission_object", "fac_player_supporters_faction", "$g_talk_troop"),
(assign, "$g_mission_result_with_player", reg0),
(call_script, "script_npc_decision_checklist_peace_or_war", ":mission_object", "$diplomacy_var", -1),
(assign, "$g_mission_result_with_target", reg0),
##diplomacy start+
#Disable agreeing to declare war when the kingdoms are allied.
#Make it less likely when they have other treaties.
(call_script, "script_dplmc_get_faction_truce_length_with_faction", ":mission_object", "$diplomacy_var"),
(try_begin),
	#TODO: Later there should be other intrigue options, but for now let's just
	#make it so refusal is automatic for alliances, and possible for other types.
	(gt, reg0, dplmc_treaty_defense_days_expire),
	(val_max, "$g_mission_result_with_target", 3),#Positive means does not want war
(else_try),
	(gt, reg0, dplmc_treaty_truce_days_expire),
	(store_random_in_range, reg0, 0, 2),
	(try_begin),
		(eq, reg0, 1),
		(val_max, "$g_mission_result_with_target", 3),#Positive means does not want war
	(else_try),
		(val_add, "$g_mission_result_with_target", 1),#If was undecided, choose no
		(val_max, "$g_mission_result_with_target", 0),#Best result is "undecided"
	(try_end),
(try_end),
##diplomacy end+
               ],
"Well, {s21}, at last I've found you. I have returned from my mission to {s31}. ","dplmc_companion_war_request_response", [
              ]],

##response to war request success
[anyone, "dplmc_companion_war_request_response", [
(troop_slot_eq, "$g_talk_troop", slot_troop_current_mission, dplmc_npc_mission_war_request),
(lt, "$g_mission_result_with_target", 0), #<0 want's war with target
(ge, "$g_mission_result_with_player", 2), #doesn't want war with us
(eq, "$g_concession_demanded", 0), #doesn't want a center from us
(troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
(call_script, "script_diplomacy_faction_get_diplomatic_status_with_faction", "fac_player_supporters_faction", ":mission_object"),
(ge, reg0, 0),  #player is at peace or truce with the mission_faction
(troop_get_slot, ":war_target_faction", "$g_talk_troop", dplmc_slot_troop_mission_diplomacy),
##diplomacy start+
#The other kingdom will only agree to declare war without asking for money in return
#if the player's kingdom is also at war with it, or if it is in an alliance with the
#player's kingdom.
(store_relation, ":player_faction_relation_with_war_target", ":war_target_faction", "$players_kingdom"),
(call_script, "script_dplmc_get_faction_truce_length_with_faction", ":mission_object", "$players_kingdom"),
(this_or_next|ge, reg0, dplmc_treaty_defense_days_half_done),
   (lt, ":player_faction_relation_with_war_target", 0),
##diplomacy end+
(str_store_faction_name, s31, ":war_target_faction"),
(faction_get_slot, ":emissary_object", ":mission_object", slot_faction_leader),
(str_store_troop_name, s4, ":emissary_object"),
],
"{s4} is willing to start a war with {s31}.","companion_rejoin_response", [
(troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
(troop_get_slot, ":war_target_faction", "$g_talk_troop", dplmc_slot_troop_mission_diplomacy),
(call_script, "script_diplomacy_start_war_between_kingdoms",  ":mission_object", ":war_target_faction", 1)
         ]],

##response to war request success
[anyone, "dplmc_companion_war_request_response", [
(troop_slot_eq, "$g_talk_troop", slot_troop_current_mission, dplmc_npc_mission_war_request),
##diplomacy start+
(this_or_next|lt, "$g_mission_result_with_target", 0),
##diplomacy end+
(eq, "$g_mission_result_with_target", 0), #undecided about war
(ge, "$g_mission_result_with_player", 2), #doesn't want war with us
(eq, "$g_concession_demanded", 0), #doesn't want a center from us
(troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
(call_script, "script_diplomacy_faction_get_diplomatic_status_with_faction", "fac_player_supporters_faction", ":mission_object"),
(ge, reg0, 0),  #player is at peace or truce with the mission_faction
(troop_get_slot, ":war_target_faction", "$g_talk_troop", dplmc_slot_troop_mission_diplomacy),
(str_store_faction_name, s31, ":war_target_faction"),
(faction_get_slot, ":emissary_object", ":mission_object", slot_faction_leader),
(str_store_troop_name, s4, ":emissary_object"),
##diplomacy start+
#Set the payment amount to something less arbitrary than a flat 5000.
#For example, using the same mercenary payment calculation used for the player.
(assign, ":total_fee", 0),
(try_for_parties, ":party_no"),
   (gt, ":party_no", centers_end),
	(party_is_active, ":party_no"),
   (store_faction_of_party, ":party_faction", ":party_no"),
	(eq, ":party_faction", ":mission_object"),
	(this_or_next|party_slot_eq, ":party_no", slot_party_type, spt_kingdom_hero_party),
	   (party_slot_eq, ":party_no", slot_party_type, spt_patrol),
	(try_begin),
	   (eq, "$g_dplmc_terrain_advantage", DPLMC_TERRAIN_ADVANTAGE_ENABLE),
		(call_script, "script_dplmc_get_terrain_code_for_battle", -1, ":party_no"),
		(call_script, "script_dplmc_party_calculate_strength_in_terrain", ":party_no", reg0, 0, 1),
		#Cache terrain value, but use non-terrain value for cost
		(assign, reg0, reg1),
	(else_try),
	   (call_script, "script_party_calculate_strength", ":party_no", 0),
	(try_end),
	(val_div, reg0, 2),
	(val_add, reg0, 30),
	(call_script, "script_round_value", reg0),
	(val_max, reg0, 50),#at least 50 denars per party
	(val_add, ":total_fee", reg0),
(try_end),
(val_mul, ":total_fee", 2),#The mercenary fee for two weeks

(try_begin),
	#Lessen the fee if the other kingdom particularly wants war
	(lt, "$g_mission_result_with_target", 0),
	(val_div, ":total_fee", 2),
(try_end),
(try_begin),
	#Increase the fee if the player's faction is allied with the target
	#(note: this should probably be disabled altogether...)
	(call_script, "script_dplmc_get_faction_truce_length_with_faction", ":mission_object", "$players_kingdom"),
	(ge, reg0, dplmc_treaty_defense_days_expire),
	(val_mul, ":total_fee", 3),
(else_try),
	(store_relation, reg0, ":war_target_faction", "$players_kingdom"),
	(val_mul, reg0, 2),
(try_end),

(game_get_reduce_campaign_ai, ":reduce_campaign_ai"),
(try_begin),
   (eq, ":reduce_campaign_ai", 0),#Hard: 150%
	(val_mul, ":total_fee", 3),
	(val_div, ":total_fee", 2),
(else_try),
   (eq, ":reduce_campaign_ai", 1),#Medium: 100%
(else_try),
   (eq, ":reduce_campaign_ai", 2),#Easy: 50%
	(val_div, ":total_fee", 2),
(try_end),

(val_max, ":total_fee", 5000),

(call_script, "script_dplmc_store_troop_is_female", ":mission_object"),
(assign, reg1, ":total_fee"),
(assign, "$temp_2", ":total_fee"),#save for later
],
#"{s4} is willing to start a war with {s31} but needs 5000 denars to prepare his army.","dplmc_companion_war_pay", [
"{s4} is willing to start a war with {s31} but needs {reg1} denars to prepare {reg0?her:his} army.","dplmc_companion_war_pay", [
         ]],
##diplomacy end+

##option to pay for war
[anyone|plyr, "dplmc_companion_war_pay", [
(troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
(str_store_faction_name, s4, ":mission_object"),
(gt, "$g_player_chamberlain", 0),
(store_troop_gold, ":gold", "trp_household_possessions"),
##diplomacy start+
#(ge, ":gold", 5000),
(ge, ":gold", "$temp_2"),
(call_script, "script_dplmc_store_troop_is_female", ":mission_object"),
(assign, reg1, "$temp_2"),
],
#"Pay 5000 denars from the treasury and tell him to start the war.","companion_rejoin_response", [
"Pay {reg1} denars from the treasury and tell {reg0?her:him} to start the war.","companion_rejoin_response", [
#(call_script, "script_dplmc_withdraw_from_treasury", 5000),
(assign, ":paid_gold", "$temp_2"),
(call_script, "script_dplmc_withdraw_from_treasury", ":paid_gold"),
##diplomacy end+
(troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
##diplomacy start+ actually give gold to other kingdom
(call_script, "script_dplmc_faction_leader_splits_gold", ":mission_object", ":paid_gold"),
##diplomacy end+
(troop_get_slot, ":war_target_faction", "$g_talk_troop", dplmc_slot_troop_mission_diplomacy),
(call_script, "script_diplomacy_start_war_between_kingdoms",  ":mission_object", ":war_target_faction", 1)
]],


[anyone|plyr, "dplmc_companion_war_pay", [],
"On second thought, I don't think we can take so much money from the treasury.","companion_rejoin_response", [
         ]],

##response to war request failed
[anyone, "dplmc_companion_war_request_response", [
(troop_slot_eq, "$g_talk_troop", slot_troop_current_mission, dplmc_npc_mission_war_request),
(troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
(troop_get_slot, ":war_target_faction", "$g_talk_troop", dplmc_slot_troop_mission_diplomacy),
(str_store_faction_name, s31, ":war_target_faction"),
(faction_get_slot, ":emissary_object", ":mission_object", slot_faction_leader),
(str_store_troop_name, s4, ":emissary_object"),
],
"{s4} is not willing to start a war with {s31}.","companion_rejoin_response", [
         ]],

##he doesn't want a center but we can pay him
[anyone, "companion_embassy_results", [
(troop_slot_eq, "$g_talk_troop", slot_troop_current_mission, npc_mission_peace_request),
(troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
##diplomacy start+ save the results of the script to avoid unnecessary repeated calls,
#which may introduce unexpected behavior if it's changed to used random numbers.
(call_script, "script_dplmc_get_truce_pay_amount", "fac_player_supporters_faction", ":mission_object", "$g_mission_result"),
(assign, "$temp", reg0),
(assign, "$temp_2", reg1),
##diplomacy end+
(faction_get_slot, ":emissary_object", ":mission_object", slot_faction_leader),
(str_store_troop_name, s12, ":emissary_object"),
(is_between, "$g_mission_result", -2, 1), #-2 or -1 or 0
##diplomacy start+
#(call_script, "script_dplmc_get_truce_pay_amount", "fac_player_supporters_faction", ":mission_object", "$g_mission_result"),
(gt, "$temp", 0),
(lt, "$temp_2", 0),
(assign, reg4, 0),#Use reg4 for gender
(try_begin),
	(call_script, "script_cf_dplmc_troop_is_female", ":emissary_object"),
	(assign, reg4, 1),
(try_end),
],
"{s12} says that {reg4?she:he} is willing to consider a truce of twenty days if you pay {reg4?her:him} {reg0} denars.","dplmc_companion_truce_pay", [
         ]],
##diplomacy end+

##we can pay him or pay him and give a center
[anyone, "companion_embassy_results", [
(troop_slot_eq, "$g_talk_troop", slot_troop_current_mission, npc_mission_peace_request),
(troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
(faction_get_slot, ":emissary_object", ":mission_object", slot_faction_leader),
(str_store_troop_name, s12, ":emissary_object"),
(is_between, "$g_mission_result", -2, 1), #-2 or -1 or 0
##diplomacy start+
#(call_script, "script_dplmc_get_truce_pay_amount", "fac_player_supporters_faction", ":mission_object", "$g_mission_result"),
(gt, "$temp", 0),
(gt, "$temp_2", 0),
(assign, reg0, "$temp"),
(assign, reg1, "$temp_2"),
(str_store_party_name, s18, "$g_concession_demanded"),
(assign, reg4, 0),#Use reg4 for gender
(try_begin),
	(call_script, "script_cf_dplmc_troop_is_female", ":emissary_object"),
	(assign, reg4, 1),
(try_end),
],
##next line fixed diplomacy bug, companion_truce_pay -> dplmc_companion_truce_pay; also gender from reg4
"{s12} says that {reg4?she:he} is willing to consider a truce of twenty days if you yield to {reg4?her:his} terms. Either you pay {reg0} denars or you pay {reg1} denars and give {reg4?her:him} {s18}.","dplmc_companion_truce_pay", [
         ]],
##diplomacy end+

##diplomacy start+
#Missing options: will only accept a center / will only accept a center and money
[anyone, "companion_embassy_results", [
(troop_slot_eq, "$g_talk_troop", slot_troop_current_mission, npc_mission_peace_request),
(troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
(faction_get_slot, ":emissary_object", ":mission_object", slot_faction_leader),
(str_store_troop_name, s12, ":emissary_object"),
(is_between, "$g_mission_result", -2, 1), #-2 or -1 or 0,
(le, "$temp", 0),
(eq, "$temp_2", 0),
(str_store_party_name, s18, "$g_concession_demanded"),
(assign, reg4, 0),
(try_begin),
	(call_script, "script_cf_dplmc_troop_is_female", ":emissary_object"),
	(assign, reg4, 1),
(try_end),
],#Next line: gender from reg4
"{s12} says that {reg4?she:he} is willing to consider a truce of twenty days if you give {reg4?her:him} {s18}.","dplmc_companion_truce_pay", [
         ]],
 ##diplomacy end+

[anyone, "companion_embassy_results", [
(troop_slot_eq, "$g_talk_troop", slot_troop_current_mission, npc_mission_peace_request),
(troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
(faction_get_slot, ":emissary_object", ":mission_object", slot_faction_leader),
(str_store_troop_name, s12, ":emissary_object"),
(is_between, "$g_mission_result", -2, 1), #-2 or -1 or 0,
(le, "$temp", 0),
(ge, "$temp_2", 1),
(assign, reg0, "$temp_2"),
(str_store_party_name, s18, "$g_concession_demanded"),
##diplomacy start+ Make gender correct
(assign, reg4, 0),
(try_begin),
	(call_script, "script_cf_dplmc_troop_is_female", ":emissary_object"),
	(assign, reg4, 1),
(try_end),
],#Next line: gender from reg4
"{s12} says that {reg4?she:he} is willing to consider a truce of twenty days if you pay {reg4?her:him} {reg0} denars and give {reg4?her:him} {s18}.","dplmc_companion_truce_pay", [
         ]],
##diplomacy end+

##we can pay him or give the center
[anyone, "companion_embassy_results", [
(troop_slot_eq, "$g_talk_troop", slot_troop_current_mission, npc_mission_peace_request),
(troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
(faction_get_slot, ":emissary_object", ":mission_object", slot_faction_leader),
(str_store_troop_name, s12, ":emissary_object"),
(is_between, "$g_mission_result", -2, 1), #-2 or -1 or 0
##diplomacy start+
#(call_script, "script_dplmc_get_truce_pay_amount", "fac_player_supporters_faction", ":mission_object", "$g_mission_result"),
(gt, "$temp", 0),
(eq, "$temp_2", 0),
(assign, reg0, "$temp"),
(str_store_party_name, s18, "$g_concession_demanded"),
(assign, reg4, 0),
(try_begin),
	(call_script, "script_cf_dplmc_troop_is_female", ":emissary_object"),
	(assign, reg4, 1),
(try_end),
],#Next line gender from reg4
"{s12} says that {reg4?she:he} is willing to consider a truce of twenty days if you pay {reg4?her:him} {reg0} or give {reg4?her:him} {s18}.","dplmc_companion_truce_pay", [
         ]],

#This was bugged, and should logically never occur.
##we have so many prisoners we don't have to pay
#[anyone, "companion_embassy_results", [
#  (troop_slot_eq, "$g_talk_troop", slot_troop_current_mission, npc_mission_peace_request),#
#		(troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
#		(faction_get_slot, ":emissary_object", ":mission_object", slot_faction_leader),
#		(str_store_troop_name, s12, ":emissary_object"),
#		(is_between, "$g_mission_result", -2, 1), #-2 or -1 or 0
#  (call_script, "script_dplmc_get_truce_pay_amount", "fac_player_supporters_faction", ":mission_object", "$g_mission_result"),
#  (eq, reg0, 0),
#  (le, reg1, 0),
#],
# "{s12} says that he is willing to consider a truce of twenty days.","companion_truce_confirm", [
#					]],
##diplomacy end+

##option to pay him
[anyone|plyr, "dplmc_companion_truce_pay", [
(troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
(str_store_faction_name, s4, ":mission_object"),
(store_troop_gold, ":gold", "trp_player"),#
##diplomacy start+
(assign, reg0, "$temp"),
(gt, reg0, 0),
(ge, ":gold", reg0),
],
"Pay {reg0} denars and let the truce with the {s4} be concluded","companion_rejoin_response", [
(troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
(troop_remove_gold, "trp_player", "$temp"),#todo change amount
#actually give gold to other kingdom
(call_script, "script_dplmc_faction_leader_splits_gold", ":mission_object", "$temp"),
##diplomacy end+
(call_script, "script_diplomacy_start_peace_between_kingdoms", ":mission_object", "$players_kingdom", 1),
(str_store_faction_name, s4, ":mission_object"),
]],

##option to pay him and give him a center
[anyone|plyr, "dplmc_companion_truce_pay", [
(troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
(str_store_faction_name, s4, ":mission_object"),
(store_troop_gold, ":gold", "trp_player"),
##diplomacy start+
(assign, reg1, "$temp_2"),
(gt, reg1, 0),
(ge, ":gold", reg1),
(faction_get_slot, ":emissary_object", ":mission_object", slot_faction_leader),
(assign, reg4, 0),
(try_begin),
	(call_script, "script_cf_dplmc_troop_is_female", ":emissary_object"),
	(assign, reg4, 1),
(try_end),
],
"Pay {reg1} denars and give {reg4?her:him} {s18} let this truce with the {s4} be concluded","companion_rejoin_response", [
(troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
(troop_remove_gold, "trp_player", reg1),#todo change amount
#actually give gold to other kingdom
(call_script, "script_dplmc_faction_leader_splits_gold", ":mission_object", reg0),
##diplomacy end+
(call_script, "script_give_center_to_faction", "$g_concession_demanded", ":mission_object"),
(call_script, "script_diplomacy_start_peace_between_kingdoms", ":mission_object", "$players_kingdom", 1),
(str_store_faction_name, s4, ":mission_object"),
]],

##option to give him a center
[anyone|plyr, "dplmc_companion_truce_pay", [
(troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
(str_store_faction_name, s4, ":mission_object"),
(gt, "$g_concession_demanded", 0),
##diplomacy start+
(eq, "$temp_2", 0),
(faction_get_slot, ":leader_no", ":mission_object", slot_faction_leader),
(call_script, "script_dplmc_store_troop_is_female", ":leader_no"),
],#next line "him" to {reg0?her:him}
"Give {reg0?her:him} {s18} let this truce with the {s4} be concluded","companion_rejoin_response", [
##diplomacy end+
(troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
(call_script, "script_give_center_to_faction", "$g_concession_demanded", ":mission_object"),
(call_script, "script_diplomacy_start_peace_between_kingdoms", ":mission_object", "$players_kingdom", 1),
(str_store_faction_name, s4, ":mission_object"),
]],

[anyone|plyr, "dplmc_companion_truce_pay", [],
"On second thought, perhaps this is not now in our interests..","companion_rejoin_response", [
         ]],

##diplomacy end

#SB : add option to auto-talk, too lazy to walk
[anyone|plyr, "minister_talk",
[
(is_between, "$g_player_minister", active_npcs_begin, kingdom_ladies_end),
],
"I expect to get updated reports on developing situations.", "minister_brief_employee",
[]],

[anyone|plyr, "minister_talk",
[],
"That is all for now.", "close_window",
[]],


[anyone, "minister_brief_employee",
[],
"I see. Who would you wish to confer with first?", "minister_brief_employee_choose",
[]],

[anyone|plyr, "minister_brief_employee_choose", [],
  "Nevermind, I prioritize all my advisors equally.", "minister_brief_employee_chosen", 
  [(troop_set_slot, dplmc_employees_end, dplmc_slot_troop_affiliated, 0),]],
[anyone|plyr, "minister_brief_employee_choose", [(gt, "$g_player_chamberlain", 0)],
  "I'll be meeting with the Chamberlain to organize internal affairs.", "minister_brief_employee_chosen",
  [(troop_set_slot, dplmc_employees_end, dplmc_slot_troop_affiliated, "$g_player_chamberlain"),]],
[anyone|plyr, "minister_brief_employee_choose", [(gt, "$g_player_constable", 0)],
  "With the Constable, to talk matters of war.", "minister_brief_employee_chosen",
  [(troop_set_slot, dplmc_employees_end, dplmc_slot_troop_affiliated, "$g_player_constable"),]],
[anyone|plyr, "minister_brief_employee_choose", [(gt, "$g_player_chancellor", 0)],
  "The Chancellor, to discuss the state of our realm.", "minister_brief_employee_chosen",
  [(troop_set_slot, dplmc_employees_end, dplmc_slot_troop_affiliated, "$g_player_chancellor"),]],
[anyone|plyr, "minister_brief_employee_choose", [],
  "You, of course.", "minister_brief_employee_chosen",
  [(troop_set_slot, dplmc_employees_end, dplmc_slot_troop_affiliated, "$g_talk_troop"),]],

[anyone, "minister_brief_employee_chosen",
[
(try_begin),
  (troop_slot_eq, dplmc_employees_end, dplmc_slot_troop_affiliated, 0),
  (str_store_string, s1, "@our undivided"),
(else_try),
  (troop_slot_eq, dplmc_employees_end, dplmc_slot_troop_affiliated, "$g_talk_troop"),
  (str_store_string, s1, "@my immediate"),
(else_try),
  (troop_get_slot, ":employee", dplmc_employees_end, dplmc_slot_troop_affiliated),
  (call_script, "script_dplmc_store_troop_is_female", ":employee"),
  (str_store_string, s1, "@{reg0?her:his}"),
(try_end),
],
"As you wish. You'll have {s1} attention at the next council.", "minister_pretalk",
[]],


[anyone, "minister_change_marshal",
[],
"Who should be the new marshal?", "minister_change_marshal_choose",
[]],

[anyone|plyr, "minister_change_marshal_choose",
[],
"I shall be marshal", "minister_pretalk",
[
(call_script, "script_appoint_faction_marshall", "fac_player_supporters_faction", "trp_player"),
(store_current_hours, ":hours"),
(assign, "$g_recalculate_ais", 1),
(assign, "$g_player_faction_last_marshal_appointment", ":hours"),

##diplomacy start+ Handle player is co-ruler of NPC kingdom
#Added section begin
(assign, ":ruled_faction", "fac_player_supporters_faction"),
(try_begin),
	(neg|faction_slot_eq, "fac_player_supporters_faction", slot_faction_state, sfs_active),
	(is_between, "$players_kingdom", npc_kingdoms_begin, npc_kingdoms_end),
	(call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", "$players_kingdom"),
	(ge, reg0, DPLMC_FACTION_STANDING_LEADER_SPOUSE),
	(assign, ":ruled_faction", "$players_kingdom"),
(try_end),
#Added section end
#In the following section, replace references to "fac_player_supporters_faction" with ":ruled_faction"
(try_begin),
	#(faction_slot_eq, "fac_player_supporters_faction", slot_faction_political_issue, 1),
	#(faction_set_slot, "fac_player_supporters_faction", slot_faction_political_issue, 0),
	(faction_slot_eq, ":ruled_faction", slot_faction_political_issue, 1),
	(faction_set_slot, ":ruled_faction", slot_faction_political_issue, 0),
	(faction_set_slot, "fac_player_supporters_faction", slot_faction_political_issue, 0),

	(troop_set_slot, "trp_player",  slot_troop_stance_on_faction_issue, -1),
	#Also change to support promoted kingdom ladies
	#(try_for_range, ":active_npc", active_npcs_begin, active_npcs_end),
	(try_for_range, ":active_npc", heroes_begin, heroes_end),
	   (this_or_next|is_between, ":active_npc", active_npcs_begin, active_npcs_end),
	      (troop_slot_eq, ":active_npc", slot_troop_occupation, slto_kingdom_hero),
	   (store_faction_of_troop, ":active_npc_faction", ":active_npc"),
	   (eq, ":active_npc_faction", ":ruled_faction"),
	   (troop_set_slot, ":active_npc", slot_troop_stance_on_faction_issue, -1),
	(try_end),
(try_end),
##diplomacy end+
]],

[anyone|plyr, "minister_change_marshal_choose",
[],
"For a short while, we should have no marshal", "minister_pretalk",
[
##diplomacy start+ Handle player is co-ruler of NPC kingdom
#Added section begin
(assign, ":ruled_faction", "fac_player_supporters_faction"),
(try_begin),
	(neg|faction_slot_eq, "fac_player_supporters_faction", slot_faction_state, sfs_active),
	(is_between, "$players_kingdom", npc_kingdoms_begin, npc_kingdoms_end),
	(call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", "$players_kingdom"),
	(ge, reg0, DPLMC_FACTION_STANDING_LEADER_SPOUSE),
	(assign, ":ruled_faction", "$players_kingdom"),
(try_end),
#Added section end
#In the following section, replace references to "fac_player_supporters_faction" with ":ruled_faction"
(call_script, "script_appoint_faction_marshall", ":ruled_faction", -1),
(try_begin),
	(faction_slot_eq, ":ruled_faction", slot_faction_political_issue, 1),
	(faction_set_slot, ":ruled_faction", slot_faction_political_issue, 0),
	(faction_set_slot, "fac_player_supporters_faction", slot_faction_political_issue, 0),#if not the same as ruled faction

	(troop_set_slot, "trp_player",  slot_troop_stance_on_faction_issue, -1),
	(try_for_range, ":active_npc", heroes_begin, heroes_end),#Also change this to support all herose
	   (this_or_next|is_between, ":active_npc", active_npcs_begin, active_npcs_end),
	      (troop_slot_eq, ":active_npc", slot_troop_occupation, slto_kingdom_hero),
	   (store_faction_of_troop, ":active_npc_faction", ":active_npc"),
	   (eq, ":active_npc_faction", ":ruled_faction"),
	   (troop_set_slot, ":active_npc", slot_troop_stance_on_faction_issue, -1),
	(try_end),
(try_end),
##diplomacy end+ (replacing fac_player_supporters_faction with :ruled_faction)
(assign, "$g_recalculate_ais", 1),

]],

[anyone|plyr|repeat_for_troops, "minister_change_marshal_choose",
[
(store_repeat_object, ":lord"),
##diplomacy start+ support promoted ladies
#(is_between, ":lord", active_npcs_begin, active_npcs_end),
(is_between, ":lord", heroes_begin, heroes_end),
##diplomacy end+
(troop_slot_eq, ":lord", slot_troop_occupation, slto_kingdom_hero),
(store_faction_of_troop, ":lord_faction", ":lord"),
##diplomacy start+ Handle player is co-ruler of NPC kingdom
(assign, ":is_faction_member", 0),
(try_begin),
	(eq, ":lord_faction", "$players_kingdom"),
	(is_between, "$players_kingdom", npc_kingdoms_begin, npc_kingdoms_end),
	(call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", "$players_kingdom"),
	(ge, reg0, DPLMC_FACTION_STANDING_LEADER_SPOUSE),
	(assign, ":is_faction_member", 1),
(try_end),
(this_or_next|eq, ":is_faction_member", 1),
##diplomacy end+
(eq, ":lord_faction", "fac_player_supporters_faction"),
(str_store_troop_name, s4, ":lord"),
],
"{s4}", "minister_pretalk",
[
(store_repeat_object, ":lord"),
##diplomacy start+ Handle player is co-ruler of NPC kingdom
#Added section begin
(assign, ":ruled_faction", "fac_player_supporters_faction"),
(try_begin),
	(neg|faction_slot_eq, "fac_player_supporters_faction", slot_faction_state, sfs_active),
	(is_between, "$players_kingdom", npc_kingdoms_begin, npc_kingdoms_end),
	(call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", "$players_kingdom"),
	(ge, reg0, DPLMC_FACTION_STANDING_LEADER_SPOUSE),
	(assign, ":ruled_faction", "$players_kingdom"),
(try_end),
#Added section end
#In the following section, replace references to "fac_player_supporters_faction" with ":ruled_faction"
(call_script, "script_appoint_faction_marshall", ":ruled_faction", ":lord"),#dplmc+ changed
(store_current_hours, ":hours"),
(assign, "$g_player_faction_last_marshal_appointment", ":hours"),
#xxx TODO: Modify both fac_player_supporters_faction and players_kingdom in parallel
(try_begin),
	(faction_slot_eq, ":ruled_faction", slot_faction_political_issue, 1),#dplmc+ changed
	(faction_set_slot, ":ruled_faction", slot_faction_political_issue, 0),#dplmc+ changed
	(faction_set_slot, "fac_player_supporters_faction", slot_faction_political_issue, 0),#dplmc+ added

	(troop_set_slot, "trp_player",  slot_troop_stance_on_faction_issue, -1),
	#(try_for_range, ":active_npc", active_npcs_begin, active_npcs_end),#Changed this to support promoted kingdom ladies
	(try_for_range, ":active_npc", heroes_begin, heroes_end),
		(this_or_next|is_between, ":active_npc", active_npcs_begin, active_npcs_end),
			(troop_slot_eq, ":active_npc", slot_troop_occupation, slto_kingdom_hero),
	   (store_faction_of_troop, ":active_npc_faction", ":active_npc"),
	   (eq, ":active_npc_faction", ":ruled_faction"),#dplmc+ changed
	   (troop_set_slot, ":active_npc", slot_troop_stance_on_faction_issue, -1),
	(try_end),
(try_end),
##diplomacy end+
(assign, "$g_recalculate_ais", 1),
]],


[anyone|plyr, "minister_change_marshal_choose",
[],
"Never mind.", "minister_pretalk",
[]],



[anyone, "minister_diplomatic_kingdoms",
[
##diplomacy start+
#Speed up, and also support non-traditional companions.
##OLD:
#(assign, ":companion_found", 0),
#(try_for_range, ":emissary", companions_begin, companions_end),
#(main_party_has_troop, ":emissary"),
#(assign, ":companion_found", 1),
#(try_end),
#(eq, ":companion_found", 1),
(assign, ":end_cond", heroes_end),
(try_for_range, ":emissary", heroes_begin, ":end_cond"),
	(this_or_next|is_between, ":emissary", companions_begin, companions_end),
		(troop_slot_eq, ":emissary", slot_troop_occupation, slto_player_companion),
	(main_party_has_troop, ":emissary"),
	(assign, ":end_cond", ":emissary"),
(try_end),
(lt, ":end_cond", heroes_end),
],
"To whom do you wish to send this emissary?", "minister_diplomatic_kingdoms_select",
[]],

[anyone, "minister_diplomatic_kingdoms",
[
],
"Unfortunately, there is no one to send right now.", "minister_pretalk",
[]],



[anyone, "minister_diplomatic_kingdoms",
[],
"To whom do you wish to send this emissary?", "minister_diplomatic_kingdoms_select",
[]],

[anyone|plyr|repeat_for_factions, "minister_diplomatic_kingdoms_select",
[
(store_repeat_object, ":faction_no"),
(is_between, ":faction_no", kingdoms_begin, kingdoms_end),
##diplomacy start+ Required if the player can be ruler or co-ruler of another faction
(neg|faction_slot_eq, ":faction_no", slot_faction_leader, "trp_player"),
(neq, ":faction_no", "$players_kingdom"),
##diplomacy end+
(neq, ":faction_no", "fac_player_supporters_faction"),
(faction_slot_eq, ":faction_no", slot_faction_state, sfs_active),
(faction_get_slot, ":leader_no", ":faction_no", slot_faction_leader),
(str_store_troop_name, s10, ":leader_no"),
(str_store_faction_name, s11, ":faction_no"),
(str_clear, s14),
#Has/has not recognized us a monarch
],
"{s10} of the {s11}{s14}", "minister_diplomatic_initiative_type",
[
(store_repeat_object, "$g_faction_selected"),
]],

[anyone|plyr, "minister_diplomatic_kingdoms_select",
[],
"Never mind.", "minister_pretalk",
[]],


[anyone, "minister_diplomatic_initiative_type",
##diplomacy start+
#[],
[
(faction_get_slot, ":leader_no", "$g_faction_selected", slot_faction_leader),#Use reg0 for gender
(call_script, "script_dplmc_store_troop_is_female", ":leader_no"),
],#next line "him" to {reg0?her:him}
"What do you wish to tell {reg0?her:him}?", "minister_diplomatic_initiative_type_select",
[]],
##diplomacy end+


[anyone|plyr, "minister_diplomatic_initiative_type_select",
[(store_relation, ":relation", "fac_player_supporters_faction", "$g_faction_selected"),
(lt, ":relation", 0),],
"That our two kingdoms should enter into truce.", "minister_diplomatic_emissary",
[(assign, "$g_initiative_selected", npc_mission_peace_request)]],

[anyone|plyr, "minister_diplomatic_initiative_type_select",
##diplomacy start+
#[],
[
#Disable when the player is the ruler or co-ruler of an NPC kingdom.
#Setting up a separate dialog for this is something to do later, but
#not a high priority.
#TODO: Consider if there should be an alternative when the player is married to a pretender.
(neg|is_between, "$players_kingdom", npc_kingdoms_begin, npc_kingdoms_end),
(faction_get_slot, ":leader_no", "$g_faction_selected", slot_faction_leader),#Use reg0 for gender
(call_script, "script_dplmc_store_troop_is_female", ":leader_no"),
],#next line "his" to {reg0?her:his}
"That I wish to put myself under {reg0?her:his} protection, as {reg0?her:his} vassal.", "minister_diplomatic_emissary",
##diplomacy end+
[(assign, "$g_initiative_selected", npc_mission_pledge_vassal)]],

[anyone|plyr, "minister_diplomatic_initiative_type_select",
[(store_relation, ":relation", "fac_player_supporters_faction", "$g_faction_selected"),
(faction_slot_eq, "$g_faction_selected", slot_faction_recognized_player, 0),
(ge, ":relation", 0),],
"That I wish to express my goodwill, as one monarch to another.", "minister_diplomatic_emissary",
[(assign, "$g_initiative_selected", npc_mission_seek_recognition),]],

[anyone|plyr, "minister_diplomatic_initiative_type_select",
[(store_relation, ":relation", "fac_player_supporters_faction", "$g_faction_selected"),
(ge, ":relation", 0),##diplomacy start+],
#(neg|is_between, "$players_kingdom", npc_kingdoms_begin, npc_kingdoms_end),#Disable when the player shares power
(faction_get_slot, ":leader_no", "$g_faction_selected", slot_faction_leader),#Use reg0 for gender
(call_script, "script_dplmc_store_troop_is_female", ":leader_no"),
],#next line "him" to {reg0?her:him}
"That I declare war upon {reg0?her:him}.", "minister_declare_war",
                     ##diplomacy end+
[]],

[anyone|plyr, "minister_diplomatic_initiative_type_select",[], "Never mind.", "close_window",[]],

##diplomacy start+
##
#Disable when the player is the ruler or co-ruler of an NPC kingdom.
#Setting up a separate dialog for this is something to do later, but
#not a high priority.
#TODO: Consider if there should be an alternative when the player is married to a pretender.
[anyone, "minister_declare_war",
[
   (assign, ":veto_troop", 0),
   (try_begin),
      (gt, "$players_kingdom", -1),
      (faction_get_slot, reg0, "$players_kingdom", slot_faction_leader),
      (gt, reg0, "trp_player"),
      (assign, ":veto_troop", reg0),
   (else_try),
      (is_between, "$players_kingdom", npc_kingdoms_begin, npc_kingdoms_end),
      (troop_get_slot, reg0, "trp_player", slot_troop_spouse),
      (gt, reg0, 0),
      (assign, ":veto_troop", reg0),
   (try_end),
   (gt, ":veto_troop", 0),
   (str_store_troop_name, s0, ":veto_troop"),
], "For that you should first speak to {s0}.", "dplmc_minister_nevermind", []],

[anyone|plyr, "dplmc_minister_nevermind", [], "I might go do so.", "close_window",[]],

[anyone|plyr, "dplmc_minister_nevermind", [], "Never mind.", "minister_pretalk",[]],
##diplomacy end+
[anyone, "minister_declare_war",
[(try_begin),
   (call_script, "script_diplomacy_faction_get_diplomatic_status_with_faction", "fac_player_supporters_faction", "$g_faction_selected"),
(eq, reg0, 1),
(str_store_string, s12, "str_in_doing_so_you_will_be_in_violation_of_your_truce_is_that_what_you_want"),
(else_try),
   (call_script, "script_diplomacy_faction_get_diplomatic_status_with_faction", "fac_player_supporters_faction", "$g_faction_selected"),
(neq, reg0, -1),
(str_store_string, s12, "str_if_you_attack_without_provocation_some_of_your_vassals_may_consider_you_to_be_too_warlike_is_that_what_you_want"),
(else_try),
(str_store_string, s12, "str_our_men_are_ready_to_ride_forth_at_your_bidding_are_you_sure_this_is_what_you_want"),
(try_end),
], "{s12}", "minister_declare_war_confirm",
[]],

[anyone|plyr, "minister_declare_war_confirm",
[(str_store_faction_name, s12, "$g_faction_selected"),
],
"It is. I wish to make war on {s12}.", "minister_declare_war_confirm_yes",
[
(call_script, "script_diplomacy_start_war_between_kingdoms",  "fac_player_supporters_faction", "$g_faction_selected", 1),
]],

[anyone|plyr, "minister_declare_war_confirm",
[(str_store_faction_name, s12, "$g_faction_selected"),
],
"Hmm. Perhaps not.", "minister_pretalk",
[
]],

[anyone, "minister_declare_war_confirm_yes",
[(str_store_faction_name, s12, "$g_faction_selected"),
],
"As you command. We are now at war with the {s12}. May the heavens grant us victory.", "minister_pretalk",
[
]],


[anyone, "minister_diplomatic_emissary",
[], "Who shall be your emissary? You should choose one whom you trust, but who is also persuasive -- one who can negotiate without giving offense.", "minister_emissary_select",
[]],

[anyone|plyr|repeat_for_troops, "minister_emissary_select",[
(store_repeat_object, ":emissary"),
(main_party_has_troop, ":emissary"),
##diplomacy start+
##OLD:
#(is_between, ":emissary", companions_begin, companions_end),
#(troop_slot_eq, ":emissary", slot_troop_prisoner_of_party, -1),
#(is_between, ":emissary", active_npcs_begin, active_npcs_end),
##NEW:
# Support alternate possible companions
(is_between, ":emissary", heroes_begin, heroes_end),
(troop_slot_eq, ":emissary", slot_troop_prisoner_of_party, -1),
(this_or_next|is_between, ":emissary", companions_begin, companions_end),
(troop_slot_eq, ":emissary", slot_troop_occupation, slto_player_companion),
##diplomacy end+
(str_store_troop_name, s11, ":emissary"),
], "{s11}", "minister_emissary_dispatch",[
(store_repeat_object, "$g_emissary_selected"),
]],

[anyone|plyr, "minister_emissary_select",[
], "Actually, I can't think of anyone.", "minister_pretalk",[]],

[anyone, "minister_emissary_dispatch",
[
(str_store_troop_name, s11, "$g_emissary_selected"),
(str_store_faction_name, s12, "$g_faction_selected"),
(try_begin),
  (eq, "$g_initiative_selected", npc_mission_seek_recognition),
  (str_store_string, s14, "str_seek_recognition"),
(else_try),
  (eq, "$g_initiative_selected", npc_mission_pledge_vassal),
  (str_store_string, s14, "str_seek_vassalhood"),
(else_try),
  (eq, "$g_initiative_selected", npc_mission_peace_request),
  (str_store_string, s14, "str_seek_a_truce"),
##diplomacy begin
(else_try),
  (eq, "$g_initiative_selected", dplmc_npc_mission_nonaggression_request),
  (str_store_string, s14, "str_dplmc_conclude_non_agression"),
##diplomacy end
(try_end),
], "Very well -- I shall send {s11} to the {s12} to {s14}.", "minister_diplomatic_dispatch_confirm",[]],

[anyone|plyr, "minister_diplomatic_dispatch_confirm",[], "Yes, do that", "minister_pretalk",[

#SB : calculate this based on distance from $current_town to target troop/center or faction walled center + pathfinding/riding bonus
#"border" castles are around 30 map units away, furthest between cities is around 200-300 away
(assign, ":days", 3),
(try_begin), #TODO: check initiative to see if we need to reach a specific center
  (assign, ":target_center", -1),
(try_end),
(try_begin),
  (neg|is_between, ":target_center", centers_begin, centers_end),
  (is_between, "$g_faction_selected", kingdoms_begin, kingdoms_end),
  (set_fixed_point_multiplier, 1000),
  (assign, ":distance", 99999),
  (assign, ":target_center", -1),
  (try_for_range, ":center_no", walled_centers_begin, walled_centers_end),
    (neq, ":center_no", "$current_town"),
    (store_faction_of_party, ":center_faction", ":center_no"),
    (eq, ":center_faction", "$g_faction_selected"),
    (store_distance_to_party_from_party, ":cur_distance", "$current_town", ":center_no"),
    (le, ":cur_distance", ":distance"),
    (assign, ":target_center", ":center_no"),
    (assign, ":distance", ":cur_distance"),
  (try_end),
(try_end),
(store_distance_to_party_from_party, ":cur_distance", "$current_town", ":center_no"),
(try_begin), #between bordering castles
  (is_between, ":cur_distance", 0, 40),
  (assign, ":days", 1),
(else_try), #from capital to starting neighbour's centers
  (is_between, ":cur_distance", 40, 100),
  (assign, ":days", 3),
(else_try),
  (is_between, ":cur_distance", 100, 200),
  (assign, ":days", 5),
(else_try),
  (assign, ":days", 7),
(try_end),
(troop_set_slot, "$g_emissary_selected", slot_troop_days_on_mission, ":days"),
(troop_set_slot, "$g_emissary_selected", slot_troop_current_mission, "$g_initiative_selected"),
(troop_set_slot, "$g_emissary_selected", slot_troop_mission_object, "$g_faction_selected"),
##diplomacy begin
(try_begin),
  (eq, "$g_initiative_selected", dplmc_npc_mission_gift_horses_request),
  (call_script, "script_dplmc_withdraw_from_treasury", "$diplomacy_var"),
(try_end),

(troop_set_slot, "$g_emissary_selected", dplmc_slot_troop_mission_diplomacy, "$diplomacy_var"),
(troop_set_slot, "$g_emissary_selected", dplmc_slot_troop_mission_diplomacy2, "$diplomacy_var2"),
##diplomacy end

#SB : add renown for sending message, success/failure will deduct
(call_script, "script_change_troop_renown", "$g_emissary_selected", dplmc_companion_emissary_renown),
(remove_member_from_party, "$g_emissary_selected", "p_main_party"),
]],


[anyone|plyr, "minister_diplomatic_dispatch_confirm",[], "Actually, hold off on that", "minister_pretalk",[]],

[anyone, "minister_replace",
[], "Very good. Whom will you appoint in my stead?", "minister_replace_select",
[]],

[anyone|plyr|repeat_for_troops, "minister_replace_select",
[
(store_repeat_object, ":troop_no"),
(is_between, ":troop_no", companions_begin, companions_end),
(main_party_has_troop, ":troop_no"),
(troop_slot_eq, ":troop_no", slot_troop_prisoner_of_party, -1),
##diplomacy start+
##OLD:
#(str_store_troop_name, s4, ":troop_no"),
##NEW:
(call_script, "script_dplmc_cap_troop_describes_troop_to_troop_s1", 1, "trp_player", ":troop_no", "$g_talk_troop"),
(str_store_string_reg, s4, s1),
##diplomacy end+
], "{s4}", "minister_replace_confirm",
[
(store_repeat_object, "$g_player_minister"),
]],

[anyone|plyr, "minister_replace_select",
[
(troop_get_slot, ":spouse", "trp_player", slot_troop_spouse),
(gt, ":spouse", 0),
##diplomacy start+
##OLD:
#(troop_get_type, ":is_female", ":spouse"),
#(neg|troop_slot_eq, ":spouse", slot_troop_occupation, slto_kingdom_hero),
#(eq, ":is_female", 1),
##NEW:
#Most of this logic has been moved to the next dialog.  Use this solely for handling
#spouses outside the normal hero range.
(neg|is_between, ":spouse", heroes_begin, heroes_end),
(troop_slot_eq, ":spouse", slot_troop_occupation, slto_kingdom_hero),
(neg|troop_slot_ge, ":spouse", slot_troop_occupation, slto_retirement),#not retired, in exile, or dead
(call_script, "script_dplmc_store_troop_is_female", ":spouse"),
##diplomacy end+

(str_store_troop_name, s4, ":spouse"),
(neq, ":spouse", "$g_talk_troop"),
##diplomacy start+
##OLD:
#], "My wife, {s4}.", "minister_replace_confirm", #husband disabled, as he's an active lord
##NEW:
], "My {reg0?wife:husband}, {s4}.", "minister_replace_confirm", #Gender assumptions like that aren't useful
##diplomacy end+
[
(troop_get_slot, "$g_player_minister", "trp_player", slot_troop_spouse),
]],

##diplomacy start+
#Support for multiple spouses, or for other dependents.
[anyone|plyr|repeat_for_troops, "minister_replace_select",
[
(store_repeat_object, ":troop_no"),
(is_between, ":troop_no", heroes_begin, heroes_end),#is a valid hero
(this_or_next|is_between, ":troop_no", kingdom_ladies_begin, kingdom_ladies_end),#is a kingdom lady
	(troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_lady),
(neg|troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_hero),#Not a promoted kingdom lady
(neg|troop_slot_ge, ":troop_no", slot_troop_occupation, slto_retirement),#Not retired, dead, exiled, etc.
(neg|troop_slot_ge, ":troop_no", slot_troop_prisoner_of_party, 0),#Not a prisoner
(this_or_next|neg|is_between, ":troop_no", companions_begin, companions_end),#Don't double-list companions
	(neg|main_party_has_troop, ":troop_no"),

(neq, ":troop_no", "$g_talk_troop"),

(call_script, "script_dplmc_troop_get_family_relation_to_troop", ":troop_no", "trp_player"),
(gt, reg0, 0),#Related
#(assign, ":relation_string_index", reg1),

(try_begin),
	(this_or_next|ge, reg0, 15),#Spouse, child, parent
	(this_or_next|eq, reg1, "str_dplmc_sister_wife"),
		(eq, reg1, "str_dplmc_co_husband"),
(else_try),
	#Otherwise, disallow if the troop has a (valid) guardian who is not the
	#player or themself
	(call_script, "script_get_kingdom_lady_social_determinants", ":troop_no"),
	(try_begin),
		(this_or_next|le, reg0, "trp_player"),#the player or a negative value
			(eq, reg0, ":troop_no"),
		(assign, reg0, 1),
	(else_try),
		(assign, reg0, 0),
	(try_end),
(try_end),
(ge, reg0, 0),
#(str_store_string, s11, ":relation_string_index"),
#(str_store_troop_name, s4, ":troop_no"),
(call_script, "script_dplmc_cap_troop_describes_troop_to_troop_s1", 1, "trp_player", ":troop_no", "$g_talk_troop"),
(str_store_string_reg, s4, s1),
], "{s4}.", "minister_replace_confirm", #husband disabled, as he's an active lord
[
(store_repeat_object, "$g_player_minister"),
]],
##diplomacy end+

[anyone|plyr, "minister_replace_select",
[], "Actually, hold off on that.", "minister_pretalk",
[]],




[anyone, "minister_replace_confirm",
[
(troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_player_companion),
], "Very good. {s9} is your new minister. I shall make ready to rejoin you.", "close_window",
[
(str_store_troop_name, s9, "$g_player_minister"),
(party_add_members, "p_main_party", "$g_talk_troop", 1),
(assign, "$g_leave_encounter", 1),
(try_begin),
(main_party_has_troop, "$g_player_minister"),
(party_remove_members, "p_main_party", "$g_player_minister", 1),
(try_end),

(try_for_range, ":minister_quest", all_quests_begin, all_quests_end),
(quest_slot_eq, ":minister_quest", slot_quest_giver_troop, "$g_talk_troop"),
(call_script, "script_abort_quest", ":minister_quest", 0),
(try_end),
]],

[anyone, "minister_replace_confirm",
[
], "Very good. {s9} is your new minister. It has been an honor to serve you.", "close_window",
[
(str_store_troop_name, s9, "$g_player_minister"),
(try_begin),
(main_party_has_troop, "$g_player_minister"),
(party_remove_members, "p_main_party", "$g_player_minister", 1),
(try_end),
##diplomacy start+ Occupation cleanup
(try_begin),
	#Nothing needs to be done for non-heroes, or if the occupation is already kingdom hero or kingdom lady.
	(this_or_next|neg|is_between, "$g_talk_troop", heroes_begin, heroes_end),
	(this_or_next|troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_hero),
		(troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_lady),
(else_try),
	(is_between, "$g_talk_troop", kingdom_ladies_begin, kingdom_ladies_end),
	(neg|troop_slot_eq, "$g_talk_troop", slot_troop_playerparty_history, dplmc_pp_history_granted_fief),
	(neg|troop_slot_eq, "$g_talk_troop", slot_troop_playerparty_history, dplmc_pp_history_lord_rejoined),
	(troop_set_slot, "$g_talk_troop", slot_troop_occupation, slto_kingdom_lady),
(else_try),
	#This can't be reached right now, but if it is, make sure that the companion goes
	#back to the taverns instead of suddenly becoming a hero.
	(is_between, "$g_talk_troop", companions_begin, companions_end),
	(neg|troop_slot_eq, "$g_talk_troop", slot_troop_playerparty_history, dplmc_pp_history_granted_fief),
	(neg|troop_slot_eq, "$g_talk_troop", slot_troop_playerparty_history, dplmc_pp_history_lord_rejoined),
	(neg|troop_slot_eq, "$g_talk_troop", slot_troop_playerparty_history, dplmc_pp_history_nonplayer_entry),
	(troop_set_slot, "$g_talk_troop", slot_troop_occupation, slto_inactive),
(else_try),
	(troop_set_slot, "$g_talk_troop", slot_troop_occupation, slto_kingdom_hero),
(else_try),

(try_end),
##diplomacy end+
]],



[anyone, "minister_grant_fief",
[
(faction_get_slot, ":fief_on_agenda", "$players_kingdom", slot_faction_political_issue),
(str_clear, s12),
(try_begin),
(is_between, ":fief_on_agenda", centers_begin, centers_end),
(str_store_party_name, s4, ":fief_on_agenda"),
(str_store_string, s12, "str_minister_advice_select_fief"),
(else_try),
(eq, ":fief_on_agenda", 1),
(str_store_string, s12, "str_minister_advice_select_fief_wait"),
(try_end),
],
"Which of your fiefs did you wish to grant?{s12}", "minister_grant_fief_select",
[]],


[anyone|plyr|repeat_for_parties, "minister_grant_fief_select",
[
(store_repeat_object, ":center_no"),
(is_between, ":center_no", centers_begin, centers_end),
(store_faction_of_party, ":center_faction", ":center_no"),
(eq, ":center_faction", "fac_player_supporters_faction"),
##diplomacy begin
(neg|party_slot_eq, ":center_no", slot_village_infested_by_bandits, "trp_peasant_woman"),
##diplomacy end
(neq, ":center_no", "$g_player_court"),
(party_get_slot, ":town_lord", ":center_no", slot_town_lord),
(try_begin),
(ge, ":town_lord", active_npcs_begin),
(store_faction_of_troop, ":town_lord_faction", ":town_lord"),
(neq, ":town_lord_faction", "fac_player_supporters_faction"),
(assign, ":town_lord", -1),
(try_end),
(le, ":town_lord", 0),

(str_store_party_name, s1, ":center_no"),
(str_clear, s12),
(try_begin),
(party_slot_eq, ":center_no", slot_town_lord, -1),
(str_store_string, s12, "str_unassigned_center"),
(try_end),

],"{s1}{s12}", "minister_grant_fief_select_recipient",
[
(store_repeat_object, "$fief_selected"),
]],

[anyone|plyr, "minister_grant_fief_select",
[
],"Never mind.", "minister_pretalk",
[]],

[anyone, "minister_grant_fief_select_recipient",
[
(str_clear, s12),
(try_begin),
(faction_slot_eq, "$players_kingdom", slot_faction_political_issue, "$fief_selected"),

##diplomacy start+ support promoted ladies
#(try_for_range, ":active_npc", active_npcs_begin, active_npcs_end),
(try_for_range, ":active_npc", heroes_begin, heroes_end),
##diplomacy end+
(troop_set_slot, ":active_npc", slot_troop_temp_slot, 0),
(try_end),

(assign, ":popular_favorite", -1),
(assign, ":votes_for_popular_favorite", 0),
##diplomacy start+
(troop_set_slot, "trp_player", slot_troop_temp_slot, 0),
#support promoted ladies
#(try_for_range, ":active_npc", active_npcs_begin, active_npcs_end),
(try_for_range, ":active_npc", heroes_begin, heroes_end),
    (this_or_next|is_between, ":active_npc", active_npcs_begin, active_npcs_end),
       (troop_slot_eq, ":active_npc", slot_troop_occupation, slto_kingdom_hero),
##dipolomacy end+
(store_faction_of_troop, ":active_npc_faction", ":active_npc"),
(eq, ":active_npc_faction", "fac_player_supporters_faction"),
(troop_get_slot, ":selected_npc", ":active_npc", slot_troop_stance_on_faction_issue),
(ge, ":selected_npc", 0),

(troop_get_slot, ":votes_accumulated", ":selected_npc", slot_troop_temp_slot),
(val_add, ":votes_accumulated", 1),
(troop_set_slot, ":selected_npc", slot_troop_temp_slot, ":votes_accumulated"),

(gt, ":votes_accumulated", ":votes_for_popular_favorite"),
(assign,  ":votes_for_popular_favorite", ":votes_accumulated"),
(assign, ":popular_favorite", ":selected_npc"),
(try_end),

##diplomacy start+ support promoted ladies
#(is_between, ":popular_favorite", active_npcs_begin, active_npcs_end),
(is_between, ":popular_favorite", heroes_begin, heroes_end),
##diplomacy end+
(str_store_troop_name, s4, ":popular_favorite"),
(assign, reg4, ":votes_for_popular_favorite"),

(str_store_string, s12, "str_minister_advice_fief_leading_vassal"),
(try_end),

],"And who will you choose to receive the fief?{s12}", "minister_grant_fief_select_recipient_choice",
[]],

[anyone|plyr|repeat_for_troops, "minister_grant_fief_select_recipient_choice",
[
(store_repeat_object, ":troop_no"),
(troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_hero),
##diplomacy start+ add support for promoted ladies
#(is_between, ":troop_no", active_npcs_begin, active_npcs_end),
(is_between, ":troop_no", heroes_begin, heroes_end),
##diplomacy end+
(store_faction_of_troop, ":troop_faction", ":troop_no"),
##diplomacy start+ add support for player is ruler/co-ruler of NPC kingdom
(is_between, ":troop_faction", kingdoms_begin, kingdoms_end),
(this_or_next|eq, ":troop_faction", "$players_kingdom"),
##diplomacy end+
(eq, ":troop_faction", "fac_player_supporters_faction"),
##diplomacy start+ show number of fiefs
#(str_store_troop_name, s1, ":troop_no"),
(str_store_troop_name, s11, ":troop_no"),
(call_script, "script_print_troop_owned_centers_in_numbers_to_s0", ":troop_no"),
(try_begin),
	(troop_slot_eq, "$g_talk_troop", slot_lord_recruitment_argument, argument_benefit),
	(str_store_string, s12, "str__promised_fief"),
(else_try),
	(str_clear, s12),
(try_end),
(try_begin),
	(eq, reg0, 0),
	(str_store_string, s0, "str_no_fiefss12"),
(else_try),
	(str_store_string, s0, "str_fiefs_s0s12"),
(try_end),
#add relation string
(str_store_string_reg, s12, s63),#save s63, clobbering s12 (perhaps already overwritten)
(call_script, "script_troop_get_player_relation", ":troop_no"),
(call_script, "script_describe_relation_to_s63", reg0),
(str_store_string_reg, s1, s63),#clobber s1
(str_store_string_reg, s63, s12),#revert s63
(str_store_string, s1, "str_dplmc_s0_comma_s1"),#write to s1

#(try_end),
##diplomacy end+

],"{!}{s11} {s1}.", "minister_grant_fief_complete",
[
(store_repeat_object, "$lord_selected"),
]],

[anyone|plyr, "minister_grant_fief_select_recipient_choice",
[
],"Never mind.", "minister_pretalk",
[]],

[anyone, "minister_grant_fief_complete",
[
],"Very well -- {s2} shall receive {s1}.", "minister_pretalk",
[
(call_script, "script_give_center_to_lord", "$fief_selected", "$lord_selected", 0),
(str_store_party_name, s1, "$fief_selected"),
(str_store_troop_name, s2, "$lord_selected"),

(try_begin),
(faction_slot_eq, "$players_kingdom", slot_faction_political_issue, "$fief_selected"),
(faction_set_slot, "$players_kingdom", slot_faction_political_issue, -1),
(try_end),

(call_script, "script_add_log_entry", logent_castle_given_to_lord_by_player, "trp_player", "$fief_selected", "$lord_selected", "$g_encountered_party_faction"),
]],






[anyone, "minister_indict",
[], "Grim news, {sire/my lady}. Who do you believe is planning to betray you?", "minister_indict_select",
[]],

[anyone|plyr|repeat_for_troops, "minister_indict_select",
[
(store_repeat_object, ":troop_no"),
(troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_hero),
(store_faction_of_troop, ":faction", ":troop_no"),
##diplomacy start+
(troop_is_hero, ":troop_no"),
(neq, ":troop_no", "trp_player"),
#Prevent problems when the player is co-ruler of a kingdom.
(neg|faction_slot_eq, "fac_player_supporters_faction", slot_faction_leader, ":troop_no"),
(neg|faction_slot_eq, "$players_kingdom", slot_faction_leader, ":troop_no"),
##diplomacy end+
(eq, ":faction", "fac_player_supporters_faction"),
(str_store_troop_name, s11, ":troop_no"),
], "{s11}", "minister_indict_confirm",
[
(store_repeat_object, "$lord_selected"),
]],

[anyone|plyr, "minister_indict_select",
[], "Never mind.", "minister_pretalk",
[]],


[anyone, "minister_indict_confirm",
[
(str_store_troop_name, s4, "$lord_selected"),
##diplomacy start+
##OLD:
#(troop_get_type, reg4, "$lord_selected"),
##NEW:
(assign, reg4, 0),
(try_begin),
	(call_script, "script_cf_dplmc_troop_is_female", "$lord_selected"),
	(assign, reg4, 1),
(try_end),
##diplomacy end+
], "Think carefully on this, {sire/my lady}. If you indict {s4} for treason unjustly, you may find that others become nervous about serving you. On the other hand, if you truly believe that {reg4?she:he} is about to betray you, then perhaps it is best to move first, to secure control of {reg4?her:his} fortresses.", "minister_indict_confirm_answer",
[]],

[anyone|plyr, "minister_indict_confirm_answer",[], "I have thought long enough. Issue the indictment!", "minister_indict_conclude",[]],

[anyone|plyr, "minister_indict_confirm_answer",[], "Perhaps I should wait a little while longer..", "minister_pretalk",[]],

[anyone, "minister_indict_conclude",
[], "It has been sent, {sire/my lady}.", "minister_pretalk",
[
(call_script, "script_indict_lord_for_treason", "$lord_selected", "fac_player_supporters_faction"),
]],










[anyone|plyr|repeat_for_troops, "center_captured_lord_advice",
[
(store_repeat_object, ":troop_no"),
(troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_hero),
(neq, "$g_talk_troop", ":troop_no"),
(neq, "trp_player", ":troop_no"),
(store_troop_faction, ":faction_no", ":troop_no"),
##diplomacy start+ Handle player is co-ruler of kingdom
(call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", ":faction_no"),
(this_or_next|ge, reg0, DPLMC_FACTION_STANDING_LEADER_SPOUSE),
##diplomacy end+
(eq, ":faction_no", "fac_player_supporters_faction"),
(str_store_troop_name, s11, ":troop_no"),
(call_script, "script_print_troop_owned_centers_in_numbers_to_s0", ":troop_no"),

(try_begin),
##diplomacy start+ fixed bug that was preventing "promised fief" from appearing
(troop_slot_eq, ":troop_no", slot_lord_recruitment_argument, argument_benefit),#changed "$g_talk_troop" to ":troop_no"
##diplomacy end+
(str_store_string, s12, "str__promised_fief"),
(else_try),
(str_clear, s12),
(try_end),

(try_begin),
 (eq, reg0, 0),
 ##diplomacy start+ write to s0 instead of s1
 (str_store_string, s0, "str_no_fiefss12"),
 ##diplomacy end_
(else_try),
 ##diplomacy start+ write to s0 instead of s1
 (str_store_string, s0, "str_fiefs_s0s12"),
 ##diplomacy end+
(try_end),
##diplomacy start+ add relation to list of lords
#add relation string
(str_store_string_reg, s12, s63),#save s63, clobbering s12 (perhaps overwritten earlier)
(call_script, "script_troop_get_player_relation", ":troop_no"),
(call_script, "script_describe_relation_to_s63", reg0),
(str_store_string_reg, s1, s63),#clobber s1
(str_store_string_reg, s63, s12),#revert s63
(str_store_string, s1, "str_dplmc_s0_comma_s1"),#write to s1
##diplomacy end+
],
"{s11}. {s1}", "center_captured_lord_advice_2",
[
(store_repeat_object, "$temp"),
]],

[anyone|plyr, "center_captured_lord_advice",
[
(call_script, "script_print_troop_owned_centers_in_numbers_to_s0", "trp_player"),
(str_store_party_name, s1, "$g_center_taken_by_player_faction"),

(try_begin),
(is_between, "$g_talk_troop", pretenders_begin, pretenders_end),
(str_store_string, s12, "str_please_s65_"),
(else_try),
(str_clear, s12),
(try_end),
],
"{s12}I want to have {s1} for myself. (fiefs: {s0})", "center_captured_lord_advice_2",
[
(assign, "$temp", "trp_player"),
]],

[anyone|plyr, "center_captured_lord_advice",
[
(call_script, "script_print_troop_owned_centers_in_numbers_to_s0", "$g_talk_troop"),
(str_store_party_name, s1, "$g_center_taken_by_player_faction"),
(is_between, "$g_talk_troop", pretenders_begin, pretenders_end),
],
"{s66}, you should have {s1} for yourself. (fiefs: {s0})", "center_captured_lord_advice_2",
[
(assign, "$temp", "$g_talk_troop"),
]],


[anyone, "center_captured_lord_advice_2",
[
(eq, "$g_talk_troop", "$g_player_minister"),
],
"As you wish, {sire/my lady}. {reg6?I:{reg7?You:{s11}}} will be the new {reg3?lady:lord} of {s1}.", "minister_issues",
[
(assign, ":new_owner", "$temp"),

(call_script, "script_give_center_to_lord", "$g_center_taken_by_player_faction", ":new_owner", 0),

(try_begin),
(faction_slot_eq, "$players_kingdom", slot_faction_political_issue, "$g_center_taken_by_player_faction"),
(faction_set_slot, "$players_kingdom", slot_faction_political_issue, -1),
(try_end),

(try_begin),
 (neq, ":new_owner", "trp_player"),
 (try_for_range, ":unused", 0, 4),
   (call_script, "script_cf_reinforce_party", "$g_center_taken_by_player_faction"),
 (try_end),
(try_end),

(assign, reg6, 0),
(assign, reg7, 0),
(try_begin),
 (eq, ":new_owner", "$g_talk_troop"),
 (assign, reg6, 1),
(else_try),
 (eq, ":new_owner", "trp_player"),
 (assign, reg7, 1),
(else_try),
 (str_store_troop_name, s11, ":new_owner"),
(try_end),
(str_store_party_name, s1, "$g_center_taken_by_player_faction"),
##diplomacy start+
##OLD:
#(troop_get_type, reg3, ":new_owner"),
##NEW:
(assign, reg3, 0),
(try_begin),
	(call_script, "script_cf_dplmc_troop_is_female", ":new_owner"),
	(assign, reg3, 1),
(try_end),
##diplomacy end+
(assign, "$g_center_taken_by_player_faction", -1),
]],



[anyone, "center_captured_lord_advice_2",
[
],
"Hmmm. All right, {playername}. I value your counsel highly. {reg6?I:{reg7?You:{s11}}} will be the new {reg3?lady:lord} of {s1}.", "close_window",
[
(assign, ":new_owner", "$temp"),

(troop_set_slot, ":new_owner", slot_lord_recruitment_argument, 0),

(call_script, "script_give_center_to_lord", "$g_center_taken_by_player_faction", ":new_owner", 0),
(try_begin),
(faction_slot_eq, "$players_kingdom", slot_faction_political_issue, "$g_center_taken_by_player_faction"),
(faction_set_slot, "$players_kingdom", slot_faction_political_issue, -1),
(try_end),

(try_begin),
 (neq, ":new_owner", "trp_player"),
 (try_for_range, ":unused", 0, 4),
   (call_script, "script_cf_reinforce_party", "$g_center_taken_by_player_faction"),
 (try_end),
(try_end),

(assign, reg6, 0),
(assign, reg7, 0),
(try_begin),
 (eq, ":new_owner", "$g_talk_troop"),
 (assign, reg6, 1),
(else_try),
 (eq, ":new_owner", "trp_player"),
 (assign, reg7, 1),
(else_try),
 (str_store_troop_name, s11, ":new_owner"),
(try_end),
(str_store_party_name, s1, "$g_center_taken_by_player_faction"),
##diplomacy start+
##OLD:
#(troop_get_type, reg3, ":new_owner"),
##NEW:
(assign, reg3, 0),
(try_begin),
	(call_script, "script_cf_dplmc_troop_is_female", ":new_owner"),
	(assign, reg3, 1),
(try_end),
##diplomacy end+
(assign, "$g_center_taken_by_player_faction", -1),
]],



[anyone, "event_triggered", [
               (eq, "$g_infinite_camping", 0),
               (store_conversation_troop, "$map_talk_troop"),
          (is_between, "$map_talk_troop", companions_begin, companions_end),
               (eq, "$map_talk_troop", "$npc_is_quitting"),
               (troop_get_slot, ":honorific", "$map_talk_troop", slot_troop_honorific),
               (str_store_string, 5, ":honorific")],
"Excuse me {s5} -- there is something I need to tell you.", "companion_quitting", [
              (assign, "$npc_is_quitting", 0),
              (assign, "$player_can_persuade_npc", 1),
              (assign, "$player_can_refuse_npc_quitting", 1),
 ]],

### This is also where the dialogue jumps if the player initiates quitting dialogue and the companion has low morale
##diplomacy start+
#Hijack this for lorded companions who temporarily rejoined your party, and the like.
[anyone, "companion_quitting", [
               (store_conversation_troop, "$map_talk_troop"),
			   (assign, ":has_fief", 0),
			   (try_for_range_backwards, ":center_no", centers_begin, centers_end),
			      (party_slot_eq, ":center_no", slot_town_lord, "$map_talk_troop"),
				  (assign, ":has_fief", 1),
			   (try_end),
			   (this_or_next|eq, ":has_fief", 1),
			   (this_or_next|is_between, "$map_talk_troop", lords_begin, lords_end),
			   (this_or_next|is_between, "$map_talk_troop", pretenders_begin, pretenders_end),
			   (this_or_next|is_between, "$map_talk_troop", kings_begin, kings_end),
               (this_or_next|troop_slot_eq, "$map_talk_troop", slot_troop_occupation, slto_kingdom_hero),
			   (this_or_next|troop_slot_eq, "$map_talk_troop", slot_troop_playerparty_history, dplmc_pp_history_granted_fief),
               (troop_slot_eq, "$map_talk_troop", slot_troop_playerparty_history, dplmc_pp_history_lord_rejoined),
               ],
"It has been good travelling with you, but I must return to my own affairs.", "dplmc_companion_quitting_lord_1",
	[]],

[anyone|plyr, "dplmc_companion_quitting_lord_1", [
], "Farewell, then.", "dplmc_companion_quitting_lord_2", [
    ]],

[anyone|plyr, "dplmc_companion_quitting_lord_1", [
(eq, "$player_can_persuade_npc", 1),
], "Perhaps I can persuade you to change your mind.", "dplmc_companion_quitting_lord_persuasion", [
(assign, "$player_can_persuade_npc", 0),
    ]],

[anyone, "dplmc_companion_quitting_lord_persuasion", [
          (store_random_in_range, ":random", -2, 13),
          (store_skill_level, ":persuasion", "skl_persuasion", "trp_player"),
          (le, ":random", ":persuasion"),
               ],
"Hm.  I suppose I can afford to put it off a bit longer.", "close_window",
[
          (troop_get_slot, ":morality_penalties", "$map_talk_troop", slot_troop_morality_penalties),
          (val_div, ":morality_penalties", 2),
          (troop_set_slot, "$map_talk_troop", slot_troop_morality_penalties, ":morality_penalties"),

          (troop_get_slot, ":personalityclash_penalties", "$map_talk_troop", slot_troop_personalityclash_penalties),
          (val_div, ":personalityclash_penalties", 2),
          (troop_set_slot, "$map_talk_troop", slot_troop_personalityclash_penalties, ":personalityclash_penalties"),
 ]],

 [anyone, "dplmc_companion_quitting_lord_persuasion", [
               ],
"I'm sorry, but I can't put it off any longer.", "dplmc_companion_quitting_lord_1",
[
 ]],

 [anyone|plyr, "dplmc_companion_quitting_lord_2", [
], "Farewell, then.", "lord_leave", [#Jump to standard lord farewell dialog
	(try_begin),
		(this_or_next|troop_slot_eq, "$map_talk_troop", slot_troop_playerparty_history, dplmc_pp_history_granted_fief),
		(this_or_next|troop_slot_eq, "$map_talk_troop", slot_troop_playerparty_history, dplmc_pp_history_lord_rejoined),
		#(troop_slot_eq, "$map_talk_troop", slot_troop_occupation, slto_player_companion),
		(troop_set_slot, "$map_talk_troop", slot_troop_occupation, slto_kingdom_hero),
	(try_end),
	(remove_member_from_party, "$map_talk_troop", "p_main_party"),

	(troop_set_slot, "$map_talk_troop", slot_troop_personalityclash_penalties, 0),
	(troop_set_slot, "$map_talk_troop", slot_troop_morality_penalties, 0),
]],

##diplomacy end+
### This is also where the dialogue jumps if the player initiates quitting dialogue and the companion has low morale
[anyone, "companion_quitting", [
               (store_conversation_troop, "$map_talk_troop"),
               (troop_get_slot, ":speech", "$map_talk_troop", slot_troop_retirement_speech),
               (str_store_string, s5, ":speech")
               ],
"{s5}", "companion_quitting_2", [
 ]],

## The companion explains his/her reasons for quitting
[anyone, "companion_quitting_2", [
              (call_script, "script_dplmc_npc_morale", "$map_talk_troop", 1), #SB :verbose companion morale
               ],
"To tell you the truth, {s21}", "companion_quitting_response", [
 ]],

[anyone|plyr, "companion_quitting_response", [
], "Very well. You be off, then.", "companion_quitting_yes", [
    ]],

##diplomacy start+  Alter the "persuade to stay" conversation, and redirect it.
[anyone|plyr, "companion_quitting_response", [
          (eq, "$player_can_persuade_npc", 1),
#], "Perhaps I can persuade you to change your mind.", "companion_quitting_persuasion", [#<- dplmc replace
], "Perhaps I can persuade you to change your mind.", "dplmc_companion_quitting_persuasion_start", [#<- dplmc add
##diplomacy end+
      (assign, "$player_can_persuade_npc", 0),
    ]],

##diplomacy start+
[anyone, "dplmc_companion_quitting_persuasion_start", [
	#First line, respond in slightly-more-formal diction.
	(troop_get_slot, ":personality", "$map_talk_troop", slot_lord_reputation_type),
	(assign, ":formal_response", 0),#accept or reject
	(try_begin),
		#Nobles and well-educated commoners answer this way.
		(this_or_next|ge, ":personality", lrep_benefactor),#includes lrep_benefactor and all kingdom lady personalities
			(is_between, ":personality", lrep_none, lrep_roguish),
		#Exclude quarrelsome and debauched.  They are not inclined to mince words when they're discontent.
		(neq, ":personality", lrep_quarrelsome),
		(neq, ":personality", lrep_debauched),
		(assign, ":formal_response", 1),
	(else_try),
		#"Well-educated commoners" includes some custodians but not others.
		#(For example, in Native compare Katrin with Artimenner.)
		(eq, ":personality", lrep_custodian),

		#Checking intelligence by itself isn't enough, since there isn't all
		#that much variation at the starting levels, and many companions
		#will have their intelligence raised for party skills regardless of
		#their background.
		(store_attribute_level, ":intelligence", "$map_talk_troop", ca_intelligence),
		(ge, ":intelligence", 12),

		#As the lesser of several evils, I'll add a secondary check for Engineer,
		#which is obviously arbitrary somewhat targeted but may catch Artimenner-like
		#characters in other mods.
		(store_skill_level, ":engineer", "$map_talk_troop", "skl_engineer"),
		(ge, ":engineer", 4),
		(assign, ":formal_response", 1),
	(try_end),
	(neq, ":formal_response", 0),
], "Very well, I shall hear you out.", "dplmc_companion_quitting_persuasion_1", [
]],

[anyone, "dplmc_companion_quitting_persuasion_start", [#Less-formal response
], "I'm listening.", "dplmc_companion_quitting_persuasion_1", [
]],

#This goes to the standard persuasion dialog.
[anyone|plyr, "dplmc_companion_quitting_persuasion_1", [
], "We've had some good times.  Things might not be going to your liking now, but stay with me a while longer and the situation will turn around.", "companion_quitting_persuasion", [
]],

#This removes money if successful.
[anyone|plyr, "dplmc_companion_quitting_persuasion_1", [
	#The same calculation as ransoming a companion from a ransom broker.
	#(From a game balance perspective, the effect is similar: you are
	#paying to avoid losing access to your companion.)
	(store_character_level, ":companion_level", "$map_talk_troop"),
	(store_add, ":cost", ":companion_level", 20),
	(val_mul, ":cost", ":companion_level"),
	(val_mul, ":cost", 5), #Level 1: 110, level 40: 12,000

	#Since there's no random check here, instead the persuasion skill
	#is used to reduce the price.
	(store_skill_level, ":persuasion", "skl_persuasion", "trp_player"),

	#Because this pertains to the handling of subordinates, in my
	#opinion skl_leadership is also directly relevant (since this is
	#how it works with non-hero troops, where your leadership
	#raises their morale and makes them less likely to desert).
	(store_skill_level, reg0, "skl_leadership", "trp_player"),
	(val_max, ":persuasion", reg0),

	(val_clamp, ":persuasion", 0, 19),
	(store_sub, reg0, 20, ":persuasion"),
	(val_mul, ":cost", reg0),
	(val_div, ":cost", 20),

	#Check if the player can afford it.
	(store_troop_gold, ":treasury", "trp_household_possessions"),
	(store_troop_gold, ":purse", "trp_player"),
	(store_add, ":available_funds", ":treasury", ":purse"),
	(ge, ":available_funds", ":cost"),

	(assign, "$temp", ":cost"),

], "Would {reg0} denars convince you to remain a while longer?", "dplmc_companion_quitting_persuasion_bribe", [
      (assign, "$player_can_persuade_npc", 0),
    ]],

#Return to previous
[anyone|plyr, "dplmc_companion_quitting_persuasion_1", [
], "Actually, nevermind.  I meant to say something else.", "companion_quitting_response", [
	(assign, "$player_can_persuade_npc", 1),#revert
]],

[anyone, "dplmc_companion_quitting_persuasion_bribe", [
	#Player bribes companion to remain
               ],
"Hm. When you put it like that, I suppose I can stay a while longer, see if things improve.", "close_window",
[
		  (assign, reg0, "$temp"),#cost to pay
		  #Remove the gold from the player
		  (val_max, reg0, 0),
		  (store_troop_gold, ":funds", "trp_player"),
		  (val_min, ":funds", reg0),
		  (val_sub, reg0, ":funds"),
		  (troop_remove_gold, "trp_player", ":funds"),

		  #Remove any remaining gold from the treasury
		  (store_troop_gold, ":funds", "trp_household_possessions"),
		  (val_min, ":funds", reg0),
		  (val_sub, reg0, ":funds"),
		  (call_script, "script_dplmc_withdraw_from_treasury", ":funds"),

		  #Reduce penalties per a successful persuasion attempt
          (troop_get_slot, ":morality_penalties", "$map_talk_troop", slot_troop_morality_penalties),
          (val_div, ":morality_penalties", 2),
          (troop_set_slot, "$map_talk_troop", slot_troop_morality_penalties, ":morality_penalties"),

          (troop_get_slot, ":personalityclash_penalties", "$map_talk_troop", slot_troop_personalityclash_penalties),
          (val_div, ":personalityclash_penalties", 2),
          (troop_set_slot, "$map_talk_troop", slot_troop_personalityclash_penalties, ":personalityclash_penalties"),
 ]],
##diplomacy end+

[anyone, "companion_quitting_persuasion", [
          (store_random_in_range, ":random", -2, 13),
          (store_skill_level, ":persuasion", "skl_persuasion", "trp_player"),
  		  ##diplomacy start+
	  	  #Because this pertains to the handling of subordinates, in my
		  #opinion skl_leadership is also directly relevant (especially since
		  #this is how it works with non-hero troops, where your leadership
		  #raises their morale and makes them less likely to desert).
 		  (store_skill_level, reg0, "skl_leadership", "trp_player"),
		  (val_max, ":persuasion", reg0),
		  ##diplomacy end+

          (le, ":random", ":persuasion"),
               ],
"Hm. When you put it like that, I suppose I can stay a while longer, see if things improve.", "close_window",
[
          (troop_get_slot, ":morality_penalties", "$map_talk_troop", slot_troop_morality_penalties),
          (val_div, ":morality_penalties", 2),
          (troop_set_slot, "$map_talk_troop", slot_troop_morality_penalties, ":morality_penalties"),

          (troop_get_slot, ":personalityclash_penalties", "$map_talk_troop", slot_troop_personalityclash_penalties),
          (val_div, ":personalityclash_penalties", 2),
          (troop_set_slot, "$map_talk_troop", slot_troop_personalityclash_penalties, ":personalityclash_penalties"),
 ]],

[anyone, "companion_quitting_persuasion", [
               ],
"I'm sorry, but I don't see your point. I am leaving whether you like it or not.", "companion_quitting_response",
[
 ]],

##diplomacy start+
#Enable refusing to allow party members to quit in cheat mode.
#
#OLD VERSION:
#[anyone|plyr, "companion_quitting_response", [
#      (eq, 1, 0),
#      (eq, "$player_can_refuse_npc_quitting", 1),
#], "We hang deserters in this company.", "companion_quitting_no", [
#    ]],
#
[anyone|plyr, "companion_quitting_response", [
      (ge, "$cheat_mode", 1),#only enable in cheat mode
      (eq, "$player_can_refuse_npc_quitting", 1),
], "CHEAT -- We hang deserters in this company.", "companion_quitting_no", [
    ]],

#Add a response with a slightly different flavor for less mild personalities.
[anyone, "companion_quitting_no", [
	(troop_get_slot, ":talk_troop_personality", "$g_talk_troop", slot_lord_reputation_type),
	(this_or_next|eq, ":talk_troop_personality", lrep_martial),
	(this_or_next|eq, ":talk_troop_personality", lrep_selfrighteous),
		(eq, ":talk_troop_personality", lrep_quarrelsome),
],
"I believe I misheard you.  You certainly could not have been threatening me.", "companion_quitting_no_confirm", [
 ]],
##diplomacy end+

[anyone, "companion_quitting_no", [],
"Oh... Right... Do you mean that?", "companion_quitting_no_confirm", [
 ]],

[anyone|plyr, "companion_quitting_no_confirm", [],
"Absolutely. You either leave this company by my command, or are carried out on your shield.", "companion_quitting_no_confirmed", [
##diplomacy start+
#I imagine that most companions wouldn't be too happy about being threatened
#with death.
(call_script, "script_dplmc_get_troop_morality_value", "$g_talk_troop", tmt_egalitarian),
(try_begin),
	(lt, reg0, 0),
	#I am adding an exception.  If you know who this applies to in Native, you
	#might agree with this character interpretation.  My reasons for adding this
	#are:
	# (1) I like it when companions react to circumstances differently.
	# (2) I find this possible scenario funny.
	(call_script, "script_change_player_relation_with_troop", "$g_talk_troop", 1),
(else_try),
	#This is the default case.  A larger relation drop might be more
	#appropriate.  I started off with -5.
	(call_script, "script_change_player_relation_with_troop", "$g_talk_troop", -5),
(try_end),

#It might be interesting to develop this branch further (for example, being
#challenged to single combat) but I'm not sure something like this would have
#wide enough appeal to justify it.

##Approval/disapproval from other NPCs
(try_for_range, ":npc", companions_begin, companions_end),
   (neq, ":npc", "$g_talk_troop"),
   (main_party_has_troop, ":npc"),
   (call_script, "script_dplmc_get_troop_morality_value", ":npc", tmt_egalitarian),
   (try_begin),
	  (lt, reg0, 0),
	  (call_script, "script_change_player_relation_with_troop", ":npc", 1),
   (else_try),
      (gt, reg0, 0),
	  (call_script, "script_change_player_relation_with_troop", ":npc", -1),
   (try_end),
(try_end),
##diplomacy end+
 ]],

[anyone|plyr, "companion_quitting_no_confirm", [],
"No, actually I don't mean that. You are free to leave.", "companion_quitting_yes", [
 ]],

[anyone, "companion_quitting_yes", [
               ],
"Then this is goodbye. Perhaps I'll see you around, {playername}.", "close_window", [
    (troop_set_slot, "$map_talk_troop", slot_troop_playerparty_history, pp_history_quit),
    (call_script, "script_retire_companion", "$map_talk_troop", 100),
 ]],

[anyone, "companion_quitting_no_confirmed", [
],
"Hm. I suppose I'm staying, then.", "close_window", [
 ]],


#Morality objections
[anyone, "event_triggered", [
               (store_conversation_troop, "$map_talk_troop"),
          (is_between, "$map_talk_troop", companions_begin, companions_end),

               (eq, "$map_talk_troop", "$npc_with_grievance"),
               (eq, "$npc_map_talk_context", slot_troop_morality_state),


               (try_begin),
                   (eq, "$npc_grievance_slot", slot_troop_morality_state),
                   (troop_get_slot, ":speech", "$map_talk_troop", slot_troop_morality_speech),
               (else_try),
                   (troop_get_slot, ":speech", "$map_talk_troop", slot_troop_2ary_morality_speech),
               (try_end),
               (str_store_string, s21, "$npc_grievance_string"),
               (str_store_string, s5, ":speech"),
               ],
"{s5}", "companion_objection_response", [
              (assign, "$npc_with_grievance", 0),
 ]],



[anyone|plyr, "companion_objection_response", [
              (eq, "$npc_praise_not_complaint", 1),
], "Thanks, I appreciate your support.", "close_window", [
              (troop_set_slot, "$map_talk_troop", "$npc_grievance_slot", tms_acknowledged),
    ]],

[anyone|plyr, "companion_objection_response", [
              (eq, "$npc_praise_not_complaint", 0),
], "Hopefully it won't happen again.", "close_window", [
              (troop_set_slot, "$map_talk_troop", "$npc_grievance_slot", tms_acknowledged),
    ]],

[anyone|plyr, "companion_objection_response", [
              (eq, "$npc_praise_not_complaint", 0),
],  "Your objection is noted. Now fall back in line.", "close_window", [
              (troop_set_slot, "$map_talk_troop", "$npc_grievance_slot", tms_dismissed),
              (troop_get_slot, ":grievance", "$map_talk_troop", slot_troop_morality_penalties),
              (val_add, ":grievance", 10),
              (troop_set_slot, "$map_talk_troop", slot_troop_morality_penalties, ":grievance"),
    ]],


##  [anyone|plyr, "companion_objection_response", [
##      ],  "I prefer my followers to keep their opinions to themselves.", "close_window", [
##                    (troop_set_slot, "$map_talk_troop", "$npc_grievance_slot", tms_dismissed),
##                    (troop_get_slot, ":grievance", "$map_talk_troop", slot_troop_morality_penalties),
##                    (val_add, ":grievance", 10),
##                    (troop_set_slot, "$map_talk_troop", slot_troop_morality_penalties, ":grievance"),
##                    (assign, "$disable_npc_complaints", 1),
##          ]],



# Personality clash 2 objections
[anyone, "event_triggered", [
               (store_conversation_troop, "$map_talk_troop"),
          (is_between, "$map_talk_troop", companions_begin, companions_end),

               (eq, "$map_talk_troop", "$npc_with_personality_clash_2"),
               (eq, "$npc_map_talk_context", slot_troop_personalityclash2_state),

               (troop_get_slot, ":speech", "$map_talk_troop", slot_troop_personalityclash2_speech),
               (troop_get_slot, ":object", "$map_talk_troop", slot_troop_personalityclash2_object),
               (str_store_troop_name, 11, ":object"),
               (str_store_string, 5, ":speech"),
               ],
"{s5}", "companion_personalityclash2_b", [
              (assign, "$npc_with_personality_clash_2", 0),
              (troop_get_slot, ":grievance", "$map_talk_troop", slot_troop_personalityclash_penalties),
              (val_add, ":grievance", 5),
              (troop_set_slot, "$map_talk_troop", slot_troop_personalityclash_penalties, ":grievance"),

              (troop_get_slot, ":object", "$map_talk_troop", slot_troop_personalityclash2_object),
         (call_script, "script_troop_change_relation_with_troop", "$map_talk_troop", ":object", -15),
 ]],

[anyone, "companion_personalityclash2_b", [
],  "{s5}", "companion_personalityclash2_response", [
               (troop_get_slot, ":speech", "$map_talk_troop", slot_troop_personalityclash2_speech_b),
               (troop_get_slot, ":object", "$map_talk_troop", slot_troop_personalityclash2_object),
               (str_store_troop_name, 11, ":object"),
               (str_store_string, 5, ":speech"),
    ]],



[anyone|plyr, "companion_personalityclash2_response", [
(troop_get_slot, ":object", "$map_talk_troop", slot_troop_personalityclash2_object),
(str_store_troop_name, s11, ":object"),
##diplomacy start+
##OLD:
#(troop_get_type, reg11, ":object"),
##NEW:
(assign, reg11, 0),
(try_begin),
	(call_script, "script_cf_dplmc_troop_is_female", ":object"),
	(assign, reg11, 1),
(try_end),
##diplomacy end+
],  "{s11} is a valuable member of this company. I don't want you picking any more fights with {reg11?her:him}.", "close_window", [
              (troop_set_slot, "$map_talk_troop", slot_troop_personalityclash2_state, pclash_penalty_to_self),
    ]],

[anyone|plyr, "companion_personalityclash2_response", [
(troop_get_slot, ":object", "$map_talk_troop", slot_troop_personalityclash2_object),
(str_store_troop_name, s11, ":object"),
##diplomacy start+
##OLD:
#(troop_get_type, reg11, ":object"),
##NEW:
(assign, reg11, 0),
(try_begin),
	(call_script, "script_cf_dplmc_troop_is_female", ":object"),
	(assign, reg11, 1),
(try_end),
##diplomacy end+
],  "Tell {s11} you have my support in this, and {reg11?she:he} should hold {reg11?her:his} tongue.", "close_window", [
              (troop_set_slot, "$map_talk_troop", slot_troop_personalityclash2_state, pclash_penalty_to_other),
    ]],

[anyone|plyr, "companion_personalityclash2_response", [
],  "I don't have time for your petty dispute. Do not bother me with this again.", "close_window", [
              (troop_set_slot, "$map_talk_troop", slot_troop_personalityclash2_state, pclash_penalty_to_both),
    ]],


##  [anyone|plyr, "companion_personalityclash2_response", [
##      ],  "Your grievance is noted. Now fall back in line.", "close_window", [
##                    (troop_set_slot, "$map_talk_troop", slot_troop_personalityclash2_state, 1),
##          ]],

##  [anyone|plyr, "companion_personalityclash2_response", [
##      ],  "I prefer my followers to keep their opinions to themselves.", "close_window", [
##                    (troop_set_slot, "$map_talk_troop", slot_troop_personalityclash2_state, 1),
##                    (assign, "$disable_npc_complaints", 1),
##          ]],




# Personality clash objections

[anyone, "event_triggered", [
               (store_conversation_troop, "$map_talk_troop"),
          (is_between, "$map_talk_troop", companions_begin, companions_end),

               (eq, "$map_talk_troop", "$npc_with_personality_clash"),
               (eq, "$npc_map_talk_context", slot_troop_personalityclash_state),

               (troop_get_slot, ":speech", "$map_talk_troop", slot_troop_personalityclash_speech),
               (troop_get_slot, ":object", "$map_talk_troop", slot_troop_personalityclash_object),
               (str_store_troop_name, 11, ":object"),
               (str_store_string, 5, ":speech"),
               ],
"{s5}", "companion_personalityclash_b", [
              (assign, "$npc_with_personality_clash", 0),
              (troop_get_slot, ":grievance", "$map_talk_troop", slot_troop_personalityclash_penalties),
              (val_add, ":grievance", 5),
              (troop_set_slot, "$map_talk_troop", slot_troop_personalityclash_penalties, ":grievance"),

              (troop_get_slot, ":object", "$map_talk_troop", slot_troop_personalityclash_object),
         (call_script, "script_troop_change_relation_with_troop", "$map_talk_troop", ":object", -15),

 ]],

[anyone, "companion_personalityclash_b", [
],  "{s5}", "companion_personalityclash_response", [
               (troop_get_slot, ":speech", "$map_talk_troop", slot_troop_personalityclash_speech_b),
               (troop_get_slot, ":object", "$map_talk_troop", slot_troop_personalityclash_object),
               (str_store_troop_name, 11, ":object"),
               (str_store_string, 5, ":speech"),
    ]],

[anyone|plyr, "companion_personalityclash_response", [
(troop_get_slot, ":object", "$map_talk_troop", slot_troop_personalityclash_object),
(str_store_troop_name, s11, ":object"),
##diplomacy start+
##OLD:
#(troop_get_type, reg11, ":object"),
##NEW:
(assign, reg11, 0),
(try_begin),
	(call_script, "script_cf_dplmc_troop_is_female", ":object"),
	(assign, reg11, 1),
(try_end),
##diplomacy end+
],  "{s11} is a capable member of this company. I don't want you picking any more fights with {reg11?her:him}.", "close_window", [
              (troop_set_slot, "$map_talk_troop", slot_troop_personalityclash_state, pclash_penalty_to_self),
    ]],

[anyone|plyr, "companion_personalityclash_response", [
(troop_get_slot, ":object", "$map_talk_troop", slot_troop_personalityclash_object),
(str_store_troop_name, s11, ":object"),
##diplomacy start+
##OLD:
#(troop_get_type, reg11, ":object"),
##NEW:
(assign, reg11, 0),
(try_begin),
	(call_script, "script_cf_dplmc_troop_is_female", ":object"),
	(assign, reg11, 1),
(try_end),
##diplomacy end+
],  "Tell {s11} you have my support in this, and {reg11?she:he} should hold {reg11?her:his} tongue.", "close_window", [
              (troop_set_slot, "$map_talk_troop", slot_troop_personalityclash_state, pclash_penalty_to_other),
    ]],

[anyone|plyr, "companion_personalityclash_response", [
],  "I don't have time for your petty dispute. Do not bother me with this again.", "close_window", [
              (troop_set_slot, "$map_talk_troop", slot_troop_personalityclash_state, pclash_penalty_to_both),
    ]],


##  [anyone|plyr, "companion_personalityclash_response", [
##      ],  "Your grievance is noted. Now fall back in line.", "close_window", [
##                    (troop_set_slot, "$map_talk_troop", slot_troop_personalityclash_state, 1),
##          ]],

##  [anyone|plyr, "companion_personalityclash_response", [
##      ],  "I prefer my followers to keep their opinions to themselves.", "close_window", [
##                    (troop_set_slot, "$map_talk_troop", slot_troop_personalityclash_state, 1),
##                    (assign, "$disable_npc_complaints", 1),
##          ]],



# Personality match

[anyone, "event_triggered", [
               (eq, "$npc_map_talk_context", slot_troop_personalitymatch_state),
               (store_conversation_troop, "$map_talk_troop"),
          (is_between, "$map_talk_troop", companions_begin, companions_end),

               (eq, "$map_talk_troop", "$npc_with_personality_match"),

               (troop_get_slot, ":speech", "$map_talk_troop", slot_troop_personalitymatch_speech),
               (troop_get_slot, ":object", "$map_talk_troop", slot_troop_personalitymatch_object),
               (str_store_troop_name, 11, ":object"),
               (str_store_string, 5, ":speech"),

               ],
"{s5}", "companion_personalitymatch_b", [
              (assign, "$npc_with_personality_match", 0),
              (troop_get_slot, ":object", "$map_talk_troop", slot_troop_personalitymatch_object),
         (call_script, "script_troop_change_relation_with_troop", "$map_talk_troop", ":object", 15),

 ]],

[anyone, "companion_personalitymatch_b", [
              (troop_get_slot, ":speech", "$map_talk_troop", slot_troop_personalitymatch_speech_b),
              (troop_get_slot, ":object", "$map_talk_troop", slot_troop_personalitymatch_object),
              (str_store_troop_name, 11, ":object"),
              (str_store_string, 5, ":speech"),

               ],
"{s5}", "companion_personalitymatch_response", [
 ]],


[anyone|plyr, "companion_personalitymatch_response", [
],  "Very good.", "close_window", [
              (troop_set_slot, "$map_talk_troop", slot_troop_personalitymatch_state, 1),

         ]],



##  [anyone|plyr, "companion_personalitymatch_response", [
##      ],  "I prefer my followers to keep their opinions to themselves.", "close_window", [
##                    (troop_set_slot, "$map_talk_troop", slot_troop_personalitymatch_state, 1),
##                    (assign, "$disable_npc_complaints", 1),
##          ]],

[anyone, "event_triggered", [
               (eq, "$npc_map_talk_context", slot_troop_woman_to_woman_string),
               (store_conversation_troop, "$map_talk_troop"),
          (is_between, "$map_talk_troop", companions_begin, companions_end),

             (store_sub, ":npc_no", "$map_talk_troop", "trp_npc1"),
             (store_add, ":speech", "str_npc1_woman_to_woman", ":npc_no"),
#                     (troop_get_slot, ":speech", "$map_talk_troop", slot_troop_woman_to_woman_string),
               (str_store_string, s5, ":speech"),
               ],
"{s5}", "companion_sisterly_advice", [
              (troop_set_slot, "$map_talk_troop", slot_troop_woman_to_woman_string, -1),
         (assign, "$npc_with_sisterly_advice", 0),
 ]],

[anyone|plyr, "companion_sisterly_advice", [
],  "Thank you.", "close_window", [
    ]],

[anyone|plyr, "companion_sisterly_advice", [
],  "I would prefer not to discuss such things.", "close_window", [
(assign, "$disable_sisterly_advice", 1),
    ]],



[anyone, "event_triggered", [
               (eq, "$g_infinite_camping", 0),
               (eq, "$npc_map_talk_context", slot_troop_home),
               (store_conversation_troop, "$map_talk_troop"),
          (is_between, "$map_talk_troop", companions_begin, companions_end),

               (troop_get_slot, ":speech", "$map_talk_troop", slot_troop_home_intro),
               (str_store_string, s5, ":speech"),
               ],
"{s5}", "companion_home_description", [
              (troop_set_slot, "$map_talk_troop", slot_troop_home_speech_delivered, 1),
 ]],

[anyone|plyr, "companion_home_description", [
],  "Tell me more.", "companion_home_description_2", [
    ]],

[anyone|plyr, "companion_home_description", [
],  "We don't have time to chat just now.", "close_window", [
    ]],

[anyone|plyr, "companion_home_description", [
],  "I prefer my companions not to bother me with such trivialities.", "close_window", [
              (assign, "$disable_local_histories", 1),
    ]],


[anyone, "companion_home_description_2", [
               (troop_get_slot, ":speech", "$map_talk_troop", slot_troop_home_description),
               (str_store_string, 5, ":speech"),
],  "{s5}", "companion_home_description_3", [
    ]],

[anyone, "companion_home_description_3", [
               (troop_get_slot, ":speech", "$map_talk_troop", slot_troop_home_description_2),
               (str_store_string, 5, ":speech"),
],  "{s5}", "close_window", [
    ]],

[anyone,"event_triggered", [
(eq, "$talk_context", tc_rebel_thanks),
(store_conversation_troop, "$g_talk_troop"),
(is_between, "$g_talk_troop", pretenders_begin, pretenders_end),

(troop_get_slot, ":old_faction", "$g_talk_troop", slot_troop_original_faction),
(str_store_faction_name, s3, ":old_faction"),
# (str_store_string, s6, "@{playername}, when we started our long walk, few people had the courage to support me.\
# And fewer still would be willing to put their lives at risk for my cause.\
# But you didn't hesitate for a moment in throwing yourself at my enemies.\
# We have gone through a lot together, and there were times I came close to losing all hope.\
# But with God's help, we prevailed. It is now time for me to leave your company and take what's rightfully mine.\
# From now on, I will carry out the great responsibility of ruling {s3}.\
# There still lie many challanges ahead and I count on your help in overcoming those.\
# And of course, you will always remain as my foremost vassal."),
#SB : why bother storing the string? also challanges -> challenges
],
"{playername}, when we started our long walk, few people had the courage to support me.\
 And fewer still would be willing to put their lives at risk for my cause.\
 But you didn't hesitate for a moment in throwing yourself at my enemies.\
 We have gone through a lot together, and there were times I came close to losing all hope.\
 But with God's help, we prevailed. It is now time for me to leave your company and take what's rightfully mine.\
 From now on, I will carry out the great responsibility of ruling {s3}.\
 There still lie many challenges ahead and I count on your help in overcoming those.\
 And of course, you will always remain as my foremost vassal.", "rebel_thanks_answer",
[

  (unlock_achievement, ACHIEVEMENT_KINGMAKER),
  (call_script, "script_end_quest", "qst_rebel_against_kingdom"),

  (try_begin),
    (troop_get_type, ":is_female", "trp_player"),
    (eq, ":is_female", 1),

    (troop_get_type, ":is_female", "$g_talk_troop"),
    (eq, ":is_female", 1),

    (unlock_achievement, ACHIEVEMENT_GIRL_POWER),
  (try_end),
 ]],

#SB : fix strings, add some brownie points
[anyone|plyr,"rebel_thanks_answer", [], "It was an honour to fight for your cause, {reg65?madame:my lord}.", "rebel_thanks_answer_2", [
    (call_script, "script_change_troop_renown", "trp_player", 150),]],
[anyone|plyr,"rebel_thanks_answer", [], "You will always have my loyal support, {reg65?my lady:sire}.", "rebel_thanks_answer_2", [
    (call_script, "script_change_player_honor", "trp_player", 10),
]],

[anyone,"rebel_thanks_answer_2", [], "I will miss living this life of adventure with you, but my duties await me. So... farewell for now, {playername}. I hope I'll see you again soon.", "close_window", []],



[anyone, "event_triggered", [
        (store_conversation_troop, "$map_talk_troop"),
        (is_between, "$map_talk_troop", companions_begin, companions_end),

        (eq, "$map_talk_troop", "$npc_with_political_grievance"),
        (eq, "$npc_map_talk_context", slot_troop_kingsupport_objection_state),

        (store_sub, ":npc_no", "$g_talk_troop", "trp_npc1"),
        (store_add, ":string", "str_npc1_kingsupport_objection", ":npc_no"),
        #					 (troop_get_slot, ":string", "$map_talk_troop", slot_troop_kingsupport_objection_string),
        (str_store_string, 21, ":string"),
      ],
"{s21}", "companion_political_grievance_response", [
        (assign, "$npc_with_political_grievance", 0),
        (troop_set_slot, "$map_talk_troop", slot_troop_kingsupport_objection_state, 2),
    ]],

[anyone|plyr, "companion_political_grievance_response", [
#                    (eq, "$npc_praise_not_complaint", 0),
],  "Your opinion is noted.", "close_window", [
              (troop_get_slot, ":grievance", "$map_talk_troop", slot_troop_morality_penalties),
              (val_add, ":grievance", 25),
              (troop_set_slot, "$map_talk_troop", slot_troop_morality_penalties, ":grievance"),
    ]],



[anyone, "event_triggered", [
            (store_conversation_troop, "$map_talk_troop"),
            (is_between, "$map_talk_troop", companions_begin, companions_end),

            (eq, "$map_talk_troop", "$npc_to_rejoin_party"),
            (neg|main_party_has_troop, "$map_talk_troop"),

            (troop_slot_eq, "$map_talk_troop", slot_troop_current_mission, npc_mission_rejoin_when_possible),
            (troop_slot_eq, "$map_talk_troop", slot_troop_occupation, slto_player_companion),
            (troop_get_slot, ":string", "$map_talk_troop", slot_troop_honorific),
            (str_store_string, s21, ":string"),
          ],
"Greetings, {s21}. Are you ready for me to rejoin you?",
          "companion_rejoin_response",
         [
              (assign, "$npc_to_rejoin_party", 0),
         ]],

[anyone, "event_triggered", [
               (store_conversation_troop, "$map_talk_troop"),
          (is_between, "$map_talk_troop", companions_begin, companions_end),

               (eq, "$map_talk_troop", "$npc_to_rejoin_party"),
#                     (eq, "$npc_map_talk_context", slot_troop_days_on_mission),
               (troop_slot_eq, "$g_talk_troop", slot_troop_current_mission, npc_mission_kingsupport),

          (troop_get_slot, ":string", "$map_talk_troop", slot_troop_honorific),
               (str_store_string, 21, ":string"),
               ],
"Well, {s21}, at last I've found you. I've been out spreading the word about your claim, and am now ready to rejoin the company.", "companion_rejoin_response", [
              (assign, "$npc_to_rejoin_party", 0),
         (call_script, "script_change_player_right_to_rule", 3),
         (troop_set_slot, "$g_talk_troop", slot_troop_kingsupport_state, 1),

         (try_begin),
            (is_between, "$player_right_to_rule", 10, 15),
            (call_script, "script_add_log_entry", logent_player_claims_throne_1, "trp_player", 0, 0, 0),
         (else_try),
            (is_between, "$player_right_to_rule", 20, 25),
            (call_script, "script_add_log_entry", logent_player_claims_throne_2, "trp_player", 0, 0, 0),
         (try_end),
         ]],


[anyone, "event_triggered", [
 (store_conversation_troop, "$map_talk_troop"),
 (is_between, "$map_talk_troop", companions_begin, companions_end),
 (eq, "$map_talk_troop", "$npc_to_rejoin_party"),
#                     (eq, "$npc_map_talk_context", slot_troop_days_on_mission),
 (troop_slot_eq, "$map_talk_troop", slot_troop_current_mission, npc_mission_gather_intel),

 (troop_get_slot, ":string", "$map_talk_troop", slot_troop_honorific),
 (str_store_string, s21, ":string"),

(troop_get_slot, ":town_with_contacts", "$map_talk_troop", slot_troop_town_with_contacts),
(store_faction_of_party, ":town_faction", ":town_with_contacts"),

(call_script, "script_update_faction_political_notes", ":town_faction"),
(assign, ":instability_index", reg0),
(val_add, ":instability_index", reg0),
(val_add, ":instability_index", reg1),


(str_store_faction_name, s12, ":town_faction"),
(try_begin),
   (ge, ":instability_index", 60),
   (str_store_string, s11, "str_the_s12_is_a_labyrinth_of_rivalries_and_grudges_lords_ignore_their_lieges_summons_and_many_are_ripe_to_defect"),
(else_try),
   (ge, ":instability_index", 40),
   (str_store_string, s11, "str_the_s12_is_shaky_many_lords_do_not_cooperate_with_each_other_and_some_might_be_tempted_to_defect_to_a_liege_that_they_consider_more_worthy"),
(else_try),
   (ge, ":instability_index", 20),
   (str_store_string, s11, "str_the_s12_is_fairly_solid_some_lords_bear_enmities_for_each_other_but_they_tend_to_stand_together_against_outside_enemies"),
(else_try),
   (str_store_string, s11, "str_the_s12_is_a_rock_of_stability_politically_speaking_whatever_the_lords_may_think_of_each_other_they_fight_as_one_against_the_common_foe"),
(try_end),

(try_for_range, ":lord", active_npcs_begin, active_npcs_end),
   (troop_slot_eq, ":lord", slot_troop_occupation, slto_kingdom_hero),
   (store_faction_of_troop, ":lord_faction", ":lord"),
   (eq, ":lord_faction", ":town_faction"),
   (call_script, "script_update_troop_political_notes", ":lord"),
(try_end),

 ],
"Well, {s21}, at last I've found you. {s11}. The rest of my report I submit to you in writing.", "companion_rejoin_response", [
]],


# ##SB : dplmc_npc_mission_rescue_prisoner aborted
# [anyone, "event_triggered", [
 # (store_conversation_troop, "$map_talk_troop"),
 # (is_between, "$map_talk_troop", companions_begin, companions_end),
 # (eq, "$map_talk_troop", "$npc_to_rejoin_party"),
 # (troop_slot_eq, "$map_talk_troop", slot_troop_current_mission, dplmc_npc_mission_rescue_prisoner),
 # (troop_slot_eq, "$g_talk_troop", dplmc_slot_troop_mission_diplomacy, -2),

 # (troop_get_slot, ":string", "$map_talk_troop", slot_troop_honorific),
 # (str_store_string, s21, ":string"),

 # (troop_get_slot, ":town_with_contacts", "$map_talk_troop", slot_troop_town_with_contacts),
 # (troop_get_slot, ":prisoner", "$map_talk_troop", slot_troop_mission_object),
 # (str_store_troop_name, s11, ":prisoner"),
 # (str_store_party_name, s12, ":town_with_contacts"),
 # (call_script, "script_dplmc_store_troop_is_female_reg", ":prisoner", 4),

 # ],
# "Well, {s21}, it seems somebody got to {s11} before I did, still, I enjoyed the time I had in {s12} even if I didn't manage to make contact with the {reg4?lady:lord}.", "companion_rejoin_response", 
# []],

##SB : dplmc_npc_mission_rescue_prisoner failed
[anyone, "event_triggered", [
 (store_conversation_troop, "$map_talk_troop"),
 (is_between, "$map_talk_troop", companions_begin, companions_end),
 (eq, "$map_talk_troop", "$npc_to_rejoin_party"),
 (troop_slot_eq, "$map_talk_troop", slot_troop_current_mission, dplmc_npc_mission_rescue_prisoner),
 (troop_slot_eq, "$g_talk_troop", dplmc_slot_troop_mission_diplomacy, -1),

 (troop_get_slot, ":string", "$map_talk_troop", slot_troop_honorific),
 (str_store_string, s21, ":string"),

 (troop_get_slot, ":town_with_contacts", "$map_talk_troop", slot_troop_town_with_contacts),
 (troop_get_slot, ":prisoner", "$map_talk_troop", slot_troop_mission_object),
 (str_store_troop_name, s11, ":prisoner"),
 (str_store_party_name, s12, ":town_with_contacts"),
 (call_script, "script_dplmc_store_troop_is_female_reg", ":prisoner", 4),

 ],
"Well, {s21}, I tried my best to rescue {s11} from {s12}, but they took {reg4?her:him} down with a stray shot and my men and I couldn't go back with the wardens on our trail. I don't think we'll be welcome there for a while, what with all the fires we started and all...", "companion_rejoin_response", 
[
  #faction stuff
  (troop_get_slot, ":town_with_contacts", "$map_talk_troop", slot_troop_town_with_contacts),
  (call_script, "script_change_player_relation_with_center", ":town_with_contacts", -3),
  (store_faction_of_party, ":cur_faction", ":town_with_contacts"),
  (faction_get_slot, ":player_alarm", ":cur_faction", slot_faction_player_alarm),
  (val_add, ":player_alarm", 25),
  (val_min, ":player_alarm", 100),
  (faction_set_slot, ":cur_faction", slot_faction_player_alarm, ":player_alarm"),
  
  #individual stuff
  (call_script, "script_change_troop_renown", "$map_talk_troop", -3),
  (troop_get_slot, ":prisoner", "$map_talk_troop", slot_troop_mission_object),
  (call_script, "script_troop_change_relation_with_troop", "$map_talk_troop", ":prisoner", -1),
  (troop_set_health, ":prisoner", 0),
  
]],
##SB : dplmc_npc_mission_rescue_prisoner success
[anyone, "event_triggered", [
 (store_conversation_troop, "$map_talk_troop"),
 (is_between, "$map_talk_troop", companions_begin, companions_end),
 (eq, "$map_talk_troop", "$npc_to_rejoin_party"),
 (troop_slot_eq, "$map_talk_troop", slot_troop_current_mission, dplmc_npc_mission_rescue_prisoner),
 (troop_slot_eq, "$g_talk_troop", dplmc_slot_troop_mission_diplomacy, 0),

 (troop_get_slot, ":string", "$map_talk_troop", slot_troop_honorific),
 (str_store_string, s21, ":string"),

 (troop_get_slot, ":town_with_contacts", "$map_talk_troop", slot_troop_town_with_contacts),
 (troop_get_slot, ":prisoner", "$map_talk_troop", slot_troop_mission_object),
 (str_store_troop_name, s11, ":prisoner"),
 (str_store_party_name, s12, ":town_with_contacts"),

 ],
"Well, {s21}, it wasn't easy but I've managed to keep {s11} intact the whole way back. The guards at {s12} will be telling stories of our daring escape, but suffice it to say they had no idea what hit them.", "companion_rejoin_response", 
[

  #reward
  (call_script, "script_change_troop_renown", "$map_talk_troop", 10),
  (troop_get_slot, ":prisoner", "$map_talk_troop", slot_troop_mission_object),
  #split up the usual freed_lord_answer relation increase of 7 between player and companion
  (call_script, "script_troop_change_relation_with_troop", "$map_talk_troop", ":prisoner", 4),
  (call_script, "script_troop_change_relation_with_troop", "trp_player", ":prisoner", 3),
  #flag quest as succesful
  (try_begin),
    (check_quest_active, "qst_rescue_prisoner"),
    (quest_slot_eq, "qst_rescue_prisoner", slot_quest_target_troop, ":prisoner"),
    (call_script, "script_succeed_quest", "qst_rescue_prisoner"),
    (assign, "$do_not_cancel_quest", 1),
  (try_end),
  #remove from prison
  (troop_get_slot, ":prison_center", ":prisoner", slot_troop_prisoner_of_party),
  (party_remove_prisoners, ":prison_center", ":prisoner", 1),
  # (troop_set_slot, ":prisoner", slot_troop_prisoner_of_party, -1),
  (call_script, "script_remove_troop_from_prison", ":prisoner"),
  (assign, "$do_not_cancel_quest", 0),
  (troop_set_slot, "$map_talk_troop", slot_troop_mission_object, 0),
  
]],

##companion caught after rescue request
# [trp_hired_blade, "event_triggered", [ #replace with townsman
[anyone, "event_triggered", [
    (store_conversation_troop, "$map_talk_troop"),
    (is_between, "$map_talk_troop", town_walkers_begin, town_walkers_end),
    (troop_get_slot, "$g_talk_troop", "$map_talk_troop", slot_troop_mission_object), #switching npc
    (troop_get_slot, ":mission", "$g_talk_troop", slot_troop_current_mission),
    (eq, ":mission", dplmc_npc_mission_spy_request),
    (troop_slot_ge, "$g_talk_troop", dplmc_slot_troop_mission_diplomacy, 1),
    # (gt, ":emissary_caught", 0),

    (troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
    (str_store_troop_name, s31, "$g_talk_troop"),
    (str_store_troop_name, s32, ":mission_object"),

    (troop_get_slot, ":center_no", ":mission_object", slot_troop_prisoner_of_party),
    (str_store_party_name, s33, ":center_no"),
    (call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),
   ],
  "A thousand apologies, {s0}. I regret to inform that we failed to rescue {s32} -- {s31} was captured during the attempt and now shares a cell in {s33}.","close_window", [
  (troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
  (troop_get_slot, ":center_no", ":mission_object", slot_troop_prisoner_of_party),
  (troop_set_slot, "$g_talk_troop", slot_troop_current_mission, 0),
  (troop_set_slot, "$g_talk_troop", slot_troop_days_on_mission, 0),
  (troop_set_slot, "$g_talk_troop", slot_troop_occupation, 0),
  (troop_set_slot, "$map_talk_troop", slot_troop_mission_object, 0),
  (assign, "$npc_to_rejoin_party", 0),
  
  (call_script, "script_change_player_honor", -1),
  (call_script, "script_change_troop_renown", "trp_player", -5),
  (call_script, "script_change_troop_renown", "$g_talk_troop", -5),
  (troop_set_health, "$g_talk_troop", 0),
  (party_add_prisoners, ":center_no", "$g_talk_troop", 1),
  (troop_set_slot, "$g_talk_troop", slot_troop_prisoner_of_party, ":center_no"), #SB : corresponding troop slot
]],




[anyone, "event_triggered", [
               (store_conversation_troop, "$map_talk_troop"),
          (is_between, "$map_talk_troop", companions_begin, companions_end),

               (eq, "$map_talk_troop", "$npc_to_rejoin_party"),
#                     (eq, "$npc_map_talk_context", slot_troop_days_on_mission),
               (troop_get_slot, ":mission", "$g_talk_troop", slot_troop_current_mission),
          (this_or_next|eq, ":mission", npc_mission_peace_request),
          (this_or_next|eq, ":mission", npc_mission_pledge_vassal),
          (this_or_next|eq, ":mission", npc_mission_test_waters),
          (this_or_next|eq, ":mission", npc_mission_non_aggression),
            (eq, ":mission", npc_mission_seek_recognition),

          (troop_get_slot, ":string", "$map_talk_troop", slot_troop_honorific),
               (str_store_string, s21, ":string"),
          (troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
          (str_store_faction_name, s31, ":mission_object"),

          (call_script, "script_npc_decision_checklist_peace_or_war", ":mission_object", "fac_player_supporters_faction", "$g_talk_troop"),
          (assign, "$g_mission_result", reg0),
##diplomacy start+
		(try_begin),
			(ge, "$cheat_mode", 1),
			(display_message, "@{!} DEBUG - Native checklist-peace-or-war result {reg0}, because {s14}"),
		(try_end),
		#make gender correct
		(faction_get_slot, ":emissary_object", ":mission_object", slot_faction_leader),
		(call_script, "script_dplmc_store_troop_is_female", ":emissary_object"),
               ],#next line "him" to {reg0?her:him}
#diplomacy begin
"Well, {s21}, at last I've found you. I have returned from my mission to {s31}. In general, I would say, {s14}. Nevertheless I tried to convince {reg0?her:him}.","companion_embassy_results", [
#diplomacy end
         ]],
##diplomacy end+

##diplomacy start+ Alternate check for recognition
[anyone, "companion_embassy_results", [
	(troop_slot_eq, "$g_talk_troop", slot_troop_current_mission, npc_mission_seek_recognition),
	(troop_get_slot, ":target_faction", "$g_talk_troop", slot_troop_mission_object),
	(neg|faction_slot_ge, ":target_faction", slot_faction_recognized_player, 1),
	(assign, ":check_peace_war", "$g_mission_result"),#Negative is wants war, positive is wants peace, 0 is undecided
	(ge, ":check_peace_war", 0),

	#Check to see if the player might be ruler of an NPC faction
	(assign, ":player_faction", "fac_player_supporters_faction"),
	(try_begin),
		(neg|faction_slot_eq, "fac_player_supporters_faction", slot_faction_state, sfs_active),
		(is_between, "$players_kingdom", npc_kingdoms_begin, npc_kingdoms_end),
		(assign, ":player_faction", "$players_kingdom"),
	(try_end),

	#Must either be at peace or want to be at peace
	(store_relation, reg0, ":player_faction", ":target_faction"),
	(this_or_next|ge, reg0, 0),
		(ge, ":check_peace_war", 1),

	(is_between, "$g_player_court", centers_begin, centers_end),
	(faction_get_slot, ":target_liege", ":target_faction", slot_faction_leader),
	(neg|party_slot_eq, "$g_player_court", dplmc_slot_center_original_lord, ":target_liege"),
	(neg|troop_slot_eq, ":target_liege", slot_troop_home, "$g_player_court"),

	(assign, ":global_points", 0),
	(assign, ":target_points", 0),
	(assign, ":player_points", 0),

	(store_current_hours, ":now"),
	(store_sub, ":recently", ":now", 24 * 21),#within last 3 weeks

	#2 points for a castle, 4 points for a town, ignore villages
	(try_for_range, ":center_no", walled_centers_begin, walled_centers_end),
		(assign, ":center_value", 2),
		(try_begin),
			(party_slot_eq, ":center_no", slot_party_type, spt_town),
			(assign, ":center_value", 4),
		(try_end),
		(val_add, ":global_points", ":center_value"),

		(store_faction_of_party, ":center_faction", ":center_no"),

		(try_begin),
			(eq, ":center_faction", ":target_faction"),
			(val_add, ":target_points", ":center_value"),
		(else_try),
			(assign, ":is_occupied", 0),
			(try_begin),
				(this_or_next|troop_slot_eq, ":target_liege", slot_troop_home, ":center_no"),
				(this_or_next|party_slot_eq, ":center_no", slot_center_original_faction, ":target_faction"),
					(party_slot_eq, ":center_no", dplmc_slot_center_original_lord, ":target_liege"),
				(assign, ":is_occupied", 1),
			(else_try),
				(this_or_next|party_slot_eq, ":center_no", dplmc_slot_center_ex_lord, ":target_liege"),
					(party_slot_eq, ":center_no", slot_center_ex_faction, ":target_faction"),
				(party_slot_ge, ":center_no", dplmc_slot_center_last_transfer_time, ":recently"),
				(assign, ":is_occupied", 1),
			(try_end),
			(eq, ":is_occupied", 0),
			(this_or_next|eq, ":center_faction", "fac_player_supporters_faction"),
				(eq, ":center_faction", "$players_kingdom"),
			(val_add, ":player_points", ":center_value"),
		(try_end),
	(try_end),

	#Needs to hold territory (aside from territory the target faction considers to belong to itself)
	(try_begin),
		(ge, "$cheat_mode", 1),
		(lt,  ":player_points", 1),
		(display_message, "@{!} Recognition refused because player owns no fortresses not claimed by target faction"),
	(try_end),
	(ge, ":player_points", 1),

	#2 points for a lord
	(val_add, ":global_points", 2),#for the player
	(val_add, ":player_points", 2),
	(try_for_range, ":active_npc", heroes_begin, heroes_end),
		(assign, ":lord_value", 2),
		(try_begin),
			#Give less weight to commoners
			(troop_slot_ge, ":active_npc", slot_lord_reputation_type, lrep_roguish),
			(assign, ":lord_value", 1),
		(try_end),
		(try_begin),
			#current lords + original lords
			(this_or_next|is_between, ":active_npc", kings_begin, kings_end),
			(this_or_next|is_between, ":active_npc", lords_begin, lords_end),
			(troop_slot_eq, ":active_npc", slot_troop_occupation, slto_kingdom_hero),
			(val_add, ":global_points", ":lord_value"),
		(try_end),
		(troop_slot_eq, ":active_npc", slot_troop_occupation, slto_kingdom_hero),
		(store_faction_of_troop, ":cur_faction", ":active_npc"),
		(try_begin),
			(eq, ":cur_faction", ":target_faction"),
			(val_add, ":target_points", ":lord_value"),
		(else_try),
			(this_or_next|eq, ":cur_faction", "fac_player_supporters_faction"),
			(eq, ":cur_faction", "$players_kingdom"),
			(val_add, ":player_points", ":lord_value"),
		(try_end),
	(try_end),

	(store_sub, ":num_kingdoms", npc_kingdoms_end, npc_kingdoms_begin),#Not necessarily number of active kingdoms
	(val_max, ":num_kingdoms", 2),
	(store_div, ":average_points", ":global_points", ":num_kingdoms"),

	(try_begin),
		(ge, "$cheat_mode", 1),
		(assign, reg0, ":player_points"),
		(assign, reg1, ":target_points"),
		(assign, reg2, ":average_points"),
		(display_message, "@{!} Military strength check: Player faction score {reg0}, target faction score {reg1}, benchmark score {reg2}"),
	(try_end),

	#Calculate adjustment for player score
	(store_add, ":subjective_percent_modifier", "$player_right_to_rule", 1),#Because it is capped at 99 instead of 100 in Native
	(val_mul, ":subjective_percent_modifier", 2),
	(val_add, ":subjective_percent_modifier", 2),
	(val_div, ":subjective_percent_modifier", 5),
	(val_add, ":subjective_percent_modifier", 60),#100 if you have full right-to-rule, 60 if you have no right-to-rule
	(call_script, "script_troop_get_player_relation", ":target_liege"),
	(try_begin),
		#Maximum positive modifier +20%
		(ge, reg0, 0),
		(val_div, reg0, 5),
	(else_try),
		#Minimum negative modifier -40%
		(lt, reg0, 0),
		(val_mul, reg0, 2),
		(val_div, reg0, 5),
	(try_end),
	(val_add, ":subjective_percent_modifier", reg0),#adjusts % by +20 to -40; minimum possible is 20, maximum possible is 120

	#Apply adjustment to player score
	(val_clamp, ":subjective_percent_modifier", 20, 121),#<-- This should have no effect unless there is a mistake above
	(val_mul, ":player_points", ":subjective_percent_modifier"),
	(val_div, ":player_points", 100),

	#Calculate adjustment for target score
	#Adjust standards towards the mean
	(try_begin),
		(le, ":check_peace_war", -1),
		#Right now the code can't get this far if the check-peace-war
		#result was negative, but leave this in here to handle it if
		#that gets changed.
		(val_max, ":target_points", ":average_points"),
	(else_try),
		(le, ":check_peace_war", 1),
		(val_add, ":target_points", ":average_points"),
		(val_div, ":target_points", 2),
	(else_try),
		(ge, ":check_peace_war", 2),
		(val_min, ":target_points", ":average_points"),
	(try_end),
	#For some variability, adjust the target score by + or - 10%
	(store_random_in_range, reg0, 0, 21),
	(store_add, ":subjective_percent_modifier", 90, reg0),
	#Apply modifier based on check_peace_war
	(val_max, ":check_peace_war", -5),#In Native this result won't ever reach these bounds, but add these in case
	(val_min, ":check_peace_war", 5),#the script behavior is altered later.
	(store_mul, reg0, ":check_peace_war", -10),
	(try_begin),
		(lt, ":check_peace_war", 0),
		(val_mul, reg0, 2),
	(try_end),
	(val_add, ":subjective_percent_modifier", reg0),
	#Apply penalty based on war and/or betrayal
	(try_begin),
		(eq, ":target_faction", "$players_oath_renounced_against_kingdom"),
		(val_add, ":subjective_percent_modifier", 20),
	(else_try),
		(store_relation, reg0, ":player_faction", ":target_faction"),
		(lt, reg0, 0),
		(lt, ":check_peace_war", 1),
		(val_add, ":subjective_percent_modifier", 10),
	(try_end),

	#Apply adjustment to target score
	(val_mul, ":target_points", reg0),
	(val_div, ":target_points", 100),

	(try_begin),
		(ge, "$cheat_mode", 1),
		(assign, reg0, ":player_points"),
		(assign, reg1, ":target_points"),
		(display_message, "@{!} Player faction score for recognition is {reg0}, needs to be at least {reg1}"),
	(try_end),
	#Moment of truth
	(ge, ":player_points", ":target_points"),

	(str_store_troop_name, s12, ":target_liege"),
	(str_store_party_name, s4, "$g_player_court"),
],
"In this letter, {s12} addresses you as {Lord/Lady} of {s4}, which implies some sort of recognition that you are a sovereign and independent monarch.","companion_rejoin_response", [
            (troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
         (try_begin),
            (faction_slot_eq, ":mission_object", slot_faction_recognized_player, 0),
            (faction_set_slot, ":mission_object", slot_faction_recognized_player, 1),
            (call_script, "script_change_player_right_to_rule", 10),
         (try_end),
         ]],

##For the standard refusal logic, give more insight into why they refused.
[anyone, "companion_embassy_results", [
	(troop_slot_eq, "$g_talk_troop", slot_troop_current_mission, npc_mission_seek_recognition),
	(troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
	(faction_get_slot, ":emissary_object", ":mission_object", slot_faction_leader),
	#Would have recognized
	(this_or_next|ge, "$g_mission_result", 2),
		(faction_slot_eq, ":mission_object", slot_faction_recognized_player, 1),
	#Except there is no court
	(neg|is_between, "$g_player_court", centers_begin, centers_end),
	(str_store_troop_name, s12, ":emissary_object"),
	(call_script, "script_dplmc_store_troop_is_female", ":emissary_object"),
],
"In {reg0?her:his} letter, {s12} merely refers to you as {playername}, omitting any title. This does not constitute recognition of your right to rule. The letter implies that {reg0?she:he} is unwilling to extend recognition due to your lack of a court.","companion_rejoin_response", [
         ]],

[anyone, "companion_embassy_results", [
	(troop_slot_eq, "$g_talk_troop", slot_troop_current_mission, npc_mission_seek_recognition),
	(troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
	(faction_get_slot, ":emissary_object", ":mission_object", slot_faction_leader),
	#Would have recognized
	(this_or_next|ge, "$g_mission_result", 2),
		(faction_slot_eq, ":mission_object", slot_faction_recognized_player, 1),
	(is_between, "$g_player_court", centers_begin, centers_end),
	#Except our court is in one of his original centers, or we occupy a fief
	#that is a sticking point.
	(assign, ":number_of_fiefs", 0),
	(str_clear, s0),
	(str_clear, s1),
	(try_for_range, ":center_no", walled_centers_begin, walled_centers_end),
		(store_faction_of_party, ":center_faction", ":center_no"),
		(this_or_next|eq, ":center_faction", "fac_player_supporters_faction"),
			(eq, ":center_faction", "$players_kingdom"),
		(assign, reg0, 0),
		(try_begin),
			(this_or_next|party_slot_eq, ":center_no", dplmc_slot_center_original_lord, ":emissary_object"),
				(troop_slot_eq, ":emissary_object", slot_troop_home, ":center_no"),
			(assign, reg0, 1),
		(else_try),
			(eq, ":center_no", "$g_player_court"),
			(party_slot_eq, ":center_no", slot_center_original_faction, ":mission_object"),
			(assign, reg0, 1),
		(try_end),
		(eq, reg0, 1),
		(try_begin),
			(ge, ":number_of_fiefs", 2),
			(str_store_string, s0, "str_dplmc_s0_comma_s1"),
		(else_try),
			(eq, ":number_of_fiefs", 1),
			(str_store_string_reg, s0, s1),
		(try_end),
		(str_store_party_name, s1, ":center_no"),
		(val_add, ":number_of_fiefs", 1),
	(try_end),
	#Fief objections found
	(ge, ":number_of_fiefs", 1),
	(try_begin),
		(eq, ":number_of_fiefs", 1),
		(str_store_string_reg, s0, s1),
	(else_try),
		(str_store_string, s0, "str_dplmc_s0_and_s1"),
	(try_end),
	(str_clear, s1),

	(str_store_troop_name, s12, ":emissary_object"),
	(call_script, "script_dplmc_store_troop_is_female", ":emissary_object"),
],
"In {reg0?her:his} letter, {s12} merely refers to you as {playername}, omitting any title. This does not constitute recognition of your right to rule. The letter implies that {reg0?she:he} is unwilling to extend recognition due to your occupation of {s0}.","companion_rejoin_response", [
         ]],

##diplomacy end+

[anyone, "companion_embassy_results", [
             (troop_slot_eq, "$g_talk_troop", slot_troop_current_mission, npc_mission_seek_recognition),
         (troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),

         (this_or_next|ge, "$g_mission_result", 2),
            (faction_slot_eq, ":mission_object", slot_faction_recognized_player, 1),

         (is_between, "$g_player_court", centers_begin, centers_end),

         (faction_get_slot, ":emissary_object", ":mission_object", slot_faction_leader),
         (str_store_troop_name, s12, ":emissary_object"),
         (neg|party_slot_eq, "$g_player_court", slot_center_original_faction, ":mission_object"),
 		 ##diplomacy start+
		 ##Add a check regarding any territory that would be a sore point with the liege.
		 (assign, ":end_cond", walled_centers_end),
		 (try_for_range, ":center_no", walled_centers_begin, ":end_cond"),
			(store_faction_of_party, ":center_faction", ":center_no"),
			(this_or_next|eq, ":center_faction", "fac_player_supporters_faction"),
				(eq, ":center_faction", "$players_kingdom"),
			(this_or_next|troop_slot_eq, ":emissary_object", slot_troop_home, ":center_no"),
				(party_slot_eq, ":center_no", dplmc_slot_center_original_lord, ":emissary_object"),
			(assign, ":end_cond", ":center_no"),
		 (try_end),
		 (eq, ":end_cond", walled_centers_end),
		 ##diplomacy end+
         (str_store_party_name, s4, "$g_player_court"),
],
"In this letter, {s12} addresses you as {Lord/Lady} of {s4}, which implies some sort of recognition that you are a sovereign and independent monarch.","companion_rejoin_response", [
            (troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
         (try_begin),
            (faction_slot_eq, ":mission_object", slot_faction_recognized_player, 0),
            (faction_set_slot, ":mission_object", slot_faction_recognized_player, 1),
            (call_script, "script_change_player_right_to_rule", 10),
         (try_end),
         ]],

##diplomacy start+
#For flavor, if the recognition mission failed, give an alternate refusal message
#when the player is co-ruler of a kingdom.
[anyone, "companion_embassy_results", [
	(troop_slot_eq, "$g_talk_troop", slot_troop_current_mission, npc_mission_seek_recognition),
	(troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
	(faction_get_slot, ":emissary_object", ":mission_object", slot_faction_leader),
	#Check in case the player faction shouldn't be fac_player_supporters_faction
	(assign, ":player_faction", "fac_player_supporters_faction"),
	(try_begin),
		(neg|faction_slot_eq, ":player_faction", slot_faction_state, sfs_active),
		(is_between, "$players_kingdom", npc_kingdoms_begin, npc_kingdoms_end),
		(assign, ":player_faction", "$players_kingdom"),
	(try_end),
	#The player is not the sole faction leader
	(faction_get_slot, ":player_faction_leader", ":player_faction", slot_faction_leader),
	(neq, ":player_faction_leader", "trp_player"),
	#The leader is a king or pretender
	(this_or_next|is_between, ":player_faction_leader", kings_begin, kings_end),
		(is_between, ":player_faction_leader", pretenders_begin, pretenders_end),
	(str_store_troop_name, s0, ":player_faction_leader"),
	(str_store_troop_name, s12, ":emissary_object"),
	(call_script, "script_dplmc_store_troop_is_female", ":emissary_object"),
	],
	"In this letter, {s12} addresses {reg0?her:his} response to {s0}, referring to you only as {s0}'s faithful vassal. This does not constitute recognition of your right to rule.","companion_rejoin_response", [
	]],
##diplomacy end+
[anyone, "companion_embassy_results", [
              (troop_slot_eq, "$g_talk_troop", slot_troop_current_mission, npc_mission_seek_recognition),
         (troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
         (faction_get_slot, ":emissary_object", ":mission_object", slot_faction_leader),
         (str_store_troop_name, s12, ":emissary_object"),
		##diplomacy start+ Use proper pronoun
		(call_script, "script_dplmc_store_troop_is_female", ":emissary_object"),
],#Next line replace "his" with {reg0?her:his}
"In {reg0?her:his} letter, {s12} merely refers to you as {playername}, omitting any title. This does not constitute recognition of your right to rule.","companion_rejoin_response", [
##diplomacy end+
         ]],

[anyone, "companion_embassy_results", [
              (troop_slot_eq, "$g_talk_troop", slot_troop_current_mission, npc_mission_peace_request),
         (troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
         (faction_slot_ge, ":mission_object", slot_faction_truce_days_with_factions_begin, 1),
         (faction_get_slot, ":emissary_object", ":mission_object", slot_faction_leader),
         (str_store_troop_name, s12, ":emissary_object"),

],
"{s12} says that your current truce should suffice.","companion_rejoin_response", [
         ]],


[anyone, "companion_embassy_results", [
              (troop_slot_eq, "$g_talk_troop", slot_troop_current_mission, npc_mission_peace_request),
         (ge, "$g_mission_result", 1),
         (troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
         (faction_get_slot, ":emissary_object", ":mission_object", slot_faction_leader),
         (str_store_troop_name, s12, ":emissary_object"),
##diplomacy start+ make gender correct
(call_script, "script_dplmc_store_troop_is_female", ":emissary_object"),
],#Next line "he" to {reg0?she:he}
##diplomacy begin
"{s12} says that {reg0?she:he} is willing to consider a truce of twenty days.","companion_truce_confirm", [
##diplomacy end
##diplomacy end+
         ]],

[anyone, "companion_embassy_results", [
             (troop_slot_eq, "$g_talk_troop", slot_troop_current_mission, npc_mission_peace_request),
         (troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
         (faction_get_slot, ":emissary_object", ":mission_object", slot_faction_leader),
         (str_store_troop_name, s12, ":emissary_object"),
##diplomacy start+ make gender correct
(call_script, "script_dplmc_store_troop_is_female", ":emissary_object"),
],#Next line "he" to {reg0?she:he}
"{s12} says that {reg0?she:he} is unwilling to conclude a peace.","companion_rejoin_response", [
##diplomacy end+
         ]],


[anyone|plyr, "companion_truce_confirm", [
(troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
(str_store_faction_name, s4, ":mission_object"),
],
"Very well -- let this truce with the {s4} be concluded.","companion_rejoin_response", [
(troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
(call_script, "script_diplomacy_start_peace_between_kingdoms", ":mission_object", "$players_kingdom", 1),
(str_store_faction_name, s4, ":mission_object"),
]],

[anyone|plyr, "companion_truce_confirm", [],
"On second thought, perhaps this is currently not in our interests.","companion_rejoin_response", [
         ]],


[anyone, "companion_embassy_results", [
              (troop_slot_eq, "$g_talk_troop", slot_troop_current_mission, npc_mission_pledge_vassal),
#					(troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
         (this_or_next|check_quest_active, "qst_join_faction"),
            (is_between, "$players_kingdom", npc_kingdoms_begin, npc_kingdoms_end),
         (troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
         (faction_get_slot, ":emissary_object", ":mission_object", slot_faction_leader),
         (str_store_troop_name, s12, ":emissary_object"),

],
"{s12} says that you are already pledged to another ruler.","companion_rejoin_response", [
         ]],

[anyone, "companion_embassy_results", [
              (troop_slot_eq, "$g_talk_troop", slot_troop_current_mission, npc_mission_pledge_vassal),
#					(troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
         (lt, "$g_mission_result", -2),
         (troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
         (faction_get_slot, ":emissary_object", ":mission_object", slot_faction_leader),
         (str_store_troop_name, s12, ":emissary_object"),
##diplomacy start+ make gender correct
(call_script, "script_dplmc_store_troop_is_female", ":emissary_object"),
],#next line "he" to {reg0?she:he}
"{s12} says that {reg0?she:he} does not believe that you would honor your obligations as a vassal, and suspects that your offer is just a ploy.","companion_rejoin_response", [
         ]],
##diplomacy end+

[anyone, "companion_embassy_results", [
         (troop_slot_eq, "$g_talk_troop", slot_troop_current_mission, npc_mission_pledge_vassal),
         (troop_get_slot, ":mission_object", "$g_talk_troop", slot_troop_mission_object),
         (faction_get_slot, ":emissary_object", ":mission_object", slot_faction_leader),
         (str_store_troop_name, s12, ":emissary_object"),
         ##diplomacy start+ make gender correct
         (call_script, "script_dplmc_store_troop_is_female", ":emissary_object"),
],#next line "he" to {reg0?she:he}, etc.
"{s12} says that {reg0?she:he} accepts your offer of vassalage. {reg0?She:He} will give you 20 days to seek {reg0?her:him} out, in which time {reg0?she:he} will refrain from making war on you.","vassalage_offer_confirm", [
         ]],
##diplomacy end+

[anyone|plyr, "vassalage_offer_confirm", [],
##diplomacy start+ next line "him" to {reg0?her:him}
"Tell {reg0?her:him} that I accept {reg0?her:his} terms...", "companion_rejoin_response", [
##diplomacy end+

  (troop_get_slot, "$g_invite_faction", "$g_talk_troop", slot_troop_mission_object),
  (faction_get_slot, "$g_invite_faction_lord", "$g_invite_faction", slot_faction_leader),

  (str_store_troop_name,s1,"$g_invite_faction_lord"),
  (setup_quest_text,"qst_join_faction"),

  (str_store_troop_name_link, s3, "$g_invite_faction_lord"),
  (str_store_faction_name_link, s4, "$g_invite_faction"),
  (quest_set_slot, "qst_join_faction", slot_quest_giver_troop, "$g_invite_faction_lord"),
  ##diplomacy start
  (quest_set_slot, "qst_join_faction", slot_quest_expiration_days, 20),
  ##diplomacy end

  (try_begin),
    (store_relation, ":relation", "$g_invite_faction", "fac_player_supporters_faction"),
    (lt, ":relation", 0),
    (call_script, "script_diplomacy_start_peace_between_kingdoms", "$g_invite_faction", "fac_player_supporters_faction", 0),
    (quest_set_slot, "qst_join_faction", slot_quest_failure_consequence, 1),
  (try_end),

  #SB: gender string
  (call_script, "script_dplmc_store_troop_is_female_reg", "$g_invite_faction_lord", 4),
  (str_store_string, s2, "@Find and speak with {s3} of {s4} to give {reg4?her:him} your oath of homage."),
  (call_script, "script_start_quest", "qst_join_faction", "$g_invite_faction_lord"),
  (call_script, "script_report_quest_troop_positions", "qst_join_faction", "$g_invite_faction_lord", 3),
]],







[anyone|plyr, "companion_rejoin_response", [
  (hero_can_join, "p_main_party"),
  (neg|main_party_has_troop, "$map_talk_troop"),
],  "Welcome back, friend!", "close_window", [
  (party_add_members, "p_main_party", "$map_talk_troop", 1),
  (assign, "$npc_to_rejoin_party", 0),
  (troop_set_slot, "$map_talk_troop", slot_troop_current_mission, 0),
  (troop_set_slot, "$map_talk_troop", slot_troop_days_on_mission, 0),
    ]],

[anyone|plyr, "companion_rejoin_response", [
],  "Unfortunately, I cannot take you back just yet.", "companion_rejoin_refused", [
  (troop_set_slot, "$map_talk_troop", slot_troop_current_mission, npc_mission_rejoin_when_possible),
  (troop_set_slot, "$map_talk_troop", slot_troop_days_on_mission, 0),
  (assign, "$npc_to_rejoin_party", 0),
    ]],

[anyone, "companion_rejoin_refused", [
],  "As you wish. I will take care of some business, and try again in a few days.", "close_window", [
    ]],


[anyone, "event_triggered", [
(is_between, "$g_talk_troop", companions_begin, companions_end),
(neg|troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_hero),
(neg|main_party_has_troop, "$g_talk_troop"),
               ],
"Would you have me rejoin you?", "companion_rejoin_response", [
(assign, "$map_talk_troop", "$g_talk_troop"),
 ]],

#caravan merchants
#SB : this should be deprecated
[anyone, "event_triggered",
[(eq, "$caravan_escort_state",1),
(eq, "$g_encountered_party","$caravan_escort_party_id"),
(le, "$talk_context",tc_party_encounter),
(store_distance_to_party_from_party, reg0, "$caravan_escort_destination_town", "$caravan_escort_party_id"),
(lt, reg0, 5),
(str_store_party_name, s3, "$caravan_escort_destination_town"),
(assign, reg3, "$caravan_escort_agreed_reward"),
],
"There! I can see the walls of {s3} in the distance. We've made it safely.\
Here, take this purse of {reg3} denars, as I promised. I hope we can travel together again someday.", "close_window",
[
(assign,"$caravan_escort_state",0),
(call_script, "script_troop_add_gold", "trp_player", "$caravan_escort_agreed_reward"),
(assign,reg(4), "$caravan_escort_agreed_reward"),
(val_mul,reg(4), 1),
(add_xp_as_reward,reg(4)),
(assign, "$g_leave_encounter",1),
]],

# #SB : event_triggered self-dialog
# [anyone, "event_triggered", [(eq, "$g_talk_troop", "$g_player_troop")],
# "Hello yourself.", "export_import", [
# (set_player_troop, "$g_player_troop"),
# (change_screen_view_character)]],
 
# [anyone|auto_proceed, "export_import", [(eq, "$g_talk_troop", "$g_player_troop")],
# "Hello yourself.", "close_window", [
 # ]],

[anyone, "event_triggered", [],
"{!}Sorry -- just talking to myself [ERROR- {s51}]", "close_window", [
 ]],






#KINGDOM LORD DIALOGS BEGINS HERE




#FEMALE PLAYER CHACTER WEDDING (also go to the feast, 'lift a glass' speeches for npc lords)
#Feast not yet organized
[anyone, "start", [
(lt, "$talk_context", tc_siege_commander),

(check_quest_active, "qst_wed_betrothed_female"),
(quest_slot_eq, "qst_wed_betrothed_female", slot_quest_giver_troop, "$g_talk_troop"),
(neg|faction_slot_eq, "$g_talk_troop_faction", slot_faction_ai_state, sfai_feast),

(store_current_hours, ":hours_since_betrothal"),
(troop_get_slot, ":betrothal_time", "$g_talk_troop", slot_troop_betrothal_time),
(val_sub, ":hours_since_betrothal", ":betrothal_time"),
(lt, ":hours_since_betrothal", 720), #30 days
(str_clear, s12),
(try_begin),
(neg|faction_slot_eq, "$g_talk_troop_faction", slot_faction_ai_state, sfai_feast),
(neg|faction_slot_eq, "$g_talk_troop_faction", slot_faction_ai_state, sfai_default),
(str_store_string, s12, "@ We will of course need to wait until the realm is no longer on campaign."),
(try_end),
],
#diplomacy start+ gender-correct language
"My {lord/lady}, I look forward to our marriage, as soon as there is an opportunity to hold a proper feast.{s12}", "lord_start", [
#diplomacy end+
]],

#Feast, but not at the venue
[anyone, "start", [
(lt, "$talk_context", tc_siege_commander),

(check_quest_active, "qst_wed_betrothed_female"),
(quest_slot_eq, "qst_wed_betrothed_female", slot_quest_giver_troop, "$g_talk_troop"),
(faction_slot_eq, "$g_talk_troop_faction", slot_faction_ai_state, sfai_feast),
(faction_get_slot, ":feast_venue", "$g_talk_troop_faction", slot_faction_ai_object),
(party_slot_eq, "$g_talk_troop_party", slot_party_ai_state, spai_holding_center),
(party_slot_eq, "$g_talk_troop_party", slot_party_ai_object, ":feast_venue"),

(neq, ":feast_venue", "$g_encountered_party"),
(str_store_party_name, s4, ":feast_venue"),
],
#diplomacy start+ gender-correct language
"My {lord/lady}, if you wish to marry, we can proceed to the feast at {s4} to exchange vows before the lords of the realm.", "lord_start", [
#diplomacy end+
]],

#Over a month, and heading to a center
[anyone, "start", [
(lt, "$talk_context", tc_siege_commander),

(check_quest_active, "qst_wed_betrothed_female"),
(quest_slot_eq, "qst_wed_betrothed_female", slot_quest_giver_troop, "$g_talk_troop"),

(store_current_hours, ":hours_since_betrothal"),
(troop_get_slot, ":betrothal_time", "$g_talk_troop", slot_troop_betrothal_time),
(val_sub, ":hours_since_betrothal", ":betrothal_time"),
(ge, ":hours_since_betrothal", 720), #30 days

(party_get_attached_to, ":attached", "$g_talk_troop_party"),
(neg|is_between, ":attached", walled_centers_begin, walled_centers_end),

(party_slot_eq, "$g_talk_troop_party", slot_party_ai_state, spai_holding_center),
(party_get_slot, ":object", "$g_talk_troop_party", slot_party_ai_object),
(str_store_party_name, s4, ":object"),
],
#diplomacy start+ gender-correct language
"My {lord/lady}, I grow tired of waiting for the lords of this realm to assemble. Come with me to {s4} exchange our vows.", "lord_start", [
#diplomacy end+
]],

#Over a month, but not in a center
[anyone, "start", [
(lt, "$talk_context", tc_siege_commander),
(check_quest_active, "qst_wed_betrothed_female"),
(quest_slot_eq, "qst_wed_betrothed_female", slot_quest_giver_troop, "$g_talk_troop"),

(store_current_hours, ":hours_since_betrothal"),
(troop_get_slot, ":betrothal_time", "$g_talk_troop", slot_troop_betrothal_time),
(val_sub, ":hours_since_betrothal", ":betrothal_time"),
(ge, ":hours_since_betrothal", 0), #30 days

(party_get_attached_to, ":attached", "$g_talk_troop_party"),
(neg|is_between, ":attached", walled_centers_begin, walled_centers_end),

],
#diplomacy start+ gender-correct language
"My {lord/lady}, I grow tired of waiting for the lords of this realm to assemble. Perhaps we should take the first opportunity to marry, in any great hall that is open to us.", "lord_start", [
#diplomacy end+
]],

[anyone, "start", [
(lt, "$talk_context", tc_siege_commander),
(check_quest_active, "qst_wed_betrothed_female"),
(quest_slot_eq, "qst_wed_betrothed_female", slot_quest_giver_troop, "$g_talk_troop"),
(this_or_next|neg|faction_slot_eq, "$g_talk_troop_faction", slot_faction_ai_state, sfai_feast),
(neg|faction_slot_eq, "$g_talk_troop_faction", slot_faction_ai_object, "$g_encountered_party"),
],
#diplomacy start+ gender-correct language
"My {lord/lady}, I have grown tired of waiting. Let us proceed with the vows immediately.", "lord_groom_vows", [
#diplomacy end+
]],

[anyone, "start", [
(lt, "$talk_context", tc_siege_commander),
(check_quest_active, "qst_wed_betrothed_female"),
(quest_slot_eq, "qst_wed_betrothed_female", slot_quest_giver_troop, "$g_talk_troop"),
],
#diplomacy start+ gender-correct language
"My {lord/lady}, my eyes rejoice to see you. We may proceed with the vows.", "lord_groom_vows", [
#diplomacy end+
]],

[anyone, "lord_groom_vows", [
],
#diplomacy start+ gender-correct language
"My {lord/lady}, with this assembly as my witness, I vow to take you as my {husband/wife}, to honor, cherish, and {obey/protect} you. My the heavens bless us with health, prosperity, and children.", "female_pc_marriage_vow", [
#diplomacy end+
]],

[anyone|plyr, "female_pc_marriage_vow", [
],
#diplomacy start+ (female player/male lord) or (male player/female lord)
"I vow to take you as my {reg65?wife:husband}.", "lord_groom_wedding_complete", [
#diplomacy end+
(call_script, "script_courtship_event_bride_marry_groom", "trp_player", "$g_talk_troop", 0),
(call_script, "script_end_quest", "qst_wed_betrothed_female"),
]],

[anyone|plyr, "female_pc_marriage_vow", [
],
"Wait -- I need to think about this.", "close_window", [
(assign, "$g_leave_encounter", 1),
]],

[anyone, "lord_groom_wedding_complete", [
],
"We are now husband and wife. Let the festivities commence!", "close_window",
[]],


# KINGDOM LORD DUEL OUTCOMES
[anyone,"start",
[(eq, "$talk_context", tc_after_duel),
(check_quest_active, "qst_denounce_lord"),
(check_quest_succeeded, "qst_denounce_lord"),
(quest_slot_eq, "qst_denounce_lord", slot_quest_target_troop, "$g_talk_troop"),
],
"Very well. You've made your point. I have nothing more to say.", "close_window", [
  (call_script, "script_change_troop_renown", "trp_player", 10),
  (call_script, "script_change_troop_renown", "$g_talk_troop", -5), #SB : give half renown loss to other troop
  (assign, "$g_leave_encounter", 1),
]],

[anyone,"start",
[(eq, "$talk_context", tc_after_duel),
(check_quest_active, "qst_denounce_lord"),
(check_quest_failed, "qst_denounce_lord"),
(quest_slot_eq, "qst_denounce_lord", slot_quest_target_troop, "$g_talk_troop"),
],
"Well, {sir/my lady}! Please, do not trouble yourself to rise from the ground, as I would simply have to knock you down again. I shall take your silence as an apology. Good day to you.", "close_window", [
  (call_script, "script_change_troop_renown", "trp_player", -10),
  (call_script, "script_change_troop_renown", "$g_talk_troop", 5), #SB : give half renown loss to other troop
(assign, "$g_leave_encounter", 1),
]],



[anyone,"start",
[(eq, "$talk_context", tc_after_duel),
(assign, "$temp", 0),
(try_begin),
(check_quest_active, "qst_duel_avenge_insult"),
(check_quest_succeeded, "qst_duel_avenge_insult"),
(quest_slot_eq, "qst_duel_avenge_insult", slot_quest_target_troop, "$g_talk_troop"),
(assign, "$temp", 1),
(else_try),
(check_quest_active, "qst_duel_for_lady"),
(check_quest_succeeded, "qst_duel_for_lady"),
(quest_slot_eq, "qst_duel_for_lady", slot_quest_target_troop, "$g_talk_troop"),
(assign, "$temp", 2),
(try_end),
(gt, "$temp", 0),
],
"Very well. You've made your point. I retract what I said. I hope you have obtained satisfaction.", "close_window", [
(try_begin),
  (eq, "$temp", 1),
  (call_script, "script_change_troop_renown", "trp_player", 10),
  (call_script, "script_change_troop_renown", "$g_talk_troop", -5), #SB : give half renown loss to other troop
  (call_script, "script_end_quest", "qst_duel_avenge_insult"),
(try_end),
(assign, "$g_leave_encounter", 1),
]],

[anyone,"start",
  [ (eq, "$talk_context", tc_after_duel),
    (assign, "$temp", 0),
    (try_begin),
      (check_quest_active, "qst_duel_avenge_insult"),
      (check_quest_failed, "qst_duel_avenge_insult"),
      (quest_slot_eq, "qst_duel_avenge_insult", slot_quest_target_troop, "$g_talk_troop"),
      (assign, "$temp", 1),
    (else_try),
      (check_quest_active, "qst_duel_for_lady"),
      (check_quest_failed, "qst_duel_for_lady"),
      (quest_slot_eq, "qst_duel_for_lady", slot_quest_target_troop, "$g_talk_troop"),
      (assign, "$temp", 2),
    (try_end),
    (gt, "$temp", 0),
  ],
"Hah! Not so gallant now, are we? Now trouble me no more.", "close_window", [
(try_begin),
  (eq, "$temp", 1),
  (call_script, "script_change_troop_renown", "trp_player", -10),
  (call_script, "script_change_troop_renown", "$g_talk_troop", 5), #SB : give half renown loss to other troop
  (call_script, "script_end_quest", "qst_duel_avenge_insult"),
(try_end),
(assign, "$g_leave_encounter", 1),
]],

[anyone,"start",
[(eq, "$talk_context", tc_after_duel),
(check_quest_active, "qst_duel_courtship_rival"),
(check_quest_succeeded, "qst_duel_courtship_rival"),
(quest_slot_eq, "qst_duel_courtship_rival", slot_quest_target_troop, "$g_talk_troop"),
(quest_get_slot, ":duel_object", "qst_duel_courtship_rival", slot_quest_giver_troop),
(str_store_troop_name, s10, ":duel_object"),
],
##diplomacy start+ replace bastard with gender-appropriate insult
#(TODO: perhaps a culturally-appropriate reference instead)
"Very well -- you have won. Let all those present today witness that you have defeated me, and I shall abandon my suit of {s10}. Are you satisfied, you heartless {bastard/bitch}?", "close_window", [
##diplomacy end+
(quest_get_slot, ":duel_object", "qst_duel_courtship_rival", slot_quest_giver_troop),
(call_script, "script_courtship_event_lady_break_relation_with_suitor", ":duel_object", "$g_talk_troop"),
(assign, "$g_leave_encounter", 1),
]],


[anyone,"start",
[(eq, "$talk_context", tc_after_duel),
(check_quest_active, "qst_duel_courtship_rival"),
(check_quest_failed, "qst_duel_courtship_rival"),
(quest_slot_eq, "qst_duel_courtship_rival", slot_quest_target_troop, "$g_talk_troop"),
(quest_get_slot, ":duel_object", "qst_duel_courtship_rival", slot_quest_giver_troop),
(str_store_troop_name, s10, ":duel_object"),
##diplomacy start+
(call_script, "script_dplmc_store_troop_is_female", ":duel_object"),#enable the male version
],
##replace "man" with "{man/woman}", and "her" with "{reg0?her:him}"
"Get up. Let all those present today witness that I have defeated you, and you are now bound to relinquish your suit of the {s10}. I will permit you one final visit, to make your farewells. After that, if you persist in attempting to see {reg0?her:him}, everyone shall know that you are a {man/woman} of scant honor.", "close_window", [
##diplomacy end+
(assign, "$g_leave_encounter", 1),
]],



[anyone,"start", [(eq, "$talk_context", tc_castle_commander)],
"What do you want?", "player_siege_castle_commander_1", []],
[anyone|plyr,"player_siege_castle_commander_1", [],
"Surrender! Your situation is hopeless!", "player_siege_ask_surrender", []],
[anyone|plyr,"player_siege_castle_commander_1", [], "Nothing. I'll leave you now.", "close_window", []],


[anyone,"player_siege_ask_surrender", [(lt, "$g_enemy_strength", 100), (store_mul,":required_str","$g_enemy_strength",5),(ge, "$g_ally_strength", ":required_str")],
"Perhaps... Do you give your word of honour that we'll be treated well?", "player_siege_ask_surrender_treatment", []],
[anyone,"player_siege_ask_surrender", [(lt, "$g_enemy_strength", 200), (store_mul,":required_str","$g_enemy_strength",3),(ge, "$g_ally_strength", ":required_str")],
"We are ready to leave this castle to you and march away if you give me your word of honour that you'll let us leave unmolested.", "player_siege_ask_leave_unmolested", []],
##diplomacy start+
#Make the AI willing to surrender in other situations when it is utterly outclassed
[anyone,"player_siege_ask_surrender", [
	(ge, "$g_dplmc_ai_changes", DPLMC_AI_CHANGES_LOW),#only enable if AI changes are active
	(assign, reg0, 0),
	(try_begin),
		#I assume that $g_encountered_party is the town, but this could be wrong
		(neg|party_slot_eq, "$g_encountered_party", slot_party_type, spt_castle),
		(neg|party_slot_eq, "$g_encountered_party", slot_party_type, spt_town),
		(try_begin),
			(ge, "$cheat_mode", 1),
			(assign, reg0, "$g_encountered_party"),
			(str_store_party_name, s0, "$g_encountered_party"),
			(party_get_slot, reg1, "$g_encountered_party", slot_party_type),
			(display_message, "@{!}Party at address {reg0} named {s0} has slot_party_type {reg1} (not castle or town)"),
		(try_end),
		(assign, reg0, 1),#<- don't continue
	(try_end),
	(eq, reg0, 0),
	#Don't bother continuing if the attackers don't outnumber the defenders by a decent ratio.
	(store_mul, reg0,"$g_enemy_strength", 3),
	(ge, "$g_ally_strength", reg0),

	#Enemy must be below a certain strength to even consider giving up.
	(game_get_reduce_campaign_ai, ":reduce_campaign_ai"),
	(this_or_next|lt, "$g_enemy_strength", 500),# Hard (would be described as "small bands" on the world map)
		(ge, ":reduce_campaign_ai", 1),
	(this_or_next|lt, "$g_enemy_strength", 1000),# Medium ("enemy patrols")
		(ge, ":reduce_campaign_ai", 2),
	(lt, "$g_enemy_strength", 2000),# Easy ("medium-sized group")

	#Prevent forts from surrendering to five men and a mule.
	(assign, ":defender_str", "$g_enemy_strength"),
	(val_max, ":defender_str", 5),#establish a minimum (if you can't just walk in, there must be some defenders)
	(try_begin),
		#Not that it matters much, given how extremely low it is, but increase the minimum for towns.
		(party_slot_eq, "$g_encountered_party", slot_party_type, spt_town),
		(val_max, ":defender_str", 10),
	(try_end),

	#Count fortresses and original fortresses for use below
	(assign, ":forts_held", 0),
	(assign, ":starting_forts", 0),
	(try_for_range, ":center_no", walled_centers_begin, walled_centers_end),
		(store_faction_of_party, reg0, ":center_no"),
		(try_begin),
			(eq, reg0, "$g_encountered_party_faction"),
			(val_add, ":forts_held", 1),
		(try_end),
		(try_begin),
			(party_slot_eq, ":center_no", slot_center_original_faction, "$g_encountered_party_faction"),
			(val_add, ":starting_forts", 1),
		(try_end),
	(try_end),

	#Always refuse to retreat if this is the last fortress
	(gt, ":forts_held", 1),

	#Always refuse to abandon a fort if they don't have more than 50% of their original size.
	(store_mul, reg0, ":forts_held", 2),
	(gt, reg0, ":starting_forts"),

	#Always refuse to abandon a native fort if they don't have more than 100% of their original size
	(assign, ":is_native", 0),
	(try_begin),
		(is_between, "$g_encountered_party_faction", npc_kingdoms_begin, npc_kingdoms_end),#this bonus is only intended for ordinary factions
		(this_or_next|troop_slot_eq, "$g_talk_troop", slot_troop_original_faction, "$g_encountered_party_faction"),
			(party_slot_eq, "$g_encountered_party", slot_center_original_faction, "$g_encountered_party_faction"),
		(assign, ":is_native", 1),
	(try_end),

	(this_or_next|gt, ":forts_held", ":starting_forts"),
		(eq, ":is_native", 0),

	#Now determine the number of attacking troops required to surrender.
	#Default requirement is being outnumbered 8-to-1
	(assign, ":surrender_ratio_10", 80),

	#Adjust values based on defending commander's personality
	(try_begin),
		#Companions who like retreating are more likely to surrender
		(call_script, "script_dplmc_get_troop_morality_value", "$g_talk_troop", tmt_aristocratic),
		(lt, reg0, 0),
		#On normal will agree if outnumbered 4-to-1
		(val_div, ":surrender_ratio_10", 2),
	(else_try),
		#Companions who dislike retreating will be less likely to surrender
		(this_or_next|ge, reg0, 1),#<- value for tmt_aristocratic
		#The same goes for martial, self-righteous, and quarrelsome lords.
		(this_or_next|troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_martial),
		(this_or_next|troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_quarrelsome),
		(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_selfrighteous),
		#Exaggerate the effect of this to make it more noticable.
		#On normal will agree if outnumbered 16-to-1.
		(val_mul, ":surrender_ratio_10", 2),
	(else_try),
		#Faction leaders are more tenacious either when defending native territory, or when
		#their faction is at less than 80% strength.
		(this_or_next|is_between, "$g_talk_troop", kings_begin, kings_end),
		(this_or_next|is_between, "$g_talk_troop", pretenders_begin, pretenders_end),
			(faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "$g_talk_troop"),
		(store_mul, reg0, ":forts_held", 5),
		(val_div, reg0, 4),
		(this_or_next|lt, reg0, ":starting_forts"),
			(ge, ":is_native", 1),
		#On normal will agree if outnumbered 16-to-1.
		(val_mul, ":surrender_ratio_10", 2),
	(else_try),
		#Ladies with traditional upbringings (other than adventurous ones) are also more likely to run away.
		#So are roguish commoners without a positive tmt_aristocratic value.
		(neg|troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_adventurous),
		(this_or_next|troop_slot_ge, "$g_talk_troop", slot_lord_reputation_type, lrep_conventional),
		(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_roguish),
		#On normal will agree if outnumbered 4-to-1
		(val_div, ":surrender_ratio_10", 2),
	(try_end),

	#Certain lords consider certain locations "native" and will not easily surrender their homes.
	#Normally the following is just for companions, but I've set it to also include things
	#like Lord Harringoth and Harringoth Castle, etc.  This is applied after personality factors,
	#since it can enhance or counteract someone's native disposition.
	(try_begin),
		(is_between, "$g_talk_troop", active_npcs_begin, kingdom_ladies_end),
		(troop_slot_eq, "$g_talk_troop", slot_troop_home, "$g_encountered_party"),
		#On normal, most will agree if outnumbered 16-to-1, 8-to-1 if cowardly, 32-to-1 if brave
		(val_mul, ":surrender_ratio_10", 2),
	(try_end),

	(val_clamp, ":surrender_ratio_10", 40, 320),#If the value is not in this range, there was a coding mistake
	#Adjust threshold for campaign difficulty
	(try_begin),
		(lt, ":reduce_campaign_ai", 1),#hard, 150% (ordinarily 14-to-1, 8-to-1 for cowards, 28-to-1 for brave)
		(val_mul, ":surrender_ratio_10", 3),
		(val_div, ":surrender_ratio_10", 2),
	(else_try),
		(eq, ":reduce_campaign_ai", 0),#medium, 100% (ordinarily 8-to-1, 4-to-1 for cowards, 16-to-1 for brave)
	(else_try),
		(ge, ":reduce_campaign_ai", 2),#easy, 75% (ordinarily 6-to-1, 3-to-1 for cowards, 12-to-1 for brave)
		(val_mul, ":surrender_ratio_10", 3),
		(val_add, ":surrender_ratio_10", 2),
		(val_div, ":surrender_ratio_10", 4),
	(try_end),

	#Compare the besiegers' strength to the "surrender threshold"
	(store_mul, ":required_strength", ":defender_str", ":surrender_ratio_10"),
	(store_mul, reg0, "$g_ally_strength", 10),
	(ge, reg0, ":required_strength"),
	],
	"We are ready to leave this castle to you and march away if you give me your word of honour that you'll let us leave unmolested.", "player_siege_ask_leave_unmolested", []],

#Make a defiant remark if the enemy is vastly outnumbered but refusing to surrender.
[anyone,"player_siege_ask_surrender", [
	#I assume that $g_encountered_party is the town, but this could be wrong
	(this_or_next|party_slot_eq, "$g_encountered_party", slot_party_type, spt_castle),
		(party_slot_eq, "$g_encountered_party", slot_party_type, spt_town),
	(is_between, "$g_encountered_party_faction", kingdoms_begin, kingdoms_end),
	#The attackers outnumber the defenders by a decent ratio.
	(store_mul, reg0,"$g_enemy_strength", 4),
	(ge, "$g_ally_strength", reg0),
	#The attack is on native soil, or the odds are REALLY bad.
	(store_mul, reg0, "$g_enemy_strength", 8),
	(this_or_next|party_slot_eq, "$g_encountered_party", slot_center_original_faction, "$g_encountered_party_faction"),
		(ge, "$g_ally_strength", reg0),
	#Store name of castle and name of faction
	(str_store_faction_name, s0, "$g_talk_troop_faction"),
	(str_store_party_name, s1, "$g_encountered_party"),],
	"The {s0} will never abandon {s1}!", "close_window", []],

##diplomacy end+
[anyone,"player_siege_ask_surrender", [],
"Surrender? Hah! We can hold these walls until we all die of old age.", "close_window", []],


[anyone|plyr,"player_siege_ask_surrender_treatment", [],
"I give you nothing. Surrender now or prepare to die!", "player_siege_ask_surrender_treatment_reject", []],
[anyone,"player_siege_ask_surrender_treatment_reject", [
##diplomacy start+ Make both-gender version.
],
"{Bastard/Bitch}. We will fight you to the last man!", "close_window", []],
##diplomacy end+
[anyone|plyr,"player_siege_ask_surrender_treatment", [],
"You will be ransomed and your soldiers will live. I give you my word.", "player_siege_ask_surrender_treatment_accept", []],
[anyone,"player_siege_ask_surrender_treatment_accept", [],
"Very well then. Under those terms, I offer you my surrender.", "close_window", [(assign,"$g_enemy_surrenders",1)]],

[anyone|plyr,"player_siege_ask_leave_unmolested", [],
"You have my word. You will not come under attack if you leave the castle.", "player_siege_ask_leave_unmolested_accept", []],
[anyone,"player_siege_ask_leave_unmolested_accept", [],
"Very well. Then we leave this castle to you. You have won this day. But we'll meet again.", "close_window", [(assign,"$g_castle_left_to_player",1)]],
[anyone|plyr,"player_siege_ask_leave_unmolested", [],
"Unacceptable. I want prisoners.", "player_siege_ask_leave_unmolested_reject", []],
[anyone,"player_siege_ask_leave_unmolested_reject", [],
"Then we will defend this castle to the death, and this parley is done. Farewell.", "close_window", []],


#Prison break

[anyone|plyr,"lord_prison_break", [],
"I've come to get you out of here", "lord_prison_break_confirm",
[]],

[anyone|plyr,"lord_prison_break", [],
"Never mind -- just stay quiet", "close_window",
[
(troop_set_slot, "$g_talk_troop", slot_troop_mission_participation, mp_stay_out),
(assign, "$g_reset_mission_participation", 1),
]],

[anyone,"lord_prison_break_confirm", [],
"Thank the heavens! I don't know how long I could have lasted in here", "lord_prison_break_confirm_2",
[]],

[anyone,"lord_prison_break_confirm_2", [],
"But wait -- how will we escape? We'll be rushed by the garrison the moment we step out that door. I can help you hold them off -- but I'll tell you now, they have fed me nothing but watery porridge and a few scraps, and I'm not as strong as I could be.", "lord_prison_break_confirm_3",
[]],

#SB : TODO integrate with disguise system (grab a weapon), also add response based on lrep
[anyone|plyr,"lord_prison_break_confirm_3", [],
"You keep well behind me, and try to stay out of the fighting.", "lord_prison_break_confirm_4",
[
(troop_set_slot, "$g_talk_troop", slot_troop_mission_participation, mp_prison_break_stand_back),
(assign, "$g_reset_mission_participation", 1),
(agent_set_team, "$g_talk_agent", 0),
]],

[anyone|plyr,"lord_prison_break_confirm_3", [],
"I'll need you to grab a weapon and help me, despite your weakness.", "lord_prison_break_confirm_4",
[
(troop_set_slot, "$g_talk_troop", slot_troop_mission_participation, mp_prison_break_fight),
(assign, "$g_reset_mission_participation", 1),
(agent_set_team, "$g_talk_agent", 0),
]],

[anyone|plyr,"lord_prison_break_confirm_3", [],
"Actually, don't get involved in this.", "close_window",
[
(troop_set_slot, "$g_talk_troop", slot_troop_mission_participation, mp_stay_out),
(assign, "$g_reset_mission_participation", 1),
]],


[anyone,"lord_prison_break_confirm_4", [

(str_clear, s14),
(assign, ":end", kingdom_ladies_end), #SB : loop breaking
(try_for_range, ":other_prisoner", active_npcs_begin, ":end"),
  (troop_slot_eq, ":other_prisoner", slot_troop_prisoner_of_party, "$g_encountered_party"),
  (neq, ":other_prisoner", "$g_talk_troop"),

  (assign, ":granted_parole", 0),
  (try_begin),
    (call_script, "script_cf_prisoner_offered_parole", ":other_prisoner"),
    (assign, ":granted_parole", 1),
  (try_end),
  (eq, ":granted_parole", 0),

  (troop_slot_eq, ":other_prisoner", slot_troop_mission_participation, 0),

  (str_store_troop_name, s15, ":other_prisoner"),

    ##diplomacy start+
    ##OLD:
    #(troop_get_type, reg4, ":other_prisoner"),
    ##NEW:
  (call_script, "script_dplmc_store_troop_is_female_reg", ":other_prisoner", 4), #SB : script call
    ##diplomacy end+
  (str_store_string, s14, "str__s15_is_also_being_held_here_and_you_may_wish_to_see_if_reg4shehe_will_join_us"),
  (assign, ":end", active_npcs_begin), #SB : loop break
(try_end),
],
"Let's go!{s14}", "close_window",
[]],




#After battle texts

[anyone,"start", [
  (eq, "$talk_context", tc_hero_freed),
  (troop_slot_eq,"$g_talk_troop",slot_troop_occupation, slto_kingdom_hero)
],
"I am in your debt for freeing me, friend.", "freed_lord_answer",
[
(try_begin),
 (check_quest_active, "qst_rescue_lord_by_replace"),
 (quest_slot_eq, "qst_rescue_lord_by_replace", slot_quest_target_troop, "$g_talk_troop"),
 (call_script, "script_succeed_quest", "qst_rescue_lord_by_replace"),
 (assign, "$do_not_cancel_quest", 1),
(try_end),

(try_begin),
 (check_quest_active, "qst_rescue_prisoner"),
 (quest_slot_eq, "qst_rescue_prisoner", slot_quest_target_troop, "$g_talk_troop"),
 (call_script, "script_succeed_quest", "qst_rescue_prisoner"),
 (assign, "$do_not_cancel_quest", 1),
(try_end),

(call_script, "script_remove_troop_from_prison", "$g_talk_troop"),
(assign, "$do_not_cancel_quest", 0),
]],

[anyone|plyr,"freed_lord_answer", [(lt, "$g_talk_troop_faction_relation", 0)],
"You're not going anywhere, 'friend'. You're my prisoner now.", "freed_lord_answer_1",
[#(troop_set_slot, "$g_talk_troop", slot_troop_is_prisoner, 1),
(troop_set_slot, "$g_talk_troop", slot_troop_prisoner_of_party, "p_main_party"),
(party_force_add_prisoners, "p_main_party", "$g_talk_troop", 1),
(call_script, "script_change_player_relation_with_troop", "$g_talk_troop", -30),
(call_script, "script_change_player_relation_with_faction_ex", "$g_talk_troop_faction", -2),
(call_script, "script_event_hero_taken_prisoner_by_player", "$g_talk_troop"),
]],#take prisoner

[anyone,"freed_lord_answer_1", [],
##diplomacy start+ make insult switch by gender
"I'll have your head on a pike for this, you {bastard/bitch}! Someday!", "close_window", []],
##diplomacy end+

[anyone|plyr,"freed_lord_answer", [
],
"You are free to go wherever you want, sir.", "freed_lord_answer_2",
[(call_script, "script_change_player_relation_with_troop", "$g_talk_troop", 7),
(call_script, "script_change_player_honor", 2),
#    (troop_get_slot, ":cur_rank", "$g_talk_troop", slot_troop_kingdom_rank),
#    (val_mul, ":cur_rank", 1),
##diplomacy start+
#Relationship boost for freeing lords.
(call_script, "script_dplmc_is_affiliated_family_member", "$g_talk_troop"),
(assign, ":talk_troop_is_affiliate", reg0),
(try_for_range, ":npc", heroes_begin, heroes_end),
	(store_troop_faction, ":npc_faction", ":npc"),
	(store_relation, reg0, ":npc_faction", "$g_talk_troop_faction"),
	(this_or_next|eq, ":npc_faction", "$g_talk_troop_faction"),
		(ge, reg0, 0),
	(neq, ":npc", "$g_talk_troop"),
	(neg|troop_slot_eq, ":npc", slot_troop_occupation, dplmc_slto_dead),
	(call_script, "script_troop_get_player_relation", ":npc"),
	(assign, ":relation_with_player", reg0),
	(assign, ":player_relation_change", 0),
	(try_begin),
		#Affiliate to a family: improve relations for freeing lords
		(ge, ":talk_troop_is_affiliate", 1),
		(call_script, "script_dplmc_is_affiliated_family_member", ":npc"),
		(ge, reg0, 1),

		(try_begin),
			(lt, ":relation_with_player", 0),
			(assign, ":player_relation_change", 2),
		(else_try),
			(lt, ":relation_with_player", 10),
			(assign, ":player_relation_change", 2),
		(else_try),
			(lt, ":relation_with_player", 20),
			(store_random_in_range, ":player_relation_change", 0, 2),
		(else_try),
			(lt, ":relation_with_player", 40),
			(store_random_in_range, ":player_relation_change", -1, 2),
			(val_max, ":player_relation_change", 0),
		(try_end),
		(gt, ":player_relation_change", 0),
		(call_script, "script_change_player_relation_with_troop", ":npc", ":player_relation_change"),
	(else_try),
		#Lords friendly and/or related to the troop
		(call_script, "script_troop_get_relation_with_troop", ":npc", "$g_talk_troop"),
		(assign, ":relation", reg0),
		(try_begin),
			(ge, ":relation", 20),
			(store_random_in_range, reg0, 0, 2),
			(this_or_next|ge, ":relation", ":relation_with_player"),
				(eq, reg0, 1),
			(assign, ":player_relation_change", 1),
		(try_end),
		(try_begin),
			(ge, ":relation", 0),
			(troop_slot_eq, ":npc", slot_troop_betrothed, "$g_talk_troop"),
			(val_add, ":player_relation_change", 1),
		(else_try),
			(ge, ":relation", 0),
			(this_or_next|troop_slot_eq, ":npc", slot_troop_occupation, slto_kingdom_lady),
				(is_between, ":npc", kingdom_ladies_begin, kingdom_ladies_end),
			(call_script, "script_troop_get_family_relation_to_troop", ":npc", "$g_talk_troop"),
			(ge, reg0, 4),
			(store_random_in_range, reg0, 0, 2),
			(this_or_next|troop_slot_eq, ":npc", slot_lord_reputation_type, lrep_conventional),
			   (eq, reg0, 1),
			(val_add, ":player_relation_change", 1),
		(try_end),
		(gt, ":player_relation_change", 0),
		(call_script, "script_change_player_relation_with_troop", ":npc", ":player_relation_change"),
	(try_end),
(try_end),
##diplomacy end+
(call_script, "script_change_player_relation_with_faction_ex", "$g_talk_troop_faction", 2)]],

[anyone,"freed_lord_answer_2", [],
"Thank you, good {sire/lady}. I never forget someone who's done me a good turn.", "close_window",
[
(assign, "$g_leave_encounter", 1), #Not sure why this is necessary
]],

##  [anyone|plyr,"freed_lord_answer", [(neg|faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "$g_talk_troop"), #he is not a faction leader!
##                                     (call_script, "script_get_number_of_hero_centers", "$g_talk_troop"),
##                                     (eq, reg0, 0), #he has no castles or towns
##                                     (hero_can_join)],
##   "I need capable men like you. Would you like to join me?", "knight_offer_join",
##   []],
##
##  [anyone,"freed_lord_answer_3", [(store_random_in_range, ":random_no",0,2),(eq, ":random_no", 0)],
##   "Alright I will join you.", "close_window",
##   [
###     (troop_set_slot, "$g_talk_troop", slot_troop_is_player_companion, 1),
##     (troop_set_slot, "$g_talk_troop", slot_troop_occupation, slto_player_companion),
##     (store_conversation_troop, ":cur_troop_id"),
##     (party_add_members, "p_main_party", ":cur_troop_id", 1),#join hero
##   ]],
##
##  [anyone,"freed_lord_answer_3", [],
##   "No, I want to go on my own.", "close_window", []],


#Troop commentary changes begin
[anyone,"start", [(eq,"$talk_context",tc_hero_defeated),
              (troop_slot_eq,"$g_talk_troop",slot_troop_occupation, slto_kingdom_hero)],
"{s43}", "defeat_lord_answer",
[(troop_set_slot, "$g_talk_troop", slot_troop_leaded_party, -1),
(call_script, "script_lord_comment_to_s43", "$g_talk_troop", "str_surrender_offer_default"),
]],

[anyone|plyr,"defeat_lord_answer", [],
"You are my prisoner now.", "defeat_lord_answer_1",
[
#(troop_set_slot, "$g_talk_troop", slot_troop_is_prisoner, 1),
(troop_set_slot, "$g_talk_troop", slot_troop_prisoner_of_party, "p_main_party"),
(party_force_add_prisoners, "p_main_party", "$g_talk_troop", 1),#take prisoner
(call_script, "script_change_player_relation_with_troop", "$g_talk_troop", -3),
(call_script, "script_change_player_relation_with_faction_ex", "$g_talk_troop_faction", -3),
(call_script, "script_event_hero_taken_prisoner_by_player", "$g_talk_troop"),
(call_script, "script_add_log_entry", logent_lord_captured_by_player, "trp_player",  -1, "$g_talk_troop", "$g_talk_troop_faction"),
]],

[anyone,"defeat_lord_answer_1", [],
"I am at your mercy.", "close_window", []],

[anyone|plyr,"defeat_lord_answer", [],
"You have fought well. You are free to go.", "defeat_lord_answer_2",
[(call_script, "script_change_player_relation_with_troop", "$g_talk_troop", 5),
(call_script, "script_change_player_honor", 3),
(call_script, "script_add_log_entry", logent_lord_defeated_but_let_go_by_player, "trp_player",  -1, "$g_talk_troop", "$g_talk_troop_faction")]],

[anyone,"defeat_lord_answer_2", [],
"{s43}", "close_window", [
(call_script, "script_lord_comment_to_s43", "$g_talk_troop", "str_prisoner_released_default"),
 ]],
#Troop commentary changes end

#Troop commentaries changes begin
[anyone,"start", [(eq,"$talk_context",tc_party_encounter),
              (troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_hero),
              (lt,"$g_encountered_party_relation",0),
              (encountered_party_is_attacker),
              (eq, "$g_talk_troop_met", 1),                    ],
"{playername}!", "party_encounter_lord_hostile_attacker", [
              ]],

[anyone,"start", [(eq,"$talk_context",tc_party_encounter),
              (troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_hero),
              (lt,"$g_encountered_party_relation",0),
              (encountered_party_is_attacker),                ],
"Halt!", "party_encounter_lord_hostile_attacker", [
              ]],

[anyone,"party_encounter_lord_hostile_attacker", [
(gt, "$g_comment_found", 0),
              ],
"{s42}", "party_encounter_lord_hostile_attacker", [
                   (try_begin),
                     (neq, "$log_comment_relation_change", 0),
                     (call_script, "script_change_player_relation_with_troop", "$g_talk_troop", "$log_comment_relation_change"),
                   (try_end),
                   (assign, "$g_comment_found", 0),
              ]],

#Troop commentaries changes end
[anyone,"party_encounter_lord_hostile_attacker", [
              ],
"{s43}", "party_encounter_lord_hostile_attacker_2",
[
(call_script, "script_lord_comment_to_s43", "$g_talk_troop", "str_surrender_demand_default"),
 ]],

[anyone|plyr,"party_encounter_lord_hostile_attacker_2", [
              ],
"We will fight you to the end!", "close_window", []],

[anyone|plyr,"party_encounter_lord_hostile_attacker_2", [
##diplomacy start+ Support promoted ladies
#(is_between, "$g_talk_troop", active_npcs_begin, active_npcs_end),
(is_between, "$g_talk_troop", heroes_begin, heroes_end),
##diplomacy end+
(neg|faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "$g_talk_troop"),
              ],
"Stay your hand! There is something I must tell you in private.", "lord_recruit_1_relation", []],

[anyone|plyr,"party_encounter_lord_hostile_attacker_2", [
              ],
"Is there no way to avoid this battle? I don't want to fight with you.", "party_encounter_offer_dont_fight", []],

#TODO: Add a verification step.
[anyone|plyr,"party_encounter_lord_hostile_attacker_2", [
              ],
"Don't attack! We surrender.", "close_window", [(assign,"$g_player_surrenders",1)]],

[anyone, "party_encounter_offer_dont_fight", [(gt, "$g_talk_troop_effective_relation", 30),
#TODO: Add adition conditions, lord personalities, battle advantage, etc...
              ],
"I owe you a favor, don't I. Well... all right then. I will let you go just this once.", "close_window", [
(call_script, "script_change_player_relation_with_troop","$g_talk_troop", -7),
(store_current_hours,":protected_until"),
(val_add, ":protected_until", 72),
(party_set_slot,"$g_encountered_party",slot_party_ignore_player_until,":protected_until"),
(party_ignore_player, "$g_encountered_party", 72),
(assign, "$g_leave_encounter",1)
 ]],

##diplomacy begin
[anyone, "party_encounter_offer_dont_fight", [
(troop_get_slot,":reputation", "$g_talk_troop", slot_lord_reputation_type),
(neq, ":reputation", lrep_upstanding),
(neq, ":reputation", lrep_debauched),
##diplomacy start+
(neq, ":reputation", lrep_moralist),
#Martial does not accept when marshall
(this_or_next|neq, ":reputation", lrep_martial),
   (neg|faction_slot_eq, "$g_talk_troop_faction", slot_faction_marshall, "$g_talk_troop"),

#Leaders of kingdoms never accept this (for lieges this shouldn't appear anyway)
(this_or_next|neg|is_between, "$g_talk_troop_faction", kingdoms_begin, kingdoms_end),
   (neg|faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "$g_talk_troop"),

(assign, ":can_intrigue", 0),
(try_begin),
   (neg|is_between, "$g_talk_troop_faction", kingdoms_begin, kingdoms_end),
   (assign, ":can_intrigue", 1),
(else_try),
   (call_script, "script_cf_troop_can_intrigue", "$g_talk_troop", 1),
   (assign, ":can_intrigue", 1),
(try_end),
(eq, ":can_intrigue", 1),
##diplomacy end+

(gt, "$g_talk_troop_effective_relation", 0),
(store_mul, ":rel_sq", "$g_talk_troop_effective_relation", "$g_talk_troop_effective_relation"),
(val_mul, ":rel_sq", 5),
(store_random_in_range, ":random", 5000, 10000),
(store_sub, ":amount", ":random", ":rel_sq"),
(val_max, ":amount", 0),
##diplomacy start+ Alternate calculation, since the player is effectively "ransoming himself"
(call_script, "script_calculate_ransom_amount_for_troop", "trp_player"),
(game_get_reduce_campaign_ai, ":reduce_campaign_ai"),
(try_begin),
   (le, ":reduce_campaign_ai", 0),#Hard
   (val_mul, reg0, 3),
   (val_div, reg0, 4),
(else_try),
   (le, ":reduce_campaign_ai", 1),#Medium
   (val_div, reg0, 2),
(else_try),
   (ge, ":reduce_campaign_ai", 2),#Easy
   (val_div, reg0, 4),
(try_end),
(val_max, ":amount", reg0),
##diplomacy end+

(party_get_num_companion_stacks, ":num_stacks", "p_main_party"),
(try_for_range, ":i_stack", 0, ":num_stacks"),
(party_stack_get_size, ":stack_size", "p_main_party", ":i_stack"),
(val_mul, ":stack_size", 12),
(val_add, ":amount", ":stack_size"),
(try_end),

(val_div, ":amount", 10),
(val_mul, ":amount", 10),
(assign, reg0, ":amount"),
],
#SB : remove "cash"
"If you pay me {reg0} denars I will let you go, recreant.", "party_encounter_offer_money", [
 ]],

[anyone|plyr,"party_encounter_offer_money", [
(store_troop_gold, ":cur_gold", "trp_player"),
(gt, ":cur_gold", reg0),
],
"Don't attack! I pay.", "close_window", [
##nested diplomacy start+ actually give the gold to the enemy lord
(troop_remove_gold, "trp_player", reg0),
(try_begin),
   (troop_is_hero, "$g_talk_troop"),
   (call_script, "script_dplmc_distribute_gold_to_lord_and_holdings", reg0, "$g_talk_troop"),
(try_end),
##nested diplomacy end+
(call_script, "script_change_player_relation_with_troop","$g_talk_troop", -2),
(call_script, "script_change_player_honor", -2),
(store_current_hours,":protected_until"),
(val_add, ":protected_until",  72),
(party_set_slot,"$g_encountered_party",slot_party_ignore_player_until,":protected_until"),
(party_ignore_player, "$g_encountered_party",  72),
(assign, "$g_leave_encounter",1)]
],

[anyone|plyr,"party_encounter_offer_money", [
              ],
"Let's fight!", "party_encounter_offer_money_no",
[]
],

[anyone, "party_encounter_offer_money_no", [
(call_script, "script_lord_comment_to_s43", "$g_talk_troop", "str_lord_declines_negotiation_offer_default"),
              ],
"{s43}", "close_window", []],
##diplomacy end

[anyone, "party_encounter_offer_dont_fight", [
(call_script, "script_lord_comment_to_s43", "$g_talk_troop", "str_lord_declines_negotiation_offer_default"),
              ],
"{s43}", "close_window", []],

##  [anyone,"start", [(eq,"$talk_context",tc_party_encounter),
##                    (troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_hero),
##                    (lt,"$g_encountered_party_relation",0),
##                    (neg|encountered_party_is_attacker),
##                    ],
##   "What do you want?", "party_encounter_lord_hostile_defender",
##   []],


#  [anyone|plyr,"party_encounter_lord_hostile_defender", [],
#   "Nothing. We'll leave you in peace.", "close_window", [(assign, "$g_leave_encounter",1)]],




#Betrayal texts should go here


##  [anyone ,"start", [(troop_slot_eq,"$g_talk_troop",slot_troop_occupation, slto_kingdom_hero),
##                     (troop_slot_eq,"$g_talk_troop",slot_troop_last_quest_betrayed, 1),
##                     (troop_slot_eq,"$g_talk_troop",slot_troop_last_quest, "qst_deliver_message_to_lover"),
##                     (le,"$talk_context",tc_siege_commander),
##                     ],
##   "I had trusted that letter to you, thinking you were a {man/lady} of honor, and you handed it directly to the girl's father.\
## I should have known you were not to be trusted. Anyway, I have learned my lesson and I won't make that mistake again.", "close_window",
##   [(call_script, "script_clear_last_quest", "$g_talk_troop")]],


#Lord to be recruited

[anyone ,"start",
[
##diplomacy start+ Handle player is co-ruler of kingdom
(call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", "$g_talk_troop_faction"),
(this_or_next|ge, reg0, DPLMC_FACTION_STANDING_LEADER_SPOUSE),
##diplomacy end+
(eq, "$g_talk_troop_faction", "fac_player_supporters_faction"),
(is_between, "$g_talk_troop", active_npcs_begin, active_npcs_end),
(troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_inactive),
(neq, "$g_talk_troop", "$g_player_minister"),
(troop_get_slot, ":original_faction", "$g_talk_troop", slot_troop_original_faction),
(faction_get_slot, ":original_faction_leader", ":original_faction", slot_faction_leader),
(str_store_troop_name, s10, ":original_faction_leader"),
(str_store_string, s9, "str_lord_indicted_dialog_approach"),
],
#Greetings, {my lord/my lady}. You may have heard of my ill treatment at the hands of {s10}. You have a reputation as one who treats {his/her} vassals well, and if you will have me, I would be honored to pledge myself as your vassal.
"{s9}", "lord_requests_recruitment", []],

[anyone|plyr ,"lord_requests_recruitment",
[
(str_store_string, s9, "str_lord_indicted_dialog_approach_yes"),
], #And I would be honored to accept your pledge.
"{s9}", "close_window", [
(troop_set_slot, "$g_talk_troop", slot_troop_occupation, slto_kingdom_hero),
##diplomacy start+ write political events to log
(str_store_troop_name, s1, "$g_talk_troop"),
(str_store_faction_name, s2, "$g_talk_troop_faction"),
#SB : colors, deferred title
(troop_get_slot, ":old_faction", "$g_talk_troop", slot_troop_original_faction),
(faction_get_color, ":color", ":old_faction"),
(display_log_message, "@{s1} has been accepted as a vassal of {s2}.", ":color"),
(call_script, "script_troop_set_title_according_to_faction", "$g_talk_troop", "$g_talk_troop_faction"),
(assign, "$g_leave_encounter", 1),
##diplomacy end+
#This should be enough, scriptwise, but if there is a string somewhere to confirm the pledge, I should link
]],

[anyone|plyr ,"lord_requests_recruitment",
[
(str_store_string, s9, "str_lord_indicted_dialog_approach_no"),
], #I'm sorry. Your service is not required.
"{s9}", "lord_requests_recruitment_refuse", []],

[anyone ,"lord_requests_recruitment_refuse",
[
(str_store_string, s9, "str_lord_indicted_dialog_rejected"),
], #Indeed? Well, perhaps your reputation is misleading. Good day, {my lord/my lady} -- I go to see if another ruler in Calradia is more appreciative of my talents.
"{s9}", "close_window", [
#Seek alternative liege
(assign, "$g_leave_encounter", 1),
##diplomacy start+ Try to avoid getting stuck with a bad occupation value
(try_begin),
  (troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_inactive),
  (troop_set_slot, "$g_talk_troop", slot_troop_occupation, slto_kingdom_hero),
(try_end),
# Note: similar fix in Warband 1.158:
#  (troop_set_slot, "$g_talk_troop", slot_troop_occupation, slto_kingdom_hero),
##diplomacy end+
(call_script, "script_troop_change_relation_with_troop", "$g_talk_troop", "trp_player", -10),
(call_script, "script_lord_find_alternative_faction", "$g_talk_troop"),
(assign, ":new_faction", reg0),

(try_begin),
  #SB : reject defecting to player faction from player faction
  (eq, ":new_faction", "fac_player_supporters_faction"),
  (str_store_string, s9, "@I see. Perhaps circumstances will change a few days from now, but until then I appreciate your generous hospitality."),
  #put back in inactive pool, add counter to slot_troop_intrigue_impatience/slot_troop_controversy?
  (troop_set_slot, "$g_talk_troop", slot_troop_occupation, slto_inactive),
(else_try),
  (is_between, ":new_faction", npc_kingdoms_begin, kingdoms_end),

  (troop_get_slot, ":old_faction", "$g_talk_troop", slot_troop_original_faction),
  (str_store_troop_name, s1, "$g_talk_troop"),
  (str_store_faction_name, s2, ":new_faction"),
  (str_store_faction_name, s3, ":old_faction"),

  (call_script, "script_change_troop_faction", "$g_talk_troop", ":new_faction"),

##diplomacy start+
##OLD:
#(troop_get_type, reg4, "$g_talk_troop"),
##NEW:
  (call_script, "script_dplmc_store_troop_is_female_reg", "$g_talk_troop", 4), #SB : replace reg65
##write political events to log
#SB : factionalize colors
  (faction_get_color, ":color", ":new_faction"),
  (display_log_message, "str_lord_defects_ordinary", ":color"),#change display_message to display_log_message
##diplomacy end+
(else_try),
  (call_script, "script_change_troop_faction", "$g_talk_troop", "fac_outlaws"),
(try_end),
]],





#Rebellion changes begin
[anyone ,"start",
[
(is_between, "$g_talk_troop", pretenders_begin, pretenders_end),
(eq, "$g_talk_troop", "$supported_pretender"),
],
"I await your counsel, {playername}.", "supported_pretender_talk", [
]],

[anyone ,"start",
[
(is_between, "$g_talk_troop", pretenders_begin, pretenders_end),
(neg|troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_hero),
(assign, "$pretender_told_story", 0),
(eq, "$g_talk_troop_met", 0),
(neg|faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "$g_talk_troop"),
],
"Do I know you?.", "pretender_intro_1", []],
[anyone|plyr ,"pretender_intro_1", [], "My name is {playername}. At your service.", "pretender_intro_2", []],
[anyone|plyr ,"pretender_intro_1", [
#SB : add some useless flavour intro
(this_or_next|neg|is_between, "$player_honor", -10, 10),
(troop_slot_ge, "trp_player", slot_troop_renown, 150),
], "I am {playername}. Perhaps you have heard of my exploits.", "pretender_intro_2", [
(try_begin), #first impression
  (eq, "$g_talk_troop_met", 0),
  (call_script, "script_troop_change_relation_with_troop", "trp_player", "$g_talk_troop", 1),
(try_end),
]],

[anyone ,"pretender_intro_2", [(troop_get_slot, ":rebellion_string", "$g_talk_troop", slot_troop_original_faction),
                           (val_sub, ":rebellion_string", "fac_kingdom_1"),
                           (val_add, ":rebellion_string", "str_swadian_rebellion_pretender_intro"),
                           (str_store_string, 48, ":rebellion_string"),],
"{s48}", "pretender_intro_3", []],

[anyone|plyr ,"pretender_intro_3", [(troop_get_slot, ":original_faction", "$g_talk_troop", slot_troop_original_faction),
                                (str_store_faction_name, s12, ":original_faction"),
                                (faction_get_slot, ":original_ruler", ":original_faction", slot_faction_leader),
                                (str_store_troop_name, s11, ":original_ruler"),],
"I thought {s12} was ruled by {s11}?", "pretender_rebellion_cause_1", [
(troop_set_slot, "$g_talk_troop", slot_troop_discussed_rebellion, 1)
]],

[anyone ,"start",
[
(is_between, "$g_talk_troop", pretenders_begin, pretenders_end),
(neg|faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "$g_talk_troop"),
(neg|troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_hero),
##diplomacy start+ Detect completed quest
(neg|troop_slot_eq, "$g_talk_troop", slot_troop_playerparty_history, dplmc_pp_history_granted_fief),
(neg|troop_slot_eq, "$g_talk_troop", slot_troop_playerparty_history, dplmc_pp_history_lord_rejoined),
##diplomacy end+
],
"Greetings, {playername}", "pretender_start", [(assign, "$pretender_told_story", 0)]],

[anyone|plyr ,"pretender_start",
[
(troop_slot_eq, "$g_talk_troop", slot_troop_discussed_rebellion, 1),
(eq, "$pretender_told_story", 0)
],
"What was your story again, {reg65?my lady:sir}?", "pretender_rebellion_cause_prelim", [
]],

[anyone,"pretender_rebellion_cause_prelim", [],
"I shall tell you.", "pretender_rebellion_cause_1", [
               ]],


[anyone,"pretender_rebellion_cause_1", [],
"{s48}", "pretender_rebellion_cause_2", [
               (assign, "$pretender_told_story", 1),
               (troop_get_slot, ":rebellion_string", "$g_talk_troop", slot_troop_original_faction),
               (val_sub, ":rebellion_string", "fac_kingdom_1"),
               (val_add, ":rebellion_string", "str_swadian_rebellion_pretender_story_1"),
               (str_store_string, 48, ":rebellion_string"),
               ]],

[anyone,"pretender_rebellion_cause_2", [],
"{s48}", "pretender_rebellion_cause_3", [
               (troop_get_slot, ":rebellion_string", "$g_talk_troop", slot_troop_original_faction),
               (val_sub, ":rebellion_string", "fac_kingdom_1"),
               (val_add, ":rebellion_string", "str_swadian_rebellion_pretender_story_2"),
               (str_store_string, 48, ":rebellion_string"),
               ]],

[anyone,"pretender_rebellion_cause_3", [],
"{s48}", "pretender_start", [
               (troop_get_slot, ":rebellion_string", "$g_talk_troop", slot_troop_original_faction),
               (val_sub, ":rebellion_string", "fac_kingdom_1"),
               (val_add, ":rebellion_string", "str_swadian_rebellion_pretender_story_3"),
               (str_store_string, 48, ":rebellion_string"),
               ]],

[anyone|plyr ,"pretender_start", [
              (troop_slot_eq, "$g_talk_troop", slot_troop_discussed_rebellion, 1),
               ],
"I want to take up your cause and help you reclaim your throne!", "pretender_discuss_rebellion_1", [
]],

[anyone|plyr ,"pretender_start", [
               ],
"I must leave now.", "pretender_end", [
]],


[anyone ,"pretender_discuss_rebellion_1", [(troop_get_slot, ":original_faction", "$g_talk_troop", slot_troop_original_faction),
                                       (faction_get_slot, ":original_ruler", ":original_faction", slot_faction_leader),
##diplomacy start+ Change "lords" to {s0}
                                       (call_script, "script_dplmc_print_cultural_word_to_sreg", "$g_talk_troop", DPLMC_CULTURAL_TERM_LORD_PLURAL, s0),
                                       (str_store_troop_name, s11, ":original_ruler")],
"Are you sure you will be up to the task, {playername}? Reclaiming my throne will be no simple matter.\
The {s0} of our realm have all sworn oaths of homage to {s11}.\
Such oaths to a usurper are of course invalid, and we can expect some of the {s0} to side with us, but it will be a very tough and challenging struggle ahead.", "pretender_discuss_rebellion_2a", []],
##diplomacy end+

[anyone ,"pretender_discuss_rebellion_2a",[
                           (troop_get_slot, ":original_faction", "$g_talk_troop", slot_troop_original_faction),
                                      (faction_get_slot, ":original_ruler", ":original_faction", slot_faction_leader),
                           (str_store_troop_name, s12, ":original_ruler"),
                                      (call_script, "script_evaluate_realm_stability", ":original_faction"),
                           (assign, ":instability_index", reg0),
                           (val_add, ":instability_index", reg0),
                           (val_add, ":instability_index", reg1),
                           (try_begin),
                              (gt, ":instability_index", 60),
                              (str_store_string, s11, "str_one_thing_in_our_favor_is_that_s12s_grip_is_very_shaky_he_rules_over_a_labyrinth_of_rivalries_and_grudges_lords_often_fail_to_cooperate_and_many_would_happily_seek_a_better_liege"),
                           (else_try),
                              (is_between, ":instability_index", 40, 60),
                              (str_store_string, s11, "str_thankfully_s12s_grip_is_fairly_shaky_many_lords_do_not_cooperate_with_each_other_and_some_might_be_tempted_to_seek_a_better_liege"),
                           (else_try),
                              (is_between, ":instability_index", 20, 40),
                              (str_store_string, s11, "str_unfortunately_s12s_grip_is_fairly_strong_until_we_can_shake_it_we_may_have_to_look_long_and_hard_for_allies"),
                           (else_try),
                              (lt, ":instability_index", 20),
                              (str_store_string, s11, "str_unfortunately_s12s_grip_is_very_strong_unless_we_can_loosen_it_it_may_be_difficult_to_find_allies"),
                           (try_end),
                            ],
"{s11}", "pretender_discuss_rebellion_2", []],



[anyone|plyr ,"pretender_discuss_rebellion_2", [],  "I am ready for this struggle.", "pretender_discuss_rebellion_3", []],
[anyone|plyr ,"pretender_discuss_rebellion_2", [],  "You are right. Perhaps, I should think about this some more.", "pretender_end", []],


[anyone ,"pretender_discuss_rebellion_3", [(this_or_next|neg|faction_slot_eq, "fac_player_supporters_faction", slot_faction_state, sfs_active),
                            (neg|faction_slot_eq, "fac_player_supporters_faction", slot_faction_leader, "trp_player"),
                            (neg|troop_slot_ge, "trp_player",slot_troop_renown, 200),
                                       (troop_get_slot, ":original_faction", "$g_talk_troop", slot_troop_original_faction),
                                       (faction_get_slot, ":original_ruler", ":original_faction", slot_faction_leader),
                                       (str_store_troop_name, s11, ":original_ruler")],
"I have no doubt that your support for my cause is heartfelt, {playername}, and I am grateful to you for it.\
 But I don't think we have much of a chance of success.\
 If you can gain renown in the battlefield and make a name for yourself as a great commander, then our friends would not hesitate to join our cause,\
 and our enemies would be wary to take up arms against us. When that time comes, I will come with you gladly.\
 But until that time, it will be wiser not to openly challenge the usurper, {s11}.", "close_window", []],
#SB : challange -> challenge
[anyone ,"pretender_discuss_rebellion_3", [(this_or_next|neg|faction_slot_eq, "fac_player_supporters_faction", slot_faction_state, sfs_active),
                            (neg|faction_slot_eq, "fac_player_supporters_faction", slot_faction_leader, "trp_player"),
                            (gt, "$supported_pretender", 0),
                                       (str_store_troop_name, s17, "$supported_pretender")],
"Haven't you already taken up the cause of {s17}? You must have a very strong sense of justice, indeed. But no, thank you. I will not be part of your game.", "close_window", []],

[anyone ,"pretender_discuss_rebellion_3", [(this_or_next|neg|faction_slot_eq, "fac_player_supporters_faction", slot_faction_state, sfs_active),
                            (neg|faction_slot_eq, "fac_player_supporters_faction", slot_faction_leader, "trp_player"),
                            (gt, "$players_kingdom", 0),
                                       (neq, "$players_kingdom", "fac_player_supporters_faction"),
                                       (neq, "$players_kingdom", "fac_player_faction"),
                                       (troop_get_slot, ":original_faction", "$g_talk_troop", slot_troop_original_faction),
                                       (neq, "$players_kingdom", ":original_faction"),
                                       (eq, "$player_has_homage", 1),

                                       (str_store_faction_name, s16, "$players_kingdom"),
                                       (faction_get_slot, ":player_ruler", "$players_kingdom", slot_faction_leader),
                                       (str_store_troop_name, s15, ":player_ruler"),
                                       (str_store_faction_name, s17, ":original_faction"),
                                       ],
"{playername}, you are already oath-bound to serve {s15}.\
 As such, I cannot allow you to take up my cause, and let my enemies claim that I am but a mere puppet of {s16}.\
 No, if I am to have the throne of {s17}, I must do it due to the righteousness of my cause and the support of my subjects alone.\
 If you want to help me, you must first free yourself of your oath to {s15}.", "close_window", []],

[anyone ,"pretender_discuss_rebellion_3", [(faction_slot_eq, "fac_player_supporters_faction", slot_faction_state, sfs_active),
                            (faction_slot_eq, "fac_player_supporters_faction", slot_faction_leader, "trp_player")],
"You are a monarch in your own right, {sir/my lady}. If you were to back me, I would be merely your puppet.", "close_window", []],


[anyone ,"pretender_discuss_rebellion_3", [(troop_get_slot, ":original_faction", "$g_talk_troop", slot_troop_original_faction),
                                       (str_store_faction_name, s12, ":original_faction"),
                                       (faction_get_slot, ":original_ruler", ":original_faction", slot_faction_leader),
                                       (str_store_troop_name, s11, ":original_ruler"),
##diplomacy start+ replace "his" with "{reg0?her:his}"
(call_script, "script_dplmc_store_troop_is_female", ":original_ruler"),
],
"You are a capable warrior, {playername}, and I am sure with your renown as a commander, and my righteous cause, the nobles and the good people of {s12} will flock to our support.\
 The time is ripe for us to act! I will come with you, and together, we will topple the usurper {s11} and take the throne from {reg0?her:his} bloodied hands.\
 But first, you must give me your oath of homage and accept me as your liege {reg65?lady:lord}.", "pretender_rebellion_ready", []],
##diplomacy end+

[anyone|plyr ,"pretender_rebellion_ready", [
			##diplomacy start+
            ##OLD:   (troop_get_type, reg3, "$g_talk_troop"),
			(assign, reg3, 0),
			(try_begin),
				(call_script, "script_cf_dplmc_troop_is_female", "$g_talk_troop"),
				(assign, reg3, 1),
			(try_end),
			(assign, reg65, reg3),
			##diplomacy end+
               ],
"I am ready to pledge myself to your cause, {reg3?my lady:sir}.", "lord_give_oath_2", [
]],

[anyone|plyr ,"pretender_rebellion_ready", [
               ],
"Let us bide our time a little longer.", "pretender_end", [
]],

[anyone ,"lord_give_conclude_2", [(is_between, "$g_talk_troop", pretenders_begin, pretenders_end),
                     (neg|troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_hero),
               ],
"Forward, then! Our first task is to take hold of a fortress and persuade other lords to join us. You lead the way!", "close_window", [

      (call_script, "script_change_player_relation_with_troop", "$g_talk_troop", 50), #should be higher
      (faction_set_slot, "$g_talk_troop_faction", slot_faction_state, sfs_active),
##            (faction_set_slot, "$g_talk_troop_faction", slot_faction_ai_state, sfai_nascent_rebellion),

      (party_force_add_members, "p_main_party", "$supported_pretender", 1),
      (troop_set_slot, "$supported_pretender", slot_troop_cur_center, 0),
      
      (str_store_troop_name_link, s6, "$supported_pretender"),
      (display_message, "@{s6} has joined your party."),

#            (faction_get_slot, ":location", "$g_talk_troop_faction", slot_faction_inactive_leader_location),
#            (faction_set_slot, "$g_talk_troop_faction", slot_faction_inactive_leader_location, 0),

#            (call_script, "script_create_kingdom_hero_party", "$g_talk_troop", ":location"),
#            (party_set_slot, "$pout_party", slot_party_commander_party, "p_main_party"),
#            (call_script, "script_party_decide_next_ai_state_under_command", "$pout_party"),
#            (store_current_hours, ":follow_until_time"),
#            (store_add, ":follow_period", 60, "$g_talk_troop_relation"),
#            (val_div, ":follow_period", 2),
#            (val_add, ":follow_until_time", ":follow_period"),
#            (party_set_slot, "$pout_party", slot_party_follow_player_until_time, ":follow_until_time"),
#            (party_set_slot, "$pout_party", slot_party_following_player, 1),




#            (assign, ":rebellion_target", "$supported_pretender_old_faction"),
      (store_relation, ":reln", "$supported_pretender_old_faction", "fac_player_supporters_faction"),
      (val_min, ":reln", -50),
      (call_script, "script_set_player_relation_with_faction", "$supported_pretender_old_faction", ":reln"),
      (faction_get_slot, ":adjective_string", "$supported_pretender_old_faction", slot_faction_adjective),
      (str_store_string, s1, ":adjective_string"),

      (faction_set_name, "fac_player_supporters_faction", "@{s1} Rebels"),
      # (faction_set_color, "fac_player_supporters_faction", 0xFF0000),
      (faction_get_color, ":color", "$supported_pretender_old_faction"), #SB : change color
      (store_sub, ":color", 0xFFFFFF, ":color"),#we get the opposite color
      (faction_set_color, "fac_player_supporters_faction", ":color"),

## Let us handle relation with other kingdoms later.
##            (try_for_range, ":existing_kingdom", kingdoms_begin, kingdoms_end),
##                (store_relation, ":relation", ":existing_kingdom", ":rebellion_target"),
##                (store_sub, ":relation_w_rebels", 0, ":relation"),
##                (store_relation, ":player_relation", ":existing_kingdom", "fac_player_supporters_faction"),
##                (val_div, ":player_relation", 3),
##                (val_add, ":relation_w_rebels", ":player_relation"),
##				  #WARNING: Never use set_relation!
##                (set_relation, ":existing_kingdom", "$g_talk_troop_faction", ":relation_w_rebels"),
##            (try_end),

# we have alrady joined.
##            (str_store_faction_name, 4, "$g_talk_troop_faction"),
##            (display_message, "@Player joins {s4}"),
##            (call_script, "script_player_join_faction", "$g_talk_troop_faction"),
      (call_script, "script_update_all_notes"),
      ##diplomacy start+
      ##Save personal items of pretenders
      (call_script, "script_dplmc_save_civilian_clothing", "$supported_pretender"),
      (troop_set_auto_equip, "$supported_pretender",0),
      (troop_equip_items, "$g_talk_troop"), #SB : diplomacy suggestion: claimants
      ##diplomacy end+
      ]],





[anyone ,"pretender_end", [
               ],
"Farewell for now, then.", "close_window", [
]],



# Events....
# Choose friend.
#Post 0907 changes begin
[anyone ,"start", [(troop_slot_eq,"$g_talk_troop",slot_troop_occupation, slto_kingdom_hero),
               (neq, "$g_talk_troop_met", 0),
               (gt, "$g_time_since_last_talk", 24),
               (gt, "$g_talk_troop_relation", -10),
               (store_random_in_range, ":random_num", 0, 100),
               (lt, ":random_num", 30),
               (eq,"$talk_context",tc_town_talk),
               (call_script, "script_cf_troop_get_random_enemy_troop_with_occupation", "$g_talk_troop", slto_kingdom_hero),
               (assign, ":other_lord",reg0),
               (troop_get_slot, ":other_lord_relation", ":other_lord", slot_troop_player_relation),
               (ge, ":other_lord_relation", 20),
               (str_store_troop_name, s6, ":other_lord"),
               (assign, "$temp", ":other_lord"),
##diplomacy start+ replace "man" with "{reg0?woman:man}" and "him" with "{reg0?her:him}"
(call_script, "script_dplmc_store_troop_is_female_reg", ":other_lord", 4), #SB : reg4, not reg0
               ],
"I heard that you have befriended that {s43} called {s6}.\
 Believe me, you can't trust that {reg4?woman:man}.\
 You should end your dealings with {reg4?her:him}.", "lord_event_choose_friend", [
##diplomacy end+
(call_script, "script_lord_comment_to_s43", "$g_talk_troop", "str_lord_insult_default"),

]],

[anyone|plyr ,"lord_event_choose_friend", [],  "I assure you, {s65}, I am no friend of {s6}.", "lord_event_choose_friend_renounce", [
(call_script, "script_change_player_relation_with_troop","$g_talk_troop",5),
(call_script, "script_change_player_relation_with_troop","$temp",-10),
]],

[anyone ,"lord_event_choose_friend_renounce", [],  "Glad news, {playername}. I would fear for your safety otherwise.\
If you do encounter {s6}, be on your guard and don't believe a word.", "lord_pretalk", []],

[anyone|plyr ,"lord_event_choose_friend", [
##diplomacy start+ replace "man" with "{reg0?woman:man}" and "him" with "{reg0?her:him}"
(call_script, "script_dplmc_store_troop_is_female_reg", "$temp", 4),  #SB : reg4, not reg0
],  "{s6} is an honourable {reg4?woman:man}, you've no right to speak of {reg4?her:him} thus.", "lord_event_choose_friend_defend", [
##diplomacy end+
(call_script, "script_change_player_relation_with_troop","$g_talk_troop",-10),
(call_script, "script_change_player_relation_with_troop","$temp",5),
]],
[anyone ,"lord_event_choose_friend_defend", [],  "As you like, {playername}.\
A fool you might be, but a loyal fool at the least. {s6}'s loyalty may not be so steadfast, however...", "lord_pretalk", []],
#Post 0907 changes end

[anyone|plyr ,"lord_event_choose_friend", [],  "I don't want to be involved in your quarrel with {s6}.", "lord_event_choose_friend_neutral", [
(call_script, "script_change_player_relation_with_troop","$g_talk_troop",-2),
(call_script, "script_change_player_relation_with_troop","$temp",-3),
]],

[anyone ,"lord_event_choose_friend_neutral", [],  "Hmph. As you wish, {playername}.\
Just remember that a {man/woman} needs friends in this world, and you'll never make any if you never stand with anyone.", "lord_pretalk", []],

#Meeting.
[anyone ,"start", [(troop_slot_eq, "$g_talk_troop",slot_troop_occupation, slto_kingdom_hero),
               ##diplomacy start+ This seemingly redundant condition is for a polygamy implementation
               (this_or_next|troop_slot_eq, "$g_talk_troop", slot_troop_spouse, "trp_player"),
               ##diplomacy end+
               (troop_slot_eq, "trp_player", slot_troop_spouse, "$g_talk_troop"),
          ##diplomacy start+ load relation text into s0
		  (call_script, "script_dplmc_print_player_spouse_says_my_husband_wife_to_s0", "$g_talk_troop", 0),
          ##diplomacy end+
               ],
##diplomacy start+ either gender PC can marry opposite-gender lords
"Yes, {s0}?", "lord_start",#changed "my wife" to {s0}
[]],

#Reversed the order of this condition and the next one.  Otherwise this would never
#occur when the player was the faction leader.
[anyone ,"start", [
	(is_between, "$g_talk_troop", companions_begin, companions_end),
    (troop_slot_eq,"$g_talk_troop",slot_troop_occupation, slto_kingdom_hero),
    (le,"$talk_context",tc_siege_commander),
	##Added extra conditions
	(ge, "$g_talk_troop_relation", 20),
	(neg|troop_slot_eq, "$g_talk_troop", slot_troop_playerparty_history, dplmc_pp_history_nonplayer_entry),
	##Suppress this message sometimes when your companion is your vassal
	(assign, ":stop", 0),
	(try_begin),
		(faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "trp_player"),
		(store_random_in_range, ":rand", 0, 100),
		(this_or_next|ge, ":rand", "$g_talk_troop_relation"),
			(ge, ":rand", 95),#at least 1-in-20 chance of standard message
		(assign, ":stop", 1),
	(try_end),
	(eq, ":stop", 0),
    ],
"It is good to see you, old friend", "lord_start",
[]],

[anyone ,"start", [
	##Add support for player is co-ruler
	(assign, reg0, 0),
	(try_begin),
		(neq, "$g_talk_troop_faction", "fac_player_supporters_faction"),
		(call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", "$g_talk_troop_faction"),
	(try_end),
	(this_or_next|ge, reg0, DPLMC_FACTION_STANDING_LEADER_SPOUSE),
    #(this_or_next|eq, "$g_talk_troop_faction", "fac_player_supporters_faction"),#added # then removed
	(faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "trp_player"),
	(troop_slot_eq,"$g_talk_troop",slot_troop_occupation, slto_kingdom_hero),
    (le,"$talk_context",tc_siege_commander),
               ],
"Yes, {sire/my lady}?", "lord_start",
[]],
##diplomacy end+

[anyone ,"start", [(troop_slot_eq,"$g_talk_troop",slot_troop_occupation, slto_kingdom_hero),
               (check_quest_active, "qst_join_faction"),
               (eq, "$g_invite_faction_lord", "$g_talk_troop"),
          (eq, "$players_kingdom", "fac_player_supporters_faction"),
               ],
#TODO: change conversations according to relation.
"Well, {playername}. I am willing to forgive your impudence in proclaiming yourself {king/queen}, and will welcome you into my realm with full honor, as one of my vassals. Shall we proceed to the oath of allegiance?", "lord_invite_player_monarch_1",
[]],

[anyone|plyr ,"lord_invite_player_monarch_1", [],  "Yes... my lord.", "lord_invite_2",  []],
[anyone|plyr ,"lord_invite_player_monarch_1", [],  "No. That oath sticks in my throat.", "lord_enter_service_reject",  []],



[anyone ,"start", [(troop_slot_eq,"$g_talk_troop",slot_troop_occupation, slto_kingdom_hero),
               (check_quest_active, "qst_join_faction"),
               (eq, "$g_invite_faction_lord", "$g_talk_troop"),
               (try_begin),
                 (gt, "$g_invite_offered_center", 0),
                 (store_faction_of_party, ":offered_center_faction", "$g_invite_offered_center"),
                 (neq, ":offered_center_faction", "$g_talk_troop_faction"),
                 (call_script, "script_get_poorest_village_of_faction", "$g_talk_troop_faction"),
                 (assign, "$g_invite_offered_center", reg0),
               (try_end),
               ],
#TODO: change conversations according to relation.
"{playername}, I've been expecting you. Word has reached my ears of your exploits.\
Why, I keep hearing such tales of prowess and bravery that my mind was quickly made up.\
I knew that I had found someone worthy of becoming my vassal.", "lord_invite_1",
[]],


[anyone|plyr ,"lord_invite_1", [],  "Thank you, {s65}, you honour me with your offer.", "lord_invite_2",  []],
[anyone|plyr ,"lord_invite_1", [],  "It is good to have my true value recognised.", "lord_invite_2",  []],

[anyone ,"lord_invite_2", [],  "Aye. Let us dispense with the formalities, {playername}; are you ready to swear homage to me?", "lord_invite_3",  []],

[anyone|plyr ,"lord_invite_3", [],  "Yes, {s65}.", "lord_give_oath_2",  []],
[anyone|plyr ,"lord_invite_3", [],  "No, {s65}. I cannot serve you right now.", "lord_enter_service_reject",  []],

[anyone ,"start", [(troop_slot_eq,"$g_talk_troop",slot_troop_courtship_state, 2),
          (gt, "$g_talk_troop_relation", 10),
          (gt, "$g_time_since_last_talk", 3),
           ##diplomacy start+ Use script for gender
          #(troop_get_type, ":is_female", "trp_player"),
          (assign, ":is_female", "$character_gender"),
          #male player + female lord
          (assign, ":lord_female", reg65),
          (this_or_next|eq, ":is_female", 1),
              (eq, ":lord_female", 1),
          (this_or_next|troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_hero),#bugfix
              (neg|is_between, "$g_talk_troop", kingdom_ladies_begin, kingdom_ladies_end),#bugfix
          #diplomacy end+
          (troop_slot_eq, "trp_player", slot_troop_spouse, -1),
          (troop_slot_eq, "trp_player", slot_troop_betrothed, -1),
          (troop_slot_eq, "$g_talk_troop", slot_troop_spouse, -1),
          (troop_slot_eq, "$g_talk_troop", slot_troop_betrothed, -1),
          (call_script, "script_npc_decision_checklist_marry_female_pc", "$g_talk_troop"),
          (ge, reg0, 1),
               ],
#diplomacy start+ gender-correct language
"My {lord/lady}, I have been giving much thought to our recent conversation. It is time for me to ask. Would you do me the honor of becoming my {husband/wife}?", "lord_female_pc_marriage_proposal",  [
#diplomacy end+
         ]],

[anyone|plyr ,"lord_female_pc_marriage_proposal", [],  "Yes. I would.", "lord_marriage_proposal_female_pc_next_step",  []],
[anyone|plyr ,"lord_female_pc_marriage_proposal", [],  "Let me think about this some more.", "lord_female_pc_marriage_proposal_postponed",  []],
[anyone|plyr ,"lord_female_pc_marriage_proposal", [],  "No. I have decided that it would not be appropriate", "lord_female_pc_marriage_proposal_rejected",  []],
#diplomacy start+ gender-correct language
[anyone ,"lord_female_pc_marriage_proposal_postponed", [],  "Of course, my {lord/lady}. Take all the time you need.", "lord_start",  []],
#diplomacy end+

#diplomacy start+ gender-correct language
[anyone ,"lord_female_pc_marriage_proposal_rejected", [],  "Do you mean to reject my suit outright, my {lord/lady}?", "lord_female_pc_marriage_proposal_rejected_confirm",  []],
#diplomacy end+

[anyone|plyr ,"lord_female_pc_marriage_proposal_rejected_confirm", [],  "Yes. I do.", "lord_female_pc_marriage_proposal_rejected_confirm_yes",  []],
[anyone|plyr ,"lord_female_pc_marriage_proposal_rejected_confirm", [],  "No, you misunderstand. I just need some more time to think", "lord_female_pc_marriage_proposal_postponed",  []],

[anyone ,"lord_female_pc_marriage_proposal_rejected_confirm_yes", [
(this_or_next|troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_debauched),
(this_or_next|troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_selfrighteous),
(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_quarrelsome),
#diplomacy start+ gender-correct language
],  "Well, in that case, let me tell you something -- with those harsh words, you have removed the scales from my eyes. I would agree that it would not be appropriate for me to marry one such as you. Good day, my {lord/lady}.", "close_window",  [
#diplomacy end+
(call_script, "script_troop_change_relation_with_troop", "$g_talk_troop", "trp_player", -20),
(troop_set_slot, "$g_talk_troop", slot_troop_courtship_state, 4),
(assign, "$g_leave_encounter", 1),
]],

#diplomacy start+ gender-correct language
[anyone ,"lord_female_pc_marriage_proposal_rejected_confirm_yes", [],  "Such is your right, my {lord/lady}. If you ever wished to reconsider, I would be overwhelmed with joy.", "close_window",  [
#diplomacy end+
(call_script, "script_troop_change_relation_with_troop", "$g_talk_troop", "trp_player", -5),
(troop_set_slot, "$g_talk_troop", slot_troop_courtship_state, 4),
(assign, "$g_leave_encounter", 1),
]],


[anyone ,"start", [(troop_slot_eq,"$g_talk_troop",slot_troop_courtship_state, 2),
               (gt, "$g_time_since_last_talk", 24),
               (gt, "$g_talk_troop_relation", 0),
	  #diplomacy start+ (players of either gender may marry opposite-gender lords)
          #(troop_get_type, ":is_female", "trp_player"),
	  (assign, ":is_female", "$character_gender"),
          (neg|troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_lady),
          #(troop_get_type, ":lord_female", "$g_talk_troop"),
	  (assign, ":lord_female", reg65),
          (this_or_next|troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_hero),
             (neq, ":lord_female", 1),
          (this_or_next|eq, ":lord_female", 1),
          #diplomacy end+
          (eq, ":is_female", 1),
          (troop_slot_eq, "trp_player", slot_troop_spouse, -1),
          (troop_slot_eq, "trp_player", slot_troop_betrothed, -1),
          (troop_slot_eq, "$g_talk_troop", slot_troop_spouse, -1),
          (troop_slot_eq, "$g_talk_troop", slot_troop_betrothed, -1),
               ],
#diplomacy start+ gender-corrected
"My {lord/lady}, it brings my heart great joy to see you again...", "lord_start",  [
          (call_script, "script_troop_change_relation_with_troop", "trp_player", "$g_talk_troop", 2),
#diplomacy end+
         ]],

[anyone ,"start", [(troop_slot_eq,"$g_talk_troop",slot_troop_courtship_state, 2),
               (gt, "$g_talk_troop_relation", 0),
##diplomacy start+ Consider when to enable this for male PCs
#          (troop_get_type, ":is_female", "trp_player"),
#          (eq, ":is_female", 1),
          (neg|troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_lady),
          (assign, ":lord_type", reg65),
          (assign, ":player_type", "$character_gender"),
          (this_or_next|ge, "$g_disable_condescending_comments", 2),
             (neq, ":lord_type", ":player_type"),#probably not necessary, unless "slot_troop_met" is also being used for something else
          (this_or_next|troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_hero),
          (troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_robber_knight),
               ],
#"lady" -> "{lord/lady}"
"My {lord/lady}, I am always your humble servant", "lord_start",  [
##diplomacy end+
         ]],


[anyone ,"start", [(troop_slot_eq,"$g_talk_troop",slot_troop_occupation, slto_kingdom_hero),
               (neq, "$g_talk_troop_met", 0),
               (gt, "$g_time_since_last_talk", 24),
               (gt, "$g_talk_troop_relation", 50),
               (gt, "$g_talk_troop_faction_relation", 10),
               (le,"$talk_context",tc_siege_commander),
               ],
"If it isn't my brave champion, {playername}...", "lord_start",  []],

[anyone ,"start", [(troop_slot_eq,"$g_talk_troop",slot_troop_occupation, slto_kingdom_hero),
               (neq, "$g_talk_troop_met", 0),
               (gt, "$g_time_since_last_talk", 24),
               (gt, "$g_talk_troop_relation", 10),
               (le,"$talk_context",tc_siege_commander),
               ],
"Good to see you again {playername}...", "lord_start", []],

[anyone ,"start", [(troop_slot_eq,"$g_talk_troop",slot_troop_occupation, slto_kingdom_hero),
               (neq, "$g_talk_troop_met", 0),
               (gt, "$g_time_since_last_talk", 24),
               (le,"$talk_context",tc_siege_commander),
               ],
"We meet again, {playername}...", "lord_start", []],

[anyone ,"start", [(troop_slot_eq,"$g_talk_troop",slot_troop_occupation, slto_kingdom_hero),
               (eq, "$g_talk_troop_met", 0),
               (ge, "$g_talk_troop_faction_relation", 0),
               (le,"$talk_context",tc_siege_commander),
               ],
"Do I know you?", "lord_meet_neutral", []],
[anyone|plyr ,"lord_meet_neutral", [],  "I am {playername}.", "lord_intro", []],
[anyone|plyr ,"lord_meet_neutral", [
##diplomacy start+ use correct gender
],  "My name is {playername}. At your service {reg65?madame:sir}.", "lord_intro", []],
##diplomacy end+

[anyone ,"lord_intro", [],
"{s11}", "lord_start", [(faction_get_slot, ":faction_leader", "$g_talk_troop_faction", slot_faction_leader),
                    (str_store_faction_name, s6, "$g_talk_troop_faction"),
                    (assign, reg4, 0),
                    (str_store_troop_name, s4, "$g_talk_troop"),
                    (try_begin),
                      (eq, ":faction_leader", "$g_talk_troop"),
                      (str_store_string, s9, "@I am {s4}, the ruler of {s6}", 0),
                    ##diplomacy start+ Alternate introduction
                    (else_try),
                       (assign, ":impressive_relative", -1),
                       (troop_get_slot, reg0, "$g_talk_troop", slot_troop_renown),
                       (val_add, reg0, 1),
                       (try_for_range_backwards, reg5, dplmc_slot_troop_relatives_begin, dplmc_slot_troop_relatives_end),
                          (troop_get_slot, reg5, "$g_talk_troop", reg5),
                          (ge, reg5, walkers_end),
                          (troop_is_hero, reg5),
                          (store_faction_of_troop, reg1, reg5),
                          (eq, reg1, "$g_talk_troop_faction"),
                          (this_or_next|faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, reg5),
                          (this_or_next|faction_slot_eq, "$g_talk_troop_faction", slot_faction_marshall, reg5),
                          (this_or_next|troop_slot_ge, reg5, slot_troop_renown, reg0),
                          (is_between, "$g_talk_troop", kingdom_ladies_begin, kingdom_ladies_end),
                          (assign, ":impressive_relative", reg5),
                       (try_end),
                       (gt, ":impressive_relative", -1),
                       (call_script, "script_dplmc_troop_get_family_relation_to_troop", "$g_talk_troop", ":impressive_relative"),
                       (str_store_string, s8, reg1),
                       (str_store_troop_name, s9, ":impressive_relative"),
                       (str_store_string, s9, "@I am {s4}, {s8} of {s9}"),
                    ##diplomacy end+
                    (else_try),
                      (str_store_string, s9, "@I am {s4}, a vassal of {s6}", 0),
                    (try_end),
                    (assign, ":num_centers", 0),
                    (str_clear, s8),
                    (try_for_range_backwards, ":cur_center", centers_begin, centers_end),
                      (party_slot_eq, ":cur_center", slot_town_lord, "$g_talk_troop"),
                      (try_begin),
                        (eq, ":num_centers", 0),
                        (str_store_party_name, s8, ":cur_center"),
                      (else_try),
                        (eq, ":num_centers", 1),
                        (str_store_party_name, s7, ":cur_center"),
                        (str_store_string, s8, "@{s7} and {s8}"),
                      (else_try),
                        (str_store_party_name, s7, ":cur_center"),
                        (str_store_string, s8, "@{!}{s7}, {s8}"),
                      (try_end),
                      (val_add, ":num_centers", 1),
                    (try_end),
                    (assign, reg5, ":num_centers"),
                    (str_store_string, s11, "@{s9}{reg5? and the lord of {s8}:}."),
                    ]],

#  [anyone ,"start", [(troop_slot_eq,"$g_talk_troop",slot_troop_occupation, slto_kingdom_hero),
#                     (eq, "$g_talk_troop_met", 0),
#                     (ge, "$g_talk_troop_faction_relation", 0),
#                     (le,"$talk_context",tc_siege_commander),
#                     ],
#   "Who is this then?", "lord_meet_ally", []],
#  [anyone|plyr ,"lord_meet_ally", [],  "I am {playername} sir. A warrior of {s4}.", "lord_start", []],
#  [anyone|plyr ,"lord_meet_ally", [],  "I am but a soldier of {s4} sir. My name is {playername}.", "lord_start", []],

[anyone ,"start", [(troop_slot_eq,"$g_talk_troop",slot_troop_occupation, slto_kingdom_hero),
               (eq, "$g_talk_troop_met", 0),
               (lt, "$g_talk_troop_faction_relation", 0),
#                     (str_store_faction_name, s4,  "$players_kingdom"),
               (le,"$talk_context",tc_siege_commander),
               ],
"{s43}", "lord_meet_enemy", [
(call_script, "script_lord_comment_to_s43", "$g_talk_troop", "str_enemy_meet_default"),
 ]],
[anyone|plyr ,"lord_meet_enemy", [],  "I am {playername}, {s65}.", "lord_intro", []],  #A warrior of {s4}.
[anyone|plyr ,"lord_meet_enemy", [],  "They know me as {playername}. Mark it down, you shall be hearing of me a lot.", "lord_intro", []],
#  [anyone, "lord_meet_enemy_2", [],  "{playername} eh? Never heard of you. What do want?", "lord_talk", []],






[anyone ,"start", [(troop_slot_eq,"$g_talk_troop",slot_troop_occupation, slto_kingdom_hero),
               (le,"$talk_context",tc_siege_commander),
          (try_begin),
             ##diplomacy start+ Add commoner personalities
             (this_or_next|troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_roguish),
             ##diplomacy end+
             (this_or_next|troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_debauched),
               (troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_quarrelsome),
             (lt, "$g_talk_troop_relation", -15),
            (str_store_string, s8, "str_playername_come_to_plague_me_some_more_have_you"),
          (else_try),
             (lt, "$g_talk_troop_relation", -5),
            (str_store_string, s8, "str_ah_it_is_you_again"),
          (else_try),
            (str_store_string, s8, "str_well_playername"),
          (try_end),
               ],
"{s8}", "lord_start",
[]],




[anyone,"lord_start", [(gt, "$g_comment_found", 0), #changed to s32 from s62 because overlaps with setup_talk_info strings
             (str_store_string, s1, "$g_last_comment_copied_to_s42"),
             (try_begin),
               (eq, "$cheat_mode", 1),
               (display_message, "str_comment_found_s1"),
             (try_end),

                  ],  "{s42}", "lord_start", [
#                         (store_current_hours, ":cur_time"),
#                         (troop_set_slot, "$g_talk_troop", slot_troop_last_comment_time, ":cur_time"),
                   (try_begin),
                     (neq, "$log_comment_relation_change", 0),
                     (call_script, "script_change_player_relation_with_troop", "$g_talk_troop", "$log_comment_relation_change"),
                   (try_end),


             (assign, "$g_comment_has_rejoinder", 0),
             (try_begin),
               (gt, "$g_rejoinder_to_last_comment", 0),
               (try_begin),
                 (eq, "$cheat_mode", 1),
                 (display_message, "str_rejoinder_noted"),
               (try_end),
               (assign, "$g_comment_has_rejoinder", 1),
             (try_end),

                   (assign, "$g_comment_found", 0),
                   ]],

[anyone|auto_proceed,"lord_start",
[
(check_quest_active, "qst_destroy_bandit_lair"),
(check_quest_succeeded, "qst_destroy_bandit_lair"),
(quest_slot_eq, "qst_destroy_bandit_lair", slot_quest_giver_troop, "$g_talk_troop"),
], "{!}.", "lair_quest_intermediate_1",
[
]],

[anyone,"lair_quest_intermediate_1",
[
], "Splendid work, {playername} -- your audacious attack is the talk of the realm. No doubt they, or others like them, will soon be back, but for a short while you have bought this land a small respite. We are most grateful to you.", "lord_pretalk",
[
(quest_get_slot, ":quest_gold_reward", "qst_destroy_bandit_lair", slot_quest_gold_reward),
(call_script, "script_troop_add_gold", "trp_player", ":quest_gold_reward"),
(assign, ":xp_reward", ":quest_gold_reward"),
(val_mul, ":xp_reward", 2),
(add_xp_as_reward, ":xp_reward"),
(call_script, "script_change_troop_renown", "trp_player", 3),
(call_script, "script_troop_change_relation_with_troop", "trp_player", "$g_talk_troop", 4),
(call_script, "script_end_quest", "qst_destroy_bandit_lair"),
(assign, reg5, ":quest_gold_reward"),
]],

[anyone|auto_proceed,"lord_start",
[
(check_quest_active, "qst_destroy_bandit_lair"),
(check_quest_failed, "qst_destroy_bandit_lair"),
(quest_slot_eq, "qst_destroy_bandit_lair", slot_quest_giver_troop, "$g_talk_troop"),
], "{!}.", "lair_quest_intermediate_2",
[]],

[anyone,"lair_quest_intermediate_2",
[], "Well, {playername}, I guess that at least some of those brigands eluded you -- and of course, it will be the peaceful travellers of this land who will pay the price. Still, it was good of you to try.", "lord_pretalk",
[
(call_script, "script_end_quest", "qst_destroy_bandit_lair"),
]],

[anyone,"lord_start",
[
(store_partner_quest,":lords_quest"),
(eq,":lords_quest","qst_lend_surgeon"),
(quest_slot_eq, "qst_lend_surgeon", slot_quest_giver_troop, "$g_talk_troop")
], "Your surgeon managed to convince my friend and made the operation. The matter is in God's hands now, and all we can do is pray for his recovery.\
 Anyway, I thank you for lending your surgeon to me {sir/madam}. You have a noble spirit. I will not forget it.", "lord_generic_mission_completed",
[
(call_script, "script_finish_quest", "qst_lend_surgeon", 100),
(troop_set_slot, "$g_talk_troop", slot_troop_does_not_give_quest, 1),
#SB : add renown to companion + relation
(quest_get_slot, ":quest_object_troop", "qst_lend_surgeon", slot_quest_object_troop),
(call_script, "script_change_troop_renown", ":quest_object_troop", dplmc_companion_skill_renown),
(call_script, "script_troop_change_relation_with_troop", ":quest_object_troop", "$g_talk_troop", 1),
]],

##### TODO: QUESTS COMMENT OUT BEGIN

##
##  [anyone,"lord_start", [(troop_slot_eq, "$g_talk_troop", slot_troop_is_prisoner, 0),
##                         (store_partner_quest,":lords_quest"),
##                         (eq,":lords_quest","qst_bring_prisoners_to_enemy"),
##                         (quest_slot_eq, "qst_bring_prisoners_to_enemy", slot_quest_current_state, 0),
##                         (check_quest_succeeded, "qst_bring_prisoners_to_enemy"),
##                         (quest_get_slot, ":quest_target_amount", "qst_bring_prisoners_to_enemy", slot_quest_target_amount),
##                         (assign, reg1, ":quest_target_amount")],
##   "TODO: You have brought the prisoners and received {reg1} denars. Give me the money now.", "lord_bring_prisoners_complete_2",[]],
##
##  [anyone,"lord_start", [(troop_slot_eq, "$g_talk_troop", slot_troop_is_prisoner, 0),
##                         (store_partner_quest,":lords_quest"),
##                         (eq,":lords_quest","qst_bring_prisoners_to_enemy"),
##                         (quest_slot_eq, "qst_bring_prisoners_to_enemy", slot_quest_current_state, 1),#Some of them were brought only
##                         (check_quest_succeeded, "qst_bring_prisoners_to_enemy"),
##                         (quest_get_slot, ":quest_target_amount", "qst_bring_prisoners_to_enemy", slot_quest_target_amount),
##                         (assign, reg1, ":quest_target_amount")],
##   "TODO: You have brought the prisoners but some of them died during your expedition. Give me the full money of {reg1} denars.", "lord_bring_prisoners_complete_2",[]],
##
##
##  [anyone|plyr,"lord_bring_prisoners_complete_2", [(store_troop_gold, ":cur_gold", "trp_player"),
##                                                   (quest_get_slot, ":quest_target_amount", "qst_bring_prisoners_to_enemy", slot_quest_target_amount),
##                                                   (ge, ":cur_gold", ":quest_target_amount")],
##   "TODO: Here it is.", "lord_generic_mission_thank", [(quest_get_slot, ":quest_target_amount", "qst_bring_prisoners_to_enemy", slot_quest_target_amount),
##                                                  (troop_remove_gold, "trp_player", ":quest_target_amount"),
##                                                  (call_script, "script_finish_quest", "qst_bring_prisoners_to_enemy", 100)]],
##
##  [anyone|plyr,"lord_bring_prisoners_complete_2", [(store_troop_gold, ":cur_gold", "trp_player"),
##                                                   (quest_get_slot, ":quest_target_amount", "qst_bring_prisoners_to_enemy", slot_quest_target_amount),
##                                                   (lt, ":cur_gold", ":quest_target_amount")],
##   "TODO: I'm afraid I spent some of it, I don't have that much money with me.", "lord_bring_prisoners_no_money", [(quest_get_slot, ":quest_target_amount", "qst_bring_prisoners_to_enemy", slot_quest_target_amount),
##                                                                                                                   (call_script, "script_change_debt_to_troop", "$g_talk_troop", ":quest_target_amount"),#Adding the taken money as a debt
##                                                                                                                   (call_script, "script_finish_quest", "qst_bring_prisoners_to_enemy", 100)]],
##
##  [anyone,"lord_bring_prisoners_no_money", [],
##   "TODO: You owe me that money!", "lord_pretalk", []],
##
##



#MALE PLAYER CHARACTER WEDDING
#wedding allowed
[anyone ,"lord_start", [(troop_slot_eq,"$g_talk_troop",slot_troop_occupation, slto_kingdom_hero),
              (check_quest_active, "qst_wed_betrothed"),

              (quest_slot_eq, "qst_wed_betrothed", slot_quest_giver_troop, "$g_talk_troop"),
              (quest_get_slot, ":bride", "qst_wed_betrothed", slot_quest_target_troop),
              (troop_slot_eq, ":bride", slot_troop_cur_center, "$g_encountered_party"),
              (faction_slot_eq, "$g_talk_troop_faction", slot_faction_ai_state, sfai_feast),
              (faction_slot_eq, "$g_talk_troop_faction", slot_faction_ai_object, "$g_encountered_party"),

              (call_script, "script_troop_get_family_relation_to_troop", ":bride", "$g_talk_troop"),
              (str_store_troop_name, s4, ":bride"),
               ],
"May the heavens witness that I am ready to give you my {s11} {s4}, to have in marriage...", "wedding_ceremony_bride_vow",
[
              (quest_get_slot, "$g_player_bride", "qst_wed_betrothed", slot_quest_target_troop),
]],


[anyone, "lord_start", [ (check_quest_active, "qst_wed_betrothed"),
              (quest_slot_eq, "qst_wed_betrothed", slot_quest_giver_troop, "$g_talk_troop"),
              (quest_get_slot, ":expiration_days", "qst_wed_betrothed", slot_quest_expiration_days),
              (lt, ":expiration_days", 362),
              (eq, "$g_done_wedding_comment", 0),
              (str_clear, s12),
              (try_begin),
               (neg|faction_slot_eq, "$g_talk_troop_faction", slot_faction_ai_state, sfai_feast),
               (neg|faction_slot_eq, "$g_talk_troop_faction", slot_faction_ai_state, sfai_default),
                (str_store_string, s12, "@ We will of course need to wait until the realm is no longer on campaign."),
              (try_end),

               ],
"It is good to see you, {playername}. We look forward to the wedding, as soon as we can all gather together for the feast.{s12}", "lord_wedding_reschedule",
[
(assign, "$g_done_wedding_comment", 1),
]],



[anyone|plyr, "lord_wedding_reschedule", [],
"It is no problem. I can wait.", "lord_start",
[
]],

[anyone|plyr, "lord_wedding_reschedule", [],
"I have no faith that this wedding will be concluded. Please return my dower.", "lord_return_dower", #add in new dialog
[]],

[anyone, "lord_return_dower", [],
"Well, that is your right, if you indeed have no confidence in our family's commitments. Take your money.", "close_window",
[
(quest_get_slot, ":bride", "qst_wed_betrothed", slot_quest_target_troop),
(fail_quest, "qst_wed_betrothed"),
(call_script, "script_end_quest", "qst_wed_betrothed"),

(troop_set_slot, "trp_player", slot_troop_betrothed, -1),
(troop_set_slot, ":bride", slot_troop_betrothed, -1),

(assign, "$marriage_dowry", 0),
(troop_add_gold, "trp_player", "$marriage_dower"),
(assign, "$marriage_dower", 0),

(call_script, "script_troop_change_relation_with_troop", "trp_player", "$g_talk_troop", -3),
(assign, "$g_leave_encounter", 1),
]],






[anyone,"lord_start", [(store_partner_quest,":lords_quest"),
                   (eq,":lords_quest","qst_incriminate_loyal_commander"),
                   (check_quest_succeeded, "qst_incriminate_loyal_commander"),
                   (quest_get_slot, ":quest_target_troop", "qst_incriminate_loyal_commander", slot_quest_target_troop),
                   (str_store_troop_name, s3, ":quest_target_troop"),
                   (quest_get_slot, reg5, "qst_incriminate_loyal_commander", slot_quest_gold_reward),
##diplomacy start+ fix pronouns
                   (call_script, "script_dplmc_store_troop_is_female", ":quest_target_troop"),
                   ],
#"his" to "{reg0?her:his}", "him" to "(reg0?her:him}"
"Hah! Our little plot against {s3} worked perfectly, {playername}.\
The fool has lost one of {reg0?her:his} most valuable retainers, and we are one step closer to bringing {reg0?her:him} to {reg0?her:his} knees.\
Here, this purse contains {reg5} denars, and I wish you to have it. You deserve every copper.\
And, need I remind you, there could be much more to come if you've a mind to earn it...", "lord_generic_mission_completed",[
##diplomacy end+
(call_script, "script_end_quest", "qst_incriminate_loyal_commander"),
(call_script, "script_change_player_relation_with_troop","$g_talk_troop",5),
(call_script, "script_change_player_honor", -10),
]],

[anyone,"lord_start", [(store_partner_quest,":lords_quest"),
                   (eq,":lords_quest","qst_incriminate_loyal_commander"),
                   (check_quest_failed, "qst_incriminate_loyal_commander")],
"You werent't able to complete a simple task. I had set up everything.\
The only thing you needed to do was sacrifice a messenger, and we would be celebrating now.\
But no, you were too damned honorable, weren't you?", "close_window",[
(call_script, "script_end_quest", "qst_incriminate_loyal_commander"),
(call_script, "script_change_player_relation_with_troop","$g_talk_troop",-5),
(call_script, "script_change_player_honor", 3),
]],
#TODO: NO GENERIC MISSION FAILED ANYMORE!!!!


[anyone,"lord_start", [(store_partner_quest,":lords_quest"),
                   (eq,":lords_quest","qst_meet_spy_in_enemy_town"),
                   (check_quest_succeeded, "qst_meet_spy_in_enemy_town"),
                   ],
"Have you brought me any news about that task I gave you? You know the one I mean...", "quest_meet_spy_in_enemy_town_completed",
[]],

[anyone|plyr, "quest_meet_spy_in_enemy_town_completed", [],
"I have the reports you wanted right here.", "quest_meet_spy_in_enemy_town_completed_2",[]],

[anyone, "quest_meet_spy_in_enemy_town_completed_2", [],
"Ahh, well done. It's good to have competent {men/people} on my side. Here is the payment I promised you.", "lord_pretalk",
[
(call_script, "script_change_player_relation_with_troop", "$g_talk_troop", 3),
(add_xp_as_reward, 500),
(quest_get_slot, ":gold", "qst_meet_spy_in_enemy_town", slot_quest_gold_reward),
(call_script, "script_troop_add_gold", "trp_player", ":gold"),
(call_script, "script_end_quest", "qst_meet_spy_in_enemy_town"),
]],

[anyone,"lord_start", [(store_partner_quest,":lords_quest"),
                   (eq,":lords_quest","qst_cause_provocation"),
                   (check_quest_succeeded, "qst_cause_provocation"),
                   (quest_get_slot, ":quest_target_faction", "qst_cause_provocation", slot_quest_target_faction),
                   (str_store_faction_name, s13, ":quest_target_faction"),
                   ],
"Brilliant work, {playername}! Whatever you did, the nobles of the {s13} are clamoring for war!\
Soon, the time will come for us to reap the benefits of our hard work, from fields ripe for plunder.\
This war is going to make us rich, mark my words!", "lord_pretalk",
[
(call_script, "script_change_player_relation_with_troop", "$g_talk_troop", 10),
(try_for_range, ":vassal", active_npcs_begin, active_npcs_end),
(troop_slot_eq, ":vassal", slot_troop_occupation, slto_kingdom_hero),
(store_troop_faction, ":vassal_fac", ":vassal"),
(eq, ":vassal_fac", "$players_kingdom"),
(neq,  ":vassal", "$g_talk_troop"),
(store_random_in_range, ":rel_change", -5, 4),
(call_script, "script_change_player_relation_with_troop", ":vassal", ":rel_change"),
(try_end),
#TODO: Add gold reward notification before the quest is given. 500 gold is not mentioned anywhere.
(call_script, "script_troop_add_gold", "trp_player", 500),
(add_xp_as_reward, 2000),
(call_script, "script_change_player_honor", -5),
(call_script, "script_end_quest", "qst_cause_provocation")
]],

#  [anyone,"lord_start", [(store_partner_quest, ":lords_quest"),
#                        (eq, ":lords_quest", "qst_raid_caravan_to_start_war"),
#                       (check_quest_failed, "qst_raid_caravan_to_start_war"),
#                      ],
#"You incompetent buffoon!\
#What in Hell made you think that getting yourself captured while trying to start a war was a good idea?\
#These plans took months to prepare, and now everything's been ruined! I will not forget this, {playername}.\
#Oh, be assured that I will not.", "lord_pretalk",
#  [
#  (call_script, "script_change_player_relation_with_troop", "$g_talk_troop", -10),
#  (call_script, "script_end_quest", "qst_raid_caravan_to_start_war")
#  ]],

[anyone,"lord_start", [(store_partner_quest,":lords_quest"),
                   (eq,":lords_quest","qst_collect_debt"),
                   (quest_slot_eq, "qst_collect_debt", slot_quest_current_state, 1),
                   (quest_get_slot, ":target_troop", "qst_collect_debt", slot_quest_target_troop),
                   (str_store_troop_name, s7, ":target_troop"),
                   (quest_get_slot, ":total_collected","qst_collect_debt",slot_quest_target_amount),
                   (store_div, reg3, ":total_collected", 5),
                   (store_sub, reg4, ":total_collected", reg3)],
"I'm told that you've collected the money owed me from {s7}. Good, it's past time I had it back.\
 I believe I promised to give you one-fifth of it all, eh?\
 Well, that makes {reg3} denars, so if you give me my share -- that's {reg4} denars -- you can keep the rest.", "lord_collect_debt_completed", []],


[anyone|plyr,"lord_collect_debt_completed", [(store_troop_gold, ":gold", "trp_player"),
                                         (ge, ":gold", reg4)],
"Of course, {s65}. {reg4} denars, all here.", "lord_collect_debt_pay",[]],

[anyone,"lord_collect_debt_pay", [],
"I must admit I'm impressed, {playername}. I had lost hope of ever getting this money back.\
Please accept my sincere thanks.", "lord_pretalk",[
(troop_remove_gold, "trp_player", reg4),
##diplomacy start+ actually give gold to lord
(call_script, "script_dplmc_distribute_gold_to_lord_and_holdings", reg4, "$g_talk_troop"),
##diplomacy end+
(call_script, "script_change_player_relation_with_troop","$g_talk_troop", 2),
(add_xp_as_reward, 100),
(call_script, "script_end_quest", "qst_collect_debt")
]],

[anyone|plyr,"lord_collect_debt_completed", [], "I am afraid I don't have the money with me sir.", "lord_collect_debt_no_pay",[]],
[anyone,"lord_collect_debt_no_pay", [], "Is this a joke?\
 I know full well that {s7} gave you the money, and I want every denar owed to me, {sir/madam}.\
 As far as I'm concerned, I hold you personally in my debt until I see that silver.", "close_window",[
(call_script, "script_change_debt_to_troop", "$g_talk_troop", reg4),
(call_script, "script_end_quest", "qst_collect_debt"),

(call_script, "script_objectionable_action", tmt_honest, "str_squander_money"),
]],

[anyone,"lord_start", [(store_partner_quest,":lords_quest"),
                   (eq,":lords_quest","qst_kill_local_merchant"),
                   (check_quest_succeeded, "qst_kill_local_merchant"),
                   (quest_slot_eq, "qst_kill_local_merchant", slot_quest_current_state, 1)],
"I heard you got rid of that poxy merchant that was causing me so much grief.\
 I can see you're not afraid to get your hands dirty, eh? I like that in a {man/woman}.\
 Here's your reward. Remember, {playername}, stick with me and we'll go a long, long way together.", "close_window",
[ (call_script, "script_troop_add_gold", "trp_player", 600),
(call_script, "script_change_player_relation_with_troop","$g_talk_troop",4),
(add_xp_as_reward, 300),
(call_script, "script_end_quest", "qst_kill_local_merchant"),

(call_script, "script_objectionable_action", tmt_humanitarian, "str_murder_merchant"),

(assign, "$g_leave_encounter", 1)]],

[anyone,"lord_start", [(store_partner_quest,":lords_quest"),
                   (eq,":lords_quest","qst_kill_local_merchant"),
                   (check_quest_failed, "qst_kill_local_merchant")],
"Oh, it's you. Enlighten me, how exactly does one lose a simple fight to some poxy, lowborn merchant?\
 Truly, if I ever need my guardsmen to take a lesson in how to lay down and die, I'll be sure to come to you.\
 Just leave me be, {playername}, I have things to do.", "close_window",
[(call_script, "script_end_quest", "qst_kill_local_merchant"),
#SB : lose renown for easy encounters
(call_script, "script_change_troop_renown", "trp_player", -3),
(assign, "$g_leave_encounter", 1)]],

[anyone,"lord_start", [(store_partner_quest,":lords_quest"),
                   (eq,":lords_quest","qst_kill_local_merchant"),
                   (check_quest_succeeded, "qst_kill_local_merchant"),
                   (quest_slot_eq, "qst_kill_local_merchant", slot_quest_current_state, 2)],
"You! Do you have sawdust between your ears? Did you think that when I said to kill the merchant,\
I meant you to have a nice chat with him and then let him go?! What possessed you?", "lord_kill_local_merchant_let_go",[]],

[anyone|plyr,"lord_kill_local_merchant_let_go", [],
"Sir, I made sure he will not act against you.", "lord_kill_local_merchant_let_go_2",[]],

[anyone,"lord_kill_local_merchant_let_go_2", [],
##diplomacy start+ change {men/people} to {men/women}
"Piffle. You were supposed to remove him, not give him a sermon and send him on his way.\
He had better do as you say, or you'll both regret it.\
Here, this is half the money I promised you. Don't say a word, {playername}, you're lucky to get even that.\
I have little use for {men/women} who cannot follow orders.", "lord_pretalk",
##diplomacy end+
[(call_script, "script_troop_add_gold", "trp_player", 300),
(call_script, "script_change_player_relation_with_troop","$g_talk_troop",2),
(add_xp_as_reward, 500),
(call_script, "script_end_quest", "qst_kill_local_merchant"),
(assign, "$g_leave_encounter", 1)
]],

##  [anyone,"lord_start", [(store_partner_quest,":lords_quest"),
##                         (eq,":lords_quest","qst_hunt_down_raiders"),
##                         (check_quest_failed, "qst_hunt_down_raiders")],
##   "I heard that those raiders you were after have got away. Do you have an explanation?", "quest_hunt_down_raiders_failed",[]],
##  [anyone|plyr,"quest_hunt_down_raiders_failed", [],  "They were too quick for us my lord. But next time we'll get them", "quest_hunt_down_raiders_failed_2",[]],
##  [anyone|plyr,"quest_hunt_down_raiders_failed", [],  "They were too strong and well armed my lord. But we'll be ready for them next time.", "quest_hunt_down_raiders_failed_2",[]],
##
##  [anyone|plyr,"quest_hunt_down_raiders_failed", [],  "Well, it was a long call anyway. Next time do make sure that you are better prepared.",
##   "lord_pretalk",[(call_script, "script_end_quest", "qst_hunt_down_raiders")]],
##
##
##
##  [anyone,"lord_start", [(store_partner_quest,":lords_quest"),
##                         (eq,":lords_quest","qst_hunt_down_raiders"),
##                         (check_quest_succeeded, "qst_hunt_down_raiders")],
##   "I heard that you have given those raiders the punishment they deserved. Well done {playername}.\
## ", "lord_generic_mission_completed",[(call_script, "script_finish_quest", "qst_hunt_down_raiders", 100),
##                                      (call_script, "script_change_player_relation_with_troop","$g_talk_troop",3)]],
##


##  [anyone,"lord_start", [(troop_slot_eq, "$g_talk_troop", slot_troop_is_prisoner, 0),
##                         (store_partner_quest,":lords_quest"),
##                         (eq,":lords_quest","qst_defend_nobles_against_peasants"),
##                         (this_or_next|check_quest_succeeded, "qst_defend_nobles_against_peasants"),
##                         (check_quest_failed, "qst_defend_nobles_against_peasants"),
##                         (assign, ":num_saved", "$qst_defend_nobles_against_peasants_num_nobles_saved"),
##                         (party_count_companions_of_type, ":num_nobles", "p_main_party", "trp_noble_refugee"),
##                         (val_add, ":num_saved", ":num_nobles"),
##                         (party_count_companions_of_type, ":num_nobles", "p_main_party", "trp_noble_refugee_woman"),
##                         (val_add, ":num_saved", ":num_nobles"),
##                         (assign, "$qst_defend_nobles_against_peasants_num_nobles_saved", ":num_saved"),
##                         (eq, ":num_saved", "$qst_defend_nobles_against_peasants_num_nobles_to_save")],
##   "TODO: You have saved all of them. Good boy.", "lord_generic_mission_completed",
##   [(party_remove_members, "p_main_party", "trp_noble_refugee", "$qst_defend_nobles_against_peasants_num_nobles_saved"),
##    (party_remove_members, "p_main_party", "trp_noble_refugee_woman", "$qst_defend_nobles_against_peasants_num_nobles_saved"),
##    (call_script, "script_finish_quest", "qst_defend_nobles_against_peasants", 100)]],
##
##  [anyone,"lord_start", [(troop_slot_eq, "$g_talk_troop", slot_troop_is_prisoner, 0),
##                         (store_partner_quest,":lords_quest"),
##                         (eq,":lords_quest","qst_defend_nobles_against_peasants"),
##                         (this_or_next|check_quest_succeeded, "qst_defend_nobles_against_peasants"),
##                         (check_quest_failed, "qst_defend_nobles_against_peasants"),
##                         (assign, ":num_saved", "$qst_defend_nobles_against_peasants_num_nobles_saved"),
##                         (party_count_companions_of_type, ":num_nobles", "p_main_party", "trp_noble_refugee"),
##                         (val_add, ":num_saved", ":num_nobles"),
##                         (party_count_companions_of_type, ":num_nobles", "p_main_party", "trp_noble_refugee_woman"),
##                         (val_add, ":num_saved", ":num_nobles"),
##                         (assign, "$qst_defend_nobles_against_peasants_num_nobles_saved", ":num_saved"),
##                         (lt, ":num_saved", "$qst_defend_nobles_against_peasants_num_nobles_to_save"),
##                         (gt, "$qst_defend_nobles_against_peasants_num_nobles_saved", 0)],
##   "TODO: You have saved some of them. Half good boy.", "lord_capture_conspirators_half_completed",
##   [(party_remove_members, "p_main_party", "trp_noble_refugee", "$qst_defend_nobles_against_peasants_num_nobles_saved"),
##    (party_remove_members, "p_main_party", "trp_noble_refugee_woman", "$qst_defend_nobles_against_peasants_num_nobles_saved"),
##    (assign, ":ratio", 100),
##    (val_mul, ":ratio", "$qst_defend_nobles_against_peasants_num_nobles_saved"),
##    (val_div, ":ratio", "$qst_defend_nobles_against_peasants_num_nobles_to_save"),
##    (call_script, "script_finish_quest", "qst_defend_nobles_against_peasants", ":ratio")]],
##
##  [anyone,"lord_start", [(troop_slot_eq, "$g_talk_troop", slot_troop_is_prisoner, 0),
##                         (store_partner_quest,":lords_quest"),
##                         (eq,":lords_quest","qst_defend_nobles_against_peasants"),
##                         (this_or_next|check_quest_succeeded, "qst_defend_nobles_against_peasants"),
##                         (check_quest_failed, "qst_defend_nobles_against_peasants"),
##                         (assign, ":num_saved", "$qst_defend_nobles_against_peasants_num_nobles_saved"),
##                         (party_count_companions_of_type, ":num_nobles", "p_main_party", "trp_noble_refugee"),
##                         (val_add, ":num_saved", ":num_nobles"),
##                         (party_count_companions_of_type, ":num_nobles", "p_main_party", "trp_noble_refugee_woman"),
##                         (val_add, ":num_saved", ":num_nobles"),
##                         (eq, ":num_saved", 0)],
##   "TODO: You have saved none of them. Bad boy.", "lord_generic_mission_failed", []],
##
##
##  [anyone,"lord_start", [(troop_slot_eq, "$g_talk_troop", slot_troop_is_prisoner, 0),
##                         (store_partner_quest,":lords_quest"),
##                         (eq,":lords_quest","qst_capture_conspirators"),
##                         (this_or_next|check_quest_succeeded, "qst_capture_conspirators"),
##                         (check_quest_failed, "qst_capture_conspirators"),
##                         (party_count_prisoners_of_type, ":num_conspirators", "p_main_party", "trp_conspirator"),
##                         (party_count_prisoners_of_type, ":num_conspirator_leaders", "p_main_party", "trp_conspirator_leader"),
##                         (store_add, ":sum_captured", ":num_conspirators", ":num_conspirator_leaders"),
##                         (ge, ":sum_captured", "$qst_capture_conspirators_num_troops_to_capture")],
##   "TODO: You have captured all of them. Good boy.", "lord_generic_mission_completed",
##   [(party_remove_prisoners, "p_main_party", "trp_conspirator_leader", "$qst_capture_conspirators_num_troops_to_capture"),
##    (party_remove_prisoners, "p_main_party", "trp_spy_partner", "$qst_capture_conspirators_num_troops_to_capture"),
##    (call_script, "script_finish_quest", "qst_capture_conspirators", 100)]],
##
##  [anyone,"lord_start", [(troop_slot_eq, "$g_talk_troop", slot_troop_is_prisoner, 0),
##                         (store_partner_quest,":lords_quest"),
##                         (eq,":lords_quest","qst_capture_conspirators"),
##                         (this_or_next|check_quest_succeeded, "qst_capture_conspirators"),
##                         (check_quest_failed, "qst_capture_conspirators"),
##                         (party_count_prisoners_of_type, ":num_conspirators", "p_main_party", "trp_conspirator"),
##                         (party_count_prisoners_of_type, ":num_conspirator_leaders", "p_main_party", "trp_conspirator_leader"),
##                         (store_add, ":sum_captured", ":num_conspirators", ":num_conspirator_leaders"),
##                         (lt, ":sum_captured", "$qst_capture_conspirators_num_troops_to_capture"),
##                         (gt, ":sum_captured", 0)],
##   "TODO: You have captured some of them. Half good boy.", "lord_capture_conspirators_half_completed",
##   [(assign, ":sum_removed", 0),
##    (party_remove_prisoners, "p_main_party", "trp_conspirator_leader", "$qst_capture_conspirators_num_troops_to_capture"),
##    (val_add, ":sum_removed", reg0),
##    (party_remove_prisoners, "p_main_party", "trp_conspirator", "$qst_capture_conspirators_num_troops_to_capture"),
##    (val_add, ":sum_removed", reg0),
##    (val_mul, ":sum_removed", 100),
##    (val_div, ":sum_removed", "$qst_capture_conspirators_num_troops_to_capture"),
##    (call_script, "script_finish_quest", "qst_capture_conspirators", ":sum_removed")]],
##
##  [anyone,"lord_start", [(troop_slot_eq, "$g_talk_troop", slot_troop_is_prisoner, 0),
##                         (store_partner_quest,":lords_quest"),
##                         (eq,":lords_quest","qst_capture_conspirators"),
##                         (this_or_next|check_quest_succeeded, "qst_capture_conspirators"),
##                         (check_quest_failed, "qst_capture_conspirators"),
##                         (party_count_prisoners_of_type, ":num_conspirators", "p_main_party", "trp_conspirator"),
##                         (party_count_prisoners_of_type, ":num_conspirator_leaders", "p_main_party", "trp_conspirator_leader"),
##                         (store_add, ":sum_captured", ":num_conspirators", ":num_conspirator_leaders"),
##                         (eq, ":sum_captured", 0)],
##   "TODO: You have captured none of them. Bad boy.", "lord_generic_mission_failed", []],
##
##  [anyone|plyr,"lord_capture_conspirators_half_completed", [],
##   "TODO: That's all I can do.", "lord_pretalk", []],


[anyone,"lord_start", [#(troop_slot_eq, "$g_talk_troop", slot_troop_is_prisoner, 0),
             (neg|troop_slot_ge, "$g_talk_troop", slot_troop_prisoner_of_party, 0),
                   (store_partner_quest,":lords_quest"),
                   (eq,":lords_quest","qst_follow_spy"),
                   (eq, "$qst_follow_spy_no_active_parties", 1),
                   (party_count_prisoners_of_type, ":num_spies", "p_main_party", "trp_spy"),
                   (party_count_prisoners_of_type, ":num_spy_partners", "p_main_party", "trp_spy_partner"),
                   (gt, ":num_spies", 0),
                   (gt, ":num_spy_partners", 0),
##diplomacy start+ Adjust pronouns in the event that "trp_spy" has been altered to a female model
                   (call_script, "script_dplmc_store_troop_is_female",  "trp_spy"),
],
#"his" to "{reg0?her:his}"
"Beautiful work, {playername}! You captured both the spy and {reg0?her:his} handler, just as I'd hoped,\
and the pair are now safely ensconced in my dungeon, waiting to be questioned.\
My torturer shall be busy tonight! Anyway, I'm very pleased with your success, {playername}, and I give you\
this purse as a token of my appreciation.", "lord_follow_spy_completed",
##diplomacy end+
[(party_remove_prisoners, "p_main_party", "trp_spy", 1),
(party_remove_prisoners, "p_main_party", "trp_spy_partner", 1),
(call_script, "script_change_player_relation_with_troop","$g_talk_troop",4),
(call_script, "script_troop_add_gold", "trp_player", 2000),
(add_xp_as_reward, 4000),
(call_script, "script_end_quest", "qst_follow_spy")]],

[anyone,"lord_start", [#(troop_slot_eq, "$g_talk_troop", slot_troop_is_prisoner, 0),
             (neg|troop_slot_ge, "$g_talk_troop", slot_troop_prisoner_of_party, 0),
                   (store_partner_quest,":lords_quest"),
                   (eq,":lords_quest","qst_follow_spy"),
                   (eq, "$qst_follow_spy_no_active_parties", 1),
                   (party_count_prisoners_of_type, ":num_spies", "p_main_party", "trp_spy"),
                   (party_count_prisoners_of_type, ":num_spy_partners", "p_main_party", "trp_spy_partner"),
                   (gt, ":num_spies", 0),
                   (eq, ":num_spy_partners", 0),],
"Blast and damn you! I wanted TWO prisoners, {playername} -- what you've brought me is one step short of\
useless! I already know everything the spy knows, it was the handler I was after.\
Here, half a job gets you half a reward. Take it and begone.", "lord_follow_spy_half_completed",
[(party_remove_prisoners, "p_main_party", "trp_spy", 1),
(call_script, "script_change_player_relation_with_troop","$g_talk_troop",-1),
(call_script, "script_troop_add_gold", "trp_player", 1000),
(add_xp_as_reward, 400),
(call_script, "script_end_quest", "qst_follow_spy")]],

[anyone,"lord_start", [#(troop_slot_eq, "$g_talk_troop", slot_troop_is_prisoner, 0),
              (neg|troop_slot_ge, "$g_talk_troop", slot_troop_prisoner_of_party, 0),
                   (store_partner_quest,":lords_quest"),
                   (eq,":lords_quest","qst_follow_spy"),
                   (eq, "$qst_follow_spy_no_active_parties", 1),
                   (party_count_prisoners_of_type, ":num_spies", "p_main_party", "trp_spy"),
                   (party_count_prisoners_of_type, ":num_spy_partners", "p_main_party", "trp_spy_partner"),
                   (eq, ":num_spies", 0),
                   (gt, ":num_spy_partners", 0),
##diplomacy start+ Adjust pronouns in the event that "trp_spy" has been altered to a female model
                   (call_script, "script_dplmc_store_troop_is_female",  "trp_spy"),
                   ],
#"he" to "{reg0?she:he}
"I asked you for two prisoners, {playername}, not one. Two. Still, I suppose you did capture the spy's handler,\
the more important one of the pair. The spy will not dare return here and will prove quite useless to\
whatever master {reg0?she:he} served. 'Tis better than nothing.\
However, you'll understand if I pay you half the promised reward for what is but half a success.", "lord_follow_spy_half_completed",
##diplomacy end+
[(party_remove_prisoners, "p_main_party", "trp_spy_partner", 1),
(call_script, "script_change_player_relation_with_troop","$g_talk_troop",1),
(call_script, "script_troop_add_gold", "trp_player", 1000),
(add_xp_as_reward, 400),
(call_script, "script_end_quest", "qst_follow_spy")]],

[anyone,"lord_start", [(store_partner_quest,":lords_quest"),
                   (eq,":lords_quest","qst_follow_spy"),
                   (eq, "$qst_follow_spy_no_active_parties", 1),
                   (party_count_prisoners_of_type, ":num_spies", "p_main_party", "trp_spy"),
                   (party_count_prisoners_of_type, ":num_spy_partners", "p_main_party", "trp_spy_partner"),
                   (eq, ":num_spies", 0),
                   (eq, ":num_spy_partners", 0),
##diplomacy start+ Adjust pronouns in the event that "trp_spy" has been altered to a female model
                   (call_script, "script_dplmc_store_troop_is_female",  "trp_spy"),
                   ],
#"his" to "{reg0?her:his}"
"Truly, {playername}, you are nothing short of totally incompetent.\
Failing to capture both the spy AND {reg0?her:his} handler plumbs astonishing new depths of failure.\
Forget any reward I offered you. You've done nothing to earn it.", "lord_follow_spy_failed",
##diplomacy end+
[
(call_script, "script_change_player_relation_with_troop","$g_talk_troop",-2),
(call_script, "script_end_quest", "qst_follow_spy"),
]],

[anyone|plyr,"lord_follow_spy_half_completed", [],
"I did my best, {s65}.", "lord_pretalk", []],

[anyone|plyr,"lord_follow_spy_completed", [],
"Thank you, {s65}.", "lord_pretalk", []],

[anyone|plyr,"lord_follow_spy_failed", [],
"Hrm. As you like, {s65}.", "lord_pretalk", []],


[anyone,"lord_start", [(store_partner_quest,":lords_quest"),
                   (eq,":lords_quest","qst_bring_back_runaway_serfs"),
                   (check_quest_succeeded, "qst_bring_back_runaway_serfs")],
"Splendid work, {playername}. All the serfs are back, properly cowed, and they're busy preparing for the harvest.\
You certainly earned your reward. Here, take it, with my compliments.", "lord_generic_mission_completed",
[(call_script, "script_change_player_relation_with_troop","$g_talk_troop", 2),
(call_script, "script_troop_add_gold", "trp_player", 300),
(add_xp_as_reward, 300),
(call_script, "script_end_quest", "qst_bring_back_runaway_serfs"),
(call_script, "script_objectionable_action", tmt_humanitarian, "str_round_up_serfs"),
]],

[anyone,"lord_start", [(store_partner_quest,":lords_quest"),
                   (eq,":lords_quest","qst_bring_back_runaway_serfs"),
                   (check_quest_failed, "qst_bring_back_runaway_serfs"),],
"{playername}. I have been waiting patiently for my serfs, yet none have returned. Have you an explanation?\
 Were you outwitted by simple fieldhands, or are you merely incompetent?\
 Or perhaps you are plotting with my enemies, intending to ruin me...", "lord_bring_back_runaway_serfs_failed", []],
[anyone|plyr,"lord_bring_back_runaway_serfs_failed", [],
"Forgive me, {s65}, those serfs were slippery as eels.", "lord_bring_back_runaway_serfs_failed_1a", []],
[anyone|plyr,"lord_bring_back_runaway_serfs_failed", [],
"Perhaps if you had treated them better...", "lord_bring_back_runaway_serfs_failed_1b", []],
[anyone,"lord_bring_back_runaway_serfs_failed_1a", [],
"Hmph, that is hardly an excuse for failure, {playername}. Now if you will excuse me, I need to recruit new men to work these fields before we all starve.", "lord_pretalk",
[(call_script, "script_change_player_relation_with_troop","$g_talk_troop",-1),
(call_script, "script_end_quest", "qst_bring_back_runaway_serfs")]],
[anyone,"lord_bring_back_runaway_serfs_failed_1b", [],
"Hah, now you reveal your true colours, traitor! Your words match your actions all too well. I should never have trusted you.", "close_window",
[(call_script, "script_change_player_relation_with_troop","$g_talk_troop",-10),
(quest_get_slot, ":home_village", "qst_bring_back_runaway_serfs", slot_quest_object_center),
(call_script, "script_change_player_relation_with_center",":home_village",6),
(call_script, "script_end_quest", "qst_bring_back_runaway_serfs"),
(assign, "$g_leave_encounter", 1),
]],

[anyone,"lord_start", [(store_partner_quest,":lords_quest"),
                   (eq,":lords_quest","qst_bring_back_runaway_serfs"),
                   (check_quest_concluded, "qst_bring_back_runaway_serfs"),
                   (assign, reg17, "$qst_bring_back_runaway_serfs_num_parties_returned")],
"You disappoint me, {playername}. There were 3 groups of serfs that I charged you to return. 3. Not {reg17}.\
 I suppose the ones who did come back shall have to work twice as hard to make up for those that got away.\
 As for your reward, {playername}, I'll only pay you for the serfs you returned, not the ones you let fly.\
 Here. Take it, and let this business be done.", "lord_runaway_serf_half_completed",
[(store_mul, ":reward", "$qst_bring_back_runaway_serfs_num_parties_returned", 100),
(val_div, ":reward", 2),
#	(store_div, ":relation_boost", "$qst_bring_back_runaway_serfs_num_parties_returned", 1),
#    (call_script, "script_change_player_relation_with_troop","$g_talk_troop", ":relation_boost"),
(call_script, "script_troop_add_gold", "trp_player", ":reward"),
(add_xp_as_reward, ":reward"),


(call_script, "script_objectionable_action", tmt_humanitarian, "str_round_up_serfs"),

(call_script, "script_end_quest", "qst_bring_back_runaway_serfs"),
]],

[anyone|plyr,"lord_runaway_serf_half_completed", [],
"Thank you, {s65}. You are indeed generous.", "lord_pretalk", []],
[anyone|plyr,"lord_runaway_serf_half_completed", [],
"Bah, this proved to be a waste of my time.", "lord_pretalk", []],

[anyone,"lord_start", [(store_partner_quest,":lords_quest"),
                   (eq,":lords_quest","qst_deal_with_bandits_at_lords_village"),
                   (check_quest_succeeded, "qst_deal_with_bandits_at_lords_village")],
"{playername}, I was told that you have crushed the bandits at my village of {s5}. Please know that I am most grateful to you for that.\
 Please, let me pay the expenses of your campaign. Here, I hope these {reg14} denars will be adequate.", "lord_deal_with_bandits_completed",
[
 (call_script, "script_change_player_relation_with_troop", "$g_talk_troop", 3),
 #SB : finish_quest instead
 # (store_character_level, ":level", "trp_player"),
 # (store_mul, ":reward", ":level", 20),
 # (val_add, ":reward", 300),
 # (call_script, "script_troop_add_gold", "trp_player", ":reward"),
 # (add_xp_as_reward, 350),
 # (call_script, "script_end_quest", "qst_deal_with_bandits_at_lords_village"),
 # (assign, reg14, ":reward"),
 (quest_get_slot, ":village", "qst_deal_with_bandits_at_lords_village", slot_quest_target_center),
 (str_store_party_name, s5, ":village"),
 (quest_get_slot, reg14, "qst_deal_with_bandits_at_lords_village", slot_quest_gold_reward),
 (call_script, "script_finish_quest", "qst_deal_with_bandits_at_lords_village"),
 ]],

[anyone|plyr, "lord_deal_with_bandits_completed", [],
"Not a problem, {s65}.", "lord_pretalk",[]],
[anyone|plyr, "lord_deal_with_bandits_completed", [],
"Glad to be of service.", "lord_pretalk",[]],
[anyone|plyr, "lord_deal_with_bandits_completed", [],
"It was mere child's play.", "lord_pretalk",[]],

[anyone,"lord_start", [(store_partner_quest,":lords_quest"),
                   (eq,":lords_quest","qst_deal_with_bandits_at_lords_village"),
                   (check_quest_concluded, "qst_deal_with_bandits_at_lords_village")],
"Damn it, {playername}. I heard that you were unable to drive off the bandits from my village of {s5}, and thanks to you, my village now lies in ruins.\
Everyone said that you were a capable warrior, but appearently, they were wrong.", "lord_pretalk",
[
 (call_script, "script_change_player_relation_with_troop", "$g_talk_troop", -5),
 (call_script, "script_end_quest", "qst_deal_with_bandits_at_lords_village"),
 (quest_get_slot, ":village", "qst_deal_with_bandits_at_lords_village", slot_quest_target_center),
 (str_store_party_name, s5, ":village"),
 ]],


[anyone,"lord_start", [(store_partner_quest,":lords_quest"),
                   (eq, ":lords_quest", "qst_deliver_cattle_to_army"),
                   (check_quest_succeeded, "qst_deliver_cattle_to_army"),
                   (quest_get_slot, reg13, "qst_deliver_cattle_to_army", slot_quest_target_amount),
                   ],
"Ah, {playername}. My quartermaster has informed me of your delivery, {reg13} heads of cattle, as I requested. I'm impressed.", "lord_deliver_cattle_to_army_thank",
[
(call_script, "script_change_player_relation_with_troop", "$g_talk_troop", 2),
(quest_get_slot, ":quest_target_amount", "qst_deliver_cattle_to_army", slot_quest_target_amount),
#TODO: Change reward
(store_mul, ":reward", ":quest_target_amount", 100),
(call_script, "script_troop_add_gold", "trp_player", ":reward"),
(val_div, ":reward", 5),
(add_xp_as_reward, ":reward"),
(call_script, "script_end_quest", "qst_deliver_cattle_to_army"),
#Reactivating follow army quest
(str_store_troop_name_link, s9, "$g_talk_troop"),
(setup_quest_text, "qst_follow_army"),
(str_store_string, s2, "str_follow_army_quest_brief_2"),
(call_script, "script_start_quest", "qst_follow_army", "$g_talk_troop"),
(assign, "$g_player_follow_army_warnings", 0),
]],

[anyone|plyr, "lord_deliver_cattle_to_army_thank", [],
"Not a problem, {s65}.", "lord_pretalk",[]],
[anyone|plyr, "lord_deliver_cattle_to_army_thank", [],
"Glad to be of service.", "lord_pretalk",[]],
[anyone|plyr, "lord_deliver_cattle_to_army_thank", [],
"Mere child's play.", "lord_pretalk",[]],

[anyone,"lord_start", [(store_partner_quest,":lords_quest"),
                   (eq, ":lords_quest", "qst_scout_waypoints"),
                   (check_quest_succeeded, "qst_scout_waypoints"),
                   (str_store_party_name, s13, "$qst_scout_waypoints_wp_1"),
                   (str_store_party_name, s14, "$qst_scout_waypoints_wp_2"),
                   (str_store_party_name, s15, "$qst_scout_waypoints_wp_3"),
                   ],
"You make a good scout, {playername}. My runner just brought me your reports of the mission to {s13}, {s14} and {s15}. Well done.", "lord_scout_waypoints_thank",
[
#TODO: Change reward
(call_script, "script_change_player_relation_with_troop", "$g_talk_troop", 1),
#     (call_script, "script_troop_add_gold", "trp_player", 100),
(add_xp_as_reward, 100),
(call_script, "script_end_quest", "qst_scout_waypoints"),
#Reactivating follow army quest
(str_store_troop_name_link, s9, "$g_talk_troop"),
(setup_quest_text, "qst_follow_army"),
(str_store_string, s2, "str_follow_army_quest_brief_2"),
(call_script, "script_start_quest", "qst_follow_army", "$g_talk_troop"),
(assign, "$g_player_follow_army_warnings", 0),
]],

[anyone|plyr, "lord_scout_waypoints_thank", [],
"A simple task, {s65}.", "lord_pretalk",[]],
[anyone|plyr, "lord_scout_waypoints_thank", [],
"Nothing I couldn't handle.", "lord_pretalk",[]],
[anyone|plyr, "lord_scout_waypoints_thank", [],
"My pleasure, {s65}.", "lord_pretalk",[]],



[anyone, "lord_start",
[
(check_quest_active, "qst_follow_army"),
(faction_slot_eq, "$g_talk_troop_faction", slot_faction_marshall, "$g_talk_troop"),
(eq, "$g_random_army_quest", "qst_deliver_cattle_to_army"),
(quest_get_slot, ":quest_target_amount", "$g_random_army_quest", slot_quest_target_amount),
(assign, reg3, ":quest_target_amount"),
],
"The army's supplies are dwindling too quickly, {playername}. I need you to bring me {reg3} heads of cattle so I can keep the troops fed. I care very little about where you get them, just bring them to me as soon as you can.", "lord_mission_told_deliver_cattle_to_army",
[
]
],

[anyone|plyr,"lord_mission_told_deliver_cattle_to_army", [], "Very well, I can find you some cattle.", "lord_mission_told_deliver_cattle_to_army_accepted",[]],
#SB : gender strings
[anyone|plyr,"lord_mission_told_deliver_cattle_to_army", [], "Sorry, {reg65?my lady:sir}, I have other plans.", "lord_mission_told_deliver_cattle_to_army_rejected",[]],

[anyone,"lord_mission_told_deliver_cattle_to_army_accepted", [], "Excellent! You know what to do, {playername}, now get to it. I need that cattle sooner rather than later.", "close_window",
[
(call_script, "script_end_quest", "qst_follow_army"),
(quest_get_slot, ":quest_target_amount", "$g_random_army_quest", slot_quest_target_amount),
(str_store_troop_name_link, s13, "$g_talk_troop"),
(assign, reg3, ":quest_target_amount"),
(setup_quest_text, "$g_random_army_quest"), #SB : gender string
(str_store_string, s2, "@{s13} asked you to gather {reg3} heads of cattle and deliver them back to {reg65?her:him}."),
(call_script, "script_start_quest", "$g_random_army_quest", "$g_talk_troop"),
#TODO: Change this value
(call_script, "script_change_player_relation_with_troop", "$g_talk_troop", 1),
(assign, "$g_leave_encounter",1),
]],

[anyone, "lord_mission_told_deliver_cattle_to_army_rejected", [], "That . . . is unfortunate, {playername}. I shall have to find someone else who's up to the task. Please go now, I've work to do.", "close_window",
[(troop_set_slot, "$g_talk_troop", slot_troop_does_not_give_quest, 1),
(assign, "$g_leave_encounter",1),]],


[anyone,"lord_start",[(check_quest_active,"qst_report_to_army"),
                  (quest_slot_eq, "qst_report_to_army", slot_quest_target_troop, "$g_talk_troop"),
            (assign, ":kingdom_at_war", 0),
            (try_for_range, ":kingdom", kingdoms_begin, kingdoms_end),
               (store_relation, ":relation", ":kingdom", "$players_kingdom"),
               (lt, ":relation", 0),
               (assign, ":kingdom_at_war", 1),
            (try_end),
            (eq, ":kingdom_at_war", 0),
                  ],
"Thank you for answering the summons, {playername}. However, as we are now at peace, we do not need your services. You may attend to your other business.", "lord_pretalk",
[
(call_script, "script_end_quest", "qst_report_to_army"),
(quest_set_slot, "qst_report_to_army", slot_quest_giver_troop, "$g_talk_troop"),
#TODO: Change this value
(call_script, "script_change_player_relation_with_troop", "$g_talk_troop", 1),
]],

[anyone,"lord_start",[
             (check_quest_active,"qst_report_to_army"),
                  (quest_slot_eq, "qst_report_to_army", slot_quest_target_troop, "$g_talk_troop"),
                  ],
"Ah, you have arrived at last, {playername}. We've been expecting you. I hope you have brought with you troops of sufficient number and experience.", "lord_report_to_army_asked",
[]],

[anyone|plyr,"lord_report_to_army_asked", [(quest_get_slot, ":quest_target_amount", "qst_report_to_army", slot_quest_target_amount),
                                       (call_script, "script_party_count_fit_for_battle", "p_main_party"),
                                       (gt, reg0, ":quest_target_amount"), # +1 for player
                                       ],
"I have a company of good, hardened soldiers with me. We are ready to join you.", "lord_report_to_army_completed",
[]],

[anyone|plyr,"lord_report_to_army_asked", [],
"I don't have the sufficient number of troops yet. I will need some more time.", "lord_report_to_army_continue",
[]],

[anyone,"lord_report_to_army_completed", [], "Excellent. We'll be moving soon. Now -- you are a {man/warrior} of sound judgement, and we trust that you will do what is necessary to support our campaign. I do not require you to remain close at hand, and I will not count it against you if you believe that your forces would be of better use elsewhere. But if you do choose to remain with me, to support me in battle, that would be appreciated. I may also have additional tasks for you to perform.", "close_window",[
(call_script, "script_end_quest", "qst_report_to_army"),
(quest_set_slot, "qst_report_to_army", slot_quest_giver_troop, "$g_talk_troop"),
#TODO: Change this value
(call_script, "script_change_player_relation_with_troop", "$g_talk_troop", 1),
#Activating follow army quest
(str_store_troop_name_link, s9, "$g_talk_troop"),
(setup_quest_text, "qst_follow_army"),
(str_store_string, s2, "@{s9} wants you to follow his army until further notice."),
(call_script, "script_start_quest", "qst_follow_army", "$g_talk_troop"),
(assign, "$g_player_follow_army_warnings", 0),
(assign, "$g_leave_encounter", 1),
]],

[anyone,"lord_report_to_army_continue", [], "Then you'd better hurry. We'll be moving out soon against the enemy and I need every able hand we can muster.", "close_window",
[(assign, "$g_leave_encounter",1),
#Must be closed because of not letting player to terminate this quest on the general conversation
]],


[anyone, "lord_start",
[
(check_quest_active, "qst_follow_army"),
(faction_slot_eq, "$players_kingdom", slot_faction_marshall, "$g_talk_troop"),
(eq, "$g_random_army_quest", "qst_scout_waypoints"),
(str_store_party_name, s13, "$qst_scout_waypoints_wp_1"),
(str_store_party_name, s14, "$qst_scout_waypoints_wp_2"),
(str_store_party_name, s15, "$qst_scout_waypoints_wp_3"),
],
"{playername}, I need a volunteer to scout the area. We're sorely lacking on information,\
and I simply must have a better picture of the situation before we can proceed.\
I want you to go to {s13}, {s14} and {s15} and report back whatever you find.", "lord_mission_told_scout_waypoints",
[
]],

[anyone|plyr, "lord_mission_told_scout_waypoints", [], "You've found your volunteer, sir.", "lord_mission_told_scout_waypoints_accepted",[]],
[anyone|plyr, "lord_mission_told_scout_waypoints", [], "I fear I must decline.", "lord_mission_told_scout_waypoints_rejected",[]],

[anyone,"lord_mission_told_scout_waypoints_accepted", [], "Good {man/lass}! Simply pass near {s13}, {s14} and {s15} and check out what's there. Make a note of anything you find and return to me as soon as possible.", "close_window",
[
(call_script, "script_end_quest", "qst_follow_army"),
(str_store_troop_name_link, s9, "$g_talk_troop"),
(str_store_party_name_link, s13, "$qst_scout_waypoints_wp_1"),
(str_store_party_name_link, s14, "$qst_scout_waypoints_wp_2"),
(str_store_party_name_link, s15, "$qst_scout_waypoints_wp_3"),
(setup_quest_text, "$g_random_army_quest"),
(str_store_string, s2, "@{s9} asked you to scout {s13}, {s14} and {s15}, then report back."),
(call_script, "script_start_quest", "$g_random_army_quest", "$g_talk_troop"),
#TODO: Change this value
(call_script, "script_change_player_relation_with_troop", "$g_talk_troop", 1),
(assign, "$g_leave_encounter",1),
]],

[anyone,"lord_mission_told_scout_waypoints_rejected", [], "Hm. I'm disappointed, {playername}. Very disappointed. We'll talk later, I need to go and find somebody to scout for us.", "lord_pretalk",
[(troop_set_slot, "$g_talk_troop", slot_troop_does_not_give_quest, 1)]],




##
##  [anyone,"lord_start",[(check_quest_active,"qst_rescue_lady_under_siege"),
##                        (quest_slot_eq, "qst_rescue_lady_under_siege", slot_quest_target_troop, "$g_talk_troop"),
##                        (quest_slot_eq, "qst_rescue_lady_under_siege", slot_quest_current_state, 1)],
##   "I heard that you have rescued my {s7} from the siege of {s5} and brought her to safety.\
## I am in your debt for this {playername}. Thank you.", "lord_generic_mission_completed",
##   [(quest_get_slot, ":quest_object_troop", "qst_rescue_lady_under_siege", slot_quest_object_troop),
##    (try_begin),
##      (troop_slot_eq, "$g_talk_troop", slot_troop_daughter, ":quest_object_troop"),
##      (str_store_string, s7, "str_daughter"),
##    (else_try),
##      (str_store_string, s7, "str_wife"),
##    (try_end),
##    (remove_member_from_party, ":quest_object_troop"),
##    (try_begin),
##      (is_between, "$g_encountered_party", centers_begin, centers_end),#Lord might be in wilderness
##      (troop_set_slot, ":quest_object_troop", slot_troop_cur_center, "$g_encountered_party"),
##    (try_end),
##    (call_script, "script_finish_quest", "qst_rescue_lady_under_siege", 100),
##    (call_script, "script_change_player_relation_with_troop","$g_talk_troop", 4),
##    ]],
##
##### TODO: QUESTS COMMENT OUT END
[anyone,"lord_generic_mission_thank", [],
"You have been most helpful, {playername}. My thanks.", "lord_generic_mission_completed",[]],

[anyone|plyr,"lord_generic_mission_completed", [],
"It was an honour to serve.", "lord_pretalk",[]],

##  [anyone|plyr,"lord_generic_mission_failed", [],
##   "I'm sorry I failed you sir. It won't happen again.", "lord_pretalk",
##   [(store_partner_quest,":lords_quest"),
##    (call_script, "script_finish_quest", ":lords_quest"),
##    ]],

[anyone,"lord_start", [#(troop_slot_eq, "$g_talk_troop", slot_troop_is_prisoner, 0),
                   (neg|troop_slot_ge, "$g_talk_troop", slot_troop_prisoner_of_party, 0),
                   (troop_get_slot, ":cur_debt", "$g_talk_troop", slot_troop_player_debt),
                   #SB : repayment not requested while qst_rescue_prisoner is active
                   (try_begin),
                     (check_quest_active, "qst_rescue_prisoner"),
                     # (neg|check_quest_succeeded, "qst_rescue_prisoner"), #success means we wipe debts
                     (neg|check_quest_failed, "qst_rescue_prisoner"),
                     (quest_get_slot, ":prisoner", "qst_rescue_prisoner", slot_quest_target_troop),
                     (neq, ":prisoner", "$g_talk_troop"),
                     (call_script, "script_dplmc_troop_get_family_relation_to_troop", ":prisoner", "$g_talk_troop"),
                     (gt, reg0, 0),
                     (assign, ":cur_debt", -1),
                   (try_end),
                   
                   (gt, ":cur_debt", 0),
                   (assign, reg1, ":cur_debt")],
"I think you owe me {reg1} denars, {playername}. Do you intend to pay your debt anytime soon?", "lord_pay_debt_2",[]],

[anyone,"lord_start", [#(troop_slot_eq, "$g_talk_troop", slot_troop_is_prisoner, 0),
                   (neg|troop_slot_ge, "$g_talk_troop", slot_troop_prisoner_of_party, 0),
                   (troop_get_slot, ":cur_debt", "$g_talk_troop", slot_troop_player_debt),
                   #SB : repayment requested once qst_rescue_prisoner is cancelled and debt still outstanding
                   (neg|check_quest_active, "qst_rescue_prisoner"),
                   (gt, ":cur_debt", dplmc_ransom_debt_mask),
                   (store_sub, reg1, ":cur_debt", dplmc_ransom_debt_mask)],
"Ahh, {playername}. I believe that last we talked, you asked for {reg1} denars to pay off a ransom? Since that matter is now concluded, would you care to repay me?", "lord_pay_debt_2",[
    #unmask this value
    (troop_get_slot, ":cur_debt", "$g_talk_troop", slot_troop_player_debt),
    (val_sub, ":cur_debt", dplmc_ransom_debt_mask),
    (troop_set_slot, "$g_talk_troop", slot_troop_player_debt, ":cur_debt"),
]],

[anyone|plyr, "lord_pay_debt_2", [(troop_get_slot, ":cur_debt", "$g_talk_troop", slot_troop_player_debt),
                              (store_troop_gold, ":cur_gold", "trp_player"),
                              (le, ":cur_debt", ":cur_gold")],
"That is why I came, {s65}. Here it is, every denar I owe you.", "lord_pay_debt_3_1", [(troop_get_slot, ":cur_debt", "$g_talk_troop", slot_troop_player_debt),
                                             (troop_remove_gold, "trp_player", ":cur_debt"),
                                             ##diplomacy start+ actually give gold to lord
                                             (call_script, "script_dplmc_distribute_gold_to_lord_and_holdings", ":cur_debt", "$g_talk_troop"),
                                             ##diplomacy end+
                                             (troop_set_slot, "$g_talk_troop", slot_troop_player_debt, 0)]],

[anyone|plyr, "lord_pay_debt_2", [],
"Alas, I don't have sufficient funds, {s65}. But I'll pay you soon enough.", "lord_pay_debt_3_2", []],

[anyone, "lord_pay_debt_3_1", [],
"Ah, excellent. You are a {man/woman} of honour, {playername}. I am satisfied. Your debt to me has been paid in full.", "lord_pretalk", []],

[anyone, "lord_pay_debt_3_2", [],
"Well, don't keep me waiting much longer.", "lord_pretalk", []],

##  [anyone,"lord_start", [(troop_slot_eq, "$g_talk_troop", slot_troop_is_prisoner, 0),
##                         (is_between,"$g_talk_troop_faction_relation",0,3),
###                         (eq,"$players_kingdom",0),
##                         ],
##   "Why don't you join us in our cause? You seem to be an able fighter.\
## We need {men/people} like you who will take part in our glory and share the spoils of our victory.", "lord_talk",[]],


#Claim center begin
##  [anyone,"lord_start", [(troop_slot_eq, "$g_talk_troop", slot_troop_is_prisoner, 0),
##                         (eq,"$g_talk_troop_faction","$players_kingdom"),
##                         (faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "$g_talk_troop"),
##                         (call_script, "script_get_number_of_unclaimed_centers_by_player"),
##                         (gt, reg1, 0),
##                         (assign, "$center_to_be_claimed", reg1),
##                         (str_store_party_name, s4, "$center_to_be_claimed"),
##                         ],
##   "I heard that your forces have taken {s4}. I commend you for your victory {playername}.\
## But we need to decide what to do with this new castle now.", "lord_claim_center_begin", []],


##  [anyone,"lord_start", [(troop_slot_eq, "$g_talk_troop", slot_troop_is_prisoner, 0),
##                         (ge,"$g_talk_troop_faction_relation",0),
##                         (call_script, "script_get_number_of_unclaimed_centers_by_player"),
##                         (gt, reg1, 0),
##                         (assign, "$center_wanted_to_be_bought", reg1),
##                         (str_store_party_name, s4, "$center_wanted_to_be_bought"),
##                         (call_script, "script_get_number_of_hero_centers", "$g_talk_troop"),
##                         (assign, ":no_of_owned_centers", reg0),
##                         (neg|faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "$g_talk_troop"),
##                         (lt, ":no_of_owned_centers", 2),
##                         (troop_get_slot, ":wealth", "$g_talk_troop", slot_troop_wealth),
##                         (ge, ":wealth", 6000)],
##   "I heard that your forces have taken {s4}. I applaud your victory {playername}, but you know as well as I do that\
## as a person of low rank and status you cannot be permitted to hold that castle for yourself.\
## It is to your benefit to sell it to a Lord like myself who can hold and protect the castle and the surrounding estates.\
## Anyway, I am ready to make you an offer of 5000 denars, should you decide to sell that castle.", "lord_buy_center", []],
##
##
##  [anyone|plyr,"lord_buy_center", [],
##   "I accept your offer sir. The castle is yours for 5000 denars.", "lord_buy_center_accept", []],
##  [anyone|plyr,"lord_buy_center", [],
##   "I am afraid I can't accept that offer.", "lord_buy_center_deny", []],
##
##  [anyone,"lord_buy_center_accept", [],
##   "Excellent, {playername}! You have decided wisely.\
## Why bother yourself with the necessities of keeping a castle while you can leave all those boring details to noble Lords like me?\
## I am sure money will be much more useful to you than a castle would.", "lord_buy_center_accept_2", []],
##
##  [anyone|plyr,"lord_buy_center_accept_2", [],
##   "One day sir, one day I'll have my own castle.", "lord_buy_center_accept_3", []],
##  [anyone|plyr,"lord_buy_center_accept_2", [],
##   "Everyone needs money sir. I can take another castle anytime.", "lord_buy_center_accept_3", []],
##
##  [anyone,"lord_buy_center_accept_3", [],
##   "Of course, of course, {playername}.  Then let us conclude our deal. Here's the 5000 denars I offered you.\
## I'll have my clerk handle the necessary details.\
## I guess from now on, {s4} belongs to me. Well, that worked very well for both of us, I guess.", "lord_pretalk",
##   [(troop_get_slot, ":wealth", "$g_talk_troop", slot_troop_wealth),
##    (val_sub, ":wealth", 6000),
##    (troop_set_slot, "$g_talk_troop", slot_troop_wealth, ":wealth"),
##    (call_script, "script_troop_add_gold", "trp_player", 5000),
##    (party_set_slot, "$center_wanted_to_be_bought", slot_town_lord, "$g_talk_troop"),
##    #Changing center faction
##    (party_set_faction, "$center_wanted_to_be_bought", "$g_talk_troop_faction"),
##    (set_spawn_radius, 1),
##    (spawn_around_party, "$center_wanted_to_be_bought", "pt_old_garrison"),
##    (assign, ":new_party", reg0),
##    (party_set_ai_behavior, ":new_party", ai_bhvr_attack_party),
##    (party_set_ai_object, ":new_party", "p_main_party"),
##    (party_set_flags, ":new_party", pf_default_behavior, 0),
##    (call_script, "script_party_copy", ":new_party", "$center_wanted_to_be_bought"),
##    (party_clear, "$center_wanted_to_be_bought"),
##
##    (faction_get_slot, ":reinforcement_template_archers", "$g_talk_troop_faction", slot_faction_reinforcements_archers),
##    (faction_get_slot, ":reinforcement_template_infantry", "$g_talk_troop_faction", slot_faction_reinforcements_infantry),
##    (party_add_template, "$center_wanted_to_be_bought", ":reinforcement_template_archers"),
##    (party_add_template, "$center_wanted_to_be_bought", ":reinforcement_template_infantry"),
##    ]],
##
##  [anyone,"lord_buy_center_deny", [],
##   "As you wish {playername}. But don't forget, the great lords of the country won't like a low born {man/woman} like you holding such an estate without their consent.\
## It is the nature of this world {playername}. Everyone should know their place.", "lord_pretalk", []],


[anyone,"lord_start",[
            (eq, "$g_romantic_comment_made", 0),
            (ge, "$g_talk_troop_relation", 20),
            (troop_slot_ge, "trp_player", slot_troop_renown, 250),
            (neg|troop_slot_ge, "trp_player", slot_troop_spouse, kingdom_ladies_begin),

            ##diplomacy start+
            #(troop_get_type, ":is_female", "trp_player"),
            #(eq, ":is_female", 0),

            #don't overlook marriage to female lords
		    (neg|troop_slot_ge, "trp_player", slot_troop_spouse, active_npcs_begin),
            #get courtship of female lords to work
            (assign, ":player_type", "$character_gender"),
			(call_script, "script_dplmc_store_troop_is_female", "$g_talk_troop"),
			(assign, ":troop_type", reg0),
			(assign, reg65, reg0),

            (this_or_next|neg|troop_slot_eq,"$g_talk_troop",slot_troop_spouse,-1),#added
               (eq, ":troop_type", ":player_type"),
            ##diplomacy end+
            (assign, ":third_party_introduce", 0),

            (try_for_range, ":lady", kingdom_ladies_begin, kingdom_ladies_end),
               ##diplomacy start+  if promotion is possible this check is necessary
               (troop_slot_eq, ":lady", slot_troop_occupation, slto_kingdom_lady),
               (call_script, "script_dplmc_store_troop_is_female", ":lady"),
               (assign, ":lady_type", reg0),
               #if various genders are possible this check is necessary
               (this_or_next|ge, "$g_disable_condescending_comments", 2),
                  (neq, ":lady_type", ":player_type"),
               ##diplomacy end+
               (troop_slot_eq, ":lady", slot_troop_spouse, -1),
               (troop_slot_eq, ":lady", slot_troop_betrothed, -1),
               (troop_slot_eq, ":lady", slot_troop_cur_center, "$g_encountered_party"),
               (neg|troop_slot_ge, ":lady", slot_troop_courtship_state, 4),

               (call_script, "script_get_kingdom_lady_social_determinants", ":lady"),
               (eq, reg0, "$g_talk_troop"),

               (assign, "$marriage_candidate", ":lady"),
               (call_script, "script_npc_decision_checklist_male_guardian_assess_suitor", "$g_talk_troop", "trp_player"),
               (gt, reg0, 0),

               (assign, ":third_party_introduce", ":lady"),
            (try_end),
            (gt, ":third_party_introduce", 0),
            (troop_slot_eq, ":third_party_introduce", slot_troop_met, 0),

            (call_script, "script_troop_get_family_relation_to_troop", ":third_party_introduce", "$g_talk_troop"),
            ##diplomacy start+
            #This normally cannot happen due to the way that script_get_kingdom_lady_social_determinants works, but it might
            #reasonably be changed in a mod.
            (try_begin),
               (eq, reg0, 0),
               (str_store_string, s11, "@pupil"),#just something to fill the empty space
            (try_end),
            ##diplomacy end+
            (str_store_troop_name, s14, ":third_party_introduce"),
            ],
"By the way, I hope you get a chance to meet my {s11}, {s14}.  ", "lord_start",
[
            (troop_set_slot, "$g_talk_troop", slot_lord_granted_courtship_permission, 1),
            (assign, "$g_romantic_comment_made", 1),
]],


[anyone,"lord_start",[
            (eq, "$g_romantic_comment_made", 0),
            (ge, "$g_talk_troop_relation", 20),
            (troop_slot_ge, "trp_player", slot_troop_renown, 250),
            (assign, ":third_party_introduce", 0),

            (neg|troop_slot_ge, "trp_player", slot_troop_spouse, kingdom_ladies_begin),
            #diplomacy start+
            #extra check since the wife may be a lord
            (neg|troop_slot_ge, "trp_player", slot_troop_spouse, active_npcs_begin),
            #enable this for women as well
            (assign, ":player_type", "$character_gender"),
            ##(neq, ":player_type", tf_female),
            #diplomacy end+


            (try_for_range, ":lady", kingdom_ladies_begin, kingdom_ladies_end),
               ##diplomacy start+  if promotion is possible this check is necessary
               (troop_slot_eq, ":lady", slot_troop_occupation, slto_kingdom_lady),
               (call_script, "script_dplmc_store_troop_is_female", ":lady"),
               (assign, ":lady_type", reg0),
               #if various genders are possible this check is necessary
               (this_or_next|ge, "$g_disable_condescending_comments", 2),
                  (neq, ":lady_type", ":player_type"),
               ##diplomacy end+
               (troop_slot_eq, ":lady", slot_troop_spouse, -1),
               (troop_slot_eq, ":lady", slot_troop_betrothed, -1),
               (troop_slot_eq, ":lady", slot_troop_cur_center, "$g_encountered_party"),
               (neg|troop_slot_ge, ":lady", slot_troop_courtship_state, 4),

               (call_script, "script_get_kingdom_lady_social_determinants", ":lady"),
               (eq, reg0, "$g_talk_troop"),

               (assign, "$marriage_candidate", ":lady"),
               (call_script, "script_npc_decision_checklist_male_guardian_assess_suitor", "$g_talk_troop", "trp_player"),
               (gt, reg0, 0),

               (troop_slot_ge, ":lady", slot_troop_met, 1),

               (store_current_hours, ":hours"),
               (troop_get_slot, ":lady_last_met_hour", ":lady", slot_troop_last_talk_time),
               (val_sub, ":hours", ":lady_last_met_hour"),
               (ge, ":hours", 24),

               (assign, ":third_party_introduce", ":lady"),
            (try_end),

            (gt, ":third_party_introduce", 0),
            (call_script, "script_troop_get_family_relation_to_troop", ":third_party_introduce", "$g_talk_troop"),
            ##diplomacy start+
            #This normally cannot happen due to the way that script_get_kingdom_lady_social_determinants works, but it might
            #reasonably be changed in a mod.
            (try_begin),
               (eq, reg0, 0),
               (str_store_string, s11, "@pupil"),#just something to fill the empty space
            (try_end),
            (assign, reg0, ":lady_type"),#Use the correct pronouns
            (str_store_troop_name, s14, ":third_party_introduce"),

            ],
#"her" to "{reg0?her:him}", "She" to "{reg0?She:he}", "her" to "{reg0?her:his}"
"By the way, I am sure that my {s11}, {s14}, would be delighted were you to pay {reg0?her:him} a visit. {reg0?She:He} awaits you in {reg0?her:his} chambers.", "lord_start",
##diplomacy end+
[
(troop_set_slot, "$g_talk_troop", slot_lord_granted_courtship_permission, 1),
(assign, "$g_romantic_comment_made", 1),

]],



  [anyone,"lord_start", [(party_slot_eq, "$g_encountered_party",slot_town_lord, "$g_talk_troop"),#we are talking to Town's Lord.
                   (ge,"$g_talk_troop_faction_relation",0),
                   (neq, "$g_ransom_offer_rejected", 1),
                   (lt, "$g_encountered_party_2", 0), #town is not under siege
                   (hero_can_join_as_prisoner, "$g_encountered_party"),
                   (store_random_in_range, ":random_no", 0, 100),
                   (lt, ":random_no", 10),#start this conversation with a 10% chance
                   (party_get_num_prisoner_stacks,":num_prisoner_stacks","p_main_party"),
                   (assign, "$prisoner_lord_to_buy", -1),
                   (try_for_range,":i_pris_stack",0,":num_prisoner_stacks"),
                     (party_prisoner_stack_get_troop_id, ":t_id", "p_main_party", ":i_pris_stack"),
                     (troop_slot_eq, ":t_id", slot_troop_occupation, slto_kingdom_hero),
                     (store_troop_faction, ":fac", ":t_id"),
                     (store_relation, ":rel", ":fac", "$g_talk_troop_faction"),
                     (lt,  ":rel", 0),
                     (assign, "$prisoner_lord_to_buy", ":t_id"),
                   (try_end),
                   (gt, "$prisoner_lord_to_buy", 0), #we have a prisoner lord.
                   (assign, ":continue", 1),
                   (try_begin),
                     (check_quest_active, "qst_capture_enemy_hero"),
                     (store_troop_faction, ":prisoner_faction", "$prisoner_lord_to_buy"),
                     (quest_slot_eq, "qst_capture_enemy_hero", slot_quest_target_faction, ":prisoner_faction"),
                     (assign, ":continue", 0),
                   (try_end),
                   (eq, ":continue", 1),
                   (str_store_troop_name, s3, "$prisoner_lord_to_buy"),
                   (assign, reg5, "$prisoner_lord_to_buy"),
                   (call_script, "script_calculate_ransom_amount_for_troop", "$prisoner_lord_to_buy"),
                   (assign, reg6, reg0),
                   (val_div, reg6, 2),
                   (assign, "$temp", reg6),
##diplomacy start+ use the correct pronoun for the enemy lord
                   (call_script, "script_dplmc_store_troop_is_female",  "$prisoner_lord_to_buy"),
                   ],
#"he" to "{reg0?she:he}", etc.
"I heard that you have captured our enemy {s3} and {reg0?she:he} is with you at the moment.\
I can pay you {reg6} denars for {reg0?her:him} if you want to get rid of {reg0?her:him}.\
You can wait for {reg0?her:his} family to pay {reg0?her:his} ransom of course, but there is no telling how long that will take, eh?\
", "lord_buy_prisoner", []],
##diplomacy end+

[anyone|plyr,"lord_buy_prisoner", [],
"I accept your offer. I'll leave {s3} to you for {reg6} denars.", "lord_buy_prisoner_accept", []],
[anyone|plyr,"lord_buy_prisoner", [],
"I fear I can't accept your offer.", "lord_buy_prisoner_deny", [(assign, "$g_ransom_offer_rejected", 1),]],

[anyone,"lord_buy_prisoner_accept", [],
"Excellent! Here's your {reg6} denars.\
I'll send some men to take him to our prison with due haste.", "lord_pretalk", [
(remove_troops_from_prisoners,  "$prisoner_lord_to_buy", 1),
(call_script, "script_troop_add_gold", "trp_player", "$temp"),
(party_add_prisoners, "$g_encountered_party", "$prisoner_lord_to_buy", 1),
#(troop_set_slot, "$prisoner_lord_to_buy", slot_troop_is_prisoner, 1),
(troop_set_slot, "$prisoner_lord_to_buy", slot_troop_prisoner_of_party, "$g_encountered_party"),
]],

[anyone,"lord_buy_prisoner_deny", [],
"Mmm. As you wish, {playername}, but you'll not get a better offer. Take it from me.", "lord_pretalk", []],



[anyone,"lord_start", [
(faction_slot_eq, "$g_talk_troop_faction", slot_faction_ai_state, sfai_feast),
(faction_slot_eq, "$g_talk_troop_faction", slot_faction_ai_object, "$g_encountered_party"),

(check_quest_active, "qst_organize_feast"),
(quest_slot_eq, "qst_organize_feast", slot_quest_target_center, "$g_encountered_party"),


(try_begin),
  (eq, "$g_talk_troop_faction", "fac_kingdom_4"),
  (str_store_string, s5, "str_flagon_of_mead"),
(else_try),
  (store_mod, ":mode", "$g_talk_troop", 2),
  (eq, ":mode", 0),
  (eq, "$g_talk_troop_faction", "fac_kingdom_3"),
  (str_store_string, s5, "str_skin_of_kumis"),
(else_try),
  (store_mod, ":mode", "$g_talk_troop", 2),
  (eq, ":mode", 0),
  (eq, "$g_talk_troop_faction", "fac_kingdom_2"),
  (str_store_string, s5, "str_mug_of_kvass"),
(else_try),
  (str_store_string, s5, "str_cup_of_wine"),
(try_end),



],
"I lift a {s5} to your health, {playername}! You are most gracious to host us on this occasion. Now, what is it?", "lord_talk",[
(call_script, "script_internal_politics_rate_feast_to_s9", "trp_household_possessions", 120, "$players_kingdom", 0),
(assign, ":quality_of_feast", reg0),

(try_begin),
  (ge, ":quality_of_feast", 20),
  (ge, "$g_time_since_last_talk", 24),
  (call_script, "script_troop_change_relation_with_troop", "$g_talk_troop", "trp_player", 1),
(try_end),
]],



[anyone,"lord_start", [
##diplomacy start+ Support the player as the ruler/co-ruler of an NPC kingdom.
(assign, reg0, 0),
(try_begin),
    (is_between, "$g_talk_troop_faction", npc_kingdoms_begin, npc_kingdoms_end),
    (neg|faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "$g_talk_troop"),
    (call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", "$players_kingdom"),
(try_end),
(this_or_next|ge, reg0, DPLMC_FACTION_STANDING_LEADER_SPOUSE),
##diplomacy end+
(faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "trp_player"),
(faction_slot_eq, "$g_talk_troop_faction", slot_faction_ai_state, sfai_feast),
(faction_slot_eq, "$g_talk_troop_faction", slot_faction_ai_object, "$g_encountered_party"),

],
"To your health, {sire/your Highness}. Long may you reign. What is your bidding?", "lord_talk",[
(try_begin),
(this_or_next|party_slot_eq, "$g_encountered_party", slot_town_lord, "trp_player"),
(party_slot_eq, "$g_encountered_party", slot_town_lord, "$g_talk_troop"),
(ge, "$g_time_since_last_talk", 24),
(ge, "$g_talk_troop_relation", 0),
(call_script, "script_troop_change_relation_with_troop", "$g_talk_troop", "trp_player", 1),
(try_end),

]],



[anyone,"lord_start", [
##diplomacy start+ Support the player as the ruler/co-ruler of an NPC kingdom.
(assign, reg0, 0),
(try_begin),
    (is_between, "$g_talk_troop_faction", npc_kingdoms_begin, npc_kingdoms_end),
    (neg|faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "$g_talk_troop"),
    (call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", "$players_kingdom"),
(try_end),
(neg|faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "$g_talk_troop"),
(this_or_next|ge, reg0, DPLMC_FACTION_STANDING_LEADER_SPOUSE),
##diplomacy end+
(faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "trp_player"),
],
"What is your bidding?", "lord_talk",[]],

[anyone,"lord_start", [
(faction_slot_eq, "$g_talk_troop_faction", slot_faction_ai_state, sfai_feast),
(faction_slot_eq, "$g_talk_troop_faction", slot_faction_ai_object, "$g_encountered_party"),
(ge, "$g_encountered_party_relation", 0),
(party_slot_eq, "$g_encountered_party", slot_town_lord, "$g_talk_troop"),
(neq, "$talk_context", tc_castle_gate),
],
"I wish to welcome you to my hall on this auspicious occasion. Now, what is it?", "lord_talk",[
(try_begin),
  (is_between, "$g_talk_troop_relation", 0, 10),
  (ge, "$g_time_since_last_talk", 24),
  (call_script, "script_troop_change_relation_with_troop", "$g_talk_troop", "trp_player", 2),
(try_end),
]],

[anyone,"lord_start", [
(faction_slot_eq, "$g_talk_troop_faction", slot_faction_ai_state, sfai_feast),
(faction_slot_eq, "$g_talk_troop_faction", slot_faction_ai_object, "$g_encountered_party"),
(ge, "$g_encountered_party_relation", 0),
(party_get_slot, ":town_lord", "$g_encountered_party", slot_town_lord),
#SB : unassigned center leftover feast
(try_begin),
  (lt, ":town_lord", 0),
  (faction_get_slot, ":town_lord", "$g_encountered_party", slot_faction_leader),
(try_end),

(str_store_troop_name, s4, ":town_lord"),

(neq, "$talk_context", tc_castle_gate),


(try_begin),
  (eq, "$g_talk_troop_faction", "fac_kingdom_4"),
  (str_store_string, s5, "str_flagon_of_mead"),
(else_try),
  (store_mod, ":mode", "$g_talk_troop", 2),
  (eq, ":mode", 0),
  (eq, "$g_talk_troop_faction", "fac_kingdom_3"),
  (str_store_string, s5, "str_skin_of_kumis"),
(else_try),
  (store_mod, ":mode", "$g_talk_troop", 2),
  (eq, ":mode", 0),
  (eq, "$g_talk_troop_faction", "fac_kingdom_2"),
  (str_store_string, s5, "str_mug_of_kvass"),
(else_try),
  (str_store_string, s5, "str_cup_of_wine"),
(try_end),

],
"Let us lift a {s5} to the health of our host, {s4}. Now, what is it?", "lord_talk",[]],




#  [anyone,"lord_start_2", [],
#   "Yes?", "lord_talk",[]],


#Player lord_talk responses begin

#Political quests begin
[anyone|plyr,"lord_talk", [
(check_quest_active, "qst_offer_gift"),
(quest_slot_eq, "qst_offer_gift", slot_quest_giver_troop, "$g_talk_troop"),

(quest_get_slot, ":target_troop", "qst_offer_gift", slot_quest_target_troop),
(str_store_troop_name, s4, ":target_troop"),
(player_has_item, "itm_furs"),
(player_has_item, "itm_velvet"),
],
"I have the materials for {s4}'s gift.", "offer_gift_quest_complete",[
]],

[anyone,"offer_gift_quest_complete", [
(quest_get_slot, ":target_troop", "qst_offer_gift", slot_quest_target_troop),
##diplomacy start+
#(troop_get_type, reg4, ":target_troop"),
(call_script, "script_dplmc_store_troop_is_female_reg", ":target_troop", 4),
##diplomacy end+
],
"Ah, let me take those. Hopefully this will mend the quarrel between you two. You may wish to speak to {reg4?her:him}, and see if I had any success.", "close_window",[
(quest_set_slot, "qst_offer_gift", slot_quest_current_state, 2),
(troop_remove_item, "trp_player", "itm_furs"),
(quest_set_slot, "qst_offer_gift", slot_quest_expiration_days, 365),
(troop_remove_item, "trp_player", "itm_velvet"),
(assign, "$g_leave_encounter", 1),
]],



[anyone|plyr,"lord_talk", [
(check_quest_active, "qst_intrigue_against_lord"),
(neg|check_quest_succeeded, "qst_intrigue_against_lord"),
(neg|check_quest_failed, "qst_intrigue_against_lord"),

(quest_get_slot, ":target_troop", "qst_intrigue_against_lord", slot_quest_target_troop), #was qst_offer_gift
(store_faction_of_troop, ":target_troop_faction", ":target_troop"),
(faction_slot_eq, ":target_troop_faction", slot_faction_leader, "$g_talk_troop"),
],
##diplomacy start+ Change lord to {reg65?lady:lord}
"My {reg65?lady:lord} -- there is something I wish to tell you in confidence, about one of your vassals.", "intrigue_quest_state_complaint",[
##diplomacy end+
]],

[anyone,"intrigue_quest_state_complaint", [
  (assign, ":continue", 1),
  (try_begin),
    (call_script, "script_cf_troop_can_intrigue", "$g_talk_troop", 1),
    (assign, ":continue", 0),
  (try_end),
  (eq, ":continue", 1),
],
"Whatever you have to say, I would ask you to wait until we are alone.", "lord_pretalk",[
]],

[anyone,"intrigue_quest_state_complaint", [],
##diplomacy start+ change "sew" to "sow"
"What is it? I value your opinion, although I hope that you are not trying to sow dissension among my vassals? ", "intrigue_quest_state_complaint_plyr",[
##diplomacy end+

(quest_get_slot, ":target_troop", "qst_intrigue_against_lord", slot_quest_target_troop),
(call_script, "script_troop_get_relation_with_troop", ":target_troop", "$g_talk_troop"),
(assign, reg4, reg0),
(str_store_troop_name, s4, ":target_troop"),
(assign, reg5, "$g_talk_troop_effective_relation"),

(try_begin),
  (eq, "$cheat_mode", 1),
  (str_store_string, s12, "str_intrigue_success_chance"),
  (display_message, "str_s12_period"),
(try_end),
]],



[anyone|plyr,"intrigue_quest_state_complaint_plyr", [
(check_quest_active, "qst_intrigue_against_lord"),
(quest_get_slot, ":target_troop", "qst_intrigue_against_lord", slot_quest_target_troop),
(str_store_troop_name, s4, ":target_troop"),
(troop_get_slot, ":reputation_string", ":target_troop", slot_lord_reputation_type),
(val_add, ":reputation_string", "str_lord_derogatory_default"),
(str_store_string, s5, ":reputation_string"),
],
"My liege -- {s4} is widely held by your vassals to be {s5}, and a liability to your realm", "lord_intrigue_quest_complaint_stated",[
]],

[anyone|plyr,"intrigue_quest_state_complaint_plyr", [
],
"Actually, my liege, never mind.", "lord_pretalk",[
(call_script, "script_fail_quest", "qst_intrigue_against_lord"),
]],

[anyone,"lord_intrigue_quest_complaint_stated", [
(store_random_in_range, ":random", -50, 50),
(store_add, ":score", "$g_talk_troop_effective_relation", ":random"),

(quest_get_slot, ":target_troop", "qst_intrigue_against_lord", slot_quest_target_troop),
(call_script, "script_troop_get_relation_with_troop", ":target_troop", "$g_talk_troop"),
(ge, ":score", reg0),

],
"Hmm... This is troubling to hear. Although I do not encourage my vassals to speak ill of each other, I value your opinion. Perhaps I should think twice about granting {s4} any further fiefs or offices...", "lord_pretalk",[
(quest_get_slot, ":target_troop", "qst_intrigue_against_lord", slot_quest_target_troop),
(call_script, "script_troop_change_relation_with_troop", "$g_talk_troop", ":target_troop", -10),
(call_script, "script_succeed_quest", "qst_intrigue_against_lord"),
]],

[anyone,"lord_intrigue_quest_complaint_stated", [
],
"Sew discord among my vassals, will you? With everything else going on, do you think I appreciate my nobles turning on each other like quarreling dogs? Let me ask you this -- did someone put you up this?", "intrigue_quest_state_complaint_failed",[
(call_script, "script_fail_quest", "qst_intrigue_against_lord"),
(call_script, "script_troop_change_relation_with_troop", "$g_talk_troop", "trp_player", -5),
]],

[anyone|plyr,"intrigue_quest_state_complaint_failed", [
],
"I stand by my words, my liege.", "intrigue_quest_state_accept_blame",[
(call_script, "script_change_player_honor", 1),
]],

[anyone|plyr,"intrigue_quest_state_complaint_failed", [
(quest_get_slot, ":giver_troop", "qst_intrigue_against_lord", slot_quest_giver_troop),
(quest_get_slot, ":target_troop", "qst_intrigue_against_lord", slot_quest_target_troop),

(str_store_troop_name, s4, ":giver_troop"),
(str_store_troop_name, s5, ":target_troop"),
],
"Yes, sire -- {s4} put me up to denouncing {s5}!", "intrigue_quest_state_deflect_blame",[
(quest_get_slot, ":giver_troop", "qst_intrigue_against_lord", slot_quest_giver_troop),
(call_script, "script_troop_change_relation_with_troop", "$g_talk_troop", ":giver_troop", -5),
(call_script, "script_troop_change_relation_with_troop", "$g_talk_troop", "trp_player", 4),
(call_script, "script_change_player_honor", -2),
]],

[anyone,"intrigue_quest_state_accept_blame", [
],
"Indeed. You may stand by your words, but keep them to yourself. I will not have you undercutting my faithful follower {s4}.", "lord_pretalk",[
]],

[anyone,"intrigue_quest_state_deflect_blame", [
],
"I thought as much. Here's some advice for you, {lad/lassie} -- don't meddle in the quarrels of others. Now, enough of this.", "lord_pretalk",[
]],

[anyone|plyr,"lord_talk", [
(check_quest_active, "qst_denounce_lord"),
(neg|check_quest_succeeded, "qst_denounce_lord"),
(neg|check_quest_failed, "qst_denounce_lord"),

(quest_slot_eq, "qst_denounce_lord", slot_quest_target_troop, "$g_talk_troop"),


(troop_get_slot, ":reputation_string", "$g_talk_troop", slot_lord_reputation_type),
(val_add, ":reputation_string", "str_lord_derogatory_default"),
(str_store_string, s4, ":reputation_string"),
],
"I want to tell you something -- we have had enough of your {s4} ways", "lord_denounce_1",[
]],

[anyone,"lord_denounce_1", [
],
"I'm sorry... What did you say?", "lord_denounce_2",[
]],

[anyone|plyr,"lord_denounce_2", [

(troop_get_slot, ":reputation_string", "$g_talk_troop", slot_lord_reputation_type),
(val_add, ":reputation_string", "str_lord_derogatory_result"),
(str_store_string, s4, ":reputation_string"),

],
"You heard me. You will {s4}", "lord_denounce_3",[
(call_script, "script_troop_change_relation_with_troop", "$g_talk_troop", "trp_player", -15),


(store_div, ":impact", "$g_talk_troop_relation", 10),
(val_add, ":impact", 1),
(val_max, ":impact", 1),
(val_mul, ":impact", -1),

#Change his respect level, slightly.  In the future game, there should be more sophisticated metrics for this
(try_for_range, ":other_lord", active_npcs_begin, active_npcs_end),
(neq, "$g_talk_troop", ":other_lord"),
(store_faction_of_troop, ":other_lord_faction",":other_lord"),
(eq, ":other_lord_faction", "$g_talk_troop_faction"),
(call_script, "script_troop_get_relation_with_troop", ":other_lord", "$g_talk_troop"),
(lt, reg0, 15),
(call_script, "script_troop_change_relation_with_troop", ":other_lord", "$g_talk_troop", ":impact"),
(try_end),



]],

[anyone|plyr,"lord_denounce_2", [
],
"Never mind. You must have misheard me.", "lord_pretalk",[
]],


[anyone,"lord_denounce_3", [
(ge, "$g_talk_troop_relation", 10),
##diplomacy start+
#The "this_or_next" is almost certainly a mistake, because it will always be true.  Correcting it.
#(this_or_next|neg|troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_quarrelsome),
(neg|troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_quarrelsome),
(neg|troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_martial),
],
"Why would you say such a thing? To insult me like this, in spite of our friendship -- how much crueler is a knife in my back from an erstwhile friends, than the sword of a sworn foe. I do not know what game you are playing, but I want no part of it. Go away. I do not want to look at you.", "close_window",[
(call_script, "script_succeed_quest", "qst_denounce_lord"),
]],

[anyone,"lord_denounce_3", [
(troop_slot_ge, "trp_player", slot_troop_renown, dplmc_command_renown_limit), #SB : renown const
##diplomacy start+ Support additional personality types
(assign, reg0, 0),
(try_begin),
   (troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_none),
   (this_or_next|is_between, "$g_talk_troop", kings_begin, kings_end),
   (is_between, "$g_talk_troop", pretenders_begin, pretenders_end),
   (assign, reg0, 1),
(try_end),
(this_or_next|eq, reg0, 1),
(this_or_next|troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_ambitious),
##diplomacy end+
(this_or_next|troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_cunning),
(this_or_next|troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_upstanding),
(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_goodnatured),
],
"Hmf. Really? Is that your opinion, or did one of my rivals put those words in your mouth? Never mind. I will not play your game. Go away, and take your intrigues with you.", "close_window",[
(call_script, "script_succeed_quest", "qst_denounce_lord"),
]],

[anyone,"lord_denounce_3", [
##diplomacy start+ Support additional personality types
(this_or_next|troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_conventional),
(this_or_next|troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_otherworldly),
(this_or_next|troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_moralist),
##diplomacy end+
(this_or_next|troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_martial),
(this_or_next|troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_cunning),
(this_or_next|troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_upstanding),
(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_goodnatured),
],
"I will not have you shame me in public, {sir/my lady}. Retract your words, or meet me on the duelling ground.", "lord_denounce_4",[
]],

[anyone,"lord_denounce_3", [
],
##diplomacy start+ Change "knave" to vary with gender
"Is that so? Well, hear this -- you're a snake, and a {knave/strumpet}, and -- if you don't meet me on the duelling ground -- a coward. What say you to that? Do you retract your words, or shall we cross swords?", "lord_denounce_4",[
##diplomacy end+
]],

[anyone|plyr,"lord_denounce_4", [
],
"It would be a pleasure to fight you.", "lord_respond_to_insult_challenge_duel_confirm",[
]],

[anyone|plyr,"lord_denounce_4", [
],
"I spoke rashly. I retract my words.", "lord_denounce_retract",[
(call_script, "script_fail_quest", "qst_denounce_lord"),

]],

[anyone,"lord_denounce_retract", [
],
"I thought as much. Now, be gone from here.", "lord_pretalk",[
]],






[anyone|plyr,"lord_talk", [
(eq, "$g_comment_has_rejoinder", 1),
(assign, "$g_comment_has_rejoinder", 0),
(str_store_string, s9, "$g_rejoinder_to_last_comment"),
],
"{s9}", "lord_respond_to_insult",[

        (try_begin),
            (troop_get_type, ":is_female", "trp_player"),
            (eq, ":is_female", 1),
(unlock_achievement, ACHIEVEMENT_SASSY),
        (try_end),
]],


#lord recruitment changes begin
[anyone,"lord_pretalk", [
(lt, "$g_encountered_party_relation", 0),
(encountered_party_is_attacker),
],
"But enough talking -- yield or fight!", "party_encounter_lord_hostile_attacker_2",[]],
#lord recruitment changes end




[anyone,"lord_pretalk", [],
"Anything else?", "lord_talk",[]],



[anyone,"hero_pretalk", [],
"Anything else?", "lord_talk",[]],

##### TODO: QUESTS COMMENT OUT BEGIN


#lord recruitment changes begin
[anyone|plyr,"lord_talk",[
                      (check_quest_active, "qst_resolve_dispute"),
               (quest_get_slot, ":lord_1", "qst_resolve_dispute", slot_quest_target_troop),
               (quest_get_slot, ":lord_2", "qst_resolve_dispute", slot_quest_object_troop),

               (assign, ":other_lord", 0),
               (try_begin),
                  (eq, ":lord_1", "$g_talk_troop"),
                  (quest_slot_eq, "qst_resolve_dispute", slot_quest_target_state, 0),
                  (assign, "$g_other_lord", ":lord_2"),
                  (assign, ":other_lord", ":lord_2"),

               (else_try),
                  (eq, ":lord_2", "$g_talk_troop"),
                  (quest_slot_eq, "qst_resolve_dispute", slot_quest_object_state, 0),
                  (assign, "$g_other_lord", ":lord_1"),
                  (assign, ":other_lord", ":lord_1"),

               (try_end),
               (gt, ":other_lord", 0),
               (str_store_troop_name, s11, "$g_other_lord"),
                      ],
"I wish to address your quarrel with {s11}", "lord_quarrel_intervention_1",
[]],



[anyone|plyr,"lord_talk",[#(troop_slot_eq, "$g_talk_troop", slot_troop_is_prisoner, 0),
                      (neg|troop_slot_ge, "$g_talk_troop", slot_troop_prisoner_of_party, 0),
               (encountered_party_is_attacker),
               (neg|is_between, "$g_talk_troop", pretenders_begin, pretenders_end),
               (neg|faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "$g_talk_troop"),

                      ],
"Stay your hand! There is something I must say to you in private.", "lord_recruit_1_relation",
[]],


[anyone|plyr,"lord_talk",
[(check_quest_active, "qst_track_down_bandits"),
(neg|check_quest_succeeded, "qst_track_down_bandits"),
(neg|troop_slot_ge, "$g_talk_troop", slot_troop_prisoner_of_party, 1),


], "I am hunting a group of bandits with the following description... Have you seen them?", "lord_bandit_information",[]],
[anyone,"lord_bandit_information", [
(call_script, "script_get_manhunt_information_to_s15", "qst_track_down_bandits"),
], "{s15}", "lord_pretalk",[]],


[anyone|plyr,"lord_talk",[#(troop_slot_eq, "$g_talk_troop", slot_troop_is_prisoner, 0),
                      (eq, "$g_talk_troop_faction", "$players_kingdom"),
               (faction_slot_eq, "$players_kingdom", slot_faction_political_issue, 1),
                      ],
"Who do you think should be made the marshal of our realm?", "lord_internal_politics_cur_stance",
[]],

[anyone|plyr,"lord_talk",[#(troop_slot_eq, "$g_talk_troop", slot_troop_is_prisoner, 0),
                      (eq, "$g_talk_troop_faction", "$players_kingdom"),
               (faction_get_slot, ":political_issue", "$players_kingdom", slot_faction_political_issue),
               (is_between, ":political_issue", centers_begin, centers_end),
               (str_store_party_name, s4, ":political_issue"),
                      ],
##diplomacy start+ fix grammatical error (change "whom" to "who")
"Who do you think should receive the fief of {s4}?", "lord_internal_politics_cur_stance",
##diplomacy end+
[]],


[anyone|plyr,"lord_talk",[
               ##diplomacy start+ This seemingly redundant condition is for a polygamy implementation
               (this_or_next|troop_slot_eq, "$g_talk_troop", slot_troop_spouse, "trp_player"),
               ##diplomacy end+
               (troop_slot_eq, "trp_player", slot_troop_spouse, "$g_talk_troop"),
               (troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_hero),
               (is_between, "$players_kingdom", kingdoms_begin, kingdoms_end),
               (neq, "$g_talk_troop_faction", "$players_kingdom"),
			   ##diplomacy start+
			   (assign, ":npc_homage", 0),
			   (try_begin),
				  (is_between, "$players_kingdom", npc_kingdoms_begin, npc_kingdoms_end),
				  (eq, "$player_has_homage", 1),
				  (assign, ":npc_homage", 1),
			   (try_end),
			   (this_or_next|eq, ":npc_homage", 1),
			   ##diplomacy end+
               (faction_slot_eq, "fac_player_supporters_faction", slot_faction_state, sfs_active),
#							(faction_slot_eq, "fac_player_supporters_faction", slot_faction_leader, "trp_player"),
            ##diplomacy start+ Guard against invalid leader
            (try_begin),
               (faction_slot_ge, "$g_talk_troop_faction", slot_faction_leader, 1),
            ##diplomacy end+
               (faction_get_slot, ":faction_leader", "$g_talk_troop_faction", slot_faction_leader),
               (str_store_troop_name, s4, ":faction_leader"),
            ##diplomacy start+ Alternative for invalid leader
            (else_try),
               (str_store_faction_name, s4, "$g_talk_troop_faction"),
            (try_end),
            ##diplomacy end+
               (str_store_faction_name, s5, "$players_kingdom"),
                                                                                           ],
##diplomacy start+ either gender PC can marry opposite-gender lords
"I need you to renounce your allegiance to {s4} and join the {s5} now, my {reg65?wife:husband}.", "lord_husband_auto_recruit",
##diplomacy end+
[]],

[anyone,"lord_husband_auto_recruit",
[
(is_between, "$g_encountered_party", centers_begin, centers_end),
(neg|party_slot_eq, "$g_encountered_party", slot_town_lord, "$g_talk_troop"),
##diplomacy start+ load relation text into s0
(call_script, "script_dplmc_print_player_spouse_says_my_husband_wife_to_s0", "$g_talk_troop", 0),
##diplomacy end+
],
##diplomacy start+ either gender PC can marry opposite-gender lords
"Ask me again when we are outside of these walls, {s0}.", "lord_pretalk",
##diplomacy end+
[]],

[anyone,"lord_husband_auto_recruit",
[
(is_between, "$g_encountered_party", centers_begin, centers_end),
(neg|party_slot_eq, "$g_encountered_party", slot_town_lord, "$g_talk_troop"),
##diplomacy start+ load relation text into s0
(call_script, "script_dplmc_print_player_spouse_says_my_husband_wife_to_s0", "$g_talk_troop", 0),
##diplomacy end+
],
##diplomacy start+ either gender PC can marry opposite-gender lords
"Ask me again when we are outside of these walls, {s0}.", "lord_pretalk",
##diplomacy end+
[]],

##diplomacy start+  Do not always accept
#(The spouse almost always should, but refuse in edge cases)
[anyone,"lord_husband_auto_recruit",[
	#Don't apply it to former comrades under arms
	(this_or_next|neg|is_between, "$g_talk_troop", companions_begin, companions_end),
		(troop_slot_eq, "$g_talk_troop", slot_troop_playerparty_history, dplmc_pp_history_nonplayer_entry),
	(this_or_next|neg|is_between, "$g_talk_troop", pretenders_begin, pretenders_end),
		(troop_slot_eq, "$g_talk_troop", slot_troop_playerparty_history, dplmc_pp_history_nonplayer_entry),
	#Only apply reluctance when being recruited from an actual kingdom
	(is_between, "$g_talk_troop_faction", kingdoms_begin, kingdoms_end),
	#Other special cases
	(faction_get_slot, ":new_leader", "$players_kingdom", slot_faction_leader),
	(faction_get_slot, ":old_leader", "$g_talk_troop_faction", slot_faction_leader),
	(ge, ":new_leader", 0),
	(ge, ":old_leader", 0),
	(neq, ":old_leader", "trp_player"),
	#Don't apply if in an alliance
	(call_script, "script_dplmc_get_faction_truce_length_with_faction", "$g_talk_troop_faction", "$players_kingdom"),
	(lt, reg0, dplmc_treaty_alliance_days_expire + 1),
	#Certain personalities are more compliant than others
	(troop_get_slot, ":reputation", "$g_talk_troop", slot_lord_reputation_type),
	(neq, ":reputation", lrep_conventional),
	(neq, ":reputation", lrep_otherworldly),

	(call_script, "script_troop_get_relation_with_troop", "$g_talk_troop", ":old_leader"),
	(assign, ":old_score", reg0),

	(assign, ":new_score", "$g_talk_troop_effective_relation"),
	(try_begin),
		(this_or_next|eq, ":new_leader", "trp_player"),
			(eq, "$players_kingdom", "fac_player_supporters_faction"),
		(val_max, ":new_score", "$g_talk_troop_effective_relation"),
		(game_get_reduce_campaign_ai, ":reduce_campaign_ai"),
		(assign, reg0, 20),#required right to rule
		(try_begin),
			(eq, ":reduce_campaign_ai", 0),#hard: penalty for every point below 75, bonus for every point above
			(assign, reg0, 75),
		(else_try),
			(eq, ":reduce_campaign_ai", 1),#normal: penalty for every point below 50, bonus for every point above
			(assign, reg0, 50),
		(else_try),
			(eq, ":reduce_campaign_ai", 2),#easy: penalty for every point below 25, bonus for every point above
			(assign, reg0, 20),
		(try_end),
		(val_add, ":new_score", "$player_right_to_rule"),
		(val_sub, ":new_score", reg0),
	(else_try),
		(call_script, "script_troop_get_relation_with_troop", "$g_talk_troop", ":new_leader"),
		(gt, reg0, "$g_talk_troop_relation"),
		#Use new leader's relation if better than relation with player
		(assign, ":new_score", reg0),
		#Modify using persuasion score
		(store_skill_level, ":persuasion", "skl_persuasion", "trp_player"),
		(ge, ":persuasion", 1),
		(try_begin),
   			(ge, ":new_score", 0),
			(store_add, reg0, ":persuasion", 10),
			(val_mul, ":new_score", reg0),
			(val_div, ":new_score", 10),
		(else_try),
			(store_sub, reg0, 20, ":persuasion"),
			(val_mul, ":new_score", reg0),
			(val_div, ":new_score", 20),
		(try_end),
	(try_end),

	(try_begin),
		(troop_slot_eq, "$g_talk_troop", slot_troop_original_faction, "$players_kingdom"),
		(store_mul, reg0, ":new_score", 2),
		(val_add, ":new_score", 10),
		(val_max, ":new_score", reg0),
	(else_try),
		(troop_slot_eq, "$g_talk_troop", slot_troop_original_faction, "$g_talk_troop_faction"),
		(store_mul, reg0, ":old_score", 2),
		(val_add, ":old_score", 10),
		(val_max, ":old_score", reg0),
		(eq, ":reputation", lrep_upstanding),
		(store_add, reg0, ":old_score", 5),
		(val_mul, ":old_score", 3),
		(val_div, ":old_score", 2),
		(val_max, ":old_score", reg0),
	(try_end),

	#Refuse to switch
	(ge, ":old_score", ":new_score"),
	(try_begin),
		(ge, "$cheat_mode", 1),
		(assign, reg0, ":old_score"),
		(assign, reg1, ":new_score"),
		(display_message, "@{!} DEBUG - current kingdom score {reg0} vs player kingdom score {reg1}"),
	(try_end),
	(str_store_faction_name, s2, "$g_talk_troop_faction"),
#TODO: customize message by personality
], "I must remain loyal to {s14}. I am sorry.", "lord_pretalk",
[]],
##diplomacy end+

[anyone,"lord_husband_auto_recruit",
[
##either gender PC can marry opposite-gender lords
#load relation text into s0
(call_script, "script_dplmc_print_player_spouse_says_my_husband_wife_to_s0", "$g_talk_troop", 0),
], "As you wish, {s0}.", "close_window",
##diplomacy end+
[
(assign, "$g_leave_encounter", 1),
(call_script, "script_change_troop_faction", "$g_talk_troop", "$players_kingdom"),

(try_begin), #Actually, perhaps do provocation rather than war
  (store_relation, ":relation", "$players_kingdom", "$g_talk_troop_faction"),
  (ge, ":relation", 0),

  (try_begin),
    (eq, "$cheat_mode", 1),
    (display_message, "str_lord_recruitment_provokes_home_faction"),
  (try_end),

  (call_script, "script_add_log_entry", logent_border_incident_troop_suborns_lord, "trp_player", -1, "$g_talk_troop","$g_talk_troop_faction"),
  (store_add, ":slot_provocation_days", "$players_kingdom", slot_faction_provocation_days_with_factions_begin),
  (val_sub, ":slot_provocation_days", kingdoms_begin),
  (faction_set_slot, "$g_talk_troop_faction", ":slot_provocation_days", 30),

  (faction_get_slot, ":other_liege", "$g_talk_troop_faction", slot_faction_leader),
  (call_script, "script_troop_change_relation_with_troop", "trp_player", ":other_liege", -3),
(try_end),

(try_begin),
(faction_slot_eq, "$players_kingdom", slot_faction_leader, "trp_player"),
(call_script, "script_change_player_right_to_rule", 5),
(try_end),
]],



[anyone|plyr,"lord_talk",[#(troop_slot_eq, "$g_talk_troop", slot_troop_is_prisoner, 0),
                      ##diplomacy start+ This seemingly redundant condition is for a polygamy implementation
                      (this_or_next|troop_slot_eq, "$g_talk_troop", slot_troop_spouse, "trp_player"),
                      ##diplomacy end+
                      (troop_slot_eq, "trp_player", slot_troop_spouse, "$g_talk_troop"),
                      ],
"There is a matter which I would like to discuss in private.", "lord_recruit_1_relation",
[]],



[anyone|plyr,"lord_talk",[#(troop_slot_eq, "$g_talk_troop", slot_troop_is_prisoner, 0),
                      (neg|troop_slot_ge, "$g_talk_troop", slot_troop_prisoner_of_party, 0),
               (neg|encountered_party_is_attacker),
               (neg|is_between, "$g_talk_troop", pretenders_begin, pretenders_end),
               (neg|faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "$g_talk_troop"),
                      (neg|troop_slot_eq, "trp_player", slot_troop_spouse, "$g_talk_troop"),
               ##diplomacy start+
 			   (neg|troop_slot_eq, "$g_talk_troop", slot_troop_spouse, "trp_player"),
               (call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", "$g_talk_troop_faction"),
               (lt, reg0, DPLMC_FACTION_STANDING_LEADER_SPOUSE),
			   (call_script, "script_dplmc_get_troop_standing_in_faction", "$g_talk_troop", "$g_talk_troop_faction"),
               (lt, reg0, DPLMC_FACTION_STANDING_LEADER_SPOUSE),
			   #This seemingly redundant condition is for a polygamy implementation
               (neg|troop_slot_eq, "$g_talk_troop", slot_troop_spouse, "trp_player"),
               ##diplomacy end+
               (neq, "$g_talk_troop_faction", "fac_player_supporters_faction"),
               #other requirements
                      ],
"There is something which I would like to discuss with to you in private.", "lord_recruit_1_relation",
[]],


[anyone|plyr,"lord_talk",[#(troop_slot_eq, "$g_talk_troop", slot_troop_is_prisoner, 0),
                      (troop_slot_ge, "$g_talk_troop", slot_troop_intrigue_impatience, 1),
               (eq, "$cheat_mode", 1),

               #other requirements

                      ],
"CHEAT -- Reset lord decision seed and intrigue impatience", "lord_talk",
[
(troop_set_slot, "$g_talk_troop", slot_troop_intrigue_impatience, 0),
(store_random_in_range, ":random", 0, 9999),
(troop_set_slot, "$g_talk_troop", slot_troop_temp_decision_seed, ":random"),
]],

[anyone|plyr,"lord_talk",[(eq, "$cheat_mode", 1),
                      ],
"CHEAT -- Let's duel (insult)", "lord_respond_to_insult_challenge_duel",
[
]],



#Respond to insult
[anyone,"lord_respond_to_insult", [
(eq, "$g_last_comment_copied_to_s42", "str_comment_intro_female_sadistic_admiring"),
], "Hah! I admire a quick tongue. Perhaps some day I shall remove it, with tongs, to admire it at greater leisure, but today, at least, I shall salute your wit and courage.", "lord_pretalk", [
(call_script, "script_troop_change_relation_with_troop", "trp_player", "$g_talk_troop", 5),
(call_script, "script_change_troop_renown", "trp_player", 2),
]],


[anyone,"lord_respond_to_insult", [
(this_or_next|eq, "$g_last_comment_copied_to_s42", "str_comment_intro_female_pitiless_admiring"),
(this_or_next|eq, "$g_last_comment_copied_to_s42", "str_comment_intro_female_common_upstanding"),
(this_or_next|eq, "$g_last_comment_copied_to_s42", "str_comment_intro_female_noble_upstanding"),
(this_or_next|eq, "$g_last_comment_copied_to_s42", "str_comment_intro_female_common_martial"),
(eq, "$g_last_comment_copied_to_s42", "str_comment_intro_female_badtempered_admiring"),
##diplomacy start+
], "I meant no offense, {sir/madame}.", "lord_pretalk", [#madame to {sir/madame}
##diplomacy end+
(call_script, "script_troop_change_relation_with_troop", "trp_player", "$g_talk_troop", -2),
(call_script, "script_change_troop_renown", "trp_player", 2),
]],


[anyone,"lord_respond_to_insult", [
(troop_slot_eq, "$g_talk_troop", slot_troop_leaded_party, "$g_encountered_party"),
(store_party_size_wo_prisoners, ":lord_party_size", "$g_talk_troop_party"),
(store_party_size_wo_prisoners, ":player_party_size", "p_main_party"),
(val_mul, ":player_party_size", 3),
(val_div, ":player_party_size", 2),
##diplomacy start+
#Check perceived strength as well as raw numbers
(call_script, "script_dplmc_party_calculate_strength_in_terrain", "$g_encountered_party", -1, 0, 0),
(assign, ":lord_party_score", reg1),
(call_script, "script_dplmc_party_calculate_strength_in_terrain", "p_main_party", -1, 0, 0),
(assign, ":player_party_score", reg1),
(val_mul, ":player_party_score", 3),
(val_div, ":player_party_score", 2),

#Aggressive lords require less of an advantage to fight
(call_script, "script_dplmc_store_troop_personality_caution_level", "$g_talk_troop"),
(try_begin),
	(lt, reg0, 0),#Negative caution means aggressive
	(val_mul, ":lord_party_size", 5),
	(val_div, ":lord_party_size", 4),
	(val_mul, ":lord_party_score", 5),
	(val_div, ":lord_party_score", 4),
(try_end),
(this_or_next|gt, ":lord_party_score", ":player_party_score"),
##diplomacy end+
(gt, ":lord_party_size", ":player_party_size"),
(neq, "$players_kingdom",  "$g_talk_troop_faction"),
##diplomacy start+
#Make "no obligation to duel women..." line change depending on sexism settings.
(try_begin),
   (call_script, "script_cf_dplmc_faction_has_bias_against_gender", "$g_talk_troop_faction", 1),
   (assign, reg0, 1),
   (assign, reg1, 0),
(else_try),
   (neq, reg65, 0),
   (call_script, "script_cf_dplmc_faction_has_bias_against_gender", "$g_talk_troop_faction", 0),
   (assign, reg0, 0),
   (assign, reg1, 1),
(else_try),
   (assign, reg0, 0),
   (assign, reg1, 0),
(try_end),
# "Are you trying to provoke me? Well, I would have you know that I am under no obligation to duel women, commoners, rebels, or brigands. I could
#, however, order my men to seize you and horsewhip you. Would you like them to do that?", "lord_respond_to_insult_challenge_battle",
], "Are you trying to provoke me? Well, I would have you know that I am under no obligation to duel {reg0?women:{reg1?boys:fools}}, commoners, rebels, or brigands. I could, however, order my {reg1?{reg65?women:soldiers}:{reg65?soldiers:men}} to seize you and horsewhip you. Would you like them to do that?", "lord_respond_to_insult_challenge_battle",
##diplomacy end+
[
(call_script, "script_troop_change_relation_with_troop", "trp_player", "$g_talk_troop", -10),
(call_script, "script_change_troop_renown", "trp_player", 2),
]],

[anyone,"lord_respond_to_insult", [
##diplomacy start+
#Make "no obligation to duel women..." line change depending on sexism settings.
(try_begin),
   (call_script, "script_cf_dplmc_faction_has_bias_against_gender", "$g_talk_troop_faction", 1),
   (assign, reg0, 1),
   (assign, reg1, 0),
(else_try),
   (neq, reg65, 0),
   (call_script, "script_cf_dplmc_faction_has_bias_against_gender", "$g_talk_troop_faction", 0),
   (assign, reg0, 0),
   (assign, reg1, 1),
(else_try),
   (assign, reg0, 0),
   (assign, reg1, 0),
(try_end),
#], "Are you trying to provoke me? Well, I would have you know that I am under no obligation to duel women, commoners, rebels, or brigands. However#, in your case, I would be delighted to make an exception. Are you ready for a lesson in deference to your betters, {varlot/girl}?", "lord_respond#_to_insult_challenge_duel",
], "Are you trying to provoke me? Well, I would have you know that I am under no obligation to duel {reg0?women:{reg1?boys:fools}}, commoners, rebels, or brigands. However, in your case, I would be delighted to make an exception. Are you ready for a lesson in deference to your betters, {varlot/girl}?", "lord_respond_to_insult_challenge_duel",
##diplomacy end+
[
(call_script, "script_troop_change_relation_with_troop", "trp_player", "$g_talk_troop", -10),
(call_script, "script_change_troop_renown", "trp_player", 2),
]],

[anyone,"lord_respond_to_insult", [
##diplomacy start+
#Make "no obligation to duel women..." line change depending on sexism settings.
(try_begin),
   (call_script, "script_cf_dplmc_faction_has_bias_against_gender", "$g_talk_troop_faction", 1),
   (assign, reg0, 1),
   (assign, reg1, 0),
(else_try),
   (neq, reg65, 0),
   (call_script, "script_cf_dplmc_faction_has_bias_against_gender", "$g_talk_troop_faction", 0),
   (assign, reg0, 0),
   (assign, reg1, 1),
(else_try),
   (assign, reg0, 0),
   (assign, reg1, 0),
(try_end),
#], "Are you trying to provoke me? Well, I would have you know that I am under no obligation to duel women, commoners, rebels, or brigands. You are lucky that I am in a good mood, because I am perfectly within my rights to order my men to seize you and horsewhip you. Now begone -- I have had enough of you.", "close_window",
], "Are you trying to provoke me? Well, I would have you know that I am under no obligation to duel {reg0?women:{reg1?boys:fools}}, commoners, rebels, or brigands. You are lucky that I am in a good mood, because I am perfectly within my rights to order my {reg1?{reg65?women:soldiers}:{reg65?soldiers:men}} to seize you and horsewhip you. Now begone -- I have had enough of you.", "close_window",
##diplomacy end+
[
(call_script, "script_troop_change_relation_with_troop", "trp_player", "$g_talk_troop", -10),
(call_script, "script_change_troop_renown", "trp_player", 2),
(assign, "$g_leave_encounter", 1),
]],


[anyone|plyr,"lord_respond_to_insult_challenge_battle", [
], "I would like to see them try.", "lord_respond_to_insult_challenge_battle_confirm",
[
(call_script, "script_troop_change_relation_with_troop", "trp_player", "$g_talk_troop", -10),
(call_script, "script_change_troop_renown", "trp_player", 3),
]],

[anyone|plyr,"lord_respond_to_insult_challenge_battle", [
], "This is not worth the shedding of blood.", "close_window",
[
(assign, "$g_leave_encounter", 1),
]],

[anyone,"lord_respond_to_insult_challenge_battle_confirm", [
], "Enough of your insolence! At {him/her}, lads!", "close_window",
[
(call_script, "script_encounter_agent_draw_weapon"), #SB : draw weapon
(assign, "$g_private_battle_with_troop", "$g_talk_troop"),
(assign, "$cant_leave_encounter", 1),
(assign, "$encountered_party_friendly", 0),
(jump_to_menu, "mnu_simple_encounter"),
]],

[anyone|plyr,"lord_respond_to_insult_challenge_duel", [
], "I am ready to teach you one.", "lord_respond_to_insult_challenge_duel_confirm",
[
(str_store_troop_name_link, s13, "$g_talk_troop"),
(setup_quest_text, "qst_duel_avenge_insult"),
##diplomacy start+ use correct pronoun for gender
(call_script, "script_dplmc_store_troop_is_female_reg", "$g_talk_troop", 4),
##diplomacy end+
(str_store_string, s2, "str_you_intend_to_challenge_s13_to_force_him_to_retract_an_insult"),

(call_script, "script_start_quest", "qst_duel_avenge_insult", "$g_talk_troop"),
(quest_set_slot, "qst_duel_avenge_insult", slot_quest_target_troop, "$g_talk_troop"),

(call_script, "script_troop_change_relation_with_troop", "trp_player", "$g_talk_troop", -10),
]],

[anyone|plyr,"lord_respond_to_insult_challenge_duel", [
], "This is not worth the shedding of blood.", "close_window",
[
(assign, "$g_leave_encounter", 1),
]],


[anyone,"lord_respond_to_insult_challenge_duel_confirm", [
], "So be it. Defend yourself!", "close_window",
[
(call_script, "script_encounter_agent_draw_weapon"), #SB : add weapon drawing
(call_script, "script_set_up_duel_with_troop", "$g_talk_troop", "$cheat_mode"), #SB : last parameter, in the field
]],



[anyone,"lord_quarrel_intervention_1", [

##diplomacy start+
(assign, ":other_lord_is_female", 0),
(try_begin),
   (call_script, "script_cf_dplmc_troop_is_female", "$g_other_lord"),
   (assign, ":other_lord_is_female", 1),
(try_end),
(assign, reg3, ":other_lord_is_female"),
(assign, reg4, ":other_lord_is_female"),
##diplomacy end+
(str_store_string, s14, "str_general_quarrel"),
(assign, "$temp", "$g_other_lord"),

(assign, ":specific_quarrel_found", 0),
(store_add, ":log_entries_plus_one", "$num_log_entries", 1),
(try_for_range, ":log_entry_no", 1, ":log_entries_plus_one"),
(troop_slot_eq, "trp_log_array_entry_type", ":log_entry_no", logent_ruler_intervenes_in_quarrel),
(troop_slot_eq, "trp_log_array_troop_object", ":log_entry_no", "$temp"),
(troop_slot_eq, "trp_log_array_center_object", ":log_entry_no", "$g_talk_troop"),
(troop_slot_eq, "trp_log_array_faction_object", ":log_entry_no", "$g_talk_troop_faction"),

(call_script, "script_get_relevant_comment_for_log_entry", ":log_entry_no"),
(str_store_string, s14, reg0),
(assign, ":specific_quarrel_found", 1),
(else_try),
(troop_slot_eq, "trp_log_array_entry_type", ":log_entry_no", logent_lord_protests_marshall_appointment),
(troop_slot_eq, "trp_log_array_actor", ":log_entry_no", "$g_talk_troop"),
(troop_slot_eq, "trp_log_array_center_object", ":log_entry_no", "$temp"),
(call_script, "script_get_relevant_comment_for_log_entry", ":log_entry_no"),
(str_store_string, s14, reg0),
(assign, ":specific_quarrel_found", 1),
(else_try),
(troop_slot_eq, "trp_log_array_entry_type", ":log_entry_no", logent_lord_blames_defeat),
(troop_slot_eq, "trp_log_array_actor", ":log_entry_no", "$g_talk_troop"),
(troop_slot_eq, "trp_log_array_center_object", ":log_entry_no", "$temp"),
(call_script, "script_get_relevant_comment_for_log_entry", ":log_entry_no"),
(str_store_string, s14, reg0),
(assign, ":specific_quarrel_found", 1),
(else_try),
(troop_slot_eq, "trp_log_array_entry_type", ":log_entry_no", logent_troop_feels_cheated_by_troop_over_land),
(troop_slot_eq, "trp_log_array_actor", ":log_entry_no", "$g_talk_troop"),
(troop_slot_eq, "trp_log_array_troop_object", ":log_entry_no",  "$temp"),
(call_script, "script_get_relevant_comment_for_log_entry", ":log_entry_no"),
(str_store_string, s14, reg0),
(assign, ":specific_quarrel_found", 1),
(else_try),
(troop_slot_eq, "trp_log_array_entry_type", ":log_entry_no", logent_lords_quarrel_over_woman),
(troop_slot_eq, "trp_log_array_actor", ":log_entry_no", "$g_talk_troop"),
(troop_slot_eq, "trp_log_array_center_object", ":log_entry_no", "$temp"),
(call_script, "script_get_relevant_comment_for_log_entry", ":log_entry_no"),
##diplomacy start+ set gender for courted lady
(troop_get_slot, ":courted_lady", "trp_log_array_troop_object", ":log_entry_no"),
(assign, reg4, 0),
(try_begin),
   (call_script, "script_cf_dplmc_troop_is_female", ":courted_lady"),
	(assign, reg4, 1),
(try_end),
##diplomacy end+
(str_store_string, s14, reg0),
(assign, ":specific_quarrel_found", 1),
(else_try),
(troop_slot_eq, "trp_log_array_entry_type",  ":log_entry_no", logent_lords_quarrel_over_woman),
(troop_slot_eq, "trp_log_array_actor", ":log_entry_no", "$temp"),
(troop_slot_eq, "trp_log_array_center_object", ":log_entry_no", "$g_talk_troop"),
(call_script, "script_get_relevant_comment_for_log_entry", ":log_entry_no"),
##diplomacy start+ set gender for courted lady
(troop_get_slot, ":courted_lady", "trp_log_array_troop_object", ":log_entry_no"),
(assign, reg4, 0),
(try_begin),
   (call_script, "script_cf_dplmc_troop_is_female", ":courted_lady"),
	(assign, reg4, 1),
(try_end),
##diplomacy end+
(str_store_string, s14, reg0),
(assign, ":specific_quarrel_found", 1),
(try_end),

(try_begin),
(eq, ":specific_quarrel_found", 0),
(call_script, "script_troop_describes_quarrel_with_troop_to_s14", "$g_talk_troop", "$temp"),
(try_end),

],
"{s14}", "lord_quarrel_intervention_2",
[]],


[anyone|plyr,"lord_quarrel_intervention_2",[],
"Ah, well. It sounds like you're in the right, then.", "lord_quarrel_intervention_3a",
[
(call_script, "script_troop_change_relation_with_troop", "trp_player", "$g_other_lord", -20),
(call_script, "script_troop_change_relation_with_troop", "trp_player", "$g_talk_troop", 10),
(try_begin),
(faction_slot_eq, "fac_player_supporters_faction", slot_faction_leader, "trp_player"),
(call_script, "script_add_log_entry", logent_ruler_intervenes_in_quarrel, "trp_player",  "$g_other_lord", "$g_talk_troop", "fac_player_supporters_faction"),
(try_end),
(call_script, "script_end_quest", "qst_resolve_dispute"),

]],

[anyone|plyr,"lord_quarrel_intervention_2",[
(faction_slot_eq, "$players_kingdom", slot_faction_leader, "trp_player"),
],
"Whatever your differences, I want you to settle them.", "lord_quarrel_intervention_3b",
[]],

[anyone|plyr,"lord_quarrel_intervention_2",[
(neg|faction_slot_eq, "$players_kingdom", slot_faction_leader, "trp_player"),
],
"Could you not be convinced to settle your differences?", "lord_quarrel_intervention_3b",
[]],


[anyone|plyr,"lord_quarrel_intervention_2",[],
"On second thought, I want nothing to do with this.", "lord_pretalk",
[
(call_script, "script_abort_quest", "qst_resolve_dispute", 1),

]],

[anyone,"lord_quarrel_intervention_3a", [
], "I'm glad that you think so.", "lord_pretalk",
[]],

[anyone,"lord_quarrel_intervention_3b", [
(store_random_in_range, ":random", 0, 21),
(le, ":random", "$g_talk_troop_effective_relation"),
(str_store_troop_name, s11, "$g_other_lord"),

], "For the sake of our friendship, I defer to your judgment. I will try to make amends with {s11}.", "lord_quarrel_intervention_4",
[
(try_begin),
(quest_slot_eq, "qst_resolve_dispute", slot_quest_target_troop, "$g_talk_troop"),
(quest_set_slot, "qst_resolve_dispute", slot_quest_target_state, 1),
(else_try),
(quest_slot_eq, "qst_resolve_dispute", slot_quest_object_troop, "$g_talk_troop"),
(quest_set_slot, "qst_resolve_dispute", slot_quest_object_state, 1),
(try_end),
]],

[anyone,"lord_quarrel_intervention_3b", [
#fails reconciliation test
(str_store_troop_name, s11, "$g_other_lord"),
], "I will not reconcile with {s11}. I know my rights.", "lord_pretalk",
[
(call_script, "script_troop_change_relation_with_troop", "trp_player", "$g_talk_troop", -15),
(call_script, "script_troop_change_relation_with_troop", "trp_player", "$g_other_lord", 10),
(try_begin),
(eq, "$players_kingdom", "fac_player_supporters_faction"),
(call_script, "script_add_log_entry", logent_ruler_intervenes_in_quarrel, "trp_player",  "$g_talk_troop", "$g_other_lord", "fac_player_supporters_faction"),
(try_end),
(call_script, "script_end_quest", "qst_resolve_dispute"),
]],

[anyone,"lord_quarrel_intervention_4", [
(quest_slot_eq, "qst_resolve_dispute", slot_quest_object_state, 1),
(quest_slot_eq, "qst_resolve_dispute", slot_quest_target_state, 1),
], "Let it be as though our quarrel never occurred.", "lord_pretalk",
[
(call_script, "script_troop_change_relation_with_troop", "$g_talk_troop", "$g_other_lord", 20),
(call_script, "script_succeed_quest", "qst_resolve_dispute"),
(call_script, "script_end_quest", "qst_resolve_dispute"),
(call_script, "script_change_player_honor", 3),
(call_script, "script_change_troop_renown", "trp_player",  25),
(add_xp_as_reward, 500),

]],

[anyone,"lord_quarrel_intervention_4", [
(str_store_troop_name, s11, "$g_other_lord"),
##diplomacy start+ change "he" to {reg0?she:he}
(call_script, "script_dplmc_store_troop_is_female", "$g_other_lord"),
], "I suppose that you should speak to {s11}, and see if {reg0?she:he} will do the same for me.", "lord_pretalk",
##diplomacy end+
[
]],


[anyone,"lord_internal_politics_cur_stance", [
(troop_slot_eq, "$g_talk_troop", slot_troop_stance_on_faction_issue, "trp_player"),
],
"I had already made up my mind to support you.", "lord_internal_politics_cur_stance_plyr_response",
[
]],

##diplomacy start+ add case for when player supports another lord, and other lord supports that one
[anyone,"lord_internal_politics_cur_stance", [
(troop_get_slot, ":player_choice", "trp_player", slot_troop_stance_on_faction_issue),
(troop_slot_eq, "$g_talk_troop", slot_troop_stance_on_faction_issue, ":player_choice"),
(gt, ":player_choice", -1),
(str_store_troop_name, s4, ":player_choice"),
##diplomacy start+ Add relation descriptions
(call_script, "script_dplmc_cap_troop_describes_troop_to_troop_s1", 0, "$g_talk_troop", ":player_choice", "trp_player"),
(str_store_string_reg, s4, s1),
##diplomacy end+
],
"I had already made up my mind to support {s4}.", "lord_internal_politics_cur_stance_plyr_response",
[
]],
##diplomacy end+

[anyone,"lord_internal_politics_cur_stance", [
(call_script, "script_npc_decision_checklist_take_stand_on_issue", "$g_talk_troop"),
(eq, reg0, -1),
],
"I am unable to decide at this time", "lord_internal_politics_cur_stance_plyr_response",
[
]],


[anyone,"lord_internal_politics_cur_stance", [
],
"I support {s15}. {s10}", "lord_internal_politics_cur_stance_plyr_response",
[
(call_script, "script_npc_decision_checklist_take_stand_on_issue", "$g_talk_troop"),
(assign, ":supported_candidate", reg0),
(assign, ":explainer_string", reg1),
(troop_set_slot, "$g_talk_troop", slot_troop_stance_on_faction_issue, ":supported_candidate"),

(str_store_string, s10, ":explainer_string"),
(try_begin),
(eq, ":supported_candidate", "$g_talk_troop"),
(str_clear, s10),
(try_end),
(call_script, "script_troop_describes_troop_to_s15", "$g_talk_troop", ":supported_candidate"),

]],

[anyone|plyr,"lord_internal_politics_cur_stance_plyr_response", [
(troop_slot_eq, "trp_player", slot_troop_stance_on_faction_issue, -1),
(eq, "$player_has_homage", 1),
],
"Let me tell you whom I support...", "lord_internal_politics_plyr_choose_candidate",
[

]],

[anyone|plyr,"lord_internal_politics_cur_stance_plyr_response", [
(eq, "$cheat_mode", 1),
(eq, "$player_has_homage", 1),
],
"CHEAT -- Reset support", "lord_internal_politics_cur_stance_plyr_response",
[
(troop_set_slot, "trp_player", slot_troop_stance_on_faction_issue, -1),
]],


[anyone,"lord_internal_politics_plyr_choose_candidate", [
],
"Whom do you support?", "lord_internal_politics_plyr_choose_candidate_select",
[
]],

[anyone|plyr,"lord_internal_politics_plyr_choose_candidate_select", [
],
"I would like to nominate myself for that honor", "lord_internal_politics_pretalk",
[
(troop_set_slot, "trp_player", slot_troop_stance_on_faction_issue, "trp_player"),
]],

[anyone|plyr,"lord_internal_politics_plyr_choose_candidate_select", [
(troop_get_slot, ":spouse", "trp_player", slot_troop_spouse),
##diplomacy start+ This seemingly redundant condition is for a polygamy implementation
(this_or_next|troop_slot_eq, "$g_talk_troop", slot_troop_spouse, "trp_player"),
##diplomacy end+
(neq, ":spouse", "$g_talk_troop"),

##diplomacy start+
##OLD:
#(is_between, ":spouse", active_npcs_begin, active_npcs_end),
##NEW:
(is_between, ":spouse", heroes_begin, heroes_end),
##diplomacy end+
(troop_slot_eq, ":spouse", slot_troop_occupation, slto_kingdom_hero),
(store_faction_of_troop, ":spouse_faction", ":spouse"),
(eq, ":spouse_faction", "$players_kingdom"),
(str_store_troop_name, s4, ":spouse"),
##diplomacy start+ check gender of spouse
(call_script, "script_dplmc_store_troop_is_female", ":spouse"),
],
#diplomacy start+ player may be married to female lord
"I support my {reg0?wife:husband}, {s4}", "lord_internal_politics_pretalk",
#diplomacy end+
[
(troop_get_slot, ":spouse", "trp_player", slot_troop_spouse),

(troop_set_slot, "trp_player", slot_troop_stance_on_faction_issue, ":spouse"),
]],

[anyone|plyr,"lord_internal_politics_plyr_choose_candidate_select", [
(str_store_troop_name, s4, "$g_talk_troop"),
],
"I would support you, {s4}", "lord_internal_politics_support_acknowledge",
[
]],

[anyone|plyr,"lord_internal_politics_plyr_choose_candidate_select", [

(troop_get_slot, ":talk_troop_choice", "$g_talk_troop", slot_troop_stance_on_faction_issue),
##diplomacy start+ support promoted ladies
#(is_between, ":talk_troop_choice", active_npcs_begin, active_npcs_end),#OLD
(is_between, ":talk_troop_choice", heroes_begin, heroes_end),#NEW
##diplomacy end+
(str_store_troop_name, s4, ":talk_troop_choice"),
(neq, ":talk_troop_choice", "$g_talk_troop"),
],
"I would support your choice, {s4}", "lord_internal_politics_support_same_acknowledge",
[
]],

[anyone|plyr,"lord_internal_politics_plyr_choose_candidate_select", [
],
"Never mind.", "lord_pretalk",
[
]],



[anyone,"lord_internal_politics_support_acknowledge", [
(troop_get_slot, ":supported_candidate", "$g_talk_troop", slot_troop_stance_on_faction_issue),
(neq, "$g_talk_troop", ":supported_candidate"),

],
"That is most gracious of you, but I do not seek the honor, and I decline your support.", "lord_pretalk",
[
(troop_set_slot, "trp_player", slot_troop_stance_on_faction_issue, -1),
]],


[anyone,"lord_internal_politics_support_acknowledge", [
(lt, "$g_talk_troop_effective_relation", -5),
##diplomacy start+
#more forgiving for affiliates
(call_script, "script_dplmc_is_affiliated_family_member", "$g_talk_troop"),
(this_or_next|lt, reg0, 1),
	(lt, "$g_talk_troop_effective_relation", -10),
#more forgiving for player spouse
(this_or_next|neg|troop_slot_eq, "$g_talk_troop", slot_troop_spouse, "trp_player"),#This seemingly redundant condition is for a polygamy implementation
(this_or_next|neg|troop_slot_eq, "trp_player", slot_troop_spouse, "$g_talk_troop"),
	(lt, "$g_talk_troop_effective_relation", -10),
#certain spouses are even more pliable
(this_or_next|neg|troop_slot_eq, "$g_talk_troop", slot_troop_spouse, "trp_player"),#This seemingly redundant condition is for a polygamy implementation
(this_or_next|neg|troop_slot_eq, "trp_player", slot_troop_spouse, "$g_talk_troop"),
	(this_or_next|neg|troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_conventional),
	(lt, "$g_talk_troop_effective_relation", -20),
##diplomacy end+
],
"I do not trust you, and I do not need your support.", "lord_pretalk",
[
(troop_set_slot, "trp_player", slot_troop_stance_on_faction_issue, -1),
]],

[anyone,"lord_internal_politics_support_acknowledge", [
],
"That is most gracious of you", "lord_pretalk",
[
(call_script, "script_troop_change_relation_with_troop", "trp_player", "$g_talk_troop", 3),
(troop_set_slot, "trp_player", slot_troop_stance_on_faction_issue, "$g_talk_troop"),
]],



[anyone,"lord_internal_politics_support_same_acknowledge", [
(lt, "$g_talk_troop_effective_relation", -5),
##diplomacy start+
#more forgiving for affiliates
(call_script, "script_dplmc_is_affiliated_family_member", "$g_talk_troop"),
(this_or_next|lt, reg0, 1),
	(lt, "$g_talk_troop_effective_relation", -10),
#more forgiving for player spouse
(this_or_next|neg|troop_slot_eq, "trp_player", slot_troop_spouse, "$g_talk_troop"),
	(lt, "$g_talk_troop_effective_relation", -10),
#certain spouses are even more pliable
(this_or_next|neg|troop_slot_eq, "trp_player", slot_troop_spouse, "$g_talk_troop"),
(this_or_next|neg|troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_conventional),
	(lt, "$g_talk_troop_effective_relation", -20),
#make gender correct
(troop_get_slot, ":talk_troop_choice", "$g_talk_troop", slot_troop_stance_on_faction_issue),
(call_script, "script_dplmc_store_troop_is_female_reg", ":talk_troop_choice", 3),
],#make gender correct
"You may tell {reg3?her:him} that yourself. I do not trust you, and I will have no part in any game which you are playing.", "lord_pretalk",
##diplomacy end+
[
(troop_set_slot, "trp_player", slot_troop_stance_on_faction_issue, -1),
]],

[anyone,"lord_internal_politics_support_same_acknowledge", [
(troop_get_slot, ":talk_troop_choice", "$g_talk_troop", slot_troop_stance_on_faction_issue),
(call_script, "script_troop_get_relation_with_troop", "trp_player", ":talk_troop_choice"),
(lt, reg0,  -5),
##diplomacy start+
(assign, ":relation", reg0),
##You can still support affiliates/your spouse as low as -10
(call_script, "script_dplmc_is_affiliated_family_member", ":talk_troop_choice"),
(this_or_next|lt, reg0, 1),
	(lt, ":relation", -10),
(this_or_next|neg|troop_slot_eq, "trp_player", slot_troop_spouse, ":talk_troop_choice"),
	(lt, ":relation", -10),
(str_store_troop_name, s4, ":talk_troop_choice"),#unchanged line
#make gender correct
(call_script, "script_dplmc_store_troop_is_female_reg", ":talk_troop_choice", 3),
##diplomacy end+
],
##diplomacy start+ make gender correct
"Given your relation with {s4}, I do not think that {reg3?she:he} would welcome your support.", "lord_pretalk",
##diplomacy end+
[
(troop_set_slot, "trp_player", slot_troop_stance_on_faction_issue, -1),
]],

[anyone,"lord_internal_politics_support_same_acknowledge", [
(troop_get_slot, ":talk_troop_choice", "$g_talk_troop", slot_troop_stance_on_faction_issue),
(str_store_troop_name, s4, ":talk_troop_choice"),
##diplomacy start+ make gender correct
(call_script, "script_dplmc_store_troop_is_female_reg", ":talk_troop_choice", 3),
##diplomacy end+
],
##diplomacy start+ make gender correct
"I will tell {s4}. {reg3?She:He} will no doubt be grateful for your support.", "lord_pretalk",
##diplomacy end+
[
(troop_get_slot, ":talk_troop_choice", "$g_talk_troop", slot_troop_stance_on_faction_issue),
(call_script, "script_troop_change_relation_with_troop", "trp_player", ":talk_troop_choice", 2),
(call_script, "script_troop_change_relation_with_troop", "trp_player", "$g_talk_troop", 1),
(troop_set_slot, "trp_player", slot_troop_stance_on_faction_issue, ":talk_troop_choice"),

]],




[anyone|plyr|repeat_for_troops,"lord_internal_politics_plyr_choose_candidate_select", [
(store_repeat_object, ":candidate"),
(eq, 1, 0),
(troop_slot_eq, ":candidate", slot_troop_occupation, slto_kingdom_hero),
(store_faction_of_troop, ":candidate_faction", ":candidate"),
(eq, ":candidate_faction", "$players_kingdom"),
(neg|troop_slot_eq, "trp_player", slot_troop_spouse, ":candidate"),
(str_store_troop_name, s4, ":candidate"),
],
"I support {s4}", "lord_internal_politics_pretalk",
[
(store_repeat_object, ":candidate"),
(troop_set_slot, "trp_player", slot_troop_stance_on_faction_issue, ":candidate"),
]],


[anyone,"lord_internal_politics_pretalk", [
],
"Ah. Most interesting.", "lord_internal_politics_cur_stance_plyr_response",
[
]],



[anyone|plyr,"lord_internal_politics_cur_stance_plyr_response", [
(eq, "$player_has_homage" ,1),
(neg|troop_slot_eq, "$g_talk_troop", slot_troop_stance_on_faction_issue, "$g_talk_troop"),
(neg|troop_slot_ge, "trp_player", slot_troop_stance_on_faction_issue, active_npcs_begin),
(neg|troop_slot_eq, "$g_talk_troop", slot_troop_stance_on_faction_issue, "trp_player"),
],
"Can I convince you to support me instead?", "lord_internal_politics_plyr_request_support",
[
]],

##diplomacy start+ add option to ask for support for another lord
#undeclared: pick any lord
[anyone|plyr,"lord_internal_politics_cur_stance_plyr_response", [
(this_or_next|faction_slot_eq, "$players_kingdom", slot_faction_leader, "trp_player"),
(eq, "$player_has_homage" ,1),
(neg|troop_slot_eq, "$g_talk_troop", slot_troop_stance_on_faction_issue, "$g_talk_troop"),
(neg|troop_slot_ge, "trp_player", slot_troop_stance_on_faction_issue, active_npcs_begin),
(troop_get_slot, ":player_choice", "trp_player", slot_troop_stance_on_faction_issue),
(neg|troop_slot_eq, "$g_talk_troop", slot_troop_stance_on_faction_issue, ":player_choice"),
#(neg|troop_slot_eq, "$g_talk_troop", slot_troop_stance_on_faction_issue, "trp_player"),
],
"Can I convince you to support someone else?", "dplmc_lord_internal_politics_plyr_request_support_1",
[
]],

#already declared: can ask for support for player's pick
[anyone|plyr,"lord_internal_politics_cur_stance_plyr_response", [
(this_or_next|faction_slot_eq, "$players_kingdom", slot_faction_leader, "trp_player"),
   (eq, "$player_has_homage" ,1),
(neg|troop_slot_eq, "$g_talk_troop", slot_troop_stance_on_faction_issue, "$g_talk_troop"),
(troop_get_slot, ":player_pick", "trp_player", slot_troop_stance_on_faction_issue),
(neg|troop_slot_eq, "$g_talk_troop", slot_troop_stance_on_faction_issue, ":player_pick"),
(is_between, ":player_pick", heroes_begin, heroes_end),
(troop_slot_eq, ":player_pick", slot_troop_occupation, slto_kingdom_hero),
(str_store_troop_name, s4, ":player_pick"),
],
"Can I convince you to support {s4}?", "dplmc_lord_internal_politics_plyr_request_support_2",
[
	#Assign it to variable instead of just reading it, since another conversation
	#path allows the player to proffer a lord without having yet committed to any
	#option.
	(troop_get_slot, "$lord_selected", "trp_player", slot_troop_stance_on_faction_issue),
]],

[anyone, "dplmc_lord_internal_politics_plyr_request_support_1", [],
"Whom did you have in mind?", "dplmc_lord_internal_politics_plyr_request_support_1",
[]
],

[anyone|plyr,"dplmc_lord_internal_politics_plyr_request_support_1", [
],
"Never mind.", "lord_pretalk",
[
]],

[anyone|plyr|repeat_for_troops,"dplmc_lord_internal_politics_plyr_request_support_1", [
(store_repeat_object, ":candidate"),
(is_between, ":candidate", heroes_begin, heroes_end),
(troop_slot_eq, ":candidate", slot_troop_occupation, slto_kingdom_hero),
(store_faction_of_troop, ":candidate_faction", ":candidate"),
(eq, ":candidate_faction", "$players_kingdom"),
(neq, ":candidate", "$g_talk_troop"),
(neg|troop_slot_eq, "$g_talk_troop", slot_troop_stance_on_faction_issue, ":candidate"),
(str_store_troop_name, s4, ":candidate"),
(try_begin),
	(neg|troop_slot_eq, "$g_talk_troop", slot_troop_met, 0),
	(neg|troop_slot_eq, ":candidate", slot_troop_met, 0),
	(call_script, "script_dplmc_cap_troop_describes_troop_to_troop_s1", 1, "trp_player", ":candidate", "$g_talk_troop"),
	(str_store_string_reg, s4, s1),
(try_end),
],
"{s4}", "dplmc_lord_internal_politics_plyr_request_support_2",
[
(store_repeat_object, ":candidate"),
(assign, "$lord_selected", ":candidate"),
]],

[anyone|plyr,"dplmc_lord_internal_politics_plyr_request_support_1", [
],
"Never mind.", "lord_pretalk",
[
]],

#dplmc_lord_internal_politics_plyr_request_support_2: lord answers

[anyone, "dplmc_lord_internal_politics_plyr_request_support_2", [
#fail if relation with player is too low
(lt, "$g_talk_troop_effective_relation", -5),#-5 for most troops
(call_script, "script_dplmc_is_affiliated_family_member", "$g_talk_troop"),#-10 for affiliated family members
(this_or_next|eq, reg0, 0),
   (le, "$g_talk_troop_effective_relation", -10),#redundant, since script_dplmc_is_affiliated_family_member checks relation too
],
"Given our relationship, I would prefer to keep my own counsel on this matter.", "lord_pretalk",
[]
],

[anyone,"lord_internal_politics_support_same_acknowledge", [
#fail if player's relation with suggested lord is too low
(call_script, "script_troop_get_relation_with_troop", "trp_player", "$lord_selected"),
(lt, reg0,  -5),
(call_script, "script_dplmc_is_affiliated_family_member", "$g_talk_troop"),
(lt, reg0, 1),
(str_store_troop_name, s4, "$lord_selected"),
(assign, reg3, 0),
(try_begin),
	(call_script, "script_cf_dplmc_troop_is_female", "$lord_selected"),
	(assign, reg3, 1),
(try_end),
],
"Given your relation with {s4}, I do not think that {reg3?she:he} would welcome your support.", "lord_pretalk",
[
(troop_set_slot, "trp_player", slot_troop_stance_on_faction_issue, -1),
]],

[anyone, "dplmc_lord_internal_politics_plyr_request_support_2", [
#fail if target controversy is too high
(troop_slot_ge, "$lord_selected", slot_troop_controversy, 25),
(this_or_next|faction_slot_eq, "$players_kingdom", slot_faction_political_issue, 1),
(troop_slot_ge, "$lord_selected", slot_troop_controversy, 50),
(str_store_troop_name, s4, "$lord_selected"),
(assign, reg3, 0),
(try_begin),
	(call_script, "script_cf_dplmc_troop_is_female", "$lord_selected"),
	(assign, reg3, 1),
(try_end),
],
"{s4} has engendered too much controversy for {reg3?her:him} to be a viable candidate right now.  I would advise {reg3?her:him} to wait a little while before seeking any further honors.", "lord_pretalk",
[]
],

[anyone,"dplmc_lord_internal_politics_plyr_request_support_2", [
#for fiefs, fail if the target has too many fiefs for his renown
(faction_get_slot, ":faction_issue", "$players_kingdom", slot_faction_political_issue),
(is_between, ":faction_issue", centers_begin, centers_end),

(troop_get_slot, ":other_pick", "$g_talk_troop", slot_troop_stance_on_faction_issue),

(troop_get_slot, ":player_pick_renown", "$lord_selected", slot_troop_renown),
(assign, ":other_pick_renown", 0),#default to 0 if talk troop is undecided
(try_begin),
   (this_or_next|is_between, ":other_pick", heroes_begin, heroes_end),
      (eq, ":other_pick", "trp_player"),
   (troop_get_slot, ":other_pick_renown", ":other_pick", slot_troop_renown),
(try_end),

(call_script, "script_dplmc_center_point_calc", "$g_talk_troop_faction", "$lord_selected", ":other_pick", 2),
(assign, ":average_renown_per_point", reg0),# faction total renown / total center points (or 0 for no points)
(assign, ":player_pick_points", reg1),# player_pick total center points
(assign, ":other_pick_points", reg3),#other_pick total center points
#(assign, ":average_renown", reg4),#unused

#Using val_max is a bad way of doing things, because it erases the difference
#between someone with one fief and someone with no fiefs, but I've left it like
#this for now to match the Native logic for convincing an NPC to support the
#player for a fief.
(val_max, ":player_pick_points", 1),
(store_div, ":player_pick_renown_per_center_point",  ":player_pick_renown", ":player_pick_points",),

(val_max, ":other_pick_points", 1),
(store_div, ":other_pick_renown_per_center_point",  ":other_pick_renown", ":other_pick_points",),

##save for use below
(assign, "$temp", ":player_pick_renown_per_center_point"),
(assign, "$temp_2", ":other_pick_renown_per_center_point"),

(store_mul, ":threshhold", ":average_renown_per_point", 3),
(val_div, ":threshhold", 4),
(lt, ":player_pick_renown_per_center_point", ":threshhold"),
(str_store_troop_name, s4, "$lord_selected"),
(call_script, "script_dplmc_store_troop_is_female_reg", "$lord_selected", 3),
],
"{s4} has already been well-rewarded with fiefs appropriate to {reg3?her:his} accomplishments, I would say.", "lord_pretalk",
[
]],

[anyone,"dplmc_lord_internal_politics_plyr_request_support_2", [
#for marshall, fail if the target's renown is too low
(faction_slot_eq, "$players_kingdom", slot_faction_political_issue, 1),
(troop_get_slot, ":player_pick_renown", "$lord_selected", slot_troop_renown),
(lt, ":player_pick_renown", 400),
(str_store_troop_name, s4, "$lord_selected"),
(assign, reg3, 0),
(try_begin),
	(call_script, "script_cf_dplmc_troop_is_female", "$lord_selected"),
	(assign, reg3, 1),
(try_end),
(try_begin),
	(ge, "$cheat_mode", 1),
	(assign, reg0, ":player_pick_renown"),
	(str_store_string, s0, "str_score_reg0"),
	(assign, reg0, 400),
	(str_store_string, s1, "str_score_reg0"),
	(display_message, "@{!}DEBUG support check, {s4} {s0}, Threshold {s1}"),
(try_end),
],
"I think {s4} would need to prove {reg3?herself:himself} further before {reg3?she:he} is eligible for that position.", "lord_pretalk",
[
]],

[anyone,"dplmc_lord_internal_politics_plyr_request_support_2", [
#for fiefs, fail if the target's renown per the center point is bad compared to the previous pick's
(faction_get_slot, ":faction_issue", "$players_kingdom", slot_faction_political_issue),
(is_between, ":faction_issue", centers_begin, centers_end),
(troop_get_slot, ":other_pick", "$g_talk_troop", slot_troop_stance_on_faction_issue),
(gt, ":other_pick", -1),
#load values calculated above
(assign, ":player_pick_renown_per_center_point", "$temp"),
(assign, ":threshold", "$temp_2"),#other_pick_renown_per_center_point
(val_mul, ":threshold", 3),
(val_div, ":threshold", 4),
(lt, ":player_pick_renown_per_center_point", ":threshold"),
(str_store_troop_name, s3, ":other_pick"),
(str_store_troop_name, s4, "$lord_selected"),
(try_begin),
	(ge, "$cheat_mode", 1),
	(assign, reg0, ":player_pick_renown_per_center_point"),
	(str_store_string, s0, "str_score_reg0"),
	(assign, reg0, ":threshold"),
	(str_store_string, s1, "str_score_reg0"),
	(display_message, "@{!}DEBUG support check, {s4} {s0}, Threshold {s1}"),
(try_end),
(str_store_party_name, s0, ":faction_issue"),
],
"{s3} deserves to receive {s0} more than {s4}, I would say.", "lord_pretalk",
[
]],

[anyone,"dplmc_lord_internal_politics_plyr_request_support_2", [
#for marshall, fail if the target's renown is too low compared to existing pick
(faction_slot_eq, "$players_kingdom", slot_faction_political_issue, 1),
(troop_get_slot, ":other_pick", "$g_talk_troop", slot_troop_stance_on_faction_issue),
(gt, ":other_pick", -1),

(troop_get_slot, ":player_pick_renown", "$lord_selected", slot_troop_renown),
(troop_get_slot, ":threshold", ":other_pick", slot_troop_renown),
(val_mul, ":threshold", 3),
(val_div, ":threshold", 4),
(lt, ":player_pick_renown", ":threshold"),

(str_store_troop_name, s4, "$lord_selected"),
(assign, reg3, 0),
(try_begin),
	(call_script, "script_cf_dplmc_troop_is_female", "$lord_selected"),
	(assign, reg3, 1),
(try_end),
(try_begin),
	(ge, "$cheat_mode", 1),
	(assign, reg0, ":player_pick_renown"),
	(str_store_string, s0, "str_score_reg0"),
	(assign, reg0, ":threshold"),
	(str_store_string, s1, "str_score_reg0"),
	(display_message, "@{!}DEBUG support check, {s4} {s0}, Threshold {s1}"),
(try_end),
],
"I think {s4} would need to prove {reg3?herself:himself} further before {reg3?she:he} is eligible for that position.", "lord_pretalk",
[
]],

[anyone,"dplmc_lord_internal_politics_plyr_request_support_2", [
(call_script, "script_troop_get_relation_with_troop", "$g_talk_troop", "$lord_selected"),
(assign, ":player_pick_unaltered_relation", reg0),
(assign, ":player_pick_relation", reg0),
#if the one being addressed is much more fond of the player than the suggested
#candidate *and* the currently-preferred candidate, this can provide some
#advantage.  the advantage is a portion of the relationship difference.
(assign, ":relation_modifier", 0),
(troop_get_slot, ":other_pick", "$g_talk_troop", slot_troop_stance_on_faction_issue),
(assign, ":other_pick_relation", 0),
(try_begin),
	(gt, ":other_pick", -1),
	(neq, ":other_pick", "trp_player"),
	(call_script, "script_troop_get_relation_with_troop", "$g_talk_troop", ":other_pick"),
	(assign, ":other_pick_relation", reg0),
(try_end),
(try_begin),
	(val_max, reg0, ":player_pick_relation"),#higher of the lord's relations with his pick or the suggested pick
	(val_max, reg0, 0),
	#relation with player is greater than that with both suggested lord and currently-picked lord
	(gt, "$g_talk_troop_relation", reg0),
	#add 1/10th of the difference, rounded up
	(store_sub, ":relation_modifier", "$g_talk_troop_relation", reg0),
	(val_add, ":relation_modifier", 5),
	(val_div, ":relation_modifier", 10),
(try_end),
#alter effective relation using player's persuasion, then apply the relation modifier
(store_skill_level, ":persuasion", "skl_persuasion", "trp_player"),
(val_add, ":player_pick_relation", ":persuasion"),
(try_begin),
   (gt, ":player_pick_relation", 0),
   (val_add, ":player_pick_relation", ":relation_modifier"),#add before multiplication
   (store_add, ":persuasion_modifier", 10, ":persuasion"),
   (val_mul, ":player_pick_relation", ":persuasion_modifier"),
   (val_div, ":player_pick_relation", 10),
(else_try),
   (lt, ":player_pick_relation", 0),
   (store_sub, ":persuasion_modifier", 20, ":persuasion"),
   (val_mul, ":player_pick_relation", ":persuasion_modifier"),
   (val_div, ":player_pick_relation", 20),
   (val_add, ":player_pick_relation", ":relation_modifier"),#add after multiplication
(try_end),
(assign, "$temp", ":player_pick_relation"),#<-- store to $temp, overwrites reknown/center if it was there
#Reject with derogatory comment if relation with candidate is still negative after modification
#or if it was negative before modification and was not enough to surpass the new candidate.
(this_or_next|lt, "$temp", 0),
(ge, ":other_pick_relation", "$temp"),
(lt, ":player_pick_unaltered_relation", 0),

(call_script, "script_lord_comment_to_s43", "$g_talk_troop", "str_lord_insult_default"),
(str_store_troop_name, s4, "$lord_selected"),
(str_store_string, s1, "str_dplmc_refuse_support_s43_named_s4"),
],
"{s1}", "lord_pretalk",
[
]],

[anyone,"dplmc_lord_internal_politics_plyr_request_support_2", [
#reject if relations don't meet the normal threshold with either the player or the target
(lt, "$temp", 10),#<-- persuasion-modified relation to $lord_selected
(lt, "$g_talk_troop_effective_relation", 10),
],
"Hmm... That is too much to ask, given the state of my relationship with the two of you.", "lord_pretalk",
[
]],

[anyone,"dplmc_lord_internal_politics_plyr_request_support_2", [
(troop_get_slot, ":other_pick", "$g_talk_troop", slot_troop_stance_on_faction_issue),
(gt, ":other_pick", -1),
(assign, ":player_pick_relation", "$temp"),#load persuasion-modified relation from variable
#compare to relation with other choice
(call_script, "script_troop_get_relation_with_troop", "$g_talk_troop", ":other_pick"),
(ge, reg0, ":player_pick_relation"),
(assign, ":other_pick_relation", reg0),
#don't make this comment if the lord's supported candidate actually favors the player's pick
(troop_get_slot, reg0, ":other_pick", slot_troop_stance_on_faction_issue),
(neq, reg0, "$lord_selected"),
#also don't make this comment if the other candidate is the player
(neq, ":other_pick", "trp_player"),
(str_store_troop_name, s4, ":other_pick"),
(try_begin),
	(ge, "$cheat_mode", 1),
	(assign, reg0, ":player_pick_relation"),
	(str_store_troop_name, s3, "$lord_selected"),#s3 not s4
	(str_store_string, s0, "str_score_reg0"),
	(assign, reg0, ":other_pick_relation"),
	(str_store_string, s1, "str_score_reg0"),
	(display_message, "@{!}DEBUG support check, {s3} {s0}, Threshold {s1}"),#s3 not s4
(try_end),
],
"I am sorry. I would not wish to strain my relationship with {s4}", "lord_pretalk",
[
]],

[anyone, "dplmc_lord_internal_politics_plyr_request_support_2", [
(str_store_troop_name, s4, "$lord_selected"),
],#if no objection, succeed
"I will gladly support {s4}.", "lord_pretalk",
[(troop_set_slot, "$g_talk_troop", slot_troop_stance_on_faction_issue, "$lord_selected"),
#The player is now committed as a supporter of his candidate if he wasn't already
(troop_set_slot, "trp_player", slot_troop_stance_on_faction_issue, "$lord_selected"),
]
],

##diplomacy end+

[anyone|plyr,"lord_internal_politics_cur_stance_plyr_response", [
],
"Anyway, enough of politics for the time being.", "lord_pretalk",
[
]],


[anyone,"lord_internal_politics_plyr_request_support", [
(troop_slot_ge, "trp_player", slot_troop_controversy, 25),
(this_or_next|faction_slot_eq, "$players_kingdom", slot_faction_political_issue, 1),
(troop_slot_ge, "trp_player", slot_troop_controversy, 50),
],
"You have engendered too much controversy to be a viable candidate right now. I would advise you to wait a little while before seeking any further honors for yourself.", "lord_pretalk",
[
]],

[anyone,"lord_internal_politics_plyr_request_support", [
(troop_get_slot, ":current_candidate", "$g_talk_troop", slot_troop_stance_on_faction_issue),
(gt, ":current_candidate", 0),
(str_store_troop_name, s4, ":current_candidate"),
(call_script, "script_troop_get_relation_with_troop", "$g_talk_troop", ":current_candidate"),
(ge, reg0, "$g_talk_troop_effective_relation"),
##diplomacy start+ don't talk about "straining the relationship" if the other lord
#actually supports the player!
(troop_get_slot, reg0, ":current_candidate", slot_troop_stance_on_faction_issue),
(neq, reg0, "trp_player"),
##diplomacy end+
],
"I am sorry. I would not wish to strain my relationship with {s4}", "lord_pretalk",
[
]],

[anyone,"lord_internal_politics_plyr_request_support", [
(faction_get_slot, ":faction_issue", "$players_kingdom", slot_faction_political_issue),
(is_between, ":faction_issue", centers_begin, centers_end),
(troop_get_slot, ":player_renown", "trp_player", slot_troop_renown),
##diplomacy start+
(try_begin),
	#prejudice mode: high
	(lt, "$g_disable_condescending_comments", 0),
	(neq, reg65, "$character_gender"),

	(call_script, "script_cf_dplmc_faction_has_bias_against_gender", "$g_talk_troop_faction", "$character_gender"),

	(neg|troop_slot_ge, "$g_talk_troop", slot_lord_reputation_type, lrep_roguish),#non-noble or kingdom lady
	(neg|troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_goodnatured),
	(neg|troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_cunning),
	(neg|is_between, "$g_talk_troop", companions_begin, companions_end),
	(val_div, ":player_renown", 2),
(try_end),
##diplomacy end+
(assign, ":total_faction_renown", ":player_renown"),

(try_for_range, ":active_npc", active_npcs_begin, active_npcs_end),
(store_faction_of_troop, ":active_npc_faction", ":active_npc"),
(eq, ":active_npc_faction", "$players_kingdom"),

(troop_get_slot, ":renown", ":active_npc", slot_troop_renown),
(val_add, ":total_faction_renown", ":renown"),
(try_end),

(assign, ":total_faction_center_value", 0),
(assign, ":center_points_held_by_player", 0),
(try_for_range, ":center", centers_begin, centers_end),
(store_faction_of_party, ":center_faction", ":center"),
(eq, ":center_faction", "$players_kingdom"),

(assign, ":center_value", 1),
(try_begin),
   (is_between, ":center", towns_begin, towns_end),
   (assign, ":center_value", 2),
(try_end),

(val_add, ":total_faction_center_value", ":center_value"),

(party_slot_eq, ":center", slot_town_lord, "trp_player"),
(val_add, ":center_points_held_by_player", ":center_value"),
(try_end),
(val_max, ":total_faction_center_value", 1),
(val_max, ":center_points_held_by_player", 1),

(store_div, ":average_renown_per_center_point", ":total_faction_renown", ":total_faction_center_value"),
(store_div, ":player_renown_per_center_point", ":player_renown", ":center_points_held_by_player"),

(store_mul, ":threshhold", ":average_renown_per_center_point", 3),
(val_div, ":threshhold", 4),
(lt, ":player_renown_per_center_point", ":threshhold"),

],
"You have already been well-rewarded with fiefs appropriate to your accomplishments, I would say.", "lord_pretalk",
[
]],

[anyone,"lord_internal_politics_plyr_request_support", [
(faction_slot_eq, "$players_kingdom", slot_faction_political_issue, 1),
(troop_get_slot, ":player_renown", "trp_player", slot_troop_renown),
##diplomacy start+
(try_begin),
	#prejudice mode: high
	(lt, "$g_disable_condescending_comments", 0),
	(neq, reg65, "$character_gender"),
	(neg|troop_slot_ge, "$g_talk_troop", slot_lord_reputation_type, lrep_roguish),#non-noble or kingdom lady
	(neg|troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_goodnatured),
	(neg|troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_cunning),
	(neg|is_between, "$g_talk_troop", companions_begin, companions_end),
	(call_script, "script_cf_dplmc_faction_has_bias_against_gender", "$g_talk_troop_faction", "$character_gender"),
	(val_div, ":player_renown", 2),
(try_end),
##diplomacy end+
(lt, ":player_renown", 400),
],
"I think you would need to prove yourself further before you are eligible for that position.", "lord_pretalk",
[
]],

#You already have too many holdings
[anyone,"lord_internal_politics_plyr_request_support", [
(lt, "$g_talk_troop_effective_relation", 10),
],
"Hmm... That is too much to ask, given the state of our relationship. ", "lord_pretalk",
[
]],

[anyone,"lord_internal_politics_plyr_request_support", [
],
"I would support you with pleasure. ", "lord_pretalk",
[
(troop_set_slot, "$g_talk_troop", slot_troop_stance_on_faction_issue, "trp_player"),
]],





[anyone,"lord_internal_politics_plyr_request_support", [
],
"{!}[Placeholder - sorry, not yet]", "lord_pretalk",
[
]],





[anyone,"lord_recruit_1_relation", [
(troop_slot_ge, "$g_talk_troop", slot_troop_intrigue_impatience, 100),
],
"I am a bit weary of talking politics. Perhaps at a later date", "lord_pretalk",
[
(troop_get_slot, reg3, "$g_talk_troop", slot_troop_intrigue_impatience),
(try_begin),
(eq, "$cheat_mode", 1),
(display_message, "str_intrigue_impatience=_reg3_must_be_less_than_100"),
(try_end),
]],

#lord proximity
[anyone,"lord_recruit_1_relation", [ #can't use the nearby scripts, because it would include the player party
(assign, ":continue", 1),
(try_begin),
(call_script, "script_cf_troop_can_intrigue", "$g_talk_troop", 1),
(assign, ":continue", 0),
(try_end),

(eq, ":continue", 1),

(str_store_string, s12, "str_youll_have_to_speak_to_me_at_some_other_time_then"),
(try_begin),
(lt,"$g_encountered_party_relation",0),
(encountered_party_is_attacker),
(str_store_string, s12, "str_this_is_no_time_for_words"),
(try_end),
(try_begin),
(eq, "$cheat_mode", 1),
(display_message, "str_lord_not_alone"),
(try_end),
],
"{s12}", "lord_pretalk",[]],



[anyone,"lord_recruit_1_relation", [

(is_between, "$supported_pretender", pretenders_begin, pretenders_end),
(troop_slot_eq, "$supported_pretender", slot_troop_original_faction, "$g_talk_troop_faction"),
##diplomacy start+
##OLD:
#(troop_get_type, reg3, "$supported_pretender"),
##NEW:
(assign, reg3, 0),
(try_begin),
	(call_script, "script_cf_dplmc_troop_is_female", "$supported_pretender"),
	(assign, reg3, 1),
(try_end),
##diplomacy end+
(str_store_troop_name, s16, "$supported_pretender"),
(eq, "$skip_lord_assumes_argument", 0),

],
"You have raised the standard of rebellion on behalf of {s16}. Have you come to plead {reg3?her:his} case?", "lord_recruit_pretender",[
]],

[anyone|plyr,"lord_recruit_pretender", [
],
"I have", "lord_recruit_3_dilemma_1",[
(troop_set_slot, "$g_talk_troop", slot_lord_recruitment_candidate, "$supported_pretender"),
]],

[anyone|plyr,"lord_recruit_pretender", [
],
"No, that's not it. There's another issue I wish to discuss.", "lord_recruit_1_relation",[
(assign, "$skip_lord_assumes_argument", 1),
]],





#relation
[anyone,"lord_recruit_1_relation",
[
(try_begin),
(troop_slot_eq, "trp_player", slot_troop_spouse, "$g_talk_troop"),

(assign, ":willingness_to_intrigue", 20),

(str_store_string, s13, "str_of_course_my_wife"),
(str_store_string, s14, "str_perhaps_not_our_marriage_has_become_a_bit_strained_dont_you_think"),
(str_store_string, s15, "str_why_is_that_my_wife_actually_our_marriage_has_become_such_that_i_prefer_to_have_a_witness_for_all_of_our_converations"),
(else_try),
(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_quarrelsome),

(assign, ":willingness_to_intrigue", 6),

(str_store_string, s13, "str_all_right_then_what_do_you_have_to_say_out_with_it"),
(str_store_string, s14, "str_bah__im_in_no_mood_for_whispering_in_the_corner"),
(str_store_string, s15, "str_bah_i_dont_like_you_that_much_im_not_going_to_go_plot_with_you_in_some_corner"),
(else_try),
(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_debauched),
(assign, ":willingness_to_intrigue", 8),

(str_store_string, s13, "str_well__now_what_do_you_have_to_propose"),
(str_store_string, s14, "str_trying_our_hand_at_intrigue_are_we_i_think_not"),
(str_store_string, s15, "str_hah_i_trust_you_as_a_i_would_a_serpent_i_think_not"),
(else_try),
##diplomacy start+ add support for lady personalities
(this_or_next|troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_moralist),
##diplomacy end+
(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_upstanding),
(assign, ":willingness_to_intrigue", -10),

(str_store_string, s13, "str_i_do_not_like_to_conduct_my_business_in_the_shadows_but_sometimes_it_must_be_done_what_do_you_have_to_say"),
(str_store_string, s14, "str_i_would_prefer_to_conduct_our_affairs_out_in_the_open"),
(str_store_string, s15, "str_do_not_take_this_amiss_but_with_you_i_would_prefer_to_conduct_our_affairs_out_in_the_open"),
(else_try),
##diplomacy start+ add support for lady personalities
(this_or_next|troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_ambitious),
##diplomacy end+
(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_cunning),
(assign, ":willingness_to_intrigue", 4),

(str_store_string, s13, "str_hmm_you_have_piqued_my_interest_what_do_you_have_to_say"),
(str_store_string, s14, "str_em_lets_keep_our_affairs_out_in_the_open_for_the_time_being"),
(str_store_string, s15, "str_em_lets_keep_our_affairs_out_in_the_open_for_the_time_being"),
(else_try),
(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_selfrighteous),
(assign, ":willingness_to_intrigue", 0),

(str_store_string, s13, "str_thats_sensible__the_world_is_full_of_churls_who_poke_their_noses_into_their_betters_business_now_tell_me_what_it_is_that_you_have_to_say"),
(str_store_string, s14, "str_what_do_you_take_me_for_a_plotter"),
(str_store_string, s15, "str_hah_i_trust_you_as_a_i_would_a_serpent_i_think_not"),
(else_try),
(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_goodnatured),
(assign, ":willingness_to_intrigue", -10),

(str_store_string, s13, "str_well_i_normally_like_to_keep_things_out_in_the_open_but_im_sure_someone_like_you_would_not_want_to_talk_in_private_unless_heshe_had_a_good_reason_what_is_it"),
(str_store_string, s14, "str_surely_we_can_discuss_whatever_you_want_to_discuss_out_here_in_the_open_cant_we"),
(str_store_string, s15, "str_surely_we_can_discuss_whatever_you_want_to_discuss_out_here_in_the_open_cant_we"),
(else_try),
(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_martial),
(assign, ":willingness_to_intrigue", -5),
#SB : simple woman shows up a lot?
(call_script, "script_dplmc_store_troop_is_female_reg", "$g_talk_troop", 65),
(str_store_string, s13, "str_im_a_simple__man_not_one_for_intrigue_but_id_guess_that_you_have_something_worthwhile_to_say_what_is_it"),
(str_store_string, s14, "str_forgive_me_but_im_not_one_for_going_off_in_corners_to_plot"),
(str_store_string, s15, "str_please_do_not_take_this_amiss_but_i_do_not_trust_you"),
(else_try),
(troop_slot_ge, "$g_talk_troop", slot_lord_reputation_type, lrep_roguish),
(assign, ":willingness_to_intrigue", 10),

(str_store_string, s13, "str_certainly_playername_what_is_it"),
(str_store_string, s14, "str_forgive_me_but_id_prefer_to_keep_our_conversations_in_the_open"),
(str_store_string, s15, "str_please_do_not_take_this_amiss_but_im_not_sure_you_and_i_are_still_on_those_terms"),
(try_end),

(assign, ":continue", 0),
(store_skill_level, ":persuasion", "skl_persuasion", "trp_player"),

(try_begin),
  (lt, "$g_talk_troop_relation", -5),
  (try_begin),
    (eq, "$cheat_mode", 1),
    (display_message, "str_persuasion__relation_less_than_5"),
  (try_end),
  (str_store_string, s12, "str_s15"),
(else_try),
  (store_add, ":score", ":persuasion", "$g_talk_troop_relation"),
  (val_add, ":score", ":willingness_to_intrigue"),
  (game_get_reduce_campaign_ai, ":reduce_campaign_ai"),
  (try_begin),
    (eq, ":reduce_campaign_ai", 0), #hard
    (val_sub, ":score", 5),
  (else_try),
    (eq, ":reduce_campaign_ai", 1), #medium
  (else_try),
    (eq, ":reduce_campaign_ai", 2), #easy
    (val_add, ":score", 5),
  (try_end),

  (lt, ":score", 10),

  (str_store_string, s12, "str_s14"),
  (try_begin),
    (eq, "$cheat_mode", 1),
    (display_message, "str_persuasion__2__lord_reputation_modifier__relation_less_than_10"),
  (try_end),

  (str_store_string, s12, "str_s14"),
(else_try),
  (str_store_string, s12, "str_s13"),
  (assign, ":continue", 1),
(try_end),
##diplomacy start+ affiliated family members will conspire if relation >= 0
(try_begin),
  (eq, ":continue", 0),
  (call_script, "script_dplmc_is_affiliated_family_member", "$g_talk_troop"),
  (ge, reg0, 1),
  (ge, "$g_talk_troop_relation", 0),
  (str_store_string, s12, "str_s13"),
  (assign, ":continue", 1),
  (try_begin),
   (ge, "$cheat_mode", 1),
   (display_message, "@{!} DEBUG -- affiliated family member, overriding logic to continue"),
  (try_end),
(try_end),
##diplomacy end+
(eq, ":continue", 0),
],
"{s12}", "lord_pretalk",[]],

[anyone,"lord_recruit_1_relation", [],
"{s12}", "lord_recruit_2",[]],

#check for discontent

[anyone|plyr,"lord_recruit_2", [
],
"What do you think, in general terms, about kings, lords, and politics?", "lord_recruit_2_philosophy",[
]],




[anyone|plyr,"lord_recruit_2", [
##diplomacy start+
##OLD:
#(troop_slot_eq, "$g_talk_troop", slot_troop_spouse, "trp_player"),
#(neq, "$players_kingdom", "fac_player_supporters_faction"),
#(troop_get_type, ":type", "$g_talk_troop"),
#(eq, ":type", 0),
#(faction_get_slot, ":faction_leader", "$g_encountered_party_faction", slot_faction_leader),
#(str_store_troop_name, s11, ":faction_leader"),
##NEW:
#Verify player is not faction leader
(call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", "$players_kingdom"),
(lt, reg0, DPLMC_FACTION_STANDING_LEADER_SPOUSE),
#Asymmetrical spouse check
(this_or_next|is_between, "$g_talk_troop", heroes_begin, heroes_end),
   (troop_slot_eq, "trp_player", slot_troop_spouse, "$g_talk_troop"),
(this_or_next|troop_slot_eq, "$g_talk_troop", slot_troop_spouse, "trp_player"),
   (troop_slot_eq, "$g_talk_troop", slot_troop_spouse, "trp_player"),
(neq, "$players_kingdom", "fac_player_supporters_faction"),
(call_script, "script_dplmc_store_troop_is_female", "$g_talk_troop"),
(assign, reg65, reg0),
(assign, ":type", reg65),
#players of either gender can marry opposite-gender lords
(this_or_next|troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_hero),
(this_or_next|is_between, "$g_talk_troop", active_npcs_begin, active_npcs_end),
	(eq, ":type", 0),
(faction_get_slot, ":faction_leader", "$g_encountered_party_faction", slot_faction_leader),
(str_store_troop_name, s11, ":faction_leader"),
##diplomacy end+
],
##diplomacy start+ players of either gender can marry opposite-gender lords (also you->your)
"My {reg65?wife:husband}, I believe that you should rethink your allegiance to {s11}", "lord_spouse_leave_faction",[
##diplomacy end+
]],

[anyone,"lord_spouse_leave_faction", [
(faction_get_slot, ":faction_liege", "$g_talk_troop_faction", slot_faction_leader),
(call_script, "script_troop_get_relation_with_troop", "$g_talk_troop", ":faction_liege"),
(gt, reg0, 25),
(str_store_troop_name, s9, ":faction_liege"),
],
"{s9} has always been a good liege to me, but I will hear you out. What do you suggest we do?", "lord_spouse_leave_faction_2",[]],

[anyone,"lord_spouse_leave_faction", [
(faction_get_slot, ":faction_liege", "$g_talk_troop_faction", slot_faction_leader),
(call_script, "script_troop_get_relation_with_troop", "$g_talk_troop", ":faction_liege"),
(gt, reg0, -5),
(str_store_troop_name, s9, ":faction_liege"),
],
"I see no particular reason to abandon {s9}, but I will heed your advice. What do you suggest we do?", "lord_spouse_leave_faction_2",[]],

[anyone,"lord_spouse_leave_faction", [
(faction_get_slot, ":faction_liege", "$g_talk_troop_faction", slot_faction_leader),
(call_script, "script_troop_get_relation_with_troop", "$g_talk_troop", ":faction_liege"),
(str_store_troop_name, s9, ":faction_liege"),
],
"Yes -- as a liege, {s9} is a great disappointment. What do you suggest we do?", "lord_spouse_leave_faction_2",[]],


#  [anyone|plyr,"lord_spouse_leave_faction_2", [
#  ],
#   "Perhaps we should find another liege", "lord_spouse_leave_faction_other_liege",[]],

[anyone|plyr,"lord_spouse_leave_faction_2", [
##diplomacy start+ use culturally-appropriate term, and check gender of spouse
(try_begin),
	(eq, reg65, 1),
	(call_script, "script_dplmc_print_cultural_word_to_sreg", "$g_talk_troop", DPLMC_CULTURAL_TERM_KING_FEMALE, s1),
(else_try),
	(call_script, "script_dplmc_print_cultural_word_to_sreg", "$g_talk_troop", DPLMC_CULTURAL_TERM_KING, s1),
(try_end),
],
#either gender PC can marry opposite-gender lords
"I believe you should be {s1}, my {reg65?wife:husband}!", "lord_spouse_leave_faction_husband_king",[]],
#diplomacy end+

[anyone|plyr,"lord_spouse_leave_faction_2", [
#diplomacy start+ either gender PC can marry opposite-gender lords;
#also use culturally-appropriate word for "king/queen"
(try_begin),
	(eq, "$character_gender", tf_female),
	(call_script, "script_dplmc_print_cultural_word_to_sreg", "$g_talk_troop", DPLMC_CULTURAL_TERM_KING_FEMALE, s0),
(else_try),
	(call_script, "script_dplmc_print_cultural_word_to_sreg", "$g_talk_troop", DPLMC_CULTURAL_TERM_KING, s0),
(try_end),
],
"I am the rightful {s0} of Calradia", "lord_spouse_leave_faction_proclaim_queen",[]],
#diplomacy end+

[anyone|plyr,"lord_spouse_leave_faction_2", [
],
"Never mind.", "lord_pretalk",[]],

##diplomacy start+
##Before, Upstanding and Martial lords never married the player.  This check has been
##added because it is now possible to marry them.
[anyone,"lord_spouse_leave_faction_proclaim_queen", [
   (this_or_next|troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_moralist),#for promoted ladies
   (this_or_next|troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_upstanding),
      (troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_martial),

   (store_skill_level, ":persuasion_skill", "skl_persuasion", "trp_player"),

   (faction_get_slot, ":faction_liege", "$g_talk_troop_faction", slot_faction_leader),
   (call_script, "script_troop_get_relation_with_troop", "$g_talk_troop", ":faction_liege"),

   (game_get_reduce_campaign_ai, ":reduce_campaign_ai"),
   (try_begin),
      (eq, ":reduce_campaign_ai", 0),#hard, fail if relation above -10
	  (val_add, reg0, 10),
   (else_try),
      (eq, ":reduce_campaign_ai", 1),#normal, fail if relation above 0
   (else_try),
      (eq, ":reduce_campaign_ai", 2),#easy, fail if relation above 10
	  (val_sub, reg0, 10),
   (try_end),

   #Must beat player's persuasion
   (ge, reg0, ":persuasion_skill"),

   #Store liege name and gender
   (str_store_troop_name, s11, ":faction_liege"),
   (call_script, "script_dplmc_store_troop_is_female", ":faction_liege"),
], "I swore an oath to serve {s11}, and {reg0?she:he} has upheld {reg0?her:his} end of the bargain.  Let us have no more of this talk.",
		"lord_pretalk",
	[
		#(faction_get_slot, ":faction_liege", "$g_talk_troop_faction", slot_faction_leader),
		#(call_script, "script_troop_get_relation_with_troop", "$g_talk_troop", ":faction_liege"),
		#(try_begin),
		#	(this_or_next|gt, reg0, "$g_talk_troop_effective_relation"),
		#		(ge, reg0, 20),
		#	(call_script, "script_change_player_relation_with_troop", ":faction_leader", -1),
		#(try_end),
		(call_script, "script_change_player_relation_with_troop", "$g_talk_troop", -1),
	]],
##Not all lords are especially keen to betray.
[anyone,"lord_spouse_leave_faction_proclaim_queen", [
	(this_or_next|is_between, "$g_talk_troop", active_npcs_begin, active_npcs_end),
		(troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_hero),

	(assign, ":liege_bonus", 0),
	(try_begin),
		#Only apply this to the lord's first kingdom.
		(troop_slot_eq, "$g_talk_troop", slot_troop_original_faction, "$g_talk_troop_faction"),
		#Don't apply it to former comrades under arms
		(this_or_next|neg|is_between, "$g_talk_troop", companions_begin, companions_end),
			(troop_slot_eq, "$g_talk_troop", slot_troop_playerparty_history, dplmc_pp_history_nonplayer_entry),
		(this_or_next|neg|is_between, "$g_talk_troop", pretenders_begin, pretenders_end),
			(troop_slot_eq, "$g_talk_troop", slot_troop_playerparty_history, dplmc_pp_history_nonplayer_entry),
		(game_get_reduce_campaign_ai, ":reduce_campaign_ai"),
		(try_begin),
			(eq, ":reduce_campaign_ai", 0),#hard
			(assign, ":liege_bonus", 75),
		(else_try),
			(eq, ":reduce_campaign_ai", 1),#medium
			(assign, ":liege_bonus", 50),
		(else_try),
			(eq, ":reduce_campaign_ai", 2),#easy
			(assign, ":liege_bonus", 25),
		(try_end),
	(try_end),

	(call_script, "script_dplmc_get_troop_morality_value", "$g_talk_troop", tmt_honest),
	(assign, ":honesty", reg0),
	(try_begin),
		(eq, ":honesty", 0),
		(this_or_next|troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_cunning),
		(this_or_next|troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_roguish),
		(this_or_next|troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_quarrelsome),
		(this_or_next|troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_debauched),
			(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_ambitious),
		(assign, ":honesty", -1),
	(else_try),
		(eq, ":honesty", 0),
		(this_or_next|troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_upstanding),
			(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_moralist),
		(assign, ":honesty", 1),
	(try_end),

	#Check the target value to beat (generally this should be easy; this is just
	#to stop massively premature willingness to rebel)
	(try_begin),
		(ge, ":honesty", 1),
		(val_mul, ":liege_bonus", 3),
		(val_div, ":liege_bonus", 2),
	(else_try),
		(lt, ":honesty", 0),
		(val_div, ":liege_bonus", 2),
	(try_end),
	(faction_get_slot, ":faction_liege", "$g_talk_troop_faction", slot_faction_leader),
	(call_script, "script_troop_get_relation_with_troop", "$g_talk_troop", ":faction_liege"),
	(assign, ":liege_relation", reg0),
	(store_add, ":liege_score", ":liege_bonus", ":liege_relation"),
	(store_add, ":player_score", "$player_right_to_rule", "$g_talk_troop_effective_relation"),
	(try_begin),
		(ge, "$cheat_mode", 1),
		(assign, reg0, ":liege_score"),
		(assign, reg1, ":player_score"),
		(display_message, "@{!}DEBUG - liege score {reg0} vs player score {reg1}"),
	(try_end),
	(ge, ":liege_score", ":player_score"),
	#(call_script, "script_dplmc_store_troop_is_female", ":faction_liege"),
	(str_store_troop_name, s11, ":faction_liege"),
	], "I see no reason to turn my back on {s11} now.",
		"lord_pretalk", []],
##diplomacy end+

[anyone,"lord_spouse_leave_faction_husband_king", [
(assign, ":lord_has_fortress", 0),
(try_for_range, ":walled_center", walled_centers_begin, walled_centers_end),
(this_or_next|party_slot_eq, ":walled_center", slot_town_lord, "trp_player"),
(party_slot_eq, ":walled_center", slot_town_lord, "$g_talk_troop"),
(assign, ":lord_has_fortress", 1),
(try_end),
(eq, ":lord_has_fortress", 0),
##diplomacy start+ load relation text into s0
(call_script, "script_dplmc_print_player_spouse_says_my_husband_wife_to_s0", "$g_talk_troop", 0),
##diplomacy end+
],
#diplomacy start+ either gender PC can marry opposite-gender lords.  {s1} is reused from above
"Perhaps some day, {s0} -- but before I declare myself {s1}, I should like for one of us to hold a fortress which could serve as our court before we declare ourselves publically.",
#diplomacy end+
"lord_pretalk",[]],

[anyone,"lord_spouse_leave_faction_proclaim_queen", [
(assign, ":lord_has_fortress", 0),
(try_for_range, ":walled_center", walled_centers_begin, walled_centers_end),
(this_or_next|party_slot_eq, ":walled_center", slot_town_lord, "trp_player"),
(party_slot_eq, ":walled_center", slot_town_lord, "$g_talk_troop"),
(assign, ":lord_has_fortress", 1),
(try_end),
(eq, ":lord_has_fortress", 0),
##diplomacy start+ load relation text into s0
(call_script, "script_dplmc_print_player_spouse_says_my_husband_wife_to_s0", "$g_talk_troop", 0),
##diplomacy end+
],
##diplomacy start+ either gender PC can marry opposite-gender lords
"While I do not contest your claim, {s0}, I should like for one of us to hold a fortress which could serve as our court before we declare ourselves publically.", "lord_pretalk",[]],
##diplomacy end+

#Proclaim yourself queen
[anyone,"lord_spouse_leave_faction_proclaim_queen", [
(assign, ":player_has_enough_right", 0),
(try_begin),
(le, "$player_right_to_rule", 5),
##diplomacy start+
#Use culture/gender appropriate word for "queen"
(try_begin),
	(eq, "$character_gender", tf_female),
	(call_script, "script_dplmc_print_cultural_word_to_sreg", "$g_talk_troop", DPLMC_CULTURAL_TERM_KING_FEMALE, s0),
(else_try),
   (call_script, "script_dplmc_print_cultural_word_to_sreg", "$g_talk_troop", DPLMC_CULTURAL_TERM_KING, s0),
(try_end),
##diplomacy end+
(str_store_string, s11, "str_really_well_this_is_the_first_i_have_heard_of_it_unless_you_build_up_support_for_that_claim_you_may_find_it_difficult_to_find_allies_however_whenever_you_see_fit_to_declare_yourself_publically_as_queen_i_should_be_honored_to_be_your_consort"),
(assign, "$player_right_to_rule", 5),
(else_try),
(lt, "$player_right_to_rule", 20),
(str_store_string, s11, "str_yes_i_have_heard_such_talk_while_it_is_good_that_you_are_building_up_your_support_i_do_not_think_that_you_are_quite_ready_to_proclaim_yourself_yet_however_i_will_let_you_be_the_judge_of_that_and_when_you_decide_i_should_be_honored_to_be_your_consort"),
(else_try),
(str_store_string, s11, "str_yes_and_many_others_in_calradia_think_so_as_well_perhaps_it_is_time_that_you_declared_yourself_and_we_shall_ride_forth_together_to_claim_your_throne_i_should_be_honored_to_be_your_consort"),
(assign, ":player_has_enough_right", 1),
(try_end),
(eq, ":player_has_enough_right", 1),
],
"{s11}", "lord_spouse_leave_faction_proclaim_queen_confirm",[]],

[anyone,"lord_spouse_leave_faction_proclaim_queen", [
],
"{s11}", "lord_pretalk",[]],

[anyone|plyr,"lord_spouse_leave_faction_proclaim_queen_confirm", [
],
#diplomacy start+ either gender PC can marry opposite-gender lords
"I am ready now, my {wife/husband}. Let us go forth to seek our throne.", "close_window",[
#Apply relation loss:
	(assign, ":spouse", "$g_talk_troop"),
	(faction_get_slot, ":faction_liege", "$g_talk_troop_faction", slot_faction_leader),
	(call_script, "script_troop_get_player_relation", ":faction_liege"),
	(assign, ":faction_liege_relation", reg0),
	#The relation change with the liege is exacerbated by the number of fiefs
	#lost.  The "-10" figure is the previous relation hit for defecting; this now
	#scales up with the number of centers taken.
	(assign, ":relation_change", 0),
	(try_for_range, ":center_no", walled_centers_begin, walled_centers_end),
		(this_or_next|party_slot_eq, ":center_no", slot_town_lord, "trp_player"),
			(party_slot_eq, ":center_no", slot_town_lord, "$g_talk_troop"),
		(val_add, ":relation_change", -10),
	(try_end),

	#Defecting from a supposedly-beloved lord causes a greater hit to honor than if
	#the defection isn't so out-of-the-blue.
	(store_add, ":honor_change", ":faction_liege_relation", 5),
	(val_div, ":honor_change", -10),
	(val_min, ":honor_change", 0),
	#Defecting during a time of war is more dishonorable than defecting during a time
	#of peace.
	(try_begin),
		(assign, ":is_war", 0),
		(try_for_range, ":faction_no", npc_kingdoms_begin, npc_kingdoms_end),
			(faction_slot_eq, ":faction_no", slot_faction_state, sfs_active),
			(neq, ":faction_no", ":faction_liege_relation"),
			(store_relation, ":reln", ":faction_no", "$g_talk_troop_faction"),
			(lt, ":reln", 0),
			(assign, ":is_war", 1),
		(try_end),
		(gt, ":is_war", 0),
		(val_add, ":honor_change", -5),
	(try_end),
	#The baseline change is -10.  The greatest possible is -25 (100 relation with the king, and at war).
	(val_sub, ":honor_change", 10),

	#If the player was insufficiently recognized for his service, the honor loss
	#is lower.  (This will further modify the reaction of some lords.)
	(call_script, "script_dplmc_center_point_calc", "$g_talk_troop_faction", "trp_player", ":spouse", 3),
	(assign, ":avg_renown_per_center_point", reg0),
	(assign, ":player_center_points", reg1),
	(assign, ":spouse_center_points", reg2),
	(troop_get_slot, ":player_renown", "trp_player", slot_troop_renown),
	(troop_get_slot, ":spouse_renown", ":spouse", slot_troop_renown),
	(assign, ":fief_unfairness", 0),#0 = no justification on basis of unfairness, 1 = justified by unfairness

	(try_begin),
		(eq, ":player_center_points", 0),
		#Unfair if the player has no fiefs and at least 3/4 of average renown per center point
		(try_begin),
			(store_mul, reg0, ":avg_renown_per_center_point", 3),
			(val_div, reg0, 4),
			(ge, ":player_renown", reg0),
			(assign, ":fief_unfairness", 1),
			(val_add, ":honor_change", 5),
		(try_end),
	(else_try),
		#Unfair if the player's (renown / center points) is more than 5/4 the average
        (gt, ":player_center_points", 0),
		(store_div, ":player_renown_per_point", ":player_renown", ":player_center_points"),
		(store_mul, reg0, ":avg_renown_per_center_point", 5),
		(val_div, reg0, 4),
		#player is insufficiently rewarded for his renown
		(ge, ":player_renown_per_point", reg0),
		(assign, ":fief_unfairness", 1),
		(val_add, ":honor_change", 5),
	(try_end),
	#Now also try for the spouse
	(try_begin),
		(eq, ":spouse_center_points", 0),
		#Unfair if the spouse has no fiefs and at least 3/4 of average renown per center point
		(try_begin),
			(store_mul, reg0, ":avg_renown_per_center_point", 3),
			(val_div, reg0, 4),
			(ge, ":spouse_renown", reg0),
			(assign, ":fief_unfairness", 1),
			(val_add, ":honor_change", 5),
		(try_end),
	(else_try),
		#Unfair if the spouse's (renown / center points) is more than 5/4 the average
        (gt, ":spouse_center_points", 0),
		(store_div, ":spouse_renown_per_point", ":spouse_renown", ":spouse_center_points"),
		(store_mul, reg0, ":avg_renown_per_center_point", 5),
		(val_div, reg0, 4),
		#spouse is insufficiently rewarded for his renown

		(ge, ":spouse_renown_per_point", reg0),
		(assign, ":fief_unfairness", 1),
		(val_add, ":honor_change", 5),
	(try_end),

    (call_script, "script_change_player_relation_with_troop", ":faction_liege", ":relation_change"),
	(val_min, ":honor_change", 0),#honor cannot rise from this
	(try_begin),
		(lt, ":honor_change", 0),
		(call_script, "script_change_player_honor", ":honor_change"),
	(try_end),

	#If the player's departure is not justified by some other cause (such as
	#not being granted the rights to a fief that he had conquered, which Martial lords
	#would be sympathetic to at least in principle), he takes a general relations hit.
	(try_for_range, ":troop_no", heroes_begin, heroes_end),
		(troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_hero),
		(neq, ":troop_no", ":faction_liege"),
		(neq, ":troop_no", ":spouse"),
		(neq, ":troop_no", active_npcs_including_player_begin),
		(store_troop_faction, ":faction_no", ":troop_no"),
		(eq, ":faction_no", "$g_talk_troop_faction"),

		#Calculate the relationship penalty, if any
		(assign, ":relation_penalty", 0),
		(assign, ":spouse_penalty", 0),# only for lost fiefs

		#Relevant factors are:
		#The troop's relation with the player, the troop's relation with his liege,
		#the troop's primary reputation, and whether the troop has the tmt_honest
		#morality subtype (which despite its name is primarily related to keeping
		#bargains), and whether this defection is causing the troop to lose any fiefs.
		(call_script, "script_troop_get_player_relation", ":troop_no"),
		(assign, ":troop_player_relation", reg0),

		(call_script, "script_troop_get_relation_with_troop", ":troop_no", ":faction_liege"),
		(assign, ":troop_king_relation", reg0),

		(troop_get_slot, ":reputation", ":troop_no", slot_lord_reputation_type),
		(call_script, "script_dplmc_get_troop_morality_value", ":troop_no", tmt_honest),
		(assign, ":honest_val", reg0),

		(assign, ":fiefs_lost", 0),
		(assign, ":fiefs_lost_spouse", 0),
		(try_for_range, ":village_no", villages_begin, villages_end),
			(party_slot_eq, ":village_no", slot_town_lord, ":troop_no"),
			(party_get_slot, ":bound_center", ":village_no", slot_village_bound_center),
			(ge, ":bound_center", 1),
			(this_or_next|party_slot_eq, ":bound_center", slot_town_lord, ":spouse"),
				(party_slot_eq, ":bound_center", slot_town_lord, "trp_player"),
			(val_add, ":fiefs_lost", 1),
			#Blaming the spouse specifically:
			(party_slot_eq, ":bound_center", slot_town_lord, ":spouse"),
			(val_add, ":fiefs_lost_spouse", 1),
		(try_end),

		#Modify for relationship with liege
		(try_begin),
			(this_or_next|ge, ":honest_val", 1),
			(this_or_next|eq, ":reputation", lrep_upstanding),
				(eq, ":reputation", lrep_moralist),
			(ge, ":troop_king_relation", 5),
			(val_sub, ":relation_penalty", 1),
		(else_try),
			(this_or_next|lt, ":honest_val", 0),
			(this_or_next|eq, ":reputation", lrep_debauched),
			(this_or_next|eq, ":reputation", lrep_roguish),
				(eq, ":reputation", lrep_ambitious),
			(ge, ":troop_king_relation", 25),
			(val_sub, ":relation_penalty", 1),
		(else_try),
			(ge, ":troop_king_relation", 15),
			(val_sub, ":relation_penalty", 1),
		(try_end),

		#Those who like the king more than the player will take his side,
		#if they met the above relation threshold.
		(try_begin),
			(lt, ":relation_penalty", 0),
			(ge, ":troop_king_relation", ":troop_player_relation"),
			(val_sub, ":relation_penalty", 1),
		(try_end),

		#Lords who would consider the rebellion more justified if the player was "under-fiefed"
		#(some will only care if they liked the player; others have a more general sense of fairness).
		(try_begin),
			(ge, ":fief_unfairness", 1),
			(try_begin),
				(ge, ":honest_val", 0),
				(neq, ":reputation", lrep_debauched),
				(neq, ":reputation", lrep_selfrighteous),
				(neq, ":reputation", lrep_quarrelsome),
				(neq, ":reputation", lrep_cunning),
				(neq, ":reputation", lrep_ambitious),
				(ge, ":troop_player_relation", 0),
				(val_add, ":relation_penalty", ":fief_unfairness"),
			(else_try),
				(ge, ":troop_player_relation", 20),
				(val_add, ":relation_penalty", ":fief_unfairness"),
			(try_end),
		(try_end),

		#Subtract a penalty for lost fiefs
		(try_begin),
			(ge, ":fiefs_lost", 1),
			#apply -2 times fiefs lost
			(this_or_next|eq, ":reputation", lrep_custodian),
			(this_or_next|eq, ":reputation", lrep_ambitious),
            (this_or_next|eq, ":reputation", lrep_quarrelsome),
            (this_or_next|eq, ":reputation", lrep_selfrighteous),
            (this_or_next|eq, ":reputation", lrep_cunning),
            (this_or_next|eq, ":reputation", lrep_debauched),
				(eq, ":reputation", lrep_martial),
			(val_sub, ":relation_penalty", ":fiefs_lost"),
			(val_sub, ":relation_penalty", ":fiefs_lost"),
			(val_sub, ":spouse_penalty", ":fiefs_lost_spouse"),
			(val_sub, ":spouse_penalty", ":fiefs_lost_spouse"),
		(else_try),
			(ge, ":fiefs_lost", 1),
			#apply -1 times fiefs lost
			(neg|ge, ":reputation", lrep_conventional),
			(neq, ":reputation", lrep_goodnatured),
			(val_sub, ":relation_penalty", ":fiefs_lost"),
			(val_sub, ":spouse_penalty", ":fiefs_lost_spouse"),
		(try_end),

		#If the penalty for the spouse is less than zero, apply it
		(try_begin),
			(lt, ":spouse_penalty", 0),
			(call_script, "script_troop_change_relation_with_troop", ":troop_no", ":spouse", ":spouse_penalty"),
		(try_end),
		#If the penalty for the player is less than zero, apply it
		(lt, ":relation_penalty", 0),
		(call_script, "script_change_player_relation_with_troop", ":troop_no", ":relation_penalty"),
	(try_end),
#diplomacy end+
(call_script, "script_activate_player_faction", "trp_player"),
(call_script, "script_change_troop_faction", "$g_talk_troop", "fac_player_supporters_faction"),
(assign, "$g_leave_encounter", 1),
]],

[anyone|plyr,"lord_spouse_leave_faction_proclaim_queen_confirm", [
],
"Perhaps I am not yet ready.", "lord_pretalk",[]],




#Declare husband as pretender
[anyone,"lord_spouse_leave_faction_husband_king", [
(eq, "$players_kingdom", "fac_player_supporters_faction"),
(gt, "$supported_pretender", 0),
(str_store_troop_name, s4, "$supported_pretender"),
],
"Perhaps, but I would need your full support to press that claim. You would want to resolve {s4}'s rebellion before pushing this any further.", "lord_pretalk",[]],

[anyone,"lord_spouse_leave_faction_husband_king", [
(faction_get_slot, ":talk_troop_liege", "$g_talk_troop_faction", slot_faction_leader),
(str_store_troop_name, s4, ":talk_troop_liege"),
##diplomacy start+
#Replace "king" with {s0}
(call_script, "script_dplmc_print_cultural_word_to_sreg", "$g_talk_troop", DPLMC_CULTURAL_TERM_KING, s0),
],
"Most of the great families of this land have a claim to the throne... Given the recent issues with the succession, I should be as legitimate a {s0} as {s4}. ", "lord_spouse_leave_faction_husband_king_2",[]],
##diplomacy end+

[anyone,"lord_spouse_leave_faction_husband_king_2", [
##diplomacy start+
#Replace {queen/king} with {s0}
(try_begin),
   (eq, reg65, 0),
   (call_script, "script_dplmc_print_cultural_word_to_sreg", "$g_talk_troop", DPLMC_CULTURAL_TERM_KING, s0),
(else_try),
   (call_script, "script_dplmc_print_cultural_word_to_sreg", "$g_talk_troop", DPLMC_CULTURAL_TERM_KING_FEMALE, s0),
(try_end),
],
#next line replace {queen/king} with {s0}
"While {s0}, I will defer to your judgment in the appointment of ministers, the conduct of diplomacy, and other such matters.", "lord_spouse_leave_faction_husband_king_3",[]],
#diplomacy end+

[anyone|plyr,"lord_spouse_leave_faction_husband_king_3", [
],
#diplomacy start+ either gender PC can marry opposite-gender lords
"Very well, my {wife/husband}. Let us ride forth to press your claim! ", "close_window",[
#diplomacy end+
(call_script, "script_change_troop_faction", "$g_talk_troop", "fac_player_supporters_faction"),
(call_script, "script_activate_player_faction", "$g_talk_troop"),
(assign, "$g_leave_encounter", 1),
]],

[anyone|plyr,"lord_spouse_leave_faction_husband_king_3", [
], #SB: bide out -> bide our
"Actually, let us bide our time for a bit.", "lord_pretalk",[
]],


[anyone,"lord_recruit_2_philosophy", [
(call_script, "script_lord_comment_to_s43", "$g_talk_troop", "str_political_philosophy_default"),
],
"{s43} Did you wish to speak of anything else?", "lord_recruit_2",[]],

[anyone|plyr,"lord_recruit_2", [
(troop_slot_eq, "$g_talk_troop", slot_troop_recruitment_random, 0),
(faction_get_slot, ":leader", "$g_talk_troop_faction", slot_faction_leader),
(neq, "$g_talk_troop", ":leader"),
(neq, "trp_player", ":leader"),
(str_store_troop_name, s15, ":leader"),
],
"How do you feel about {s15}?", "lord_recruit_2_discontent",[
]],

[anyone|plyr,"lord_recruit_2", [
#(troop_slot_ge, "$g_talk_troop", slot_troop_recruitment_candidate, 1),
(troop_slot_ge, "$g_talk_troop", slot_lord_recruitment_argument, 1),
(neq, "$g_talk_troop_faction", "$players_kingdom"),
],
"Do you remember what I had told you earlier?", "lord_recruit_3_a",[
]],

[anyone|plyr|repeat_for_troops,"lord_recruit_2", [
(store_repeat_object, ":troop_no"),
(is_between, ":troop_no", active_npcs_begin, active_npcs_end),
(store_faction_of_troop, ":faction", ":troop_no"),
(eq, ":faction", "$g_talk_troop_faction"),
(neg|faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, ":troop_no"), #yields wrong string
(call_script, "script_troop_get_relation_with_troop", "$g_talk_troop", ":troop_no"),
(lt, reg0, -9),
(str_store_troop_name, s16, ":troop_no"),
],
"I have heard that you have quarreled with {s16}", "lord_recruit_quarrel_describe",[
(store_repeat_object, "$temp"),
]],

[anyone,"lord_recruit_quarrel_describe",
[
##diplomacy start+
(assign, ":other_lord_is_female", 0),
(try_begin),
  (call_script, "script_cf_dplmc_troop_is_female", "$temp"),
  (assign, ":other_lord_is_female", 1),
(try_end),
(assign, reg3, ":other_lord_is_female"),
(assign, reg4, ":other_lord_is_female"),
##diplomacy end+
(assign, ":specific_quarrel_found", 0),
(store_add, ":log_entries_plus_one", "$num_log_entries", 1),
(try_for_range, ":log_entry_no", 1, ":log_entries_plus_one"),
  (troop_slot_eq, "trp_log_array_entry_type", ":log_entry_no", logent_ruler_intervenes_in_quarrel),
  (troop_slot_eq, "trp_log_array_troop_object", ":log_entry_no", "$temp"),
  (troop_slot_eq, "trp_log_array_center_object", ":log_entry_no", "$g_talk_troop"),
  (troop_slot_eq, "trp_log_array_faction_object", ":log_entry_no", "$g_talk_troop_faction"),

  (call_script, "script_get_relevant_comment_for_log_entry", ":log_entry_no"),
  (str_store_string, s14, reg0),
  (assign, ":specific_quarrel_found", 1),
(else_try),
  (troop_slot_eq, "trp_log_array_entry_type", ":log_entry_no", logent_lord_protests_marshall_appointment),
  (troop_slot_eq, "trp_log_array_actor", ":log_entry_no", "$g_talk_troop"),
  (troop_slot_eq, "trp_log_array_center_object", ":log_entry_no", "$temp"),
  (call_script, "script_get_relevant_comment_for_log_entry", ":log_entry_no"),
  (str_store_string, s14, reg0),
  (assign, ":specific_quarrel_found", 1),
(else_try),
  (troop_slot_eq, "trp_log_array_entry_type", ":log_entry_no", logent_lord_blames_defeat),
  (troop_slot_eq, "trp_log_array_actor", ":log_entry_no", "$g_talk_troop"),
  (troop_slot_eq, "trp_log_array_center_object", ":log_entry_no", "$temp"),
  (call_script, "script_get_relevant_comment_for_log_entry", ":log_entry_no"),
  (str_store_string, s14, reg0),
  (assign, ":specific_quarrel_found", 1),
(else_try),
  (troop_slot_eq, "trp_log_array_entry_type", ":log_entry_no", logent_troop_feels_cheated_by_troop_over_land),
  (troop_slot_eq, "trp_log_array_actor", ":log_entry_no", "$g_talk_troop"),
  (troop_slot_eq, "trp_log_array_troop_object", ":log_entry_no",  "$temp"),
  (call_script, "script_get_relevant_comment_for_log_entry", ":log_entry_no"),
  (str_store_string, s14, reg0),
  (assign, ":specific_quarrel_found", 1),
(else_try),
  (troop_slot_eq, "trp_log_array_entry_type", ":log_entry_no", logent_lords_quarrel_over_woman),
  (troop_slot_eq, "trp_log_array_actor", ":log_entry_no", "$g_talk_troop"),
  (troop_slot_eq, "trp_log_array_center_object", ":log_entry_no", "$temp"),
  (call_script, "script_get_relevant_comment_for_log_entry", ":log_entry_no"),
  ##diplomacy start+ set gender for courted lady
  (troop_get_slot, ":courted_lady", "trp_log_array_troop_object", ":log_entry_no"),
  (call_script, "script_dplmc_store_troop_is_female_reg", ":courted_lady", 4),
  ##diplomacy end+
  #SB : rejoinder overwrote reg3
  (assign, reg3, ":other_lord_is_female"),
  (str_store_string, s14, reg0),
  (assign, ":specific_quarrel_found", 1),
(else_try),
  (troop_slot_eq, "trp_log_array_entry_type",  ":log_entry_no", logent_lords_quarrel_over_woman),
  (troop_slot_eq, "trp_log_array_actor", ":log_entry_no", "$temp"),
  (troop_slot_eq, "trp_log_array_center_object", ":log_entry_no", "$g_talk_troop"),
  (call_script, "script_get_relevant_comment_for_log_entry", ":log_entry_no"),
  #SB : rejoinder overwrites reg3
  (assign, reg3, ":other_lord_is_female"),
  ##diplomacy start+ set gender for courted lady
  (troop_get_slot, ":courted_lady", "trp_log_array_troop_object", ":log_entry_no"),
  # (assign, reg4, 0),
  # (try_begin),
  (call_script, "script_dplmc_store_troop_is_female_reg", ":courted_lady", 4),
    # (assign, reg4, 1),
  # (try_end),
  ##diplomacy end+
  (str_store_string, s14, reg0),
  (assign, ":specific_quarrel_found", 1),
(try_end),

(try_begin),
  # (eq, ":specific_quarrel_found", 1),
  # (assign, reg3, ":other_lord_is_female"), #not always the case
  # (str_store_string, s14, reg0),
# (else_try),
  (eq, ":specific_quarrel_found", 0),
  (call_script, "script_troop_describes_quarrel_with_troop_to_s14", "$g_talk_troop", "$temp"),
(try_end),

(call_script, "script_add_rumor_string_to_troop_notes", "$g_talk_troop", "$temp", s14),
],
"It is no secret. {s14}", "lord_recruit_2",[
]],

[anyone|plyr,"lord_recruit_2", [
],
"Never mind.", "lord_pretalk",[]],

[anyone,"lord_recruit_2_discontent", [
(faction_get_slot, ":leader", "$g_talk_troop_faction", slot_faction_leader),

(call_script, "script_calculate_troop_political_factors_for_liege", "$g_talk_troop", ":leader"),
(assign, ":result_for_political", reg3),

(try_begin),
(eq, "$cheat_mode", 1),
(display_message, "@{!}DEBUG : result_for_political is {reg3}"),
(try_end),

##diplomacy start+
#(call_script, "script_troop_get_relation_with_troop", "$g_talk_troop", ":leader"),
#(assign, ":liege_relation", reg0),
#(str_store_troop_name, s15, ":leader"),
#(troop_get_type, reg15, ":leader"),

(try_begin),
    (lt, ":leader", 0),#The dialogs below will be absurd if the leader is "no one", but it's better than just an error message
    (assign, ":liege_relation", 0),
    (str_store_string, s15, "str_noone"),
    (assign, reg15, 0),
(else_try),
    (call_script, "script_troop_get_relation_with_troop", "$g_talk_troop", ":leader"),
    (assign, ":liege_relation", reg0),
    (str_store_troop_name, s15, ":leader"),
    (assign, reg15, 0),
    (call_script, "script_cf_dplmc_troop_is_female", ":leader"),
    (assign, reg15, 1),
(try_end),
##diplomacy end+

(try_begin),
(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_upstanding),
(assign, ":intrigue_willingness", -5),
(str_store_string, s12, "str_i_am_disturbed_about_my_lord_s15s_choice_of_companions"),
(else_try),
(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_martial),
(assign, ":intrigue_willingness", -1),
(str_store_string, s12, "str_well_ill_be_honest_i_feel_that_sometimes_s15_overlooks_my_rights_and_extends_his_protection_to_the_unworthy"),
(else_try),
(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_quarrelsome),
(assign, ":intrigue_willingness", 5),
(str_store_string, s12, "str_heh_one_thing_that_ill_say_about_s15_is_that_he_has_a_ripe_batch_of_bastards_in_his_court"),
(else_try),
(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_goodnatured),
(assign, ":intrigue_willingness", -4),
(str_store_string, s12, "str_well_sometimes_i_have_to_say_that_i_question_s15s_judgment_regarding_those_who_he_keeps_in_his_court"),
(else_try),
(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_selfrighteous),
(assign, ":intrigue_willingness", 1),
(str_store_string, s12, "str_s15_is_a_weak_man_who_too_easily_lends_his_ear_to_evil_council_and_gives_his_protection_to_some_who_have_done_me_wrong"),
(else_try),
(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_cunning),
(assign, ":intrigue_willingness", 3),
(str_store_string, s12, "str_i_will_confess_that_sometimes_i_worry_about_s15s_judgment_particularly_in_the_matter_of_the_counsel_that_he_keeps"),
(else_try),
(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_debauched),
(assign, ":intrigue_willingness", 5),
(str_store_string, s12, "str_what_do_i_think_i_think_that_s15_is_a_vile_pretender_a_friend_to_the_flatterer_and_the_hypocrite"),
(else_try),
(troop_slot_ge, "$g_talk_troop", slot_lord_reputation_type, lrep_roguish),
(assign, ":intrigue_willingness", 5),
(str_store_string, s12, "str_well_s15_is_not_like_you_ill_say_that_much"),
(try_end),

#is there a specific quarrel?
(store_add, ":log_entries_plus_one", "$num_log_entries", 1),
(try_for_range, ":log_entry_no", 1, ":log_entries_plus_one"),
(troop_slot_eq, "trp_log_array_entry_type", ":log_entry_no", logent_ruler_intervenes_in_quarrel),
(troop_slot_eq, "trp_log_array_actor", ":log_entry_no", ":leader"),
(troop_slot_eq, "trp_log_array_center_object", ":log_entry_no", "$g_talk_troop"),
(call_script, "script_get_relevant_comment_for_log_entry", ":log_entry_no"),
(str_store_string, s12, reg0),
(else_try),
(troop_slot_eq, "trp_log_array_entry_type", ":log_entry_no", logent_lord_protests_marshall_appointment),
(troop_slot_eq, "trp_log_array_actor", ":log_entry_no", "$g_talk_troop"),
(troop_slot_eq, "trp_log_array_troop_object", ":log_entry_no",  ":leader"),
(call_script, "script_get_relevant_comment_for_log_entry", ":log_entry_no"),
(str_store_string, s12, reg0),
(else_try),
(troop_slot_eq, "trp_log_array_entry_type", ":log_entry_no", logent_lord_blames_defeat),
(troop_slot_eq, "trp_log_array_actor", ":log_entry_no", "$g_talk_troop"),
(troop_slot_eq, "trp_log_array_troop_object", ":log_entry_no", ":leader"),
(call_script, "script_get_relevant_comment_for_log_entry", ":log_entry_no"),
(str_store_string, s12, reg0),
(else_try),
(troop_slot_eq, "trp_log_array_entry_type", ":log_entry_no", logent_troop_feels_cheated_by_troop_over_land),
(troop_slot_eq, "trp_log_array_actor", ":log_entry_no", "$g_talk_troop"),
(troop_slot_eq, "trp_log_array_faction_object", ":log_entry_no", "$g_talk_troop_faction"),
(call_script, "script_get_relevant_comment_for_log_entry", ":log_entry_no"),
(str_store_string, s12, reg0),
(try_end),

(val_mul, ":intrigue_willingness", 2), #-10 to 10

(assign, "$lord_might_open_up", 0),
(try_begin),
(gt, ":result_for_political", 12),
(gt, ":liege_relation", 0),
(str_store_string, s12, "str_s15_long_may_he_live"),
(else_try),
(ge, ":result_for_political", ":intrigue_willingness"),
(str_store_string, s12, "str_he_is_my_liege_that_is_all_that_i_will_say_on_this_matter"),
(assign, "$lord_might_open_up", 1),
(try_end),

(lt, ":result_for_political", ":intrigue_willingness"),

(call_script, "script_add_rumor_string_to_troop_notes", "$g_talk_troop", ":leader", s12),
],
"{s12}", "lord_recruit_2_discontent_b",[
]],

[anyone, "lord_recruit_2_discontent", [
],
"{s12}", "lord_recruit_hesitant", []],

[anyone, "lord_recruit_2_discontent_b", [  ],
"Sometimes, I do worry about the state of the realm.", "lord_recruit_3", []],

[anyone|plyr,"lord_recruit_hesitant",
[
(eq, "$lord_might_open_up", 1),
],
"Can't I persuade you to say a little more?", "lord_recruit_hesitant_persuade",[
]],

[anyone|plyr,"lord_recruit_hesitant", [],
"Ah. Very good.", "lord_pretalk", []],

[anyone, "lord_recruit_hesitant_persuade",
[
(faction_get_slot, ":leader", "$g_talk_troop_faction", slot_faction_leader),
(call_script, "script_calculate_troop_political_factors_for_liege", "$g_talk_troop", ":leader"),
(assign, ":result_for_political", reg3),
(store_sub, ":open_up_desire", 12, ":result_for_political"),
(assign, reg3, ":open_up_desire"),
(val_div, ":open_up_desire", 3),

#(store_random_in_range, ":random", -2, ":max_random_value"),
(store_sub, ":max_random_value", 14, ":open_up_desire"),
(troop_get_slot, ":temp_ai_seed", "$g_talk_troop", slot_troop_temp_decision_seed),
(store_mod, ":random", ":temp_ai_seed", ":max_random_value"),
(val_sub, ":random", 2), #random changes between -2 to (14 - (":result_for_political" div 3))

#(val_sub, ":random", 20), #open this line when you want to 100% pass this step and remove again after making tests.
(store_skill_level, ":persuasion_skill", "skl_persuasion", "trp_player"),
(lt, ":random", ":persuasion_skill"),
],
"If you put it that way, I admit that I do sometimes worry about the state of the realm.", "lord_recruit_3", []],

[anyone, "lord_recruit_hesitant_persuade", [
#SB : replace call
(call_script, "script_change_troop_intrigue_impatience", "$g_talk_troop", 100),
(call_script, "script_troop_change_relation_with_troop", "$g_talk_troop", "trp_player", -1),
],
"You try my patience. I said that I have nothing to say.", "lord_pretalk", []],

[anyone|plyr,"lord_recruit_3", [
      ],
"Well, I have something to tell you.", "lord_recruit_3_a",[
]],

[anyone|plyr,"lord_recruit_3", [
      ],
"Well, that's interesting to know. But enough about politics.", "lord_pretalk",[
]],


[anyone, "lord_recruit_3_a", [
(troop_slot_ge, "$g_talk_troop", slot_lord_recruitment_argument, 1),

(troop_get_slot, ":candidate", "$g_talk_troop", slot_lord_recruitment_candidate),
(str_store_troop_name, s14, ":candidate"),

(try_begin),
(eq, ":candidate", "trp_player"),
(str_store_string, s14, "str_you"),
(try_end),

(try_begin),
(troop_slot_eq, "$g_talk_troop", slot_lord_recruitment_argument, argument_claim),
(eq, ":candidate", "trp_player"),
(str_store_string, s12, "str_that_you_are_the_rightful_heir_to_the_throne_of_calradia"),
(else_try),
(troop_slot_eq, "$g_talk_troop", slot_lord_recruitment_argument, argument_claim),
(str_store_troop_name, s14, ":candidate"),
(str_store_string, s12, "str_that_s14_is_the_rightful_ruler_of_calradia"),
(else_try),
(troop_slot_eq, "$g_talk_troop", slot_lord_recruitment_argument, argument_ruler),
(str_store_string, s12, "str_that_s14_will_rule_this_land_justly"),
(else_try),
(troop_slot_eq, "$g_talk_troop", slot_lord_recruitment_argument, argument_lords),
(str_store_string, s12, "str_that_s14_will_protect_our_rights_as_nobles"),
(else_try),
(troop_slot_eq, "$g_talk_troop", slot_lord_recruitment_argument, argument_victory),
(str_store_string, s12, "str_that_s14_will_unify_this_land_and_end_this_war"),
(else_try),
(troop_slot_eq, "$g_talk_troop", slot_lord_recruitment_argument, argument_benefit),
(str_store_string, s12, "str_that_s14_will_reward_me_with_a_fief"),
(try_end),
],
"{s12}", "lord_recruit_3_reset_claim", []],


[anyone|plyr, "lord_recruit_3_reset_claim", [  ],
"Yes, that's it.", "lord_recruit_3_claim", [

]],

[anyone|plyr, "lord_recruit_3_reset_claim", [  ],
"Let me phrase that a little differently.", "lord_recruit_3_a_reset", []],


[anyone, "lord_recruit_3_a",
[
#(display_message, "str_prior_arguments"),
#(assign, reg3, "$claim_arguments_made"),
#(display_message, "str_legal_reg3"),

#(assign, reg3, "$ruler_arguments_made"),
#(display_message, "str_just_king_reg3"),

#(assign, reg3, "$victory_arguments_made"),
#(display_message, "str_bring_peace_reg3"),

#(assign, reg3, "$lords_arguments_made"),
#(display_message, "str_only_best_counsel_reg3"),

#(assign, reg3, "$benefit_arguments_made"),
#(display_message, "str_reward_lords_reg3"),
],
"Yes?", "lord_recruit_3_b", []],

[anyone, "lord_recruit_3_a_reset", [],
"Yes?", "lord_recruit_3_b", []],


[anyone|plyr, "lord_recruit_3_b", [
(faction_get_slot, ":players_liege", "$players_kingdom", slot_faction_leader),
(eq, ":players_liege", "trp_player"),
],
"I ask for your support for the throne of Calradia", "lord_recruit_3_why",
[
(troop_set_slot, "$g_talk_troop", slot_lord_recruitment_candidate, "trp_player"),
(try_begin),
 (troop_slot_eq, "$g_talk_troop", slot_troop_recruitment_random, 0),

 #(store_random_in_range, ":random", 1, 101), #replaced with below 3 lines to provide a constant history (not changable by save-loads).
 (troop_get_slot, ":temp_ai_seed", "$g_talk_troop", slot_troop_temp_decision_seed),
 (store_div, ":random", ":temp_ai_seed", 100),  #I used div instead of mod to have a different random value, value generated from (mod 100) will be used in next steps. These two values should be non-related.
 (val_add, ":random", 1),

 (troop_set_slot, "$g_talk_troop", slot_troop_recruitment_random, ":random"),
(try_end),
]],


[anyone|plyr, "lord_recruit_3_b", [
(faction_get_slot, ":players_liege", "$players_kingdom", slot_faction_leader),
(neq, ":players_liege", "trp_player"),
(neq, "$players_kingdom", "$g_talk_troop_faction"),
(str_store_troop_name, s45, ":players_liege"),

],
"I ask you to pledge allegiance to my liege, {s45}, as monarch of all Calradia", "lord_recruit_3_why",
[
(faction_get_slot, ":players_liege", "$players_kingdom", slot_faction_leader),
(troop_set_slot, "$g_talk_troop", slot_lord_recruitment_candidate, ":players_liege"),
(try_begin),
 (troop_slot_eq, "$g_talk_troop", slot_troop_recruitment_random, 0),

 #(store_random_in_range, ":random", 1, 101), #replaced with below 3 lines to provide a constant history (not changable by save-loads).
 (troop_get_slot, ":temp_ai_seed", "$g_talk_troop", slot_troop_temp_decision_seed),
 (store_div, ":random", ":temp_ai_seed", 100),  #I used div instead of mod to have a different random value, value generated from (mod 100) will be used in next steps. These two values should be non-related.
 (val_add, ":random", 1),

 (troop_set_slot, "$g_talk_troop", slot_troop_recruitment_random, ":random"),
(try_end),
]],

[anyone|plyr, "lord_recruit_3_b", [
],
"Never mind.", "lord_pretalk",
[
]],

[anyone, "lord_recruit_3_dilemma_1", [ #explain the political dilemma
(troop_get_slot, ":players_liege", "$g_talk_troop", slot_lord_recruitment_candidate),
(str_store_troop_name, s45, ":players_liege"),
##diplomacy start+
#(troop_get_type, reg3, ":players_liege"),
(call_script, "script_dplmc_store_troop_is_female_reg", ":players_liege", 3),
##diplomacy end+

(faction_get_slot, ":current_liege", "$g_talk_troop_faction", slot_faction_leader),
(str_store_troop_name, s46, ":current_liege"),
#SB : reintroduce gender string for cur liege
(call_script, "script_dplmc_store_troop_is_female_reg", ":current_liege", 4),
#also use reg65 for self-reference

(call_script, "script_lord_comment_to_s43", "$g_talk_troop", "str_rebellion_dilemma_default"),
], "{s43}", "lord_recruit_3_dilemma_2",
[]],

[anyone, "lord_recruit_3_dilemma_2", [
(call_script, "script_lord_comment_to_s43", "$g_talk_troop", "str_rebellion_dilemma_2_default"),
], "{s43}", "lord_recruit_3_why",
[]],



[anyone, "lord_recruit_3_why",
[
(troop_slot_eq, "$g_talk_troop", slot_lord_recruitment_candidate, "trp_player"),

(assign, ":one_fortress_found", 0),
(try_for_range, ":walled_center", walled_centers_begin, walled_centers_end),
(this_or_next|party_slot_eq, ":walled_center", slot_town_lord, "$g_talk_troop"),
   (party_slot_eq, ":walled_center", slot_town_lord, "trp_player"),
(assign, ":one_fortress_found", 1),
(try_end),
(eq, ":one_fortress_found", 0),

],
"Neither of us has so much as a single fortress to our name. Would you rule your kingdom from an outlaw's den in the woods?", "lord_pretalk",
[
]],




[anyone, "lord_recruit_3_why",
[
(troop_get_slot, ":recruitment_candidate", "$g_talk_troop", slot_lord_recruitment_candidate),
(try_begin),
 (eq, ":recruitment_candidate", "trp_player"),
 (str_store_string, s44, "str_you"),
(else_try),
 (str_store_troop_name, s44, ":recruitment_candidate"),
(try_end),
],
"Why should I support {s44}?", "lord_recruit_3_d",
[
(troop_get_slot, ":recruitment_candidate", "$g_talk_troop", slot_lord_recruitment_candidate),
(try_begin),
 ##diplomacy start+ Override is_female to use script
 ##(troop_get_type, ":is_female", ":recruitment_candidate"),
 (assign, ":is_female", 0),
 (try_begin),
	(call_script, "script_cf_dplmc_troop_is_female", ":recruitment_candidate"),
	(assign, ":is_female", 1),
 (try_end),
 ##diplomacy end+
 (str_store_string, s45, "str_he"),
 (str_store_string, s47, "str_king"),

 (try_begin),
   (eq, ":is_female", 1),
   (str_store_string, s45, "str_she"),
   (str_store_string, s47, "str_queen"),
 (try_end),

 (try_begin),
   (eq, ":recruitment_candidate", "$supported_pretender"),
   (eq, "$supported_pretender_old_faction", "fac_kingdom_3"),
   (str_store_string, s47, "str_khan"),
 (try_end),

 (try_begin),
   (eq, ":recruitment_candidate", "trp_player"),
   (str_store_string, s45, "str_i"),
 (try_end),
(try_end),
]],

[anyone|plyr,"lord_recruit_3_d",
[
(troop_get_slot, ":recruitment_candidate", "$g_talk_troop", slot_lord_recruitment_candidate),

(str_store_string, s43, "str_according_to_the_ancient_law_and_custom_of_the_calradians_s45_should_be_s47"),
(try_begin),
(gt, "$supported_pretender", 0),
(eq, ":recruitment_candidate", "$supported_pretender"),
(str_store_faction_name, s46, "$supported_pretender_old_faction"),
(str_store_string, s43, "str_because_s44_is_the_rightful_s47_of_the_s46"),
(try_end),
],
"{s43}", "lord_recruit_3_claim",
[
(troop_set_slot, "$g_talk_troop", slot_lord_recruitment_argument, argument_claim),
(val_add, "$claim_arguments_made", 1),
(assign, "$opposed_arguments_made", "$victory_arguments_made"),
]],

[anyone|plyr,"lord_recruit_3_d",
[],
"If {s45} were {s47}, {s45} would deal with all men fairly and uphold the rights of the commons.", "lord_recruit_3_claim",
[
(troop_set_slot, "$g_talk_troop", slot_lord_recruitment_argument, argument_ruler),
(val_add, "$ruler_arguments_made", 1),
(assign, "$opposed_arguments_made", "$lords_arguments_made"),
]],

[anyone|plyr,"lord_recruit_3_d",
[],
"If {s45} were {s47}, {s45} would uphold your ancient rights as a noble of this land.", "lord_recruit_3_claim",
[
(troop_set_slot, "$g_talk_troop", slot_lord_recruitment_argument, argument_lords),
(val_add, "$lords_arguments_made", 1),
(assign, "$opposed_arguments_made", "$ruler_arguments_made"),
]],

[anyone|plyr,"lord_recruit_3_d",
[],
"Because {s45} can unify Calradia and end this discord.", "lord_recruit_3_claim",
[
(troop_set_slot, "$g_talk_troop", slot_lord_recruitment_argument, argument_victory),
(val_add, "$victory_arguments_made", 1),
(assign, "$opposed_arguments_made", "$claim_arguments_made"),
]],

[anyone|plyr,"lord_recruit_3_d",
[],
"Because {s45} will reward you with lands.", "lord_recruit_3_claim",[
(troop_set_slot, "$g_talk_troop", slot_lord_recruitment_argument, argument_benefit),
(val_add, "$benefit_arguments_made", 1),
]],

[anyone|plyr,"lord_recruit_3_d",
[],
"Never mind.", "lord_pretalk",[
(troop_set_slot, "$g_talk_troop", slot_troop_recruitment_random, 0),
]],

[anyone,"lord_recruit_3_claim", [
(neg|troop_slot_eq, "$g_talk_troop", slot_lord_recruitment_argument, argument_benefit),

(gt, "$opposed_arguments_made", 0),
(troop_get_slot, ":recruitment_random", "$g_talk_troop", slot_troop_recruitment_random),
(store_mul, ":opposed_number", "$opposed_arguments_made", 10),
(val_add, ":opposed_number", ":recruitment_random"),
(gt, ":opposed_number", 100),

(try_begin),
(troop_slot_eq, "$g_talk_troop", slot_lord_recruitment_argument, argument_claim),
(str_store_string, s12, "str_you_speak_of_claims_and_legalities_yet_to_others_you_talk_of_bringing_peace_by_force"),
(else_try),
(troop_slot_eq, "$g_talk_troop", slot_lord_recruitment_argument, argument_victory),
(str_store_string, s12, "str_you_speak_of_bringing_peace_by_force_yet_to_others_you_make_legal_claims"),
(else_try),
(troop_slot_eq, "$g_talk_troop", slot_lord_recruitment_argument, argument_commons),
(str_store_string, s12, "str_you_speak_to_some_of_upholding_the_rights_of_the_commons_yet_you_speak_to_others_of_uphold_the_rights_of_nobles_what_if_those_rights_are_in_conflict"),
(else_try),
(troop_slot_eq, "$g_talk_troop", slot_lord_recruitment_argument, argument_lords),
##diplomacy start+ "lord" to s12
(call_script, "script_dplmc_print_cultural_word_to_sreg", "$g_talk_troop", DPLMC_CULTURAL_TERM_LORD, s12),
##diplomacy end+
(str_store_string, s12, "str_you_speak_to_me_of_upholding_my_rights_as_a_lord_but_to_others_you_talk_of_upholding_the_rights_of_all_commons_what_if_those_rights_come_into_conflict"),
(try_end),
],
"Do you perhaps tell each person what you think they most want to hear? {s12}", "lord_recruit_3_claim",
[
(assign, "$opposed_arguments_made", -1),
]],

#Is the candidate  worthy of being king?
[anyone,"lord_recruit_3_claim", [

(assign, "$g_persuasion_trump_used", 0),

(troop_get_slot, ":recruitment_candidate", "$g_talk_troop", slot_lord_recruitment_candidate),

(assign, ":continue", 0),

(str_store_string, s12, "str_a_claim_should_be_strong_indeed_before_one_starts_talking_about_it"),

(try_begin), #non-player candidates are automatically considered worthy
(neq, ":recruitment_candidate", "trp_player"),

(str_store_string, s12, "str_indeed_please_continue"),
(assign, ":continue", 1),
(else_try),
(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_martial),

(str_store_string, s12, "str_a_claim_should_be_strong_indeed_before_one_starts_talking_about_it"),

#(assign, reg0, "$player_right_to_rule"),
#(assign, reg1, ":recruitment_candidate"),
#(troop_get_slot, reg2, ":recruitment_candidate", slot_troop_renown),
#(display_message, "@{!}DEBUG : player_right_to_rule = {reg0}"),
#(display_message, "@{!}DEBUG : recruitment_candidate = {reg1}"),
#(display_message, "@{!}DEBUG : renown = {reg2}"),

(ge, "$player_right_to_rule", 10),
##diplomacy start+ "king" to s12
(call_script, "script_dplmc_print_cultural_word_to_sreg", "$g_talk_troop", DPLMC_CULTURAL_TERM_KING, s12),
##diplomacy end+
(str_store_string, s12, "str_a_king_should_prove_his_valor_beyond_any_doubt_before_he_starts_talking_about_a_claim_to_the_throne"),
(troop_slot_ge, ":recruitment_candidate", slot_troop_renown, 400),

(assign, ":continue", 1),
(else_try),
(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_goodnatured),
##diplomacy start+ "king" to s12
(call_script, "script_dplmc_print_cultural_word_to_sreg", "$g_talk_troop", DPLMC_CULTURAL_TERM_KING, s12),
##diplomacy end+
(str_store_string, s12, "str_you_must_prove_yourself_a_great_warrior_before_men_will_follow_you_as_king"),
(troop_slot_ge, ":recruitment_candidate", slot_troop_renown, 200),

(assign, ":continue", 1),
(else_try),
(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_upstanding),

(str_store_string, s12, "str_a_claim_to_the_throne_should_be_strong_indeed_before_one_presses_it"),
(ge, "$player_right_to_rule", 20),
##diplomacy start+ "king" to s12
(call_script, "script_dplmc_print_cultural_word_to_sreg", "$g_talk_troop", DPLMC_CULTURAL_TERM_KING, s12),
##diplomacy end+
(str_store_string, s12, "str_indeed_but_a_man_must_also_prove_himself_a_great_warrior_before_men_will_follow_you_as_king"),
(troop_slot_ge, ":recruitment_candidate", slot_troop_renown, 200),

(assign, ":continue", 1),
(else_try),
(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_quarrelsome),
##diplomacy start+ "king" to s12 and "pigherd" to s14
(call_script, "script_dplmc_print_cultural_word_to_sreg", "$g_talk_troop", DPLMC_CULTURAL_TERM_KING, s12),
(call_script, "script_dplmc_print_cultural_word_to_sreg", "$g_talk_troop", DPLMC_CULTURAL_TERM_SWINEHERD, s14),
##diplomacy end+
(str_store_string, s12, "str_my_pigherd_can_declare_himself_king_if_he_takes_he_fancy_i_think_you_need_to_break_a_few_more_heads_on_tbe_battlefield_before_men_will_follow_you"),
(troop_slot_ge, ":recruitment_candidate", slot_troop_renown, 200),

(assign, ":continue", 1),
(else_try),
(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_selfrighteous),

(str_store_string, s12, "str_if_you_do_not_wish_to_die_on_a_scaffold_like_so_many_failed_pretenders_before_you_i_would_suggest_that_you_to_build_your_claim_on_stronger_foundations_so_that_men_will_follow_you"),
(ge, "$player_right_to_rule", 10),

(str_store_string, s12, "str_if_you_do_not_wish_to_die_on_a_scaffold_like_so_many_failed_pretenders_before_you_i_would_advise_you_prove_yourself_on_the_field_of_battle_so_that_men_will_follow_you"),
(troop_slot_ge, ":recruitment_candidate", slot_troop_renown, 200),

(assign, ":continue", 1),
(else_try),
(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_debauched),
##diplomacy start+ Replace "their swords" with "their {s12}", and "kings" with "{s14}"
(call_script, "script_dplmc_print_cultural_word_to_sreg", "$g_talk_troop", DPLMC_CULTURAL_TERM_WEAPON_PLURAL, s12),
(call_script, "script_dplmc_print_cultural_word_to_sreg", "$g_talk_troop", DPLMC_CULTURAL_TERM_KING_PLURAL, s14),
##diplomacy end+
(str_store_string, s12, "str_talk_is_for_heralds_and_lawyers_real_kings_prove_themselves_with_their_swords"),
(troop_slot_ge, ":recruitment_candidate", slot_troop_renown, 200),

(assign, ":continue", 1),
(else_try),
(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_cunning),

(str_store_string, s12, "str_i_were_you_i_would_try_to_prove_myself_a_bit_more_before_i_went_about_pressing_my_claim"),
(troop_slot_ge, ":recruitment_candidate", slot_troop_renown, 400),

(assign, ":continue", 1),
(try_end),

#Trump to overlook player unworthiness
(str_clear, s14),
(try_begin),
(eq, ":continue", 1),
(str_store_string, s12, "str_indeed_please_continue"),

(else_try),
(eq, ":continue", 0),
(eq, "$g_persuasion_trump_used", 0),
(assign, "$g_persuasion_trump_used", 1),
#persuasion check
(store_skill_level, ":persuasion_skill", "skl_persuasion", "trp_player"),

(troop_get_slot, ":persuasion_random", "$g_talk_troop", slot_troop_recruitment_random),

  (try_begin),
    (eq, "$cheat_mode", 1),
  #(assign, reg3, ":persuasion_skill"),
  #(assign, reg4, ":persuasion_random"),
  #(display_message, "str_trump_check_random_reg4_skill_reg3"),
(try_end),

(val_mul, ":persuasion_skill", 7),
(ge, ":persuasion_skill", ":persuasion_random"),

(assign, ":continue", 1),

(call_script, "script_lord_comment_to_s43", "$g_talk_troop", "str_changed_my_mind_default"),
(str_store_string, s14, "str_s12_s43"),
(str_store_string, s12, s14),
(try_end),

(eq, ":continue", 1),

],
"{s12}", "lord_recruit_4",[
]],


#the lord refuses. s12 is set by the previous
[anyone,"lord_recruit_3_claim",  [
                  ],
"{s12}", "lord_pretalk",[
]],


[anyone|plyr,"lord_recruit_4", [
(troop_get_slot, ":recruitment_candidate", "$g_talk_troop", slot_lord_recruitment_candidate),
(str_store_troop_name, s16,  ":recruitment_candidate"),

(try_begin),
(eq,  ":recruitment_candidate", "trp_player"),
(str_store_string, s16, "str_me"),
(try_end),
],
"I ask you to pledge your allegiance to {s16}.", "lord_recruit_4_objective_conditions",[]],

[anyone|plyr,"lord_recruit_4", [
(troop_set_slot, "$g_talk_troop", slot_troop_recruitment_random, 0),
                ],
"Never mind.", "lord_pretalk",[]],

[anyone,"lord_recruit_4_objective_conditions", [
   (troop_get_slot, ":recruitment_candidate", "$g_talk_troop", slot_lord_recruitment_candidate),

   (call_script, "script_calculate_troop_political_factors_for_liege", "$g_talk_troop", ":recruitment_candidate"),
   (str_store_string, s33, s14),

   (assign, ":result_for_security", reg2),
      (assign, ":result_for_political", reg4),

   #this will store
   (try_begin),
     (eq, "$cheat_mode", 1),
     (display_message, "str_preliminary_result_for_political_=_reg4"),
   (try_end),

#			(assign, ":result_for_ideological", reg6),
#			(assign, ":result_for_material", reg8),
   (assign, ":change_penalty", reg10),
   (assign, ":result_for_new_liege", reg0),

   (faction_get_slot, ":cur_liege", "$g_talk_troop_faction", slot_faction_leader),
   (call_script, "script_calculate_troop_political_factors_for_liege", "$g_talk_troop", ":cur_liege"),

   (store_sub, ":result_for_security_comparative", ":result_for_security", reg2),
   (store_sub, ":result_for_political_comparative", ":result_for_political", reg4),
#			(store_sub, ":result_for_ideological_comparative", ":result_for_ideological", reg6), #to be used if NPC lords ever have different ideologies
#			(store_sub, ":result_for_material_comparative", ":result_for_material", reg8), #result for material (meaning, promised new fiefs or bribes) currently disabled
   (assign, ":result_for_old_liege", reg0),

   (try_begin),
     (eq, "$cheat_mode", 1),
     (assign, reg31, ":result_for_new_liege"),
     (assign, reg32, ":result_for_old_liege"),

     (display_message, "@{!}DEBUG : result_for_new_liege : {reg31}"),
     (display_message, "@{!}DEBUG : result_for_old_liege : {reg32}"),
   (try_end),

   (store_sub, "$pledge_chance", ":result_for_new_liege", ":result_for_old_liege"),
   (val_add, "$pledge_chance", 50),
   (val_div, "$pledge_chance", 2),

   (try_begin),
      (lt, ":result_for_political", 0),

      (try_begin),
         (troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_upstanding),
         (str_store_string, s31, "str_i_worry_about_those_with_whom_you_have_chosen_to_surround_yourself" ),
      (else_try),
         (troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_martial),
         (str_store_string, s31, "str_there_are_some_outstanding_matters_between_me_and_some_of_your_vassals_"),
         (try_begin),
           (assign, reg41, ":result_for_political"),
           ##diplomacy start+ Only show debug messages if cheat mode is on
           (ge, "$cheat_mode", 1),
           ##diplomacy end+
           (display_message, "str_result_for_political_=_reg41"),
         (try_end),
      (else_try),
         (troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_quarrelsome),
         (str_store_string, s31, "str_my_liege_has_his_faults_but_i_dont_care_for_your_toadies"),
      (else_try),
         (troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_goodnatured),
         (str_store_string, s31, "str_i_think_youre_a_good_man_but_im_worried_that_you_might_be_pushed_in_the_wrong_direction_by_some_of_those_around_you"),
      (else_try),
         (troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_selfrighteous),
         (str_store_string, s31, "str_i_am_loathe_to_fight_alongside_you_so_long_as_you_take_under_your_wing_varlots_and_base_men"),
      (else_try),
         (troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_cunning),
         (str_store_string, s31, "str_ill_be_honest__with_some_of_those_who_follow_you_i_think_id_be_more_comfortable_fighting_against_you_than_with_you"),
      (else_try),
         (troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_debauched),
         (str_store_string, s31, "str_i_say_that_you_can_judge_a_man_by_the_company_he_keeps_and_you_have_surrounded_yourself_with_vipers_and_vultures"),
      (else_try),
         (troop_slot_ge, "$g_talk_troop", slot_lord_reputation_type, lrep_roguish),
         (str_store_string, s31, "str_you_know_that_i_have_always_had_a_problem_with_some_of_our_companions"),
      (try_end),
   (else_try),
      (lt, ":result_for_political_comparative", 0),
      (str_store_string, s31, "str_politically_i_would_be_a_better_position_in_the_court_of_my_current_liege_than_in_yours"),
   (else_try),
      (str_store_string, s31, "str_i_am_more_comfortable_with_you_and_your_companions_than_with_my_current_liege"),
   (try_end),
   #end political string

   #end
   (try_begin),
      (lt, ":result_for_security", 10),

      (try_begin),
         (this_or_next|troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_cunning),
         (troop_slot_ge, "$g_talk_troop", slot_lord_reputation_type, lrep_roguish),
         (str_store_string, s32, "str_militarily_youre_in_no_position_to_protect_me_should_i_be_attacked_id_be_reluctant_to_join_you_until_you_could"),
      (else_try),
         (troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_upstanding),
         (str_store_string, s32, "str_militarily_when_i_consider_the_lay_of_the_land_i_realize_that_to_pledge_myself_to_you_now_would_endanger_my_faithful_retainers_and_my_family"),
      (else_try),
         (troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_martial),
         (str_store_string, s32, "str_militarily_youre_in_no_position_to_come_to_my_help_if_someone_attacked_me_i_dont_mind_a_good_fight_but_i_like_to_have_a_chance_of_winning"),
      (else_try),
         (troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_goodnatured),
         (str_store_string, s32, "str_militarily_youre_in_no_position_to_come_to_my_help_if_someone_attacked_me_i_dont_mind_a_good_fight_but_i_like_to_have_a_chance_of_winning"),
      (else_try),
         (troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_debauched),
         (str_store_string, s32, "str_militarily_you_would_have_me_join_you_only_to_find_myself_isolated_amid_a_sea_of_enemies"),
      (else_try),
         (troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_selfrighteous),
         (str_store_string, s32, "str_militarily_you_would_have_me_join_you_only_to_find_myself_isolated_amid_a_sea_of_enemies"),
      (else_try),
         (troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_quarrelsome),
         (str_store_string, s32, "str_militarily_youre_in_no_position_to_come_to_my_help_if_someone_attacked_me_youd_let_me_be_cut_down_like_a_dog_id_bet"),
      (try_end),
   (else_try),
      (lt, ":result_for_security_comparative", 0),
      (str_store_string, s32, "str_militarily_i_wouldnt_be_any_safer_if_i_joined_you"),
   (else_try),
      (str_store_string, s32, "str_militarily_i_might_be_safer_if_i_joined_you"),
   (try_end),

   (try_begin),
      (gt, ":change_penalty", 40),
      (str_store_string, s34, "str_finally_there_is_a_cost_to_ones_reputation_to_change_sides_in_this_case_the_cost_would_be_very_high"),
   (else_try),
      (gt, ":change_penalty", 20),
      (str_store_string, s34, "str_finally_there_is_a_cost_to_ones_reputation_to_change_sides_in_this_case_the_cost_would_be_significant"),
   (else_try),
      (str_store_string, s34, "str_finally_there_is_a_cost_to_ones_reputation_to_change_sides_in_this_case_however_many_men_would_understand"),
   (try_end),
   ],
"Let me think...", "lord_recruit_5_security",[
]],

[anyone,"lord_recruit_5_security",  [
],
"{s32}", "lord_recruit_5_political",
[]],


[anyone,"lord_recruit_5_political",  [
],
"{s31}", "lord_recruit_5_ideological",
[]],

#    [anyone,"lord_recruit_5_material",  [

#	],
#	"{!}[Anticipated material gains currently not counted]", "lord_recruit_5_ideological",
#	[]],

[anyone,"lord_recruit_5_ideological",  [
],
"{s33}", "lord_recruit_5_change_sides",
[

]],

[anyone,"lord_recruit_5_change_sides",  [
],
"{s34}", "lord_recruit_6",
[
(try_begin),
 (eq, "$cheat_mode", 1),
 (assign, reg1, "$pledge_chance"),
 (display_message, "str_chance_of_success_=_reg1"),
(try_end),
]],

[anyone|plyr,"lord_recruit_6",[
                      ],
"It is time for you to make a decision.", "lord_recruit_6_reaction",
[
]],

[anyone|plyr,"lord_recruit_6",[
                      ],
"No need to decide anything -- we can speak of this at a later time.", "lord_pretalk",
[
]],


[anyone,"lord_recruit_6_reaction",
[
],
"Very well...", "lord_recruit_7_decision",
[
(troop_set_slot, "$g_talk_troop", slot_troop_recruitment_random, 0),
]],


[anyone,"lord_recruit_7_decision",
[
#(store_random_in_range, ":random", 0, 100),
(troop_get_slot, ":temp_ai_seed", "$g_talk_troop", slot_troop_temp_decision_seed),
(store_mod, ":random", ":temp_ai_seed", 100),

(try_begin),
  (eq, "$cheat_mode", 1),
  (assign, reg3, ":random"),
  (display_message, "str_random_=_reg3"),
(try_end),

(faction_get_slot, ":leader", "$g_talk_troop_faction", slot_faction_leader),
(str_store_troop_name, s14, ":leader"),

(assign, ":continue_to_pledge", 0),

(try_begin),
  (troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_selfrighteous),
  (gt, ":random", "$pledge_chance"),
  (str_store_string, s12, "str_i_will_not_have_it_be_said_about_me_that_i_am_a_traitor_that_is_my_final_decision_i_have_nothing_more_to_say_on_this_matter"),
(else_try),
  (troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_martial),
  (gt, ":random", "$pledge_chance"),

  (str_store_string, s12, "str_i_am_pledged_to_defend_s14_i_am_sorry_though_we_may_meet_on_the_battlefield_i_hope_that_we_will_still_be_friends"),
(else_try),
  (this_or_next|troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_goodnatured),
  (troop_slot_ge, "$g_talk_troop", slot_lord_reputation_type, lrep_roguish),
  (gt, ":random", "$pledge_chance"),

  (str_store_string, s12, "str_i_really_cannot_bring_myself_to_renounce_s14_i_am_sorry_please_lets_not_talk_about_this_any_more"),
(else_try),
  (troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_upstanding),
  (gt, ":random", "$pledge_chance"),

  (str_store_string, s12, "str_however_i_have_decided_that_i_must_remain_loyal_to_s14_i_am_sorry"),
(else_try),
  (troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_debauched),
  (gt, ":random", "$pledge_chance"),

  (str_store_string, s12, "str_however_i_will_not_let_you_lead_me_into_treason_do_not_talk_to_me_of_this_again"),
(else_try),
  (troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_cunning),
  (gt, ":random", "$pledge_chance"),

  (str_store_string, s12, "str_its_not_good_to_get_a_reputation_as_one_who_abandons_his_liege_that_is_my_decision_let_us_speak_no_more_of_this_matter"),
(else_try),
  (troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_quarrelsome),
  (gt, ":random", "$pledge_chance"),

  (str_store_string, s12, "str_ive_decided_to_stick_with_s14_i_dont_want_to_talk_about_this_matter_any_more"),
(else_try),
  (assign, ":continue_to_pledge", 1),
(try_end),

(eq, ":continue_to_pledge", 0),
],
"{s12}", "lord_pretalk",
[
(call_script, "script_change_troop_intrigue_impatience", "$g_talk_troop", 500),
]],

[anyone,"lord_recruit_7_decision",
[
(troop_get_slot, ":recruitment_candidate", "$g_talk_troop", slot_lord_recruitment_candidate),
(str_store_troop_name, s4, ":recruitment_candidate"),

(try_begin),
  (neq, ":recruitment_candidate", "trp_player"),
  (str_store_string, s45, s4),
  (assign, reg5, 0),
(else_try),
  (str_store_string, s45, "str_you"),
  (assign, reg5, 1),
(try_end),

(try_begin),
  (eq, "$cheat_mode", 1),
  (display_message, "str_lord_pledges_to_s4"),
(try_end),
(call_script, "script_dplmc_store_troop_is_female_reg", ":recruitment_candidate", 3),

(faction_get_slot, ":current_liege", "$g_talk_troop_faction", slot_faction_leader),
(str_store_troop_name, s46, ":current_liege"),
(call_script, "script_dplmc_store_troop_is_female_reg", ":current_liege", 4),
#SB : reg4 holds cur liege gender, reg3 holds new liege gender, reg5 holds whether player is new liege
#s4, s45 hold new liege name, s46 holds cur liege
(call_script, "script_lord_comment_to_s43", "$g_talk_troop", "str_rebellion_agree_default"),
#SB : use rebellion_agree_default
],
# "Very well -- I am ready to pledge myself to {s4} as my {reg4?queen:king}.",
"{s43}", "lord_recruit_pledge",
[
(troop_get_slot, ":recruitment_candidate", "$g_talk_troop", slot_lord_recruitment_candidate),

(try_begin),
##diplomacy start+
  (eq, ":recruitment_candidate", "trp_player"),
  (is_between, "$players_kingdom", npc_kingdoms_begin, npc_kingdoms_end),
  (call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", "$players_kingdom"),
  (ge, reg0, DPLMC_FACTION_STANDING_LEADER_SPOUSE),
  #Do not activate player faction
(else_try),
##diplomacy end+
  (eq, ":recruitment_candidate", "trp_player"),
  (faction_slot_eq, "fac_player_supporters_faction", slot_faction_state, sfs_inactive),
  (call_script, "script_activate_player_faction", "trp_player"),
(try_end),

(assign, "$lord_expects_fief", 0),
(try_begin),
  (troop_slot_eq, "$g_talk_troop", slot_lord_recruitment_argument, argument_benefit),
  (assign, "$lord_expects_fief", 1),
(try_end),

(call_script, "script_change_troop_faction", "$g_talk_troop", "$players_kingdom"),

(try_begin), #Actually, perhaps do provocation rather than war
  (store_relation, ":relation", "$players_kingdom", "$g_talk_troop_faction"),
  (ge, ":relation", 0),

  (try_begin),
    (eq, "$cheat_mode", 1),
    (display_message, "str_lord_recruitment_provokes_home_faction"),
  (try_end),

  (call_script, "script_add_log_entry", logent_border_incident_troop_suborns_lord, "trp_player", -1, "$g_talk_troop","$g_talk_troop_faction"),
  (store_add, ":slot_provocation_days", "$players_kingdom", slot_faction_provocation_days_with_factions_begin),
  (val_sub, ":slot_provocation_days", kingdoms_begin),
  (faction_set_slot, "$g_talk_troop_faction", ":slot_provocation_days", 30),

  (faction_get_slot, ":other_liege", "$g_talk_troop_faction", slot_faction_leader),
  (call_script, "script_troop_change_relation_with_troop", "trp_player", ":other_liege", -3),
(try_end),

# (troop_get_type, reg4, ":recruitment_candidate"),
 # ##diplomacy start+ Override reg4
 # (assign, reg4, 0),
 # (try_begin),
	# (call_script, "script_cf_dplmc_troop_is_female", ":recruitment_candidate"),
	# (assign, reg4, 1),
 # (try_end),
 # ##diplomacy end+
(try_begin),
  (eq, ":recruitment_candidate", "trp_player"),
  (str_store_string, s4, "str_you"),
  (call_script, "script_change_player_right_to_rule", 5),
(else_try), #SB : add renown, because why not
  (str_store_troop_name, s4, ":recruitment_candidate"),
  (assign, ":renown_change", 20),
  (options_get_campaign_ai, ":renown_change"),
  (val_mul, ":renown_change", 10),
  (val_add, ":renown_change", 30), #30 to 50
  (call_script, "script_change_troop_renown", ":recruitment_candidate", ":renown_change"), #careful, this modifies reg4/5 as output
(try_end),
]],


[anyone,"lord_recruit_pledge",
[
(eq, "$lord_expects_fief", 1),
],
"Remember. You have promised me a fief. I will hold you to that promise.", "lord_recruit_pledge",
[
(assign, "$lord_expects_fief", 0),
(troop_set_slot, "$g_talk_troop", slot_lord_recruitment_argument, 0),
(call_script, "script_add_log_entry", logent_liege_promises_fief_to_vassal, "trp_player", 0, "$g_talk_troop", "$players_kingdom"),
(troop_set_slot, "$g_talk_troop", slot_troop_promised_fief, 1),
]],

[anyone,"lord_recruit_pledge",
[
(troop_get_slot, ":recruitment_candidate", "$g_talk_troop", slot_lord_recruitment_candidate),
(eq, ":recruitment_candidate", "trp_player"),
##diplomacy start+: Replace "sword" with culturally-appropriate word
(call_script, "script_dplmc_print_cultural_word_to_sreg", "$g_talk_troop", DPLMC_CULTURAL_TERM_WEAPON, s0),
],
#"So be it -- I pledge allegiance to you as your faithful vassal. I shall stand at your side to fight your enemies should you need my sword, and uphold your claims and those of your legitimate heirs. I expect in turn that you will protect me and recognize my rights as your vassal.", "lord_recruit_pledge_conclude",
"So be it -- I pledge allegiance to you as your faithful vassal. I shall stand at your side to fight your enemies should you need my {s0}, and uphold your claims and those of your legitimate heirs. I expect in turn that you will protect me and recognize my rights as your vassal.", "lord_recruit_pledge_conclude",
##diplomacy end+
[
(assign, "$g_leave_encounter", 1),
]],

[anyone,"lord_recruit_pledge",  [
(troop_get_slot, ":recruitment_candidate", "$g_talk_troop", slot_lord_recruitment_candidate),
(str_store_troop_name, s4, ":recruitment_candidate"),
##diplomacy start+: Replace "sword" with culturally-appropriate word, and fix some pronouns
(call_script, "script_dplmc_print_cultural_word_to_sreg", "$g_talk_troop", DPLMC_CULTURAL_TERM_WEAPON, s0),
(call_script, "script_dplmc_store_troop_is_female_reg", ":recruitment_candidate", 4),
],
#"So be it -- you may inform {s4} that I am now {reg4?her:him} faithful vassal, that I will follow {reg4?her:him} as long as my breath remains, and I will be at {reg4?her:his} side to fight your enemies should you need my sword, and that I uphold your lawful claims and those of your legitimate heirs. In turn, I expect his protection and his recognition of my rights as his vassal.", "lord_recruit_pledge_conclude",
"So be it -- you may inform {s4} that I am now {reg4?her:his} faithful vassal, that I will follow {reg4?her:him} as long as my breath remains, and I will be at {reg4?her:his} side to fight {reg4?her:his} enemies should {reg4?she:he} need my {s0}, and that I uphold {reg4?her:his} lawful claims and those of {reg4?her:his} legitimate heirs. In turn, I expect {reg4?her:his} protection and {reg4?her:his} recognition of my rights as {reg4?her:his} vassal.", "lord_recruit_pledge_conclude",
##diplomacy end+
[]],

[anyone,"lord_recruit_pledge_conclude",  [
],
"Now... It is a momentous step I have taken. I will take my leave, as I may need some time prepare myself for what comes next.", "close_window",
[(assign, "$g_leave_encounter", 1)]], #SB : dialog encounter fighting bugfix
#lord recruitment changes end


#POLITICAL QUESTS RESOLUTIONS
[anyone, "lord_start",   [

(check_quest_active, "qst_offer_gift"),
(quest_slot_eq, "qst_offer_gift", slot_quest_target_troop, "$g_talk_troop"),
(quest_slot_eq, "qst_offer_gift", slot_quest_current_state, 2),

(this_or_next|troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_upstanding),
(this_or_next|troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_goodnatured),
(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_martial),
(store_random_in_range, ":random", 3),
(eq, ":random", 0),

(quest_get_slot, ":giver_troop", "qst_offer_gift", slot_quest_giver_troop),
(str_store_troop_name, s10, ":giver_troop"),
(call_script, "script_troop_get_family_relation_to_troop", ":giver_troop",  "$g_talk_troop"),
##diplomacy start+ change to use script_dplmc_print_subordinate_says_sir_madame_to_s0
(call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),
],
"I received the gift, presented to me through my {s11} {s10}. It was a noble gesture, {s0}, and I regret that we ever quarreled.", "close_window",#diplomacy: changed {sir/my lady} to {s0}
[##diplomacy end+
(call_script, "script_troop_get_relation_with_troop", "$g_talk_troop", "trp_player"),
(store_sub, ":difference", 0, reg0),
(val_add, ":difference", 5),
(val_max, ":difference", 5),
(call_script, "script_troop_change_relation_with_troop", "$g_talk_troop", "trp_player", ":difference"),
(call_script, "script_end_quest", "qst_offer_gift"),
(assign, "$g_leave_encounter", 1),

]],



[anyone,"lord_start",[
(check_quest_active, "qst_offer_gift"),
(quest_slot_eq, "qst_offer_gift", slot_quest_target_troop, "$g_talk_troop"),
(quest_slot_eq, "qst_offer_gift", slot_quest_current_state, 2),

(store_random_in_range, ":random", 3),
(neq, ":random", 0),

(quest_get_slot, ":giver_troop", "qst_offer_gift", slot_quest_giver_troop),
(str_store_troop_name, s10, ":giver_troop"),
(call_script, "script_troop_get_family_relation_to_troop", ":giver_troop",  "$g_talk_troop"),

],
"I received the gift, presented to me through my {s11} {s10}. For {reg4?her:his} sake, I am willing to let bygones be bygones.", "close_window",	[
(call_script, "script_troop_get_relation_with_troop", "$g_talk_troop", "trp_player"),
(store_sub, ":difference", 0, reg0),
(val_max, ":difference", 2),
(call_script, "script_troop_change_relation_with_troop", "$g_talk_troop", "trp_player", ":difference"),
(call_script, "script_end_quest", "qst_offer_gift"),
(assign, "$g_leave_encounter", 1),
]],

[anyone,"lord_start",[
(check_quest_active, "qst_offer_gift"),
(quest_slot_eq, "qst_offer_gift", slot_quest_target_troop, "$g_talk_troop"),
(quest_slot_eq, "qst_offer_gift", slot_quest_current_state, 2),

(this_or_next|troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_quarrelsome),
(this_or_next|troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_debauched),
(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_selfrighteous),

(quest_get_slot, ":giver_troop", "qst_offer_gift", slot_quest_giver_troop),
(str_store_troop_name, s10, ":giver_troop"),
(call_script, "script_troop_get_family_relation_to_troop", ":giver_troop",  "$g_talk_troop"),

],
"I received the gift, presented to me through my {s11} {s10}. Bah! Do you think you can buy my friendship?", "close_window",	[
(call_script, "script_end_quest", "qst_offer_gift"),
(assign, "$g_leave_encounter", 1),

]],



[anyone,"lord_start",[
(check_quest_active, "qst_offer_gift"),
(quest_slot_eq, "qst_offer_gift", slot_quest_target_troop, "$g_talk_troop"),
(quest_slot_eq, "qst_offer_gift", slot_quest_current_state, 2),

(quest_get_slot, ":giver_troop", "qst_offer_gift", slot_quest_giver_troop),
(str_store_troop_name, s10, ":giver_troop"),
(call_script, "script_troop_get_family_relation_to_troop", ":giver_troop",  "$g_talk_troop"),

],
##diplomacy next line: replaced {reg?she:he} with {reg4?she:he}, set by family relation script
"I received the gift, presented to me through my {s11} {s10}. As dear as {reg4?she:he} is to me, however, I cannot forget our differences.", "close_window",
##diplomacy end+
[
(assign, "$g_leave_encounter", 1),
(call_script, "script_end_quest", "qst_offer_gift"),
]],



[anyone|plyr,"lord_talk",[
(check_quest_active, "qst_denounce_lord"),
(quest_slot_eq, "qst_denounce_lord", slot_quest_giver_troop, "$g_talk_troop"),
(this_or_next|check_quest_succeeded, "qst_denounce_lord"),
(check_quest_failed, "qst_denounce_lord"),
##diplomacy start+ Fixed native mistake (giver/target)
#(quest_get_slot, ":target_troop", "qst_denounce_lord", slot_quest_giver_troop),
(quest_get_slot, ":target_troop", "qst_denounce_lord", slot_quest_target_troop),
##diplomacy end+
(str_store_troop_name, s4, ":target_troop"),
],
"I did as you suggested, and denounced {s4}", "denounce_lord_results"  ,
[
]],


[anyone,"denounce_lord_results",[
(check_quest_succeeded, "qst_denounce_lord"),
(faction_get_slot, ":faction_leader", "$g_talk_troop_faction", slot_faction_leader),
(str_store_troop_name, s4, ":faction_leader"),
##diplomacy start+ Get gender of quest target
(quest_get_slot, ":target_troop", "qst_denounce_lord", slot_quest_target_troop),
(call_script, "script_dplmc_store_troop_is_female", ":target_troop"),
##diplomacy end+

],
##diplomacy start+ replace "him" with "{reg0?her:him}"
"Yes, and hopefully now {s4} will think twice before entrusting {reg0?her:him} with any additional fiefs, honors, or offices. We are grateful to you.", "lord_pretalk",
##diplomacy end+
[
(call_script, "script_succeed_quest", "qst_denounce_lord"),
(call_script, "script_end_quest", "qst_denounce_lord"),
(call_script, "script_troop_change_relation_with_troop", "$g_talk_troop", "trp_player", 8),
(add_xp_as_reward, 1000),
]],


[anyone,
"denounce_lord_results",[
#	(check_quest_failed, "qst_denounce_lord"),
##diplomacy start+ Get gender of quest target
(quest_get_slot, ":target_troop", "qst_denounce_lord", slot_quest_target_troop),
(call_script, "script_dplmc_store_troop_is_female", ":target_troop"),
##diplomacy end+
],
##diplomacy start+ next line, replace "he" with "{reg0?she:he}"
"So you did -- and we have heard that {reg0?she:he} forced you to retract your words, and thus emerged from this affair looking stronger than before. You will forgive me, {sir/my lady}, if my gratitude to you is somewhat muted.", "close_window",
##diplomacy end+
[
(call_script, "script_end_quest", "qst_denounce_lord"),

]],



[anyone|plyr,"lord_talk",[
(check_quest_active, "qst_intrigue_against_lord"),
(quest_slot_eq, "qst_intrigue_against_lord", slot_quest_giver_troop, "$g_talk_troop"),

(this_or_next|check_quest_succeeded, "qst_intrigue_against_lord"),
(check_quest_failed, "qst_intrigue_against_lord"),

(quest_get_slot, ":target_troop", "qst_intrigue_against_lord", slot_quest_target_troop),
(str_store_troop_name, s4, ":target_troop"),
(faction_get_slot, ":liege", "$players_kingdom", slot_faction_leader),
(str_store_troop_name, s5, ":liege"),


],
"I did as you asked, and spoke to {s5} about the danger posed by {s4}.", "lord_quest_intrigue_result"  ,
[
]],

[anyone,"lord_quest_intrigue_result",[
(check_quest_succeeded, "qst_intrigue_against_lord"),
##diplomacy start+ Get gender of quest target
(quest_get_slot, ":target_troop", "qst_denounce_lord", slot_quest_target_troop),
(call_script, "script_dplmc_store_troop_is_female", ":target_troop"),
##diplomacy end+
],
##next line, replace "him" with "{reg0?her:him}"
"So we hear. Hopefully now {s5} will think twice before entrusting {reg0?her:him} with any additional fiefs, honors, or offices. We are grateful to you.", "lord_pretalk"  ,
##diplomacy end+
[
(call_script, "script_end_quest", "qst_intrigue_against_lord"),
(quest_set_slot, "qst_intrigue_against_lord", slot_quest_dont_give_again_remaining_days, 30),
(call_script, "script_troop_change_relation_with_troop", "$g_talk_troop", "trp_player", 8),
(add_xp_as_reward, 500),
]],

[anyone,"lord_quest_intrigue_result",[
(check_quest_failed, "qst_intrigue_against_lord"),
],
"So we hear -- but alas, {s5} seems not to have listened. Still, we are grateful to you for trying.", "close_window"  ,
[
(call_script, "script_end_quest", "qst_intrigue_against_lord"),
(quest_set_slot, "qst_intrigue_against_lord", slot_quest_dont_give_again_remaining_days, 30),
#	(call_script, "script_troop_change_relation_with_troop", "$g_talk_troop", "trp_player", 2),
]],



[anyone|plyr,"lord_talk",[#(troop_slot_eq, "$g_talk_troop", slot_troop_is_prisoner, 0),
                      (neg|troop_slot_ge, "$g_talk_troop", slot_troop_prisoner_of_party, 0),
                      (check_quest_active,"qst_lend_companion"),
                      (quest_slot_eq, "qst_lend_companion", slot_quest_giver_troop, "$g_talk_troop"),
                      (store_current_day, ":cur_day"),
                      (quest_get_slot, ":quest_target_amount", "qst_lend_companion", slot_quest_target_amount),
                      (ge, ":cur_day", ":quest_target_amount"),
                      (quest_get_slot, ":quest_target_troop", "qst_lend_companion", slot_quest_target_troop),
                      (str_store_troop_name,s14,":quest_target_troop"),
                      ##diplomacy start+ Replace troop_get_type
                      (call_script, "script_dplmc_store_troop_is_female_reg", ":quest_target_troop", 3), # <- dplmc+ replaced (troop_get_type, reg3, ":quest_target_troop")
                      ##diplomacy end+
                      ],
"I should like {s14} returned to me, {s65}, if you no longer require {reg3?her:his} services.", "lord_lend_companion_end",
[]],

[anyone,"lord_lend_companion_end",[(neg|hero_can_join, "p_main_party")],
"You've too many men in your company already, {playername}. You could not lead any more at the moment.", "lord_pretalk",
[]],

[anyone,"lord_lend_companion_end",[],
"Certainly, {playername}. {reg3?She:He} is a bright {reg3?girl:fellow}, you're a lucky {man/woman} to have such worthy companions.", "lord_pretalk",
[(quest_get_slot, ":quest_target_troop", "qst_lend_companion", slot_quest_target_troop),
(party_add_members, "p_main_party", ":quest_target_troop", 1),
(call_script, "script_change_player_relation_with_troop", "$g_talk_troop", 3),
(add_xp_as_reward, 100),
(call_script, "script_end_quest", "qst_lend_companion"),
(str_store_troop_name,s14,":quest_target_troop"),
##diplomacy start+
(call_script, "script_dplmc_store_troop_is_female_reg", ":quest_target_troop", 3), # <- dplmc+ replaced (troop_get_type, reg3, ":quest_target_troop")
##diplomacy end+
#SB : add renown to companion for tasks rendered, about 1 per day
(call_script, "script_change_troop_renown", ":quest_target_troop", dplmc_companion_skill_renown * 2 + 1),
]],

[anyone|plyr,"lord_talk",[(check_quest_active,"qst_collect_debt"),
                      (quest_slot_eq,  "qst_collect_debt", slot_quest_current_state, 0),
                      (quest_get_slot, ":quest_target_troop", "qst_collect_debt", slot_quest_target_troop),
                      (eq,"$g_talk_troop",":quest_target_troop"),
                      (quest_get_slot, ":quest_giver_troop", "qst_collect_debt", slot_quest_giver_troop),
                      (str_store_troop_name,s1,":quest_giver_troop")],
"I've come to collect the debt you owe to {s1}.", "lord_ask_to_collect_debt",
[(assign, "$g_convince_quest", "qst_collect_debt")]],

##diplomacy start+ Make gender correct
##OLD:
#[anyone,"lord_ask_to_collect_debt", [],  "Oh. Well, {s1} did lend me some silver a ways back,\
#but I've done him many favours in the past and I consider that money as my due payment.", "lord_ask_to_collect_debt_2",[]],
#[anyone|plyr,"lord_ask_to_collect_debt_2", [],  "{s1} considers it a debt. He asked me to speak to you on his behalf.", "convince_begin",[]],
##NEW:
[anyone,"lord_ask_to_collect_debt", [
   (quest_get_slot, ":quest_giver_troop", "qst_collect_debt", slot_quest_giver_troop),
   (call_script, "script_dplmc_store_troop_is_female", ":quest_giver_troop"),
],  "Oh. Well, {s1} did lend me some silver a ways back,\
but I've done {reg0?her:him} many favors in the past and I consider that money as my due payment.", "lord_ask_to_collect_debt_2",[]],
[anyone|plyr,"lord_ask_to_collect_debt_2", [
   (quest_get_slot, ":quest_giver_troop", "qst_collect_debt", slot_quest_giver_troop),
   (call_script, "script_dplmc_store_troop_is_female", ":quest_giver_troop"),
],  "{s1} considers it a debt. {reg0?She:He} asked me to speak to you on {reg0?her:his} behalf.", "convince_begin",[]],
##diplomacy end+
[anyone|plyr,"lord_ask_to_collect_debt_2", [],  "Then I will not press the matter any further.", "lord_pretalk",[]],


[anyone,"convince_accept",[(check_quest_active, "qst_collect_debt"),
                       (quest_slot_eq, "qst_collect_debt", slot_quest_target_troop, "$g_talk_troop"),
                       (eq, "$g_convince_quest", "qst_collect_debt"), #SB : add condition
                       (quest_get_slot, ":quest_giver_troop", "qst_collect_debt", slot_quest_giver_troop),
                       (str_store_troop_name,s8,":quest_giver_troop"),
                       ##diplomacy start+ #Store gender of creditor
                       (call_script, "script_dplmc_store_troop_is_female", ":quest_giver_troop"),
                       ##diplomacy end+
                       (quest_get_slot, reg10, "qst_collect_debt", slot_quest_target_amount)],
##diplomacy start+ Next lines, replace "him" with "{reg0?her:him}"
"My debt to {s8} has long been overdue and was a source of great discomfort to me.\
Thank you for accepting to take the money to {reg0?her:him}.\
Please give {reg0?her:him} these {reg10} denars and thank {reg0?her:him} on my behalf.", "close_window",
##diplomacy end+
[(call_script, "script_troop_add_gold", "trp_player", reg10),
(quest_set_slot,  "qst_collect_debt", slot_quest_current_state, 1),
(call_script, "script_succeed_quest", "qst_collect_debt"),
(assign, "$g_leave_encounter", 1),
]],


[anyone|plyr,"lord_talk",[(check_quest_active,"qst_persuade_lords_to_make_peace"),
                      (quest_get_slot, ":quest_target_troop", "qst_persuade_lords_to_make_peace", slot_quest_target_troop),
                      (quest_get_slot, ":quest_object_troop", "qst_persuade_lords_to_make_peace", slot_quest_object_troop),
                      (this_or_next|eq, ":quest_target_troop", "$g_talk_troop"),
                      (eq, ":quest_object_troop", "$g_talk_troop"),
                      (quest_get_slot, ":quest_target_faction", "qst_persuade_lords_to_make_peace", slot_quest_target_faction),
                      (quest_get_slot, ":quest_object_faction", "qst_persuade_lords_to_make_peace", slot_quest_object_faction),
                      (str_store_faction_name, s12, ":quest_target_faction"),
                      (str_store_faction_name, s13, ":quest_object_faction"),
                      ],
"Please, {s64}, it's time to end this war between {s12} and {s13}.", "lord_ask_to_make_peace",
[(assign, "$g_convince_quest", "qst_persuade_lords_to_make_peace")]],

[anyone,"lord_ask_to_make_peace", [], "Eh? I'm not sure I heard you right, {playername}.\
War is not easily forgotten by either side of the conflict, and I have a very long memory.\
Why should I take any interest in brokering peace with those dogs?", "lord_ask_to_make_peace_2",[]],

[anyone|plyr,"lord_ask_to_make_peace_2", [],  "Perhaps I can talk you into it...", "convince_begin",[]],
[anyone|plyr,"lord_ask_to_make_peace_2", [],  "Never mind, peace can wait for now.", "lord_pretalk",[]],

[anyone,"convince_accept",[(check_quest_active, "qst_persuade_lords_to_make_peace"),
                       (this_or_next|quest_slot_eq, "qst_persuade_lords_to_make_peace", slot_quest_target_troop, "$g_talk_troop"),
                       (quest_slot_eq, "qst_persuade_lords_to_make_peace", slot_quest_object_troop, "$g_talk_troop"),
                       (eq, "$g_convince_quest", "qst_persuade_lords_to_make_peace"), #SB : add condition
                       (quest_get_slot, ":quest_object_faction", "qst_persuade_lords_to_make_peace", slot_quest_object_faction),
                       (quest_get_slot, ":quest_target_faction", "qst_persuade_lords_to_make_peace", slot_quest_target_faction),
                       (str_store_faction_name, s12, ":quest_object_faction"),
                       (str_store_faction_name, s13, ":quest_target_faction"),
                       (try_begin), # store name of other faction
                         (eq,":quest_object_faction","$g_talk_troop_faction"),
                         (str_store_faction_name, s14, ":quest_target_faction"),
                         (else_try),
                         (str_store_faction_name, s14, ":quest_object_faction"),
                       (try_end),
                       ],
"You... have convinced me, {playername}. Very well then, you've my blessing to bring a peace offer to {s14}. I cannot guarantee they will accept it, but on the off-chance they do, I will stand by it.", "close_window",
[(store_mul, ":new_value", "$g_talk_troop", -1),
(try_begin),
(quest_slot_eq, "qst_persuade_lords_to_make_peace", slot_quest_target_troop, "$g_talk_troop"),
(quest_set_slot, "qst_persuade_lords_to_make_peace", slot_quest_target_troop, ":new_value"),
(else_try),
(quest_set_slot, "qst_persuade_lords_to_make_peace", slot_quest_object_troop, ":new_value"),
(try_end),
(quest_set_slot, "qst_persuade_lords_to_make_peace", slot_quest_convince_value, 1500),#reseting convince value for the second persuasion
(assign, "$g_leave_encounter", 1),
(neg|quest_slot_ge, "qst_persuade_lords_to_make_peace", slot_quest_target_troop, 0),
(neg|quest_slot_ge, "qst_persuade_lords_to_make_peace", slot_quest_object_troop, 0),
(call_script, "script_succeed_quest", "qst_persuade_lords_to_make_peace"),
]],


##
##
##  [anyone|plyr,"lord_talk",[(troop_slot_eq, "$g_talk_troop", slot_troop_is_prisoner, 0),
##                            (check_quest_active,"qst_bring_reinforcements_to_siege"),
##                             (quest_get_slot, ":quest_target_troop", "qst_bring_reinforcements_to_siege", slot_quest_target_troop),
##                             (eq,"$g_talk_troop",":quest_target_troop"),
##                             (quest_get_slot, ":quest_giver_troop", "qst_bring_reinforcements_to_siege", slot_quest_giver_troop),
##                             (quest_get_slot, ":quest_target_amount", "qst_bring_reinforcements_to_siege", slot_quest_target_amount),
##                             (quest_get_slot, ":quest_object_troop", "qst_bring_reinforcements_to_siege", slot_quest_object_troop),
##                             (party_count_companions_of_type, ":num_companions", "p_main_party", ":quest_object_troop"),
##                             (ge, ":num_companions", ":quest_target_amount"),
##                             (str_store_troop_name,1,":quest_giver_troop"),
##                             (assign, reg1, ":quest_target_amount"),
##                             (str_store_troop_name,2,":quest_object_troop")],
##   "Sir, {s1} ordered me to bring {reg1} {s2} to reinforce your siege.", "lord_reinforcement_brought",
##   [(quest_get_slot, ":quest_target_amount", "qst_bring_reinforcements_to_siege", slot_quest_target_amount),
##    (quest_get_slot, ":quest_target_party", "qst_bring_reinforcements_to_siege", slot_quest_target_party),
##    (quest_get_slot, ":quest_object_troop", "qst_bring_reinforcements_to_siege", slot_quest_object_troop),
##    (party_remove_members, "p_main_party", ":quest_object_troop", ":quest_target_amount"),
##    (party_add_members, ":quest_target_party", ":quest_object_troop", ":quest_target_amount"),
##    (call_script, "script_finish_quest", "qst_bring_reinforcements_to_siege", 100),
##    ]],
##
##  [anyone|plyr,"lord_talk",[(troop_slot_eq, "$g_talk_troop", slot_troop_is_prisoner, 0),
##                            (check_quest_active,"qst_bring_reinforcements_to_siege"),
##                             (quest_get_slot, ":quest_target_troop", "qst_bring_reinforcements_to_siege", slot_quest_target_troop),
##                             (eq,"$g_talk_troop",":quest_target_troop"),
##                             (quest_get_slot, ":quest_giver_troop", "qst_bring_reinforcements_to_siege", slot_quest_giver_troop),
##                             (quest_get_slot, ":quest_target_amount", "qst_bring_reinforcements_to_siege", slot_quest_target_amount),
##                             (quest_get_slot, ":quest_object_troop", "qst_bring_reinforcements_to_siege", slot_quest_object_troop),
##                             (party_count_companions_of_type, ":num_companions", "p_main_party", ":quest_object_troop"),
##                             (lt, ":num_companions", ":quest_target_amount"),
##                             (gt, ":num_companions", 0),
##                             (str_store_troop_name,1,":quest_giver_troop"),
##                             (assign, reg1, ":quest_target_amount"),
##                             (str_store_troop_name,2,":quest_object_troop")],
##   "Sir, {s1} ordered me to bring {reg1} {s2} as a reinforcement to your siege, but unfortunately I lost some of them during my expedition.", "lord_reinforcement_brought_some",
##   [(quest_get_slot, ":quest_target_amount", "qst_bring_reinforcements_to_siege", slot_quest_target_amount),
##    (quest_get_slot, ":quest_target_party", "qst_bring_reinforcements_to_siege", slot_quest_target_party),
##    (quest_get_slot, ":quest_object_troop", "qst_bring_reinforcements_to_siege", slot_quest_object_troop),
##    (party_count_companions_of_type, ":num_companions", "p_main_party", ":quest_object_troop"),
##    (party_remove_members, "p_main_party", ":quest_object_troop", ":num_companions"),
##    (party_add_members, ":quest_target_party", ":quest_object_troop", ":num_companions"),
##    (assign, ":percentage_completed", 100),
##    (val_mul, ":percentage_completed", ":num_companions"),
##    (val_div, ":percentage_completed", ":quest_target_amount"),
##    (call_script, "script_finish_quest", "qst_bring_reinforcements_to_siege", ":percentage_completed"),
##     ]],
##
##  [anyone,"lord_reinforcement_brought", [], "Well done {playername}. These men will no doubt be very useful. I will speak to {s1} of your help.", "lord_pretalk",[]],
##  [anyone,"lord_reinforcement_brought_some", [], "That's not quite good enough {playername}. But I suppose it is better than no reinforcements at all. Whatever, I'll tell {s1} you tried your best.", "lord_pretalk",[]],
##

[anyone|plyr,"lord_talk",
[
(neg|troop_slot_ge, "$g_talk_troop", slot_troop_prisoner_of_party, 0),
(check_quest_active,"qst_duel_for_lady"),
(neg|check_quest_concluded,"qst_duel_for_lady"),
(quest_slot_eq, "qst_duel_for_lady", slot_quest_target_troop, "$g_talk_troop"),
(quest_get_slot, ":quest_giver_troop", "qst_duel_for_lady", slot_quest_giver_troop),
(str_store_troop_name, s1, ":quest_giver_troop")
],
"I want you to take back your accusations against {s1}.", "lord_challenge_duel_for_lady", []],

[anyone,"lord_challenge_duel_for_lady", [], "What accusations?\
Everyone knows that she beds her stable boys and anyone else she can lay hands on while her husband is away.\
I merely repeat the words of many.", "lord_challenge_duel_for_lady_2",[]],
##diplomacy start+
##OLD:
#[anyone|plyr,"lord_challenge_duel_for_lady_2", [], "You will recant these lies, sirrah, or prove them against my sword!", "lord_challenge_duel",[]],
##NEW:
[anyone|plyr,"lord_challenge_duel_for_lady_2", [
#Add gender alternative, and cultural alternative to "sword"
(call_script, "script_dplmc_print_cultural_word_to_sreg", "$g_talk_troop", DPLMC_CULTURAL_TERM_WEAPON, s0),
], "You will recant these lies, {sirrah/miss}, or prove them against my {s0}!", "lord_challenge_duel",[]],
##diplomacy end+
[anyone|plyr,"lord_challenge_duel_for_lady_2", [], "If you say so...", "lord_pretalk",[]],

[anyone,"lord_challenge_duel",
[
(str_store_string, s15, "str_error__wrong_quest_type"),
(try_begin),
(check_quest_active,"qst_duel_for_lady"),
(neg|check_quest_concluded,"qst_duel_for_lady"),
(quest_slot_eq, "qst_duel_for_lady", slot_quest_target_troop, "$g_talk_troop"),
(str_store_string, s15, "@You are challenging me to a duel? How droll!\
As you wish, {playername}, it will be good sport to bash your head in."),
(else_try),
(check_quest_active,"qst_duel_courtship_rival"),
(neg|check_quest_concluded,"qst_duel_courtship_rival"),
(quest_slot_eq, "qst_duel_courtship_rival", slot_quest_target_troop, "$g_talk_troop"),
(str_store_string, s15, "str_call_me_coward_very_well_you_leave_me_no_choice"),
(try_end),
], "{s15}", "close_window",
[
(call_script, "script_change_player_relation_with_troop", "$g_talk_troop", -15),
(call_script, "script_set_up_duel_with_troop", "$g_talk_troop", 1), #SB : last parameter
]],

[anyone|plyr,"lord_talk",[#(troop_slot_eq, "$g_talk_troop", slot_troop_is_prisoner, 0),
                      (neg|troop_slot_ge, "$g_talk_troop", slot_troop_prisoner_of_party, 0),
                      (check_quest_active,"qst_duel_courtship_rival"),
                      (neg|check_quest_concluded,"qst_duel_courtship_rival"),
                      (quest_slot_eq, "qst_duel_courtship_rival", slot_quest_target_troop, "$g_talk_troop"),
                      (quest_get_slot, ":quest_giver_troop", "qst_duel_courtship_rival", slot_quest_giver_troop),
                      (str_store_troop_name, s5, ":quest_giver_troop")],
"Relinquish your suit of {s5}!", "lord_challenge_courtship_rival", []],

[anyone,"lord_challenge_courtship_rival",[], "Or what? Do you intend to duel over a lady? I'll let you know -- our liege frowns on this sort of hot-headed challenge, when every man must stand together against the foreign foe.", "lord_challenge_courtship_rival_2",[]],

[anyone|plyr,"lord_challenge_courtship_rival_2", [], "Do you fear to fight me?", "lord_challenge_duel",[]],
[anyone|plyr,"lord_challenge_courtship_rival_2", [], "My pardon. I have spoken rashly...", "lord_pretalk",[
(call_script, "script_end_quest", "qst_duel_courtship_rival"),
]],




[anyone|plyr,"lord_talk",[(check_quest_active,"qst_deliver_message"),
                       (quest_get_slot, ":quest_target_troop", "qst_deliver_message", slot_quest_target_troop),
                       (eq,"$g_talk_troop",":quest_target_troop"),
                       (quest_get_slot, ":quest_giver_troop", "qst_deliver_message", slot_quest_giver_troop),
                       (str_store_troop_name,s9,":quest_giver_troop")],
"I bring a message from {s9}.", "lord_message_delivered",
[]],

[anyone,"lord_message_delivered", [
##diplomacy start+
#Replace "him" with "{reg4?her:him}"
(quest_get_slot, ":quest_giver_troop", "qst_deliver_message", slot_quest_giver_troop),
(call_script, "script_dplmc_store_troop_is_female", ":quest_giver_troop"),
(assign, reg4, reg0),
], "Oh? Let me see that...\
Well, well, well! It was good of you to bring me this, {playername}. Take my seal as proof that I've received it,\
 and give my regards to {s9} when you see {reg4?her:him} again.", "lord_pretalk",[
##diplomacy end+
(call_script, "script_end_quest", "qst_deliver_message"),
(quest_get_slot, ":quest_giver", "qst_deliver_message", slot_quest_giver_troop),
(str_store_troop_name,s9,":quest_giver"),
(call_script, "script_change_player_relation_with_troop", ":quest_giver", 1),
(call_script, "script_change_player_relation_with_troop", "$g_talk_troop", 1),
]],

[anyone|plyr,"lord_talk",[(check_quest_active,"qst_deliver_message_to_enemy_lord"),
                      (quest_get_slot, ":quest_target_troop", "qst_deliver_message_to_enemy_lord", slot_quest_target_troop),
                      (eq,"$g_talk_troop",":quest_target_troop"),
                      (quest_get_slot, ":quest_giver_troop", "qst_deliver_message_to_enemy_lord", slot_quest_giver_troop),
                      (str_store_troop_name,s9,":quest_giver_troop")],
"I bring a message from {s9}.", "lord_message_delivered_enemy",
[]],


[anyone,"lord_message_delivered_enemy", [], "Oh? Let me see that...\
Hmmm. It was good of you to bring me this, {playername}. Take my seal as proof that I've received it,\
with my thanks.", "close_window",[
(call_script, "script_end_quest", "qst_deliver_message_to_enemy_lord"),
(quest_get_slot, ":quest_giver", "qst_deliver_message_to_enemy_lord", slot_quest_giver_troop),
(call_script, "script_change_player_relation_with_troop", ":quest_giver", 1),
(call_script, "script_change_player_relation_with_troop", "$g_talk_troop", 1),
(assign, "$g_leave_encounter", 1),
]],



[anyone|plyr,"lord_talk", [(check_quest_active,"qst_deliver_message_to_prisoner_lord"),
                       (quest_slot_eq, "qst_deliver_message_to_prisoner_lord", slot_quest_target_troop, "$g_talk_troop"),
                       (quest_get_slot, ":quest_giver_troop", "qst_deliver_message_to_prisoner_lord", slot_quest_giver_troop),
                       (str_store_troop_name, s11, ":quest_giver_troop")],
"I bring a message from {s11}.", "lord_deliver_message_prisoner",
[
#TODO: Add reward
(call_script, "script_end_quest", "qst_deliver_message_to_prisoner_lord"),
]],

[anyone,"lord_deliver_message_prisoner", [], "Can it be true?\
Oh, thank you kindly, {playername}! You have brought hope and some small ray of light to these bleak walls.\
Perhaps one day I will be able to repay you.", "lord_deliver_message_prisoner_2",[]],
[anyone|plyr,"lord_deliver_message_prisoner_2", [], " 'Twas the least I could do, {s65}.", "lord_deliver_message_prisoner_2a",[]],
[anyone,"lord_deliver_message_prisoner_2a", [], "You've no idea how grateful I am, {playername}. A thousand thanks and more.", "close_window",[]],
[anyone|plyr,"lord_deliver_message_prisoner_2", [], "Worry not, {s65}. You'll have ample opportunity once you are free again.", "lord_deliver_message_prisoner_2b",[]],
[anyone,"lord_deliver_message_prisoner_2b", [], "Hah, of course, {playername}. My eternal thanks go with you.", "close_window",[]],

[anyone|plyr,"lord_talk", [#(troop_slot_eq, "$g_talk_troop", slot_troop_is_prisoner, 1),
                       (troop_slot_ge, "$g_talk_troop", slot_troop_prisoner_of_party, 0),
                       (check_quest_active,"qst_rescue_lord_by_replace"),
                       (quest_slot_eq, "qst_rescue_lord_by_replace", slot_quest_target_troop, "$g_talk_troop"),
                       (neg|check_quest_succeeded, "qst_rescue_lord_by_replace")],
"Fear not, I am here to rescue you.", "lord_rescue_by_replace_offer",[]],

[anyone,"lord_rescue_by_replace_offer", [],
"By God, are you serious? What is your plan?", "lord_rescue_by_replace_offer_2",[]],
[anyone|plyr,"lord_rescue_by_replace_offer_2", [],
"A simple ruse, {s65}. If we exchange garments, I shall take your place here in prison,\
while you make your escape disguised as myself.\
I paid the guards a handsome bribe, with which I am sure they have already purchased half the wine stocks of the nearest tavern.\
With some luck they'll soon get so drunk they'd have trouble\
recognising their own mothers, let alone telling one of us from the other.\
At least not until you are safely away.", "lord_rescue_by_replace_offer_3",[]],
[anyone,"lord_rescue_by_replace_offer_3", [],
"Hmm, it might just work... But what of you, my {friend/lady}? The guards won't take kindly to this trickery.\
You may end up spending some time in this cell yourself.", "lord_rescue_by_replace_offer_4",[]],
[anyone|plyr,"lord_rescue_by_replace_offer_4", [],
"Not to worry, {s65}. The place is already starting to grow on me.", "lord_rescue_by_replace_offer_5a",[]],
[anyone|plyr,"lord_rescue_by_replace_offer_4", [],
"I shall be fine as long there is an ample reward waiting at the end.", "lord_rescue_by_replace_offer_5b",[]],
[anyone,"lord_rescue_by_replace_offer_5a",[],
"You are a brave soul indeed. I won't forget this.", "lord_rescue_by_replace_offer_6",[]],
[anyone,"lord_rescue_by_replace_offer_5b",[],
"Of course, my {friend/lady}, of course! Come to me when you have regained your freedom,\
and perhaps I shall be able to repay the debt I owe you.", "lord_rescue_by_replace_offer_6",[]],
[anyone|plyr,"lord_rescue_by_replace_offer_6",[],
"Quickly, {s65}, let us change garments. It is past time you were away from here.", "close_window",
[(call_script, "script_succeed_quest", "qst_rescue_lord_by_replace"),
(quest_get_slot, ":quest_target_troop", "qst_rescue_lord_by_replace", slot_quest_target_troop),
(quest_get_slot, ":quest_target_center", "qst_rescue_lord_by_replace", slot_quest_target_center),
(party_remove_prisoners, ":quest_target_center", ":quest_target_troop", 1),
#(troop_set_slot, ":quest_target_troop", slot_troop_is_prisoner, 0),
(troop_set_slot, ":quest_target_troop", slot_troop_prisoner_of_party, -1),
(assign, "$auto_menu", -1),
(assign, "$capturer_party", "$g_encountered_party"),
(jump_to_menu, "mnu_captivity_rescue_lord_taken_prisoner"),
(finish_mission),
]],

##
##  [anyone|plyr,"lord_talk", [(check_quest_active, "qst_deliver_message_to_lover"),
##                             (troop_get_slot, ":cur_daughter", "$g_talk_troop", slot_troop_daughter),
##                             (quest_slot_eq, "qst_deliver_message_to_lover", slot_quest_target_troop, ":cur_daughter"),
##                             (quest_get_slot, ":troop_no", "qst_deliver_message_to_lover", slot_quest_giver_troop),
##                             (str_store_troop_name, 3, ":troop_no"),
##                             (str_store_troop_name, 4, ":cur_daughter")],
##   "My lord, {s3} asked me to give this letter to your daughter, but I think you should read it first.", "lord_deliver_message_to_lover_tell_father",[]],
##
##  [anyone,"lord_deliver_message_to_lover_tell_father", [],
##   "That swine called {s3} is trying to approach my daughter eh? You have made the right decision by bringing this letter to me. I'll have a long talk with {s4} about it.", "lord_pretalk",
##   [(add_xp_as_reward, 200),
##    (call_script, "script_troop_add_gold", "trp_player", 1000),
##    (quest_get_slot, ":quest_giver", "qst_deliver_message_to_lover", slot_quest_giver_troop),
##    (quest_get_slot, ":target_troop", "qst_deliver_message_to_lover", slot_quest_target_troop),
##    (call_script, "script_change_player_relation_with_troop", ":quest_giver", -20),
##    (call_script, "script_change_player_relation_with_troop", "$g_talk_troop", 10),
##    (call_script, "script_change_player_relation_with_troop", ":target_troop", -10),
##    (call_script, "script_end_quest", "qst_deliver_message_to_lover"),
##    #Adding betrayal to the quest giver
##    (troop_set_slot, ":quest_giver", slot_troop_last_quest, "qst_deliver_message_to_lover"),
##    (troop_set_slot, ":quest_giver", slot_troop_last_quest_betrayed, 1)]],
##
##
##### TODO: QUESTS COMMENT OUT END



##  [anyone|plyr,"lord_talk", [(troop_slot_eq, "$g_talk_troop", slot_troop_is_prisoner, 0),
##                             (ge,"$g_talk_troop_faction_relation",0),
##                             (party_slot_eq, "$g_encountered_party", slot_party_type, spt_castle),
##                             (party_slot_eq, "$g_encountered_party", slot_town_lord, "$g_talk_troop"),
##                             (eq, "$g_permitted_to_center",0),
##                             (party_get_num_companions, reg7, "p_main_party"),
##                             (val_sub, reg7, 1),
##                             ],
##   "{reg7?Me and my men:I} need shelter for the night my lord. Can we rest in your castle for a while?", "lord_castle_let_in",[]],
##
##  [anyone, "lord_castle_let_in", [(lt,"$g_talk_troop_relation",-10)],
##   "What? Do I look like I am running an inn here? I have no place here for {reg7?you and your lot:you}. Now get off my lands...", "close_window",[(assign, "$g_permitted_to_center",1)]],
##  [anyone, "lord_castle_let_in", [(lt,"$g_talk_troop_relation",2), (lt, "$g_talk_troop_faction_relation", 10),(assign, reg6, 100)],
##   "I'll give you shelter if you pay a toll of {reg6} denars.", "lord_castle_let_in_toll",[]],
##  [anyone|plyr,"lord_castle_let_in_toll", [(store_troop_gold, ":gold", "trp_player"),(gt,":gold",reg6)], "Of course sir. I'll pay the toll.", "lord_castle_let_in_toll_pay",
##   [(troop_remove_gold, "trp_player",reg6)]],
##  [anyone, "lord_castle_let_in_toll_pay", [(str_store_party_name, s1, "$g_encountered_party")],
##   "Then you are welcome to {s1}.", "close_window",[(assign, "$g_permitted_to_center",1),(jump_to_menu, "mnu_town")]],
##  [anyone|plyr,"lord_castle_let_in_toll", [], "I can't pay that sum sir.", "lord_castle_let_in_toll_nopay",[]],
##  [anyone,"lord_castle_let_in_toll_nopay", [], "Then you are out of luck, I guess.", "lord_pretalk",[]],
##
##  [anyone, "lord_castle_let_in", [(str_store_party_name, s1, "$g_encountered_party")],
##   "Of course {playername}. You are welcome here. You may rest at {s1} as long as you wish.", "close_window",[(assign, "$g_permitted_to_center",1)]],

[anyone|plyr,"lord_talk", [#(troop_slot_eq, "$g_talk_troop", slot_troop_is_prisoner, 0),
                (neg|troop_slot_ge, "$g_talk_troop", slot_troop_prisoner_of_party, 0),
                       (eq, "$players_oath_renounced_against_kingdom", "$g_talk_troop_faction"),
                       (str_store_faction_name, s4, "$g_talk_troop_faction"),],
"{s66}, I wish to restore my old oath to {s4}.", "lord_ask_pardon_after_oath_renounced",[]],

[anyone,"lord_ask_pardon_after_oath_renounced",
[
(faction_get_slot, ":faction_leader", "$g_talk_troop_faction", slot_faction_leader),
(neq, ":faction_leader", "$g_talk_troop"),
(str_store_troop_name, s4, ":faction_leader"),
##diplomacy start+
#Replace "his" with "{reg0?hers:his}"
(call_script, "script_dplmc_store_troop_is_female", ":faction_leader"),
], "That is too great a matter for me to decide, {playername}. You should seek out {s4}. Such clemency is {reg0?hers:his} alone to grant or deny.", "lord_pretalk",[]],
##diplomacy end+

[anyone,"lord_ask_pardon_after_oath_renounced",
[
##diplomacy start+ Assign zero (don't use implicit arguments)
#(assign, ":num_centers_captured_by_player"),
(assign, ":num_centers_captured_by_player", 0),
##diplomacy end+
(try_for_range, ":cur_center", walled_centers_begin, walled_centers_end),
 (store_faction_of_party, ":cur_center_faction", ":cur_center"),
 (eq, ":cur_center_faction", "fac_player_supporters_faction"),
 (party_slot_eq, ":cur_center", slot_center_faction_when_oath_renounced, "$g_talk_troop_faction"),
 (val_add, ":num_centers_captured_by_player", 1),
(try_end),
(store_mul, ":peace_score", ":num_centers_captured_by_player", 500),
(store_current_hours, ":cur_hours"),
(val_sub, ":cur_hours", "$players_oath_renounced_begin_time"),
(val_add, ":peace_score", ":cur_hours"),
(try_begin),
 (gt, ":peace_score", 800),
 #Do not agree to give any centers but agree to make peace
 (assign, ":given_center", -1),
 (try_begin),
   (gt, ":peace_score", 1500),
   (try_begin),
     #Agree to give one center
     (eq, "$players_oath_renounced_given_center", 0),
     (store_random_in_range, ":given_center", 0, ":num_centers_captured_by_player"),
   (try_end),
 (else_try),
   (assign, "$players_oath_renounced_given_center", 0),
 (try_end),
 (assign, ":num_centers_written", 0),
 (try_for_range, ":cur_center", walled_centers_begin, walled_centers_end),
   (store_faction_of_party, ":cur_center_faction", ":cur_center"),
   (eq, ":cur_center_faction", "fac_player_supporters_faction"),
   (party_slot_eq, ":cur_center", slot_center_faction_when_oath_renounced, "$g_talk_troop_faction"),
   (try_begin),
     (eq, ":given_center", 0),
     (assign, "$players_oath_renounced_given_center", ":cur_center"),
   (else_try),
     (neq, "$players_oath_renounced_given_center", ":cur_center"),
     (try_begin),
       (eq, ":num_centers_written", 0),
       (str_store_party_name, s17, ":cur_center"),
     (else_try),
       (eq, ":num_centers_written", 1),
       (str_store_party_name, s16, ":cur_center"),
       (str_store_string, s17, "@{s16} and {s17}"),
     (else_try),
       (str_store_party_name, s16, ":cur_center"),
       (str_store_string, s17, "@{!}{s16}, {s17}"),
     (try_end),
     (val_add, ":num_centers_written", 1),
   (try_end),
   (val_sub, ":given_center", 1),
 (try_end),
 (try_begin),
   (eq, ":num_centers_written", 0),#white peace
   (str_store_string, s11, "@Very well, I will accept you back into my ranks, if you're ready to swear your solemn oath once more."),
   (assign, "$players_oath_renounced_terms_state", 1),
 (else_try),
   (str_store_string, s11, "@A pardon will only be possible if you are willing to cede {s17} to me. Do you agree my terms?"),
   (assign, "$players_oath_renounced_terms_state", 2),
 (try_end),
(else_try),
 #Do not agree to make peace
 (str_store_string, s11, "@No. There is no chance of peace between us, I am not interested."),
 (assign, "$players_oath_renounced_terms_state", 0),
(try_end),
], "{s11}.", "lord_ask_pardon_terms",[]],


[anyone|plyr,"lord_ask_pardon_terms",
[(eq, "$players_oath_renounced_terms_state", 0),
],
"As you like, {s65}. I will accept your judgment.", "lord_pretalk",[]],
[anyone|plyr,"lord_ask_pardon_terms",
[(eq, "$players_oath_renounced_terms_state", 0),
],
"A shame, {s65}. A shame.", "lord_pretalk",[]],
[anyone|plyr,"lord_ask_pardon_terms",
[(eq, "$players_oath_renounced_terms_state", 0),
],
"Very well, go and die without me.", "lord_pretalk",[]],

[anyone|plyr,"lord_ask_pardon_terms",
[(eq, "$players_oath_renounced_terms_state", 1),
],
"Aye, I am ready.", "lord_ask_pardon_after_renounce_peace",[]],

[anyone|plyr,"lord_ask_pardon_terms",
[(eq, "$players_oath_renounced_terms_state", 1),
],
"On second thought, no. I don't wish to be in your service again.", "lord_ask_pardon_terms_rejected",[]],

[anyone|plyr,"lord_ask_pardon_terms",
[(eq, "$players_oath_renounced_terms_state", 2),
],
"Aye, I agree to those terms.", "lord_ask_pardon_after_renounce_peace",[]],

[anyone|plyr,"lord_ask_pardon_terms",
[(eq, "$players_oath_renounced_terms_state", 2),
],
"That is too high a price, {s65}. I must decline.", "lord_ask_pardon_terms_rejected",[]],


[anyone,"lord_ask_pardon_after_renounce_peace",
[], "Excellent. Though you strayed from us, {playername}, it gladdens all our hearts that you have found your way back to the right path. I hereby restore your homage to me. Rise once more as an honoured {man/warrior} in my service.", "lord_pretalk",
[
(try_for_range, ":cur_center", walled_centers_begin, walled_centers_end),
 (store_faction_of_party, ":cur_center_faction", ":cur_center"),
 (eq, ":cur_center_faction", "fac_player_supporters_faction"),
 (party_slot_eq, ":cur_center", slot_center_faction_when_oath_renounced, "$g_talk_troop_faction"),
 (neq, ":cur_center", "$players_oath_renounced_given_center"),
 ##diplomacy start+ Apply relation reduction with former town lord
 (party_get_slot, ":town_lord", ":cur_center", slot_town_lord),
 (try_begin),
	#Rationale: since you gain 10 relation for granting a fief, you lose 10 relation for ceding it.
	#This is just a rough temporary measure.  It doesn't take into account villages.
	#Also, some vassals may wish to jump ship to another faction instead of going along with
	#the player.
	(ge, ":town_lord", 1),
	(call_script, "script_change_player_relation_with_troop", ":town_lord", -10),
 (try_end),
 ##diplomacy end+
 (call_script, "script_give_center_to_faction", ":cur_center", "$g_talk_troop_faction"),
(try_end),

(call_script, "script_player_join_faction", "$g_talk_troop_faction"),
(assign, "$player_has_homage", 1),
(call_script, "script_change_player_relation_with_troop", "$g_talk_troop", 3),
]],


[anyone,"lord_ask_pardon_terms_rejected",
[], "Then get out of my sight, traitor! Begone with you, and do not come back!", "close_window",
[
(assign, "$g_leave_encounter", 1),
#TODO: Add relation drop. $players_oath_renounced_begin_time can also be reset to current time for worse conditions in the next conversation.
(call_script, "script_change_player_relation_with_troop", "$g_talk_troop", -5),
]],

#SB : qst_rescue_prisoner request, directly through town lord
[anyone|plyr, "lord_talk", [(le, "$talk_context", tc_castle_gate),
  (check_quest_active, "qst_rescue_prisoner"),
  (neg|check_quest_succeeded, "qst_rescue_prisoner"),
  (neg|check_quest_failed, "qst_rescue_prisoner"),
  (quest_get_slot, ":center", "qst_rescue_prisoner", slot_quest_target_center),
  # (store_faction_of_party, ":faction_no", ":center"),
  # (this_or_next|faction_slot_eq, ":faction_no", slot_faction_leader, "$g_talk_troop"),
  (party_slot_eq, ":center", slot_town_lord, "$g_talk_troop"),
  (quest_get_slot, ":prisoner", "qst_rescue_prisoner", slot_quest_target_troop),
  (str_store_troop_name, s11, ":prisoner"),
  (str_store_party_name, s12, ":center"),
],
"I wish to offer ransom for {s11} held captive in {s12}","lord_ask_about_ransom",
[ 
  (assign, "$g_convince_quest", "qst_rescue_prisoner"),
]],


[anyone,"lord_ask_about_ransom", [], "So {s10} went crying about my hospitality to {reg3?her:his} {s11}? I'm surprised {s12} even bothers.\
 Why should I take any further interest in the well-being of that fool after {reg3?she:he} sent me that pathetic offer?", "lord_ask_to_ransom_prisoner",[
  (quest_get_slot, ":prisoner", "qst_rescue_prisoner", slot_quest_target_troop),
  (str_store_troop_name, s10, ":prisoner"),
  (quest_get_slot, ":giver_troop", "qst_rescue_prisoner", slot_quest_giver_troop),
  (str_store_troop_name, s12, ":giver_troop"),
  (call_script, "script_troop_get_family_relation_to_troop", ":giver_troop", ":prisoner"),
  (call_script, "script_dplmc_store_troop_is_female_reg", ":prisoner", 3),
  
]],

[anyone|plyr,"lord_ask_to_ransom_prisoner", [],  "Perhaps I can talk you into it...", "convince_begin",[]],
[anyone|plyr,"lord_ask_to_ransom_prisoner", [],  "Never mind, I'm sure the accomodations aren't too bad.", "lord_pretalk",[]],

#SB : make sure this doesn't trigger from other convince quests
[anyone,"convince_accept",[ (check_quest_active, "qst_rescue_prisoner"),
                            (quest_get_slot, ":center", "qst_rescue_prisoner", slot_quest_target_center),
                            (eq, "$g_convince_quest", "qst_rescue_prisoner"),
                            # (store_faction_of_party, ":faction_no", ":center"),
                            # (this_or_next|faction_slot_eq, ":faction_no", slot_faction_leader, "$g_talk_troop"),
                            (party_slot_eq, ":center", slot_town_lord, "$g_talk_troop"),
                        ],
"Very well, {playername}, I am not without mercy and will be willing to reconsider {s10}'s ransom. Did you bring the {s1} I asked {s12} for?", "lord_ask_to_ransom_prisoner_convinced",
[
  (quest_get_slot, ":prisoner", "qst_rescue_prisoner", slot_quest_target_troop),
  (str_store_troop_name, s10, ":prisoner"),
  (quest_get_slot, ":giver_troop", "qst_rescue_prisoner", slot_quest_target_troop),
  (str_store_troop_name, s12, ":giver_troop"),
  (call_script, "script_dplmc_store_troop_is_female_reg", ":prisoner", 4),
  # (call_script, "script_calculate_ransom_amount_for_troop", ":prisoner"),
  (quest_get_slot, ":target_amount", "qst_rescue_prisoner", slot_quest_target_amount),
  (call_script, "script_game_get_money_text", ":target_amount"),
  (assign, "$temp", ":target_amount"), #cache
  
  
]],

#player has gold and pays in full
[anyone|plyr,"lord_ask_to_ransom_prisoner_convinced", [(store_troop_gold, ":cur_gold", "trp_player"), (ge, ":cur_gold", "$temp")], 
    "Of course, here you are.", "lord_ask_to_ransom_prisoner_released",[

]],

#player wants to cheap out after convincing lord
[anyone|plyr,"lord_ask_to_ransom_prisoner_convinced", [
    (quest_get_slot, ":cur_amount", "qst_rescue_prisoner", slot_quest_target_state),
    (is_between, ":cur_amount", 1, "$temp"),
    (store_troop_gold, ":cur_gold", "trp_player"),
    (ge, ":cur_gold", ":cur_amount"),
],  "{s12} and I have only raised {reg1} denars...", "lord_ask_to_ransom_prisoner_portion",[
    (quest_get_slot, reg1, "qst_rescue_prisoner", slot_quest_target_state),
]],

#player isn't really interested in paying
[anyone|plyr,"lord_ask_to_ransom_prisoner_convinced", [],  "I cannot afford to do so.", "lord_ask_to_ransom_prisoner_not_paid",[]],
[anyone,"lord_ask_to_ransom_prisoner_not_paid", [(gt, "$g_talk_troop_relation", 0)],  "Don't fret, {playername}, there's plenty of time to come up with more funds.", "close_window",[
    (assign, "$g_leave_encounter", 1),
]],
[anyone,"lord_ask_to_ransom_prisoner_not_paid", [],  "What a waste of breath this was... So be it, {playername}, there will be no easy bargain next time.", "close_window",[
    # #add to costs, if convince_value was already low
    # (quest_get_slot, ":target_amount", "qst_rescue_prisoner", slot_quest_target_amount),
    # (val_add, ":target_amount", dplmc_ransom_commission),
    # (quest_set_slot, "qst_rescue_prisoner", slot_quest_target_amount, ":target_amount"),
    (call_script, "script_change_player_relation_with_troop", "$g_talk_troop", -1),
    (assign, "$g_leave_encounter", 1),
]],

[anyone,"lord_ask_to_ransom_prisoner_portion", [
        # (store_troop_gold, ":cur_gold", "trp_player"),
        (quest_get_slot, ":cur_amount", "qst_rescue_prisoner", slot_quest_target_state),
        (lt, ":cur_amount", "$temp"),
], 
    "Why, I had no idea {s10} had such poor friends! With that paltry amount you'll be able to ransom a few fingers, just enough for a pauper's burial for {s12} to cry over.", "lord_ask_to_ransom_prisoner_portion_payment",
  []
],


[anyone|plyr,"lord_ask_to_ransom_prisoner_portion_payment", [(store_troop_gold, ":cur_gold", "trp_player"), (ge, ":cur_gold", "$temp")], 
    "I will pay the remainder from my own coffers...", "lord_ask_to_ransom_prisoner_released",
  [
  ]
],
[anyone|plyr,"lord_ask_to_ransom_prisoner_portion_payment", [
    (quest_get_slot, ":prisoner", "qst_rescue_prisoner", slot_quest_target_troop),
    (troop_get_slot, ":cur_wealth", ":prisoner", slot_troop_wealth),
    (val_div, ":cur_wealth", 2), #don't take all wealth
    (quest_get_slot, ":cur_amount", "qst_rescue_prisoner", slot_quest_target_state),
    (val_add, ":cur_amount", ":cur_wealth"),
    (ge, ":cur_amount", "$temp")], 
    "Surely {s10} can offer some of {reg4?her:his} own wealth?", "lord_ask_to_ransom_prisoner_portion_lord",
  [
    (quest_get_slot, ":prisoner", "qst_rescue_prisoner", slot_quest_target_troop),
    (call_script, "script_change_player_relation_with_troop", ":prisoner", -1),
  ]
],
[anyone|plyr,"lord_ask_to_ransom_prisoner_portion_payment", [], 
    "Nevermind, I must think this over...", "lord_ask_to_ransom_prisoner_not_paid",
  [
  ]
],

# [anyone,"lord_ask_to_ransom_prisoner_portion_player", [], 
    # "Good, good... ", "lord_ask_to_ransom_prisoner_released",
  # [
  
  # ]
# ],

[anyone,"lord_ask_to_ransom_prisoner_portion_lord", [], 
    "Well, I didn't expect to squeeze much money from {s10} anyway. {reg4?Her:His} arms and horse barely fetched any money at the auction, but it will have to do -- I expect that {s10} will be your problem now.", "lord_ask_to_ransom_prisoner_released",
  [
    #subtract the troop's own wealth
    (quest_get_slot, ":prisoner", "qst_rescue_prisoner", slot_quest_target_troop),
    (troop_get_slot, ":cur_wealth", ":prisoner", slot_troop_wealth),
    (val_div, ":cur_wealth", 2), #don't take all wealth
    (val_sub, "$temp", ":cur_wealth"), #the remainder will be discharged in subsequent dialog
    (call_script, "script_dplmc_distribute_gold_to_lord_and_holdings", ":cur_wealth", "$g_talk_troop"),
    (call_script, "script_dplmc_remove_gold_from_lord_and_holdings", ":cur_wealth", ":prisoner"),
  ]
],

#actual release
[anyone,"lord_ask_to_ransom_prisoner_released", [], 
    "Excellent choice, {playername}. I will have {s10} released soon enough.", "close_window",
  [
    (quest_get_slot, ":prisoner", "qst_rescue_prisoner", slot_quest_target_troop),
    (str_store_troop_name, s10, ":prisoner"),

    (try_begin), #if we're in the prisoner town, talk to released prisoner immediately
      (quest_slot_eq, "qst_rescue_prisoner", slot_quest_target_center, "$current_town"),
      (assign, "$talk_context", tc_hero_freed),
      # (call_script, "script_setup_troop_meeting", ":prisoner", -1),
      (assign, "$castle_meeting_selected_troop", ":prisoner"),
      (jump_to_menu, "mnu_castle_meeting_selected"),
      (troop_set_slot, ":prisoner", slot_troop_mission_participation, -1),
      (party_remove_prisoners, "$current_town", ":prisoner", 1),
    (else_try), #if we do this remotely, do not setup conversation
      (call_script, "script_succeed_quest", "qst_rescue_prisoner"),
      (assign, "$do_not_cancel_quest", 1),
      (call_script, "script_remove_troop_from_prison", ":prisoner"),
      (assign, "$do_not_cancel_quest", 0),
      (call_script, "script_change_player_honor", 1), #this is to compensate for missing freed_lord_answer rewards
      (assign, "$g_leave_encounter", 1),
    (try_end),
    
    # (assign, "$g_leave_encounter", 1),
  ]
],

[anyone|plyr,"lord_talk", [#(troop_slot_eq, "$g_talk_troop", slot_troop_is_prisoner, 0),
                       (neg|troop_slot_ge, "$g_talk_troop", slot_troop_prisoner_of_party, 0),
                       (lt, "$g_talk_troop_faction_relation", 0),
				##diplomacy start+ Handle when the player is co-ruler of an NPC kingdom
				(assign, ":is_coruler", 0),
				(try_begin),
				   (is_between, "$players_kingdom", npc_kingdoms_begin, npc_kingdoms_end),
				   (call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", "$players_kingdom"),
                   (ge, reg0, DPLMC_FACTION_STANDING_LEADER_SPOUSE),
				   (assign, ":is_coruler", 1),
				(try_end),
				##diplomacy end+

                (store_relation, ":players_kingdom_relation", "$g_talk_troop_faction", "$players_kingdom"),

                (this_or_next|ge, ":players_kingdom_relation", 0),
                       (this_or_next|eq, "$players_kingdom", 0),
				  ##diplomacy start+
				  (this_or_next|eq, ":is_coruler", 1),
				  ##diplomacy end+
                  (eq, "$players_kingdom", "fac_player_supporters_faction"),


                       (neq, "$players_oath_renounced_against_kingdom", "$g_talk_troop_faction"),
                       (assign, ":continue", 1),
                       (try_begin),
                         (gt, "$supported_pretender", 0),
                         (eq, "$supported_pretender_old_faction", "$g_talk_troop_faction"),
                         (assign, ":continue", 0),
                       (try_end),
                       (eq, ":continue", 1),
                (is_between, "$g_talk_troop_faction", kingdoms_begin, kingdoms_end),
				##diplomacy start+
				(try_begin),
				   (eq, ":is_coruler", 1),
 			       (assign, "$temp_2", 0x434F52),#is co-ruler
				(else_try),
				   (assign, "$temp_2", 0),
				(try_end),
				##diplomacy end+
                       (str_store_faction_name, s4, "$g_talk_troop_faction"),],
"I wish to make peace with the {s4}.", "lord_ask_pardon",[]],

[anyone,"lord_ask_pardon", [(lt, "$g_talk_troop_relation", -10)], "Do you indeed, {playername}? Then go and trip on your sword. Give us all peace.", "lord_pretalk",[]],

[anyone,"lord_ask_pardon",
[
(faction_slot_eq, "fac_player_supporters_faction", slot_faction_leader, "trp_player"),
(assign, ":has_center", 0),
(try_for_range, ":cur_center", centers_begin, centers_end),
 (store_faction_of_party, ":cur_center_faction", ":cur_center"),
 (eq, ":cur_center_faction", "fac_player_supporters_faction"),
 (assign, ":has_center", 1),
(try_end),
(eq, ":has_center", 1),
(lt, "$player_right_to_rule", 10),

], "{playername}, you are a {lord/lady} without a master, holding lands in your name, with only the barest scrap of a claim to legitimacy. No king in Calradia would accept a lasting peace with you.", "lord_pretalk",[]],

[anyone,"lord_ask_pardon",
[
(assign, ":has_center", 0),
(try_for_range, ":cur_center", centers_begin, centers_end),
 (store_faction_of_party, ":cur_center_faction", ":cur_center"),
 (eq, ":cur_center_faction", "fac_player_supporters_faction"),
 (assign, ":has_center", 1),
(try_end),
##diplomacy start+
(this_or_next|eq, "$temp_2", 0x434F52),#is co-ruler
##diplomacy end+
(eq, ":has_center", 1),
(encountered_party_is_attacker),

], "Make peace when I have you at an advantage? I think not.", "lord_pretalk",[]],

#If the player faction is active
[anyone,"lord_ask_pardon",
[
(faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "$g_talk_troop"),

(assign, ":has_center", 0),
(try_for_range, ":cur_center", centers_begin, centers_end),
 (store_faction_of_party, ":cur_center_faction", ":cur_center"),
 (eq, ":cur_center_faction", "fac_player_supporters_faction"),
 (assign, ":has_center", 1),
(try_end),
##diplomacy start+
(this_or_next|eq, "$temp_2", 0x434F52),#is co-ruler
##diplomacy end+
(eq, ":has_center", 1),

(call_script, "script_npc_decision_checklist_peace_or_war", "$g_encountered_party_faction", "fac_player_supporters_faction", "trp_player"),
##diplomacy start+ allow the player to negotiate, as they can through a minister
(assign, "$temp", reg0),#<-- the check peace war result
(lt, reg0, -2),#<-- negotiation is impossible at -3 or worse

#Changed this line to make it clearer that negotiation isn't going to happen.
#, "I do not see it as being in my current interest to make peace.", "lord_pretalk",[],
], "I do not see it as being in my current interest to make peace, and have no interest in negotiations.", "lord_pretalk",[]],
##diplomacy end+

##diplomacy start+ offer the player terms (similar to through a minister)
[anyone,"lord_ask_pardon",
[
(faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "$g_talk_troop"),
(assign, ":check_peace_war", "$temp"),
(lt, ":check_peace_war", 1),#Normally should only be -2, -1, or 0

(assign, ":has_center", 0),
(try_for_range, ":cur_center", centers_begin, centers_end),
 (store_faction_of_party, ":cur_center_faction", ":cur_center"),
 (eq, ":cur_center_faction", "fac_player_supporters_faction"),
 (assign, ":has_center", 1),
(try_end),
##diplomacy start+
(try_begin),
	(eq, "$temp_2", 0x434F52),#is co-ruler
	(assign, ":is_coruler", 1),
(else_try),
	(assign, ":is_coruler", 0),
(try_end),
(this_or_next|eq, ":is_coruler", 1),
##diplomacy end+
(eq, ":has_center", 1),

(call_script, "script_dplmc_get_truce_pay_amount", "fac_player_supporters_faction", "$g_talk_troop_faction", ":check_peace_war"),
(assign, ":money_alone", reg0),
(assign, ":money_and_fief", reg1),

(assign, "$temp", ":money_alone"),
(assign, "$temp_2", ":money_and_fief"),

#Check if there is a valid demanded fief
(assign, reg0, -1),
(try_begin),
	(is_between, "$g_concession_demanded", centers_begin, centers_end),
	(store_faction_of_party, ":concession_faction", "$g_concession_demanded"),
	##diplomacy start+
	(assign, ":alt_faction", "fac_player_supporters_faction"),
	(try_begin),
		(eq, ":is_coruler", 1),
		(assign, ":alt_faction", "$players_kingdom"),
	(try_end),
	(this_or_next|eq, ":concession_faction", ":alt_faction"),
	##diplomacy end+
	(eq, ":concession_faction", "fac_player_supporters_faction"),
	(assign, reg0, 1),
(try_end),

#Either demanding a positive amount of money, or demanding a fief the player has
(this_or_next|ge, ":money_alone", 1),
(eq, reg0, 1),

#Store demand string to s0
(try_begin),
	#Just denars
	(neq, reg0, 1),
	(assign, reg1, ":money_alone"),
	(str_store_string, s0, "str_reg1_denars"),
(else_try),
	#A fief and denars
	(ge, ":money_and_fief", 1),
	(str_store_party_name, s0, "$g_concession_demanded"),
	(assign, reg1, ":money_and_fief"),
	(str_store_string, s1, "str_reg1_denars"),
	(str_store_string, s0, "str_dplmc_s0_and_s1"),
(else_try),
	#Just a fief
	(str_store_party_name, s0, "$g_concession_demanded"),
(try_end),

], "As things stand I do not see it as being in my current interest to make peace, but if you were to hand over {s0} I would be willing to agree to a truce of twenty days.",
"dplmc_lord_ask_pardon_ruler_1",[]],

[anyone|plyr,"dplmc_lord_ask_pardon_ruler_1",
[
(assign, ":valid_demand", 0),
(assign, ":money_alone", "$temp",),
(assign, ":money_and_fief", "$temp_2",),
(assign, ":needed_gold", 0),

#Store demand string to s0
(try_begin),
	#A fief and denars
	(ge, ":money_and_fief", 1),
	(ge, "$g_concession_demanded", 1),
	(str_store_party_name, s0, "$g_concession_demanded"),
	(assign, reg1, ":money_and_fief"),
	(str_store_string, s1, "str_reg1_denars"),
	(str_store_string, s0, "str_dplmc_s0_and_s1"),
	(assign, ":needed_gold", ":money_and_fief"),
	(assign, ":valid_demand", 1),
(else_try),
	#Just a fief
	(ge, "$g_concession_demanded", 1),
	(str_store_party_name, s0, "$g_concession_demanded"),
	(assign, ":needed_gold", 0),
	(assign, ":valid_demand", 1),
(else_try),
	#Just denars
	(neq, reg0, 1),
	(assign, reg1, ":money_alone"),
	(str_store_string, s0, "str_reg1_denars"),
	(assign, ":valid_demand", 1),
	(assign, ":needed_gold", ":money_alone"),
(try_end),

(assign, "$temp", ":valid_demand"),
(assign, "$temp_2", ":needed_gold"),

(eq, ":valid_demand", 1),
(store_troop_gold, ":player_gold", "trp_player"),
(ge, ":player_gold", ":needed_gold"),
],
"I accept.  I will give you {s0}, and let there be peace.","close_window", [
    (assign, ":gold", "$temp_2"),

    (troop_remove_gold, "trp_player", ":gold"),
    (call_script, "script_dplmc_faction_leader_splits_gold", "$g_talk_troop_faction", ":gold"),

    (try_begin),
      (ge, "$g_concession_demanded", 1),
      (call_script, "script_give_center_to_faction", "$g_concession_demanded", "$g_talk_troop_faction"),
    (try_end),
    (call_script, "script_diplomacy_start_peace_between_kingdoms", "$g_talk_troop_faction", "$players_kingdom", 1),
    ##zerilius changes begin
    (eq,"$talk_context",tc_party_encounter),
    (assign, "$g_leave_encounter", 1),
    ##zerilius changes end
]],

[anyone|plyr,"dplmc_lord_ask_pardon_ruler_1",
[
(assign, ":valid_demand", "$temp",),
(assign, ":needed_gold", "$temp_2",),
(eq, ":valid_demand", 1),

(store_troop_gold, ":player_gold", "trp_player"),
(lt, ":player_gold", ":needed_gold"),
#SB : use script call to s1
(call_script, "script_game_get_money_text", ":needed_gold"),
# (assign, reg1, ":needed_gold"),
# (str_store_string, s0, "str_reg1_denars"),
], "I don't have {s1} with me.", "dplmc_lord_ask_pardon_ruler_2a",
[]],

[anyone, "dplmc_lord_ask_pardon_ruler_2a", [],
    "In that case, the war will continue.", "lord_pretalk",[]],

[anyone|plyr,"dplmc_lord_ask_pardon_ruler_1",
[], "On second thought, such an accord would not be in my interests.", "lord_pretalk",[]],

##diplomacy end+

[anyone,"lord_ask_pardon",
[
(faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "$g_talk_troop"),
(assign, ":has_center", 0),
(try_for_range, ":cur_center", centers_begin, centers_end),
 (store_faction_of_party, ":cur_center_faction", ":cur_center"),
 (eq, ":cur_center_faction", "fac_player_supporters_faction"),
 (assign, ":has_center", 1),
(try_end),
##diplomacy start+ Handle when the player is co-ruler of an NPC kingdom
(assign, ":is_coruler", 0),
(try_begin),
   (is_between, "$players_kingdom", npc_kingdoms_begin, npc_kingdoms_end),
   (call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", "$players_kingdom"),
   (ge, reg0, DPLMC_FACTION_STANDING_LEADER_SPOUSE),
   (assign, ":is_coruler", 1),
   (assign, "$temp_2", 0x434F52),#is co-ruler
(else_try),
   (assign, "$temp_2", 0),
(try_end),
(this_or_next|eq, ":is_coruler", 1),
##diplomacy end+
(eq, ":has_center", 1),
##diplomacy begin
], "Yes... I am weary of fighting you. I could offer you a truce of twenty days. If you keep your word and do not molest my lands and subjects, we may talk again...", "lord_truce_offer",[]],
##diplomacy end

[anyone|plyr,"lord_truce_offer",
[
##zerilius changes begin
#(call_script, "script_diplomacy_start_peace_between_kingdoms", "$g_encountered_party_faction", "$players_kingdom", 1),
], "I accept. Let us stop making war upon each other, for the time being anyway", "close_window",
[
(call_script, "script_diplomacy_start_peace_between_kingdoms", "$g_encountered_party_faction", "$players_kingdom", 1),
(eq,"$talk_context",tc_party_encounter),
(assign, "$g_leave_encounter", 1),
]],
##zerilius changes end

[anyone|plyr,"lord_truce_offer",
[], "On second thought, such an accord would not be in my interests.", "lord_pretalk",[]],

[anyone,"lord_ask_pardon", [
(neg|faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "$g_talk_troop"),
(faction_slot_eq, "fac_player_supporters_faction", slot_faction_leader, "trp_player"),
(assign, ":has_center", 0),
(try_for_range, ":cur_center", centers_begin, centers_end),
  (store_faction_of_party, ":cur_center_faction", ":cur_center"),
  (eq, ":cur_center_faction", "fac_player_supporters_faction"),
  (assign, ":has_center", 1),
(try_end),
##diplomacy start+ Handle player is co-ruler of NPC kingdom
(neq, "$temp_2", 0x434F52),#is not co-ruler
##diplomacy end+
(eq, ":has_center", 0),

(store_sub, ":hostility", 4, "$g_talk_troop_faction_relation"),
(val_mul, ":hostility", ":hostility"), #square it
(store_mul, reg16, ":hostility", 10),
(str_store_faction_name, s4, "$g_talk_troop_faction"),
], "Hmm. I could use my considerable influence to arrange a pardon for you, {playername},\
 but there are some who see you as an enemy and will not be satisfied unless you pay tribute.\
 All in all, you'd need to bring no less than {reg16} denars to make any friends in {s4}.", "lord_ask_pardon_2",[]],

[anyone,"lord_ask_pardon",
[
(faction_get_slot, ":faction_leader", "$g_talk_troop_faction", slot_faction_leader),
(neq, "$g_talk_troop", ":faction_leader"),
(str_store_troop_name, s7, ":faction_leader"),
], "I am in no position to offer you anything. You must speak to {s7}.", "lord_pretalk",[]],

[anyone,"lord_ask_pardon",
[
(faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "$g_talk_troop"),
##diplomacy start+ Handle player is co-ruler of NPC faction
(neq, "$temp_2", 0x434F52),#is not co-ruler
##diplomacy end+
(neg|faction_slot_ge, "fac_player_supporters_faction", slot_faction_leader, 1),

(store_sub, ":hostility", 4, "$g_talk_troop_faction_relation"),
(val_mul, ":hostility", ":hostility"), #square it
(store_mul, reg16, ":hostility", 10),

(str_store_faction_name, s4, "$g_talk_troop_faction"),
##diplomacy start+ Next line replace "sume" with "sum"
], "Yes... I have bigger worries than you or your followers. However, you have wronged my subjects, and wrongs demand compensation. For the sum of {reg16} denars, I suppose that I could agree to grant you a pardon. What do you say?", "lord_ask_pardon_2",[
##diplomacy end+
]],

[anyone,"lord_ask_pardon",
[
], "I am sorry. I am in no position to offer you a pardon", "lord_pretalk",[
]],





[anyone|plyr,"lord_ask_pardon_2", [(store_troop_gold, ":gold","trp_player"),(ge, ":gold", reg16)], "I have the money here. {reg16} denars.", "lord_ask_pardon_tribue_accept",[]],
[anyone|plyr,"lord_ask_pardon_2", [], "I fear I cannot pay that much.", "lord_ask_pardon_tribue_deny",[]],

[anyone,"lord_ask_pardon_tribue_accept", [
(faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "$g_talk_troop"),
], "Excellent, {playername}.\
I will use this to make amends to those you have wronged, and I will let it be known that you are no longer an enemy of the {s4}.", "close_window",
[
##diplomacy start+ transfer removed gold to bribed lords
(faction_get_slot, ":king", "$g_talk_troop_faction", slot_faction_leader),
(try_begin),
	#if king, take half and split with subjects
	(eq, ":king", "$g_talk_troop"),
	(call_script, "script_dplmc_faction_leader_splits_gold", "$g_talk_troop_faction", reg16),
(else_try),
	#if not king, take half and split with king
	(store_div, ":give_gold", reg16, 2),
	(call_script, "script_dplmc_distribute_gold_to_lord_and_holdings", ":give_gold", "$g_talk_troop"),
	(store_sub, ":give_gold", reg16, ":give_gold"),
	(call_script, "script_dplmc_distribute_gold_to_lord_and_holdings", ":give_gold", ":king"),
(try_end),
##diplomacy end+
(troop_remove_gold, "trp_player", reg16),
(store_relation, ":players_kingdom_relation", "$g_talk_troop_faction", "$players_kingdom"),

(try_begin),
 (this_or_next|eq, "$players_kingdom", 0),
(ge, ":players_kingdom_relation", 0),
 (call_script, "script_set_player_relation_with_faction", "$g_talk_troop_faction", 0),
(try_end),
(assign,"$g_leave_town_outside",1),
(assign, "$g_leave_encounter", 1),
]],

[anyone,"lord_ask_pardon_tribue_accept", [], "Excellent, {playername}.\
 I'll use the coin to smooth the feathers of those that can oppose your pardon, and I'm sure that word will soon spread that you are no longer an enemy of {s4}.", "close_window",
[
##diplomacy start+ transfer removed gold to bribed lords
(try_begin),
	(neg|faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "$g_talk_troop"),
	(store_div, ":gold_to_lord", reg16, 20),#lord takes 5% cut
	(call_script, "script_dplmc_distribute_gold_to_lord_and_holdings", ":gold_to_lord", "$g_talk_troop"),
	(assign, ":gold_to_faction", reg16),#faction splits rest of gold
	(val_sub, ":gold_to_faction", ":gold_to_lord"),
(try_end),
(call_script, "script_dplmc_faction_leader_splits_gold", "$g_talk_troop_faction",
 ":gold_to_faction"),
##diplomacy end+
(troop_remove_gold, "trp_player", reg16),
(store_relation, ":players_kingdom_relation", "$g_talk_troop_faction", "$players_kingdom"),

(try_begin),
 (this_or_next|eq, "$players_kingdom", 0),
(ge, ":players_kingdom_relation", 0),
 (call_script, "script_set_player_relation_with_faction", "$g_talk_troop_faction", 0),
(else_try),
 (call_script, "script_diplomacy_start_peace_between_kingdoms", "$g_talk_troop_faction", "$players_kingdom", 1),
(try_end),
(assign,"$g_leave_town_outside",1),
(assign, "$g_leave_encounter", 1),
]],

[anyone,"lord_ask_pardon_tribue_deny", [], "Then there's nothing I can do for you, {playername}. No silver, no pardon.", "lord_pretalk",[]],


[anyone|plyr,"lord_talk", [(store_partner_quest,":lords_quest"),
                       (ge,":lords_quest",0),
                       ],
"About the task you gave me...", "lord_active_mission_1",[]],

# This is done automatically now.
##  [anyone|plyr,"lord_talk", [(faction_slot_eq,"$g_talk_troop_faction",slot_faction_leader, "$g_talk_troop"),
##                             (eq, "$players_kingdom", "$g_talk_troop_faction"),
##                             (eq, "$player_has_homage", 0),
##                             (gt, "$mercenary_service_accumulated_pay", 0),
##                             ],
##   "{s67}, I humbly request the weekly payment for my service.", "lord_pay_mercenary",[]],
##
##  [anyone,"lord_pay_mercenary", [(assign, reg8, "$mercenary_service_accumulated_pay")],
##   "Hmm, let me see... According to my ledgers, we owe you {reg8} denars for your work. Here you are.", "lord_pay_mercenary_2",
##   [(troop_add_gold, "trp_player", "$mercenary_service_accumulated_pay"),
##    (assign, "$mercenary_service_accumulated_pay", 0)]],
##
##  [anyone|plyr,"lord_pay_mercenary_2", [], "Thank you, sir.", "lord_pretalk", []],

[anyone|plyr,"lord_talk", [#(troop_slot_eq, "$g_talk_troop", slot_troop_is_prisoner, 0),
                       ##diplomacy start+
					   (neg|troop_slot_eq, "trp_player", slot_troop_spouse, -1),
					   #There are certain exotic situations where you would want to support marriage
					   #where the spouse slots may not match (for example, certain polygamy implementations).
					   (this_or_next|troop_slot_eq, "$g_talk_troop", slot_troop_spouse, "trp_player"),
					   ##diplomacy end+
                       (troop_slot_eq, "trp_player", slot_troop_spouse, "$g_talk_troop"),
                       ],
"Let us discuss matters related to our household.", "lord_switch_to_spouse",[]],

[anyone,"lord_switch_to_spouse", [
(assign, ":feast_venue", -1),

(try_begin),
(is_between, "$current_town", walled_centers_begin, walled_centers_end),
(this_or_next|party_slot_eq, "$current_town", slot_town_lord, "trp_player"),
   (party_slot_eq, "$current_town", slot_town_lord, "$g_talk_troop"),
(assign, ":feast_venue", "$current_town"),
(else_try),
(try_for_range, ":center", walled_centers_begin, walled_centers_end),
   (eq, ":feast_venue", -1),
   (this_or_next|party_slot_eq, ":center", slot_town_lord, "trp_player"),
      (party_slot_eq, ":center", slot_town_lord, "$g_talk_troop"),
   (assign, ":feast_venue", ":center"),
(try_end),
(is_between, ":feast_venue", walled_centers_begin, walled_centers_end), #unless there's a try/fail, will not do last check

(else_try),
(is_between, "$current_town", walled_centers_begin, walled_centers_end),
(assign, ":feast_venue", "$current_town"),
(try_end),

(neg|is_between, ":feast_venue", walled_centers_begin, walled_centers_end),
##diplomacy start+ load relation text into s0
(call_script, "script_dplmc_print_player_spouse_says_my_husband_wife_to_s0", "$g_talk_troop", 0),
##diplomacy end+
],
#diplomacy start+ either gender PC can marry opposite-gender lords
"Let us wait until we are in a hall, {s0}, as it is difficult to deal with household inventories and such matters in the field.", "lord_pretalk",[]],
#diplomacy end+
[anyone,"lord_switch_to_spouse", #Ediplomacy start+[],
[#load relation text into s0
(call_script, "script_dplmc_print_player_spouse_says_my_husband_wife_to_s0", "$g_talk_troop", 0),
],
#either gender PC can marry opposite-gender lords
"Certainly, {s0}", "spouse_talk",[]],
#diplomacy end+



[anyone|plyr,"lord_talk", [#(troop_slot_eq, "$g_talk_troop", slot_troop_is_prisoner, 0),
                       (neg|troop_slot_ge, "$g_talk_troop", slot_troop_prisoner_of_party, 0),
                       (ge, "$g_talk_troop_faction_relation", 0),
                       (store_partner_quest,":lords_quest"),
                       (lt,":lords_quest",0),
                (neg|faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "trp_player"),
                (neg|troop_slot_eq, "trp_player", slot_troop_spouse, "$g_talk_troop"),
                #                             (eq,"$g_talk_troop_faction","$players_kingdom")
                       ],
"Do you have any tasks for me?", "lord_request_mission_ask",[]],

[anyone|plyr,"lord_talk",
[
(eq, "$g_talk_troop_faction", "$players_kingdom"),
(eq, "$player_has_homage", 1),
(neg|faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "trp_player"),
(neg|faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "$g_talk_troop"),

],
"Do you think we can work together to advance our standings in this realm?", "combined_political_quests",[
(call_script, "script_get_political_quest", "$g_talk_troop"),
(assign, "$political_quest_found", reg0),
(assign, "$political_quest_target_troop", reg1),
(assign, "$political_quest_object_troop", reg2),
]],

[anyone,"combined_political_quests", [
(troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_hero),
(lt, "$g_talk_troop_effective_relation", -5),
##diplomacy start+
#For affiliated family members, increase willingness to intrigue
(call_script, "script_dplmc_is_affiliated_family_member", "$g_talk_troop"),
(lt, reg0, 1),
##diplomacy end+
],
"I do not imagine that you and I have many mutual interests.", "lord_pretalk",[
]],


[anyone,"combined_political_quests", [
(troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_hero),
(gt, "$political_quest_found", 0),
(assign, ":continue", 1),
(try_begin),
(call_script, "script_cf_troop_can_intrigue", "$g_talk_troop", 1),
(assign, ":continue", 0),
(try_end),
(eq, ":continue", 1),
],
"Hmm.. Perhaps we can discuss this matter in a more private setting, at a later date.", "lord_pretalk",[
]],

[anyone,"combined_political_quests", [
(this_or_next|eq, "$political_quest_found", "qst_intrigue_against_lord"),
(eq, "$political_quest_found", "qst_denounce_lord"),

(troop_slot_ge, "trp_player", slot_troop_controversy, 30),

##diplomacy start+ Use culturally-appropriate term
(call_script, "script_dplmc_print_cultural_word_to_sreg", "$g_talk_troop", DPLMC_CULTURAL_TERM_LORD_PLURAL,0),
],
##Next line, replace "lords" with {s0}
"Hmm.. I do have an idea, but it would require you that you be free of controversy. If you were to wait some time without getting into any arguments with the other {s0} of our realm, perhaps we could proceed further.", "lord_pretalk",[
##diplomacy end+
]],


[anyone|plyr,"lord_talk", [(le,"$talk_context", tc_party_encounter),
                       (faction_slot_eq, "$players_kingdom", slot_faction_leader, "$g_talk_troop"),
                       (faction_slot_eq, "$players_kingdom", slot_faction_marshall, "trp_player"),
                      ],
"I wish to resign the marshalship", "lord_ask_resign_marshalship",[]],

[anyone,"lord_ask_resign_marshalship", [],
"So be it. I shall have to find someone else.", "lord_pretalk",[
  (assign, ":faction_no", "$players_kingdom"),
  (faction_set_slot, ":faction_no", slot_faction_political_issue, 1), #Appointment of marshal
  (store_current_hours, ":hours"),
  (val_max, ":hours", 0),
  (faction_set_slot, ":faction_no", slot_faction_political_issue_time, ":hours"), #Appointment of marshal

  (faction_get_slot, ":old_marshall", ":faction_no", slot_faction_marshall),
  (try_begin),
    (ge, ":old_marshall", 0),
    (troop_get_slot, ":old_marshall_party", ":old_marshall", slot_troop_leaded_party),
    (party_is_active, ":old_marshall_party"),
    (party_set_marshal, ":old_marshall_party", 0),
  (try_end),

  (faction_set_slot, ":faction_no", slot_faction_marshall, -1),

  (try_for_range, ":active_npc", active_npcs_begin, active_npcs_end),
    (store_faction_of_troop, ":active_npc_faction", ":active_npc"),
    (eq, ":active_npc_faction", ":faction_no"),
    (troop_set_slot, ":active_npc", slot_troop_stance_on_faction_issue, -1),
  (try_end),
  (try_begin),
    (eq, "$players_kingdom", ":faction_no"),
    (troop_set_slot, "trp_player", slot_troop_stance_on_faction_issue, -1),
  (try_end),
  (call_script, "script_add_notification_menu", "mnu_notification_relieved_as_marshal", 0, 0),
]],



[anyone|plyr,"lord_talk", [(le,"$talk_context", tc_party_encounter),
                       (ge, "$g_talk_troop_faction_relation", 0),
                       #(troop_slot_eq, "$g_talk_troop", slot_troop_is_prisoner, 0),
                       (neg|troop_slot_ge, "$g_talk_troop", slot_troop_prisoner_of_party, 0),
                       (faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "$g_talk_troop"),
                       (neq, "$players_kingdom", "$g_talk_troop_faction"),
                       (store_partner_quest, ":lords_quest"),
                       (neq, ":lords_quest", "qst_join_faction"),
                      ],
"{s66}, I have come to offer you my sword in vassalage!", "lord_ask_enter_service",[]],


[anyone|plyr,"lord_talk", [(le,"$talk_context", tc_party_encounter),
                       (faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "$g_talk_troop"),
                       (eq, "$players_kingdom", "$g_talk_troop_faction"),
                       (eq, "$player_has_homage", 0),
                       (store_partner_quest, ":lords_quest"),
                       (neq, ":lords_quest", "qst_join_faction"),
                      ],
"{s66}, I wish to become your sworn {man/woman} and fight for your honour.", "lord_ask_enter_service",[]],

[anyone|plyr,"lord_talk", [(le,"$talk_context", tc_party_encounter),
                       (ge, "$g_talk_troop_faction_relation", 0),
                       #(troop_slot_eq, "$g_talk_troop", slot_troop_is_prisoner, 0),
                       (neg|troop_slot_ge, "$g_talk_troop", slot_troop_prisoner_of_party, 0),
                       (faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "$g_talk_troop"),
                       (eq, "$players_kingdom", "$g_talk_troop_faction"),
                       (eq, "$player_has_homage", 1),
                       ##diplomacy start+
                       #Disable leaving the faction if you're the co-leader.  Writing separate logic
                       #to enable doing that is a low priority.
                       (neg|troop_slot_eq,"trp_player",slot_troop_spouse,"$g_talk_troop"),
                       (neg|troop_slot_eq,"$g_talk_troop",slot_troop_spouse,"trp_player"),
					   (call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", "$g_talk_troop_faction"),
					   (lt, reg0, DPLMC_FACTION_STANDING_LEADER_SPOUSE),
                       ##diplomacy end+
                      ],
"{s66}, I wish to be released from my oath to you.", "lord_ask_leave_service",[]],

##  [anyone|plyr,"lord_talk", [(le,"$talk_context", tc_party_encounter),
##                             (ge, "$g_talk_troop_faction_relation", 0),
##                             (troop_slot_eq, "$g_talk_troop", slot_troop_is_prisoner, 0),
##                             (neg|faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "$g_talk_troop"),
##                             (eq, "$players_kingdom", 0),
##                             (eq,1,0)],
##   "TODO2:I want to fight alongside you against your enemies.", "close_window",[]],

[anyone|plyr,"lord_talk", [(eq, 1, 0),(le,"$talk_context", tc_party_encounter),(ge, "$g_talk_troop_faction_relation", 0)],
"I have an offer for you.", "lord_talk_preoffer",[]],


[anyone|plyr,"lord_talk", [##diplomacy start+
	                       #Change the requirements.  Now, the player can grant troops to another lord if:
						   # - The player is the faction leader (this used to be the ONLY condition)
						   # - The player is the faction marshall
						   # - The lord is the player's spouse.
						   # - The lord is an affiliated family member.
						   # - The player is a former companion with good relations.
						   #There are additional details, for which you should check script_dplmc_player_can_give_troops_to_troop
					(neg|troop_slot_ge, "$g_talk_troop", slot_troop_prisoner_of_party, 0),
					(ge, "$g_talk_troop_faction_relation", 0),
					#Check really is leading a party
					(troop_get_slot, ":party_no", "$g_talk_troop", slot_troop_leaded_party),
					(ge, ":party_no", 1),
					(party_get_attached_to, ":cur_attached_party", ":party_no"),
					(lt, ":cur_attached_party", 0),
					#Logic moved to separate script:
					(call_script, "script_dplmc_player_can_give_troops_to_troop", "$g_talk_troop"),
					(ge, reg0, 1),
                    ##diplomacy end+
                       ],
"I want to give some troops to you.", "lord_give_troops",[]],

##diplomacy start+
#Lords will not accept troops when they are at twice their ordinary capacity
#(on Medium; value is higher or lower depending on difficulty setting).
[anyone,"lord_give_troops", [
	(call_script, "script_party_get_ideal_size", "$g_talk_troop_party"),
	(assign, ":limit", reg0),
	(game_get_reduce_campaign_ai, ":reduce_campaign_ai"),
	(try_begin),
		(le, ":reduce_campaign_ai", 0),#Hard: maximum is 150% of normal size
		(val_mul, ":limit", 3),
		(val_add, ":limit", 1),
		(val_div, ":limit", 2),
		(val_max, ":limit", 100),#or 100 troops, whichever is more
	(else_try),
		(eq, ":reduce_campaign_ai", 1),#Medium: maximum is 200% of normal size
		(val_mul, ":limit", 2),
		(val_max, ":limit", 150),#or 150 troops, whichever is more
	(else_try),
		(ge, ":reduce_campaign_ai", 2),#Easy: maximum is 250% of normal size
		(val_mul, ":limit", 5),
		(val_add, ":limit", 1),
		(val_div, ":limit", 2),
		(val_max, ":limit", 200),#or 200 troops, whichever is more
	(try_end),

	(store_party_size_wo_prisoners, ":party_size", "$g_talk_troop_party"),
	(ge, ":party_size", ":limit"),
],
"I can't accomodate any more {reg65?men:soldiers} right now.  My supply lines are overtaxed as it is.", "lord_pretalk",
[
]],

[anyone,"lord_give_troops", [
	#Same behavior as normal, but print a different message.
	(call_script, "script_party_get_ideal_size", "$g_talk_troop_party"),
	(assign, ":ideal_size", reg0),
	(store_party_size_wo_prisoners, ":party_size", "$g_talk_troop_party"),
	(gt, ":party_size", ":ideal_size"),
	], "I have plenty of soldiers at the moment, but I suppose I could accomodate a few more.", "lord_pretalk",
[
(change_screen_give_members, "$g_talk_troop_party"),
]],
##diplomacy end+

[anyone,"lord_give_troops", [],
"Well, I could use some good soldiers. Thank you.", "lord_pretalk",
[
(change_screen_give_members, "$g_talk_troop_party"),
]],





[anyone|plyr,"lord_talk",
[
(eq, "$g_talk_troop_faction", "$players_kingdom"),
(faction_slot_eq, "$players_kingdom", slot_faction_marshall, "trp_player"),
#(troop_slot_eq, "$g_talk_troop", slot_troop_is_prisoner, 0),
(neg|troop_slot_ge, "$g_talk_troop", slot_troop_prisoner_of_party, 0),
],
"I have a new task for you.", "lord_give_order_ask",[]],


[anyone|plyr,"lord_talk",
[
(eq, "$g_talk_troop_faction", "$players_kingdom"),
(neg|faction_slot_eq, "$players_kingdom", slot_faction_marshall, "trp_player"),
#(troop_slot_eq, "$g_talk_troop", slot_troop_is_prisoner, 0),
(neg|troop_slot_ge, "$g_talk_troop", slot_troop_prisoner_of_party, 0),
],
"May I suggest a course of action?", "lord_give_suggestion_ask",[]],


[anyone,"lord_give_order_ask", [],
"Yes?", "lord_give_order",[]],

[anyone,"lord_give_suggestion_ask", [
(faction_slot_eq, "$players_kingdom", slot_faction_leader, "trp_player"),
],
"I will gladly follow your direction, {sire/your Highness}. If you intend to direct an extensive campaign, however, you may also wish to declare yourself marshal, so there is no cause for confusion.", "lord_give_order",[]],


[anyone,"lord_give_suggestion_ask", [
##diplomacy start+ affiliated family members heed the player
(call_script, "script_dplmc_is_affiliated_family_member", "$g_talk_troop"),
(lt, reg0, 1),
##diplomacy end+
(lt, "$g_talk_troop_effective_relation", 5), #was five
],
"My apologies. I don't know you well enough to take your advice.", "lord_pretalk",[]],

[anyone,"lord_give_suggestion_ask", [
],
"What is it?", "lord_give_order",[
]],

[anyone|plyr,"lord_give_order", [
(faction_slot_eq, "$players_kingdom", slot_faction_marshall, "trp_player"),
],
"Follow me.", "lord_give_order_answer",
[
(assign, "$temp", spai_accompanying_army),
(assign, "$temp_2", "p_main_party"),

(store_current_hours, ":hours"),
(party_set_slot, "$g_talk_troop_party", slot_party_following_orders_of_troop, "trp_kingdom_heroes_including_player_begin"),
(party_set_slot, "$g_talk_troop_party", slot_party_orders_type, "$temp"),
(party_set_slot, "$g_talk_troop_party", slot_party_orders_object, "$temp_2"),
(party_set_slot, "$g_talk_troop_party", slot_party_orders_time, ":hours"),
]],

[anyone|plyr,"lord_give_order", [
(neg|faction_slot_eq, "$players_kingdom", slot_faction_marshall, "trp_player"),
],
"Will you follow me? I have a plan...", "lord_give_order_answer",
[
  (assign, "$temp", spai_accompanying_army),
  (assign, "$temp_2", "p_main_party"),

 (store_current_hours, ":hours"),
 (party_set_slot, "$g_talk_troop_party", slot_party_following_orders_of_troop, "trp_kingdom_heroes_including_player_begin"),
 (party_set_slot, "$g_talk_troop_party", slot_party_orders_type, "$temp"),
 (party_set_slot, "$g_talk_troop_party", slot_party_orders_object, "$temp_2"),
 (party_set_slot, "$g_talk_troop_party", slot_party_orders_time, ":hours"),
]],

[anyone|plyr,"lord_give_order", [
 ##diplomacy start+ also enable these orders as a king or to affiliated family members
 (call_script, "script_dplmc_is_affiliated_family_member", "$g_talk_troop"),
 (this_or_next|ge, reg0, 1),
 (this_or_next|faction_slot_eq, "$players_kingdom", slot_faction_leader,
    "trp_player"),
 ##diplomacy end+
 (faction_slot_eq, "$players_kingdom", slot_faction_marshall, "trp_player"),

],
"Go to...", "lord_give_order_details_ask",
[
  (assign, "$temp", spai_holding_center),
  ]],


[anyone|plyr,"lord_give_order", [
 ##diplomacy start+ also enable these orders as a king or to affiliated family members
 (call_script, "script_dplmc_is_affiliated_family_member", "$g_talk_troop"),
 (this_or_next|ge, reg0, 1),
 (this_or_next|faction_slot_eq, "$players_kingdom", slot_faction_leader,
    "trp_player"),
 ##diplomacy end+
 (faction_slot_eq, "$players_kingdom", slot_faction_marshall, "trp_player"),

],
"Raid around the village of...", "lord_give_order_details_ask",
[
  (assign, "$temp", spai_raiding_around_center),
  ]],

[anyone|plyr,"lord_give_order", [
 ##diplomacy start+ also enable these orders as a king or to affiliated family members
 (call_script, "script_dplmc_is_affiliated_family_member", "$g_talk_troop"),
 (this_or_next|ge, reg0, 1),
 (this_or_next|faction_slot_eq, "$players_kingdom", slot_faction_leader,
    "trp_player"),
 ##diplomacy end+
 (faction_slot_eq, "$players_kingdom", slot_faction_marshall, "trp_player"),
],
"Patrol around...", "lord_give_order_details_ask",
[
  (assign, "$temp", spai_patrolling_around_center),
  ]],

#only as suggestion
[anyone|plyr,"lord_give_order", [
    (party_slot_eq, "$g_talk_troop_party", slot_party_ai_state, spai_besieging_center),
     (party_get_slot, ":ai_object", "$g_talk_troop_party", slot_party_ai_object),
   (party_slot_eq, ":ai_object", slot_center_is_besieged_by, "$g_talk_troop_party"),
   (party_slot_eq, ":ai_object", slot_village_state, svs_under_siege),
   (str_store_party_name, s11, ":ai_object"),
   ],
"Together, you and I can take {s11}. You should assault immediately...", "lord_give_order_assault",
[
 #for this one and another one, if the $g_talk_troop is a _t
#     (assign, "$temp", spai_patrolling_around_center),
  ]],

#only as suggestion
[anyone|plyr,"lord_give_order", [
 (neg|faction_slot_eq, "$players_kingdom", slot_faction_marshall, "trp_player"), #not an order,  only a suggestion

],
"We are under attack, but the enemy can be repulsed. You should ride towards...", "lord_give_order_details_ask",
[
  (assign, "$temp", spai_patrolling_around_center),
  ]],

#only as suggestion
[anyone|plyr,"lord_give_order", [
 (faction_slot_eq, "$g_talk_troop_faction", slot_faction_marshall, "$g_talk_troop"),

],
"We are under attack, but the enemy can be repulsed. You should assemble the army and march to...", "lord_give_order_details_ask",
[
  (assign, "$temp", spai_patrolling_around_center),
  ]],


[anyone,"lord_give_order_assault", [
   (party_get_slot, ":ai_object", "$g_talk_troop_party", slot_party_ai_object),
   (party_get_slot, ":besieging_party", ":ai_object", slot_center_is_besieged_by),
     (neq, ":besieging_party", "$g_talk_troop_party"),
   (party_stack_get_troop_id, ":siege_commander", ":besieging_party", 0),
   (str_store_troop_name, s4, ":siege_commander"),
   (troop_get_type, reg4, ":siege_commander"),
   ##diplomacy start+ Override reg4
   (assign, reg4, 0),
   (try_begin),
	(call_script, "script_cf_dplmc_troop_is_female", ":siege_commander"),
	(assign, reg4, 1),
   (try_end),
   ##diplomacy end+
   ],
"{s4} is directing this siege. I suggest you speak to {reg4?her:him}", "lord_pretalk",
[]],


[anyone,"lord_give_order_assault", [
 (party_get_slot, ":ai_object", "$g_talk_troop_party", slot_party_ai_object),
 (party_get_slot, ":siege_begun", ":ai_object", slot_center_siege_begin_hours),
(store_current_hours, ":cur_hour"),
(store_sub, ":hours_of_siege", ":cur_hour", ":siege_begun"),

(try_begin),
   (assign, ":hours_required", 9),
(try_end),
(val_sub, ":hours_required", ":hours_of_siege"),
(gt, ":hours_required", 0),
(try_begin),
   (gt, ":hours_required", 1),
   (assign, reg3, ":hours_required"),
   (str_store_string, s11, "str_reg3_hours"),
(else_try),
   (str_store_string, s11, "str_hour"),
(try_end),
],
"Our preparations are not yet ready. We need another {s11}", "lord_pretalk",
[
  ]],


[anyone,"lord_give_order_assault", [
],
"Very well -- to the walls!", "close_window",
[
 (party_get_slot, ":ai_object", "$g_talk_troop_party", slot_party_ai_object),
(call_script, "script_begin_assault_on_center", ":ai_object"),

(party_set_slot, "$g_talk_troop_party", slot_party_under_player_suggestion, spai_besieging_center),
 (assign, "$g_leave_encounter", 1),

  ]],




#only as suggestion
   [anyone|plyr,"lord_give_order", [
 (neg|faction_slot_eq, "$players_kingdom", slot_faction_marshall, "trp_player"), #not an order,  only a suggestion
],
"There is a fortress which can easily be taken. Go to..", "lord_give_order_details_ask",
[
  (assign, "$temp", spai_besieging_center),
  ]],

[anyone|plyr,"lord_give_order", [
#    (neg|faction_slot_eq, "$players_kingdom", slot_faction_marshall, "trp_player"),
],
"The enemy is coming in force. Flee in the direction of...", "lord_give_order_details_ask",
[
  (assign, "$temp", spai_retreating_to_center),
  ]],





[anyone|plyr,"lord_give_order",
[
(faction_slot_eq, "$players_kingdom", slot_faction_marshall, "trp_player"),
#    (neg|troop_slot_eq, "$g_talk_troop", slot_troop_player_order_state, spai_undefined),
  ],
"I won't need you for some time. You are free to do as you like.", "lord_give_order_stop",
[]],

[anyone|plyr,"lord_give_order",
[
(neg|faction_slot_eq, "$players_kingdom", slot_faction_marshall, "trp_player"),
(party_slot_eq, "$g_talk_troop_party", slot_party_ai_state, spai_accompanying_army),
(party_slot_eq, "$g_talk_troop_party", slot_party_ai_object, "p_main_party"),
  ],
"You no longer need to accompany me.", "lord_give_order_stop",
[]],



[anyone|plyr,"lord_give_order", [],
"Never mind.", "lord_pretalk",
[]],


[anyone,"lord_give_order_details_ask", [
 (neg|faction_slot_eq, "$players_kingdom", slot_faction_marshall, "trp_player"),
##diplomacy start+ Add support for companion personalities
(call_script, "script_dplmc_get_troop_morality_value", "$g_talk_troop", tmt_aristocratic),
(this_or_next|ge, reg0, 1),
##diplomacy end+
(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_martial),
(eq, "$temp", spai_retreating_to_center),

],
"It is not my way to turn tail and run, without even laying eyes on the enemy.", "lord_pretalk",[]],

[anyone,"lord_give_order_details_ask", [
 (neg|faction_slot_eq, "$players_kingdom", slot_faction_marshall, "trp_player"),
(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_debauched),
(eq, "$temp", spai_besieging_center),

],
"You want me to shed my blood outside a fortress while others stand by and watch? I think not.", "lord_pretalk",[]],

[anyone,"lord_give_order_details_ask", [],
"Where?", "lord_give_order_details",[]],

[anyone|plyr|repeat_for_parties, "lord_give_order_details",
[
  (store_repeat_object, ":party_no"),
  (store_faction_of_party, ":party_faction", ":party_no"),
  (store_relation, ":relation", ":party_faction", "$players_kingdom"),
  (assign, ":continue", 0),
  (try_begin),
    (this_or_next|eq, "$temp", spai_retreating_to_center),
      (eq, "$temp", spai_holding_center),
    (try_begin),
      (this_or_next|party_slot_eq, ":party_no", slot_party_type, spt_castle),
      (party_slot_eq, ":party_no", slot_party_type, spt_town),
      (eq, ":party_faction", "$players_kingdom"),
      (assign, ":continue", 1),
    (try_end),
  (else_try),
    (eq, "$temp", spai_raiding_around_center),
    (try_begin),
      (party_slot_eq, ":party_no", slot_party_type, spt_village),
      (lt, ":relation", 0),
      (assign, ":continue", 1),
    (try_end),
  (else_try),
    (eq, "$temp", spai_besieging_center),
    (try_begin),
      (this_or_next|party_slot_eq, ":party_no", slot_party_type, spt_castle),
      (party_slot_eq, ":party_no", slot_party_type, spt_town),
    (party_slot_eq, ":party_no", slot_center_is_besieged_by, -1),
      (lt, ":relation", 0),
      (assign, ":continue", 1),
    (try_end),
  (else_try),
    (eq, "$temp", spai_patrolling_around_center),
    (try_begin),
      (eq, ":party_faction", "$players_kingdom"),
      (is_between, ":party_no", centers_begin, centers_end),
      (assign, ":continue", 1),
   (else_try),
      (is_between, ":party_no", centers_begin, centers_end),
    (store_distance_to_party_from_party, ":distance", ":party_no", "p_main_party"),
    (le, ":distance", 25),
      (assign, ":continue", 1),
    (try_end),
  (try_end),
  (eq, ":continue", 1),
  (neq, ":party_no", "$g_encountered_party"),
  (str_store_party_name, s1, ":party_no")],
"{s1}", "lord_give_order_answer",
[
  (store_repeat_object, "$temp_2"),
  (store_current_hours, ":hours"),
  (party_set_slot, "$g_talk_troop_party", slot_party_following_orders_of_troop, "trp_kingdom_heroes_including_player_begin"),
  (party_set_slot, "$g_talk_troop_party", slot_party_orders_type, "$temp"),
  (party_set_slot, "$g_talk_troop_party", slot_party_orders_object, "$temp_2"),
  (party_set_slot, "$g_talk_troop_party", slot_party_orders_time, ":hours"),
]],

[anyone|plyr, "lord_give_order_details",
[], "Never mind.", "lord_pretalk",[]],

#Simple stop order
[anyone,"lord_give_order_stop", [],
"All right. I will stop here.", "lord_pretalk",
[
  (party_set_slot, "$g_talk_troop_party", slot_party_orders_type, spai_undefined),
  (party_set_slot, "$g_talk_troop_party", slot_party_orders_object, -1),
  #this is not set above, so should be set here
  (store_current_hours, ":hours"),
  (val_sub, ":hours", 36),
  (val_max, ":hours", 0),

  (party_set_slot, "$g_talk_troop_party", slot_party_following_orders_of_troop, "trp_kingdom_heroes_including_player_begin"),
  (party_set_slot, "$g_talk_troop_party", slot_party_orders_type, spai_undefined),
  (party_set_slot, "$g_talk_troop_party", slot_party_orders_object, -1),
  (party_set_slot, "$g_talk_troop_party", slot_party_orders_time, ":hours"),

  #same variable as above
  (troop_get_slot, ":party_no", "$g_talk_troop", slot_troop_leaded_party),
  (try_begin),
    (gt, ":party_no", 0),
    (call_script, "script_party_set_ai_state", ":party_no", spai_undefined, -1),
    (party_set_slot, ":party_no", slot_party_commander_party, -1),
  (try_end),
]],

[anyone,"lord_give_order_answer",
[
  (eq, "$temp", spai_accompanying_army),
  ##diplomacy start+ affiliated family members heed the player
  (call_script, "script_dplmc_is_affiliated_family_member", "$g_talk_troop"),
  (lt, reg0, 1),
  ##diplomacy end+
  (neg|faction_slot_eq, "$players_kingdom", slot_faction_marshall, "trp_player"),
  (neg|faction_slot_eq, "$players_kingdom", slot_faction_leader, "trp_player"),

  (call_script, "script_troop_get_player_relation", "$g_talk_troop"),
  (assign, ":player_relation", reg0),

  (troop_get_slot, ":troop_renown", "$g_talk_troop", slot_troop_renown),
  (troop_get_slot, ":player_renown", "trp_player", slot_troop_renown),
  ##diplomacy start+
  (try_begin),
    #prejudice mode: high
    (lt, "$g_disable_condescending_comments", 0),
    (neq, reg65, "$character_gender"),

    (call_script, "script_cf_dplmc_faction_has_bias_against_gender", "$g_talk_troop_faction", "$character_gender"),

	(neg|troop_slot_ge, "$g_talk_troop", slot_lord_reputation_type, lrep_roguish),#non-noble or kingdom lady
	(neg|troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_cunning),
	(neg|is_between, "$g_talk_troop", companions_begin, companions_end),

    (val_div, ":player_renown", 2),
  (try_end),
  ##diplomacy end+
  #(val_mul, ":troop_renown", 3),
  #(val_div, ":troop_renown", 4),
  #(this_or_next|lt, ":player_renown", ":troop_renown"),
  #(lt, ":player_relation", 0),

  (store_skill_level, ":player_persuasion_level", "skl_persuasion", "trp_player"),
  (store_div, ":player_relation_div_5", ":player_relation", 5),
  (val_min, ":player_relation_div_5", 10),
  (store_add, ":player_persuasion_power", ":player_relation_div_5", ":player_persuasion_level"),

  (store_sub, ":needed_lowest_renown", 20, ":player_persuasion_power"),
  (val_mul, ":needed_lowest_renown", ":troop_renown"),
  (val_div, ":needed_lowest_renown", 10),

  (this_or_next|lt, ":player_renown", ":needed_lowest_renown"),
  (lt, ":player_relation", 0),
],
"That would hardly be proper. It would be more appropriate for you to follow me instead. Did you have any other ideas?", "lord_give_order",
[
  (party_set_slot, "$g_talk_troop_party", slot_party_following_orders_of_troop, 0),
  (party_set_slot, "$g_talk_troop_party", slot_party_orders_type, 0),
  (party_set_slot, "$g_talk_troop_party", slot_party_orders_object, 0),
  (party_set_slot, "$g_talk_troop_party", slot_party_orders_time, 0),
]],

#More complicated order
[anyone,"lord_give_order_answer",
[
 (call_script, "script_npc_decision_checklist_party_ai", "$g_talk_troop"),

(eq, reg0, "$temp"),
(eq, reg1, "$temp_2"),

 (str_clear, s12),
(try_begin),
   (neg|faction_slot_eq, "$g_talk_troop_faction", slot_faction_marshall, "trp_player"),
   (neg|faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "trp_player"),
   (str_store_string, s12, "str_but_if_this_goes_badly"),
(try_end),
],
"All right. I will do that.{s12}", "lord_pretalk",
[
  (call_script, "script_party_set_ai_state", "$g_talk_troop_party", "$temp", "$temp_2"),
  (str_clear, s12),
  (try_begin),
    (neg|faction_slot_eq, "$g_talk_troop_faction", slot_faction_marshall, "trp_player"),
    (neg|faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "trp_player"),
    (str_store_string, s12, "str_but_if_this_goes_badly"),
  (try_end),
  #Set courage and aggressiveness in party_set_ai_astate
  (assign, "$g_leave_encounter", 1),
]],

#Recalculated orders do not match
[anyone,"lord_give_order_answer", [],
"I am sorry. I need to attend my own business at the moment.", "lord_pretalk",
[
  (call_script, "script_npc_decision_checklist_party_ai", "$g_talk_troop"),
  (call_script, "script_party_set_ai_state", "$g_talk_troop_party", reg0, reg1),
]],

#generic lord comments - must be far down
[anyone,"lord_start", [],
"What is it?", "lord_talk",[]],


[anyone|plyr,"lord_talk",
[
  (eq, "$g_talk_troop_faction", "$players_kingdom"),
  (faction_slot_eq, "$players_kingdom", slot_faction_marshall, "trp_player"),
  #(troop_slot_eq, "$g_talk_troop", slot_troop_is_prisoner, 0),
  (neg|troop_slot_ge, "$g_talk_troop", slot_troop_prisoner_of_party, 0),
  (this_or_next|faction_slot_eq, "$players_kingdom", slot_faction_ai_state, sfai_default),
  (faction_slot_eq, "$players_kingdom", slot_faction_ai_state, sfai_feast),
],
"I want to start a new campaign. Let us assemble the army here.", "lord_give_order_call_to_arms_verify",
[]],

[anyone,"lord_give_order_call_to_arms_verify", [],
"You wish to summon all lords for a new campaign?", "lord_give_order_call_to_arms_verify_2",[]],

[anyone|plyr,"lord_give_order_call_to_arms_verify_2", [], "Yes. We must gather all our forces before we march on the enemy.", "lord_give_order_call_to_arms",[]],
[anyone|plyr,"lord_give_order_call_to_arms_verify_2", [], "On second thought, it won't be necessary to summon everyone.", "lord_pretalk",[]],

[anyone,"lord_give_order_call_to_arms",
[],
"All right then. I will send messengers and tell everyone to come here.", "lord_pretalk",
[
 (assign, "$player_marshal_ai_state", sfai_gathering_army),
 (assign, "$player_marshal_ai_object", "p_main_party"),
  (call_script, "script_decide_faction_ai", "$players_kingdom"),
 (assign, "$g_recalculate_ais", 1),
  ]],

[anyone|plyr,"lord_talk",
[
  (eq, "$g_talk_troop_faction", "$players_kingdom"),
  (faction_slot_eq, "$players_kingdom", slot_faction_marshall, "trp_player"),
  #(troop_slot_eq, "$g_talk_troop", slot_troop_is_prisoner, 0),
  (neg|troop_slot_ge, "$g_talk_troop", slot_troop_prisoner_of_party, 0),
  (neg|faction_slot_eq, "$players_kingdom", slot_faction_ai_state, sfai_default),
  (neg|faction_slot_eq, "$players_kingdom", slot_faction_ai_state, sfai_feast),
  ],
"I want to end the campaign and let everyone return home.", "lord_give_order_disband_army_verify", []],

[anyone,"lord_give_order_disband_army_verify", [],
"You want to end the current campaign and release all lords from duty?", "lord_give_order_disband_army_2",[]],

[anyone|plyr,"lord_give_order_disband_army_2", [], "Yes. We no longer need all our forces here.", "lord_give_order_disband_army",[]],
[anyone|plyr,"lord_give_order_disband_army_2", [], "On second thought, it will be better to stay together for now.", "lord_pretalk",[]],

[anyone,"lord_give_order_disband_army",
[],
"All right. I will let everyone know that they are released from duty.", "lord_pretalk",
[
  (assign, "$player_marshal_ai_state", sfai_default),
 (assign, "$player_marshal_ai_object", -1),
  (call_script, "script_decide_faction_ai", "$players_kingdom"),
  (assign, "$g_recalculate_ais", 1),
  ]],

[anyone|plyr,"lord_talk", [
 (ge,"$g_encountered_party_relation",0),
 (neg|troop_slot_ge, "$g_talk_troop", slot_troop_prisoner_of_party, 0),
],
"I wish to ask you something.", "lord_talk_ask_something",[]],

[anyone,"lord_talk_ask_something", [],
"Aye? What is it?", "lord_talk_ask_something_2",[]],

##diplomacy start+
#Allow updating skills of former companions, including claimants.
#Modified from rubik's Custom Commander code.
[anyone|plyr,"lord_talk_ask_something_2",
    [(neg|troop_slot_ge, "$g_talk_troop", slot_troop_prisoner_of_party, 0),
     (ge, "$g_talk_troop_effective_relation", 0),
     (neg|troop_slot_eq, "$g_talk_troop", slot_troop_playerparty_history, dplmc_pp_history_nonplayer_entry),
     (this_or_next|is_between, "$g_talk_troop", companions_begin, companions_end),
     (is_between, "$g_talk_troop", pretenders_begin, pretenders_end),
],
"Have your skills increased since the days when we were travelling companions?", "lord_talk_ask_skill",[]],

[anyone,"lord_talk_ask_skill", [], "Let me show you...", "lord_pretalk",[(change_screen_view_character)]],
##diplomacy end+

[anyone,"lord_talk_ask_something_again", [],
"Is there anything else?", "lord_talk_ask_something_2",[]],


[anyone|plyr,"lord_talk_ask_something_2", [#(troop_slot_eq, "$g_talk_troop", slot_troop_is_prisoner, 0),
                                                   (neg|troop_slot_ge, "$g_talk_troop", slot_troop_prisoner_of_party, 0),
],
"I want to know the location of someone.", "lord_talk_ask_location",[]],

[anyone|plyr,"lord_talk_ask_something_2", [
 (neg|troop_slot_eq, "$g_talk_troop", slot_troop_leaded_party, -1)
],
"What are you and your men doing?", "lord_tell_objective",[
(party_get_slot, ":ai_behavior", "$g_talk_troop_party", slot_party_ai_state),
(party_get_slot, ":ai_object", "$g_talk_troop_party", slot_party_ai_object),

(try_begin),
   (eq, "$cheat_mode", 1),
   (party_get_ai_initiative, reg4, "$g_talk_troop_party"),
   (party_get_helpfulness, reg5, "$g_talk_troop_party"),
   (display_message, "@{!}DEBUG : Initiative {reg4}, helpfulness {reg5}"),
(try_end),

 (str_clear, s14),
 (str_clear, s15),
 (str_clear, s16),

 (try_begin),
  (call_script, "script_npc_decision_checklist_party_ai", "$g_talk_troop"),
  (eq, reg0, ":ai_behavior"),
  (eq, reg1, ":ai_object"),
(else_try),
  (call_script, "script_party_set_ai_state", "$g_talk_troop_party", reg0, reg1),
   (str_store_string, s14, "str_however_circumstances_have_changed_since_we_made_that_decision_and_i_may_reconsider_shortly_s16"),
  (try_begin),
   (ge, "$cheat_mode", 1),
   (display_message, "@{!}DEBUG -- ai behavior: {reg0}, ai object: {reg1}"),
  (try_end),
(try_end),
]],

[anyone|plyr,"lord_talk_ask_something_2", [
#(troop_slot_eq, "$g_talk_troop", slot_troop_is_prisoner, 0),
(neg|troop_slot_ge, "$g_talk_troop", slot_troop_prisoner_of_party, 0),

],
"What is the realm doing?", "lord_talk_ask_about_strategy",[]],

[anyone,"lord_talk_ask_about_strategy", [
 (eq, "$players_kingdom", "$g_talk_troop_faction"),
(faction_slot_eq, "$g_talk_troop_faction", slot_faction_marshall, "trp_player"),
(neg|faction_slot_eq, "$g_talk_troop_faction", slot_faction_ai_state, sfai_feast),
],
"You should decide that, as you are the marshal.", "lord_pretalk",[]],



[anyone|plyr,"lord_talk_ask_something_2", [#(troop_slot_eq, "$g_talk_troop", slot_troop_is_prisoner, 0),
                               (neg|troop_slot_ge, "$g_talk_troop", slot_troop_prisoner_of_party, 0),
],
"How goes the war?", "lord_talk_ask_about_war",[]],

#SB : qst_capture_prisoners proposal
[anyone|plyr,"lord_talk_ask_something_2",[
  (check_quest_active, "qst_capture_prisoners"),
  (neg|quest_slot_eq, "qst_capture_prisoners", slot_quest_giver_troop, "$g_talk_troop"), #can't buy from quest giver
  (ge, "$g_talk_troop_relation", 0), #is friendly
  (troops_can_join_as_prisoner, 1), #has room
  # (neg|check_quest_failed, "qst_capture_prisoners"),
  # (neg|check_quest_succeeded, "qst_capture_prisoners"),
  (quest_get_slot, ":prisoner", "qst_capture_prisoners", slot_quest_target_troop),
  (is_between, ":prisoner", regular_troops_begin, regular_troops_end),
  (store_troop_count_prisoners, ":cur_count", ":prisoner", "p_main_party"),
  (val_add, ":cur_count", 1), #off by one for ge
  (quest_slot_ge, "qst_capture_prisoners", slot_quest_target_amount, ":cur_count"),
  # (quest_get_slot, ":cur_amount", "qst_capture_prisoners", slot_quest_target_amount),
  
  (store_troop_count_prisoners, ":prisoner_count", ":prisoner", "$g_encountered_party"),
  (try_begin),
    (is_between, "$g_encountered_party", walled_centers_begin, walled_centers_end),
    (neg|party_slot_eq, "$g_encountered_party", slot_town_lord, "$g_talk_troop"),
    (assign, ":prisoner_count", -1),
  (try_end),
  (gt, ":prisoner_count", 0),
  (str_store_troop_name_plural, s1, ":prisoner"),
 ],
 "I need some {s1} as prisoner.", "lord_talk_ask_about_capture_prisoners", []],
 
[anyone, "lord_talk_ask_about_capture_prisoners",
 [
  (quest_get_slot, ":prisoner", "qst_capture_prisoners", slot_quest_target_troop),
  (store_troop_count_prisoners, "$g_prisoner_recruit_size", ":prisoner", "$g_encountered_party"),
  (try_begin), #single prisoner, freebie
    (eq, "$g_prisoner_recruit_size", 1),
    (assign, "$diplomacy_var", 0),
    (call_script, "script_dplmc_store_troop_is_female_reg", ":prisoner", 4),
    (assign, reg10, 1),
  (else_try),
    (assign, reg10, 0),
    (assign, "$g_talk_troop", ransom_brokers_begin),
    (call_script, "script_game_get_prisoner_price", ":prisoner"),
    (store_conversation_troop, "$g_talk_troop"), #restore
    (assign, "$diplomacy_var", reg0), #in the conditions above we specified positive relation
    (val_mul, "$diplomacy_var", 1000),
    (store_sub, ":amount", 1000, "$g_talk_troop_relation"),
    (val_div, "$diplomacy_var", ":amount"),
    (call_script, "script_game_get_money_text", "$diplomacy_var"), #goes to s1
  (try_end),
  (assign, "$g_prisoner_recruit_troop_id", ":prisoner"),
  ],
 "I have {reg11} {s11} here. You can have {reg10?{reg4?her:him} for free:them for {s1} each}.", "lord_talk_ask_about_capture_prisoners_count", [
    (assign, reg11, "$g_prisoner_recruit_size"),
    (str_store_troop_name_by_count, s11, "$g_prisoner_recruit_troop_id", reg11),
  ],
 ],
 
[anyone|plyr, "lord_talk_ask_about_capture_prisoners_count", [], "Never mind.", "lord_talk_ask_something_again", [
  #clear globals
  (assign, "$g_prisoner_recruit_troop_id", 0),
  (assign, "$g_prisoner_recruit_size", 0),
]],
[anyone|plyr, "lord_talk_ask_about_capture_prisoners_count", [
  (quest_get_slot, ":amount", "qst_capture_prisoners", slot_quest_target_amount),
  (store_troop_count_prisoners, ":cur_amount", "$g_prisoner_recruit_troop_id", "p_main_party"),
  (val_sub, ":amount", ":cur_amount"),
  (gt, "$g_prisoner_recruit_size", ":amount"), #condition for displaying a partial result
  #first limit by player capacity
  (party_get_free_prisoners_capacity, ":capacity", "p_main_party"),
  (try_begin), #second limit by gold
    (gt, "$diplomacy_var", 0),
    (store_troop_gold, ":gold_no", "trp_player"),
    (val_div, ":gold_no", "$diplomacy_var"),
    (val_min, ":capacity", ":gold_no"),
  (try_end),
  (val_min, ":amount", ":capacity"),
  (assign, "$diplomacy_var2", ":amount"),
  (assign, reg2, ":amount"),
], "Thank you, but I'll only need {reg2}.", "lord_talk_ask_about_capture_prisoners_bought", [
#partial payment
  (assign, "$g_prisoner_recruit_size", "$diplomacy_var2"),
]],
[anyone|plyr, "lord_talk_ask_about_capture_prisoners_count", [

  (party_get_free_prisoners_capacity, ":capacity", "p_main_party"),
  (ge, ":capacity", "$g_prisoner_recruit_size"),
  (store_mul, ":amount", "$diplomacy_var", "$g_prisoner_recruit_size"),
  (store_troop_gold, ":cur_gold", "trp_player"),
  (ge, ":cur_gold", ":amount"),
  (quest_get_slot, ":giver", "qst_capture_prisoners", slot_quest_giver_troop),
  (str_store_troop_name, s1, ":giver"),
], "{s1} and I thank you for the war effort.", "lord_talk_ask_about_capture_prisoners_bought", [
  #no change, we bought them all
]],

[anyone, "lord_talk_ask_about_capture_prisoners_bought",
 [],
 "As you will.", "lord_pretalk", [
  (party_remove_prisoners, "$g_encountered_party", "$g_prisoner_recruit_troop_id", "$g_prisoner_recruit_size"),
  (party_add_prisoners, "p_main_party", "$g_prisoner_recruit_troop_id", "$g_prisoner_recruit_size"),
  (try_begin),
    (gt, "$diplomacy_var", 0),
    (val_mul, "$diplomacy_var", "$g_prisoner_recruit_size"),
    (troop_remove_gold, "trp_player", "$diplomacy_var"),
    (call_script, "script_dplmc_distribute_gold_to_lord_and_holdings", "$diplomacy_var", "$g_talk_troop"),
  (try_end),
  (assign, "$g_prisoner_recruit_troop_id", 0),
  (assign, "$g_prisoner_recruit_size", 0),
  (store_current_hours, "$g_prisoner_recruit_last_time"),
  ],
 ],
#SB : qst_rescue_prisoner ransom proposal
[anyone|plyr,"lord_talk_ask_something_2",[
  (check_quest_active, "qst_rescue_prisoner"),
  (neg|check_quest_failed, "qst_rescue_prisoner"),
  (neg|check_quest_succeeded, "qst_rescue_prisoner"),
  (quest_get_slot, ":prisoner", "qst_rescue_prisoner", slot_quest_target_troop),
  (call_script, "script_troop_get_family_relation_to_troop", ":prisoner", "$g_talk_troop"),
  (gt, reg0, 0),
  #check faction relation between player, g_talk_troop, and lord_selected, generally we exclude if this is an imprisoning faction
  (quest_get_slot, ":prisoner_center", "qst_rescue_prisoner", slot_quest_target_center),
  (store_faction_of_party, ":faction_no", ":prisoner_center"),
  (neq, ":faction_no", "$g_talk_troop_faction"),
  # (neg|troop_slot_ge, "$g_talk_troop", slot_troop_player_debt, 1),
  (neg|troop_slot_ge, "$g_talk_troop", slot_troop_intrigue_impatience, 0),
  (str_store_troop_name, s1, ":prisoner"), #name
  (str_store_string, s11, reg1), #relation
 ],
 "Are you willing to contribute to your {s11}, {s1}'s ransom?", "lord_talk_ask_about_ransom", [
 #store these things for later
 (quest_get_slot, "$lord_selected", "qst_rescue_prisoner", slot_quest_target_troop),
 (call_script, "script_troop_get_family_relation_to_troop", "$lord_selected", "$g_talk_troop"),
 
 (assign, "$diplomacy_var", reg0),
 (assign, "$diplomacy_var2", reg1),

 ]],

#denied due to bad credit score
[anyone, "lord_talk_ask_about_ransom",
 [(troop_get_slot, ":cur_debt", "$g_talk_troop", slot_troop_player_debt),
  (is_between, ":cur_debt", 1, dplmc_ransom_debt_mask),
  ],
 "While I am concerned about {s1}'s wellbeing, I do not consider you worthy of the task {s2} set forth as you have yet to clear the personal debt you have accrued to me.", "lord_talk_ask_something_again", [
   (str_store_troop_name, s1, "$lord_selected"),
   (quest_get_slot, ":quest_giver", "qst_rescue_prisoner", slot_quest_giver_troop), 
   (str_store_troop_name, s2, ":quest_giver"),
  ],
 ],
 
#denied due to bad credit score
[anyone, "lord_talk_ask_about_ransom",
 [(troop_get_slot, ":cur_debt", "$g_talk_troop", slot_troop_player_debt),
  (ge, ":cur_debt", dplmc_ransom_debt_mask),
  ],
 "What, back for more? Have I not already given you {s1}? -- I warn you {playername}, if you wrong my {s11} I expect every denar back in full.", "lord_pretalk", [
   (troop_get_slot, ":cur_debt", "$g_talk_troop", slot_troop_player_debt),
   (val_mod, ":cur_debt", dplmc_ransom_debt_mask),
   (call_script, "script_game_get_money_text", ":cur_debt"),
   (str_store_string, s11, "$diplomacy_var2"),
  ],
 ],
#too distant a relative
[anyone, "lord_talk_ask_about_ransom",
 [
    # (call_script, "script_troop_get_family_relation_to_troop", ":prisoner", "$g_talk_troop"),
    (le, "$diplomacy_var", 2),
  ],
 "Yes, I have heard of {s1}'s plights. However, as {reg4?she:he} is but a distant {s11} of mine I do not feel obliged to contribute.", "lord_pretalk", [
    (str_store_string, s11, "$diplomacy_var2"),
    (str_store_troop_name, s1, "$lord_selected"),
    (call_script, "script_dplmc_store_troop_is_female_reg", "$lord_selected", 4),
   ],
 ],
#fighting in other realm
[anyone, "lord_talk_ask_about_ransom",
 [
    (store_faction_of_troop, ":prisoner_faction", "$lord_selected"),
    (neq, "$g_talk_troop_faction", ":prisoner_faction"),
    (troop_get_slot, ":reputation_type", "$g_talk_troop", slot_lord_reputation_type),
    (neq, ":reputation_type", lrep_goodnatured),
    #add in other relational strength, lrep checks
  ],
 "I prefer to distance myself from {s1}'s follies in the {s2} -- surely you can see I hold no responsibility.", "lord_pretalk", [
    (str_store_troop_name_plural, s1, "$lord_selected"), #informal name without title
    (store_faction_of_troop, ":faction_no", "$lord_selected"),
    (str_store_faction_name, s2, ":faction_no"),
   ],
 ],
 
#really hate eachother
[anyone, "lord_talk_ask_about_ransom",
 [
    # (store_faction_of_troop, ":prisoner_faction", "$lord_selected"),
    (call_script, "script_troop_get_relation_with_troop", "$lord_selected", "$g_talk_troop"),
    (le, reg0, -30),
    (troop_get_slot, ":reputation_type", "$g_talk_troop", slot_lord_reputation_type),
    (neq, ":reputation_type", lrep_upstanding),
    #add in other relational strength, lrep checks
  ],
 "How dare you petition me on that {s43}'s behalf, {playername}? You try my patience...", "close_window", [
    (call_script, "script_lord_comment_to_s43", "$g_talk_troop", "str_lord_insult_default"),
    (call_script, "script_troop_change_relation_with_troop", "$g_talk_troop", "trp_player", -1),
    (call_script, "script_change_troop_intrigue_impatience", "$g_talk_troop", 100),
   ],
 ],
#dislike one another
[anyone, "lord_talk_ask_about_ransom",
 [
    # (store_faction_of_troop, ":prisoner_faction", "$lord_selected"),
    (call_script, "script_troop_get_relation_with_troop", "$lord_selected", "$g_talk_troop"),
    (le, reg0, -10),
    (troop_get_slot, ":reputation_type", "$g_talk_troop", slot_lord_reputation_type),
    (neq, ":reputation_type", lrep_upstanding),
    #add in other relational strength, lrep checks
  ],
 "I have no love for {s1}, let {reg4?her:him} rot.", "lord_pretalk", [
    (str_store_troop_name, s1, "$lord_selected"),
    (call_script, "script_dplmc_store_troop_is_female_reg", "$lord_selected", 4),
    (call_script, "script_change_troop_intrigue_impatience", "$g_talk_troop", 50),
   ],
 ],
 
#already raised sufficient funds
#dislike one another
[anyone, "lord_talk_ask_about_ransom",
 [
    (quest_get_slot, ":cur_amount", "qst_rescue_prisoner", slot_quest_target_state),
    (neg|quest_slot_ge, "qst_rescue_prisoner", slot_quest_target_amount, ":cur_amount"),
  ],
 "I believe that, between {s12} and yourself, enough funds have been secured for ransoming {s11}. I can give you nothing more except my blessings.", "lord_pretalk", [
   ],
 ],
 
#otherwise we calculate money
[anyone, "lord_talk_ask_about_ransom",
 [],
 "Of course, {playername}. {s1} is my {s4} and I will lend whatever help I can...", "lord_calculated_ransom", [
    (store_mul, ":amount", "$diplomacy_var", 125), #20 for spouse, 10 for brother/sister, 4 for others
    (try_begin), #add bonus if player questing within the same family
      (troop_slot_ge, "$g_talk_troop", dplmc_slot_troop_affiliated, 1),
      (val_add, ":amount", 250), #+2 relation strength
    (try_end),
    (call_script, "script_calculate_ransom_contribution", "$g_talk_troop", ":amount"),
    (str_store_troop_name, s1, "$lord_selected"),
    (str_store_string, s4, "$diplomacy_var2"),
    # (assign, ":amount", reg0),
   ],
 ],
 
#if for some reason this lord is stingy or bankrupt
[anyone, "lord_calculated_ransom",
 [(neg|troop_slot_ge, "$g_talk_troop", slot_troop_player_debt, 0)],
 "However, my coffers are severely depleted at the moment -- {s1} will have to wait a while longer.", "lord_pretalk", 
 [(call_script, "script_change_troop_intrigue_impatience", "$g_talk_troop", 15),]],
#wait for at least 1x24 hour for this to go down or wealth to be refreshed

[anyone, "lord_calculated_ransom",
 [],
 "Will {s1} suffice?", "lord_ask_calculated_ransom", 
 [(troop_get_slot, ":ransom", "$g_talk_troop", slot_troop_player_debt),
  (call_script, "script_game_get_money_text", ":ransom"),
 ]],
 
#get the money
[anyone|plyr, "lord_ask_calculated_ransom",
[], "For sure.","lord_lend_ransom_accept",[
  (call_script, "script_lend_money_for_ransom", "$g_talk_troop"),
]],

#reset calculated amount
[anyone|plyr, "lord_ask_calculated_ransom",
[], "Nevermind.","lord_lend_ransom_reject",[
  (troop_set_slot, "$g_talk_troop", slot_troop_player_debt, 0),
]],

[anyone, "lord_lend_ransom_accept",
[], "Then take it with my blessings, {playername}. Give {s1} my regards.","lord_pretalk",[
    (str_store_troop_name, s1, "$lord_selected"),
]],
[anyone, "lord_lend_ransom_reject",
[], "What are you playing at, {playername}? We both want {s1} freed, do we not?","lord_pretalk",[
    (str_store_troop_name, s1, "$lord_selected"),
  # (call_script, "script_change_troop_intrigue_impatience", "$g_talk_troop", 5),
]],

 #Marriage proposal
[anyone|plyr,"lord_talk_ask_something_2",[
(check_quest_active, "qst_formal_marriage_proposal"),
(neg|check_quest_failed, "qst_formal_marriage_proposal"),
(neg|check_quest_succeeded, "qst_formal_marriage_proposal"),

 (neg|troop_slot_ge, "trp_player", slot_troop_spouse, active_npcs_begin),

(quest_slot_eq, "qst_formal_marriage_proposal", slot_quest_target_troop, "$g_talk_troop"),
(quest_get_slot, ":bride", "qst_formal_marriage_proposal", slot_quest_giver_troop),

(str_store_troop_name, s10, ":bride"),
(call_script, "script_troop_get_family_relation_to_troop", ":bride", "$g_talk_troop"),

(call_script, "script_troop_get_relation_with_troop", "trp_player", ":bride"),

(try_begin),
   (gt, reg0, 20),
   (str_store_string, s19, "str_i_wish_to_marry_your_s11_s10_i_ask_for_your_blessing"),
(else_try),
   (str_store_string, s19, "str_i_wish_to_marry_your_s11_s10_i_ask_for_your_help"),
(try_end),

],
 "{s19}", "lord_marriage_permission",
[]],

##diplomacy start+
#Proposal to exchange fiefs
[anyone|plyr,"lord_talk_ask_something_2",
   [(le,"$talk_context", tc_party_encounter),
    #(troop_slot_eq, "$g_talk_troop", slot_troop_is_prisoner, 0),
    (neg|troop_slot_ge, "$g_talk_troop", slot_troop_prisoner_of_party, 0),
    (eq, "$players_kingdom", "$g_talk_troop_faction"),
    (this_or_next|eq, "$player_has_homage", 1),
    (faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "trp_player"),
    (str_store_string, s19, "str_dplmc_fief_exchange_ask_interest"),
    ],
     "{s19}", "dplmc_lord_ask_exchange_fief_1",
    [],
],

#Refusal
#TODO: Customize based on lord personality, and give a separate version depending
#on the lord/vassal relationship of the player and the lord
[anyone, "dplmc_lord_ask_exchange_fief_1",
 [(lt, "$g_talk_troop_effective_relation", 0),
  (str_store_string, s19, "str_dplmc_fief_exchange_not_interested"),
  ],
 "{s19}", "lord_pretalk", [],
 ],

#NPC king to vassal player
[anyone, "dplmc_lord_ask_exchange_fief_1",
   [#(faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "$g_talk_troop"),
  	 (call_script, "script_dplmc_get_troop_standing_in_faction", "$g_talk_troop", "$g_talk_troop_faction"),
	 (ge, reg0, DPLMC_FACTION_STANDING_LEADER_SPOUSE),
    (str_store_string, s19, "str_dplmc_fief_exchange_listen"),],
   "{s19}", "dplmc_lord_exchange_fief_select_1",
   [],
],

#NPC vassal to player king
[anyone, "dplmc_lord_ask_exchange_fief_1",
   [(faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "trp_player"),
    (str_store_string, s19, "str_dplmc_fief_exchange_listen_player_approval"),],
    "{s19}", "dplmc_lord_exchange_fief_select_1",
    [],
],

#NPC vassal to player fellow vassal
[anyone, "dplmc_lord_ask_exchange_fief_1",
   [#(eq, "$g_talk_troop_faction", "$players_kingdom"),
    #load name of king
    (faction_get_slot, ":faction_leader","$g_talk_troop_faction",slot_faction_leader),
    (str_store_troop_name, s10, ":faction_leader"),
    (str_store_string, s19, "str_dplmc_fief_exchange_listen_s10_approval"),
   ],
   "{s19}", "dplmc_lord_exchange_fief_select_1",
   [],
],

#Choosing the NPC fief to ask for
[anyone|plyr|repeat_for_parties, "dplmc_lord_exchange_fief_select_1",
[
(store_repeat_object, ":center_no"),
(is_between, ":center_no", centers_begin, centers_end),
(neg|party_slot_eq, ":center_no", slot_village_infested_by_bandits, "trp_peasant_woman"),
(party_slot_eq, ":center_no", slot_town_lord, "$g_talk_troop"),
(str_store_party_name, s1, ":center_no"),

],"{s1}", "dplmc_lord_exchange_fief_select_2",
[
(store_repeat_object, "$fief_selected"),
]],

[anyone|plyr, "dplmc_lord_exchange_fief_select_1",
[
],"Never mind.", "lord_pretalk",
[]],

#Now the NPC has to be offered a fief in exchange
[anyone, "dplmc_lord_exchange_fief_select_2", [
   (str_store_string, s19, "str_dplmc_fief_exchange_listen_2"),
    ],
   "{s19}", "dplmc_lord_exchange_fief_select_2",
   [],
],

#Choosing the NPC fief to offer
[anyone|plyr|repeat_for_parties, "dplmc_lord_exchange_fief_select_2",
[
(store_repeat_object, ":center_no"),
(is_between, ":center_no", centers_begin, centers_end),
(neg|party_slot_eq, ":center_no", slot_village_infested_by_bandits, "trp_peasant_woman"),
(party_slot_eq, ":center_no", slot_town_lord, "trp_player"),
(str_store_party_name, s1, ":center_no"),

],"{s1}", "dplmc_lord_exchange_fief_select_3",
[
(store_repeat_object, "$diplomacy_var"),
]],

[anyone|plyr, "dplmc_lord_exchange_fief_select_2",
[
],"Never mind.", "lord_pretalk",
[]],

#NPC considers offer.  Acceptance:
[anyone, "dplmc_lord_exchange_fief_select_3", [
    (call_script, "script_dplmc_evaluate_fief_exchange", "$g_talk_troop","$fief_selected","trp_player","$diplomacy_var"),
    #Result stored in reg0, reason string stored in s14
    (ge, reg0, 0),
    (assign, reg3, reg0),
     ],
   "{s14}", "dplmc_lord_exchange_fief_confirm",
   [],
],

#NPC considers offer.  Refusal:
[anyone, "dplmc_lord_exchange_fief_select_3", [
    #Call this again to make sure s14 and reg0 have the right values,
    #but don't actually use reg0 for anything (if it is non-negative, that means
    #script_dplmc_evaluate_fief_exchange is bugged and producing inconsistent results)
    (call_script, "script_dplmc_evaluate_fief_exchange", "$g_talk_troop","$fief_selected","trp_player","$diplomacy_var"),
     ],
   "{s14}", "lord_pretalk",
   [],
],

#Player confirms fief exchange.
[anyone|plyr,"dplmc_lord_exchange_fief_confirm", [
    #Call this again to make sure s14 and reg0 have the right values
    (call_script, "script_dplmc_evaluate_fief_exchange", "$g_talk_troop","$fief_selected","trp_player","$diplomacy_var"),
    #Result stored in reg0, reason string stored in s14
    (ge, reg0, 0),
    (assign, reg3, reg0),
    #Make sure the player can afford the cost if it's above zero
    (store_troop_gold, ":gold", "trp_player"),
    (ge, ":gold", reg3),
    #Set string appropriately
    (try_begin),
       (ge, reg3, 1),
       (str_store_string, s14, "str_dplmc_fief_exchange_confirm_reg3_denars"),
    (else_try),
       (str_store_string, s14, "str_dplmc_fief_exchange_confirm"),
    (try_end),
    ],
 "{s14}", "lord_pretalk",
 [#Consequence block
(assign, ":push_g_move_heroes", "$g_move_heroes"),#revert this at the end of the script
(assign, "$g_move_heroes", 1),
 (try_begin),
 (assign, ":from_lord_fief", "$fief_selected"), #fief to give to player
 (assign, ":from_player_fief", "$diplomacy_var"), #fief to give to lord
  #Call this again to make sure s14 and reg0 have the right values
  (call_script, "script_dplmc_evaluate_fief_exchange", "$g_talk_troop",":from_lord_fief","trp_player",":from_player_fief"),
  #Result stored in reg0, reason string stored in s14
  #Remove gold
  (try_begin),
     (assign, ":gold_cost", reg0),
     (ge, ":gold_cost", 1),
     (troop_remove_gold, "trp_player", ":gold_cost"),
     #add gold to lord
     (call_script, "script_dplmc_distribute_gold_to_lord_and_holdings", ":gold_cost", "$g_talk_troop"),
  (try_end),
  #Exchange fiefs
  #(call_script, "script_give_center_to_lord", "$diplomacy_var", "$g_talk_troop", 0),
  #(call_script, "script_give_center_to_lord", "$fief_selected", "trp_player", 0),
  #Don't use those scripts, as they have some unwanted side-effects.

#is the lord's old fief walled (i.e. can it potentially have a garrison)
(assign, ":from_lord_fief_walled", 0),
 (try_begin),
    (is_between, ":from_lord_fief", walled_centers_begin, walled_centers_end),
   (assign, ":from_lord_fief_walled", 1),
  (try_end),
 #is the player's old fief walled (i.e. can it potentially have a garrison)
 (assign, ":from_player_fief_walled", 0),
 (try_begin),
    (is_between, ":from_player_fief", walled_centers_begin, walled_centers_end),
   (assign, ":from_player_fief_walled", 1),
  (try_end),

 #To avoid exploitative use of this, the lords take their garrisons and prisoners with them
 (party_clear, "p_temp_party"),#contains lord's old center's garrison and prisoners
 (party_clear, "p_temp_party_2"),#contains player's old center's garrison and prisoners

(try_begin),
   (eq, ":from_lord_fief_walled", 1),
   (call_script, "script_party_add_party", "p_temp_party", ":from_lord_fief"),
   (party_clear, ":from_lord_fief"),
(try_end),

(try_begin),
   (eq, ":from_player_fief_walled", 1),
   (call_script, "script_party_add_party", "p_temp_party_2", ":from_player_fief"),
   (party_clear, ":from_player_fief"),
(try_end),

  #Remove player fief and assign it to the lord
  (assign, ":give_fief", ":from_player_fief"),
  (assign, ":to_lord", "$g_talk_troop"),
  #Reset fief properties
  (party_set_slot, ":give_fief", dplmc_slot_center_taxation, 0),
  (try_begin),
     (party_slot_eq, ":give_fief", slot_village_infested_by_bandits, "trp_peasant_woman"),
     (party_set_slot, ":give_fief", slot_village_infested_by_bandits, 0),
  (try_end),
  (try_begin),
      #Reset banner if applicable
      (is_between, ":give_fief", walled_centers_begin, walled_centers_end),
      (troop_get_slot, ":cur_banner", ":to_lord", slot_troop_banner_scene_prop),
      (gt, ":cur_banner", 0),
      (val_sub, ":cur_banner", banner_scene_props_begin),
      (val_add, ":cur_banner", banner_map_icons_begin),
      (party_set_banner_icon, ":give_fief", ":cur_banner"),
  (try_end),
  #transfer to lord
  (party_set_slot, ":give_fief", slot_town_lord, ":to_lord"),
  (call_script, "script_update_center_notes", ":give_fief"),

  #Now remove lord fief and assign it to the player
  (assign, ":give_fief", ":from_lord_fief"),
  (assign, ":to_lord", "trp_player"),
  #Reset fief properties
  (party_set_slot, ":give_fief", dplmc_slot_center_taxation, 0),
  (try_begin),
     (party_slot_eq, ":give_fief", slot_village_infested_by_bandits, "trp_peasant_woman"),
     (party_set_slot, ":give_fief", slot_village_infested_by_bandits, 0),
  (try_end),
  (try_begin),
      #Reset banner if applicable
      (is_between, ":give_fief", walled_centers_begin, walled_centers_end),
      (troop_get_slot, ":cur_banner", ":to_lord", slot_troop_banner_scene_prop),
      (gt, ":cur_banner", 0),
      (val_sub, ":cur_banner", banner_scene_props_begin),
      (val_add, ":cur_banner", banner_map_icons_begin),
      (party_set_banner_icon, ":give_fief", ":cur_banner"),
  (try_end),
  #transfer to lord
  (party_set_slot, ":give_fief", slot_town_lord, ":to_lord"),
  (call_script, "script_update_center_notes", ":give_fief"),

  #Player's troops transfer to new fief if possible
 #and lord's troops transfer to new fief if possible
  (try_begin),
   (eq, ":from_player_fief_walled", 1),
   (eq, ":from_lord_fief_walled", 1),
   (call_script, "script_party_add_party", ":from_lord_fief", "p_temp_party_2"),
   (call_script, "script_party_add_party", ":from_player_fief", "p_temp_party"),
  (else_try),
   (eq, ":from_player_fief_walled", 1),
   (neq, ":from_lord_fief_walled", 1),
   (call_script, "script_party_add_party", ":from_player_fief", "p_temp_party_2"),
   (call_script, "script_party_add_party", ":from_player_fief", "p_temp_party"),
  (else_try),
   #This exchange shouldn't happen, but handle it anyway.
   (neq, ":from_player_fief_walled", 1),
   (eq, ":from_lord_fief_walled", 1),
   (call_script, "script_party_add_party", ":from_lord_fief", "p_temp_party_2"),
   (call_script, "script_party_add_party", ":from_lord_fief", "p_temp_party"),
  (try_end),

  #Lord's troops transfer to new fief if possible

  #Final tasks
  (call_script, "script_update_troop_notes", "$g_talk_troop"),
  (call_script, "script_update_troop_notes", "trp_player"),
  (party_clear, "p_temp_party"),
  (party_clear, "p_temp_party_2"),
 #Display mesage
(str_store_troop_name, s1, "trp_player"),
(str_store_party_name, s2, "$diplomacy_var"),
(str_store_troop_name, s3, "$g_talk_troop"),
(str_store_party_name, s4, "$fief_selected"),
(display_log_message, "@{s1} exchanged {s2} to {s3} for {s4}."),
 (else_try),
    (display_message, "str_ERROR_string"),
 (try_end),
(assign, "$g_move_heroes", ":push_g_move_heroes"),#revert this at the end of the script
 ],
],

#Player cancels fief exchange.
[anyone|plyr, "dplmc_lord_exchange_fief_confirm",
[
],"Actually, forget about this for now.", "lord_pretalk",
[]],

##diplomacy end+

#no permission
[anyone,"lord_marriage_permission", [
(neg|troop_slot_eq, "$g_talk_troop", slot_lord_granted_courtship_permission, 1),
],
"Great heaven, man -- if I haven't given you permission to see her, do you think I'm going to give you permission to marry her?", "lord_pretalk",[
(call_script, "script_fail_quest", "qst_formal_marriage_proposal"),
(call_script, "script_end_quest", "qst_formal_marriage_proposal"),
]],

#unwilling bride -- failed due to lord personality
[anyone,"lord_marriage_permission", [
(troop_slot_eq, "$g_talk_troop", slot_lord_granted_courtship_permission, 1),
(quest_get_slot, ":bride", "qst_formal_marriage_proposal", slot_quest_giver_troop),
(call_script, "script_troop_get_relation_with_troop", "trp_player", ":bride"),
(lt, reg0, 20),
(neg|troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_debauched),
(neg|troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_selfrighteous),
(neg|troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_quarrelsome),

(call_script, "script_troop_get_family_relation_to_troop", ":bride", "$g_talk_troop"),
],
"It is not my way to push my {s11} to marry against her will or her better judgment", "lord_pretalk",[
(call_script, "script_fail_quest", "qst_formal_marriage_proposal"),
(call_script, "script_end_quest", "qst_formal_marriage_proposal"),

]],


#unwilling bride -- failed due to competitor
[anyone,"lord_marriage_permission", [
(troop_slot_eq, "$g_talk_troop", slot_lord_granted_courtship_permission, 1),
(quest_get_slot, ":bride", "qst_formal_marriage_proposal", slot_quest_giver_troop),
(call_script, "script_troop_get_relation_with_troop", "trp_player", ":bride"),
(lt, reg0, 20),
(assign, ":highest_competitor_score", "$g_talk_troop_relation"),
(try_for_range, ":competitor", lords_begin, lords_end),
   (this_or_next|troop_slot_eq, ":competitor", slot_troop_love_interest_1, ":bride"),
   (this_or_next|troop_slot_eq, ":competitor", slot_troop_love_interest_2, ":bride"),
      (troop_slot_eq, ":competitor", slot_troop_love_interest_3, ":bride"),
   (call_script, "script_troop_get_relation_with_troop", "$g_talk_troop", ":competitor"),
   (gt, reg0, ":highest_competitor_score"),
   (assign, ":highest_competitor_score", reg0),

   (str_store_troop_name, s12, ":competitor"),
(try_end),
(gt, ":highest_competitor_score", "$g_talk_troop_relation"),
(call_script, "script_troop_get_family_relation_to_troop",  ":bride", "$g_talk_troop"),

],
"Sorry, lad -- I'm not going to make my {s11} marry you, when I'd rather see her married to {s12}", "lord_pretalk",[
(call_script, "script_fail_quest", "qst_formal_marriage_proposal"),
(call_script, "script_end_quest", "qst_formal_marriage_proposal"),
]],


#Permission granted
[anyone,"lord_marriage_permission", [
(quest_get_slot, ":bride", "qst_formal_marriage_proposal", slot_quest_giver_troop),
(str_store_troop_name, s11, ":bride"),
],
"Splendid news, my young man -- I shall be proud to have you in our family. Now, let us talk the terms of the marriage. As per our custom, the two of us must make sure that {s11} has sufficient finances to support herself, in the event of any unforeseen circumstances..", "lord_marriage_permission_endowment",[
 (troop_get_slot, ":player_renown", "trp_player", slot_troop_renown),
 (troop_get_slot, ":guardian_renown", "$g_talk_troop", slot_troop_renown),

(store_mul, "$marriage_dowry", ":player_renown", 20),
(val_min, "$marriage_dowry", 20000),

(store_mul, "$marriage_dower", ":guardian_renown", 20),
(val_min, "$marriage_dower", 20000),
]],


[anyone,"lord_marriage_permission_endowment", [
(assign, reg3, "$marriage_dower"),
(assign, reg4, "$marriage_dowry"),
],
"I would say that, taking into consideration the prestige of our two houses, that you can provide a dower of {reg3} denars, while I will supply a dowry of {reg4} denars. This shall be her ladyship's property, as a security, lest for any reason you are unable to provide for her. What say you to that?", "lord_marriage_permission_endowment_answer",[
]],

[anyone|plyr,"lord_marriage_permission_endowment_answer", [
(store_troop_gold, ":gold", "trp_player"),
(ge, ":gold", "$marriage_dower"),
],
"Very well -- so let it be.", "lord_marriage_permission_engagement_date",[
]],

[anyone|plyr,"lord_marriage_permission_endowment_answer", [],
"I cannot afford that right now.", "lord_marriage_permission_endowment_answer_delay",[
]],

[anyone|plyr,"lord_marriage_permission_endowment_answer", [
(eq, 1, 0),
],
"That is too much to pay.", "lord_marriage_permission_endowment_answer_no",[
]],

[anyone,"lord_marriage_permission_endowment_answer_no", [],
"Well. I cannot in all decency allow my daughter to marry without some security, can I? Let me know if you change your mind.", "close_window",[
(assign, "$g_leave_encounter", 1),
]],


[anyone,"lord_marriage_permission_engagement_date", [
(quest_get_slot, ":bride", "qst_formal_marriage_proposal", slot_quest_giver_troop),
(call_script, "script_get_kingdom_lady_social_determinants", ":bride"),
(assign, ":venue", reg1),
(is_between, ":venue", walled_centers_begin, walled_centers_end),
(party_slot_eq, ":venue", slot_village_state, svs_normal),
(str_store_party_name, s24, ":venue"),
],
"Splendid! You two may now consider yourselves offically betrothed. Very well -- I shall plan to hold a great feast in {s24}, as soon as circumstances permit. We will be sure to notify you when the day comes.", "close_window",
[
(quest_get_slot, ":bride", "qst_formal_marriage_proposal", slot_quest_giver_troop),
(troop_set_slot, "trp_player", slot_troop_betrothed, ":bride"),
(troop_set_slot, ":bride", slot_troop_betrothed, "trp_player"),

(call_script, "script_end_quest", "qst_formal_marriage_proposal"),


(troop_remove_gold, "trp_player", "$marriage_dower"),
##diplomacy start+ give this gold to the lady.  this will be relevant if she ever becomes a lord.
#(troop_add_gold, ":bride", "$marriage_dower"),
##diplomacy end+
(call_script, "script_get_kingdom_lady_social_determinants", ":bride"),
(assign, ":venue", reg1),

(str_store_troop_name, s3, ":bride"),
(str_store_troop_name, s4, "$g_talk_troop"),
(str_store_party_name, s5, ":venue"),

(setup_quest_text, "qst_wed_betrothed"),
(str_store_string, s2, "str_you_plan_to_marry_s3_at_a_feast_hosted_by_s4_in_s5_you_should_be_notifed_of_the_feast_as_soon_as_it_is_held"),

(call_script, "script_start_quest", "qst_wed_betrothed", "$g_talk_troop"),

(quest_set_slot, "qst_wed_betrothed", slot_quest_expiration_days, 365),
(quest_set_slot, "qst_wed_betrothed", slot_quest_giver_troop, "$g_talk_troop"),
(quest_set_slot, "qst_wed_betrothed", slot_quest_target_troop, ":bride"),

(try_begin),
   (eq,"$talk_context",tc_party_encounter),
   (assign, "$g_leave_encounter", 1),
(try_end),

]],


[anyone,"lord_marriage_permission_engagement_date", [],
"Unfortunately, there is one final complication -- there is no safe place to hold the wedding. Let us hold off on finalizing this, for the time being.", "close_window",
[]],

[anyone,"lord_marriage_permission_endowment_answer_delay", [],
"No matter -- take the time you need to raise the money. I want her ladyship to be well looked after.", "lord_pretalk",[
]],

[anyone,"lord_marriage_permission_endowment_answer_delay", [],
"That is a shame, but I would be remiss in my duty if I allowed her ladyship to face an uncertain future.", "lord_pretalk",[
(call_script, "script_fail_quest", "qst_formal_marriage_proposal"),
(call_script, "script_end_quest", "qst_formal_marriage_proposal"),
]],



#courtship
[anyone|plyr,"lord_talk_ask_something_2",[
(neg|troop_slot_eq, "$g_talk_troop", slot_lord_granted_courtship_permission, 1),

(assign, "$marriage_candidate", 0),
(try_for_range, ":lady", kingdom_ladies_begin, kingdom_ladies_end),
   (eq, "$marriage_candidate", 0),
   (troop_slot_ge, ":lady", slot_troop_courtship_state, 2),
   (neg|troop_slot_eq, ":lady", slot_troop_courtship_state, 4),
   (neg|troop_slot_ge, ":lady", slot_troop_spouse, 0),
   (call_script, "script_get_kingdom_lady_social_determinants", ":lady"),
   (eq, reg0, "$g_talk_troop"),

   (assign, "$marriage_candidate", ":lady"),

   (str_clear, s14),
   (call_script, "script_troop_get_family_relation_to_troop", ":lady", "$g_talk_troop"),
   (gt, reg0, 0),
   (str_store_string, s14, "str_your_s11_"),
(try_end),
(gt, "$marriage_candidate", 0),
(str_store_troop_name, s12, "$marriage_candidate"),

(str_clear, s10),
(try_begin),
   (troop_slot_eq, "$g_talk_troop", slot_lord_granted_courtship_permission, -1),
   (str_store_string, s10, "str_i_ask_again_may"),
(else_try),
   (str_store_string, s10, "str_may"),
(try_end),
],
 "{s10} I have the honor of visiting with {s14}{s12}?", "lord_courtship_permission",
[]],

##diplomacy begin
[anyone,"lord_courtship_permission", [
(call_script, "script_dplmc_is_affiliated_family_member", "$g_talk_troop"),
(eq, reg0, 1),

(try_begin),
   (troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_goodnatured),
   (str_store_string, s12, "str_very_well_as_far_as_im_concerned_i_suppose_she_can_see_most_anyone_she_likes__within_reason_of_course"),
(else_try),
   (this_or_next|troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_debauched),
      (troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_quarrelsome),
   (str_store_string, s12, "str_very_well_an_alliance_with_you_could_be_valuable_go_chat_with_her_and_see_if_you_can_get_her_to_take_a_fancy_to_you_if_she_doesnt_and_if_we_still_want_to_conclude_this_business_then_i_can_make_her_see_reason"),
(else_try),
   (str_store_string, s12, "str_you_have_my_blessing_to_pay_suit_to_her__so_long_as_your_intentions_are_honorable_of_course_depending_on_how_things_proceed_between_you_two_we_may_have_more_to_discuss_at_a_later_date"),
(try_end),
],
 "{s12}", "lord_pretalk",
[
(troop_set_slot, "$g_talk_troop", slot_lord_granted_courtship_permission, 1),
]],
##diplomacy end


[anyone,"lord_courtship_permission", [
  (troop_slot_ge, "$marriage_candidate", slot_troop_courtship_state, 2),
  (neg|troop_slot_eq, "$marriage_candidate", slot_troop_courtship_state, 4),
  (this_or_next|troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_debauched),
  (troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_quarrelsome),

(call_script, "script_troop_get_relation_with_troop", "$marriage_candidate", "trp_player"),
(gt, reg0, 0),
   ],
 "From what I hear, you have already spoken to her -- without my permission. Let me tell you this: I am her lord and guardian, and I have plans for her. I will not be mocked behind my back as a man who cannot control the women of his household. I would ask you not to discuss this matter with me again.", "lord_pretalk",
[
(troop_set_slot, "$g_talk_troop", slot_lord_granted_courtship_permission, -1),
(call_script, "script_troop_change_relation_with_troop", "$g_talk_troop", "trp_player", -1),
]],


[anyone,"lord_courtship_permission", [
(call_script, "script_npc_decision_checklist_male_guardian_assess_suitor", "$g_talk_troop", "trp_player"),
(lt, reg0, 1),
(str_store_string, s14, reg1),
##diplomacy start+
#xxx TODO: replace "cross swords" with cultural alternative
##diplomacy end+
],
 "{s14}", "lord_pretalk",
[
(troop_set_slot, "$g_talk_troop", slot_lord_granted_courtship_permission, -1),
]],


[anyone,"lord_courtship_permission", [
(try_begin),
   (troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_goodnatured),
   (str_store_string, s12, "str_very_well_as_far_as_im_concerned_i_suppose_she_can_see_most_anyone_she_likes__within_reason_of_course"),
(else_try),
   (this_or_next|troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_debauched),
      (troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_quarrelsome),
   (str_store_string, s12, "str_very_well_an_alliance_with_you_could_be_valuable_go_chat_with_her_and_see_if_you_can_get_her_to_take_a_fancy_to_you_if_she_doesnt_and_if_we_still_want_to_conclude_this_business_then_i_can_make_her_see_reason"),
(else_try),
   (str_store_string, s12, "str_you_have_my_blessing_to_pay_suit_to_her__so_long_as_your_intentions_are_honorable_of_course_depending_on_how_things_proceed_between_you_two_we_may_have_more_to_discuss_at_a_later_date"),
(try_end),
],
 "{s12}", "lord_pretalk",
[
(troop_set_slot, "$g_talk_troop", slot_lord_granted_courtship_permission, 1),
]],

#Ask for marriage, following courtship, both with or against lady's wishes

[anyone|plyr,"lord_talk_ask_something_2", [
(neg|troop_slot_eq, "$g_talk_troop", slot_lord_granted_courtship_permission, 1),
(neg|troop_slot_ge, "trp_player", slot_troop_spouse, active_npcs_begin),
#diplomacy start+
##OLD:
#(troop_get_type, ":is_female", "$g_talk_troop"),
#(neq, ":is_female", 1),
##NEW:
#Lords can be male or female, so don't disable for the above.
#Avoid saying this to people you're engaged to (with the possible benign
#side-effect of avoiding giving this dialog for promoted heroes with uninitialized
#family slots.
(neg|troop_slot_eq, "$g_talk_troop", slot_troop_betrothed, "trp_player"),
#If the player is engaged already, the other person must either be gone or in another kingdom
(troop_get_slot, reg0, "trp_player", slot_troop_betrothed),
(neq, reg0, "$g_talk_troop"),
(try_begin),
	(ge, reg0, 1),
	(neg|troop_slot_ge, reg0, slot_troop_occupation, slto_retirement),
	(store_faction_of_troop, reg0, reg0),
	(this_or_next|eq, reg0, "$players_kingdom"),
	(this_or_next|eq, reg0, "fac_player_supporters_faction"),
		(eq, reg0, "$g_talk_troop_faction"),
	(assign, reg0, 1),
(else_try),
	(assign, reg0, -1),
(try_end),
(lt, reg0, 1),

#Avoid saying this to relatives (distant ones are allowed for medieval settings) or people you are already married to.
(call_script, "script_dplmc_troop_get_family_relation_to_troop", "$g_talk_troop", "trp_player"),
(lt, reg0, 2),

#Just ensuring that reg65 is initialized (no reason to think it isn't,
#but this what I generally do when the dialog I'm relacing uses "troop_get_type"
#instead of just using whatever's already in reg65).
(call_script, "script_dplmc_store_troop_is_female_reg", "$g_talk_troop", 65), #SB : store into reg65
# (assign, reg65, reg0),
##diplomacy end+
],
"What would it take to cement a lasting alliance with your house?", "lord_talk_ask_marriage_1",[]],





[anyone|plyr,"lord_talk_ask_something_2", [],
"Never mind.", "lord_pretalk",[]],

##diplomacy start+
#People who dislike the character might not answer location requests.
[anyone,"lord_talk_ask_location",
	[
	(lt, "$g_talk_troop_effective_relation", 0),
	#This can be called from multiple dialog branches, so you need to return
	#to the right place.
	(neg|troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_lady),
	(this_or_next|is_between, "$g_talk_troop", active_npcs_begin, active_npcs_end),
		(troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_hero),
	(assign, ":min_relation", -5),#default refuse at -6 or less
	(try_begin),
		(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_quarrelsome),
		(assign, ":min_relation", 0),#refuse at -1 or less
	(else_try),
		(eq, "$g_talk_troop_faction", "$players_kingdom"),
		(assign, ":min_relation", -10),#refuse at -11 or less
	(try_end),
	(try_begin),
		(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_goodnatured),
		(val_sub, ":min_relation", 5),
	(try_end),
	(lt, "$g_talk_troop_effective_relation", ":min_relation"),
	#used as a rule-of-thumb for "will work with you even if they dislike you"
	#(includes affiliate check among other things)
	(call_script, "script_dplmc_player_can_give_troops_to_troop", "$g_talk_troop"),
	(lt, reg0, 1),
	],
	#TODO: Differentiate the responses for different personalities
	"Then you will have to ask someone else.", "lord_pretalk", []],

[anyone,"lord_talk_ask_location",
	[
	(lt, "$g_talk_troop_effective_relation", 0),
	#version for ladies
	(this_or_next|is_between, "$g_talk_troop", kingdom_ladies_begin, kingdom_ladies_end),
		(troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_lady),
	(assign, ":min_relation", -4),#default refuse at -5 or less
	(try_begin),
		(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_quarrelsome),
		(assign, ":min_relation", 0),#refuse at -1 or less
	(else_try),
		(eq, "$g_talk_troop_faction", "$players_kingdom"),
		(assign, ":min_relation", -9),#refuse at -10 or less
	(try_end),
	(try_begin),
		(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_goodnatured),
		(val_sub, ":min_relation", 5),
	(try_end),
	(lt, "$g_talk_troop_effective_relation", ":min_relation"),
	#used as a rule-of-thumb for "will work with you even if they dislike you"
	(call_script, "script_dplmc_player_can_give_troops_to_troop", "$g_talk_troop"),
	(lt, reg0, 1),
	],"I am afraid you will have to ask someone else.", "lady_pretalk", []],

##diplomacy end+
[anyone,"lord_talk_ask_location", [],
"Very well, I may or may not have an answer for you. About whom do you wish to hear?", "lord_talk_ask_location_2",[]],

[anyone|plyr|repeat_for_troops,"lord_talk_ask_location_2", [(store_repeat_object, ":troop_no"),
                                                           (neq, "$g_talk_troop", ":troop_no"),
                                                           (is_between, ":troop_no", active_npcs_begin, kingdom_ladies_end),
                                            (neq, ":troop_no", "trp_player"),
                                                           (this_or_next|troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_hero),
                                             (troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_lady),
                                                           (store_troop_faction, ":faction_no", ":troop_no"),
                                                           (eq, "$g_encountered_party_faction", ":faction_no"),
                                                           (str_store_troop_name, s1, ":troop_no"),
                                            (try_begin),
                                             (faction_slot_eq, "$players_kingdom", slot_faction_marshall, ":troop_no"),
                                              (str_store_string, s1, "@Our marshal, {s1}"),
											##diplomacy start+ Add relation descriptions
											(else_try),
												(faction_slot_eq, "$players_kingdom", slot_faction_leader, ":troop_no"),
												(str_store_string, s1, "@Our liege, {s1}"),
											(else_try),
												(neg|troop_slot_eq, "$g_talk_troop", slot_troop_met, 0),
												(neg|troop_slot_eq, ":troop_no", slot_troop_met, 0),
												(call_script, "script_dplmc_cap_troop_describes_troop_to_troop_s1", 1, "trp_player", ":troop_no", "$g_talk_troop"),
											##diplomacy end+
                                            (try_end),

                                            ],
"{s1}", "lord_talk_ask_location_3",[(store_repeat_object, "$hero_requested_to_learn_location")]],

[anyone|plyr,"lord_talk_ask_location_2", [
  ##diplomacy start+
  (neg|troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_hero),#support promoted ladies
  (this_or_next|troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_lady),
  ##diplomacy end+
  (is_between, "$g_talk_troop", kingdom_ladies_begin, kingdom_ladies_end),
], "Never mind.", "lady_pretalk",[]],

[anyone|plyr,"lord_talk_ask_location_2", [
  ##diplomacy start+
  (neg|troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_lady),
  #support promoted ladies
  (this_or_next|troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_hero),
  ##diplomacy end+
  (neg|is_between, "$g_talk_troop", kingdom_ladies_begin, kingdom_ladies_end),
], "Never mind.", "lord_pretalk",[]],

[anyone,"lord_talk_ask_location_3",
[
  (is_between, "$g_talk_troop", kingdom_ladies_begin, kingdom_ladies_end),
  (call_script, "script_update_troop_location_notes", "$hero_requested_to_learn_location", 1),
  (call_script, "script_get_information_about_troops_position", "$hero_requested_to_learn_location", 0),
  ],
"{s1}", "lady_pretalk",[]],



[anyone,"lord_talk_ask_location_3",
[
  (call_script, "script_update_troop_location_notes", "$hero_requested_to_learn_location", 1),
  (call_script, "script_get_information_about_troops_position", "$hero_requested_to_learn_location", 0),
  ],
"{s1}", "lord_pretalk",[]],

[anyone,"lord_talk_ask_about_war", [],
"{s12}", "lord_talk_ask_about_war_2",[
                                                                   (assign, ":num_enemies", 0),
                                                                   (try_for_range_backwards, ":cur_faction", kingdoms_begin, kingdoms_end),
                                                                     (faction_slot_eq, ":cur_faction", slot_faction_state, sfs_active),
                                                                     (store_relation, ":cur_relation", ":cur_faction", "$g_talk_troop_faction"),
                                                                     (lt, ":cur_relation", 0),
                                                                     (try_begin),
                                                                       (eq, ":num_enemies", 0),
                                                                       (str_store_faction_name_link, s12, ":cur_faction"),
                                                                     (else_try),
                                                                       (eq, ":num_enemies", 1),
                                                                       (str_store_faction_name_link, s11, ":cur_faction"),
                                                                       (str_store_string, s12, "@{s11} and {s12}"),
                                                                     (else_try),
                                                                       (str_store_faction_name_link, s11, ":cur_faction"),
                                                                       (str_store_string, s12, "@{!}{s11}, {s12}"),
                                                                     (try_end),
                                                                     (val_add, ":num_enemies", 1),
                                                                   (try_end),
                                                                   (try_begin),
                                                                     (eq, ":num_enemies", 0),
                                                                     (str_store_string, s12, "@We are not at war with anyone."),
                                                                   (else_try),
                                                                     (str_store_string, s12, "@We are at war with {s12}."),
                                                                   (try_end),
                                                                   ]],

[anyone|plyr|repeat_for_factions, "lord_talk_ask_about_war_2", [(store_repeat_object, ":faction_no"),
                                                               (is_between, ":faction_no", kingdoms_begin, kingdoms_end),
                                                               (faction_slot_eq, ":faction_no", slot_faction_state, sfs_active),
                                                                  (store_relation, ":cur_relation", ":faction_no", "$g_talk_troop_faction"),
                                                                  (lt, ":cur_relation", 0),
                                                                  (str_store_faction_name, s1, ":faction_no")],
"Tell me more about the war with {s1}.", "lord_talk_ask_about_war_details",[(store_repeat_object, "$faction_requested_to_learn_more_details_about_the_war_against")]],

[anyone|plyr,"lord_talk_ask_about_war_2", [], "That's all I wanted to know. Thank you.", "lord_pretalk",[]],

[anyone,"lord_talk_ask_about_war_details", [],
#   "We have {reg5?{reg5}:no} {reg3?armies:army} and they have {reg6?{reg6}:none}. Overall, {s9}.",
"{s9}.",
"lord_talk_ask_about_war_2",
[#(call_script, "script_faction_get_number_of_armies", "$g_encountered_party_faction"),
 #(assign, reg5, reg0),
 #(assign, reg3, 1),
 #(try_begin),
                             #  (eq, reg5, 1),
                             #  (assign, reg3, 0),
                             #(try_end),
                             #(call_script, "script_faction_get_number_of_armies", "$faction_requested_to_learn_more_details_about_the_war_against"),
                             #(assign, reg6, reg0),
                             #(assign, reg4, 1),
                             #(try_begin),
                             #  (eq, reg6, 1),
                             #  (assign, reg4, 0),
                             #(try_end),
                             #(store_div, ":our_str", reg5, 2),
                             #(store_div, ":enemy_str", reg6, 2),
                             #(store_sub, ":advantage", ":our_str", ":enemy_str"),
                             #(val_clamp, ":advantage", -4, 5),
                             #(val_add, ":advantage", 4),
                             #(store_add, ":adv_str", "str_war_report_minus_4", ":advantage"),
                             #(str_store_string, s9, ":adv_str"),

   (store_add, ":war_damage_slot", "$faction_requested_to_learn_more_details_about_the_war_against", slot_faction_war_damage_inflicted_on_factions_begin),
   (val_sub, ":war_damage_slot", kingdoms_begin),
    (faction_get_slot, ":war_damage_inflicted", "$g_talk_troop_faction", ":war_damage_slot"),

   (store_add, ":war_damage_slot", "$g_talk_troop_faction", slot_faction_war_damage_inflicted_on_factions_begin),
   (val_sub, ":war_damage_slot", kingdoms_begin),
    (faction_get_slot, ":war_damage_suffered", "$faction_requested_to_learn_more_details_about_the_war_against", ":war_damage_slot"),

   (val_max, ":war_damage_suffered", 1),

   (store_mul, ":war_damage_ratio", ":war_damage_inflicted", 100),
   (val_div, ":war_damage_ratio", ":war_damage_suffered"),

   (try_begin),
      (eq, "$cheat_mode", 1),
      (assign, reg3, ":war_damage_inflicted"),
      (assign, reg4, ":war_damage_suffered"),
      (assign, reg5, ":war_damage_ratio"),
      (display_message, "str_war_damage_inflicted_reg3_suffered_reg4_ratio_reg5"),
   (try_end),

   (str_store_string, s9, "str_error__did_not_calculate_war_progress_string_properly"),
   (try_begin),
      (lt, ":war_damage_inflicted", 5),
      (str_store_string, s9, "str_the_war_has_barely_begun_so_and_it_is_too_early_to_say_who_is_winning_and_who_is_losing"),
   (else_try),
      (gt, ":war_damage_inflicted", 100),
      (gt, ":war_damage_ratio", 200),
      (str_store_string, s9, "str_we_have_been_hitting_them_very_hard_and_giving_them_little_chance_to_recover"),
   (else_try),
      (gt, ":war_damage_inflicted", 80),
      (gt, ":war_damage_ratio", 150),
      (str_store_string, s9, "str_the_fighting_has_been_hard_but_we_have_definitely_been_getting_the_better_of_them"),
   (else_try),
      (gt, ":war_damage_suffered", 100),
      (lt, ":war_damage_ratio", 50),
      (str_store_string, s9, "str_they_have_been_hitting_us_very_hard_and_causing_great_suffering"),
   (else_try),
      (gt, ":war_damage_suffered", 80),
      (lt, ":war_damage_ratio", 68),
      (str_store_string, s9, "str_the_fighting_has_been_hard_and_i_am_afraid_that_we_have_been_having_the_worst_of_it"),
   (else_try),
      (gt, ":war_damage_suffered", 50),
      (gt, ":war_damage_inflicted", 50),
      (gt, ":war_damage_ratio", 65),
      (str_store_string, s9, "str_both_sides_have_suffered_in_the_fighting"),
   (else_try),
      (gt, ":war_damage_ratio", 125),
      (str_store_string, s9, "str_no_clear_winner_has_yet_emerged_in_the_fighting_but_i_think_we_are_getting_the_better_of_them"),
   (else_try),
      (gt, ":war_damage_ratio", 80),
      (str_store_string, s9, "str_no_clear_winner_has_yet_emerged_in_the_fighting_but_i_fear_they_may_be_getting_the_better_of_us"),
   (else_try),
      (str_store_string, s9, "str_no_clear_winner_has_yet_emerged_in_the_fighting"),
   (try_end),

   (try_begin),
      (neg|faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "$g_talk_troop"),
      (call_script, "script_npc_decision_checklist_peace_or_war", "$g_talk_troop_faction", "$faction_requested_to_learn_more_details_about_the_war_against", -1),
      (str_store_string, s9, "str_s9_s14"),
     (try_end),
   ]],



[anyone,"lord_talk_ask_about_strategy", [
(faction_get_slot, ":ai_state", "$g_encountered_party_faction", slot_faction_ai_state),
(faction_get_slot, ":ai_object", "$g_encountered_party_faction", slot_faction_ai_object),



(faction_get_slot, ":ai_decider", "$g_encountered_party_faction", slot_faction_marshall),
(try_begin),
(eq, ":ai_decider", -1),
(faction_get_slot, ":ai_decider", "$g_encountered_party_faction", slot_faction_leader),
(try_end),

(call_script, "script_npc_decision_checklist_faction_ai_alt", ":ai_decider"),
(assign, ":planned_state", reg0),
(assign, ":planned_object", reg1),


(try_begin),
(gt, ":ai_object", -1),
 (str_store_party_name, s8, ":ai_object"),
(try_end),

(try_begin),
(eq, ":ai_state", sfai_default),
 (str_store_string, s7, "str_there_is_no_campaign_currently_in_progress"),
(else_try),
(eq, ":ai_state", sfai_gathering_army),
 (str_store_string, s7, "str_we_are_assembling_the_army"),
(else_try),
(eq, ":ai_state", sfai_attacking_center),
 (str_store_string, s7, "str_we_aim_to_take_the_fortress_of_s8"),
(else_try),
(eq, ":ai_state", sfai_raiding_village),
 (str_store_string, s7, "str_we_are_on_a_raid_and_are_now_targeting_s8"),
(else_try),
(eq, ":ai_state", sfai_attacking_enemy_army),
 (str_store_string, s7, "str_we_are_trying_to_seek_out_and_defeat_s8"),
(else_try),
(eq, ":ai_state", sfai_attacking_enemies_around_center),
 (str_store_string, s7, "str_we_are_riding_to_the_defense_of_s8"),
(else_try),
(eq, ":ai_state", sfai_feast),
 (str_store_string, s7, "str_we_are_gathering_for_a_feast_at_s8"),
(try_end),

#Additional information for gathering the army
(str_clear, s9),
(try_begin),
(eq, ":ai_state", sfai_gathering_army),
(faction_get_slot, ":faction_marshal", "$g_talk_troop_faction", slot_faction_marshall),
(gt, ":faction_marshal", -1),
(troop_get_slot, ":marshal_party", ":faction_marshal", slot_troop_leaded_party),
(party_is_active, ":marshal_party"),

(this_or_next|eq, "$g_talk_troop", ":faction_marshal"),
   (party_slot_eq, "$g_talk_troop_party", slot_party_ai_object, ":marshal_party"),

(party_get_slot, ":marshal_object", ":marshal_party", slot_party_ai_object),

 (try_begin),
   (eq, ":marshal_object", -1),
   (str_store_string, s9, "str_we_are_waiting_here_for_vassals"),
(else_try),
   (str_store_party_name, s11, ":marshal_object"),
   (str_store_string, s9, "str_we_are_travelling_to_s11_for_vassals"),
 (try_end),
(try_end),


(try_begin),
(this_or_next|neq, ":ai_state", ":planned_state"),
   (neq, ":ai_object", ":planned_object"),

(str_store_string, s14, "str__however_that_may_change_shortly_s14"),
(try_end),

],
"{s7} {s9} {s14}", "lord_strategy_follow_evaluation",
[]],

[anyone, "lord_strategy_follow_evaluation", [
(this_or_next|faction_slot_eq, "$g_talk_troop_faction", slot_faction_marshall, "$g_talk_troop"),
(this_or_next|faction_slot_eq, "$g_talk_troop_faction", slot_faction_ai_state, sfai_default),
   (faction_slot_eq, "$g_talk_troop_faction", slot_faction_ai_state, sfai_feast),
],
"Did you have any other questions?",
"lord_talk_ask_something_2",[
]],


[anyone, "lord_strategy_follow_evaluation", [
(faction_slot_eq, "$g_talk_troop_faction", slot_faction_ai_state, sfai_gathering_army),
(call_script, "script_npc_decision_checklist_faction_ai_alt", "$g_talk_troop"),
(assign, ":talk_troop_preferred_strategy", reg0),
(neq, ":talk_troop_preferred_strategy", sfai_gathering_army),

(store_current_hours, ":hours_at_current_state"),
(faction_get_slot, ":current_state_started", "$g_talk_troop_faction", slot_faction_ai_current_state_started),
(val_sub, ":hours_at_current_state", ":current_state_started"),
(ge, ":hours_at_current_state", 40),

(faction_get_slot, ":faction_marshal", "$g_talk_troop_faction", slot_faction_marshall),
(is_between, ":faction_marshal", active_npcs_begin, active_npcs_end),
(neq, ":faction_marshal", "$g_talk_troop"),
(str_store_troop_name, s4, ":faction_marshal"),
],
"Our leader {s4} is far too cautious. {reg4?She:He} should either use the army to attack the enemy, or let it go home.",
"lord_strategy_follow_up",[
(assign, "$g_talk_troop_disagrees_with_marshal", 1),

]],


[anyone, "lord_strategy_follow_evaluation", [
(faction_slot_eq, "$g_talk_troop_faction", slot_faction_ai_state, sfai_gathering_army),

(store_current_hours, ":hours_at_current_state"),
(faction_get_slot, ":current_state_started", "$g_talk_troop_faction", slot_faction_ai_current_state_started),
(val_sub, ":hours_at_current_state", ":current_state_started"),
(ge, ":hours_at_current_state", 40),

(faction_get_slot, ":faction_marshal", "$g_talk_troop_faction", slot_faction_marshall),
(is_between, ":faction_marshal", active_npcs_begin, active_npcs_end),
(neq, ":faction_marshal", "$g_talk_troop"),

(call_script, "script_troop_get_relation_with_troop", "$g_talk_troop", ":faction_marshal"),
(lt, reg0, 5),

(str_store_troop_name, s4, ":faction_marshal"),

],
"Our army sits, doing nothing. Apparently, too few vassals have answered the call to arms. Perhaps {s4} does not enjoy the confidence of the great lords of this realm.",
"lord_strategy_follow_up",[
(assign, "$g_talk_troop_disagrees_with_marshal", 1),

]],

#To Steve - Why we need this dialog? It already included in below lord_strategy_follow_evaluation dialogs
#[anyone, "lord_strategy_follow_evaluation",
#[
#  (this_or_next|faction_slot_eq, "$g_talk_troop_faction", slot_faction_ai_state, sfai_attacking_center),
#  (faction_slot_eq, "$g_talk_troop_faction", slot_faction_ai_state, sfai_raiding_village),
#
#  (faction_get_slot, ":cur_object", "$g_talk_troop_faction", slot_faction_ai_object),
#  (call_script, "script_npc_decision_checklist_evaluate_enemy_center_for_attack", "$g_talk_troop", ":cur_object", 1, 0),
#  (lt, reg0, 0),
#
#  (str_store_string, s9, reg1),
#  (str_store_party_name, s8, ":cur_object"),
#],
# "I disagree with the marshal's decision. I believe that {s8} {s9}",
# "lord_strategy_why_not",[
# ]],

#This dialog appears when lord disagrees with marshal about the selected faction ai (attack/defend/gather/other).
#To Steve - I took that dialog upper from below one. Lord should compare his faction ai choice with marshal's one before comparing preffered ai objects.
[anyone, "lord_strategy_follow_evaluation",
[
 (call_script, "script_npc_decision_checklist_faction_ai_alt", "$g_talk_troop"),
 (assign, ":talk_troop_preferred_strategy", reg0),

 (neg|faction_slot_eq, "$g_talk_troop_faction", slot_faction_ai_state, ":talk_troop_preferred_strategy"),

 (assign, ":continue", 1),
 (try_begin),
   (eq, ":talk_troop_preferred_strategy", sfai_raiding_village),
   (str_store_string, s4, "@go on the offensive now."),
 (else_try),
   (eq, ":talk_troop_preferred_strategy", sfai_attacking_center),
   (str_store_string, s4, "@go on the offensive now."),
 (else_try),
   (eq, ":talk_troop_preferred_strategy", sfai_attacking_enemies_around_center),
   (str_store_string, s4, "@act to defend our lands."),
 (else_try),
   (eq, ":talk_troop_preferred_strategy", sfai_gathering_army),
   (str_store_string, s4, "@take more time to gather the army."),
 (else_try),
   (assign, ":continue", 0),
 (try_end),

(eq, ":continue", 1),

(faction_get_slot, ":faction_marshal", "$g_talk_troop_faction", slot_faction_marshall),
(is_between, ":faction_marshal", active_npcs_begin, active_npcs_end),
(neq, ":faction_marshal", "$g_talk_troop"),

 (str_store_troop_name, s10, ":faction_marshal"),
 (assign, "$g_talk_troop_disagrees_with_marshal", 1),

],
"I disagree with this strategy. I would prefer to {s4}.",
"lord_strategy_follow_up", [
 (assign, "$g_talk_troop_disagrees_with_marshal", 1),

]],

#This dialog appears when lord disagrees with marshal about the city will be attacked.
[anyone, "lord_strategy_follow_evaluation",
[
 (this_or_next|faction_slot_eq, "$g_talk_troop_faction", slot_faction_ai_state, sfai_attacking_center),
 (faction_slot_eq, "$g_talk_troop_faction", slot_faction_ai_state, sfai_raiding_village),

 (call_script, "script_find_center_to_attack_alt", "$g_talk_troop", 1, 0),
 (assign, ":preferred_center", reg0),
(is_between, ":preferred_center", centers_begin, centers_end),

 (faction_get_slot, ":cur_object", "$g_talk_troop_faction", slot_faction_ai_object),
 (neq, ":cur_object", ":preferred_center"),

 #To Steve - if lord's preffered center is different from marshal's current one then this should be enough for lord to say I disagree with marshal isn't this better?
 #Because it is not easy for any lord to return minus score for a center, so if we do not do this, we will not be able to see lords which disagree with marshal.
 #Conclusion : I removed condition of (lt, reg0, 0),

 (faction_get_slot, ":faction_marshal", "$g_talk_troop_faction", slot_faction_marshall),
(is_between, ":faction_marshal", active_npcs_begin, active_npcs_end),
(neq, ":faction_marshal", "$g_talk_troop"),

 (call_script, "script_npc_decision_checklist_evaluate_enemy_center_for_attack", ":faction_marshal", ":preferred_center", 1, 0),
 #(lt, reg0, 0),

 (str_store_string, s9, reg1),
 (str_store_party_name, s8, ":preferred_center"),

 (faction_get_slot, ":faction_marshal", "$g_talk_troop_faction", slot_faction_marshall),
(is_between, ":faction_marshal", active_npcs_begin, active_npcs_end),
(neq, ":faction_marshal", "$g_talk_troop"),

 (str_store_troop_name, s10, ":faction_marshal"),

],
"I personally would prefer to attack {s8}, but our marshal {s10} believes that it {s9}",
"lord_strategy_follow_up",[
 (assign, "$g_talk_troop_disagrees_with_marshal", 1),

]],

#This dialog appears when lord disagrees with marshal about the city will be defended.
[anyone, "lord_strategy_follow_evaluation",
[
 (faction_slot_eq, "$g_talk_troop_faction", slot_faction_ai_state, sfai_attacking_enemies_around_center),

 (call_script, "script_find_center_to_defend", "$g_talk_troop"),
 (assign, ":preferred_center", reg0),
(is_between, ":preferred_center", centers_begin, centers_end),
 (faction_get_slot, ":cur_object", "$g_talk_troop_faction", slot_faction_ai_object),
 (neq, ":cur_object", ":preferred_center"),

 (faction_get_slot, ":faction_marshal", "$g_talk_troop_faction", slot_faction_marshall),
(is_between, ":faction_marshal", active_npcs_begin, active_npcs_end),
(neq, ":faction_marshal", "$g_talk_troop"),

 (str_store_party_name, s8, ":preferred_center"),
 (str_store_party_name, s9, ":cur_object"),

],
"I personally would prefer to defend {s8}, instead of {s9}.",
"lord_strategy_follow_up",[
 (assign, "$g_talk_troop_disagrees_with_marshal", 1),
]],





[anyone, "lord_strategy_follow_evaluation",
[
(faction_get_slot, ":faction_marshal", "$g_talk_troop_faction", slot_faction_marshall),
(this_or_next|neg|is_between, ":faction_marshal", active_npcs_begin, active_npcs_end),
(eq, ":faction_marshal", "$g_talk_troop"),
],
"Is there anything else?",
"lord_talk",[
]],


[anyone, "lord_strategy_follow_evaluation",
[],
"This strategy seems reasonable to me.",
"lord_strategy_follow_up",[
(assign, "$g_talk_troop_disagrees_with_marshal", 0),
]],

[anyone|plyr, "lord_strategy_follow_up", [
(this_or_next|faction_slot_eq, "$g_talk_troop_faction", slot_faction_ai_state, sfai_attacking_center),
(faction_slot_eq, "$g_talk_troop_faction", slot_faction_ai_state, sfai_raiding_village),
],
"If you're attacking, why aren't you...",
"lord_strategy_why_not",[
]],

[anyone|plyr, "lord_strategy_follow_up", [
],
"I see....",
"lord_talk_ask_something_again",[
]],

[anyone|plyr, "lord_strategy_follow_up", [
(eq, "$g_talk_troop_disagrees_with_marshal", 1),
(neg|faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "$g_talk_troop"),
(faction_get_slot, ":faction_marshal", "$g_talk_troop_faction", slot_faction_marshall),
(is_between, ":faction_marshal", active_npcs_begin, active_npcs_end),
(str_store_troop_name, s4, ":faction_marshal"),
],
"Would you say, then, that {s4} should no longer be marshal?",
"lord_talk_replace_marshal",[
]],

[anyone, "lord_talk_replace_marshal", [
(faction_get_slot, ":faction_issue", "$g_talk_troop_faction", slot_faction_political_issue),
(is_between, ":faction_issue", centers_begin, centers_end),
(str_store_party_name, s4, ":faction_issue"),
],
"I believe that our realm should resolve the issue of {s4} before we begin to debate replacing the marshal.",
"lord_talk_ask_something_again",[
]],


[anyone, "lord_talk_replace_marshal", [
(faction_slot_eq, "$g_talk_troop_faction", slot_faction_political_issue, 1),
(troop_get_slot, ":stance_on_faction_issue", "$g_talk_troop", slot_troop_stance_on_faction_issue),
(faction_get_slot, ":faction_marshal", "$g_talk_troop_faction", slot_faction_marshall),
(neq, ":stance_on_faction_issue", ":faction_marshal"),
(str_store_troop_name, s4,  ":stance_on_faction_issue"),
(str_store_troop_name, s5,  ":faction_marshal"),

],
"Yes. I have already made my position on this matter clear. I believe that {s4} should be marshal instead of {s5}.",
"lord_talk_ask_something_again",[
]],

[anyone, "lord_talk_replace_marshal", [
(faction_get_slot, ":faction_marshal", "$g_talk_troop_faction", slot_faction_marshall),
(call_script, "script_troop_get_relation_with_troop", "$g_talk_troop", ":faction_marshal"),
(assign, ":relation_with_marshal", reg0),
(gt, ":relation_with_marshal", "$g_talk_troop_effective_relation"),
],
"I will make up my mind on this matter without your persuasion, {sir/my lady}.",
"lord_talk_ask_something_again",[
]],

[anyone, "lord_talk_replace_marshal", [
],
"Hmm...",
"lord_talk_replace_marshal_decision",[
(faction_set_slot, "$g_talk_troop_faction", slot_faction_political_issue, 1),
]],


[anyone, "lord_talk_replace_marshal_decision", [
(call_script, "script_npc_decision_checklist_take_stand_on_issue", "$g_talk_troop"),
(assign, ":replacement_candidate", reg0),
(neg|faction_slot_eq, "$g_talk_troop_faction", slot_faction_marshall, ":replacement_candidate"),
(call_script, "script_troop_describes_troop_to_s15", "$g_talk_troop", ":replacement_candidate"),
],
"Yes, I would say that. At this point, I would be tempted to say that I support {s15} instead. I am glad that you and I had this discussion, so that I know that we are of the same mind on this matter.",
"lord_talk_ask_something_again",[
(call_script, "script_npc_decision_checklist_take_stand_on_issue", "$g_talk_troop"),
(assign, ":replacement_candidate", reg0),
(troop_set_slot, "$g_talk_troop", slot_troop_stance_on_faction_issue, ":replacement_candidate"),

(faction_get_slot, ":faction_marshal", "$g_talk_troop_faction", slot_faction_marshall),
(troop_get_slot, ":marshal_controversy",  ":faction_marshal", slot_troop_controversy),
(val_add, ":marshal_controversy", 5),
(troop_set_slot, ":faction_marshal", slot_troop_controversy, ":marshal_controversy"),


(call_script, "script_troop_describes_troop_to_s15", "$g_talk_troop", ":replacement_candidate"),

]],


[anyone, "lord_talk_replace_marshal_decision", [
(faction_get_slot, ":faction_marshal", "$g_talk_troop_faction", slot_faction_marshall),
(str_store_troop_name, s4, ":faction_marshal"),
],
"Not necessarily. It is possible for {s4} and I have to have an honest disagreement over strategy, without my seeking to replace him.",
"lord_talk_ask_something_again",[
]],




[anyone, "lord_strategy_why_not", [
],
"Yes?",
"lord_strategy_why_not_select",[
]],

[anyone|plyr, "lord_strategy_why_not_select", [
],
"Never mind.",
"lord_talk_ask_something_again",[]],

[anyone|plyr, "lord_strategy_why_not_select",
[
 (this_or_next|faction_slot_eq, "$g_talk_troop_faction", slot_faction_ai_state, sfai_raiding_village),
 (faction_slot_eq, "$g_talk_troop_faction", slot_faction_ai_state, sfai_attacking_center),

 (faction_get_slot, ":cur_object", "$g_talk_troop_faction", slot_faction_ai_object),
 (faction_get_slot, ":faction_marshal", "$g_talk_troop_faction", slot_faction_marshall),
 (gt, ":faction_marshal", -1),
 (call_script, "script_find_center_to_attack_alt", ":faction_marshal", 1, 0),
 (neq, reg0, ":cur_object"),
 (str_store_party_name,s4, ":cur_object"),
],
"..planning to continue with the attack on {s4}?",
"lord_strategy_why_not_reason",[
]],

[anyone|plyr|repeat_for_parties, "lord_strategy_why_not_select",
[
 (store_repeat_object, ":selected_center"),
 (is_between, ":selected_center", centers_begin, centers_end),

 (store_faction_of_party, ":selected_center_faction", ":selected_center"),
 (eq, ":selected_center_faction", "$g_talk_troop_faction"),

 (neg|faction_slot_eq, "$g_talk_troop_faction", slot_faction_ai_object, ":selected_center"),
 (neq, "$g_target_after_gathering", ":selected_center"),

 (party_slot_ge, ":selected_center", slot_center_sortie_enemy_strength, 1),
 (str_store_party_name,s4, ":selected_center"),
],
"..defending {s4}?",
"lord_strategy_why_not_reason",[
(store_repeat_object, "$temp"),
]],

[anyone|plyr|repeat_for_parties, "lord_strategy_why_not_select",
[
 (store_repeat_object, ":selected_center"),
 (is_between, ":selected_center", centers_begin, centers_end),

 (store_faction_of_party, ":selected_center_faction", ":selected_center"),
 (store_relation, ":relation", ":selected_center_faction", "$g_talk_troop_faction"),
 (lt, ":relation", 0),

 (neg|faction_slot_eq, "$g_talk_troop_faction", slot_faction_ai_object, ":selected_center"),
 (str_store_party_name,s4, ":selected_center"),
],
"..attacking {s4}?",
"lord_strategy_why_not_reason",
[
  (store_repeat_object, "$temp"),

  (try_begin),
    (eq, "$cheat_mode", 1),
    (store_sub, ":faction_recce_slot", "$g_talk_troop_faction", kingdoms_begin),
    (val_add, ":faction_recce_slot", slot_center_last_reconnoitered_by_faction_time),
    (store_current_hours, ":hours_since_last_recon"),
    (party_get_slot, ":last_recon_time", "$temp", ":faction_recce_slot"),
    (val_sub, ":hours_since_last_recon", ":last_recon_time"),
  (try_end),
]],

[anyone, "lord_strategy_why_not_reason",
[
 (assign, ":selected_center", "$temp"),
 (store_faction_of_party, ":selected_center_faction", ":selected_center"),
 (eq, ":selected_center_faction", "$g_talk_troop_faction"),
 (faction_get_slot, ":faction_marshal", "$g_talk_troop_faction", slot_faction_marshall),
 (call_script, "script_find_center_to_defend", ":faction_marshal"),
 (assign, ":most_threatened_center", reg0),
 (assign, ":threat_danger_level", reg1),
 (assign, ":enemy_strength_near_threatened_center", reg2),

 (try_begin),
   (call_script, "script_find_center_to_attack_alt", ":faction_marshal", 1, 0),
   (assign, ":target_value_level", reg1),
   (call_script, "script_find_center_to_attack_alt", ":faction_marshal", 1, 1),
   (assign, ":target_value_level_all_vassals", reg1),

   (try_begin),
     (ge, ":target_value_level_all_vassals", ":target_value_level"),
     (assign, ":target_value_level_max", ":target_value_level_all_vassals"),
   (else_try),
     (assign, ":target_value_level_max", ":target_value_level"),
   (try_end),

   (gt, ":target_value_level_max", ":threat_danger_level"),
   (assign, reg4, ":target_value_level"),
   (assign, reg5, ":threat_danger_level"),
   (str_store_string, s9, "str_reason_1"),
 (else_try),
   (assign, ":continue", 0),
   (try_begin),
     (is_between, ":selected_center", villages_begin, villages_end),
     (is_between, ":most_threatened_center", walled_centers_begin, walled_centers_end),
     (assign, ":continue", 1),
   (try_end),

   (try_begin),
     (is_between, ":selected_center", castles_begin, castles_end),
     (is_between, ":most_threatened_center", towns_begin, towns_end),
     (assign, ":continue", 1),
   (try_end),

   (eq, ":continue", 1),

   (str_store_party_name, s8, ":most_threatened_center"),
   #values of centers : town > castle > village
   #Situation : We are going to defend more valueable center.
   #To Steve - Please find a better explaining string for below line.
   (str_store_string, s9, "str_reason_2"),
 (else_try),
   (neq, ":most_threatened_center", ":selected_center"),
   (str_store_party_name, s8, ":most_threatened_center"),
   (str_store_string, s9, "str_reason_3"),
 (else_try),
   (troop_get_slot, ":marshal_party", ":faction_marshal", slot_troop_leaded_party),
   (party_is_active, ":marshal_party"),
   (party_get_slot, ":cached_strength", ":marshal_party", slot_party_cached_strength),
   (party_get_slot, ":follower_strength", ":marshal_party", slot_party_follower_strength),
   (store_add, ":total_strength", ":cached_strength", ":follower_strength"),
   (ge, ":enemy_strength_near_threatened_center", ":total_strength"),
   (assign, reg4, ":enemy_strength_near_threatened_center"),
   (assign, reg5, ":total_strength"),
   (str_store_string, s9, "str_reason_4"),
 (else_try),
   (str_store_string, s9, "str_reason_5"),
 (try_end),
],
"{s9}",
"lord_talk_why_not_repeat",[]],

[anyone, "lord_strategy_why_not_reason",
[
 (assign, ":selected_center", "$temp"),
 (faction_get_slot, ":faction_marshal", "$g_talk_troop_faction", slot_faction_marshall),

 (faction_get_slot, ":faction_ai_object", "$g_talk_troop_faction", slot_faction_ai_object),

 (call_script, "script_npc_decision_checklist_evaluate_enemy_center_for_attack", ":faction_marshal", ":faction_ai_object", 1, 0),
 (assign, "$g_faction_object_score", reg0),

 (assign, "$g_do_not_skip_other_than_current_ai_object", 1),
 (call_script, "script_npc_decision_checklist_evaluate_enemy_center_for_attack", ":faction_marshal", ":selected_center", 1, 0),
 (assign, "$g_do_not_skip_other_than_current_ai_object", 0),

 (lt, reg0, 0),
 (assign, ":explainer_string", reg1),
 (try_begin),
   (eq, "$g_use_current_ai_object_as_s8", 0),
   (str_store_party_name, s8, ":selected_center"),
 (else_try),
   (str_store_party_name, s8, ":faction_ai_object"),
 (try_end),
 (str_store_string, s9, ":explainer_string"),
 (str_clear, s10),
(str_store_troop_name, s11, ":faction_marshal"),
#s10 will say that
],
"Our marshal {s11} believes that {s8} {s9}{s10}",
"lord_talk_why_not_repeat",[]],

[anyone, "lord_strategy_why_not_reason",
[
 (faction_get_slot, ":faction_marshal", "$g_talk_troop_faction", slot_faction_marshall),
 (faction_get_slot, ":cur_object", "$g_talk_troop_faction", slot_faction_ai_object),

 (call_script, "script_npc_decision_checklist_evaluate_enemy_center_for_attack", ":faction_marshal", ":cur_object", 1, 0),
 (assign, ":power_ratio_for_cur_object", reg2),
 (call_script, "script_npc_decision_checklist_evaluate_enemy_center_for_attack", ":faction_marshal", "$temp", 1, 0),
 (assign, ":power_ratio_for_selected_center", reg2),

 (try_begin),
   (eq, ":power_ratio_for_selected_center", 0),
   (str_store_string, s7, "str_reason_6"),
 (else_try),
   (lt, ":power_ratio_for_selected_center", 200),
   (str_store_string, s7, "str_reason_7"),
 (else_try),
   (is_between, ":power_ratio_for_selected_center", 200, 300),
   (str_store_string, s7, "str_reason_8"),
 (else_try),
   (ge, ":power_ratio_for_selected_center", 300),
   (str_store_string, s7, "str_reason_9"),
 (else_try),
   (str_store_string, s7, "str_error_string"),
(try_end),

(try_begin),
  (eq, ":power_ratio_for_cur_object", 0),
  (str_store_string, s8, "str_reason_6"),
(else_try),
  (lt, ":power_ratio_for_cur_object", 200),
  (str_store_string, s8, "str_reason_7"),
(else_try),
  (is_between, ":power_ratio_for_cur_object", 200, 300),
  (str_store_string, s8, "str_reason_8"),
(else_try),
  (ge, ":power_ratio_for_cur_object", 300),
  (str_store_string, s8, "str_reason_9"),
(else_try),
  (str_store_string, s8, "str_error_string"),
(try_end),

(try_begin),
  (ge, ":cur_object", 0),
  (str_store_party_name, s4, ":cur_object"),
(else_try),
  (ge, "$g_target_after_gathering", 0),
  (str_store_party_name, s4, "$g_target_after_gathering"),
(else_try),
  (str_store_party_name, s4, "str_error_string"),
(try_end),

(str_store_troop_name, s5, ":faction_marshal"),

(try_begin),
  (eq, "$cheat_mode", 1),
  (store_sub, ":faction_recce_slot", "$g_talk_troop_faction", kingdoms_begin),
  (val_add, ":faction_recce_slot", slot_center_last_reconnoitered_by_faction_time),
  (store_current_hours, ":hours_since_last_recon"),
  (party_get_slot, ":last_recon_time", "$temp", ":faction_recce_slot"),
  (val_sub, ":hours_since_last_recon", ":last_recon_time"),

  (store_sub, ":faction_recce_slot", "$g_talk_troop_faction", kingdoms_begin),
  (val_add, ":faction_recce_slot", slot_center_last_reconnoitered_by_faction_time),
  (store_current_hours, ":hours_since_last_recon"),
  (party_get_slot, ":last_recon_time", ":cur_object", ":faction_recce_slot"),
  (val_sub, ":hours_since_last_recon", ":last_recon_time"),
(try_end),

(try_begin),
  (assign, ":continue", 0),
  (try_begin),
    (party_slot_eq, "$g_talk_troop_party", slot_party_ai_state, sfai_gathering_army),
    (lt, "$g_target_after_gathering", 0), #then this means faction is gathering army to attack a center.
    (assign, ":continue", 1),
  (try_end),

   (this_or_next|eq, ":continue", 1),
  (this_or_next|faction_slot_eq, "$g_talk_troop_faction", slot_faction_ai_state, sfai_attacking_center),
  (faction_slot_eq, "$g_talk_troop_faction", slot_faction_ai_state, sfai_raiding_village),

  (str_store_string, s3, "str_has_decided_that_an_attack_on_"),
  (str_store_string, s6, "str_this_would_be_better_worth_the_effort"),
(else_try),
  (str_store_string, s3, "str_has_decided_to_defend_"),
  (str_store_party_name, s9, "$temp"),
  (str_store_string, s6, "str_before_going_offensive_we_should_protect_our_lands_if_there_is_any_threat_so_this_can_be_reason_marshall_choosed_defending_s4"),
  (str_clear, s8),
(try_end),
],
"We could go there. {s7} However, {s5} {s3} {s4}. {s6} {s8}.",
"lord_talk_why_not_repeat",[
]],

[anyone,"lord_talk_why_not_repeat", [
],
"Did you have any similar questions? Why we are not...",
"lord_strategy_why_not_select",[
]],

##diplomacy start+
#Form a familial alliance with a faction leader!

[anyone, "lord_talk_ask_marriage_1", [
	(faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "$g_talk_troop"),
	(is_between, "$g_talk_troop", pretenders_begin, pretenders_end),
	(neg|troop_slot_eq, "$g_talk_troop", slot_troop_playerparty_history, dplmc_pp_history_nonplayer_entry),
	#This probably can't occur, but make sure.
	(this_or_next|troop_slot_eq,"$g_talk_troop", slot_troop_betrothed, "trp_player"),
	(troop_slot_eq, "trp_player", slot_troop_betrothed, "$g_talk_troop"),
], "Have no fear, I have no intention of changing my mind.  We will be married as soon as there is an opportunity worthy of the august event.", "lord_pretalk", []],

## Propose marriage to claimant: Arwa version
[anyone,"lord_talk_ask_marriage_1", [
(eq, "$g_talk_troop", "trp_kingdom_6_pretender"),#is Arwa
(faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "$g_talk_troop"),
(is_between, "$g_talk_troop", pretenders_begin, pretenders_end),
(neg|troop_slot_eq, "$g_talk_troop", slot_troop_playerparty_history, dplmc_pp_history_nonplayer_entry),

(this_or_next|ge, "$g_disable_condescending_comments", 2),#allow same-sex marriage if "reduced prejudice" is enabled
	(neq, reg65, "$character_gender"),
(try_begin),
	(troop_get_slot, ":original_faction", "$g_talk_troop", slot_troop_original_faction),
	(is_between, ":original_faction", kingdoms_begin, kingdoms_end),
	(str_store_faction_name, s0, ":original_faction"),
(else_try),
	(str_store_faction_name, s0, "$g_talk_troop_faction"),
(try_end),
],
"I do not forget that it was your strong right arm that placed me on this throne. Do you aim to take Baybak's place as my {husband/wife}, to rule the {s0} with me as Commander of the Armies even as I am Mother of the Realm?", "dplmc_claimant_marriage_proposal_pc_confirm", []],

## Propose marriage to claimant: general version A
[anyone,"lord_talk_ask_marriage_1", [
(faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "$g_talk_troop"),
(is_between, "$g_talk_troop", pretenders_begin, pretenders_end),
(neg|troop_slot_eq, "$g_talk_troop", slot_troop_playerparty_history, dplmc_pp_history_nonplayer_entry),

(this_or_next|ge, "$g_disable_condescending_comments", 2),#allow same-sex marriage if "reduced prejudice" is enabled
	(neq, reg65, "$character_gender"),
(try_begin),
	(troop_get_slot, ":original_faction", "$g_talk_troop", slot_troop_original_faction),
	(is_between, ":original_faction", kingdoms_begin, kingdoms_end),
	(str_store_faction_name, s0, ":original_faction"),
(else_try),
	(str_store_faction_name, s0, "$g_talk_troop_faction"),
(try_end),
],
"Are you proposing to rule the {s0} alongside me as my {husband/wife}?",
"dplmc_claimant_marriage_proposal_pc_confirm", []],

[anyone|plyr,"dplmc_claimant_marriage_proposal_pc_confirm", [
],
"Yes. That is my proposal.",
"dplmc_claimant_marriage_proposal_pc_reax",[
]],

[anyone|plyr,"dplmc_claimant_marriage_proposal_pc_confirm", [
],
"No, I think you have misunderstood me.  Forget I brought it up.",
"lord_pretalk",[
]],

[anyone|plyr,"dplmc_claimant_marriage_proposal_pc_confirm", [
#It's possible the player did not intend this
(lt, "$g_disable_condescending_comments", 2),
(eq, reg65, "$character_gender"),
],
"Oh, HELL no!  No, you totally have the wrong idea... forget I said anything.",
"lord_pretalk",[
]],

[anyone, "dplmc_claimant_marriage_proposal_pc_reax", [
	#This probably can't occur, but make sure.
	(this_or_next|troop_slot_eq,"$g_talk_troop", slot_troop_betrothed, "trp_player"),
	(troop_slot_eq, "trp_player", slot_troop_betrothed, "$g_talk_troop"),
], "Have no fear, I have no intention of changing my mind.  We will be married as soon as there is an opportunity worthy of the august event.", "lord_pretalk", []],

[anyone, "dplmc_claimant_marriage_proposal_pc_reax", [
	#The claimant must not be married.  This probably can't occur, but make sure.
	(troop_get_slot, ":spouse", "$g_talk_troop", slot_troop_spouse),
	(ge, ":spouse", 0),
	(str_store_troop_name, s0, ":spouse"),#This probably can't occur, but make sure.
], "Unfortunately this is impossible, since I am already married to {s0}.", "lord_pretalk", []],

[anyone, "dplmc_claimant_marriage_proposal_pc_reax", [
	#The player must not be married.  This probably can't occur, but make sure.
	(troop_get_slot, ":spouse", "trp_player", slot_troop_spouse),
	(ge, ":spouse", 1),
	(str_store_troop_name, s0, ":spouse"),
], "Unfortunately this is impossible, since you are already married to {s0}.", "lord_pretalk", []],

[anyone, "dplmc_claimant_marriage_proposal_pc_reax", [
	#The claimant must not be engaged.  This probably can't occur, but make sure.
	(troop_get_slot, ":betrothed", "$g_talk_troop", slot_troop_betrothed),
	(ge, ":betrothed", 0),
	(str_store_troop_name, s0, ":betrothed"),
], "Unfortunately this is impossible, since I am already engaged to {s0}.", "lord_pretalk", []],

[anyone, "dplmc_claimant_marriage_proposal_pc_reax", [
	#The player must not be engaged.  This probably can't occur, but make sure.
	(troop_get_slot, ":betrothed", "trp_player", slot_troop_betrothed),
	(ge, ":betrothed", 1),
	(str_store_troop_name, s0, ":betrothed"),
], "Unfortunately this is impossible, since you are already engaged to {s0}.", "lord_pretalk", []],

[anyone, "dplmc_claimant_marriage_proposal_pc_reax", [
	(assign, reg0, -1),
	(str_store_string, s14, "str_ERROR_string"),
	(try_begin),
		(call_script, "script_cf_dplmc_evaluate_pretender_proposal", "$g_talk_troop"),
	(try_end),
	(lt, reg0, 1),
], "{s14}", "lord_pretalk", []],#answer was either "no" or "not now", jump back to pretalk

[anyone,"dplmc_claimant_marriage_proposal_pc_reax", [
],
"{s14}",
"lord_marriage_proposal_female_pc_confirm_engagement",#jump to confirm engagement dialogue (despite the name, it is now unisex)
[]],

##Non-claimant faction leader:
##Give a more ego-soothing turn-down if the character meets certain criteria.
[anyone,"lord_talk_ask_marriage_1", [
(faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "$g_talk_troop"),
(ge, "$g_talk_troop_relation", 50),#enough for the "brave champion" message
(troop_slot_ge, "trp_player", slot_troop_renown, 500),#enough for a claimant to take you seriously
(store_character_level, ":player_level", "trp_player"),
(ge, ":player_level", 15),#high enough level (in Native) to receive all quests
],
"It is our custom to seal any such alliances with marriage. You have made quite a few waves since your arrival, and I might be willing to consider such an arrangement, but unfortunately no one in my household is eligible to wed.",
"lord_pretalk",[
]],
##diplomacy end+

[anyone,"lord_talk_ask_marriage_1", [
(faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "$g_talk_troop"),
##diplomacy start+ Use an alternative word for king
(try_begin),
	(eq, reg65, 1),
	(call_script, "script_dplmc_print_cultural_word_to_sreg", "$g_talk_troop", DPLMC_CULTURAL_TERM_KING_FEMALE, s0),
(else_try),
	(call_script, "script_dplmc_print_cultural_word_to_sreg", "$g_talk_troop", DPLMC_CULTURAL_TERM_KING, s0),
(try_end),
],
#"You will not take offense if I tell you that, as a king, I have other plans for my children.",
"You will not take offense if I tell you that, as a {s0}, I have other plans for my children.",
##diplomacy end+
"lord_pretalk",[
]],


[anyone,"lord_talk_ask_marriage_1", [
 (assign, "$marriage_candidate", -1),
(try_begin),
   ##diplomacy start+
   #(troop_get_type, ":is_female", "trp_player"),
   (assign, ":is_female", "$character_gender"),
   ##(players of either gender may marry opposite-gender lords)
   (assign, ":lord_female", reg65),
   (this_or_next|eq, ":lord_female", 1),
   ##diplomacy end+
   (eq, ":is_female", 1),
   (troop_slot_eq, "$g_talk_troop", slot_troop_spouse, -1),
   (assign, "$marriage_candidate", "$g_talk_troop"),
(else_try),
   ##diplomacy start+ Players of either gender may marry opposite-gender lords
   #(troop_get_type, ":is_female", "trp_player"),
   #(eq, ":is_female", 0),
   (assign, ":is_female", "$character_gender"),
   (assign, ":lord_female", reg65),
   (eq, ":lord_female", 0),##<-- xxx TODO: Test and see if I can remove this test.
   ##diplomacy end+
   (assign, "$marriage_candidate", -1),
   ##diplomacy start+
   #(try_for_range, ":lady", kingdom_ladies_begin, kingdom_ladies_end),
   ##Be a bit more efficient: stop the loop once you get a match.
   (assign, ":end_cond", kingdom_ladies_end),
   (try_for_range, ":lady", kingdom_ladies_begin, ":end_cond"),
      #Don't include dead/exiled ladies
	  (neg|troop_slot_ge, ":lady", slot_troop_occupation, slto_retirement),
   ##diplomacy end+
      (troop_slot_eq, ":lady", slot_troop_spouse, -1),
      (troop_slot_eq, ":lady", slot_troop_betrothed, -1),
      (call_script, "script_get_kingdom_lady_social_determinants", ":lady"),

      (eq, reg0, "$g_talk_troop"),
	  ##diplomacy start+
	  (call_script, "script_dplmc_store_troop_is_female", ":lady"),
	  (neq, reg0, ":is_female"),
	  (assign, ":end_cond", ":lady"),
	  ##diplomacy end+

      (call_script, "script_troop_get_family_relation_to_troop", ":lady", "$g_talk_troop"),
      (assign, "$marriage_candidate", ":lady"),
      (str_store_troop_name, s14, "$marriage_candidate"),

      (str_store_string, s15, "str_it_is_our_custom_to_seal_any_such_alliances_with_marriage_and_in_fact_we_have_been_looking_for_a_suitable_groom_for_my_s11_s14"),

   (try_end),
(try_end),
(eq, "$marriage_candidate", -1),
],
"It is our custom to seal any such alliances with marriage. Unfortunately, no one in my household is eligible to wed.",
"lord_pretalk",[
]],

[anyone,"lord_talk_ask_marriage_1", [
##diplomacy start+
##OLD:
#(troop_get_type, ":type", "trp_player"),
#(eq, ":type", 0),
##NEW:
#get courtship of female lords to work
(neq, "$marriage_candidate", "$g_talk_troop"),
##diplomacy end+

],
"{s15}",
"lord_courtship_pre_permission",[
]],

[anyone,"lord_talk_ask_marriage_1", [(eq, "$marriage_candidate", "$g_talk_troop"),],
 "Are you proposing that you and I marry?","lord_marriage_proposal_female_pc_confirm",[]],




[anyone|plyr,"lord_courtship_pre_permission", [
    (neg|troop_slot_ge, "trp_player", slot_troop_spouse, 1),
    (neg|troop_slot_ge, "trp_player", slot_troop_betrothed, 1),
    #diplomacy start+ get courtship of female lords to work
    (neq, reg65, 1),#not talking to a woman
    (assign, ":is_female", "$character_gender"),
    #(troop_get_type, ":is_female", "trp_player"),
    ##diplomacy end+
    (eq, ":is_female", 0),

    (str_clear, s15),
    (try_begin),
      (troop_slot_eq, "$g_talk_troop", slot_lord_granted_courtship_permission, -1),
      (str_store_string, s15, "str_once_again_"),
    (try_end),
  ],
##diplomacy start+ "groom" -> {groom/bride}
"May I {s15}suggest that I be considered as a {groom/bride}?",
##diplomacy end+
"lord_courtship_permission",[
]],


[anyone|plyr,"lord_courtship_pre_permission", [
(eq, "$cheat_mode", 2),
],
"CHEAT -- Start engagement",
"lord_marriage_permission_engagement_date",[

(setup_quest_text, "qst_formal_marriage_proposal"),
(str_store_string, s2, "str_cheat__marriage_proposal"),

(call_script, "script_start_quest", "qst_formal_marriage_proposal", "$marriage_candidate"),
(quest_set_slot, "qst_formal_marriage_proposal", slot_quest_giver_troop, "$marriage_candidate"),
]],

[anyone|plyr,"lord_courtship_pre_permission", [], "Never mind.","lord_pretalk",[]],

[anyone|plyr,"lord_marriage_proposal_female_pc_confirm", [
],
"Yes. That is my proposal.",
"lord_marriage_proposal_female_pc_reax",[
]],

[anyone|plyr,"lord_marriage_proposal_female_pc_confirm", [
],
"No, I think you have misunderstood me.",
"lord_pretalk",[
]],
##diplomacy start+ #Ordinarily this can't appear; it's possible the player did not intend this
[anyone|plyr,"lord_marriage_proposal_female_pc_confirm", [
(lt, "$g_disable_condescending_comments", 2),
(eq, reg65, "$character_gender"),
],
"Oh, HELL no!  No, you totally have the wrong idea... forget I said anything.",
"lord_pretalk",[
]],
##diplomacy end+

[anyone,"lord_marriage_proposal_female_pc_reax", [
(call_script, "script_npc_decision_checklist_marry_female_pc", "$g_talk_troop"),
(le, reg0, 0),
],
"{s14}",
"lord_pretalk",[
]],

[anyone,"lord_marriage_proposal_female_pc_reax", [
(call_script, "script_npc_decision_checklist_marry_female_pc", "$g_talk_troop"),
(eq, reg0, 2),
],
"{s14}",
"lord_pretalk",[
(troop_set_slot, "$g_talk_troop", slot_troop_courtship_state, 2),
]],

[anyone,"lord_marriage_proposal_female_pc_reax", [
],
"{s14}",
"lord_marriage_proposal_female_pc_next_step",[
]],

##diplomacy start+
#Re-enable this if enhanced prejudice mode is on
  [anyone,"lord_marriage_proposal_female_pc_next_step", [
	(lt, "$g_disable_condescending_comments", 2),#Never say this with bias disabled
	(neq, reg65, "$character_gender"),
	#Not some non-noble promoted troop
	(is_between, "$g_talk_troop", heroes_begin, heroes_end),
	#Not a former companion
	(this_or_next|neg|is_between, "$g_talk_troop", companions_begin, companions_end),
		(neg|troop_slot_eq, "$g_talk_troop", slot_troop_playerparty_history, dplmc_pp_history_nonplayer_entry),
	#Not a supported pretender
	(this_or_next|neg|is_between, "$g_talk_troop", pretenders_begin, pretenders_end),
		(neg|troop_slot_eq, "$g_talk_troop", slot_troop_playerparty_history, dplmc_pp_history_nonplayer_entry),
	#Must be someone who would ask this in the first place
	(troop_get_slot, reg0, "$g_talk_troop", slot_lord_reputation_type),
	(neq, reg0, lrep_cunning),
	(neq, reg0, lrep_goodnatured),

	(this_or_next|lt, "$g_disable_condescending_comments", 0),#With bias on medium, only certain traditionalists will say this.
	(this_or_next|eq, reg0, lrep_conventional),#Usually a lord wouldn't be lrep_conventional or lrep_moralist
	(this_or_next|eq, reg0, lrep_moralist),
	(this_or_next|eq, reg0, lrep_martial),#Upstanding & martial are impossible to marry in Native
		(eq, reg0, lrep_upstanding),

	(call_script, "script_cf_dplmc_faction_has_bias_against_gender", "$g_talk_troop_faction", "$character_gender"),
	(call_script, "script_dplmc_print_cultural_word_to_sreg", "$g_talk_troop", DPLMC_CULTURAL_TERM_LORD_PLURAL, 0),
  ],#Next line: changed "man" to {woman/man}, and "other lords" to "other {s0}"
   "I must say, though. You live your life like a {woman/man}, riding where you will, with the company you choose. This will not make it easy for the other {s0} to accept our marriage. I don't suppose that you would give up adventuring, for the sake of our marriage?",
   "lord_marriage_proposal_female_pc_next_step_2",[
   ]],#end changed

   [anyone|plyr,"lord_marriage_proposal_female_pc_next_step_2", [
  ],
   "I think not!",
   "lord_marriage_proposal_female_pc_next_step_5",[
   ]],

   [anyone|plyr,"lord_marriage_proposal_female_pc_next_step_2", [
	#It might be a bit disappointing to be able to agree to this with no lasting effect
	#(the NPC will not even appear to remember it), so I was on the fence as to whether
	#to put this in or not without a fuller implementation.
	##(eq, 0, 1),
  ],
   "Very well.",
   "lord_marriage_proposal_female_pc_next_step_5",[
   ]],
##diplomacy end+

[anyone,"lord_marriage_proposal_female_pc_next_step", [
],
"I suppose the next step would be for me to send a message to your family, asking for their permission to marry you, but I suppose that you make your own decisions.",
"lord_marriage_proposal_female_pc_next_step_4",[
]],

[anyone|plyr,"lord_marriage_proposal_female_pc_next_step_4", [
],
"You assume correctly.",
"lord_marriage_proposal_female_pc_next_step_5",[
]],

[anyone,"lord_marriage_proposal_female_pc_next_step_5", [
##diplomacy start+
(call_script, "script_dplmc_print_cultural_word_to_sreg", "$g_talk_troop", DPLMC_CULTURAL_TERM_LORD_PLURAL, 0),
],#Replace "lords" with {s0}
"Very well, then. As there are no obstacles to our marriage, should we then consider ourselves engaged to be wed? I will organize a great feast, and we can exchange our vows before all the {s0} of the realm. If you are willing, that is...",
##diplomacy end+
"lord_marriage_proposal_female_pc_confirm_engagement",[
]],

[anyone|plyr,"lord_marriage_proposal_female_pc_confirm_engagement", [
],
"I am willing.",
"lord_marriage_proposal_female_pc_confirm_engagement_yes",[
(troop_set_slot, "$g_talk_troop", slot_troop_betrothed, "trp_player"),
(troop_set_slot, "trp_player", slot_troop_betrothed, "$g_talk_troop"),

(assign, "$g_other_quest", 0),
(try_begin),
(store_partner_quest, ":other_quest", "$g_talk_troop"),
 (gt, ":other_quest", 0),
(assign, "$g_other_quest", ":other_quest"),
(try_end),

(str_store_troop_name, s4, "$g_talk_troop"),

(setup_quest_text, "qst_wed_betrothed_female"),
(str_store_string, s2, "str_you_plan_to_marry_s4_as_you_have_no_family_in_calradia_he_will_organize_the_wedding_feast"),

(call_script, "script_start_quest", "qst_wed_betrothed_female", "$g_talk_troop"),

(quest_set_slot, "qst_wed_betrothed_female", slot_quest_expiration_days, 120),
(quest_set_slot, "qst_wed_betrothed_female", slot_quest_giver_troop, "$g_talk_troop"),

]],

[anyone|plyr,"lord_marriage_proposal_female_pc_confirm_engagement", [
],
"Actually, I would like to reconsider.",
"lord_marriage_proposal_female_pc_confirm_engagement_no",[

]],

[anyone,"lord_marriage_proposal_female_pc_confirm_engagement_yes", [

(str_clear, s12),
(try_begin),
(gt, "$g_other_quest", 0),
(call_script, "script_succeed_quest", "$g_other_quest"),
(call_script, "script_end_quest", "$g_other_quest"),
(str_store_string, s12, "str_cancel_fiancee_quest"),
(try_end),
],
"Very well. Hopefully, a little over a month from now, we shall be wed.{s12}",
"close_window",[
(assign, "$g_leave_encounter", 1),
]],

[anyone,"lord_marriage_proposal_female_pc_confirm_engagement_no", [
],
#diplomacy start+ (players of either gender may marry opposite-gender lords)
"Take whatever time you need, my {lord/lady}.",
#diplomacy end+
"close_window",[
(assign, "$g_leave_encounter", 1),
]],



#continue marriage talks here

[anyone|plyr,"lord_talk", [(eq,"$talk_context",tc_party_encounter),
                          (lt, "$g_encountered_party_relation", 0),
                          (str_store_troop_name,s4,"$g_talk_troop")],
"I say this only once, {s4}! Surrender or die!", "party_encounter_lord_hostile_ultimatum_surrender", []],

[anyone,"party_encounter_lord_hostile_ultimatum_surrender", [],
"{s43}", "close_window", [
    (call_script, "script_lord_comment_to_s43", "$g_talk_troop", "str_lord_challenged_default"),

    (call_script, "script_make_kingdom_hostile_to_player", "$g_encountered_party_faction", -3),

    (try_begin),
      (gt, "$g_talk_troop_relation", -10),
      (call_script, "script_change_player_relation_with_troop", "$g_talk_troop", -1),
    (try_end),
    (assign,"$encountered_party_hostile",1),
    (assign,"$encountered_party_friendly",0),]],


[anyone|plyr,"lord_talk", [(eq,"$talk_context", tc_party_encounter),
                          (neq,"$g_encountered_party_faction","$players_kingdom"),
                          (ge, "$g_encountered_party_relation", 0),
                              ], "I'm here to deliver you my demands!", "lord_predemand",[]],
[anyone,"lord_predemand", [], "Eh? What do you want?", "lord_demand",[]],

[anyone|plyr,"lord_demand", [(neq,"$g_encountered_party_faction","$players_kingdom"),
                            (ge, "$g_encountered_party_relation", 0),], "I offer you one chance to surrender or die.", "lord_ultimatum_surrender",[
                            #SB : add animation
                            (call_script, "script_encounter_agent_draw_weapon"),
                            
                            ]],

#Neutral attack on lord
[anyone,"lord_ultimatum_surrender", [(ge, "$g_encountered_party_relation", 0)], "{s43}", "lord_attack_verify",[#originally, speak you rascal
     (call_script, "script_lord_comment_to_s43", "$g_talk_troop", "str_unprovoked_attack_default"),
    (try_begin),
      (faction_slot_ge, "$g_encountered_party_faction", slot_faction_truce_days_with_factions_begin, 1),
      (str_store_faction_name, s34, "$g_encountered_party_faction"),
      (str_store_string, s43, "str_s43_just_so_you_know_if_you_attack_me_you_will_be_in_violation_of_the_truce_you_signed_with_the_s34"),
    (try_end),
    (try_begin),
      (eq, "$players_kingdom", "fac_player_supporters_faction"),
      (faction_slot_eq, "fac_player_supporters_faction", slot_faction_leader, "trp_player"),
      (str_store_string, s43, "str_s43_also_you_should_know_that_an_unprovoked_assault_is_declaration_of_war"),
	##diplomacy start+ Handle player is co-ruler of kingdom
	(else_try),
	  (is_between, "$players_kingdom", npc_kingdoms_begin, npc_kingdoms_end),
	  (call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", "$players_kingdom"),
	  (ge, reg0, DPLMC_FACTION_STANDING_LEADER_SPOUSE),
	  (str_store_string, s43, "str_s43_also_you_should_know_that_an_unprovoked_assault_is_declaration_of_war"),
	##diplomacy end+
    (try_end),

   ]],

[anyone|plyr,"lord_attack_verify", [], "Forgive me sir. I don't know what I was thinking.", "lord_attack_verify_cancel",[]],
[anyone,"lord_attack_verify_cancel", [], "Be gone, then.", "close_window",[(call_script, "script_change_player_relation_with_troop", "$g_talk_troop", -1),(assign, "$g_leave_encounter",1)]],
[anyone|plyr,"lord_attack_verify", [], "That is none of your business. Prepare to fight!", "lord_attack_verify_commit",[
]],

#The kingdoms are already at war
[anyone,"lord_ultimatum_surrender", [], "{s43}", "lord_attack_verify_b", #originally, you will not survive this
[
 (call_script, "script_lord_comment_to_s43", "$g_talk_troop", "str_unnecessary_attack_default"),
 (call_script, "script_make_kingdom_hostile_to_player", "$g_encountered_party_faction", -3),
 (call_script, "script_change_player_relation_with_troop", "$g_talk_troop", -5),

 (assign,"$encountered_party_hostile",1),
 (assign,"$encountered_party_friendly",0),
 ]],

[anyone|plyr,"lord_attack_verify_b", [], "Forgive me sir. I don't know what I was thinking.", "lord_attack_verify_cancel",[]],
[anyone|plyr,"lord_attack_verify_b", [], "I stand my ground. Prepare to fight!", "lord_attack_verify_commit",[]],

[anyone,"lord_attack_verify_commit", [], "{s43}", "close_window",
[
 (call_script, "script_lord_comment_to_s43", "$g_talk_troop", "str_lord_challenged_default"),
(try_begin),
   (ge, "$g_encountered_party_relation", 0),
   (call_script, "script_diplomacy_party_attacks_neutral", "p_main_party", "$g_encountered_party"),
(try_end),
##diplomacy start+ Handle player is co-ruler of kingdom
(assign, ":is_coruler", 0),
(try_begin),
	(is_between, "$players_kingdom", npc_kingdoms_begin, npc_kingdoms_end),
	(call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", "$players_kingdom"),
	(ge, reg0, DPLMC_FACTION_STANDING_LEADER_SPOUSE),
	(assign, ":is_coruler", 1),
(try_end),
##diplomacy end+
(try_begin), #this try is added so that a player  monarch ccannot spark a war by attacking a neutral. The player does however cause a provocation, which may allow the other side to go to war
		#If a player can create a hostile faction simply by attacking, this will allow a number of exploits. Therefore, it is quite important to keep this condition in here for active player kingdoms
   (neq, "$players_kingdom", "fac_player_supporters_faction"),
   ##diplomacy start+
   (neq, ":is_coruler", 1),
   ##diplomacy end+
   (call_script, "script_make_kingdom_hostile_to_player", "$g_encountered_party_faction", -3),
(else_try),
   ##diplomacy start+
   (this_or_next|eq, ":is_coruler", 1),
   ##diplomacy end+
   (eq, "$players_kingdom", "fac_player_supporters_faction"),
   (call_script, "script_diplomacy_start_war_between_kingdoms",  "fac_player_supporters_faction", "$g_encountered_party_faction", 1),
(try_end),

#   (call_script, "script_make_kingdom_hostile_to_player", "$g_encountered_party_faction", -3),
(assign,"$encountered_party_hostile",1),
(assign,"$encountered_party_friendly",0),
 (call_script, "script_change_player_relation_with_troop", "$g_talk_troop", -30),
 ]],
#Post 0907 changes end

[anyone|plyr,"lord_demand", [], "Forgive me. It's nothing.", "lord_pretalk",[]],


##  [anyone|plyr,"lord_talk", [(troop_slot_eq, "$g_talk_troop", slot_troop_is_prisoner, 0),
##                             (ge, "$g_talk_troop_faction_relation", 0),
##                             ],
##   "I wish to ask for a favor.", "lord_ask_for_favor_ask",[]],



[anyone|plyr,"lord_talk", [
                         (faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "$g_talk_troop"),
                         (troop_slot_eq, "$g_talk_troop", slot_troop_discussed_rebellion, 0),
                         (assign, ":pretender", 0),
                         (try_for_range, ":possible_pretender", pretenders_begin, pretenders_end),
						     ##diplomacy start+
							 #Allow use of that slot for something else for pretenders.
							 (neq, ":possible_pretender", "$g_talk_troop"),
							 ##diplomacy end+
                             (troop_slot_eq, ":possible_pretender", slot_troop_original_faction, "$g_talk_troop_faction"),
                             (assign, ":pretender", ":possible_pretender"),
                         (try_end),
                         (troop_slot_ge, ":pretender", slot_troop_met, 1),
                         (str_store_troop_name, s45, ":pretender"),
                         (troop_get_type, reg3, ":pretender"),
 						 ##diplomacy start+ Override reg3
						 (assign, reg3, 0),
						 (try_begin),
							(call_script, "script_cf_dplmc_troop_is_female", ":pretender"),
							(assign, reg3, 1),
						 (try_end),
						 ##diplomacy end+
                          ],
"I have met in my travels one who calls {reg3?herself:himself} {s45}...", "liege_defends_claim_1",[
    ]],

[anyone,"liege_defends_claim_1", [],
"Oh really? It is not everyone who dares mention that name in my presence. I am not sure whether to reward your bravery, or punish you for your impudence.", "liege_defends_claim_2", [
                         (troop_set_slot, "$g_talk_troop", slot_troop_discussed_rebellion, 1),
                 ]],

[anyone,"liege_defends_claim_2", [],
"Very well. I will indulge your curiosity. But listen closely, because I do not wish to speak of this matter again.", "liege_defends_claim_3", [
                 ]],

[anyone,"liege_defends_claim_3", [],
"{s48}", "liege_defends_claim_4", [
                  (store_sub, ":rebellion_string", "$g_talk_troop_faction", "fac_kingdom_1"),
                  (val_add, ":rebellion_string", "str_swadian_rebellion_monarch_response_1"),
                  (str_store_string, 48, ":rebellion_string"),
                  ]],

[anyone,"liege_defends_claim_4", [],
"{s48}", "lord_talk", [
                  (store_sub, ":rebellion_string", "$g_talk_troop_faction", "fac_kingdom_1"),
                  (val_add, ":rebellion_string", "str_swadian_rebellion_monarch_response_2"),
                  (str_store_string, 48, ":rebellion_string"),
                  ]],


#Rebellion changes begin
#  [anyone|plyr,"lord_talk", [
#                             (gt, "$supported_pretender", 0),
#                             (eq, "$supported_pretender_old_faction", "$g_talk_troop_faction"),
#                             (troop_slot_eq, "$g_talk_troop", slot_troop_discussed_rebellion, 0),
#                             (neg|faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "$g_talk_troop"),
#                             (troop_slot_ge, "$g_talk_troop", slot_troop_leaded_party, 1),
#                             (str_store_troop_name, s12, "$supported_pretender"),
#                             (str_store_faction_name, s14, "$supported_pretender_old_faction"),
#                             (faction_get_slot, ":old_faction_lord", "$supported_pretender_old_faction", slot_faction_leader),
#                             (str_store_troop_name, s15, ":old_faction_lord"),
#                             ],
#   "{s12} is the rightful ruler of {s14}. Join our cause against the usurper, {s15}!", "lord_join_rebellion_suggest",[]],

[anyone|plyr,"lord_talk",
[
  (eq, "$cheat_mode", 2),
  (gt, "$supported_pretender", 0),
  (eq, "$supported_pretender_old_faction", "$g_talk_troop_faction"),
  (neg|faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "$g_talk_troop"),
  (troop_slot_ge, "$g_talk_troop", slot_troop_leaded_party, 1),
  ],
"{!}CHEAT - Join our cause by force.", "lord_join_rebellion_suggest_cheat",[]],

[anyone|plyr,"party_encounter_lord_hostile_attacker_2",
[
  (eq, "$cheat_mode", 2),
  (gt, "$supported_pretender", 0),
  (eq, "$supported_pretender_old_faction", "$g_talk_troop_faction"),
  (neg|faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "$g_talk_troop"),
  (troop_slot_ge, "$g_talk_troop", slot_troop_leaded_party, 1),
  ],
"{!}CHEAT - Join our cause by force.", "lord_join_rebellion_suggest_cheat",[]],

[anyone,"lord_join_rebellion_suggest_cheat",
[], "Cheat:Allright.",
   "close_window", # unused
[
  (troop_set_slot, "$g_talk_troop", slot_troop_discussed_rebellion, 1),
  (call_script, "script_change_troop_faction", "$g_talk_troop", "$players_kingdom"),
  (assign, "$g_leave_encounter", 1),
  ]],

#  [anyone|plyr,"party_encounter_lord_hostile_attacker_2", [
#                             (gt, "$supported_pretender", 0),
#                             (eq, "$supported_pretender_old_faction", "$g_talk_troop_faction"),
#                             (neg|troop_slot_ge, "$g_talk_troop", slot_troop_intrigue_impatience, 100),
#                             (neg|faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "$g_talk_troop"),
#                             (troop_slot_ge, "$g_talk_troop", slot_troop_leaded_party, 1),
#                             (str_store_troop_name, s12, "$supported_pretender"),
#                             (str_store_faction_name, s14, "$supported_pretender_old_faction"),
#                             (faction_get_slot, ":old_faction_lord", "$supported_pretender_old_faction", slot_faction_leader),
#                             (str_store_troop_name, s15, ":old_faction_lord"),
#                             ],
#   "{s12} is your rightful ruler. Join our cause against the usurper, {s15}!", "lord_join_rebellion_suggest",[]],



#  [anyone,"lord_join_rebellion_suggest", [
#                    (eq,"$talk_context",tc_party_encounter),
#                    (encountered_party_is_attacker),
#                    (lt, "$g_talk_troop_relation", -5),
#      ], "I have no time to bandy words with the likes of you. Now defend yourself!",
#   "party_encounter_lord_hostile_attacker_2",
#   [
#    (try_begin),
#		(neg|troop_slot_ge, "$g_talk_troop", slot_troop_intrigue_impatience, 100),
#		(troop_set_slot, "$g_talk_troop", slot_troop_intrigue_impatience, 100),
#	(try_end),

#    ]],


#removed a number of rebellion scripts...

#Rebellion changes end


[anyone|plyr,"lord_talk",
[
 (troop_get_slot, ":prison_location", "$g_talk_troop", slot_troop_prisoner_of_party),
 (is_between, ":prison_location", centers_begin, centers_end),
 (neg|party_slot_eq, ":prison_location", slot_town_lord, "trp_player"),
 (neq, "$talk_context", tc_prison_break),
],
"I've come to break you out of here.", "lord_prison_break_chains",[]],

[anyone,"lord_prison_break_chains", [],
"Thank the heavens you came! However, I'm not going anywhere with these chains on my legs. You'll need to get the key away from the guard somehow.", "close_window",[]],

[anyone|plyr,"lord_talk",
[
 (ge, "$cheat_mode", 1),
 (neg|troop_slot_ge, "$g_talk_troop", slot_troop_prisoner_of_party, 0),
],
"{!}CHEAT - Take the following action.", "lord_suggest_action_ask",[]],


[anyone,"lord_tell_objective",
[
 (troop_slot_ge, "$g_talk_troop", slot_troop_prisoner_of_party, 0),
],
"What am I doing? What does it look like I'm doing?! I'm a prisoner here!", "lord_pretalk",[]],

[anyone,"lord_tell_objective",
[
 (troop_slot_eq, "$g_talk_troop", slot_troop_leaded_party, -1)
],##diplomacy start+ "men" to {reg65?soldiers:men}
"I am not commanding any {reg65?soldiers:men} at the moment.", "lord_pretalk",[]],
##diplomacy end+




[anyone,"lord_tell_objective", [
(party_slot_eq, "$g_talk_troop_party", slot_party_ai_state, spai_holding_center),
(party_get_attached_to, ":cur_center_no", "$g_talk_troop_party"),
(try_begin),
 (lt, ":cur_center_no", 0),
 (party_get_cur_town, ":cur_center_no", "$g_talk_troop_party"),
(try_end),
(is_between, ":cur_center_no", centers_begin, centers_end),
],
"We are resting at {s1}. {s14}{s15}",
"lord_pretalk",
[(party_get_slot, ":ai_object", "$g_talk_troop_party", slot_party_ai_object),
 (str_store_party_name, s1, ":ai_object")]],







[anyone,"lord_tell_objective", [(party_slot_eq, "$g_talk_troop_party", slot_party_ai_state, spai_holding_center)],
"We are travelling to {s1}. {s14}{s15}", "lord_pretalk",
[(party_get_slot, ":ai_object", "$g_talk_troop_party", slot_party_ai_object),
 (str_store_party_name, s1, ":ai_object"),
]],

[anyone|auto_proceed,"lord_tell_objective", [
(faction_slot_eq, "$g_talk_troop_faction", slot_faction_marshall, "$g_talk_troop"),
(party_slot_eq, "$g_talk_troop_party", slot_party_ai_state, spai_visiting_village)],
"{!}Warning: This line should never display.", "lord_tell_objective_2",
[]],

#fix for translation variable changes
[anyone,"lord_tell_objective_2", [],
"I am heading to the vicinity of {s1}. {s14}{s15}", "lord_pretalk",
[(party_get_slot, ":ai_object", "$g_talk_troop_party", slot_party_ai_object),
 (str_store_party_name, s1, ":ai_object")]],

[anyone,"lord_tell_objective", [
(party_slot_eq, "$g_talk_troop_party", slot_party_ai_state, spai_visiting_village)],
"We are recruiting new soldiers from {s1}. {s14}{s15}", "lord_pretalk",
[(party_get_slot, ":ai_object", "$g_talk_troop_party", slot_party_ai_object),
 (str_store_party_name, s1, ":ai_object")]],




[anyone,"lord_tell_objective", [(party_slot_eq, "$g_talk_troop_party", slot_party_ai_state, spai_patrolling_around_center)],
"We are scouting for the enemy around {s1}. {s14}{s15}", "lord_pretalk",
[(party_get_slot, ":ai_object", "$g_talk_troop_party", slot_party_ai_object),
 (str_store_party_name, s1, ":ai_object"),
]],

#  [anyone,"lord_tell_objective", [(party_slot_eq, "$g_talk_troop_party", slot_party_ai_state, spai_raiding_around_center)],
#   "We ride out to lay waste to village of {s1} to punish the foe for his misdeeds.", "lord_pretalk",[(party_get_slot, ":ai_object", "$g_talk_troop_party", slot_party_ai_object),
#                                                               (str_store_party_name, s1, ":ai_object")]],

[anyone,"lord_tell_objective", [
(party_slot_eq, "$g_talk_troop_party", slot_party_ai_state, spai_raiding_around_center),
(party_get_slot, ":ai_object", "$g_talk_troop_party", slot_party_ai_object),
(str_store_party_name, s1, ":ai_object")
],
"We are laying waste to the village of {s1}. {s14}{s15}", "lord_pretalk",[]],

[anyone,"lord_tell_objective", [(party_slot_eq, "$g_talk_troop_party", slot_party_ai_state, spai_retreating_to_center)],
"We are retreating to {s1}. {s14}{s15}", "lord_pretalk",[(party_get_slot, ":ai_object", "$g_talk_troop_party", slot_party_ai_object),
                                                            (str_store_party_name, s1, ":ai_object")]],

[anyone,"lord_tell_objective", [(party_slot_eq, "$g_talk_troop_party", slot_party_ai_state, spai_besieging_center)],
"We are besieging {s1}. {s14}{s15}", "lord_pretalk",[(party_get_slot, ":ai_object", "$g_talk_troop_party", slot_party_ai_object),
                                                            (str_store_party_name, s1, ":ai_object")]],

[anyone,"lord_tell_objective", [(party_slot_eq, "$g_talk_troop_party", slot_party_ai_state, spai_engaging_army),
                               (party_get_slot, ":ai_object", "$g_talk_troop_party", slot_party_ai_object),
                               (party_is_active, ":ai_object"),
                               ],
"We are fighting against {s1}. {s14}{s15}", "lord_pretalk",
[
  (party_get_slot, ":ai_object", "$g_talk_troop_party", slot_party_ai_object),
  (str_store_party_name, s1, ":ai_object")
  ]],

[anyone,"lord_tell_objective", [
(party_slot_eq, "$g_talk_troop_party", slot_party_ai_state, spai_screening_army)],
"I am screening {s1}'s advance. {s14}{s15}", "lord_pretalk",[
 (party_get_slot, ":ai_object", "$g_talk_troop_party", slot_party_ai_object),
(party_stack_get_troop_id, ":ai_object_commander", ":ai_object", 0),
 (str_store_troop_name, s1, ":ai_object_commander")
]],


[anyone,"lord_tell_objective", [(party_slot_eq, "$g_talk_troop_party", slot_party_ai_state, spai_accompanying_army)],
"We are accompanying {s1}. {s14}{s15}", "lord_pretalk",[(party_get_slot, ":ai_object", "$g_talk_troop_party", slot_party_ai_object),
                                                   (str_store_party_name, s1, ":ai_object")]],


[anyone,"lord_tell_objective",
[
 (faction_slot_eq, "$g_talk_troop_faction", slot_faction_marshall, "$g_talk_troop"),
(neg|faction_slot_eq,  "$g_talk_troop_faction", slot_faction_ai_state, sfai_default),
(neg|faction_slot_eq,  "$g_talk_troop_faction", slot_faction_ai_state, sfai_feast),
  ],
"I am leading the army of the realm.", "lord_talk_ask_about_strategy",[]],


[anyone,"lord_tell_objective",
[
  (assign, ":pass", 0),
  (try_begin),
    (party_slot_eq, "$g_talk_troop_party", slot_party_ai_state, spai_undefined),
    (assign, ":pass", 1),
  (else_try),
    (party_slot_eq, "$g_talk_troop_party", slot_party_ai_state, spai_engaging_army),
    (party_get_slot, ":ai_object", "$g_talk_troop_party", slot_party_ai_object),
    (neg|party_is_active, ":ai_object"),
    (assign, ":pass", 1),
  (try_end),
  (eq, ":pass", 1),
  ],
"We are reconsidering our next objective.", "lord_pretalk",[]],

[anyone,"lord_tell_objective", [],
"I don't know: {reg1} {s1} (ERROR)", "lord_pretalk",[(party_get_slot, reg1, "$g_talk_troop_party", slot_party_ai_state),
                                             (party_get_slot, ":ai_object", "$g_talk_troop_party", slot_party_ai_object),
                                                            (str_store_party_name, s1, ":ai_object")]],

[anyone|plyr,"lord_talk",
[
  (eq, "$talk_context", tc_party_encounter),
 (eq, 1, 0),
  (eq, "$g_talk_troop_faction", "$players_kingdom"),
  (party_slot_eq, "$g_encountered_party", slot_party_following_player, 0),
  (neg|faction_slot_eq, "$g_talk_troop_faction", slot_faction_marshall, "trp_player"),
  ],
"Will you follow me? I have a plan.", "lord_ask_follow",[]],

[anyone,"lord_ask_follow", [(party_get_slot, ":dont_follow_until_time", "$g_encountered_party", slot_party_dont_follow_player_until_time),
                           (store_current_hours, ":cur_time"),
                           (lt, ":cur_time", ":dont_follow_until_time")],
"I enjoy your company, {playername}, but there are other things I must attend to. Perhaps in a few days I can ride with you again.", "close_window",
[(assign, "$g_leave_encounter",1)]],

[anyone,"lord_ask_follow", [(troop_get_slot, ":troop_renown", "$g_talk_troop", slot_troop_renown),
                           (troop_get_slot, ":player_renown", "trp_player", slot_troop_renown),
                           (val_mul, ":troop_renown", 3),
                           (val_div, ":troop_renown", 4),
                           (lt, ":player_renown", ":troop_renown"),
                           ],
"That would hardly be proper, {playername}. Why don't you follow me instead?", "close_window",
[(assign, "$g_leave_encounter",1)]],

[anyone,"lord_ask_follow", [(lt, "$g_talk_troop_effective_relation", 25)],
"{s43}", "close_window",
[
    (call_script, "script_lord_comment_to_s43", "$g_talk_troop", "str_lord_follow_refusal_default"),
    (assign, "$g_leave_encounter",1)]],
#Post 0907 changes end

[anyone,"lord_ask_follow", [],
"Lead the way, {playername}! Let us bring death and defeat to all our enemies.", "close_window",
[(party_set_slot, "$g_talk_troop_party", slot_party_commander_party, "p_main_party"),
 #(call_script, "script_party_decide_next_ai_state_under_command", "$g_talk_troop_party"),
 (call_script, "script_npc_decision_checklist_party_ai", "$g_talk_troop"), #This handles AI for both marshal and other parties
(call_script, "script_party_set_ai_state", "$g_talk_troop_party", reg0, reg1),

 (store_current_hours, ":follow_until_time"),
 (store_add, ":follow_period", 30, "$g_talk_troop_relation"),
 (val_div, ":follow_period", 2),
 (val_add, ":follow_until_time", ":follow_period"),
 (party_set_slot, "$g_encountered_party", slot_party_follow_player_until_time, ":follow_until_time"),
 (party_set_slot, "$g_encountered_party", slot_party_following_player, 1),
 (assign, "$g_leave_encounter",1)]],

[anyone,"lord_talk_preoffer", [], "Yes?", "lord_talk_offer",[]],


##  [anyone|plyr,"lord_talk_offer", [(troop_slot_eq, "$g_talk_troop", slot_troop_is_prisoner, 0),
##                             (neg|faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "$g_talk_troop"), #he is not a faction leader!
##                             (call_script, "script_get_number_of_hero_centers", "$g_talk_troop"),
##                             (eq, reg0, 0), #he has no castles or towns
##                             (hero_can_join),
##                             ],
##   "I need capable men like you. Will you join me?", "knight_offer_join",[
##       ]],

[anyone|plyr,"lord_talk_offer", [(eq,1,0)],
"I wish to ransom one of your prisoners.", "knight_offer_join",[
    ]],

[anyone|plyr,"lord_talk_offer", [], "Never mind.", "lord_pretalk",[]],

[anyone ,"knight_offer_join", [(call_script, "script_cf_is_quest_troop", "$g_talk_troop")],
"I fear I cannot join you at the moment, {playername}, I've important business to attend to and it cannot wait.", "hero_pretalk",[]],

[anyone ,"knight_offer_join", [(lt, "$g_talk_troop_relation", 5),
                              (store_character_level,":player_level","trp_player"),
                              (store_character_level,":talk_troop_level","$g_talk_troop"),
                              (val_mul,":player_level",2),
                              (lt, ":player_level", ":talk_troop_level")],
"You forget your place, {sir/madam}. I do not take orders from the likes of you.", "hero_pretalk",[]],

[anyone ,"knight_offer_join", [
    (assign, ":num_player_companions",0),
    (try_for_range, ":hero_id", heroes_begin, heroes_end),
      (troop_slot_eq, ":hero_id",slot_troop_occupation, slto_player_companion),
      (val_add, ":num_player_companions",1),
    (try_end),
    (assign, reg5, ":num_player_companions"),
    (store_add, reg6, reg5, 1),
    (val_mul, reg6,reg6),
    (val_mul, reg6, 1000),
    (gt, reg6,0)], #note that we abuse the value of reg6 in the next line.
"I would be glad to fight at your side, my friend, but there is a problem...\
The thing is, I've found myself in a bit of debt that I must repay very soon. {reg6} denars altogether,\
and I am honour-bound to return every coin. Unless you've got {reg6} denars with you that you can spare,\
I've to keep my mind on getting this weight off my neck.", "knight_offer_join_2",[]],
[anyone ,"knight_offer_join", [(gt,reg6, 100000)], "Join you? I think not.", "close_window",[]],
[anyone ,"knight_offer_join", [], "Aye, my friend, I'll be happy to join you.", "knight_offer_join_2",[]],

[anyone|plyr,"knight_offer_join_2", [(gt, reg6,0),(store_troop_gold, ":gold", "trp_player"),(gt,":gold",reg6)],
"Here, take it, all {reg6} denars you need. 'Tis only money.", "knight_offer_join_accept",[(troop_remove_gold, "trp_player",reg6)]],
[anyone|plyr,"knight_offer_join_2", [(le, reg6,0)], "Then let us ride together, my friend.", "knight_offer_join_accept",[]],

[anyone|plyr,"knight_offer_join_2", [(eq, "$talk_context", tc_hero_freed)], "That's good to know. I will think on it.", "close_window",[]],
[anyone|plyr,"knight_offer_join_2", [(neq, "$talk_context", tc_hero_freed)], "That's good to know. I will think on it.", "hero_pretalk",[]],


[anyone ,"knight_offer_join_accept", [(troop_slot_ge, "$g_talk_troop", slot_troop_leaded_party, 1)],
"I've some trusted men in my band who could be of use to you. What do you wish to do with them?", "knight_offer_join_accept_party",[
   ]],
[anyone ,"knight_offer_join_accept", [], "Ah, certainly, it might be fun!", "close_window",[
   (call_script, "script_recruit_troop_as_companion", "$g_talk_troop"),
   (assign, "$g_leave_encounter",1)
   ]],

[anyone|plyr,"knight_offer_join_accept_party", [], "You may disband your men. I've no need for other troops.", "knight_join_party_disband",[]],
[anyone|plyr,"knight_offer_join_accept_party", [(troop_get_slot, ":companions_party","$g_talk_troop", slot_troop_leaded_party),
                                    (party_can_join_party,":companions_party","p_main_party"),
   ], "Your men may join as well. We need every soldier we can muster.", "knight_join_party_join",[]],
[anyone|plyr,"knight_offer_join_accept_party", [(is_between,"$g_encountered_party",centers_begin, centers_end)], "Lead your men out of the town. I shall catch up with you on the road.", "knight_join_party_lead_out",[]],
[anyone|plyr,"knight_offer_join_accept_party", [(neg|is_between,"$g_encountered_party",centers_begin, centers_end)],
"Keep doing what you were doing. I'll catch up with you later.", "knight_join_party_lead_out",[]],


[anyone ,"knight_join_party_disband", [], "Ah . . . Very well, {playername}. Much as I dislike losing good men,\
the decision is yours. I'll disband my troops and join you.", "close_window",[
   (call_script, "script_recruit_troop_as_companion", "$g_talk_troop"),

   (troop_get_slot, ":companions_party","$g_talk_troop", slot_troop_leaded_party),
   (party_detach, ":companions_party"),
   (remove_party, ":companions_party"),
   (assign, "$g_leave_encounter",1)
   ]],

[anyone ,"knight_join_party_join", [], "Excellent.\
My lads and I will ride with you.", "close_window",[
   (call_script, "script_recruit_troop_as_companion", "$g_talk_troop"),
   (party_remove_members, "p_main_party", "$g_talk_troop", 1),

   (troop_get_slot, ":companions_party","$g_talk_troop", slot_troop_leaded_party),
   (assign, "$g_move_heroes", 1),
   (call_script, "script_party_add_party", "p_main_party", ":companions_party"),
   (party_detach, ":companions_party"),
   (remove_party, ":companions_party"),
   (assign, "$g_leave_encounter",1)
   ]],

[anyone ,"knight_join_party_lead_out", [], "Very well then.\
I shall maintain a patrol of this area. Return if you have further orders for me.", "close_window",[
   (call_script, "script_recruit_troop_as_companion", "$g_talk_troop"),
   (party_remove_members, "p_main_party", "$g_talk_troop", 1),

   (troop_get_slot, ":companions_party","$g_talk_troop", slot_troop_leaded_party),
   (party_set_faction, ":companions_party", "fac_player_supporters_faction"),
   (party_detach, ":companions_party"),
   (party_set_ai_behavior, ":companions_party", ai_bhvr_patrol_location),
   (party_set_flags, ":companions_party", pf_default_behavior, 0),
   ]],

[anyone,"lord_enter_service_reject", [
  (eq, "$players_kingdom", "fac_player_supporters_faction"),
], "Indeed.... Did you offer vassalage, then, just to by time? Very well -- you shall have time to reconsider, but if you are toying with me, it will do your reputation no credit.", "close_window",
[
  (assign, "$g_leave_encounter", 1),
 ]],

[anyone,"lord_give_oath_give_up", [
  (eq, "$players_kingdom", "fac_player_supporters_faction"),
], "Indeed.... Did you offer vassalage, then, just to buy time? Very well -- you shall have time to reconsider, but if you are toying with me, it will do your reputation no credit.", "close_window",
[
  (assign, "$g_leave_encounter", 1),
 ]],



[anyone,"lord_enter_service_reject", [], "What pigswill!\
And to think I would offer you a place among my nobles. Begone, beggar, before I lose my temper!", "close_window",
[
  (try_begin),
    (store_partner_quest, ":lords_quest"),
    (eq, ":lords_quest", "qst_join_faction"),
    (call_script, "script_abort_quest", "qst_join_faction", 1),
  (try_end),
  (assign, "$g_invite_faction", 0),
  (assign, "$g_invite_faction_lord", 0),
  (assign, "$g_invite_offered_center", 0),
  (assign, "$g_leave_encounter", 1),
 ]],

[anyone,"lord_ask_enter_service", [(gt, "$players_kingdom", 0),
                                  (neq, "$players_kingdom", "$g_talk_troop_faction"),
                                  (faction_get_slot, ":players_lord", "$players_kingdom", slot_faction_leader),
                                  (neq, ":players_lord", "trp_player"),
                                  (str_store_troop_name, s5, ":players_lord"),
                                  ], "You are already oath-bound to serve {s5}, are you not?", "lord_give_oath_under_oath_already",[]],
[anyone|plyr ,"lord_give_oath_under_oath_already", [], "Indeed I am, {s65}. Forgive my rambling.", "lord_pretalk",[]],

[anyone,"lord_ask_enter_service", [(lt, "$g_talk_troop_effective_relation", -5)], "I accept oaths only from those I can trust to keep them, {playername}.", "lord_pretalk",[]],

[anyone,"lord_ask_enter_service", [
##diplomacy start+
#(troop_get_type, ":type", "trp_player"),
#(eq, ":type", 1),
(neg|is_between, "$g_invite_offered_center", centers_begin, centers_end), #SB : skip this if offered somehow
(lt, "$g_disable_condescending_comments", 2),
(call_script, "script_cf_dplmc_faction_has_bias_against_gender", "$g_talk_troop_faction", "$character_gender"),
##diplomacy end+

(try_for_range, ":center", centers_begin, centers_end),
  (party_slot_eq, ":center", slot_town_lord, "trp_player"),
  (assign, "$bypass_female_vassal_explanation", 1),
(try_end),
(eq, "$bypass_female_vassal_explanation", 0),

#  (troop_get_slot, ":husband", "trp_player", slot_troop_spouse),
##diplomacy start+ Add bizarro-world version
], "My {lord/lady}, you seem to have the makings of a good war leader. For a {man/woman} to show such skill is an uncommon thing in Calradia, but not completely without precedent. Noble{men/women} have often taken command of armies after their {wives/husbands} or {mothers/fathers} were slain or captured, for example.", "lord_ask_enter_service_female_2",[
(assign, "$bypass_female_vassal_explanation", 1),
##diplomacy end+
]],

[anyone,"lord_ask_enter_service_female_2", [
##diplomacy start+
(try_begin),
	(eq, reg65, 1),
	(call_script, "script_dplmc_print_cultural_word_to_sreg", "$g_talk_troop", DPLMC_CULTURAL_TERM_KING_FEMALE, s0),
(else_try),
	(call_script, "script_dplmc_print_cultural_word_to_sreg", "$g_talk_troop", DPLMC_CULTURAL_TERM_KING, s0),
(try_end),
],#next line, replace king with {s0} and gendered words with either-way equivalent
"However, I have never heard of a {s0} who granted a fief to a {man/woman}, no matter how valorous, simply because {reg65?she:he} needed an extra vassal. Were I to do such a thing, I would raise eyebrows across Calradia. {People/Men} would say that I was besotted or bewitched, or that I aimed to overturn the natural order of things. As much as I regret it, I cannot afford to grant you a fief.", "lord_ask_enter_service_female_response",[]],
##diplomacy end+

[anyone|plyr, "lord_ask_enter_service_female_response", [],
"What if I were to take one of your enemy's castles by force?", "lord_ask_enter_service_female_solution_capture", []],

[anyone|plyr, "lord_ask_enter_service_female_response", [
(neg|troop_slot_ge, "trp_player", slot_troop_spouse, active_npcs_begin),
],
"What if I were to marry one of your lords?", "lord_ask_enter_service_female_solution_marriage", []],

[anyone|plyr, "lord_ask_enter_service_female_response", [],
"Perhaps one of your competitors will prove to be more open-minded.", "lord_ask_enter_service_female_solution_competitor", []],

[anyone|plyr, "lord_ask_enter_service_female_response", [],
"I would be willing to fight for you, even without the fief.", "lord_ask_enter_service", []],

[anyone|plyr, "lord_ask_enter_service_female_response", [],
"Never mind.", "lord_pretalk", []],

[anyone,"lord_ask_enter_service_female_solution_marriage", [
##diplomacy start+ husband -> {wife/husband}
], "Well, I still would not be willing to grant you any fiefs. However, you would no doubt have the use of your {wife/husband}'s properties, which would allow you to act as one of my vassals in all but name. Did you have an other questions?", "lord_ask_enter_service_female_response",[]],
##diplomacy end+

[anyone,"lord_ask_enter_service_female_solution_competitor", [
], "Oh, perhaps you might find someone who was truly desperate -- but then, I would think, they would not have many fiefs to bestow. Did you have an other questions?", "lord_ask_enter_service_female_response",[]],

 [anyone,"lord_ask_enter_service_female_solution_capture", [
], "Well, in that case, depending on the circumstances, I might be inclined to let you keep it. Did you have an other questions?", "lord_ask_enter_service_female_response",[]],


 [anyone,"lord_ask_enter_service",
[
  (assign, "$g_invite_offered_center", -1),
  (troop_get_slot, ":renown", "trp_player", slot_troop_renown),
  (store_mul, ":vassal_potential", "$g_talk_troop_effective_relation", 5),
  (val_add, ":vassal_potential", ":renown"),
  (call_script, "script_get_number_of_hero_centers", "trp_player"),
  (assign, ":num_centers_owned", reg0),
  (store_mul, ":center_affect", ":num_centers_owned", 50),
  (val_add, ":vassal_potential", ":center_affect"),
  ##diplomacy start+
  #(troop_get_type, ":is_female", "trp_player"),##Get gender from a script instead
  (assign, ":is_female", "$character_gender"),
  (assign, ":faction_prejudiced", 0),
  (try_begin),
    (lt, "$g_disable_condescending_comments", 0),#<- OPTION: Extra prejudice
    (call_script, "script_cf_dplmc_faction_has_bias_against_gender", "$g_talk_troop_faction", ":is_female"),
    (assign, ":faction_prejudiced", 1),
    (val_div, ":vassal_potential", 2),
  (try_end),
  ##diplomacy end+
  (ge, ":vassal_potential", 150),
  (try_begin),
   ##diplomacy start+
   #(eq, ":is_female", 0),#dplmc+ removed
   (this_or_next|ge, "$g_disable_condescending_comments", 2),#<- OPTION: No prejudice
   (eq, ":faction_prejudiced", 0),
   ##diplomacy end+
    (eq, ":num_centers_owned", 0),
    (call_script, "script_get_poorest_village_of_faction", "$g_talk_troop_faction"),
    (gt, reg0, 0),
    (assign, "$g_invite_offered_center", reg0),
  (try_end),
  ##diplomacy start+ Replace "sword" with cultural equivalent
  (call_script, "script_dplmc_print_cultural_word_to_sreg", "$g_talk_troop", DPLMC_CULTURAL_TERM_WEAPON, s0),
  ],#Next line replace "accept your sword" with "accept your {s0}"
"You are known as a brave {man-at-arms/warrior} and a fine leader of men, {playername}.\
 I shall be pleased to accept your {s0} into my service and bestow vassalage upon you,\
 if you are ready to swear homage to me.", "lord_give_oath_1",[]],

##Replace "sword" with cultural equivalent
[anyone,"lord_ask_enter_service", [
(call_script, "script_dplmc_print_cultural_word_to_sreg", "$g_talk_troop", DPLMC_CULTURAL_TERM_WEAPON, s0),
], "You've yet to show yourself as a competent commander, {playername}.\
 Take your {s0} to my enemies and prove to me that you are worthy of becoming my vassal.\
 Then we may speak more of this.", "lord_pretalk",[]],
##diplomacy end+

[anyone|plyr,"lord_give_oath_1", [],  "I am ready, {s65}.", "lord_give_oath_2", []],
[anyone|plyr,"lord_give_oath_1", [],  "Forgive me, {s65}, I must give the matter more thought first...", "lord_give_oath_give_up", []],

[anyone,"lord_give_oath_give_up", [
##diplomacy start+
#(troop_get_type, ":type", "trp_player"),
#(eq, ":type", 1),
  (eq, "$character_gender", tf_female),
##diplomacy end+
],  "Take whatever time you need, my lady.", "lord_pretalk", []],

[anyone,"lord_give_oath_give_up", [],  "What are you playing at, {playername}? Go and make up your mind, and stop wasting my time.", "close_window", [
#SB : change relation for offending potential liege
(call_script, "script_troop_change_relation_with_troop", "trp_player", "$g_talk_troop", -1),
(assign, "$g_leave_encounter",1)]],
[anyone,"lord_give_oath_2", [],  "Good. Then repeat the words of the oath with me: I swear homage to you as lawful ruler of the {s41}.", "lord_give_oath_3", [
        (str_store_faction_name, 41, "$g_talk_troop_faction"),
        (try_begin),
            (is_between, "$g_talk_troop", pretenders_begin, pretenders_end),
            (neg|troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_hero),

            (troop_get_slot, ":rebel_faction", "$g_talk_troop", slot_troop_original_faction),
            (str_store_faction_name, 41, ":rebel_faction"),
        (try_end),
   ]],

[anyone|plyr,"lord_give_oath_3", [],  "I pledge homage to you as lawful ruler of the {s41}.", "lord_give_oath_4", []],
[anyone|plyr,"lord_give_oath_3", [],  "Excuse me, {reg65?my lady:sir}. But I feel I need to think about this.", "lord_give_oath_give_up", []],

[anyone,"lord_give_oath_4", [],  "I will remain as your loyal and devoted {man/follower} as long as my breath remains....", "lord_give_oath_5", []],

[anyone|plyr,"lord_give_oath_5", [],  "I will remain as your loyal and devoted {man/follower} as long as my breath remains...", "lord_give_oath_6", []],
[anyone|plyr,"lord_give_oath_5", [],  "{reg65?My lady:Sir}, may I ask for some time to think about this?", "lord_give_oath_give_up", []],

[anyone,"lord_give_oath_6", [],  "...and I will be at your side to fight your enemies should you need my sword.", "lord_give_oath_7", []],

[anyone|plyr,"lord_give_oath_7", [],  "...and I will be at your side to fight your enemies should you need my sword.", "lord_give_oath_8", []],
[anyone|plyr,"lord_give_oath_7", [],  "{reg65?My lady:My lord}, please give me more time to think about this.", "lord_give_oath_give_up", []],

[anyone,"lord_give_oath_8", [],  "Finally, I will uphold your lawful claims and those of your legitimate heirs.", "lord_give_oath_9", []],

[anyone|plyr,"lord_give_oath_9", [],  "Finally, I will uphold your lawful claims and those of your legitimate heirs.", "lord_give_oath_10", []],
[anyone|plyr,"lord_give_oath_9", [],  "{reg65?My lady:Sir}, I must have more time to consider this.", "lord_give_oath_give_up", []],

[anyone,"lord_give_oath_10", [],  "Very well. You have given me your solemn oath, {playername}. May you uphold it always, with proper courage and devotion.", "lord_give_oath_go_on_2", []],

[anyone,"lord_give_oath_go_on_2",
[
  ##diplomacy start+ Clear an erroneous value for $g_invite_offered_center (perhaps set somewhere else)
  (try_begin),
     (gt, "$g_invite_offered_center", 1),
	 (store_faction_of_party, ":center_faction", "$g_invite_offered_center"),
	 (neq, ":center_faction", "$g_talk_troop_faction"),
	 (assign, reg1, "$g_invite_offered_center"),
	 (display_message, "@{!}ERROR: Tried to offer {reg1} as a fief to the player, but it is not owned by the leader's faction."),
	 (assign, "$g_invite_offered_center", -1),
  (try_end),
  ##diplomacy end+

  (assign, reg1, 1),
  (try_begin),
    (le, "$g_invite_offered_center", 0),
    (assign, reg1, 0),
  (else_try),
    (str_store_party_name, s1, "$g_invite_offered_center"),
  (try_end),
  ],
"Let it be known that from this day forward, you are my sworn {man/follower} and vassal.\
 I give you my protection and grant you the right to bear arms in my name, and I pledge that I shall not deprive you of your life, liberty or properties except by the lawful judgment of your peers or by the law and custom of the land.{reg1? Furthermore I give you the fief of {s1} with all its rents and revenues.:}", "lord_give_oath_go_on_3", []],

[anyone,"lord_give_oath_go_on_3",
[
  ],

"You have done a wise thing, {playername}. Serve me well and I promise, you will rise high.", "lord_give_conclude", []],



##  [anyone,"lord_give_oath_go_on_2", [],  "Then let it be know that from now on, you are my sworn {man/follower}.\
## I give you my protection and grant you the right to bear arms in my name.\
## You have done wisely {playername}. Serve me well and I promise, you will rise high.", "lord_give_oath_5", []],

#  [anyone,"lord_ask_enter_service", [(lt, "$g_talk_troop_relation", 10),
#                                     (store_character_level, ":player_level", "trp_player"),
#                                     (lt, ":player_level", 10),
#                                     ], "I know not much about you. Keep serving me {playername}. Prove your loyality, then I will know I can trust you and accept your oath.", "lord_pretalk",[]],

##  [anyone,"lord_ask_enter_service", [], "What kind of oath are you willing to make?", "lord_oath_what_kind",[]],
##
##  [anyone|plyr ,"lord_oath_what_kind", [], "I will give you my oath to serve you for two months.", "lord_oath_what_kind_2",[(assign, "$temp", 60)]],
##  [anyone|plyr ,"lord_oath_what_kind", [], "I will give you my oath to serve you for three months.", "lord_oath_what_kind_2",[(assign, "$temp", 90)]],
##  [anyone|plyr ,"lord_oath_what_kind", [], "I will give you my oath to serve you for six months.", "lord_oath_what_kind_2",[(assign, "$temp", 180)]],
##  [anyone|plyr ,"lord_oath_what_kind", [], "I will give you my oath to serve you indefinitely.", "lord_oath_what_kind_2",[(assign, "$temp", 720)]],
##  [anyone|plyr ,"lord_oath_what_kind", [], "Maybe I should give more thought to this, my lord.", "lord_oath_what_kind_cancel",[]],
##  [anyone ,"lord_oath_what_kind_cancel", [], "What nonsense is this? Now go make up your mind and stop wasting my time.", "close_window",[]],
##
##  [anyone, "lord_oath_what_kind_2", [], "Hmmm. Do you ask for anything in return?", "lord_oath_what_do_you_want",[]],
##
##  [anyone|plyr, "lord_oath_what_do_you_want", [], "I ask for nothing but your blessing, my lord.", "lord_oath_consider",[(assign,"$temp2",0)]],
##  [anyone|plyr, "lord_oath_what_do_you_want", [], "I only ask for the right to have my own banner, my lord.", "lord_oath_consider",[(assign,"$temp2",1)]],
##  [anyone|plyr, "lord_oath_what_do_you_want", [], "I just ask for the right to hold one castle, my lord.", "lord_oath_consider",[(assign,"$temp2",2)]],
##  [anyone|plyr, "lord_oath_what_do_you_want", [], "I ask for the right to hold two castles, my lord.", "lord_oath_consider",[(assign,"$temp2",4)]],
##  [anyone|plyr, "lord_oath_what_do_you_want", [], "I ask for the right to hold three castles, my lord.", "lord_oath_consider",[(assign,"$temp2",6)]],
##  [anyone|plyr ,"lord_oath_what_do_you_want", [], "Maybe I should give more thought to this, my lord.", "lord_oath_what_kind_cancel",[]],
##
##  [anyone ,"lord_oath_consider", [
##      (store_character_level, ":player_level", "trp_player"),
##      (store_mul, ":benefit", ":player_level", 5),
##      (val_add, ":benefit", "$temp"),
##      (val_add, ":benefit", "$g_talk_troop_relation"),
##
##      (store_mul, ":cost", "$temp2", 100),
##      (lt, ":cost", ":benefit"),
##      ], "That is agreeable {playername}. Give me your oath now and I will accept you as my follower and offer you my protection.", "lord_give_oath_go_on",[]],
##
##  [anyone ,"lord_oath_consider", [], "Hmmm. What you ask for is not acceptible {playername}.", "close_window",[]],
##
##  [anyone|plyr,"lord_give_oath_go_on", [(eq, "$temp", 60)],  "I give you my oath lord, that I will remain in your service for two months.\
## During this time, I will be faithful to you,\
## I will not act in a way to cause you harm, and I will be at your side to fight your enemies should you need my sword.", "lord_give_oath_go_on_2", []],
##  [anyone|plyr,"lord_give_oath_go_on", [(eq, "$temp", 90)],  "I give you my oath lord, that I will remain in your service for three months.\
## During this time, I will be faithful to you,\
## I will not act in a way to cause you harm, and I will be at your side to fight your enemies should you need my sword.", "lord_give_oath_go_on_2", []],
##  [anyone|plyr,"lord_give_oath_go_on", [(eq, "$temp", 180)],  "I give you my oath lord, that I will remain in your service for six months.\
## During this time, I will be faithful to you,\
## I will not act in a way to cause you harm, and I will be at your side to fight your enemies should you need my sword.", "lord_give_oath_go_on_2", []],
##  [anyone|plyr,"lord_give_oath_go_on", [(gt, "$temp", 700)],  "I give you my oath lord, that I will remain as your loyal and devoted {man/follower} as long as my breath remains.\
## I will never act in a way to cause you harm, and I will be at your side to fight your enemies should you need my sword.", "lord_give_oath_go_on_2", []],
##
##  [anyone,"lord_give_oath_go_on_2", [(eq,"$temp2",0)],  "Then let it be know that from now on, you are my sworn {man/follower}.\
## I give you my protection and grant you the right to bear arms in my name.\
## You have done wisely {playername}. Serve me well and I promise, you will rise high.", "lord_give_oath_5", []],
##
##  [anyone,"lord_give_oath_go_on_2", [(eq,"$temp2",1)],  "Then let it be know that from now on, you are my sworn {man/follower}.\
## I give you my protection and grant you the right to hold your own banner.\
## You have done wisely {playername}. Serve me well and I promise, you will rise high.", "lord_give_oath_5", []],
##
##  [anyone,"lord_give_oath_go_on_2", [(eq,"$temp2",2)],  "Then let it be know that from now on, you are my sworn {man/follower} and vassal.\
## I give you my protection and grant you the right to hold a castle.\
## You have done wisely {playername}. Serve me well and I promise, you will rise high.", "lord_give_oath_5", []],
##
##  [anyone,"lord_give_oath_go_on_2", [(eq,"$temp2",4)],  "Then let it be know that from now on, you are my sworn {man/follower} and vassal.\
## I give you my protection and grant you the right to hold two castles.\
## You have done wisely {playername}. Serve me well and I promise, you will rise high.", "lord_give_oath_5", []],
##
##  [anyone,"lord_give_oath_go_on_2", [],  "Then let it be know that from now on, you are my sworn {man/follower} and vassal.\
## I give you my protection and grant you the right to hold three castles.\
## You have done wisely {playername}. Serve me well and I promise, you will rise high.", "lord_give_oath_5", []],

[anyone|plyr,"lord_give_conclude",
[
##diplomacy start+ Get gender from script
# (troop_get_type, reg39, "$g_talk_troop"),
 # (assign, reg39, 0),
 # (try_begin),
    # (call_script, "script_cf_dplmc_troop_is_female", "$g_talk_troop"),
    # (assign, reg39, 1),
 # (try_end),
 # (assign, reg65, reg39),
 #SB : proper script call
 (call_script, "script_dplmc_store_troop_is_female_reg", "$g_talk_troop", 65),
 (assign, reg39, reg65),
##diplomacy end+
 (try_begin), #activate husband as pretender
   ##diplomacy start+
   (this_or_next|troop_slot_eq, "trp_player", slot_troop_spouse, "$g_talk_troop"),
   ##diplomacy end+
   (troop_slot_eq, "$g_talk_troop", slot_troop_spouse, "trp_player"),
   (str_store_string, s41, "str_very_well__you_are_now_my_liege_as_well_as_my_husband"),
 (else_try), #all other situations
   (str_store_string, s41, "str_i_thank_you_reg39my_ladylord"),
 (try_end),
],  "{s41}", "lord_give_conclude_2",
[
#Pretender changes
(assign, ":is_pretender", 0),
 (try_begin),
   (this_or_next|is_between, "$g_talk_troop", pretenders_begin, pretenders_end),
   (troop_slot_eq, "$g_talk_troop", slot_troop_spouse, "trp_player"),
   (neg|faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "$g_talk_troop"),
   (assign, ":is_pretender", 1),

   (assign, "$supported_pretender", "$g_talk_troop"),
   (troop_get_slot, "$supported_pretender_old_faction", "$g_talk_troop", slot_troop_original_faction),
   (troop_set_faction, "$g_talk_troop", "fac_player_supporters_faction"),
   (faction_set_slot, "fac_player_supporters_faction", slot_faction_leader, "$g_talk_troop"),
   (assign, "$g_talk_troop_faction", "fac_player_supporters_faction"),

   (quest_set_slot, "qst_rebel_against_kingdom", slot_quest_giver_troop, "$g_talk_troop"),
   (quest_set_slot, "qst_rebel_against_kingdom", slot_quest_target_faction, "$supported_pretender_old_faction"),

   (str_store_faction_name_link, s14, "$supported_pretender_old_faction"),
   (str_store_troop_name_link, s13, "$g_talk_troop"),
   (setup_quest_text,"qst_rebel_against_kingdom"),
   (str_store_string, s2, "@You promised to help {s13} claim the throne of {s14}."),
   (call_script, "script_start_quest", "qst_rebel_against_kingdom", "$g_talk_troop"),
 (try_end),

(try_begin),
   (eq, "$players_kingdom", "fac_player_supporters_faction"),
   (call_script, "script_deactivate_player_faction"),
   (try_for_range, ":npc", active_npcs_begin, active_npcs_end),
      (store_faction_of_troop, ":npc_faction", ":npc"),
      (eq, ":npc_faction", "fac_player_supporters_faction"),
      (troop_slot_eq, ":npc", slot_troop_occupation, slto_kingdom_hero),
      (call_script, "script_change_troop_faction", ":npc", "$g_talk_troop_faction"),
   (try_end),
(try_end),

 (try_begin),
   (is_between, "$players_oath_renounced_against_kingdom", kingdoms_begin, kingdoms_end),
   (neq, "$players_oath_renounced_against_kingdom", "$g_talk_troop_faction"),
   (store_relation, ":relation", "fac_player_supporters_faction", "$players_oath_renounced_against_kingdom"),
   (val_min, ":relation", -40),
   (call_script, "script_set_player_relation_with_faction", "$players_oath_renounced_against_kingdom", ":relation"),
   (call_script, "script_update_all_notes"),
   (assign, "$g_recalculate_ais", 1),
 (try_end),

 (try_begin),
   (is_between, "$players_kingdom", kingdoms_begin, kingdoms_end),
   (neq, "$players_kingdom", "fac_player_supporters_faction"),
   (neq, "$players_kingdom", "$g_talk_troop_faction"), #ie, don't leave faction if the player is already part of the same kingdom

   (faction_get_slot, ":old_leader", "$players_kingdom", slot_faction_leader),
   (call_script, "script_add_log_entry", logent_renounced_allegiance,   "trp_player",  -1, ":old_leader", "$players_kingdom"),
   (try_begin),
     (eq, ":is_pretender", 1),
     (call_script, "script_activate_player_faction", "$g_talk_troop"),
   (try_end),
   (call_script, "script_player_leave_faction", 0),
 (try_end),

 (call_script, "script_player_join_faction", "$g_talk_troop_faction"),

 (try_begin),
   (gt, "$g_invite_offered_center", 0),
   (call_script, "script_give_center_to_lord", "$g_invite_offered_center", "trp_player", 0),
   (try_begin),
      (faction_slot_eq, "$players_kingdom", slot_faction_political_issue, "$g_invite_offered_center"),
      (faction_set_slot, "$players_kingdom", slot_faction_political_issue, -1),
   (try_end),
 (try_end),
 (call_script, "script_add_log_entry", logent_pledged_allegiance,   "trp_player",  -1, "$g_talk_troop", "$g_talk_troop_faction"),

 (try_begin),
   (check_quest_active, "qst_join_faction"),
   (eq, "$g_invite_faction_lord", "$g_talk_troop"),
   (call_script, "script_end_quest", "qst_join_faction"),
 (else_try),
   (check_quest_active, "qst_join_faction"),
   (call_script, "script_abort_quest", "qst_join_faction", 0),
 (try_end),
 (assign, "$player_has_homage" ,1),
 (assign, "$g_player_banner_granted", 1),
 (assign, "$g_invite_faction", 0),
 (assign, "$g_invite_faction_lord", 0),
 (assign, "$g_invite_offered_center", 0),
 (assign, "$g_leave_encounter",1)]],

[anyone,"lord_give_conclude_2", [
(troop_slot_eq, "$g_talk_troop", slot_troop_spouse, "trp_player"),
#diplomacy start+ either gender PC can marry opposite-gender lords
#load relation text into s0
(call_script, "script_dplmc_print_player_spouse_says_my_husband_wife_to_s0", "$g_talk_troop", 0),
],  "So be it, {s0}. May all my vassals be as valiant and loyal as you.", "close_window", [(assign, "$g_leave_encounter",1)]],
#diplomacy end+

[anyone,"lord_give_conclude_2", [],  "I have great hopes for you {playername}.\
I know you shall prove yourself worthy of the trust I have placed in you.", "close_window", [(assign, "$g_leave_encounter",1)]],



[anyone,"lord_ask_enter_service", [(str_store_faction_name,5,"$g_talk_troop_faction")], "Heh, a wise move,\
{playername}. With loyal service, a {man/woman} in my service could become wealthy and powerful,\
and our enemies... Well, our enemies are as wheat before a scythe.\
However, to enter my service you must first renounce all worldly oaths and bonds,\
and swear to serve only the {s5}.", "lord_enter_service_swear",[]],
[anyone|plyr ,"lord_enter_service_swear", [], "I do so swear, {s65}.", "lord_enter_service_swear_accepted",[]],
[anyone|plyr ,"lord_enter_service_swear", [], "I need some time to think about this.", "lord_enter_service_swear_denied",[]],
[anyone ,"lord_enter_service_swear_denied", [], "Are you having me on? I've no time for games, {playername}.\
Make up your mind and stop wasting my time.", "close_window",[(assign, "$g_leave_encounter",1)]],

[anyone ,"lord_enter_service_swear_accepted", [(str_store_faction_name,5,"$g_talk_troop_faction")],
"Then it is my pleasure to welcome you to the service of my house. From this day on, {playername},\
you are a soldier of the {s5} with all the duties and privileges that come with it.", "lord_enter_service_swear_accepted_2",
[
]],

[anyone ,"lord_enter_service_swear_accepted_2", [(str_store_faction_name,5,"$g_talk_troop_faction")],
"I charge you with rooting out and destroying the forces of our enemies wherever you may find them.\
Moreover, I will have special tasks for you from time to time, as may some of my other vassal lords.\
Serve, fight, and honour your oaths. These things will take you far, if you've a mind for promotion.\
May God grant us long lives and many victories to toast in my hall!", "close_window",[(assign, "$g_leave_encounter",1)]],

[anyone,"lord_ask_leave_service", [(ge, "$g_talk_troop_relation", 1)], "Hrm.\
Has your oath become burdensome, {playername}? It is unusual to request release from homage,\
but in respect of your fine service, I will not hold you if you truly wish to end it.\
Though you would be sorely missed.", "lord_ask_leave_service_verify",[]],
[anyone,"lord_ask_leave_service", [], "Release from homage? Hmm, perhaps it would be for the best...\
However, {playername}, you must be sure that release is what you desire. This is not a thing done lightly.", "lord_ask_leave_service_verify",[]],

[anyone|plyr ,"lord_ask_leave_service_verify", [], "It is something I must do, {s65}.", "lord_ask_leave_service_2",[]],
[anyone|plyr ,"lord_ask_leave_service_verify", [], "You are right, {s65}. My place is here.", "lord_ask_leave_service_giveup",[]],

[anyone,"lord_ask_leave_service_giveup", [], "I am pleased to hear it, {playername}.\
I hope you'll banish such unworthy thoughts from your mind from now on.", "lord_pretalk",[]],

[anyone,"lord_ask_leave_service_2", [], "Then you are sure? Also, be aware that if you leave my services, you will be surrendering to me all the fiefs which you hold in my name.", "lord_ask_leave_service_verify_again",[]],
[anyone|plyr ,"lord_ask_leave_service_verify_again", [], "Yes, {s65}.", "lord_ask_leave_service_3",[]],
[anyone|plyr ,"lord_ask_leave_service_verify_again", [], "Of course not, {s65}. I am ever your loyal vassal.", "lord_ask_leave_service_giveup",[]],

[anyone,"lord_ask_leave_service_3", [], "As you wish. I hereby declare your oaths to be null and void.\
You will no longer hold land or titles in my name, and you are released from your duties to my house.\
You are free, {playername}.", "lord_ask_leave_service_end",
[
     (call_script, "script_add_log_entry", logent_renounced_allegiance,   "trp_player",  -1, "$g_talk_troop", "$g_talk_troop_faction"),
     (call_script, "script_player_leave_faction", 1), #1 means give back fiefs
 ]],

[anyone|plyr ,"lord_ask_leave_service_end", [], "Thank you, sir. It was an honour to serve you..", "lord_ask_leave_service_end_2",[]],
[anyone|plyr ,"lord_ask_leave_service_end", [], "My thanks. It feels good to be {a free man/free} once again.", "lord_ask_leave_service_end_2",[]],

[anyone ,"lord_ask_leave_service_end_2", [], "Farewell then, {playername}, and good luck go with you.", "close_window",
[(assign, "$g_leave_encounter", 1)]],

#Active quests
##### TODO: QUESTS COMMENT OUT BEGIN

[anyone,"lord_active_mission_1", [(store_partner_quest,":lords_quest"),
                                 (eq,":lords_quest","qst_lend_companion"),
                                 #(troop_slot_eq, "$g_talk_troop", slot_troop_is_prisoner, 0),
                                 (neg|troop_slot_ge, "$g_talk_troop", slot_troop_prisoner_of_party, 0),
                                 (check_quest_active,"qst_lend_companion"),
                                 (quest_slot_eq, "qst_lend_companion", slot_quest_giver_troop, "$g_talk_troop"),
                                 (store_current_day, ":cur_day"),
                                 (quest_get_slot, ":quest_target_amount", "qst_lend_companion", slot_quest_target_amount),
                                 (ge, ":cur_day", ":quest_target_amount"),
##                                    (quest_get_slot, ":quest_target_troop", "qst_lend_companion", slot_quest_target_troop),
##                                    (str_store_troop_name,s14,":quest_target_troop"),
##                                    (troop_get_type, reg3, ":quest_target_troop"),
                                 ],
"Oh, you want your companion back? I see...", "lord_lend_companion_end",[]],




[anyone,"lord_active_mission_1", [(store_partner_quest,":lords_quest"),
                        (eq,":lords_quest","qst_lend_companion")],
"{playername}, I must beg your patience, I still have need of your companion. Please return later when things have settled.", "lord_pretalk",[]],
#default
[anyone,"lord_active_mission_1", [], "Yes, have you made any progress on it?", "lord_active_mission_2",[]],

[anyone|plyr,"lord_active_mission_2",[#(troop_slot_eq, "$g_talk_troop", slot_troop_is_prisoner, 0),
                         (neg|troop_slot_ge, "$g_talk_troop", slot_troop_prisoner_of_party, 0),
                         (check_quest_active,"qst_capture_prisoners"),
                         (quest_slot_eq, "qst_capture_prisoners", slot_quest_giver_troop, "$g_talk_troop"),
                         (quest_get_slot, ":quest_target_amount", "qst_capture_prisoners", slot_quest_target_amount),
                         (quest_get_slot, ":quest_target_troop", "qst_capture_prisoners", slot_quest_target_troop),
                         (party_count_prisoners_of_type, ":count_prisoners", "p_main_party", ":quest_target_troop"),
                         (ge, ":count_prisoners", ":quest_target_amount"),
                         (assign, reg1, ":quest_target_amount"),
                         (str_store_troop_name_plural, s1, ":quest_target_troop")],
"Indeed. I brought you {reg1} {s1} as prisoners.", "lord_generic_mission_thank",
[(quest_get_slot, ":quest_target_amount", "qst_capture_prisoners", slot_quest_target_amount),
 (quest_get_slot, ":quest_target_troop", "qst_capture_prisoners", slot_quest_target_troop),
 (party_remove_prisoners, "p_main_party", ":quest_target_troop", ":quest_target_amount"),
 (party_add_prisoners, "$g_encountered_party", ":quest_target_troop", ":quest_target_amount"),
 (call_script, "script_finish_quest", "qst_capture_prisoners", 100)]],


[anyone|plyr,"lord_active_mission_2",
[
  #(troop_slot_eq, "$g_talk_troop", slot_troop_is_prisoner, 0),
  (neg|troop_slot_ge, "$g_talk_troop", slot_troop_prisoner_of_party, 0),
  (store_partner_quest, ":lords_quest"),
  (eq, ":lords_quest", "qst_capture_enemy_hero"),
  (assign, ":has_prisoner", 0),
  (quest_get_slot, ":quest_target_faction", "qst_capture_enemy_hero", slot_quest_target_faction),
  (party_get_num_prisoner_stacks, ":num_stacks", "p_main_party"),
  (try_for_range, ":i_stack", 0, ":num_stacks"),
    (party_prisoner_stack_get_troop_id, ":stack_troop", "p_main_party", ":i_stack"),
    (troop_is_hero, ":stack_troop"),
    (store_troop_faction, ":stack_faction", ":stack_troop"),
    (eq, ":quest_target_faction", ":stack_faction"),
    (troop_slot_eq, ":stack_troop", slot_troop_occupation, slto_kingdom_hero),
    (assign, ":has_prisoner", 1),
    (quest_set_slot, "qst_capture_enemy_hero", slot_quest_target_troop, ":stack_troop"),
  (try_end),
  (eq, ":has_prisoner", 1),
  (str_store_faction_name, s13, ":quest_target_faction")
  ],
"Oh, indeed. I've captured a lord from {s13} for you.", "capture_enemy_hero_thank",
[]],

[anyone,"capture_enemy_hero_thank", [],
"Many thanks, my friend. He will serve very well for a bargain. You've done a fine work here. Please accept these {reg5} denars for your help.", "capture_enemy_hero_thank_2",
[(quest_get_slot, ":quest_target_troop", "qst_capture_enemy_hero", slot_quest_target_troop),
  (quest_get_slot, ":quest_target_faction", "qst_capture_enemy_hero", slot_quest_target_faction),
  (party_remove_prisoners, "p_main_party", ":quest_target_troop", 1),
  (store_relation, ":reln", "$g_encountered_party_faction", ":quest_target_faction"),
  (try_begin),
    (lt, ":reln", 0),
    (party_add_prisoners, "$g_encountered_party", ":quest_target_troop", 1), #Adding him to the dungeon
  (else_try),
    #Do not add a non-enemy lord to the dungeon (due to recent diplomatic changes or due to a neutral town/castle)
    #(troop_set_slot, ":quest_target_troop", slot_troop_is_prisoner, 0),
    (troop_set_slot, ":quest_target_troop", slot_troop_prisoner_of_party, -1),
  (try_end),
  (quest_get_slot, ":reward", "qst_capture_enemy_hero", slot_quest_gold_reward),
  (assign, reg5, ":reward"),
  (call_script, "script_troop_add_gold", "trp_player", ":reward"),
  (add_xp_as_reward, 2500),
  (call_script, "script_change_player_relation_with_troop", "$g_talk_troop", 4),
  (call_script, "script_end_quest", "qst_capture_enemy_hero"),
]],

[anyone|plyr,"capture_enemy_hero_thank_2", [],
"Certainly, {s65}.", "lord_pretalk",[]],
[anyone|plyr,"capture_enemy_hero_thank_2", [],
"It was nothing.", "lord_pretalk",[]],
[anyone|plyr,"capture_enemy_hero_thank_2", [],
"Give me more of a challenge next time.", "lord_pretalk",[]],

##
##  [anyone|plyr,"lord_active_mission_2", [(troop_slot_eq, "$g_talk_troop", slot_troop_is_prisoner, 0),
##                                         (store_partner_quest,":lords_quest"),
##                                         (eq,":lords_quest","qst_capture_messenger"),
##                                         (quest_get_slot, ":quest_target_troop", ":lords_quest", slot_quest_target_troop),
##                                         (quest_get_slot, ":quest_target_amount", ":lords_quest", slot_quest_target_amount),
##                                         (store_num_parties_destroyed_by_player, ":num_destroyed", "pt_messenger_party"),
##                                         (gt, ":num_destroyed", ":quest_target_amount"),
##                                         (party_count_prisoners_of_type, ":num_prisoners", "p_main_party", ":quest_target_troop"),
##                                         (ge, ":num_prisoners", 1),
##                                         (str_store_troop_name, 3, ":quest_target_troop")],
##   "Indeed sir. I have captured a {s3} my lord.", "lord_generic_mission_thank",[(quest_get_slot, ":quest_target_troop", "qst_capture_messenger", slot_quest_target_troop),
##                                                                     (party_remove_prisoners, "p_main_party", ":quest_target_troop", 1),
##                                                                     (party_add_prisoners, "$g_encountered_party", ":quest_target_troop", 1),#Adding him to the dungeon
##                                                                     (call_script, "script_finish_quest", "qst_capture_messenger", 100)]],
##
##
  [anyone|plyr,"lord_active_mission_2", [#(troop_slot_eq, "$g_talk_troop", slot_troop_is_prisoner, 0),
                                         (neg|troop_slot_ge, "$g_talk_troop", slot_troop_prisoner_of_party, 0),
                                         (store_partner_quest,":lords_quest"),
                                         (eq,":lords_quest","qst_raise_troops"),
                                         (quest_get_slot, ":quest_target_troop", ":lords_quest", slot_quest_target_troop),
                                         (quest_get_slot, ":quest_target_amount", ":lords_quest", slot_quest_target_amount),
                                         (party_count_companions_of_type, ":num_companions", "p_main_party", ":quest_target_troop"),
                                         (ge, ":num_companions", ":quest_target_amount"),
                                         (assign, reg1, ":quest_target_amount"),
                                         (str_store_troop_name_plural, s13, ":quest_target_troop")],
   "Indeed. I have raised {reg1} {s13}. You can take them.", "lord_raise_troops_thank",[(quest_get_slot, ":quest_target_troop", "qst_raise_troops", slot_quest_target_troop),
                                                                                         (quest_get_slot, ":quest_target_amount", "qst_raise_troops", slot_quest_target_amount),
                                                                                         (call_script,"script_change_player_relation_with_troop","$g_talk_troop", 3),
                                                                                         (party_remove_members, "p_main_party", ":quest_target_troop", ":quest_target_amount"),
                                                                                         (call_script, "script_end_quest", "qst_raise_troops"),
                                                                                         (troop_get_slot, ":cur_lords_party", "$g_talk_troop", slot_troop_leaded_party),
                                                                                         (gt, ":cur_lords_party", 0),
                                                                                         (party_add_members, ":cur_lords_party", ":quest_target_troop", ":quest_target_amount"),
                                                                                         #SB : store gender of target troops
                                                                                         (try_begin),
                                                                                           (call_script, "script_cf_dplmc_troop_is_female", ":quest_target_troop"),
                                                                                           (assign, reg13, tf_female),
                                                                                         (else_try),
                                                                                           (assign, reg13, tf_male),
                                                                                         (try_end),
                                                                                         
                                                                                         ]],

  [anyone,"lord_raise_troops_thank", [], #SB : gender string
   "These {reg13?brave women:skilled men} may well turn the tide in my plans, {playername}. I am confident you've trained them well. My thanks and my compliments to you.", "lord_raise_troops_thank_2",[]],

  [anyone|plyr,"lord_raise_troops_thank_2", [], #SB : gender string
   "Well, the {reg13?gals:lads} are at your command now, sir. I am sure you will take good care of them.", "lord_pretalk",[]],


  [anyone|plyr,"lord_active_mission_2", [#(troop_slot_eq, "$g_talk_troop", slot_troop_is_prisoner, 0),
                                         (neg|troop_slot_ge, "$g_talk_troop", slot_troop_prisoner_of_party, 0),

    #                                         (store_partner_quest,":lords_quest"),
    #                                         (eq, ":lords_quest", "qst_collect_taxes"),
                                         (check_quest_active, "qst_collect_taxes"),
                                         (quest_slot_eq, "qst_collect_taxes", slot_quest_giver_troop, "$g_talk_troop"),

                                         (check_quest_succeeded, "qst_collect_taxes"),
                                         (eq, "$qst_collect_taxes_halve_taxes", 0),
                                         (quest_get_slot, ":quest_gold_reward", "qst_collect_taxes", slot_quest_gold_reward),
                                         (store_mul, ":required_gold", ":quest_gold_reward", 8),
                                         (val_div, ":required_gold", 10),
                                         (store_troop_gold, ":gold", "trp_player"),
                                         (ge, ":gold", ":required_gold"),
                                         (assign, reg19, ":quest_gold_reward"),
                                         (quest_get_slot, ":quest_target_center", "qst_collect_taxes", slot_quest_target_center),
                                         (str_store_party_name, s3, ":quest_target_center"),
                                         ],
   "Here are all the taxes from {s3}. It comes up to {reg19} denars.", "lord_collect_taxes_success",
   []],

  [anyone|plyr,"lord_active_mission_2", [#(troop_slot_eq, "$g_talk_troop", slot_troop_is_prisoner, 0),
                                         (neg|troop_slot_ge, "$g_talk_troop", slot_troop_prisoner_of_party, 0),
										  (check_quest_active, "qst_collect_taxes"),
										  (quest_slot_eq, "qst_collect_taxes", slot_quest_giver_troop, "$g_talk_troop"),

#                                         (store_partner_quest,":lords_quest"),
#                                         (eq, ":lords_quest", "qst_collect_taxes"),
                                         (check_quest_succeeded, "qst_collect_taxes"),
                                         (eq, "$qst_collect_taxes_halve_taxes", 1),
                                         (quest_get_slot, ":quest_gold_reward", "qst_collect_taxes", slot_quest_gold_reward),
                                         (store_mul, ":required_gold", ":quest_gold_reward", 95),
                                         (val_div, ":required_gold", 100),
                                         (store_troop_gold, ":gold", "trp_player"),
                                         (ge, ":gold", ":required_gold"),
                                         (assign, reg19, ":quest_gold_reward"),
                                         (quest_get_slot, ":quest_target_center", "qst_collect_taxes", slot_quest_target_center),
                                         (str_store_party_name, s3, ":quest_target_center"),
                                         ],
   "Here are the taxes from {s3}. It comes up to {reg19} denars.", "lord_collect_taxes_half_success",
   []],

  [anyone|plyr,"lord_active_mission_2", [#(troop_slot_eq, "$g_talk_troop", slot_troop_is_prisoner, 0),
										 (neg|troop_slot_ge, "$g_talk_troop", slot_troop_prisoner_of_party, 0),
										  (check_quest_active, "qst_collect_taxes"),
										  (quest_slot_eq, "qst_collect_taxes", slot_quest_giver_troop, "$g_talk_troop"),

#                                         (store_partner_quest,":lords_quest"),
#                                         (eq, ":lords_quest", "qst_collect_taxes"),
                                         (check_quest_failed, "qst_collect_taxes"),
                                         (quest_get_slot, ":quest_gold_reward", "qst_collect_taxes", slot_quest_gold_reward),
                                         (store_troop_gold, ":gold", "trp_player"),
                                         (ge, ":gold", ":quest_gold_reward"),
                                         (assign, reg19, ":quest_gold_reward"),
                                         (quest_get_slot, ":quest_target_center", "qst_collect_taxes", slot_quest_target_center),
                                         (str_store_party_name, s3, ":quest_target_center"),
                                         ],
   "Unfortunately, a revolt broke up while I was collecting the taxes.\
 I could only collect {reg19} denars.", "lord_collect_taxes_fail",
   []],

  [anyone,"lord_collect_taxes_success", [(quest_get_slot, ":total_revenue", "qst_collect_taxes", slot_quest_gold_reward),
                                         (store_mul, ":owner_share", ":total_revenue", 8),
                                         (val_div, ":owner_share", 10),
                                         (assign, reg20, ":owner_share"),
                                         (store_sub, reg21, ":total_revenue", ":owner_share")],
   "Well done, {playername}, very well done indeed! You were truly the right {man/person} for the job.\
 I promised you a fifth of the taxes, so that amounts to {reg21} denars.\
 If you give me {reg20} denars, you may keep the difference.\
 A good result for everyone, eh?", "lord_pretalk",
   [
    (troop_remove_gold, "trp_player", reg20),
    ##diplomacy start+ actually give taxes to NPC
    (call_script, "script_dplmc_distribute_gold_to_lord_and_holdings", reg20, "$g_talk_troop"),
    ##diplomacy end+
    (quest_set_slot, "qst_collect_taxes", slot_quest_gold_reward, 0),
    (call_script, "script_change_player_relation_with_troop", "$g_talk_troop", 2),
    (call_script, "script_end_quest", "qst_collect_taxes"),
    ]],


  [anyone,"lord_collect_taxes_half_success", [(quest_get_slot, ":gold_reward", "qst_collect_taxes", slot_quest_gold_reward),
                                         (val_mul, ":gold_reward", 95),
                                         (val_div, ":gold_reward", 100),
                                         (assign, reg20, ":gold_reward")],
   "What?! Is this some scheme of yours, {playername}? That's less than half the taxes I'm owed!\
 You have let them get away with murder as well as my money. What a farce!\
 You can forget the money I promised you, I'm taking {reg20} denars from what you collected,\
 and you're lucky I'm leaving you a few coins for honour's sake.", "lord_pretalk",
   [(troop_remove_gold, "trp_player", reg20),
    ##diplomacy start+ actually give taxes to NPC
    (call_script, "script_dplmc_distribute_gold_to_lord_and_holdings", reg20, "$g_talk_troop"),
    ##diplomacy end+
    (quest_set_slot, "qst_collect_taxes", slot_quest_gold_reward, 0),
    (call_script, "script_end_quest", "qst_collect_taxes"),
    ]],


  [anyone,"lord_collect_taxes_fail", [],
   "God, what a bloody mess you've gotten us into, {playername}.\
This could turn very ugly if I do not take immediate action.\
I certainly hope you're not here expecting to be paid for failure.\
Hand over my {reg19} denars, if you please, and end our business together.", "lord_pretalk",
   [(call_script, "script_change_player_relation_with_troop", "$g_talk_troop", -1),
    (quest_get_slot, ":gold_reward", "qst_collect_taxes", slot_quest_gold_reward),
    (troop_remove_gold, "trp_player", ":gold_reward"),
	##diplomacy start+ actually give taxes to NPC
    (call_script, "script_dplmc_distribute_gold_to_lord_and_holdings", ":gold_reward", "$g_talk_troop"),
    ##diplomacy end+
    (quest_set_slot, "qst_collect_taxes", slot_quest_gold_reward, 0),
    (call_script, "script_end_quest", "qst_collect_taxes"),
    ]],

  [anyone|plyr,"lord_active_mission_2", [(check_quest_active, "qst_hunt_down_fugitive"),
                                         (check_quest_concluded, "qst_hunt_down_fugitive"),
										 (quest_slot_eq, "qst_hunt_down_fugitive", slot_quest_giver_troop, "$g_talk_troop"),
                                         (quest_get_slot, ":quest_target_center", "qst_hunt_down_fugitive", slot_quest_target_center),
                                         (str_store_party_name, s3, ":quest_target_center"),
                                         (quest_get_slot, ":quest_target_dna", "qst_hunt_down_fugitive", slot_quest_target_dna),
                                         (call_script, "script_get_name_from_dna_to_s50", ":quest_target_dna"),
                                         (str_store_string, s4, s50),
                                         (call_script, "script_lord_comment_to_s43", "$g_talk_troop", "str_lord_insult_default"),
                                         ],
   "I found {s4} hiding at {s3}...", "lord_hunt_down_fugitive_prompt",
   []],
   
  [anyone,"lord_hunt_down_fugitive_prompt", [],
   "Good. I trust you followed my instructions to the letter?", "lord_hunt_down_fugitive_status",
   []],
   
    #SB : branching conditions on slot_quest_current_state: succeed by riding him down, succeed by capturing, succeed by persuading/burning village (should already trigger from the encounter)
    #fail by losing, fail by capturing but losing prisoner, conclude by somebody else raiding the village (bandits don't count)
  [anyone|plyr,"lord_hunt_down_fugitive_status", [(check_quest_succeeded, "qst_hunt_down_fugitive"),
  (quest_slot_eq, "qst_hunt_down_fugitive", slot_quest_current_state, 1),],
   "Of course. I gave him his punishment.", "lord_hunt_down_fugitive_success",
   []],
   
  [anyone|plyr,"lord_hunt_down_fugitive_status", [
                                         (check_quest_succeeded, "qst_hunt_down_fugitive"),
                                         (quest_slot_eq, "qst_hunt_down_fugitive", slot_quest_current_state, 2),
                                         (party_count_prisoners_of_type, ":count", "p_main_party", "trp_fugitive"),
                                         (gt, ":count", 0)],
   "I apprehended {s4} and brought him here to see justice done.", "lord_hunt_down_fugitive_brought_back",
   [
    (party_remove_prisoners, "p_main_party", "trp_fugitive", 1), 
   ]],
   
  [anyone|plyr,"lord_hunt_down_fugitive_status", [
                                         (check_quest_succeeded, "qst_hunt_down_fugitive"),
                                         (quest_slot_eq, "qst_hunt_down_fugitive", slot_quest_current_state, 2),],
   "I caught {s4} but he slipped his bonds along the way...", "lord_hunt_down_fugitive_not_brought_back",
   [
    # (party_remove_prisoners, "p_main_party", "trp_fugitive", 1), 
   ]],
   #SB : succeed when you bring the whole house down
  [anyone|plyr,"lord_hunt_down_fugitive_status", [
                                        (quest_slot_eq, "qst_hunt_down_fugitive", slot_quest_current_state, 3),
                                        (quest_get_slot, ":quest_target_center", "qst_hunt_down_fugitive", slot_quest_target_center),
                                        #yes, this can be overwritten if it's attacked in the meantime
                                        (party_slot_eq, ":quest_target_center", dplmc_slot_center_last_attacker, "p_main_party"),
                                        (party_slot_ge, ":quest_target_center", dplmc_slot_center_last_attacked_time, 0),
                                        ],
   "I found the fugitive at {s3} and burnt down that nest of corruption.", "lord_hunt_down_fugitive_burnt_village",
   []],
   
   #SB : concluded when other parties attacked the village, or when the player feels like being dishonest
  [anyone|plyr,"lord_hunt_down_fugitive_status", [(quest_slot_eq, "qst_hunt_down_fugitive", slot_quest_current_state, 3),],
   "I'm afraid somebody else torched down {s3}. I was unable to trace his family.", "lord_hunt_down_fugitive_concluded",
   [
    (try_begin),
      (quest_get_slot, ":quest_target_center", "qst_hunt_down_fugitive", slot_quest_target_center),
      (party_slot_eq, ":quest_target_center", dplmc_slot_center_last_attacker, "p_main_party"),
      (party_slot_ge, ":quest_target_center", dplmc_slot_center_last_attacked_time, 0),
      (call_script, "script_change_player_honor", -1),
    (try_end),
   ]],
  [anyone|plyr,"lord_hunt_down_fugitive_status", [(check_quest_failed, "qst_hunt_down_fugitive"),],
   "I'm afraid he got away.", "lord_hunt_down_fugitive_fail",
   []],

  [anyone,"lord_hunt_down_fugitive_burnt_village", [

    (quest_get_slot, ":quest_target_center", "qst_hunt_down_fugitive", slot_quest_target_center),
    (party_get_slot, ":town_lord", ":quest_target_center", slot_town_lord),
    (gt, ":town_lord", 0),
    (neq, ":town_lord", "$g_talk_troop"),
    (troop_get_slot, ":lrep", "$g_talk_troop", slot_lord_reputation_type),
    (assign, ":threshold", -5),
    (try_begin),
      (this_or_next|eq, ":lrep", lrep_upstanding),
      (eq, ":lrep", lrep_goodnatured),
      (val_sub, ":threshold", 50),
    (else_try),
      (this_or_next|eq, ":lrep", lrep_martial),
      (eq, ":lrep", lrep_quarrelsome),
      (val_add, ":threshold", 5),
    (try_end),
    (call_script, "script_troop_get_relation_with_troop", ":town_lord", "$g_talk_troop"),
    (lt, reg0, ":threshold"),
    (str_store_troop_name, s10, ":town_lord"),
  ],
   "You pillaged an entire village to get at one man?! I dare say that {s10} will not be pleased... We've killed two birds with one stone today haven't we, {playername}?", "lord_hunt_down_fugitive_success_2",
   [
     (add_xp_as_reward, 450), #excess reward
    ]],
    
  [anyone,"lord_hunt_down_fugitive_burnt_village", [
    (quest_get_slot, ":quest_target_center", "qst_hunt_down_fugitive", slot_quest_target_center),
    (party_get_slot, ":town_lord", ":quest_target_center", slot_town_lord),
    (gt, ":town_lord", 0),
    (assign, ":continue", 0), #whether an additional comment is merited
    (try_begin),
      (eq, ":town_lord", "$g_talk_troop"),
      (assign, reg10, 1),
      (assign, ":continue", 1),
    (else_try),
      (call_script, "script_dplmc_troop_get_family_relation_to_troop", ":town_lord", "$g_talk_troop"),
      (gt, reg0, 2), #better than cousins
      (str_store_string, s11, reg1),
      (assign, reg10, 0),
      (assign, ":continue", 1),
    (try_end),
    (eq, ":continue", 1),
    (try_begin), #in service
      # (eq, "$players_kingdom", "$g_talk_troop_faction"),
      (call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", "$g_talk_troop_faction"),
      (is_between, reg0, DPLMC_FACTION_STANDING_MEMBER, DPLMC_FACTION_STANDING_LEADER_SPOUSE),
      (assign, reg11, 1),
    (else_try), #personal remark
      (assign, reg11, 0),
    (try_end),
    # (party_slot_eq, ":quest_target_center", slot_town_lord, "$g_talk_troop"),
  ],
   "Are you out of your mind, {playername}? {reg10?Those were my peasants you buffoon:That village belonged to my {s11}}! {reg11?If this is the sort of behaviour I can expect from you, I worry for the future of our realm:I should have known better than to trust someone as zealous as yourself}. Take this blood money and begone...", "close_window",
   [(call_script, "script_change_player_relation_with_troop", "$g_talk_troop", -3),
    (call_script, "script_troop_add_gold", "trp_player", 300),
    (call_script, "script_end_quest", "qst_hunt_down_fugitive"),
    ]],
  #player might burn down own village, idk

    
  [anyone,"lord_hunt_down_fugitive_burnt_village", [],
   "But why?! I suppose you did your job, although your methods are questionable at best...", "lord_hunt_down_fugitive_success_2",
   [
     (add_xp_as_reward, 150), #half reward
    ]],
    
  [anyone,"lord_hunt_down_fugitive_not_brought_back", [
    (assign, reg10, 0),
    (assign, reg11, 0),
    (try_begin),
      (lt, "$g_talk_troop_relation", 0),
      (assign, reg11, 1),
    (else_try),
      (lt, "$g_talk_troop_relation", 10),
      (assign, reg10, 1),
    (try_end),
  ],
   "I am truly displeased, {playername}. {reg10?Could there truly be somebody as incompetent as you?:}\
 I told you to kill {s4}, not to make a mockery of defending my honour only to lose the bastard.\
 What a fine mess you've made of things now...{reg11? Or perhaps you let loose his bonds on purpose to spite me?:}", "lord_pretalk",
   [(call_script, "script_change_player_relation_with_troop", "$g_talk_troop", -2),
    # (call_script, "script_change_player_honor", -1),
    (call_script, "script_end_quest", "qst_hunt_down_fugitive"),
    ]],
    
  [anyone,"lord_hunt_down_fugitive_brought_back", [
    (troop_get_slot, ":lrep", "$g_talk_troop", slot_lord_reputation_type),
    (this_or_next|eq, ":lrep", lrep_upstanding),
    (eq, ":lrep", lrep_custodian),
  ],
   "Very well. Thanks to your actions, justice will be done at last. You will have my gratitude and a purse of 300 denars as promised.", "lord_hunt_down_fugitive_success_2",
   [
     (add_xp_as_reward, 600),
    ]],
    
  [anyone,"lord_hunt_down_fugitive_brought_back", [
    (troop_get_slot, ":lrep", "$g_talk_troop", slot_lord_reputation_type),
    (this_or_next|eq, ":lrep", lrep_debauched),
    (eq, ":lrep", lrep_roguish),
  ],
   "Excellent, {playername}. I'll have to sharpen my knives before I can start work on {s4}. Ah, yes, I suppose you'll want the bounty...", "lord_hunt_down_fugitive_success_2",
   [
     (add_xp_as_reward, 500),
    ]],

    #generic response
  [anyone,"lord_hunt_down_fugitive_brought_back", [],
   "Good. Off with his head! I knew you wouldn't fail me, {playername}, here is your reward of 300 denars.", "lord_hunt_down_fugitive_success_2",
   [
     (add_xp_as_reward, 450), #150% reward
    ]],
    

    
  [anyone,"lord_hunt_down_fugitive_success", [],
   "And we'll all be a lot better off without him! Thank you, {playername},\
 for removing this long-festering thorn from my side. 'Tis good to know you can be trusted to handle things\
 with an appropriate level of tactfulness.\
 A bounty I promised, and a bounty you shall have. 300 denars and not a copper less!", "lord_hunt_down_fugitive_success_2",
   [
     (add_xp_as_reward, 300),
    ]],

  [anyone|plyr,"lord_hunt_down_fugitive_success_2", [],
   "Let me take the money, {s65}. Thank you.", "lord_hunt_down_fugitive_reward_accept",[]],
  [anyone|plyr,"lord_hunt_down_fugitive_success_2", [],
   "This is blood money. I can't accept it.", "lord_hunt_down_fugitive_reward_reject",[]],

#Post 0907 changes begin
  [anyone,"lord_hunt_down_fugitive_reward_accept", [],
   "Of course, {playername}. Here you are. Once again, you've my thanks for ridding me of that {s43}.", "lord_pretalk",[
		# (call_script, "script_lord_comment_to_s43", "$g_talk_troop", "str_lord_insult_default"),

		(call_script, "script_troop_add_gold", "trp_player", 300),
		(call_script, "script_change_player_relation_with_troop", "$g_talk_troop", 1),
		(call_script, "script_end_quest", "qst_hunt_down_fugitive"),
		]],

  [anyone,"lord_hunt_down_fugitive_reward_reject", [],
   "You are a {man/woman} for whom justice is its own reward, eh? As you wish it, {playername}, as you wish it.\
 An honourable sentiment, to be true. Regardless, you've my thanks for ridding me of that {s43}.", "lord_pretalk",[

 		# (call_script, "script_lord_comment_to_s43", "$g_talk_troop", "str_lord_insult_default"),


       (call_script, "script_change_player_honor", 3),
       (call_script, "script_change_player_relation_with_troop", "$g_talk_troop", 1),
       (call_script, "script_end_quest", "qst_hunt_down_fugitive"),
       ]],

  [anyone,"lord_hunt_down_fugitive_fail", [],
   "It is a sad day when that {s43} manages to avoid the hand of justice yet again.\
 I thought you would be able to do this, {playername}. Clearly I was wrong.", "lord_pretalk",
   [
 	# (call_script, "script_lord_comment_to_s43", "$g_talk_troop", "str_lord_insult_default"),

    (call_script, "script_change_player_relation_with_troop", "$g_talk_troop", -1),
    (call_script, "script_end_quest", "qst_hunt_down_fugitive"),
    ]],
    
  [anyone,"lord_hunt_down_fugitive_concluded", [],
   "Well, I suppose the fates intervened to take that revenge from me. Although I would have liked to see that {s43}'s corpse myself, I'll have to take your word for it.", "lord_pretalk",
   [
    (call_script, "script_end_quest", "qst_hunt_down_fugitive"),
    ]],
#Post 0907 changes end



##
##
##  [anyone|plyr,"lord_active_mission_2", [(troop_slot_eq, "$g_talk_troop", slot_troop_is_prisoner, 0),
##                                         (store_partner_quest,":lords_quest"),
##                                         (eq,":lords_quest","qst_bring_back_deserters"),
##                                         (quest_get_slot, ":quest_target_troop", ":lords_quest", slot_quest_target_troop),
##                                         (quest_get_slot, ":quest_target_amount", ":lords_quest", slot_quest_target_amount),
##                                         (party_count_prisoners_of_type, ":num_prisoners", "p_main_party", ":quest_target_troop"),
##                                         (ge, ":num_prisoners", ":quest_target_amount"),
##                                         (assign, reg1, ":quest_target_amount")],
##   "Yes sir. I have brought {reg1} deserters as you asked me to.", "lord_generic_mission_thank",[(quest_get_slot, ":quest_target_troop", "qst_bring_back_deserters", slot_quest_target_troop),
##                                                                                     (quest_get_slot, ":quest_target_amount", "qst_bring_back_deserters", slot_quest_target_amount),
##                                                                                     (party_remove_prisoners, "p_main_party", ":quest_target_troop", ":quest_target_amount"),
##                                                                                     (faction_get_slot, ":faction_tier_2_troop", "$g_talk_troop_faction", slot_faction_tier_2_troop),
##                                                                                     (try_begin),
##                                                                                       (gt, ":faction_tier_2_troop", 0),
##                                                                                       (troop_get_slot, ":cur_lords_party", "$g_talk_troop", slot_troop_leaded_party),
##                                                                                       (gt, ":cur_lords_party", 0),
##                                                                                       (party_add_members, ":cur_lords_party", ":faction_tier_2_troop", ":quest_target_amount"),
##                                                                                     (try_end),
##                                                                                     (call_script, "script_finish_quest", "qst_bring_back_deserters", 100)]],
##
##
##### TODO: QUESTS COMMENT OUT END
  [anyone|plyr,"lord_active_mission_2", [], "I am still working on it.", "lord_active_mission_3",[]],
  [anyone|plyr,"lord_active_mission_2", [], "I am afraid I won't be able to do this quest.", "lord_mission_failed",[]],

  [anyone,"lord_active_mission_3", [], "Good. Remember, I am counting on you.", "lord_pretalk",[]],




#Post 0907 changes begin
  [anyone,"lord_mission_failed", [], "{s43}", "lord_pretalk",
   [
    (call_script, "script_lord_comment_to_s43", "$g_talk_troop", "str_lord_mission_failed_default"),
    (store_partner_quest,":lords_quest"),
    (call_script, "script_abort_quest", ":lords_quest", 1)]],
#Post 0907 changes end


#Claim center
##  [anyone,"lord_claim_center_begin", [],
##   "What do you want to do with {s4}?", "lord_claim_center_ask",[]],
##
##  [anyone|plyr,"lord_claim_center_ask", [],
##   "I want to claim it for myself.", "lord_claim_center_2",[]],
##  [anyone|plyr,"lord_claim_center_ask", [],
##   "I will leave it to you my lord. I have no interest in holding {s4}.", "lord_claim_center_leave_to_lord",[]],


##  [anyone,"lord_claim_center_2", [(eq, "$g_player_permitted_castles", 0),],
##   "You are an able warrior {playername} and there is no question of your bravery.\
## Alas, you are not noble born, and there are those who will be upset if I allow you to hold a castle.\
## So, it saddens me but I must decline your request.", "lord_claim_center_deny", []],
##
##  [anyone|plyr,"lord_claim_center_deny", [],
##   "This is not fair my lord. I shed my blood to take {s4}. Now another {man/master} will rule over it.", "lord_claim_center_deny_2", []],
##  [anyone|plyr,"lord_claim_center_deny", [],
##   "I understand sir. Do as you will.", "lord_claim_center_leave_to_lord", []],
##  [anyone,"lord_claim_center_deny_2", [],
##   "Remember that you gave me your oath {playername}. And you agreed to do as told.", "lord_claim_center_deny_3", []],
##  [anyone,"lord_claim_center_deny_3", [],
##   "Yes sir.", "lord_claim_center_leave_to_lord", []],
##
##  [anyone,"lord_claim_center_leave_to_lord", [],
##   "Very well.  Then I will find a suitable master for {s4}.\
## In recognition of your bravery and service, I give you these 5000 denars.", "lord_pretalk",
##   [(troop_get_slot, ":wealth", "$g_talk_troop", slot_troop_wealth),
##    (val_sub, ":wealth", 6000),
##    (troop_set_slot, "$g_talk_troop", slot_troop_wealth, ":wealth"),
##    (call_script, "script_troop_add_gold", "trp_player", 5000),
##
##    (assign, ":new_master", "$g_talk_troop"),
##    (assign, ":max_wealth", 0),
##
##    (try_for_range, ":hero_no", kingdom_heroes_begin, kingdom_heroes_end),
##      (troop_slot_eq, ":hero_no", slot_troop_is_prisoner, 0),
##      (troop_slot_eq, ":hero_no", slot_troop_occupation, slto_kingdom_hero),
##      (store_troop_faction, ":hero_faction", ":hero_no"),
##      (eq, ":hero_faction", "$players_kingdom"),
##      (call_script, "script_get_number_of_hero_centers", "$g_talk_troop"),
##      (assign, ":no_of_owned_centers", reg0),
##      (neg|faction_slot_eq, "$players_kingdom", slot_faction_leader, ":hero_no"),
##      (lt, ":no_of_owned_centers", 2),
##      (troop_get_slot, ":wealth", "$g_talk_troop", slot_troop_wealth),
##      (ge, ":wealth", ":max_wealth"),
##      (assign, ":new_master", ":hero_no"),
##      (assign, ":max_wealth", ":wealth"),
##    (try_end),
##
##    (call_script, "script_give_center_to_lord", "$center_to_be_claimed", ":new_master"),
##    (set_spawn_radius, 1),
##    (spawn_around_party, "$center_to_be_claimed", "pt_old_garrison"),
##    (assign, ":new_party", reg0),
##    (party_set_ai_behavior, ":new_party", ai_bhvr_attack_party),
##    (party_set_ai_object, ":new_party", "p_main_party"),
##    (party_set_flags, ":new_party", pf_default_behavior, 0),
##    (call_script, "script_party_copy", ":new_party", "$center_to_be_claimed"),
##    (party_clear, "$center_to_be_claimed"),
##
##    (faction_get_slot, ":reinforcement_template_a", "$g_talk_troop_faction", slot_faction_reinforcements_a),
##    (faction_get_slot, ":reinforcement_template_b", "$g_talk_troop_faction", slot_faction_reinforcements_b),
##    (party_add_template, "$center_to_be_claimed", ":reinforcement_template_a"),
##    (party_add_template, "$center_to_be_claimed", ":reinforcement_template_b"),
##    ]],
##
##
##  [anyone,"lord_claim_center_2", [(assign, ":number_of_claimed_centers", 0),
##                                  (try_for_range, ":center_no", centers_begin, centers_end),
##                                    (party_slot_eq, ":center_no", slot_party_type, spt_castle),
##                                    (store_faction_of_party, ":faction_no", ":center_no"),
##                                    (eq, ":faction_no", "fac_player_supporters_faction"),
##                                    (party_slot_eq, ":center_no", slot_town_claimed_by_player, 1),
##                                    (val_add, ":number_of_claimed_centers", 1),
##                                  (try_end),
##                                  (lt, ":number_of_claimed_centers", "$g_player_permitted_castles"),
##                                  (assign, reg7, ":number_of_claimed_centers"),
##                                  ],
##   "I had promised you to defend your right to hold {reg7?a:another} castle {playername}. Now I honor that promise.\
## I can think of {no man finer than you/no one better than you} to be the {lord/lady} of {s4}.\
## Renew your oath to me now. Then I will be your liege,\
## and I'll support you and protect you against all those who oppose your claim.",
##  "lord_claim_center_give_oath",[]],
##
##
##  [anyone|plyr,"lord_claim_center_give_oath", [],  "I give you my oath lord, I will forever be faithful to you,\
## I will never act in a way to cause you harm, and I will be at your side to fight your enemies should you need my sword.", "lord_claim_center_direct_3", []],
##  [anyone,"lord_claim_center_direct_3", [],  "You have given your oath of fealty {playername}. I accept your oath and give you the fief of {s4}.\
## Rule it wisely and protect it against our enemies.", "lord_claim_center_direct_4", [
##     (party_set_slot, "$center_to_be_claimed", slot_town_claimed_by_player, 1),
##     (call_script, "script_give_center_to_lord", "$center_to_be_claimed", "trp_player")]],
##  [anyone|plyr,"lord_claim_center_direct_4", [],  "I thank you lord.", "close_window", [(assign, "$g_leave_encounter",1)]],

#Ask for favor
##  [anyone,"lord_ask_for_favor_ask", [],
##   "What is it? I don't have time for personal requests.", "lord_ask_for_favor",[]],
##  [anyone,"lord_ask_for_favor_ask", [],
##   "Say it then. If it's something possible...", "lord_ask_for_favor",[]],
##
##  [anyone|plyr,"lord_ask_for_favor", [],
##   "Nothing my lord. It's not important.", "lord_pretalk",[]],
#Suggest action
  [anyone,"lord_suggest_action_ask", [],
   "{!}What do you suggest?", "lord_suggest_action",[]],

##  [anyone|plyr,"lord_suggest_action",
##   [(troop_get_type, ":is_female", "trp_player"),
##    (eq, ":is_female", 1),
##    (lt, "$talk_context", tc_siege_commander),
##    ],
##   "{!}CHEAT: I want to marry you! (1)", "lord_groom_vows",[]],

  [anyone|plyr,"lord_suggest_action", [],
   "{!}CHEAT: I want to join your faction.", "lord_suggest_join_faction",[]],
  [anyone,"lord_suggest_join_faction", [],
   "{!}Alright then.", "lord_give_oath_5",[]],

  [anyone|plyr,"lord_suggest_action", [],
   "{!}CHEAT: I want to know your leaded party ID.", "lord_suggest_learn_party_id",[]],
  [anyone,"lord_suggest_learn_party_id", [
  (assign, reg1, "$g_encountered_party"),
  (troop_get_slot, reg0, "$g_talk_troop", slot_troop_leaded_party)],
   "{!}It is {reg0}. Encountered party is {reg1}", "lord_pretalk",[]],

  [anyone|plyr,"lord_suggest_action", [],
   "{!}CHEAT: I want to know your AI initiative.", "lord_suggest_learn_ai_initiative",[]],
  [anyone,"lord_suggest_learn_ai_initiative", [(party_get_ai_initiative, reg0, "$g_encountered_party")],
   "{!}It is {reg0}.", "lord_pretalk",[]],


  [anyone|plyr,"lord_suggest_action", [(eq, "$players_kingdom", "$g_talk_troop_faction"),],
   "{!}CHEAT: I want to be your kingdom's marshal.", "lord_suggest_become_marshall",[]],
  [anyone,"lord_suggest_become_marshall", [],
   "{!}Alright then.", "lord_pretalk",
   [
     (faction_get_slot, ":old_marshall", "$g_talk_troop_faction", slot_faction_marshall),
        (try_begin),
          (ge, ":old_marshall", 0),
		  (troop_get_slot, ":old_marshall_party", ":old_marshall", slot_troop_leaded_party),
          (party_is_active, ":old_marshall_party"),
          (party_set_marshal, ":old_marshall_party", 0),
        (try_end),

     (faction_set_slot, "$g_talk_troop_faction", slot_faction_marshall, "trp_player"),
     (faction_set_slot, "$g_talk_troop_faction", slot_faction_ai_state, sfai_default),
     (assign, "$g_recalculate_ais", 1),
   ]],

  [anyone|plyr,"lord_suggest_action", [(neq, "$talk_context", tc_siege_commander)],
   "{!}CHEAT: Let us attack an enemy town or castle.", "lord_suggest_attack_enemy_castle",[]],
  [anyone|plyr,"lord_suggest_action", [(neq, "$talk_context", tc_siege_commander)],
   "{!}CHEAT: Let us return back to a friendly town.", "lord_suggest_go_to_friendly_town",[]],
  [anyone|plyr,"lord_suggest_action", [(neq, "$talk_context", tc_siege_commander)],
   "{!}CHEAT: Let us attack an enemy war party.", "lord_suggest_attack_enemy_party",[]],
  [anyone|plyr,"lord_suggest_action", [(eq, "$talk_context", tc_siege_commander)],
   "{!}CHEAT: Let us lift this siege.", "lord_suggest_lift_siege",[]],
  [anyone|plyr,"lord_suggest_action", [(neq, "$talk_context", tc_siege_commander)],
   "{!}CHEAT: Follow me.", "lord_suggest_follow_me",[]],
  [anyone|plyr,"lord_suggest_action", [(neq, "$talk_context", tc_siege_commander)],
   "{!}CHEAT: Follow someone.", "lord_suggest_follow_other",[]],
  [anyone|plyr,"lord_suggest_action", [(neq, "$talk_context", tc_siege_commander)],
   "{!}CHEAT: Raid a village.", "lord_suggest_raid_village",[]],
  [anyone|plyr,"lord_suggest_action", [],
   "{!}CHEAT: Like me.", "lord_pretalk",[(call_script,"script_change_player_relation_with_troop","$g_talk_troop",20)]],

  [anyone,"lord_suggest_lift_siege", [],
   "{!}As you wish, {playername}.", "close_window",[(call_script, "script_party_set_ai_state", "$g_talk_troop_party", spai_undefined),
                                           (party_leave_cur_battle, "$g_talk_troop_party"),
                                           (assign, "$g_leave_encounter", 1)]],

  [anyone,"lord_suggest_go_to_friendly_town", [],
   "{!}Hmm. Which town or castle do you suggest we go to?", "lord_suggest_go_to_friendly_town2",[]],
  [anyone|plyr|repeat_for_parties,"lord_suggest_go_to_friendly_town2", [
                                                                       (store_repeat_object, ":center_no"),
                                                                       (this_or_next|party_slot_eq,":center_no",slot_party_type, spt_castle),
                                                                       (party_slot_eq,":center_no",slot_party_type, spt_town),
                                                                       (neq, ":center_no", "$g_encountered_party"),
                                                                       (store_faction_of_party, ":town_faction", ":center_no"),
                                                                       (eq, ":town_faction", "$g_talk_troop_faction"),
                                                                       (str_store_party_name, s1, ":center_no")],
   "{!}CHEAT: {s1}", "lord_suggest_go_to_friendly_town3",[(store_repeat_object, "$town_suggested_to_go_to")]],
  [anyone|plyr,"lord_suggest_go_to_friendly_town2", [],
   "{!}CHEAT: Never mind.", "lord_pretalk",[]],

  [anyone,"lord_suggest_go_to_friendly_town3", [(str_store_party_name, 1, "$town_suggested_to_go_to")],
   "{!}Very well, we go to {s1}.", "lord_pretalk",
   [
       (call_script, "script_party_set_ai_state", "$g_talk_troop_party", spai_holding_center, "$town_suggested_to_go_to"),
       ]],



  [anyone,"lord_suggest_attack_enemy_party", [],
   "{!}Hmm. Which party do you suggest we attack?", "lord_suggest_attack_enemy_party2",[]],
  [anyone|plyr|repeat_for_parties,"lord_suggest_attack_enemy_party2", [
                                                                       (store_repeat_object, ":party_no"),
                                                                       (party_slot_eq,":party_no",slot_party_type, spt_kingdom_hero_party),
                                                                       (party_is_active, ":party_no"),
                                                                       (store_faction_of_party, ":party_faction", ":party_no"),
                                                                       (store_relation, ":party_relation", ":party_faction", "$g_talk_troop_faction"),
                                                                       (le, ":party_relation", -10),
                                                                       (call_script, "script_get_closest_walled_center", ":party_no"),
                                                                       (assign, ":center_no", reg0),
                                                                       (str_store_party_name, s3, ":center_no"),
                                                                       (str_store_faction_name, s2, ":party_faction"),
                                                                       (str_store_party_name, s1, ":party_no")],
   "{!}CHEAT: {s1} of {s2} around {s3}", "lord_suggest_attack_enemy_party3",[(store_repeat_object, "$suggested_to_attack_party")]],
  [anyone|plyr,"lord_suggest_attack_enemy_party2", [],
   "{!}CHEAT: Never mind.", "lord_pretalk",[]],

  [anyone,"lord_suggest_attack_enemy_party3", [(str_store_party_name, 1, "$suggested_to_attack_party")],
   "{!}As you wish, we will attack {s1}.", "lord_pretalk",
   [
       (call_script, "script_party_set_ai_state", "$g_talk_troop_party", spai_engaging_army, "$suggested_to_attack_party"),
       ]],


##  [anyone,"lord_suggest_attack_enemy_castle", [(troop_get_slot, ":player_favor", "$g_talk_troop", slot_troop_player_favor),
##                                               (lt, ":player_favor", 20)],
##   "Hmm. No, I don't think that's a good idea.", "lord_pretalk",[]],

  [anyone,"lord_suggest_attack_enemy_castle", [],
   "{!}Hmm. Which one do you suggest we attack?", "lord_suggets_attack_enemy_castle2",[]],
  [anyone|plyr|repeat_for_parties,"lord_suggets_attack_enemy_castle2", [
                                                                       (store_repeat_object, ":center_no"),
                                                                       (this_or_next|party_slot_eq,":center_no",slot_party_type, spt_castle),
                                                                       (party_slot_eq,":center_no",slot_party_type, spt_town),
                                                                       (store_faction_of_party, ":town_faction", ":center_no"),
                                                                       (store_relation, ":town_relation", ":town_faction", "$g_talk_troop_faction"),
                                                                       (le, ":town_relation", -10),
                                                                       (str_store_faction_name, s2, ":town_faction"),
                                                                       (str_store_party_name, s1, ":center_no")],
   "{!}CHEAT: {s1} of {s2}", "lord_suggets_attack_enemy_castle3",[(store_repeat_object, "$suggested_to_attack_center")]],

  [anyone|plyr,"lord_suggets_attack_enemy_castle2", [],
   "{!}CHEAT: Never mind my lord.", "lord_pretalk",[]],

  [anyone,"lord_suggets_attack_enemy_castle3", [(str_store_party_name, 1, "$suggested_to_attack_center")],
   "That should be possible. Very well, we'll attack {s1}.", "lord_pretalk",
   [
       (call_script, "script_party_set_ai_state", "$g_talk_troop_party", spai_besieging_center, "$suggested_to_attack_center"),

       ]],

  [anyone,"lord_suggest_raid_village", [],
   "{!}Hmm. Which village do you suggest we attack?", "lord_suggest_raid_village_2",[]],
  [anyone|plyr|repeat_for_parties,"lord_suggest_raid_village_2", [
                                                                       (store_repeat_object, ":center_no"),
                                                                       (party_slot_eq,":center_no",slot_party_type, spt_village),
                                                                       (store_faction_of_party, ":town_faction", ":center_no"),
                                                                       (store_relation, ":town_relation", ":town_faction", "$g_talk_troop_faction"),
                                                                       (le, ":town_relation", -10),
                                                                       (str_store_faction_name, s2, ":town_faction"),
                                                                       (str_store_party_name, s1, ":center_no")],
   "{!}CHEAT: {s1} of {s2}", "lord_suggest_raid_village_3",[(store_repeat_object, "$suggested_to_attack_center")]],
  [anyone|plyr,"lord_suggest_raid_village_2", [],
   "{!}CHEAT: Never mind.", "lord_pretalk",[]],

  [anyone,"lord_suggest_raid_village_3", [(str_store_party_name, s1, "$suggested_to_attack_center")],
   "{!}That should be possible. Very well, we'll attack {s1}.", "lord_pretalk",
   [
     (call_script, "script_party_set_ai_state", "$g_talk_troop_party", spai_raiding_around_center, "$suggested_to_attack_center"),
   ]],


  [anyone,"lord_suggest_follow_me", [],
   "{!}Aye, I'll follow you.", "lord_pretalk",
   [
     (party_set_slot, "$g_talk_troop_party", slot_party_commander_party, "p_main_party"),
     #(call_script, "script_party_decide_next_ai_state_under_command", "$g_talk_troop_party")
     (call_script, "script_npc_decision_checklist_party_ai", "$g_talk_troop"),
	 (call_script, "script_party_set_ai_state", "$g_talk_troop_party", reg0, reg1),
   ]],


  [anyone,"lord_suggest_follow_other", [],
   "{!}Who do you want me to follow?", "lord_suggest_follow_other_2",[]],
  [anyone|plyr|repeat_for_parties,"lord_suggest_follow_other_2", [
                                                                       (store_repeat_object, ":party_no"),
                                                                       (party_slot_eq,":party_no",slot_party_type, spt_kingdom_hero_party),
                                                                       (neq, ":party_no", "$g_talk_troop"),
                                                                       (store_faction_of_party, ":party_faction", ":party_no"),
                                                                       (eq, ":party_faction", "$g_talk_troop_faction"),
                                                                       (str_store_party_name, s1, ":party_no")],
   "{!}CHEAT: {s1}", "lord_suggest_follow_other_3",[(store_repeat_object, "$town_suggested_to_go_to")]],
  [anyone|plyr,"lord_suggest_follow_other_2", [],
   "{!}CHEAT: Never mind.", "lord_pretalk",[]],

  [anyone,"lord_suggest_follow_other_3", [(str_store_party_name, 1, "$town_suggested_to_go_to")],
   "{!}As you wish, I shall be accompanying {s1}.", "lord_pretalk",
   [
     (party_set_slot, "$g_talk_troop_party", slot_party_commander_party, "$town_suggested_to_go_to"),
     #(call_script, "script_party_decide_next_ai_state_under_command", "$g_talk_troop_party"),
     (call_script, "script_npc_decision_checklist_party_ai", "$g_talk_troop"),
     (call_script, "script_party_set_ai_state", "$g_talk_troop_party", reg0, reg1),
   ]],

  [anyone|plyr,"lord_suggest_action", [],
   "{!}CHEAT: Nothing, {s65}. It's not important.", "lord_pretalk",[]],


##### TODO: QUESTS COMMENT OUT BEGIN
#Request Mission

  [anyone|auto_proceed,"lord_request_mission_ask",
   [(eq, "$players_kingdom", 0),
    (ge, "$g_talk_troop_faction_relation", 0),
    (ge, "$g_talk_troop_relation", 0),
    (troop_slot_ge, "trp_player", slot_troop_renown, 30),
    (neg|faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "$g_talk_troop"),
    (faction_get_slot, ":last_offer_time", "$g_talk_troop_faction", slot_faction_last_mercenary_offer_time),

    (assign, ":num_enemies", 0),
    (try_for_range, ":faction_no", kingdoms_begin, kingdoms_end),
      (faction_slot_eq, "$g_talk_troop_faction", slot_faction_state, sfs_active),
      (store_relation, ":reln", "$g_talk_troop_faction", ":faction_no"),
      (lt, ":reln", 0),
      (val_add, ":num_enemies", 1),
    (try_end),
    (ge, ":num_enemies", 1),
    (store_current_hours, ":cur_hours"),
    (store_add,  ":week_past_last_offer_time", ":last_offer_time", 7 * 24),
    (val_add,  ":last_offer_time", 24),
    (ge, ":cur_hours", ":last_offer_time"),
    (store_random_in_range, ":rand", 0, 100),
    (this_or_next|lt, ":rand", 20),
		(ge, ":cur_hours", ":week_past_last_offer_time"),


	##diplomacy start+
	##OLD:
	#(troop_get_type, ":type", "trp_player"),
	#(this_or_next|eq, ":type", 0),
	##NEW:
   	(assign, reg0, 0),
	(try_begin),
		(call_script, "script_cf_dplmc_faction_has_bias_against_gender", "$g_talk_troop_faction", "$character_gender"),
       	(assign, reg0, 1),
	(try_end),
	(this_or_next|eq, reg0, 0),
	(this_or_next|ge, "$g_disable_condescending_comments", 2),#<- OPTION: Disable prejudice
	(this_or_next|troop_slot_ge, "$g_talk_troop", slot_lord_reputation_type, lrep_roguish),
	##diplomacy end+ xxx TODO: Why exactly wouldn't this display...?
	(this_or_next|troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_cunning),
		(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_goodnatured),
    ],
   "{!}Warning: This line should never display.", "lord_propose_mercenary",[(store_current_hours, ":cur_hours"),
                                  (faction_set_slot, "$g_talk_troop_faction", slot_faction_last_mercenary_offer_time,  ":cur_hours")]],





  [anyone,"lord_propose_mercenary", [(call_script, "script_party_calculate_strength", "p_main_party", 0),
                                     (assign, ":offer_value", reg0),
                                     (val_add, ":offer_value", 100),
                                     (call_script, "script_round_value", ":offer_value"),
                                     (assign, ":offer_value", reg0),
                                     (assign, "$temp", ":offer_value"),
                                     (faction_get_slot, ":faction_leader", "$g_talk_troop_faction", slot_faction_leader),
                                     (neq, ":faction_leader", "$g_talk_troop"),
                                     (str_store_faction_name, s9, "$g_talk_troop_faction"),
                                     (str_store_troop_name, s10, ":faction_leader"),

									 ##diplomacy start+
									 #(troop_get_type, ":is_female", "trp_player"),
									 ##diplomacy end+
									 (try_begin),
										##diplomacy start+
										#Enable if prejudice has been set to "high"
										(lt, "$g_disable_condescending_comments", 0),
										(neq, reg65, "$character_gender"),
										(call_script, "script_cf_dplmc_faction_has_bias_against_gender", "$g_talk_troop_faction", "$character_gender"),
										#(eq, ":is_female", 3), #disabled
										##diplomacy end+
										(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_martial),
									    (str_store_string, s11, "str_now_some_might_say_that_women_have_no_business_leading_mercenary_companies_but_i_suspect_that_you_would_prove_them_wrong_what_do_you_say"),
									 (else_try),
									    (str_store_string, s11, "@What do you say to entering the service of {s9} as a mercenary captain?\
 I have no doubt that you would be up to the task."),
									 (try_end)
									 ],

   "As it happens, {playername}, I promised {s10} that I would hire a company of mercenaries for an upcoming campaign.\
","lord_mercenary_service", []],
  [anyone|plyr,"lord_mercenary_service", [], "I'm not interested, thank you.", "lord_mercenary_service_reject", []],
  [anyone|plyr,"lord_mercenary_service", [], "Aye, I'll join {s9}.", "lord_mercenary_service_accept", []],
  [anyone|plyr,"lord_mercenary_service", [], "I'm interested. Please tell me more.", "lord_mercenary_elaborate_pay", []],

  [anyone,"lord_mercenary_service_accept", [(str_store_faction_name, s9, "$g_talk_troop_faction")],
   "Perfect. Of course you shall have to make a formal declaration of allegiance,\
 and give your oath that you and your company will remain in service to {s9}\
 for a period of no less than one month.", "lord_mercenary_service_verify", []],
  [anyone|plyr,"lord_mercenary_service_verify", [], "As you wish. Your enemies are my enemies.", "lord_mercenary_service_verify_2", []],
  [anyone|plyr,"lord_mercenary_service_verify", [], "On second thought, forget it.", "lord_mercenary_service_reject", []],

  [anyone,"lord_mercenary_service_verify_2", [], "That will do. You've made a wise choice, my friend.\
 {s9} does well by its loyal fighters, you will receive many rewards for your service.", "lord_mercenary_service_accept_3", [
     (call_script, "script_troop_add_gold", "trp_player", "$temp"),
     (store_current_day, ":cur_day"),
     (store_add, "$mercenary_service_next_renew_day", ":cur_day", 30),
     (call_script, "script_player_join_faction", "$g_talk_troop_faction"),
     (str_store_faction_name, s9, "$g_talk_troop_faction"),]],

  [anyone,"lord_mercenary_service_accept_3", [], "Now, I suggest you prepare for a serious campaign.\
 Train and equip your soldiers as best you can in the meantime, and respond quickly when you are summoned for duty.", "lord_pretalk", []],

  [anyone,"lord_mercenary_service_reject", [(str_store_faction_name, s9, "$g_talk_troop_faction")],
   "I'm very sorry to hear that. You'll find no better place than {s9}, be sure of that.", "lord_pretalk", []],

  [anyone,"lord_mercenary_elaborate_pay", [(assign, reg12, "$temp")],
   "I can offer you a contract for one month. At the end of this period, it can be extended on a monthly basis.\
 An initial sum of {reg12} denars will be paid to you to seal the contract.\
 After that, you'll receive wages from {s10} each week, according to the number and quality of the soldiers in your company.\
 You still have your rights to battlefield loot and salvage, as well as any prisoners you capture.\
 War can be very profitable at times...", "lord_mercenary_elaborate_1",
   [(faction_get_slot, ":faction_leader", "$g_talk_troop_faction", slot_faction_leader),
    (str_store_troop_name, s10, ":faction_leader")]],


  [anyone,"lord_mercenary_service_elaborate_duty", [],
   "Duties... There are only a few, none of them difficult. The very first thing is to declare your allegiance.\
 An oath of loyalty to our cause. Once that's done, you shall be required to fulfill certain responsibilities.\
 You'll participate in military campaigns, fulfill any duties given to you by your commanders,\
 and most of all you shall attack the enemies of our kingdom wherever you might find them.", "lord_mercenary_elaborate_1",
   [(faction_get_slot, ":faction_leader", "$g_talk_troop_faction", slot_faction_leader),
    (str_store_troop_name, s10, ":faction_leader")]],

  [anyone|plyr,"lord_mercenary_elaborate_1", [], "And what about my duties as a mercenary?", "lord_mercenary_service_elaborate_duty", []],
  [anyone|plyr,"lord_mercenary_elaborate_1", [], "Can I hold on to any castles I take?", "lord_mercenary_elaborate_castle", []],
  [anyone|plyr,"lord_mercenary_elaborate_1",
   [
     (neg|troop_slot_ge, "trp_player", slot_troop_banner_scene_prop, 1),
#custom_banner begin
##    (eq, "trp_player", slot_troop_custom_banner_flag_type, -1),
#custom_banner end
     ], "Can I fly my own banner?", "lord_mercenary_elaborate_banner", []],
  [anyone|plyr,"lord_mercenary_elaborate_1", [], "How much will you pay me for my service?", "lord_mercenary_elaborate_pay", []],
  [anyone|plyr,"lord_mercenary_elaborate_1", [], "Sounds good. I wish to enter your service as a mercenary.", "lord_mercenary_service_accept", []],
  [anyone|plyr,"lord_mercenary_elaborate_1", [], "Apologies, my sword is not for hire.", "lord_mercenary_service_reject", []],


  [anyone,"lord_mercenary_elaborate_castle", [##diplomacy start+
  ##OLD:
  #(troop_get_type, ":type", "trp_player"),(eq, ":type", 1),
  #(faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "$g_talk_troop")
  #NEW:
  ##Disable if sexism is off.  Also check that it's true.
  (lt, "$g_disable_condescending_comments", 2),#<- OPTION: >= 2 means disable sexism
  (faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "$g_talk_troop"),

  (call_script, "script_cf_dplmc_faction_has_bias_against_gender", "$g_talk_troop_faction", "$character_gender"),

  #(assign, ":same_gender_vassal", active_npcs_end),
  #(try_for_range, ":active_npc", active_npcs_begin, ":same_gender_vassal"),
  #  (troop_slot_eq, ":active_npc", slot_troop_occupation, slto_kingdom_hero),
  #  (store_troop_faction, ":faction_no"),
  #  (this_or_next|troop_slot_eq, ":active_npc", slot_troop_original_faction, "$g_talk_troop_faction"),
  #     (eq, ":faction_no", "$g_talk_troop_faction"),
  #  (call_script, "script_dplmc_store_troop_is_female", ":active_npc"),
  #  (eq, reg0, "$character_gender"),
  #  (assign, ":same_gender_vassal", ":active_npc"),
  #(try_end),
  #(neg|is_between, ":same_gender_vassal", active_npcs_begin, active_npcs_end),
  ],#next line, replace "men" with "{women/men}"
   "Only my loyal vassals can own lands and castles in my realm -- and all my vassals are {women/men}. I am not inclined to depart from this tradition without a very good reason. If you prove yourself in battle, you can swear an oath of homage to me and become my vassal. We may then discuss how you may obtain a castle.",
##diplomacy end+
   "lord_mercenary_elaborate_1", []],

  [anyone,"lord_mercenary_elaborate_castle", [##diplomacy start+
  ##OLD:
  #(troop_get_type, ":type", "trp_player"),(eq, ":type", 1),
  ##NEW:
  ##Disable is sexism is off.  Also check that it's true.
  (lt, "$g_disable_condescending_comments", 2),#<- OPTION: >= 2 means disable sexism
  (call_script, "script_cf_dplmc_faction_has_bias_against_gender", "$g_talk_troop_faction", "$character_gender"),

  (call_script, "script_dplmc_print_cultural_word_to_sreg", "$g_talk_troop", DPLMC_CULTURAL_TERM_KING_PLURAL, s0),#kings to s0
  (faction_get_slot, reg0, "$g_talk_troop_faction", slot_faction_leader),
  (call_script, "script_dplmc_store_troop_is_female", reg0),#faction leader gender to reg0
  (try_begin),
     (eq, reg0, 1),
     (call_script, "script_dplmc_print_cultural_word_to_sreg", "$g_talk_troop", DPLMC_CULTURAL_TERM_KING_FEMALE, s1),#queen to s1
  (else_try),
     (call_script, "script_dplmc_print_cultural_word_to_sreg", "$g_talk_troop", DPLMC_CULTURAL_TERM_KING, s1),#king to s1
  (try_end),
  ],#Next line, use cultural terms, fix gender, etc.
#   "Hmm... Only loyal vassals of {s10} can own lands and castles. While kings will sometimes accept vassalage from men who prove themselves in battle, and grant them land, I have never heard of a king who gave fiefs to women. You had best discuss that issue with {s10} himself.",
   "Hmm... Only loyal vassals of {s10} can own lands and castles. While {s0} will sometimes accept vassalage from {men/women} who prove themselves in battle, and grant them land, I have never heard of a {s1} who gave fiefs to {men/women}. You had best discuss that issue with {s10} {reg0?herself:himself}.",
##diplomacy end+
   "lord_mercenary_elaborate_1", []],


  [anyone,"lord_mercenary_elaborate_castle", [(faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "$g_talk_troop")],
   "Only my loyal vassals can own lands and castles in my realm.\
 A mercenary can not be trusted with such a responsibility.\
 However, after serving for some time, you can swear homage to me and become my vassal.\
 Then you will be rewarded with a fief.", "lord_mercenary_elaborate_1", []],

  [anyone,"lord_mercenary_elaborate_castle", [##diplomacy start+ Make gender correct
  (faction_get_slot, reg0, "$g_talk_troop_faction", slot_faction_leader),
  (call_script, "script_dplmc_store_troop_is_female", reg0),
  ##Next line, replace "his" with {reg0?her:his}
  ], "Only loyal vassals of {s10} can own lands and castles.\
 You understand, a simple mercenary cannot be trusted with such responsibility.\
 However, after serving for some time, you may earn the right to swear homage to {s10} and become {reg0?her:his} vassal.\
 Then you would be rewarded with a fief.", "lord_mercenary_elaborate_1", []],
 ##diplomacy end+

  [anyone,"lord_mercenary_elaborate_banner", [(faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "$g_talk_troop")],
   "Only my noble vassals have the honour of carrying their own banners.\
 However, after some time in mercenary service, you may earn the opportunity to swear homage to me and become my vassal,\
 gaining the right to choose a banner of your own and fight under it in battle.", "lord_mercenary_elaborate_1", []],
  [anyone,"lord_mercenary_elaborate_banner", [##diplomacy start+ Use correct gender
   (faction_get_slot, reg0, "$g_talk_troop_faction", slot_faction_leader),
   (call_script, "script_dplmc_store_troop_is_female", reg0),
   #Next line "his" -> {reg0?her:his}
  ], "Only noble vassals of {s10} have the honour of carrying their own banners.\
 However, after some time of mercenary service, perhaps you can earn the opportunity to swear homage to {s10} and become {reg0?her:his} vassal,\
 gaining the right to choose a banner of your own and fight under it in battle.", "lord_mercenary_elaborate_1", []],
 ##diplomacy end+

  [anyone,"lord_request_mission_ask", [(store_partner_quest,":lords_quest"),(ge,":lords_quest",0)],
   "You still haven't finished the last job I gave you, {playername}. You should be working on that, not asking me for other things to do.", "lord_pretalk",[]],


  [anyone,"lord_request_mission_ask", [(troop_slot_eq, "$g_talk_troop", slot_troop_does_not_give_quest, 1)],
   "I don't have any other jobs for you right now.", "lord_pretalk",[]],




  [anyone|auto_proceed,"lord_request_mission_ask", [], "A task?", "lord_tell_mission",
   [
       (call_script, "script_get_quest", "$g_talk_troop"),
       (assign, "$random_quest_no", reg0),
   ]],

#check with armagan on this


  [anyone,"lord_request_mission_ask", [
  (this_or_next|troop_slot_eq, "$g_talk_troop", slot_troop_courtship_state, 2),
	(troop_slot_eq, "trp_player", slot_troop_betrothed, "$g_talk_troop"),
  ##diplomacy start+ use gender script
  #(eq, "$character_gender", 1),#<- XXX TODO: Safe to remove?
  ],##Next line, "My lady" to "My {lord/lady}
   "My {lord/lady}, by the traditions of courtship, I should be offering my services to you. Unfortunately, I have little time right now, so I beg you to take this declaration of my esteem in its place.", "lord_pretalk",[]],
  ##diplomacy end+

  [anyone,"lord_tell_mission", [
  (eq, "$player_has_homage" ,1),
  (neq, "$random_quest_no", "qst_rescue_prisoner"),
  (neq, "$random_quest_no", "qst_destroy_bandit_lair"),
  (neq, "$random_quest_no", "qst_raise_troops"),
  (neq, "$random_quest_no", "qst_escort_lady"),
  (neq, "$random_quest_no", "qst_lend_companion"),
  (neq, "$random_quest_no", "qst_capture_enemy_hero"),
  (neq, "$random_quest_no", "qst_cause_provocation"),
  ##diplomacy start+
  (neq, "$random_quest_no", "qst_collect_debt"),#currently never given, but if it were enabled it would be fine
  #Assign some variables used later to re-enable quests which are usually disabled
  #once the player has received homage.
  (assign, ":is_close", 0),
  (assign, ":nominal_superior", 0),
  #is close:
  (try_begin),
	#affiliates, and spouse
	(call_script, "script_dplmc_is_affiliated_family_member", "$g_talk_troop"),
	(this_or_next|ge, reg0, 1),
		(troop_slot_eq, "trp_player", slot_troop_spouse, "$g_talk_troop"),
	(assign, ":is_close", 1),
  (else_try),
	#in-laws, former companions, and assisted pretenders
	(ge, "$g_talk_troop_faction_relation", 0),
	(ge, "$g_talk_troop_relation", 50),
	(try_begin),
		(this_or_next|is_between, "$g_talk_troop", companions_begin, companions_end),
			(is_between, "$g_talk_troop", pretenders_begin, pretenders_end),
		(neg|troop_slot_eq, "$g_talk_troop", slot_troop_playerparty_history, dplmc_pp_history_nonplayer_entry),
		(assign, ":is_close", 1),
	(else_try),
		(call_script, "script_troop_get_family_relation_to_troop", "$g_talk_troop", "trp_player"),
		(ge, reg0, 2),
		(assign, ":is_close", 1),
	(try_end),
   (try_end),

	#Is nominally the social superior of the player (or even if not the superior,
	#is allowed to give the player orders in at least one context)
	(try_begin),
		#quest giver is faction leader or marshal, or player's father or mother
		(this_or_next|troop_slot_eq, "trp_player", slot_troop_father, "$g_talk_troop"),
		(this_or_next|troop_slot_eq, "trp_player", slot_troop_mother, "$g_talk_troop"),
		(this_or_next|faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "$g_talk_troop"),
			(faction_slot_eq, "$g_talk_troop_faction", slot_faction_marshall, "$g_talk_troop"),
		(assign, ":nominal_superior", 1),
	(else_try),
		#player has less than 3/4 of the quest giver's renown
		(troop_get_slot, reg0, "$g_talk_troop", slot_troop_renown),
		(val_mul, reg0, 3),
		(val_div, reg0, 4),
		##diplomacy start+
		(assign, ":save_reg0", reg0),
		(try_begin),
			(lt, "$g_disable_condescending_comments", 0),#<- OPTION: Prejudice mode High
			(neq, reg65, "$character_gender"),
			(neg|troop_slot_ge, "$g_talk_troop", slot_lord_reputation_type, lrep_roguish),#non-noble or kingdom lady
			(neg|troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_cunning),
			(neg|troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_goodnatured),
			(neg|is_between, "$g_talk_troop", companions_begin, companions_end),
			(call_script, "script_cf_dplmc_faction_has_bias_against_gender", "$g_talk_troop_faction", "trp_player"),
			(val_mul, ":save_reg0", 2),#double the renown threshold
		(try_end),
		(assign, reg0, ":save_reg0"),
		##diplomacy end+
		(neg|troop_slot_ge, "trp_player", slot_troop_renown, reg0),
		(assign, ":nominal_superior", 1),
	(else_try),
		#quest giver is player's father-in-law or mother-in-law
		(troop_get_slot, ":player_spouse", "trp_player", slot_troop_spouse),
		(is_between, ":player_spouse", heroes_begin, heroes_end),
		(this_or_next|troop_slot_eq, ":player_spouse", slot_troop_father, "$g_talk_troop"),
			(troop_slot_eq, ":player_spouse", slot_troop_mother, "$g_talk_troop"),
		(assign, ":nominal_superior", 1),
	(try_end),

  (assign, ":matched_any", 0),
  (try_begin),
	#close or nominal superior:
	(this_or_next|ge, ":is_close", 1),
		(ge, ":nominal_superior", 1),
    (this_or_next|eq, "$random_quest_no", "qst_deliver_message_to_prisoner_lord"),
    (this_or_next|eq, "$random_quest_no", "qst_meet_spy_in_enemy_town"),
	(this_or_next|eq, "$random_quest_no", "qst_deliver_message"),
	(this_or_next|eq, "$random_quest_no", "qst_collect_taxes"),
	(this_or_next|eq, "$random_quest_no", "qst_follow_spy"),
	   (eq, "$random_quest_no", "qst_capture_prisoners"),
	(assign, ":matched_any", 1),
  (else_try),
	#close only:
	(ge, ":is_close", 1),
	(this_or_next|eq, "$random_quest_no", "qst_kill_local_merchant"),
	   (eq, "$random_quest_no", "qst_incriminate_loyal_commander"),
	(assign, ":matched_any", 1),
  (try_end),
  (eq, ":matched_any", 0),
  ##Get different text if the player is the faction leader or the faction leader's spouse
  (try_begin),
    (neg|faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "$g_talk_troop"),
    (troop_get_slot, reg0, "trp_player", slot_troop_spouse),
	(this_or_next|faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "trp_player"),
		(faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, reg0),
	(this_or_next|faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "trp_player"),
		(ge, reg0, 1),
	(assign, reg0, 1),
  (else_try),
	(assign, reg0, 0),
  (try_end),
  ],
  ##Allow this to also be used for liege, replaced "a sworn vassal of the realm" with "{reg0?my sworn liege:a sworn vassal of the realm}", "men" with {reg65?servants:men}
   "There are some minor errands which I need completed, but it would be more appropriate to give them to one of my own {reg65?servants:men}, not to {reg0?my sworn liege:a sworn vassal of the realm}.", "lord_tell_mission_sworn_vassal",[]],
##diplomacy end+



  [anyone,"lord_tell_mission_sworn_vassal", [
	(this_or_next|party_slot_eq, "$g_talk_troop_party", slot_party_ai_state, spai_besieging_center),
		(party_slot_eq, "$g_talk_troop_party", slot_party_ai_state, spai_raiding_around_center),

	(party_get_slot, ":cur_object", "$g_talk_troop_party", slot_party_ai_object),
	(is_between, ":cur_object", centers_begin, centers_end),
	(str_store_party_name, s4, ":cur_object"),
  ],##diplomacy start+ use gender-neutral term for soldiers in case it would be absurd
	"If you are looking for action against our foes, you may join our attack on {s4}. The enemy may come in force to oppose us, so it is good to have as many {reg65?soldiers:{soldiers/men}} as possible.", "lord_pretalk",[]],
##diplomacy end+


  [anyone,"lord_tell_mission_sworn_vassal", [
    (eq, "$g_talk_troop_faction", "$players_kingdom"),

	(party_get_slot, ":cur_object", "$g_talk_troop_party", slot_party_ai_object),
	(is_between, ":cur_object", centers_begin, centers_end),
	(party_get_slot, ":last_spotted_enemy", ":cur_object", slot_center_last_spotted_enemy),
	(party_is_active, ":last_spotted_enemy"),
	(store_faction_of_party, ":last_spotted_enemy_faction", ":last_spotted_enemy"),
	(store_relation, ":relation",":last_spotted_enemy_faction", "$g_talk_troop_faction"),
	(lt, ":relation", 0),

	(is_between, ":last_spotted_enemy_faction", kingdoms_begin, kingdoms_end),
	(str_store_party_name, s4, ":cur_object"),
	(str_store_faction_name, s5, ":last_spotted_enemy_faction"),

  ],
	"If you are looking for action against our foes, you may try venturing out to {s4}. We have received word that a force of the {s5} is in the area, and I am going there myself. I cannot guarantee you that our enemies will be there when you arrive, of course.", "lord_pretalk",[]],

  [anyone,"lord_tell_mission_sworn_vassal", [
    (eq, "$g_talk_troop_faction", "$players_kingdom"),
	(assign, ":alarmed_center_found", -1),
	(assign, ":score_to_beat", 9999),

	(try_for_range, ":center_no", centers_begin, centers_end),
		(store_faction_of_party, ":center_faction", ":center_no"),
		(eq, ":center_faction", "$g_talk_troop_faction"),
		(party_get_slot, ":last_spotted_enemy", ":center_no", slot_center_last_spotted_enemy),
		(party_is_active, ":last_spotted_enemy"),
		(store_faction_of_party, ":last_spotted_enemy_faction", ":last_spotted_enemy"),
		(is_between, ":last_spotted_enemy_faction", kingdoms_begin, kingdoms_end),

		(store_relation, ":relation", ":last_spotted_enemy_faction", "$g_talk_troop_faction"),
		(lt, ":relation", 0),

		(store_distance_to_party_from_party, ":distance", ":center_no", "p_main_party"),
		(lt, ":distance", ":score_to_beat"),

		(assign, ":alarmed_center_found", ":center_no"),
		(assign, ":score_to_beat", ":distance"),
		(str_store_faction_name, s5, ":last_spotted_enemy_faction"),
	(try_end),
	(is_between, ":alarmed_center_found", centers_begin, centers_end),
	(str_store_party_name, s4, ":alarmed_center_found"),
  ],
	"If you are looking for action against our foes, you may try venturing out to {s4}. We have received word that a force of the {s5} is in the area. I am not currently headed that way, but others may be.  I cannot guarantee you that our enemies will be there when you arrive, of course.", "lord_pretalk",[]],



  [anyone,"lord_tell_mission_sworn_vassal", [  ],
	"If a worthy task presents itself, however, I may have a favor to ask of you at a later date.", "lord_pretalk",[]],




  [anyone,"lord_tell_mission", [
  (eq,"$random_quest_no", "qst_destroy_bandit_lair"),
  (quest_get_slot, ":bandit_lair", "qst_destroy_bandit_lair", slot_quest_target_party),

  (party_stack_get_troop_id, ":bandit_type", ":bandit_lair", 0),
  (str_store_troop_name_plural, s4, ":bandit_type"),

  ], "Yes -- there is something you can do for us. We have heard reports that a group of {s4} have established a hideout in this area, and have been attacking travellers. If you could find their lair and destroy it, we would be very grateful.", "destroy_lair_quest_brief", #s48 is bandits, s42 is the road information
   []],


   #SB : move reg3 assignment to consequence
  [anyone,"lord_tell_mission",
  [(eq,"$random_quest_no","qst_rescue_prisoner"),
  ],#Next line "he" to {reg3?she:he}, etc.
   "My {s11}, {s13}, has been taken prisoner by {s14} of the {s15}. Normally, honorable nobles will grant prisoners of gentle blood the privilege of parole, and treat them as honored guests so long as they give their word that they will not attempt to escape, until such time as a ransom can be paid. But {s14}, instead of granting {s13} parole, has consigned my {s11} to {reg3?her:his} dungeons -- no doubt in the hope that {reg3?she:he} can demand more from us.", "lord_mission_rescue_prisoner",
   ##diplomcay end+
   [
     (quest_get_slot, ":quest_target_troop", "$random_quest_no", slot_quest_target_troop),
     (troop_get_slot, ":quest_target_center", ":quest_target_troop", slot_troop_prisoner_of_party),
     (call_script, "script_troop_get_family_relation_to_troop", ":quest_target_troop", "$g_talk_troop"),

     (str_store_troop_name_link, s9, "$g_talk_troop"),
     (str_store_troop_name_link, s13, ":quest_target_troop"),
     (str_store_party_name_link, s24, ":quest_target_center"),
     (party_get_slot, ":captor", ":quest_target_center", slot_town_lord),
     (str_store_troop_name, s14, ":captor"),
     (store_faction_of_party, ":target_faction", ":quest_target_center"),
     (str_store_faction_name, s15, ":target_faction"),


     (setup_quest_text,"$random_quest_no"),
##     (try_begin),
##       (is_between, "$g_encountered_party", centers_begin, centers_end),
##       (setup_quest_giver, "$random_quest_no", "str_given_by_s1_at_s2"),
##     (else_try),
##       (setup_quest_giver,"$random_quest_no", "str_given_by_s1_in_wilderness"),
##     (try_end),
     (call_script, "script_dplmc_store_troop_is_female_reg", ":captor", 3), #SB : use other script
     (str_store_string, s2, "str_s9_asked_you_to_rescue_s13_who_is_prisoner_at_s24"),
   ]],


  [anyone,"lord_mission_rescue_prisoner", [],##diplomacy start+ next line, use reg4 for gender
  #SB : lower initial expense to 2000, rest of family will contribute
   "We need you to get my {s11} out of prison. You may be able to pay a ransom -- in which case I could cover your expenses, up to 2000 denars. If you have connections within {s24}, you may be able to use them to sneak {reg4?her:him} out. Or, you may try a more direct approach -- walk up to the gaoler, take the keys by force, and then fight your way out. Can you do this for us?", "lord_mission_rescue_prisoner_confirm",
   ##diplomacy end+
   [
   ]],

  [anyone|plyr,"lord_mission_rescue_prisoner_confirm", [],
  "I can try.", "lord_mission_rescue_prisoner_accepted",[]],

  [anyone|plyr,"lord_mission_rescue_prisoner_confirm", [], "I don't think that I can help you.", "lord_mission_rescue_prisoner_rejected",[]],
  [anyone,"lord_mission_rescue_prisoner_rejected", [], "It would not have been an easy task. Perhaps we will find another way.", "close_window",[
    (assign, "$g_leave_encounter",1),
  ]],

  [anyone,"lord_mission_rescue_prisoner_accepted", [], "We are most grateful. Could I ask you how you were planning to proceed?", "lord_mission_rescue_prisoner_method",
   [
    (quest_set_slot, "$random_quest_no", slot_quest_dont_give_again_period, 7), #SB : 1 week before another planned rescue
    (call_script, "script_start_quest", "$random_quest_no", "$g_talk_troop"),
    (call_script, "script_change_player_relation_with_troop","$g_talk_troop",1),
   ]],

  [anyone,"lord_mission_rescue_other_ideas", [], "Did you have any other ideas which you wished to discuss?", "lord_mission_rescue_prisoner_method",
   []],


   #SB : enable alternative options
  [anyone|plyr,"lord_mission_rescue_prisoner_method", [(quest_slot_eq, "qst_rescue_prisoner", slot_quest_target_state, 0),],
  "I am thinking of paying the ransom.", "lord_mission_rescue_prisoner_method_ransom",[]],

  [anyone|plyr,"lord_mission_rescue_prisoner_method", [],
  "I am thinking of using my connections in {s24}.", "lord_mission_rescue_prisoner_method_connection",[]],

  [anyone|plyr,"lord_mission_rescue_prisoner_method", [],
  "I am thinking of breaking into the prison in {s24}, finding {s13}, and fighting my way out.", "lord_mission_rescue_prisoner_method_prisonbreak",[]],

  [anyone|plyr,"lord_mission_rescue_prisoner_method", [],
  "I am thinking of taking {s24} by storm.", "lord_mission_rescue_prisoner_method_siege",[]],

  [anyone|plyr,"lord_mission_rescue_prisoner_method", [],
  "I have done enough planning. Time to act!", "lord_mission_rescue_prisoner_planning_end",[]],

  [anyone,"lord_mission_rescue_prisoner_planning_end", [],
  "May the heavens protect you.", "close_window",[
  (assign, "$g_leave_encounter", 1),
  ]],

  #SB : describe raising funds from liege/other relatives, add initial funds here
  [anyone,"lord_mission_rescue_prisoner_method_ransom", [
    # (troop_slot_eq, "$g_talk_troop", slot_troop_player_debt, 0),
  ],
  "Of course. If my missives to {s14} were not persuasive enough, there is always the merit of amassing more gold. If that fails, I'm sure you could convince the dungeon-keeper or petition a ransom-broker on our behalf. I'm sure other members of our family would be willing to contribute to {s13}'s ransom fund in that case.", "lord_mission_rescue_other_ideas",[
    (quest_get_slot, ":prisoner", "qst_rescue_prisoner", slot_quest_target_troop),
    (str_store_troop_name, s13, ":prisoner"),
    
    (quest_get_slot, ":center_no", "qst_rescue_prisoner", slot_quest_target_center),
    (party_get_slot, ":town_ruler", ":center_no", slot_town_lord),
    (try_begin),
      (is_between, ":town_ruler", heroes_begin, heroes_end),
      (str_store_troop_name, s14, ":town_ruler"),
    (else_try),
      (str_store_party_name, s14, ":center_no"),
    (try_end),
    (call_script, "script_lend_money_for_ransom", "$g_talk_troop", 2000), #add initial funds
  ]],
  
  #SB : describe attributes to increase chances
  [anyone,"lord_mission_rescue_prisoner_method_connection", [],
  "Well said, {playername}. If you or your companions know the layout of {s24}, then a distraction can certainly be arranged and during the ensuing chaos the locks can be cut with the proper tools. However, whomever we send to rescue {s13} must be fleet of foot and have an agile mind to cajole or hire locals to effect the rescue.", "lord_mission_rescue_other_ideas",[]],

  [anyone,"lord_mission_rescue_prisoner_method_prisonbreak", [],
  "I had discussed this idea with some of my men. One could enter {s24}, either in disguise or openly, then walk up to the prison guard and try to take the keys by force. However, getting out may be difficult. The garrison may be slow to react, but even so, you are likely to find yourself fighting a half dozen or more of the enemy at once, with limited space in which to maneuver. If you can fight your way past them, though, you can probably get out.", "lord_mission_rescue_prisoner_method_prisonbreak_2",[]],

  [anyone,"lord_mission_rescue_prisoner_method_prisonbreak_2", [],
  "You may find it useful to create a distraction, to divert the attention of some of the garrison. If you have any connections in the villages near {s24}, this may be a time to put them to use.", "lord_mission_rescue_other_ideas",[]],

  [anyone,"lord_mission_rescue_prisoner_method_siege", [],
  "Well, that is certainly the most direct approach.", "lord_mission_rescue_other_ideas",[]],

  
  [anyone,"lord_tell_mission", [(eq,"$random_quest_no","qst_deliver_message"),
  ##diplomacy start+ fix pronoun
  (quest_get_slot, ":quest_target_troop", "$random_quest_no", slot_quest_target_troop),
  (call_script, "script_dplmc_store_troop_is_female",  ":quest_target_troop"),
  ],#next line, change him/his based on reg0
   "I need to send a letter to {s13} who should be currently at {s4}.\
 If you will be heading towards there, would you deliver it to {reg0?her:him}?\
 The letter needs to be in {reg0?her:his} hands in 30 days.", "lord_mission_deliver_message",
  ##diplomacy end+
   [
     (quest_get_slot, ":quest_target_troop", "$random_quest_no", slot_quest_target_troop),
     (quest_get_slot, ":quest_target_center", "$random_quest_no", slot_quest_target_center),
     (str_store_troop_name_link,s9,"$g_talk_troop"),
     (str_store_troop_name_link,s13,":quest_target_troop"),
     (str_store_party_name_link,s4,":quest_target_center"),
     (setup_quest_text,"$random_quest_no"),
##     (try_begin),
##       (is_between, "$g_encountered_party", centers_begin, centers_end),
##       (setup_quest_giver, "$random_quest_no", "str_given_by_s1_at_s2"),
##     (else_try),
##       (setup_quest_giver,"$random_quest_no", "str_given_by_s1_in_wilderness"),
##     (try_end),
     (str_store_string, s2, "@{s9} asked you to take a message to {s13}. {s13} was believed to be at {s4} when you were given this quest."),
   ]],

  [anyone|plyr,"lord_mission_deliver_message", [], "Certainly, I intend to pass by {s4} and it would be no trouble.", "lord_mission_deliver_message_accepted",[]],
  [anyone|plyr,"lord_mission_deliver_message", [], "I doubt I'll be seeing {s13} anytime soon, {s65}. You'd best send it with someone else.", "lord_mission_deliver_message_rejected",[]],
  ##diplomacy start+ Fix gender
  #[anyone|plyr,"lord_mission_deliver_message", [], "I am no errand boy, sir. Hire a courier for your trivialities.",
  [anyone|plyr,"lord_mission_deliver_message", [], "I am no errand {boy/girl}, {reg65?my lady:sir}. Hire a courier for your trivialities.",
  ##diplomacy end+
  "lord_mission_deliver_message_rejected_rudely",[]],

  [anyone,"lord_mission_deliver_message_accepted", [##diplomacy start+ Fix gender
  (quest_get_slot, ":quest_target_troop", "$random_quest_no", slot_quest_target_troop),
  (call_script, "script_dplmc_store_troop_is_female", ":quest_target_troop"),
  ], "I appreciate it, {playername}. Here's the letter, and a small sum to cover your travel expenses. Give my regards to {s13} when you see {reg0?her:him}.", "close_window",
  ##diplomacy end+
   [(call_script, "script_start_quest", "$random_quest_no", "$g_talk_troop"),
    (call_script, "script_troop_add_gold", "trp_player", 30),    (assign, "$g_leave_encounter",1),
   ]],

  [anyone,"lord_mission_deliver_message_rejected", [], "Ah, all right then. Well, I am sure I will find someone else.", "lord_pretalk",
   [(troop_set_slot, "$g_talk_troop", slot_troop_does_not_give_quest, 1)]],

  [anyone,"lord_mission_deliver_message_rejected_rudely", [], "Hm, is this how you respond to a polite request\
 for a small favor? A poor show, {playername}. I didn't know you would take offence.", "lord_mission_deliver_message_rejected_rudely_2",[]],

  [anyone|plyr,"lord_mission_deliver_message_rejected_rudely_2", [], "Then you shall know better from now on.", "lord_mission_deliver_message_rejected_rudely_3",[]],
  [anyone|plyr,"lord_mission_deliver_message_rejected_rudely_2", [], "Forgive my temper, {s65}. I'll deliver your letter.", "lord_mission_deliver_message_accepted",[]],

  [anyone,"lord_mission_deliver_message_rejected_rudely_3", [], "All right. I will remember that.", "close_window",[
    (call_script, "script_change_player_relation_with_troop","$g_talk_troop",-4),
    (quest_set_slot, "$random_quest_no", slot_quest_dont_give_again_remaining_days, 150),
    (troop_set_slot, "$g_talk_troop", slot_troop_does_not_give_quest, 1),
    (assign, "$g_leave_encounter",1),
      ]],
##diplomacy start+
#  [anyone,"lord_tell_mission", [(eq,"$random_quest_no","qst_deliver_message_to_enemy_lord")],
  [anyone,"lord_tell_mission", [
	(eq,"$random_quest_no","qst_deliver_message_to_enemy_lord"),
	(quest_get_slot, ":quest_target_troop", "$random_quest_no", slot_quest_target_troop),
	(call_script, "script_dplmc_store_troop_is_female", ":quest_target_troop"),
	],
#   "I need to deliver a letter to {s13} of {s15}, who must be at {s4} currently.\
# If you are going towards there, would you deliver my letter to him? The letter needs to reach him in 40 days.", "lord_mission_deliver_message",
   "I need to deliver a letter to {s13} of {s15}, who must be at {s4} currently.\
 If you are going towards there, would you deliver my letter to {reg0?her:him}? The letter needs to reach {reg0?her:him} in 40 days.", "lord_mission_deliver_message",
##diplomacy end+
   [
     (quest_get_slot, ":quest_target_troop", "$random_quest_no", slot_quest_target_troop),
     (quest_get_slot, ":quest_target_center", "$random_quest_no", slot_quest_target_center),
     (str_store_troop_name_link,s9,"$g_talk_troop"),
##     (str_store_party_name,2,"$g_encountered_party"),
     (str_store_troop_name_link,s13,":quest_target_troop"),
     (str_store_party_name_link,s4,":quest_target_center"),
     (store_troop_faction, ":target_faction", ":quest_target_troop"),
     (str_store_faction_name_link,s15,":target_faction"),
     (setup_quest_text,"$random_quest_no"),
##     (try_begin),
##       (is_between, "$g_encountered_party", centers_begin, centers_end),
##       (setup_quest_giver, "$random_quest_no", "str_given_by_s1_at_s2"),
##     (else_try),
##       (setup_quest_giver,"$random_quest_no", "str_given_by_s1_in_wilderness"),
##     (try_end),
     (str_store_string, s2, "@{s9} asked you to take a message to {s13} of {s15}. {s13} was believed to be at {s4} when you were given this quest."),
   ]],

##diplomacy start+ Fix gender and relation of target.  Also replace "My {s17} {s13}" with {s0}
  [anyone,"lord_tell_mission", [(eq,"$random_quest_no","qst_escort_lady")],
   "There is a small thing... My {s17} {s13} is due for a visit to {reg4?her:his} relatives at {s14}.\
 The visit has been postponed several times already with all the trouble on the roads,\
 but this time {reg4?he:she} is adamant about going. So, I want to at least make sure {reg4?she:he}'s well-guarded.\
 I trust you well, {playername} so I would be very grateful if you could escort {reg4?her:him} to {s14}\
 and make sure {reg4?she:he} arrives safe and sound.", "lord_mission_told",
   [
     (quest_get_slot, ":quest_object_troop", "$random_quest_no", slot_quest_object_troop),
     (quest_get_slot, ":quest_target_center", "$random_quest_no", slot_quest_target_center),
	 ##diplomacy start+ Change the following to allow a wider range of relations
     #(try_begin),
     #  (troop_slot_eq, ":quest_object_troop", slot_troop_father, "$g_talk_troop"),
     #  (str_store_string, s17, "str_daughter"),
     #(else_try),
     #  (str_store_string, s17, "str_wife"),
     #(try_end),
	 (call_script, "script_dplmc_troop_get_family_relation_to_troop", ":quest_object_troop", "$g_talk_troop"),
     (try_begin),
		(this_or_next|le, reg1, "str_ERROR_string"),
		(lt, reg0, 1),
		(assign, reg1, "str_dplmc_friend"),
     (try_end),
	 (str_store_string, s17, reg1),
	 (call_script, "script_dplmc_cap_troop_describes_troop_to_troop_s1", 1, "$g_talk_troop", ":quest_object_troop", "trp_player"),
	 ##diplomacy end+
     (str_store_troop_name_link, s11, "$g_talk_troop"),
     (str_store_troop_name_link, s13, ":quest_object_troop"),
     (str_store_party_name_link, s14, ":quest_target_center"),
     (setup_quest_text,"$random_quest_no"),
	 ##diplomacy start+ fix pronoun
	 (call_script, "script_dplmc_store_troop_is_female", ":quest_object_troop"),
	 (assign, reg4, reg0),
	 #"his" changed to "{reg65?her:his}"
     (str_store_string, s2, "@{s11} asked you to escort {reg65?her:his} {s17} {s13} to {s14}."),
	 ##diplomacy end+
   ]],

##
##  [anyone,"lord_tell_mission", [(eq,"$random_quest_no","qst_hunt_down_raiders")],
## "A messenger came with important news a few hours ago.\
## A group of enemy raiders have attacked a village near {s3}.\
## They have murdered anyone who tried to resist, stolen everything they could carry and put the rest to fire.\
## Now, they must be on their way back to their base at {s4}.\
## You must catch them on the way and make them pay for their crimes.", "lord_mission_told",
##   [
##       (quest_get_slot, ":quest_object_center", "$random_quest_no", slot_quest_object_center),
##       (quest_get_slot, ":quest_target_center", "$random_quest_no", slot_quest_target_center),
##       (str_store_party_name_link,3,":quest_object_center"),
##       (str_store_party_name_link,4,":quest_target_center"),
##    ]],
##
##  [anyone,"lord_tell_mission", [(eq,"$random_quest_no","qst_bring_back_deserters")],
## "I am worried about the growing number of deserters. If we don't do something about it, we may soon have noone left to fight in our wars.\
## I want you to go now and bring back {reg1} {s3}. I would ask you to hang the bastards but we are short of men and we need them back in the ranks.", "lord_mission_told",
##   [
##       (quest_get_slot, ":quest_target_amount", "$random_quest_no", slot_quest_target_amount),
##       (quest_get_slot, ":quest_target_troop", "$random_quest_no", slot_quest_target_troop),
##
##       (str_store_troop_name_link,1,"$g_talk_troop"),
##       (str_store_party_name_link,2,"$g_encountered_party"),
##       (str_store_troop_name_plural,3,":quest_target_troop"),
##       (assign, reg1, ":quest_target_amount"),
##       (setup_quest_text,"$random_quest_no"),
##       (try_begin),
##         (is_between, "$g_encountered_party", centers_begin, centers_end),
##         (setup_quest_giver, "$random_quest_no", "str_given_by_s1_at_s2"),
##       (else_try),
##         (setup_quest_giver,"$random_quest_no", "str_given_by_s1_in_wilderness"),
##       (try_end),
##    ]],
##
##  [anyone,"lord_tell_mission", [(eq,"$random_quest_no","qst_deliver_supply_to_center_under_siege")],
## "The enemy has besieged {s5}. Our brothers there are doing their best to fend off attacks, but they can't hold for long without supplies.\
## We need someone to take the supplies they need and make it into the town as soon as possible.\
## It's a very dangerous job, but if there's one person who can do it, it's you {playername}.\
## You can take the supplies from seneschal {s3}. When you arrive at {s5}, give them to the seneschal of that town.", "lord_mission_told",
##   [
##       (quest_get_slot, ":quest_target_amount", "$random_quest_no", slot_quest_target_amount),
##       (quest_get_slot, ":quest_target_center", "$random_quest_no", slot_quest_target_center),
##       (quest_get_slot, ":quest_object_troop", "$random_quest_no", slot_quest_object_troop),
##       (quest_get_slot, ":quest_target_troop", "$random_quest_no", slot_quest_target_troop),
##
##       (str_store_troop_name_link,1,"$g_talk_troop"),
##       (str_store_party_name_link,2,"$g_encountered_party"),
##       (str_store_troop_name_link,3,":quest_object_troop"),
##       (str_store_troop_name,4,":quest_target_troop"),
##       (str_store_party_name_link,5,":quest_target_center"),
##       (assign, reg1, ":quest_target_amount"),
##       (setup_quest_text,"$random_quest_no"),
##       (try_begin),
##         (is_between, "$g_encountered_party", centers_begin, centers_end),
##         (setup_quest_giver, "$random_quest_no", "str_given_by_s1_at_s2"),
##       (else_try),
##         (setup_quest_giver,"$random_quest_no", "str_given_by_s1_in_wilderness"),
##       (try_end),
##    ]],
##
##  [anyone,"lord_tell_mission", [(eq,"$random_quest_no","qst_bring_reinforcements_to_siege")],
## "{s4} has besieged {s5} and God willing, that town will not hold for long.\
## Still I promised him to send {reg1} {s3} as reinforcements and I need someone to lead those men.\
## Can you take them to {s4}?", "lord_mission_told",
##   [
##       (quest_get_slot, ":quest_target_amount", "$random_quest_no", slot_quest_target_amount),
##       (quest_get_slot, ":quest_target_center", "$random_quest_no", slot_quest_target_center),
##       (quest_get_slot, ":quest_object_troop", "$random_quest_no", slot_quest_object_troop),
##       (quest_get_slot, ":quest_target_troop", "$random_quest_no", slot_quest_target_troop),
##
##       (str_store_troop_name_link,1,"$g_talk_troop"),
##       (str_store_party_name_link,2,"$g_encountered_party"),
##       (str_store_troop_name_plural,3,":quest_object_troop"),
##       (str_store_troop_name_link,4,":quest_target_troop"),
##       (str_store_party_name_link,5,":quest_target_center"),
##       (assign, reg1, ":quest_target_amount"),
##       (setup_quest_text,"$random_quest_no"),
##       (try_begin),
##         (is_between, "$g_encountered_party", centers_begin, centers_end),
##         (setup_quest_giver, "$random_quest_no", "str_given_by_s1_at_s2"),
##       (else_try),
##         (setup_quest_giver,"$random_quest_no", "str_given_by_s1_in_wilderness"),
##       (try_end),
##    ]],
##
##  [anyone,"lord_tell_mission", [(eq,"$random_quest_no","qst_rescue_lady_under_siege")],
## "The enemy has besieged {s4} and my dear {s7} {s3} has been trapped within the town walls.\
## As you may guess, I am greatly distressed by this. I need a very reliable commander, to rescue her from the town and bring her back to me.\
## Will you do that {playername}?", "lord_mission_told",
##   [
##       (quest_get_slot, ":quest_target_center", "$random_quest_no", slot_quest_target_center),
##       (quest_get_slot, ":quest_object_troop", "$random_quest_no", slot_quest_object_troop),
##
##       (try_begin),
##         (troop_slot_eq, "$g_talk_troop", slot_troop_daughter, ":quest_object_troop"),
##         (str_store_string, s7, "str_daughter"),
##       (else_try),
##         (str_store_string, s7, "str_wife"),
##       (try_end),
##
##       (str_store_troop_name_link,1,"$g_talk_troop"),
##       (str_store_party_name_link,2,"$g_encountered_party"),
##       (str_store_troop_name_link,3,":quest_object_troop"),
##       (str_store_party_name_link,4,":quest_target_center"),
##       (setup_quest_text,"$random_quest_no"),
##       (try_begin),
##         (is_between, "$g_encountered_party", centers_begin, centers_end),
##         (setup_quest_giver, "$random_quest_no", "str_given_by_s1_at_s2"),
##       (else_try),
##         (setup_quest_giver,"$random_quest_no", "str_given_by_s1_in_wilderness"),
##       (try_end),
##    ]],
##
##
##  [anyone,"lord_tell_mission", [(eq,"$random_quest_no","qst_bring_prisoners_to_enemy")],
##   "The enemy wants to ransom some of their soldiers that we captured at the last battle.\
## They'll pay 100 denars in return for giving them back {reg1} {s3}.\
## God knows I can use that money so I accepted their offer.\
## Now, what I need is someone to take the prisoners to {s4} and come back with the money.", "lord_mission_told",
##   [
##     (quest_get_slot, ":quest_object_troop", "$random_quest_no", slot_quest_object_troop),
##     (quest_get_slot, ":quest_target_center", "$random_quest_no", slot_quest_target_center),
##     (quest_get_slot, reg1, "$random_quest_no", slot_quest_target_amount),
##     (str_store_troop_name_link,1,"$g_talk_troop"),
##     (str_store_party_name_link,2,"$g_encountered_party"),
##     (str_store_troop_name_plural,3,":quest_object_troop"),
##     (str_store_party_name_link,4,":quest_target_center"),
##     (setup_quest_text,"$random_quest_no"),
##     (try_begin),
##       (is_between, "$g_encountered_party", centers_begin, centers_end),
##       (setup_quest_giver, "$random_quest_no", "str_given_by_s1_at_s2"),
##     (else_try),
##       (setup_quest_giver,"$random_quest_no", "str_given_by_s1_in_wilderness"),
##     (try_end),
##   ]],
##


# Deal with bandits
  [anyone,"lord_tell_mission", [(eq,"$random_quest_no","qst_deal_with_bandits_at_lords_village")],
   "A group of bandits have taken refuge in my village of {s15}.\
 They are plundering nearby farms, and getting rich and fat stealing my taxes and feasting on my cattle.\
 I'd like nothing better than to go out there and teach them a lesson,\
 but I have my hands full at the moment, so I can't do anything about it.", "lord_mission_deal_with_bandits_told",
   [
     (quest_get_slot, ":quest_target_center", "$random_quest_no", slot_quest_target_center),
     (str_store_party_name_link,s15,":quest_target_center"),
     (str_store_troop_name_link,s13,"$g_talk_troop"),
     (setup_quest_text,"$random_quest_no"),
     ##diplomacy start+ fix pronoun
     #"him" changed to "{reg65?her:him}"
     #SB : specify bandit type
     (party_get_slot, ":bandit_troop", ":quest_target_center", slot_village_infested_by_bandits),
     (str_store_troop_name_plural, s12, ":bandit_troop"),
     (str_store_string, s2, "@{s13} asked you to deal with the {s12} who are occupying the village of {s15} and then report back to {reg65?her:him}."),
     ##diplomacy end+
   ]],

  [anyone|plyr,"lord_mission_deal_with_bandits_told", [],
   "Worry not, I can go to {s15} and deal with these scum for you.", "lord_mission_deal_with_bandits_accepted",[]],
  [anyone|plyr,"lord_mission_deal_with_bandits_told", [], "You shall have to find help elsewhere, I am too busy.", "lord_mission_deal_with_bandits_rejected",[]],

  [anyone,"lord_mission_deal_with_bandits_accepted", [], "Will you do that?\
 Know that, I will be grateful to you. Here is some money for the expenses of your campaign.\
 Make an example of those {s43}s.", "close_window",
   [

    (call_script, "script_lord_comment_to_s43", "$g_talk_troop", "str_lord_insult_default"),

    (call_script, "script_start_quest", "$random_quest_no", "$g_talk_troop"),
    (call_script, "script_troop_add_gold", "trp_player", 200),
    (call_script, "script_change_player_relation_with_troop","$g_talk_troop",1),
    (assign, "$g_leave_encounter",1),
   ]],

  [anyone,"lord_mission_deal_with_bandits_rejected", [], "Ah... Very well then, forget I brought it up.", "lord_pretalk",
   [(troop_set_slot, "$g_talk_troop", slot_troop_does_not_give_quest, 1)]],

# Raise troops
  [anyone,"lord_tell_mission", [(eq,"$random_quest_no","qst_raise_troops"),
  ##diplomacy start+ Change "sword" to another weapon if appropriate, and likewise for "men"
  (try_begin),
     (call_script, "script_cf_dplmc_faction_has_bias_against_gender", "$g_encountered_party_faction", 0),
     (assign, reg0, 1),
  (else_try),
     (assign, reg0, 0),
  (try_end),

  ],
   "No {reg65?lady:lord} should have to admit this, {playername}, but I was inspecting my soldiers the other day and there are {reg0?{reg65?women:soldiers}:{reg65?soldiers:men}} here who don't know which end of a {s42} to hold. {s43} You are a warrior of renown, {playername}. Will you train some troops for me? I would be grateful to you.", "lord_tell_mission_raise_troops",[
 ##diplomacy end+
   #SB : use DPLMC_CULTURAL_TERM_WEAPON
    (call_script, "script_lord_comment_to_s43", "$g_talk_troop", "str_troop_train_request_default"),
    (call_script, "script_dplmc_print_cultural_word_to_sreg", "$g_talk_troop", DPLMC_CULTURAL_TERM_WEAPON, s42),
     ]],

   #SB : also change this to gender agnostic term
  [anyone|plyr,"lord_tell_mission_raise_troops", [], "How many soldiers do you need?", "lord_tell_mission_raise_troops_2",[]],

  [anyone,"lord_tell_mission_raise_troops_2", [], "If you can raise {reg1} {s14} and bring them to me, that will probably be enough.", "lord_mission_raise_troops_told",
   [
     (quest_get_slot, ":quest_target_troop", "$random_quest_no", slot_quest_target_troop),
     (quest_get_slot, reg1, "$random_quest_no", slot_quest_target_amount),
     (str_store_troop_name_link,s9,"$g_talk_troop"),
     (str_store_troop_name_plural,s14,":quest_target_troop"),
     (setup_quest_text,"$random_quest_no"),
     ##diplomacy start+ fix pronoun
     #"him" changed to "{reg0?her:him}"
     (str_store_string, s2, "@{s9} asked you to raise {reg1} {s14} and bring them to {reg65?her:him}."),
     ##diplomcay end+
   ]],

  [anyone|plyr,"lord_mission_raise_troops_told", [(quest_get_slot, reg1, "$random_quest_no", slot_quest_target_amount)],
   "Of course, {s65}. Give me {reg1} fresh recruits and I'll train them to be {s14}.", "lord_mission_raise_troops_accepted",[]],
  [anyone|plyr,"lord_mission_raise_troops_told", [], "I am too busy these days to train anyone.", "lord_mission_raise_troops_rejected",[]],

  [anyone,"lord_mission_raise_troops_accepted", [], "You've taken a weight off my shoulders, {playername}.\
 I shall tell my sergeants to send you the recruits and attach them to your command.\
 Also, I'll advance you some money to help with expenses. Here, this purse should do it.\
 Thank you for your help.", "close_window",
   [(call_script, "script_start_quest", "$random_quest_no", "$g_talk_troop"),
    # (call_script, "script_troop_add_gold", "trp_player", 100),
    (quest_get_slot, ":recruit_troop", "$random_quest_no", slot_quest_object_troop),
    (quest_get_slot, ":num_recruits", "$random_quest_no", slot_quest_target_amount),
    #SB : calculate the actual amount of upgrade cost, for most recruits this starts off at 20 apiece
    (call_script, "script_game_get_upgrade_cost", ":recruit_troop"),
    (store_mul, ":amount", reg0, ":num_recruits"),
    (call_script, "script_troop_add_gold", "trp_player", ":amount"),
    (party_add_members, "p_main_party", ":recruit_troop", ":num_recruits"),
    (call_script, "script_change_player_relation_with_troop","$g_talk_troop",1),
    (assign, "$g_leave_encounter",1),
   ]],

  [anyone,"lord_mission_raise_troops_rejected", [], "Oh, of course. I had expected as much. Well, good luck to you then.", "lord_pretalk",
   [(troop_set_slot, "$g_talk_troop", slot_troop_does_not_give_quest, 1)]],


#Collect Taxes
  [anyone,"lord_tell_mission", [(eq,"$random_quest_no","qst_collect_taxes"),
                                (assign, reg9, 0),
                                (try_begin),
                                  (quest_get_slot, ":quest_target_center", "$random_quest_no", slot_quest_target_center),
                                  (party_slot_eq, ":quest_target_center", slot_party_type, spt_town),
                                  (assign, reg9, 1),
                                (try_end),
                                ], "You probably know that I am the lord of the {reg9?town:village} of {s3}.\
 However, it has been months since {s3} has delivered the taxes and rents due me as its rightful lord.\
 Apparently the populace there has grown unruly lately and I need someone to go there and remind them of\
 their obligations. And to . . . persuade them if they won't listen.\
 If you go there and raise the taxes they owe me, I will grant you one-fifth of everything you collect.", "lord_mission_collect_taxes_told",
   [
     (quest_get_slot, ":quest_target_center", "$random_quest_no", slot_quest_target_center),
     (str_store_troop_name_link,s9,"$g_talk_troop"),
     (str_store_party_name_link,s3,":quest_target_center"),
     (setup_quest_text,"$random_quest_no"),
	 ##diplomacy start+ fix pronoun
	 #"He" changed to "{reg65?She:He}"
     (str_store_string, s2, "@{s9} asked you to collect taxes from {s3}. {reg65?She:He} offered to leave you one-fifth of all the money you collect there."),
	 ##diplomacy end+
   ]],

  [anyone|plyr,"lord_mission_collect_taxes_told", [],
   "A fair offer, {s65}. We have an agreement.", "lord_mission_collect_taxes_accepted",[]],
  [anyone|plyr,"lord_mission_collect_taxes_told", [], "Forgive me, I don't have the time.", "lord_mission_collect_taxes_rejected",[]],

  [anyone,"lord_mission_collect_taxes_accepted", [], "Welcome news, {playername}.\
 I will entrust this matter to you.\
 Remember, those {reg9?townsmen:peasants} are foxy beasts, they will make every excuse not to pay me my rightful incomes.\
 Do not let them fool you.", "close_window",
   [(call_script, "script_start_quest", "$random_quest_no", "$g_talk_troop"),
    (call_script, "script_change_player_relation_with_troop","$g_talk_troop",1),
    (assign, "$g_leave_encounter",1),
    (assign, reg9, 0),
    (quest_get_slot, ":quest_target_center", "$random_quest_no", slot_quest_target_center),
    (try_begin),
      (party_slot_eq, ":quest_target_center", slot_party_type, spt_town),
      (assign, reg9, 1),
    (try_end),
   ]],

  [anyone,"lord_mission_collect_taxes_rejected", [], "Oh, yes. Well, good luck to you then.", "lord_pretalk",
   [(troop_set_slot, "$g_talk_troop", slot_troop_does_not_give_quest, 1)]],

#Hunt down fugitive
  [anyone,"lord_tell_mission", [(eq,"$random_quest_no","qst_hunt_down_fugitive")],
   "I have something you could help with, an issue with the lawless villain known as {s4}. \
 He murdered one of my men and has been on the run from his judgment ever since.\
 I can't let him get away with avoiding justice, so I've put a bounty of 300 denars on his head.\
 Friends of the murdered man reckon that this assassin may have taken refuge with his kinsmen at {s3}.\
 You might be able to hunt him down and give him what he deserves, and claim the bounty for yourself.", "lord_mission_hunt_down_fugitive_told",
   [
     (quest_get_slot, ":quest_target_center", "$random_quest_no", slot_quest_target_center),
     (quest_get_slot, ":quest_target_dna", "$random_quest_no", slot_quest_target_dna),
     (str_store_troop_name_link,s9, "$g_talk_troop"),
     (str_store_party_name_link,s3, ":quest_target_center"),
     (call_script, "script_get_name_from_dna_to_s50", ":quest_target_dna"),
     (str_store_string, s4, s50),
     (setup_quest_text, "$random_quest_no"),
     (str_store_string, s2, "@{s9} asked you to hunt down a fugitive named {s4}. He is currently believed to be at {s3}."),
   ]],

  [anyone|plyr,"lord_mission_hunt_down_fugitive_told", [],
   "Then I will hunt him down and execute the law.", "lord_mission_hunt_down_fugitive_accepted",[]],
  [anyone|plyr,"lord_mission_hunt_down_fugitive_told", [], "I am too busy to go after him at the moment.", "lord_mission_hunt_down_fugitive_rejected",[]],

  [anyone,"lord_mission_hunt_down_fugitive_accepted", [], "That's excellent, {playername}.\
 I will be grateful to you and so will the family of the man he murdered.\
 And of course the bounty on his head will be yours if you can get him.\
 Well, good hunting to you.", "close_window",
   [(call_script, "script_start_quest", "$random_quest_no", "$g_talk_troop"),
    (call_script, "script_change_player_relation_with_troop","$g_talk_troop",1),
    
    # #SB : add the troop to the village itself
    # (quest_get_slot, ":quest_target_center", "$random_quest_no", slot_quest_target_center),
    # (party_add_members, ":quest_target_center", "trp_fugitive", 1),
    (assign, "$g_leave_encounter",1),
   ]],

  [anyone,"lord_mission_hunt_down_fugitive_rejected", [], "As you wish, {playername}.\
I suppose there are plenty of bounty hunters around to get the job done . . .", "lord_pretalk",
   [(troop_set_slot, "$g_talk_troop", slot_troop_does_not_give_quest, 1)]],



##  [anyone,"lord_tell_mission", [(eq,"$random_quest_no","qst_capture_messenger")],
##   "The enemy seems to be preparing for some kind of action and I want to know what their plans are.\
## Capture one of their messengers and bring him to me.", "lord_mission_told",
##   [
##       (quest_get_slot, ":quest_target_troop", "$random_quest_no", slot_quest_target_troop),
##
##       (str_store_troop_name_link,1,"$g_talk_troop"),
##       (str_store_party_name_link,2,"$g_encountered_party"),
##       (str_store_troop_name,3,":quest_target_troop"),
##       (setup_quest_text,"$random_quest_no"),
##       (try_begin),
##         (is_between, "$g_encountered_party", centers_begin, centers_end),
##         (setup_quest_giver, "$random_quest_no", "str_given_by_s1_at_s2"),
##       (else_try),
##         (setup_quest_giver,"$random_quest_no", "str_given_by_s1_in_wilderness"),
##       (try_end),
##   ]],
##
  [anyone,"lord_tell_mission", [(eq,"$random_quest_no","qst_kill_local_merchant")],
   "The wretched truth is that I owe a considerable sum of money to one of the merchants here in {s3}.\
 I've no intention of paying it back, of course, but that loud-mouthed fool is making a terrible fuss about it.\
 He even had the audacity to come and threaten me -- me! --\
 with a letter of complaint to the trade guilds and bankers. Why, he'd ruin my good reputation!\
 So I need a {man/woman} I can trust, someone who will guarantee the man's silence. For good.", "lord_mission_told_kill_local_merchant",
   [
       (str_store_troop_name_link,s9,"$g_talk_troop"),
       (str_store_party_name_link,s3,"$current_town"),
       (setup_quest_text,"$random_quest_no"),
       (str_store_string, s2, "@{s9} asked you to assassinate a local merchant at {s3}."),
   ]],

  [anyone|plyr,"lord_mission_told_kill_local_merchant", [], "Worry not, he shan't breathe a word.", "lord_mission_accepted_kill_local_merchant",[]],
  [anyone|plyr,"lord_mission_told_kill_local_merchant", [], "I'm no common murderer, sir. Find someone else for your dirty job.", "lord_mission_rejected",[]],

  [anyone,"lord_mission_accepted_kill_local_merchant", [], "Very good. I trust in your skill and discretion,\
 {playername}. Do not disappoint me.\
 Go now and wait for my word, I'll send you a message telling when and where you can catch the merchant.\
 Dispose of him for me and I shall reward you generously.", "close_window",
   [(call_script, "script_start_quest", "$random_quest_no", "$g_talk_troop"),
    (assign, "$g_leave_town",1),
    (assign, "$qst_kill_local_merchant_center", "$current_town"),
    (rest_for_hours, 10, 4, 0),
    (finish_mission),
    ]],

  [anyone,"lord_tell_mission", [(eq,"$random_quest_no","qst_meet_spy_in_enemy_town"),
                                (quest_get_slot, ":quest_target_center", "$random_quest_no", slot_quest_target_center),
                                (str_store_party_name, s13, ":quest_target_center"),
                                (store_faction_of_party,":quest_target_center_faction",),
                                (str_store_faction_name, s14, ":quest_target_center_faction"),
                                ],
   "I have a sensitive matter which needs tending to, {playername}, and no trustworthy retainers to take care of it. The fact is that I have a spy in {s13} to keep an eye on things for me, and report anything that might warrant my attention. Every week I send someone to collect the spy's reports and bring them back to me. The job's yours if you wish it.", "lord_mission_told_meet_spy_in_enemy_town",
   [
   ]],

  [anyone|plyr,"lord_mission_told_meet_spy_in_enemy_town", [], "I don't mind a bit of skullduggery. Count me in.", "quest_meet_spy_in_enemy_town_accepted",[]],
  [anyone|plyr,"lord_mission_told_meet_spy_in_enemy_town", [], "I must decline. This cloak-and-dagger work isn't fit for me.", "quest_meet_spy_in_enemy_town_rejected",[]],

  [anyone,"quest_meet_spy_in_enemy_town_accepted", [], "Excellent! Make your way to {s13} as soon as you can, the spy will be waiting.", "quest_meet_spy_in_enemy_town_accepted_response",
   [
     (quest_get_slot, ":quest_target_center", "$random_quest_no", slot_quest_target_center),
     (quest_get_slot, ":secret_sign", "$random_quest_no", slot_quest_target_amount),
     (store_sub, ":countersign", ":secret_sign", secret_signs_begin),
     (val_add, ":countersign", countersigns_begin),
     (str_store_troop_name_link, s9, "$g_talk_troop"),
     (str_store_string, s11, ":secret_sign"),
     (str_store_string, s12, ":countersign"),
     (str_store_party_name_link, s13, ":quest_target_center"),
     (setup_quest_text, "$random_quest_no"),
     (str_store_string, s2, "@{s9} has asked you to meet with a spy in {s13}."),
     (call_script, "script_start_quest", "$random_quest_no", "$g_talk_troop"),
     (call_script, "script_cf_center_get_free_walker", ":quest_target_center"),
     (call_script, "script_center_set_walker_to_type", ":quest_target_center", reg0, walkert_spy),
     # (str_store_item_name,s14,"$spy_item_worn"), #SB : useless code
     #TODO: Change this value
     (call_script, "script_change_player_relation_with_troop", "$g_talk_troop", 1),
     (assign, "$g_leave_encounter",1),
    ]],
  [anyone|plyr,"quest_meet_spy_in_enemy_town_accepted_response", [(quest_get_slot, ":quest_target_center", "$random_quest_no", slot_quest_target_center),
                                                                  (str_store_party_name_link, s13, ":quest_target_center")],
   "{s13} is heavily defended. How can I get close without being noticed?", "quest_meet_spy_in_enemy_town_accepted_2",
   []],
  [anyone,"quest_meet_spy_in_enemy_town_accepted_2", [], "You shall have to use stealth. Take care to avoid enemy strongholds, villages and patrols, and don't bring too many men with you. If you fail to sneak in the first time, give it a while for the garrison to lower its guard again, or you may have a difficult time infiltrating the town.", "quest_meet_spy_in_enemy_town_accepted_response",
   []],
  [anyone|plyr,"quest_meet_spy_in_enemy_town_accepted_response", [], "How will I recognise the spy?", "quest_meet_spy_in_enemy_town_accepted_3",
   []],
  [anyone,"quest_meet_spy_in_enemy_town_accepted_3", [(quest_get_slot, ":quest_target_center", "$random_quest_no", slot_quest_target_center),
                                                      (str_store_party_name_link, s13, ":quest_target_center"),
													  ##diplomacy start+ Use script for gender
                                                      #(troop_get_type, reg7, "$spy_quest_troop"),
													  (assign, reg7, 0),
													  (try_begin),
														(call_script, "script_cf_dplmc_troop_is_female", "$spy_quest_troop"),
														(assign, reg7, 1),
													  (try_end),
													  ##diplomacy end+
                                                      (quest_get_slot, ":secret_sign", "$random_quest_no", slot_quest_target_amount),
                                                      (store_sub, ":countersign", ":secret_sign", secret_signs_begin),
                                                      (val_add, ":countersign", countersigns_begin),
                                                      (str_store_string, s11, ":secret_sign"),
                                                      (str_store_string, s12, ":countersign"),],
   "Once you get to {s13} you must talk to the locals, the spy will be one of them. If you think you've found the spy, say the phrase '{s11}' The spy will respond with the phrase '{s12}' Thus you will know the other, and {reg7?she:he} will give you any information {reg7?she:he}'s gathered in my service.", "quest_meet_spy_in_enemy_town_accepted_response",
   []],
  [anyone|plyr,"quest_meet_spy_in_enemy_town_accepted_response", [], "Will I be paid?", "quest_meet_spy_in_enemy_town_accepted_4",
   []],
  [anyone,"quest_meet_spy_in_enemy_town_accepted_4", [], "Of course, I have plenty of silver in my coffers for loyal {men/women} like you. Do well by me, {playername}, and you'll rise high.", "quest_meet_spy_in_enemy_town_accepted_response",
   []],
  [anyone|plyr,"quest_meet_spy_in_enemy_town_accepted_response", [], "I know what to do. Farewell, my lord.", "quest_meet_spy_in_enemy_town_accepted_end",
   []],
  [anyone,"quest_meet_spy_in_enemy_town_accepted_end", [(quest_get_slot, ":secret_sign", "$random_quest_no", slot_quest_target_amount),
                                                        (store_sub, ":countersign", ":secret_sign", secret_signs_begin),
                                                        (val_add, ":countersign", countersigns_begin),
                                                        (str_store_string, s11, ":secret_sign"),
                                                        (str_store_string, s12, ":countersign")],
   "Good luck, {playername}. Remember, the secret phrase is '{s11}' The counterphrase is '{s12}' Bring any reports back to me, and I'll compensate you for your trouble.", "lord_pretalk",
   []],

  [anyone,"quest_meet_spy_in_enemy_town_rejected", [], "As you wish, {playername}, but I strongly advise you to forget anything I told you about any spies. They do not exist, have never existed, and no one will ever find them. Remember that.", "lord_pretalk",
   [(troop_set_slot, "$g_talk_troop", slot_troop_does_not_give_quest, 1)]],




  [anyone,"lord_tell_mission", [(eq,"$random_quest_no","qst_cause_provocation"),
                                (quest_get_slot, ":quest_target_faction", "$random_quest_no", slot_quest_target_faction),
                                (str_store_faction_name_link, s13, ":quest_target_faction")],
   "This peace with {s13} ill suits me, {playername}. We've let those swine have their way for far too long.\
 Now they get stronger with each passing and their arrogance knows no bounds.\
 I say, we must wage war on them before it's too late!\
 Unfortunately, some of the bleeding hearts among our realm's lords are blocking a possible declaration of war.\
 Witless cowards with no stomach for blood.", "lord_mission_told_raid_caravan_to_start_war",
   [
   ]],

  [anyone|plyr,"lord_mission_told_raid_caravan_to_start_war", [], "You are right, {s65}, but what can we do?", "lord_mission_tell_raid_caravan_to_start_war_2",[]],
  [anyone|plyr,"lord_mission_told_raid_caravan_to_start_war", [], "I disagree, sir. It is better that there be peace.", "quest_raid_caravan_to_start_war_rejected_1",[]],

  [anyone,"lord_mission_tell_raid_caravan_to_start_war_2", [(quest_get_slot, ":quest_target_faction", "$random_quest_no", slot_quest_target_faction),
                                                            (str_store_faction_name_link, s13, ":quest_target_faction"),
															(str_store_faction_name, s14, "$g_talk_troop_faction")],
   "Ah, 'tis good to hear someone who understands!\
 As a matter of fact, there is something we can do, {playername}. A little bit of provocation...\
 If one of our war parties managed to enter their territory and pillage one of their caravans, or raided one of their villages,\
 and perhaps left behind a little token or two of the {s14},\
 they would have ample cause to declare war on us.\
 And then, well, even the cowards among us must rise to defend themselves.\
 So what do you say? Are you interested?", "lord_mission_tell_raid_caravan_to_start_war_3",[]],

  [anyone|plyr,"lord_mission_tell_raid_caravan_to_start_war_3", [], "An excellent plan. Count me in.", "quest_raid_caravan_to_start_war_accepted",[]],
  [anyone|plyr,"lord_mission_tell_raid_caravan_to_start_war_3", [], "Why don't you do that yourself?", "lord_mission_tell_raid_caravan_to_start_war_4",[]],

  [anyone,"lord_mission_tell_raid_caravan_to_start_war_4", [
  	], "Well, {playername}, some of the lords in our kingdom\
 won't like the idea of someone inciting a war without their consent.\
 They are already looking for an excuse to get at me, and if I did this they could make me pay for it dearly.\
 You, on the other hand, are young and well-liked and daring, so you might just get away with it.\
 And of course I will back you up and defend your actions against your opponents.\
 All in all, a few lords might be upset at your endeavour, but I am sure you won't be bothered with that.", "lord_mission_tell_raid_caravan_to_start_war_5",[]],

  [anyone|plyr,"lord_mission_tell_raid_caravan_to_start_war_5", [], "That seems reasonable. I am willing to do this.", "quest_raid_caravan_to_start_war_accepted",[]],
  [anyone|plyr,"lord_mission_tell_raid_caravan_to_start_war_5", [], "I don't like this. Find yourself someone else to take the blame for your schemes.", "quest_raid_caravan_to_start_war_rejected_2",[]],

  [anyone,"quest_raid_caravan_to_start_war_accepted", [], "Very good!\
 A raid on a caravan, or, if you can't manage that, an attack on one of their villages, should do the trick.\
 Now, good luck and good hunting. Go set the borders aflame!", "close_window",
   [
     (quest_get_slot, ":quest_target_faction", "$random_quest_no", slot_quest_target_faction),
     (quest_get_slot, ":quest_target_amount", "$random_quest_no", slot_quest_target_amount),
     (str_store_troop_name_link, s9, "$g_talk_troop"),
     (str_store_faction_name_link, s13, ":quest_target_faction"),
     (assign, reg13, ":quest_target_amount"),
     (setup_quest_text,"$random_quest_no"),
     (str_store_string, s2, "str_s9_asked_you_to_attack_a_village_or_some_caravans_as_to_provoke_a_war_with_s13"),
     (call_script, "script_start_quest", "$random_quest_no", "$g_talk_troop"),
#     (call_script, "script_change_player_relation_with_troop","$g_talk_troop",5),
     (assign, "$g_leave_encounter",1),
    ]],

  [anyone,"quest_raid_caravan_to_start_war_rejected_1", [], "Ah, you think so? But how long will your precious peace last? Not long, believe me.", "lord_pretalk",
   [(troop_set_slot, "$g_talk_troop", slot_troop_does_not_give_quest, 1)]],
  [anyone,"quest_raid_caravan_to_start_war_rejected_2", [], "Hm. As you wish, {playername}.\
 I thought you had some fire in you, but it seems I was wrong.", "lord_pretalk",
   [(troop_set_slot, "$g_talk_troop", slot_troop_does_not_give_quest, 1)]],




  [anyone,"lord_tell_mission", [(eq,"$random_quest_no","qst_bring_back_runaway_serfs")],
 "Well, some of the serfs working my fields in {s4} have run away. The ungrateful swine,\
 I let them plough my fields and rent my cottages, and this is how they repay me!\
 From what I've been hearing, they're running to {s3} as fast as they can,\
 and have split up into three groups to try and avoid capture.\
 I want you to capture all three groups and fetch them back to {s4} by whatever means necessary.\
 I should really have them hanged for attempting to escape, but we need hands for the upcoming harvest,\
 so I'll let them go off this time with a good beating.", "lord_mission_told",
   [
       (quest_get_slot, ":quest_target_center", "$random_quest_no", slot_quest_target_center),
       (quest_get_slot, ":quest_object_center", "$random_quest_no", slot_quest_object_center),

       (str_store_troop_name_link, s9, "$g_talk_troop"),
       (str_store_party_name_link, s3, ":quest_target_center"),
       (str_store_party_name_link, s4, ":quest_object_center"),
       (setup_quest_text,"$random_quest_no"),
       (str_store_string, s2, "str_s9_asked_you_to_catch_the_three_groups_of_runaway_serfs_and_bring_them_back_to_s4_alive_and_breathing_he_said_that_all_three_groups_are_heading_towards_s3"),
    ]],

    #SB : gender strings
  [anyone,"lord_tell_mission", [(eq,"$random_quest_no","qst_follow_spy")],
 "I have good information that a {reg3?woman:man} in this very town is actually an enemy spy.\
 {reg3?She:He} should be seized and hanged for {reg3?his:her} impudence,\
 but we also believe that very soon {reg3?she:he} will leave town to meet with {reg3?her:his} master,\
 the man to whom the spy feeds all {reg3?her:his} little whispers.\
 The spy himself is of little import, but the master is a dangerous man, and could tell us a great deal\
 if we could only get our hands on him...", "lord_tell_mission_follow_spy",[
   (call_script, "script_dplmc_store_troop_is_female_reg", "trp_spy", 3),
 ]],
  [anyone,"lord_tell_mission_follow_spy", [],
 "I want you to wait here until the spy leaves town. Then you must follow {reg3?her:him}, stealthily, to the meeting place.\
 You must take absolute care not to be seen by the spy on your way, else {reg3?she:he} may suspect foul play and turn back.\
 When the master appears, you must ambush and arrest them and bring the pair back to me.\
 Alive, if you please.", "lord_tell_mission_follow_spy_2",
   [(call_script, "script_dplmc_store_troop_is_female_reg", "trp_spy", 3),
    ]],

  [anyone|plyr, "lord_tell_mission_follow_spy_2", [],
 "I'll do it, {s65}.", "lord_tell_mission_follow_spy_accepted", []],
  [anyone|plyr, "lord_tell_mission_follow_spy_2", [],
 "No, this skulking is not for me.", "lord_tell_mission_follow_spy_rejected", []],


  [anyone,"lord_tell_mission_follow_spy_accepted", [],
   "Good, I'm sure you'll do a fine job of it. One of my men will point the spy out to you when {reg3?she:he} leaves,\
 so you will know the man to follow. Remember, I want them both, and I want them alive.", "close_window",
   [
     (str_store_troop_name_link, s11, "$g_talk_troop"),
     (str_store_party_name_link, s12, "$g_encountered_party"),
     (setup_quest_text, "$random_quest_no"),
     #SB : gender string
     (call_script, "script_dplmc_store_troop_is_female_reg", "trp_spy", 3),
     (str_store_string, s2, "@{s11} asked you to follow the spy that will leave {s12}. Be careful not to let the spy see you on the way, or {reg3?she:he} may get suspicious and turn back. Once the spy meets with {reg3?her:his} accomplice, you are to capture them and bring them back to {s11}."),
     (call_script, "script_start_quest", "$random_quest_no", "$g_talk_troop"),
     #TODO: Change this value
     (call_script, "script_change_player_relation_with_troop", "$g_talk_troop", 1),

     (set_spawn_radius, 3),
     (spawn_around_party, "p_main_party", "pt_spy_partners"),
     (assign, "$qst_follow_spy_spy_partners_party", reg0),
     (party_set_position, "$qst_follow_spy_spy_partners_party", pos63),
     (party_set_ai_behavior, "$qst_follow_spy_spy_partners_party", ai_bhvr_hold),
     (party_set_flags, "$qst_follow_spy_spy_partners_party", pf_default_behavior, 0),
     (set_spawn_radius, 0),
     (spawn_around_party, "$g_encountered_party", "pt_spy"),
     (assign, "$qst_follow_spy_spy_party", reg0),
     (party_set_ai_behavior, "$qst_follow_spy_spy_party", ai_bhvr_travel_to_party),
     (party_set_ai_object, "$qst_follow_spy_spy_party", "$qst_follow_spy_spy_partners_party"),
     (party_set_flags, "$qst_follow_spy_spy_party", pf_default_behavior, 0),
     (assign, "$g_leave_town", 1),
     (rest_for_hours, 2, 4, 0),
     #no need to set g_leave_encounter to 1 since this quest can only be given at a town
   ]],

  [anyone,"lord_tell_mission_follow_spy_rejected", [],
   "A shame. Well, carry on as you were, {playername}...", "lord_pretalk",
   [(troop_set_slot, "$g_talk_troop", slot_troop_does_not_give_quest, 1)]],




  [anyone,"lord_tell_mission", [(eq,"$random_quest_no","qst_capture_enemy_hero")],
 "There is a difficult job I need done, {playername}, and you may be the {man/one} who can carry it off.\
 I need someone to capture one of the noble lords of {s13} and bring him to me.\
 Afterwards, I'll be able to exchange him in return for a relative of mine held by {s13}.\
 It is a simple enough job, but whomever you choose will be guarded by an elite band of personal retainers.\
 Are you up for a fight?", "lord_tell_mission_capture_enemy_hero",
   [
     (quest_get_slot, ":quest_target_faction", "$random_quest_no", slot_quest_target_faction),
     (str_store_faction_name, s13, ":quest_target_faction"),
    ]],

  [anyone|plyr, "lord_tell_mission_capture_enemy_hero", [],
 "Consider it done, {s65}.", "lord_tell_mission_capture_enemy_hero_accepted", []],
  [anyone|plyr, "lord_tell_mission_capture_enemy_hero", [],
 "I must refuse, {s65}. I am not a kidnapper.", "lord_tell_mission_capture_enemy_hero_rejected", []],

  [anyone,"lord_tell_mission_capture_enemy_hero_accepted", [],
   "I like your spirit! Go and bring me one of our enemies,\
 and I'll toast your name in my hall when you return! And reward you for your efforts, of course...", "close_window",
   [
     (quest_get_slot, ":quest_target_faction", "$random_quest_no", slot_quest_target_faction),
     (str_store_troop_name_link, s11, "$g_talk_troop"),
     (str_store_faction_name_link, s13, ":quest_target_faction"),
     (setup_quest_text, "$random_quest_no"),
     (str_store_string, s2, "@{s11} asked you to capture a lord from {s13}, any lord, and then drag your victim back to {s11} for safekeeping."),
     (call_script, "script_start_quest", "$random_quest_no", "$g_talk_troop"),
     #TODO: Change this value
     (call_script, "script_change_player_relation_with_troop", "$g_talk_troop", 1),
     (assign, "$g_leave_encounter",1),
   ]],

  [anyone,"lord_tell_mission_capture_enemy_hero_rejected", [],
   "Clearly you lack the mettle I had thought you possessed. Very well, {playername}, I will find someone else.", "lord_pretalk",
   [(troop_set_slot, "$g_talk_troop", slot_troop_does_not_give_quest, 1)]],




  [anyone,"lord_tell_mission", [(eq,"$random_quest_no","qst_lend_companion")],
 "I don't have a job for you right now, but your companion {s3} is a skilled {reg3?lass:fellow}\
 and I need someone with {reg3?her:his} talents. Will you lend {reg3?her:him} to me for a while?", "lord_tell_mission_lend_companion",
  [
   (quest_get_slot, ":quest_target_troop", "$random_quest_no", slot_quest_target_troop),
   (quest_get_slot, ":quest_target_amount", "$random_quest_no", slot_quest_target_amount),
   (val_add, ":quest_target_amount", 1),
   (assign, reg1, ":quest_target_amount"),
   (str_store_troop_name_link,s9,"$g_talk_troop"),
   (str_store_troop_name,s3,":quest_target_troop"),
   (setup_quest_text,"$random_quest_no"),
   ##diplomacy start+
   (call_script, "script_dplmc_store_troop_is_female_reg", ":quest_target_troop", 3), # <- dplmc+ replaced (troop_get_type, reg3, ":quest_target_troop")
   (call_script, "script_dplmc_store_troop_is_female_reg", "$g_talk_troop", 65),
   ##diplomacy end+
   #SB : gender string
   (str_store_string, s2, "@{s9} asked you to lend your companion {s3} to {reg65?him:her} for a week."),
  ]],
  [anyone|plyr,"lord_tell_mission_lend_companion", [],
 "How long will you be needing {reg3?her:him}?", "lord_tell_mission_lend_companion_2", []],
  [anyone,"lord_tell_mission_lend_companion_2", [],
 "Just a few days, a week at most.", "lord_mission_lend_companion_told", []],

  [anyone|plyr,"lord_mission_lend_companion_told",
   [(quest_get_slot, ":quest_target_troop", "$random_quest_no", slot_quest_target_troop),(str_store_troop_name,s3,":quest_target_troop"),],
   "Then I will leave {s3} with you for one week.", "lord_tell_mission_lend_companion_accepted", []],
  [anyone|plyr,"lord_mission_lend_companion_told", [(quest_get_slot, ":quest_target_troop", "$random_quest_no", slot_quest_target_troop),
                                                    (str_store_troop_name,s3,":quest_target_troop"),],
   "I am sorry, but I cannot do without {s3} for a whole week.", "lord_tell_mission_lend_companion_rejected", []],

  [anyone,"lord_tell_mission_lend_companion_accepted", [],
   "I cannot thank you enough, {playername}. Worry not, your companion shall be returned to you with due haste.", "close_window",
   [(call_script, "script_start_quest", "$random_quest_no", "$g_talk_troop"),
    (call_script, "script_change_player_relation_with_troop","$g_talk_troop",1),
    (quest_get_slot, ":quest_target_troop", "$random_quest_no", slot_quest_target_troop),
    (call_script, "script_troop_change_relation_with_troop", ":quest_target_troop", "$g_talk_troop", 3),
    (party_remove_members, "p_main_party", ":quest_target_troop", 1),
    (assign, "$g_leave_encounter",1),
   ]],

  [anyone,"lord_tell_mission_lend_companion_rejected", [],
   "Well, that's damned unfortunate, but I suppose I cannot force you or {s3} to agree.\
 I shall have to make do without.", "lord_pretalk",
   [(troop_set_slot, "$g_talk_troop", slot_troop_does_not_give_quest, 1)]],


  [anyone,"lord_tell_mission", [(eq,"$random_quest_no","qst_collect_debt"),
  ##diplomacy start+ correct gender of s3 using reg0
  (quest_get_slot, ":quest_target_troop", "$random_quest_no", slot_quest_target_troop),
  (call_script, "script_dplmc_store_troop_is_female",  ":quest_target_troop"),
  ],
  #He -> {reg0?She:He},  him -> {reg0?her:him}
   "Some time ago, I loaned out a considerable sum of money to {s3}. {reg4} denars, to be precise.\
 {reg0?She:He} was supposed to pay it back within a month but I haven't received a copper from {reg0?her:him} since.\
 That was months ago. If you could collect the debt from {reg0?her:him} on my behalf,\
 I would be grateful indeed. I would even let you keep one fifth of the money for your trouble.\
 What do you say?", "lord_tell_mission_collect_debt",
   [
     (quest_get_slot, ":quest_target_troop", "$random_quest_no", slot_quest_target_troop),
     (quest_get_slot, ":quest_target_center", "$random_quest_no", slot_quest_target_center),
     (quest_get_slot, reg4, "$random_quest_no", slot_quest_target_amount),
     (str_store_troop_name_link,s9,"$g_talk_troop"),
     (str_store_troop_name_link,s3,":quest_target_troop"),
     (str_store_party_name_link,s4,":quest_target_center"),
     (setup_quest_text,"$random_quest_no"),
	 ##Also correct pronoun in the quest text
	 #Next line: changed "him" to "{reg65?her:him}"
     (str_store_string, s2, "@{s9} asked you to collect the debt of {reg4} denars {s3} owes to {reg65?her:him}. {s3} was at {s4} when you were given this quest."),
   ]],
  ##diplomacy end+
  [anyone|plyr,"lord_tell_mission_collect_debt", [],
 "Do you know where I can find {s3}, {s65}?", "lord_tell_mission_collect_debt_2", []],
  [anyone,"lord_tell_mission_collect_debt_2", [
  ##diplomacy start+ correct gender of s3 using reg0
  (quest_get_slot, ":quest_target_troop", "$random_quest_no", slot_quest_target_troop),#added
  (call_script, "script_dplmc_store_troop_is_female",  ":quest_target_troop"),#added
  ],#Next line, change pronouns:
 "If you leave now, you should be able to find {reg0?her:him} at {s4}.\
 I've no doubt that {reg0?she:he} will be suitably embarassed by {reg0?her:his} conduct and give you all the money {reg0?she:he} owes me.", "lord_tell_mission_collect_debt_3", []],
 ##diplomacy end+
  [anyone|plyr,"lord_tell_mission_collect_debt_3", [], "Then I will talk to {s3} on your behalf.", "lord_tell_mission_collect_debt_accepted", []],
  [anyone|plyr,"lord_tell_mission_collect_debt_3", [], "Forgive me, {s65}, but I doubt I would be more successful than yourself.", "lord_tell_mission_collect_debt_rejected", []],

  [anyone,"lord_tell_mission_collect_debt_accepted", [
##diplomacy start+ correct gender of s3 using reg0
  (quest_get_slot, ":quest_target_troop", "$random_quest_no", slot_quest_target_troop),#added
  (call_script, "script_dplmc_store_troop_is_female",  ":quest_target_troop"),#added
  #Next line, change pronoun:
  ], "You made me very happy by accepting this {playername}. Please, talk to {s3} and don't leave {reg0?her:him} without my money.", "close_window",
##diplomacy end+
   [(call_script, "script_start_quest", "$random_quest_no", "$g_talk_troop"),
    (call_script, "script_change_player_relation_with_troop","$g_talk_troop", 1),
    (assign, "$g_leave_encounter",1),
   ]],

  [anyone,"lord_tell_mission_collect_debt_rejected", [], "Perhaps not, {playername}. I suppose I'm never getting that money back...", "lord_pretalk",
   [(troop_set_slot, "$g_talk_troop", slot_troop_does_not_give_quest, 1)]],

##
##  [anyone,"lord_tell_mission", [(eq,"$random_quest_no","qst_capture_conspirators")],
## "TODO: I want you to capture troops in {reg1} conspirator parties that plan to rebel against me and join {s3}.", "lord_mission_told",
##   [
##       (quest_get_slot, ":quest_target_troop", "$random_quest_no", slot_quest_target_troop),
##       (assign, reg1, "$qst_capture_conspirators_num_parties_to_spawn"),
##       (str_store_troop_name_link,1,"$g_talk_troop"),
##       (str_store_party_name_link,2,"$g_encountered_party"),
##       (str_store_troop_name,3,":quest_target_troop"),
##       (setup_quest_text,"$random_quest_no"),
##       (try_begin),
##         (is_between, "$g_encountered_party", centers_begin, centers_end),
##         (setup_quest_giver, "$random_quest_no", "str_given_by_s1_at_s2"),
##       (else_try),
##         (setup_quest_giver,"$random_quest_no", "str_given_by_s1_in_wilderness"),
##       (try_end),
##    ]],
##
##
##  [anyone,"lord_tell_mission", [(eq,"$random_quest_no","qst_defend_nobles_against_peasants")],
## "TODO: I want you to defend {reg1} noble parties against peasants.", "lord_mission_told",
##   [
##       (assign, reg1, "$qst_defend_nobles_against_peasants_num_noble_parties_to_spawn"),
##       (str_store_troop_name_link,1,"$g_talk_troop"),
##       (str_store_party_name_link,2,"$g_encountered_party"),
##       (setup_quest_text,"$random_quest_no"),
##       (try_begin),
##         (is_between, "$g_encountered_party", centers_begin, centers_end),
##         (setup_quest_giver, "$random_quest_no", "str_given_by_s1_at_s2"),
##       (else_try),
##         (setup_quest_giver,"$random_quest_no", "str_given_by_s1_in_wilderness"),
##       (try_end),
##    ]],
##
##
  [anyone,"lord_tell_mission", [(eq, "$random_quest_no", "qst_incriminate_loyal_commander"),
                                (quest_get_slot, ":quest_target_troop", "qst_incriminate_loyal_commander", slot_quest_target_troop),
                                (quest_get_slot, ":quest_object_troop", "qst_incriminate_loyal_commander", slot_quest_object_troop),
                                (quest_get_slot, ":quest_target_center", "qst_incriminate_loyal_commander", slot_quest_target_center),
                                (str_store_troop_name_link, s13,":quest_target_troop"),
                                (str_store_party_name_link, s14,":quest_target_center"),
                                (str_store_troop_name_link, s15,":quest_object_troop"),
								##diplomacy start+ use correct gender for "s13" pronouns using reg3
								(call_script, "script_dplmc_store_troop_is_female_reg", ":quest_target_troop", 3), # <- dplmc+ replaced (troop_get_type, reg3, ":quest_target_troop")
                                ],
#Changed pronouns in next line: "his" to "{reg3?her:his}", "him" to "{reg3?her:him}", and "he" to "{reg3?she:he}"
 "I tell you, that blubbering fool {s13} is not fit to rule {s14}.\
 God knows {reg3?she:he} would be divested of {reg3?her:his} lands in an instant were it not for one of {reg3?her:his} loyal vassals, {s15}.\
 As long as {reg3?she:he} has {reg3?her:his} vassal aiding {reg3?her:him}, it will be a difficult job beating {reg3?her:him}.\
 So I need to get {s15} out of the picture, and I have a plan just to do that...\
 With your help, naturally.", "lord_tell_mission_incriminate_commander",[]],
 ##diplomacy end+

  [anyone|plyr,"lord_tell_mission_incriminate_commander", [], "{s66}, I am all ears.", "lord_tell_mission_incriminate_commander_2",[]],
  [anyone|plyr,"lord_tell_mission_incriminate_commander", [], "I don't wish to involve myself in anything dishonourable against {s15}.", "lord_tell_mission_incriminate_commander_rejected",[]],

  [anyone,"lord_tell_mission_incriminate_commander_rejected", [], "Dishonourable? Bah!\
 I was hoping I could count on you, {playername}, but you've shown me what a fool I was.\
 I shall have to find someone whose loyalty I can trust.", "lord_pretalk",
   [(call_script, "script_change_player_relation_with_troop","$g_talk_troop",-5),
    (call_script, "script_change_player_honor", 2)]],

  [anyone,"lord_tell_mission_incriminate_commander_2", [
	##diplomacy start+ use correct gender for the other lord "s13" using reg3 (may be female)
	(quest_get_slot, ":quest_target_troop", "qst_incriminate_loyal_commander", slot_quest_target_troop),
	(call_script, "script_dplmc_store_troop_is_female_reg", ":quest_target_troop", 3),
	#Also get correct gender for "s15" using reg4
	(quest_get_slot, ":quest_object_troop", "qst_incriminate_loyal_commander", slot_quest_object_troop),
	(call_script, "script_dplmc_store_troop_is_female", ":quest_object_troop"),
	(assign, reg0, reg4),
	#Change the pronouns in the next line:
	], "I have written a fake letter to {s15},\
 bearing my own seal, which implicates {reg4?her:him} in a conspiracy with us to stage a coup in {s14}, in my favor.\
 If we can make {s13} believe the letter is genuine, {reg3?she:he} will deal with {s15} very swiftly.\
 Of course, the challenge there is to convince {s13} that the letter is indeed real...", "lord_tell_mission_incriminate_commander_3",[]],
 ##diplomacy end+

  [anyone|plyr,"lord_tell_mission_incriminate_commander_3", [], "Please continue, {s65}...", "lord_tell_mission_incriminate_commander_4",[]],
  [anyone|plyr,"lord_tell_mission_incriminate_commander_3", [], "No, I will not sully myself with this dishonourable scheme.", "lord_tell_mission_incriminate_commander_rejected",[]],

  [anyone,"lord_tell_mission_incriminate_commander_4", [], "This is where you come into play.\
 You'll take the letter to {s14}, then give it to one of your soldiers and instruct {reg4?her:him} to take it to {s15}.\
 I will have one of my spies inform the town garrison so that your {reg4?girl:man} will be arrested on his way.\
 The guards will then find the letter and take it to {s13}.\
 They'll torture your {reg4?woman:man}, of course, to try and get the truth out of {reg4?her:him},\
 but all {reg4?she:he} knows is that you ordered the letter to be delivered to {s15} under the utmost secrecy.\
 {s13} knows you serve me, and the fool will certainly believe the whole charade.", "lord_tell_mission_incriminate_commander_5",[
    #SB : gender of sacrificed messenger, although highest female Sword Sister has level < 25
    (call_script, "script_dplmc_store_troop_is_female_reg", "$incriminate_quest_sacrificed_troop", 4),
 ]],

  [anyone|plyr,"lord_tell_mission_incriminate_commander_5", [], "Is that all?", "lord_tell_mission_incriminate_commander_7",[]],
  [anyone,"lord_tell_mission_incriminate_commander_7", [(str_store_troop_name, s8, "$incriminate_quest_sacrificed_troop"),
                                                        (str_store_troop_name_plural, s9, "$incriminate_quest_sacrificed_troop"),
       ##diplomacy start+ use correct gender for the other lord "s13" using reg3 (may be female)
	   (quest_get_slot, ":quest_target_troop", "qst_incriminate_loyal_commander", slot_quest_target_troop),
	   (call_script, "script_dplmc_store_troop_is_female_reg", ":quest_target_troop", 3),
      ], "There is one more thing...\
 Your messenger must be someone trustworthy. If you sent the letter with a simple peasant, someone expendable,\
 {s13} might suspect a plot. {reg3?She:He} may have the wits of a snail, but even a snail can see the obvious.\
 Give the letter to someone of rank. One of your {s9}, perhaps.", "lord_tell_mission_incriminate_commander_8",[
 
    #SB : gender of sacrificed messenger
    (call_script, "script_dplmc_store_troop_is_female_reg", "$incriminate_quest_sacrificed_troop", 4),
 ]],#changed "He" to "{reg3?She:He}"
 ##diplomacy end+
  [anyone|plyr,"lord_tell_mission_incriminate_commander_8", [], "What? I can't send one of my trusted {s9} to {reg4?her:his} death!", "lord_tell_mission_incriminate_commander_9",[]],
  [anyone|plyr,"lord_tell_mission_incriminate_commander_8", [], "Then a {s8} it will be.", "lord_tell_mission_incriminate_commander_fin",[]],
  [anyone,"lord_tell_mission_incriminate_commander_9", [], "Come now, {playername}.\
 There is a place for sentimentality, but this is not it. Believe me, you shall be generously compensated,\
 and what is the purpose of soldiers if not to die at our say-so?", "lord_tell_mission_incriminate_commander_10",[
     #SB : gender of sacrificed messenger
     (call_script, "script_dplmc_store_troop_is_female_reg", "$incriminate_quest_sacrificed_troop", 4),
 ]],
  [anyone|plyr,"lord_tell_mission_incriminate_commander_10", [], "A {s8} it is.", "lord_tell_mission_incriminate_commander_fin",[]],
  [anyone|plyr,"lord_tell_mission_incriminate_commander_10", [], "No, I'll not sacrifice one of my {reg4?sworn women:chosen men}.", "lord_tell_mission_incriminate_commander_rejected",[]],

 [anyone,"lord_tell_mission_incriminate_commander_fin", [], "I can't tell you how pleased I am to hear that,\
 {playername}. You are removing one of the greatest obstacles in my path.\
 Here is the letter, as well as 300 denars for your expenses.\
 Remember, there'll be more once you succeed. Much, much more...", "lord_pretalk",
   [
       (quest_get_slot, ":quest_target_troop", "qst_incriminate_loyal_commander", slot_quest_target_troop),
       (quest_get_slot, ":quest_object_troop", "qst_incriminate_loyal_commander", slot_quest_object_troop),
       (quest_get_slot, ":quest_target_center", "qst_incriminate_loyal_commander", slot_quest_target_center),
       (call_script, "script_troop_add_gold", "trp_player", 300),
       (call_script, "script_change_player_relation_with_troop","$g_talk_troop",2),
       (str_store_troop_name_link, s11,"$g_talk_troop"),
       (str_store_troop_name_link, s13,":quest_target_troop"),
       (str_store_party_name_link, s14,":quest_target_center"),
       (str_store_troop_name_plural, s15,"$incriminate_quest_sacrificed_troop"),
       (str_store_troop_name_link, s16,":quest_object_troop"),
       (setup_quest_text,"$random_quest_no"),
	   ##diplomacy start+ use correct gender for the other lord "s13" using reg3 (may be female)
       #SB : gender strings for troop as well (90% males)
	   (call_script, "script_dplmc_store_troop_is_female_reg", "$incriminate_quest_sacrificed_troop", 4),
	   (call_script, "script_dplmc_store_troop_is_female_reg", ":quest_target_troop", 3),
       (str_store_string, s2, "@{s11} gave you a fake letter to fool {s13} into banishing {reg3?her:his} vassal {s16}.\
 You are to go near {s14}, give the letter to one of your {s15} and send {reg4?her:him} into the town as a messenger,\
 believing {reg4?her:his} orders to be genuine."),#changed "his vassal" into "{reg3?her:his} vassal"
       ##diplomacy end+
       (call_script, "script_start_quest", "$random_quest_no", "$g_talk_troop"),
    ]],

  [anyone,"lord_tell_mission", [(eq,"$random_quest_no","qst_capture_prisoners")],
 "A group of my soldiers were captured in a recent skirmish with the enemy.\
 Thankfully we have a mutual agreement of prisoner exchange, and they will release my men,\
 but they want us to give them prisoners of equal rank and number. Prisoners I don't currently have.\
 So, I need a good {man/warrior} to find me {reg1} {s3} as prisoners, that I may exchange them.", "lord_mission_told",
   [
       (quest_get_slot, ":quest_target_troop", "qst_capture_prisoners", slot_quest_target_troop),
       (quest_get_slot, ":quest_target_amount", "qst_capture_prisoners", slot_quest_target_amount),
       (assign,reg1,":quest_target_amount"),
       (str_store_troop_name_link,s9,"$g_talk_troop"),
       (str_store_troop_name_by_count,s3,":quest_target_troop",":quest_target_amount"),
       (setup_quest_text,"$random_quest_no"),
       #SB : gender strings
       (str_store_string, s2, "@{s9} has requested you to bring {reg65?her:him} {reg1} {s3} as prisoners."),
    ]],


  [anyone,"lord_tell_mission", [], "No {playername}. I do not need your help at this time.", "lord_pretalk",[]],


  [anyone|plyr,"lord_mission_told", [], "You can count on me, {s65}.", "lord_mission_accepted",[]],
  [anyone|plyr,"lord_mission_told", [], "I fear I cannot accept such a mission at the moment.", "lord_mission_rejected",[]],

  [anyone,"lord_mission_accepted", [], "Excellent, {playername}, excellent. I have every confidence in you.", "close_window",
   [(assign, "$g_leave_encounter",1),
    (try_begin),
      (eq, "$random_quest_no", "qst_escort_lady"),
      (quest_get_slot, ":quest_object_troop", "$random_quest_no", slot_quest_object_troop),
      (troop_set_slot, ":quest_object_troop", slot_troop_cur_center, 0),
      (troop_join, ":quest_object_troop"),
    (else_try),
      (eq, "$random_quest_no", "qst_deliver_message_to_enemy_lord"),
      (call_script, "script_troop_add_gold", "trp_player", 10),
    (else_try),
      (eq, "$random_quest_no", "qst_bring_back_runaway_serfs"),
      (quest_get_slot, ":quest_giver_center", "$random_quest_no", slot_quest_giver_center),
      (quest_get_slot, ":quest_target_center", "$random_quest_no", slot_quest_target_center),
      (quest_get_slot, ":quest_target_party_template", "$random_quest_no", slot_quest_target_party_template),

      (set_spawn_radius, 3),
      (spawn_around_party,":quest_giver_center",":quest_target_party_template"),
      (assign, "$qst_bring_back_runaway_serfs_party_1", reg0),
      (party_set_ai_behavior,"$qst_bring_back_runaway_serfs_party_1",ai_bhvr_travel_to_party),
      (party_set_ai_object,"$qst_bring_back_runaway_serfs_party_1",":quest_target_center"),
      (party_set_flags, "$qst_bring_back_runaway_serfs_party_1", pf_default_behavior, 0),
      (spawn_around_party,":quest_giver_center",":quest_target_party_template"),
      (assign, "$qst_bring_back_runaway_serfs_party_2", reg0),
      (party_set_ai_behavior,"$qst_bring_back_runaway_serfs_party_2",ai_bhvr_travel_to_party),
      (party_set_ai_object,"$qst_bring_back_runaway_serfs_party_2",":quest_target_center"),
      (party_set_flags, "$qst_bring_back_runaway_serfs_party_2", pf_default_behavior, 0),
      (spawn_around_party,":quest_giver_center",":quest_target_party_template"),
      (assign, "$qst_bring_back_runaway_serfs_party_3", reg0),
      (party_set_ai_behavior,"$qst_bring_back_runaway_serfs_party_3",ai_bhvr_travel_to_party),
      (party_set_ai_object,"$qst_bring_back_runaway_serfs_party_3",":quest_target_center"),
      (party_set_flags, "$qst_bring_back_runaway_serfs_party_3", pf_default_behavior, 0),
      (rest_for_hours, 1, 4),
    (try_end),
    (call_script, "script_start_quest", "$random_quest_no", "$g_talk_troop"),
    (try_begin),
      (eq, "$random_quest_no", "qst_lend_surgeon"),
      (assign, "$g_leave_town_outside", 1),
      (assign,"$auto_enter_town","$g_encountered_party"),
      (rest_for_hours, 4),
      (assign, "$lord_requested_to_talk_to", "$g_talk_troop"),
    (try_end),
    ]],

  [anyone,"lord_mission_rejected", [], "Is that so? Well, I suppose you're just not up to the task.\
 I shall have to look for somebody with more mettle.", "close_window",
   [(assign, "$g_leave_encounter",1),
    (call_script, "script_change_player_relation_with_troop", "$g_talk_troop", -1),
    (try_begin),
      (quest_slot_eq, "$random_quest_no", slot_quest_dont_give_again_remaining_days, 0),
      (quest_set_slot, "$random_quest_no", slot_quest_dont_give_again_remaining_days, 1),
    (try_end),
    (troop_set_slot, "$g_talk_troop", slot_troop_does_not_give_quest, 1),
    ]],


##### TODO: QUESTS COMMENT OUT END

#Leave
  [anyone|plyr,"lord_talk",
  [
    (troop_slot_ge, "$g_talk_troop", slot_troop_prisoner_of_party, 0),
  ], "I must leave now.", "lord_leave_prison",[]],

  [anyone|plyr,"lord_talk",
  [
    (lt, "$g_talk_troop_faction_relation", 0),
    (neg|troop_slot_ge, "$g_talk_troop", slot_troop_prisoner_of_party, 0),
  ], "This audience is over. I leave now.", "lord_leave",[]],

##diplomacy start+
   [anyone|plyr,"lord_talk",
     [
       (troop_slot_ge, "$g_talk_troop", slot_troop_prisoner_of_party, 0),
       (party_slot_eq, "$current_town", slot_town_lord, "trp_player"),
     ], "You are free to go.", "dplmc_prisoner_chat_let_go",
     [
       (call_script, "script_remove_troop_from_prison", "$g_talk_troop"),
       (troop_set_slot, "$g_talk_troop", slot_troop_leaded_party, -1),
       (call_script, "script_change_player_relation_with_troop", "$g_talk_troop", 3),
       (call_script, "script_change_player_honor", 2),
       (call_script, "script_add_log_entry", logent_lord_defeated_but_let_go_by_player, "trp_player",  -1, "$g_talk_troop", "$g_talk_troop_faction"),
     ]],
   [anyone,"dplmc_prisoner_chat_let_go", [],
  "{s43}", "close_window", [
   (call_script, "script_lord_comment_to_s43", "$g_talk_troop", "str_prisoner_released_default"),
   (party_remove_prisoners, "$current_town", "$g_talk_troop",1),
	#Ensure the freeing works properly.
	(try_begin),
		(party_count_prisoners_of_type, ":holding_as_prisoner",  "$current_town", "$g_talk_troop"),
		(gt, ":holding_as_prisoner", 0),
		(party_remove_prisoners, "$g_encountered_party", "$g_talk_troop", 1),
	(else_try),
		(party_count_prisoners_of_type, ":holding_as_prisoner",  "p_main_party", "$g_talk_troop"),
		(gt, ":holding_as_prisoner", 0),
		(party_remove_prisoners, "p_main_party", "$g_talk_troop", 1),
	(else_try),
		(troop_get_slot, ":captor_party", "$g_talk_troop", slot_troop_prisoner_of_party),
		(ge, ":captor_party", 0),
		(party_count_prisoners_of_type, ":holding_as_prisoner",  ":captor_party", "$g_talk_troop"),
		(gt, ":holding_as_prisoner", 0),
		(party_remove_prisoners, ":captor_party", "$g_talk_troop", 1),
	(try_end),

	(troop_set_slot, "$g_talk_troop", slot_troop_prisoner_of_party, -1),
	#close any open quests
	(call_script, "script_remove_troop_from_prison", "$g_talk_troop"),
	(str_store_troop_name, s7, "$g_talk_troop"),
	(display_message, "str_dplmc_has_been_set_free"),
      ]],
##diplomacy end+

  [anyone|plyr,"lord_talk",
  [
    (ge, "$g_talk_troop_faction_relation", 0),
    (neg|troop_slot_ge, "$g_talk_troop", slot_troop_prisoner_of_party, 0),
  ], "I must beg my leave.", "lord_leave",[]],

  [anyone,"lord_leave", [#(troop_slot_eq, "$g_talk_troop", slot_troop_is_prisoner, 0),
      (neg|troop_slot_ge, "$g_talk_troop", slot_troop_prisoner_of_party, 0),
      (lt, "$g_talk_troop_faction_relation", 0),
      (store_partner_quest,":enemy_lord_quest"),
      (lt, ":enemy_lord_quest", 0),
      (troop_slot_eq, "$g_talk_troop", slot_troop_does_not_give_quest, 0),
      (call_script, "script_get_quest", "$g_talk_troop"),
      (assign, "$random_quest_no", reg0),
      (ge, "$random_quest_no", 0),
	  (this_or_next|eq, "$random_quest_no", "qst_lend_surgeon"), #so far only for quest lend surgeon
		(eq, 2, 1),
    ],
   "Before you go, {playername}, I have something to ask of you... We may be enemies in this war,\
 but I pray that you believe, as I do, that we can still be civil towards each other.\
 Thus I hoped that you would be kind enough to assist me in something important to me.", "lord_leave_give_quest",[]],

  [anyone|plyr,"lord_leave_give_quest", [],
   "I am listening.", "enemy_lord_tell_mission",[]],


  [anyone,"enemy_lord_tell_mission", [(eq,"$random_quest_no","qst_lend_surgeon")],
   "I have a friend here, an old warrior, who is very sick. Pestilence has infected an old battle wound,\
 and unless he is seen to by a surgeon soon,  he will surely die. This man is dear to me, {playername},\
 but he's also stubborn as a hog and refuses to have anyone look at his injury because he doesn't trust the physicians here.\
 I have heard that you've a capable surgeon with you. If you would let your surgeon come here and have a look,\
 {reg3?she:he} may be able to convince him to give his consent to an operation.\
 Please, I will be deeply indebted to you if you grant me this request.", "lord_mission_told",
   [
     (quest_get_slot, ":quest_object_troop", "$random_quest_no", slot_quest_object_troop),
     (str_store_troop_name_link, s1,"$g_talk_troop"),
##     (str_store_party_name,2,"$g_encountered_party"),
     (str_store_troop_name, s3,":quest_object_troop"),
	 ##diplomacy start+ Use script for gender
     #(troop_get_type, reg3, ":quest_object_troop"),
	 # (assign, reg3, 0),
	 # (try_begin),
		# (call_script, "script_cf_dplmc_troop_is_female", ":quest_object_troop"),
		# (assign, reg3, 1),
	 # (try_end),
     (call_script, "script_dplmc_store_troop_is_female_reg", ":quest_object_troop", 3),
	 ##diplomacy end+
     (setup_quest_text,"$random_quest_no"),
##     (try_begin),
##       (is_between, "$g_encountered_party", centers_begin, centers_end),
##       (setup_quest_giver, "$random_quest_no", "str_given_by_s1_at_s2"),
##     (else_try),
##       (setup_quest_giver,"$random_quest_no", "str_given_by_s1_in_wilderness"),
##     (try_end),
     (str_store_string, s2, "@Lend your experienced surgeon {s3} to {s1}."),
   ]],

  [anyone,"enemy_lord_tell_mission", [(str_store_quest_name, s7, "$random_quest_no")],
   "{!}ERROR: MATCHED WITH QUEST: {s7}.", "close_window",
   []],

  [anyone,"lord_leave_prison", [],
   "We'll meet again.", "close_window",[]],

 [anyone|auto_proceed,"lord_leave", [
 ##diplomacy start+
#	(troop_get_type, ":type", "trp_player"),
#	(eq, ":type", 1),
	(eq, "$character_gender", tf_female),
##diplomacy end+
	(call_script, "script_troop_get_romantic_chemistry_with_troop", "trp_player", "$g_talk_troop"),
	(gt, reg0, 7),
	(ge, "$g_talk_troop_relation", 0),
	(neg|troop_slot_ge, "$g_talk_troop", slot_troop_betrothed, active_npcs_begin),
	(neg|troop_slot_ge, "$g_talk_troop", slot_troop_spouse, active_npcs_begin),
	(neg|troop_slot_ge, "trp_player", slot_troop_betrothed, active_npcs_begin),
	(neg|troop_slot_ge, "trp_player", slot_troop_spouse, active_npcs_begin),

	(neg|faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "$g_talk_troop"),

 ],
   "Farewell, my lady. I shall remain your most ardent admirer.", "close_window",
   [(eq,"$talk_context",tc_party_encounter),
   (assign, "$g_leave_encounter", 1)]],


  [anyone|auto_proceed,"lord_leave", [(faction_slot_eq,"$g_talk_troop_faction",slot_faction_leader,"$g_talk_troop")],
   "Of course, {playername}. Farewell.", "close_window",[(eq,"$talk_context",tc_party_encounter),(assign, "$g_leave_encounter", 1)]],
  [anyone|auto_proceed,"lord_leave", [(ge,"$g_talk_troop_relation",10)],
   "Good journeys to you, {playername}.", "close_window",[(eq,"$talk_context",tc_party_encounter),(assign, "$g_leave_encounter", 1)]],
  [anyone|auto_proceed,"lord_leave", [(ge, "$g_talk_troop_faction_relation", 0)],
   "Yes, yes. Farewell.", "close_window",[(eq,"$talk_context",tc_party_encounter),(assign, "$g_leave_encounter", 1)]],
  [anyone|auto_proceed,"lord_leave", [],
   "We will meet again.", "close_window",[(eq,"$talk_context",tc_party_encounter),(assign, "$g_leave_encounter", 1)]],


#Royal family members


  [anyone|plyr,"member_chat", [(troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_lady)],
   "Are you enjoying the journey, {s65}?", "lady_journey_1",[]],
  [anyone,"lady_journey_1", [],
   "I am doing quite fine, {playername}. Thank you for your concern.", "close_window",[]],

#SB : block off normal spouse talk while in the field (or companion?)
  [anyone,"start",
   [
    (troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_lady),
    (troop_slot_eq, "$g_talk_troop", slot_troop_cur_center, -1), #out in the field
#    (troop_slot_eq, "$g_talk_troop", slot_troop_spouse, "trp_player"),
    ##diplomacy start+
    (this_or_next|troop_slot_eq, "trp_player", slot_troop_spouse, "$g_talk_troop"),
    (troop_slot_eq, "$g_talk_troop", slot_troop_spouse, "trp_player"),
    (this_or_next|is_between, "$g_talk_troop", heroes_begin, heroes_end),
    ##diplomacy end+
    (troop_slot_eq, "trp_player", slot_troop_spouse, "$g_talk_troop"),
    
    (assign, ":spouse_party_exists", 0),
    (try_for_parties, ":spouse_party"), #SB : additional checks
      (eq, ":spouse_party_exists", 0),
      (party_is_active, ":spouse_party"),
      (party_slot_eq, ":spouse_party", slot_party_type, dplmc_spt_spouse),
      (assign, ":spouse_party_exists", 1),
    (try_end),
    (neq, ":spouse_party_exists", 0),
    ##diplomacy start+ load relation text into s0
    (call_script, "script_dplmc_print_player_spouse_says_my_husband_wife_to_s0", "$g_talk_troop", 0),
    ##diplomacy end+
    ],
    ##diplomacy start+ use relation string
   "What is it, {s0}? I still need to finish my job.", "close_window",[
   
    (assign, "$g_leave_encounter", 1),
 ]],

 #TODO add option to cancel
#Spouse
  [anyone,"start",
   [
    (troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_lady),
#    (troop_slot_eq, "$g_talk_troop", slot_troop_spouse, "trp_player"),
    ##diplomacy start+
    (this_or_next|troop_slot_eq, "trp_player", slot_troop_spouse, "$g_talk_troop"),
    (troop_slot_eq, "$g_talk_troop", slot_troop_spouse, "trp_player"),
    (this_or_next|is_between, "$g_talk_troop", heroes_begin, heroes_end),
    ##diplomacy end+
    (troop_slot_eq, "trp_player", slot_troop_spouse, "$g_talk_troop"),
    ##diplomacy start+ load relation text into s0
    (call_script, "script_dplmc_print_player_spouse_says_my_husband_wife_to_s0", "$g_talk_troop", 0),
    ##diplomacy end+
    ],
    ##diplomacy start+ use relation string
   "Yes, {s0}?", "spouse_talk",[
    ##diplomacy end+
 ]],

  [anyone|plyr,"spouse_talk",
   [
   (eq, "$g_player_minister", "$g_talk_troop"),
   ], #SB : period
   "As you are my chief minister, I wish to speak to about affairs of state.", "minister_issues",[]],

  [anyone|plyr,"spouse_talk", [
  (check_quest_active, "qst_offer_gift"),
    (quest_slot_eq, "qst_offer_gift", slot_quest_giver_troop, "$g_talk_troop"),
  
    (quest_get_slot, ":target_troop", "qst_offer_gift", slot_quest_target_troop),
  (str_store_troop_name, s4, ":target_troop"),
  (player_has_item, "itm_furs"),
  (player_has_item, "itm_velvet"),
   ],
   "I have the materials for {s4}'s gift.", "offer_gift_quest_complete",[
   ]],

   [anyone,"offer_gift_quest_complete", [
   (quest_get_slot, ":target_troop", "qst_offer_gift", slot_quest_target_troop),
   (troop_get_type, reg4, ":target_troop"),
   ],
   "Ah, let me take those. Hopefully this will mend the quarrel between you two. You may wish to speak to {reg4?her:him}, and see if I had any success.", "close_window",[
   (quest_set_slot, "qst_offer_gift", slot_quest_current_state, 2),
   (quest_set_slot, "qst_offer_gift", slot_quest_expiration_days, 365),
   (troop_remove_item, "trp_player", "itm_furs"),
   (troop_remove_item, "trp_player", "itm_velvet"),
   (assign, "$g_leave_encounter", 1),
   ]],

  [anyone|plyr,"spouse_talk",
  [
    (assign, "$political_quest_to_cancel", -1),
    (try_begin),
      (check_quest_active, "qst_offer_gift"),
      (quest_slot_eq, "qst_offer_gift", slot_quest_giver_troop, "$g_talk_troop"),
      (assign, "$political_quest_to_cancel", "qst_offer_gift"),
      (str_store_string, s10, "str_offer_gift_description"),
    (else_try),
      (check_quest_active, "qst_resolve_dispute"),
      (quest_slot_eq, "qst_resolve_dispute", slot_quest_giver_troop, "$g_talk_troop"),
      (assign, "$political_quest_to_cancel", "qst_resolve_dispute"),
      (str_store_string, s10, "str_resolve_dispute_description"),
    (try_end),
    (gt, "$political_quest_to_cancel", 0),
  ],
 "Let's abandon our plan to {s10}.", "spouse_cancel_political_quest",[
 ]],

  [anyone,"spouse_cancel_political_quest",
   [],
   "Are you sure you want to drop that idea?", "spouse_cancel_political_quest_confirm",[
 ]],
  [anyone|plyr,"spouse_cancel_political_quest_confirm",
   [],
   "Yes, I am sure. Let's abandon that idea.", "spouse_pretalk",[
   (call_script, "script_abort_quest", "$political_quest_to_cancel", 1),
 ]],
  [anyone|plyr,"spouse_cancel_political_quest_confirm",
   [],
   "Actually, never mind.", "spouse_pretalk",[
 ]],



  [anyone|plyr,"spouse_talk",
   [], #SB : period
   "Let us think of a way to improve our standing in this realm.", "combined_political_quests",[
   (call_script, "script_get_political_quest", "$g_talk_troop"),
   (assign, "$political_quest_found", reg0),
   (assign, "$political_quest_target_troop", reg1),
   (assign, "$political_quest_object_troop", reg2),
 ]],

 ##diplomacy start+ Add "dedicate a tournament" option even after marriage
  [anyone|plyr,"spouse_talk",
  [
    (gt, "$g_player_tournament_placement", 3),

    (this_or_next|troop_slot_ge, "$g_talk_troop", slot_lord_reputation_type, lrep_conventional),
    (this_or_next|troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_lady),
        (is_between, "$g_talk_troop", kingdom_ladies_begin, kingdom_ladies_end),
  ],
  "My {reg65?wife/husband}, I would like to dedicate my successes in this recent tournament to you", "dplmc_spouse_tournament_dedication_reaction",
  [
	(try_begin),
		(gt, "$g_player_tournament_placement", 3),
		(val_sub, "$g_player_tournament_placement", 3),
		(val_mul, "$g_player_tournament_placement", 2),
	(else_try),
		(assign, "$g_player_tournament_placement", 0),
	(try_end),

    #Other spouses may be jealous.
	(try_for_range, ":spouse", heroes_begin, heroes_end),#<- Iterate because of the possibility of polygamy
		(neg|troop_slot_eq, ":spouse", slot_troop_occupation, dplmc_slto_dead),
		(neq, ":spouse", "$g_talk_troop"),
		(this_or_next|troop_slot_eq, "trp_player", slot_troop_spouse, ":spouse"),
		(this_or_next|troop_slot_eq, ":spouse", slot_troop_spouse, "trp_player"),
			(troop_slot_eq, "trp_player", slot_troop_betrothed, ":spouse"),
		(call_script, "script_troop_change_relation_with_troop", ":spouse", "trp_player", -1),
	(try_end),

	(try_begin),
		(troop_slot_eq, "$g_talk_troop", slot_lady_used_tournament, 1),
		(val_div, "$g_player_tournament_placement", 3),
		(str_store_string, s9, "str_another_tournament_dedication_oh_i_suppose_it_is_always_flattering"),
	(else_try),
		(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_conventional),
		(val_mul, "$g_player_tournament_placement", 2),
		(str_store_string, s9, "str_do_you_why_what_a_most_gallant_thing_to_say"),
	(else_try),
		(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_moralist),
		(val_div, "$g_player_tournament_placement", 2),
		(str_store_string, s9, "str_hmm_i_cannot_say_that_i_altogether_approve_of_such_frivolity_but_i_must_confess_myself_a_bit_flattered"),
	(else_try),
		(str_store_string, s9, "str_why_thank_you_you_are_most_kind_to_do_so"),
	(try_end),

	(call_script, "script_troop_change_relation_with_troop", "$g_talk_troop", "trp_player", "$g_player_tournament_placement"),
	(assign, "$g_player_tournament_placement", 0),
	(troop_set_slot, "$g_talk_troop", slot_lady_used_tournament, 1),
	]],

  [anyone,"dplmc_spouse_tournament_dedication_reaction", [],
   "{s9}", "spouse_pretalk",
   []],
 ##diplomacy end+ (Add "dedicate a tournament" option even after marriage)

  [anyone|plyr, "spouse_talk",
   [
    (neg|check_quest_active, "qst_organize_feast"),
   ],  #SB : period
   "I was thinking that perhaps we could host a feast?", "spouse_organize_feast",[
 ]],

  [anyone|plyr, "spouse_talk",
   [
   ], #SB : period
   "Let us take inventory of our household possessions.", "spouse_household_possessions",[
   (change_screen_loot, "trp_household_possessions"),
   ]],

  [anyone, "spouse_household_possessions",
   [
   ],
   "Anyway, that is the content of our larder.", "spouse_pretalk",[
 ]],

##diplomacy start+
##Allow wife to join as companion, by Lathrael (modified)
  [anyone|plyr, "spouse_talk",
   [
     (party_get_free_companions_capacity, ":tmp", "p_main_party"),
     (gt, ":tmp", 0),#can take more members
     (this_or_next|troop_slot_eq, "trp_player", slot_troop_spouse, "$g_talk_troop"),#speaking to spouse
     (troop_slot_eq, "$g_talk_troop", slot_troop_spouse, "trp_player"),#redundant check for polygamy
     (troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_lady),#spouse is a lady (not a lord)
     (neg|troop_slot_ge, "$g_talk_troop", slot_troop_leaded_party, 1),#spouse is not leading a party
     (party_count_members_of_type, ":tmp", "p_main_party", "$g_talk_troop"),
     (lt, ":tmp", 1),#spouse is not already a member of the party
     #block if currently serving as minister?
     # (gt, "$g_time_since_last_talk", 24), #prevent accidentally losing rep
   ],
   "I would like you to join my retinue.", "spouse_join", [
  ]],
##SB : https://forums.taleworlds.com/index.php/topic,231247.0.html

  [
    anyone,
    
    "spouse_join",
    
    [
      (call_script, "script_dplmc_print_player_spouse_says_my_husband_wife_to_s0", "$g_talk_troop", 0),
      
      (troop_get_slot, ":reputation", "$g_talk_troop", slot_lord_reputation_type),
      (this_or_next|eq, ":reputation", lrep_adventurous),
      (neg|is_between, ":reputation", lrep_conventional, lrep_moralist + 1), #SB : if slot not set or promoted companion
    ],
    
    "Really?  You'd ask me to ride with your band like the old stories? To be with you in the field and watch your back in the wars?  I've dreamed about this since I was a little girl!  To see those dreams realized in this modern world would be so amazing! I shall make ready at once!  Thank you so much, {s0}!", 

    "close_window", 
    
    [
      (call_script, "script_recruit_troop_as_companion", "$g_talk_troop"),
      
      (assign, "$g_leave_encounter", 1),
      (try_begin),
        (troop_get_slot, ":encountered_town", "$g_talk_troop", slot_troop_first_encountered),
        (neg|is_between, ":encountered_town", centers_begin, centers_end),
        # let's add some objects to this adventurous wife
        (troop_add_item, "$g_talk_troop","itm_hunter", imod_spirited),
        (troop_add_item, "$g_talk_troop","itm_tribal_warrior_outfit", imod_lordly),
        (troop_add_item, "$g_talk_troop","itm_leather_boots", imod_lordly),
        (troop_add_item, "$g_talk_troop","itm_leather_gloves", imod_lordly),
        # (troop_add_item, "$g_talk_troop","itm_female_hood", imod_lordly),
        (troop_add_item, "$g_talk_troop","itm_hunting_bow", imod_masterwork),
        (troop_add_item, "$g_talk_troop","itm_arrows", imod_large_bag),
        
        # ..and some proficiencies
        (troop_raise_attribute, "$g_talk_troop", ca_strength, 2),
        (troop_raise_attribute, "$g_talk_troop", ca_agility, 6),
        (troop_raise_attribute, "$g_talk_troop", ca_intelligence, 4),
        (troop_raise_attribute, "$g_talk_troop", ca_charisma, 3),
        
        (troop_raise_skill, "$g_talk_troop", skl_power_draw, 2),
        (troop_raise_skill, "$g_talk_troop", skl_weapon_master, 1),
        (troop_raise_skill, "$g_talk_troop", skl_athletics, 3),
        (troop_raise_skill, "$g_talk_troop", skl_riding, 3),
        (troop_raise_skill, "$g_talk_troop", skl_trade, 2),
        (troop_raise_skill, "$g_talk_troop", skl_tracking, 2),
        (troop_raise_skill, "$g_talk_troop", skl_first_aid, 2),
        (troop_raise_skill, "$g_talk_troop", skl_wound_treatment, 2),
        (troop_raise_skill, "$g_talk_troop", skl_leadership, 2),
        
        (troop_raise_proficiency, "$g_talk_troop", wpt_archery, 20),
        # (troop_add_proficiency_points, "$g_talk_troop", 30),
        
        (add_xp_to_troop, 500, "$g_talk_troop"),
        (troop_equip_items, "$g_talk_troop"),
      (try_end),

      (try_begin),
        (call_script, "script_troop_get_relation_with_troop", "$g_talk_troop", "trp_player"),
        (le, reg0, 50),
        (call_script, "script_troop_change_relation_with_troop", "$g_talk_troop", "trp_player", 15),
      (try_end),
    ]
  ],

  [
    anyone,
    
    "spouse_join",
    
    [
      (call_script, "script_dplmc_print_player_spouse_says_my_husband_wife_to_s0", "$g_talk_troop", 0),
      
      (troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_otherworldly),
    ],
    
    "You want me to ride with you into the wars?  I've read such things in books and heard the minstrel's tales of women fighting alongside the men. And I know there are some common women swept up into the wars who fight as Sword Sisters or serve as camp followers. But I never thought such an opportunity could come to me. I've never seen a battle up close -- except in the arena of course -- and the thought of having a man rush me with a raised ax terrifies me.^^Still -- to sleep under the stars with {s0}, to see the world, to ride to victory on a gallant steed... these are opportunities rarely offered to women. I would be doing my sex a disservice not to seize upon it. I will come with you.",
    
    "close_window",
    
    [
      (call_script, "script_recruit_troop_as_companion", "$g_talk_troop"),
      (assign, "$g_leave_encounter", 1),
      (try_begin),
        (troop_get_slot, ":encountered_town", "$g_talk_troop", slot_troop_first_encountered),
        (neg|is_between, ":encountered_town", centers_begin, centers_end),
        # let's add some objects to this otherworldly wife
        (troop_add_item, "$g_talk_troop","itm_saddle_horse", imod_spirited),
        (troop_add_item, "$g_talk_troop","itm_lady_dress_ruby", imod_lordly),
        (troop_add_item, "$g_talk_troop","itm_light_leather_boots", imod_lordly),
        (troop_add_item, "$g_talk_troop","itm_female_hood", imod_lordly),
        
        # ..and some proficiencies
        (troop_raise_attribute, "$g_talk_troop", ca_strength, 2),
        (troop_raise_attribute, "$g_talk_troop", ca_agility, 2),
        (troop_raise_attribute, "$g_talk_troop", ca_intelligence, 5),
        (troop_raise_attribute, "$g_talk_troop", ca_charisma, 6),
        
        (troop_raise_skill, "$g_talk_troop", skl_athletics, 2),
        (troop_raise_skill, "$g_talk_troop", skl_riding, 1),
        (troop_raise_skill, "$g_talk_troop", skl_trade, 3),
        (troop_raise_skill, "$g_talk_troop", skl_engineer, 2),
        (troop_raise_skill, "$g_talk_troop", skl_first_aid, 2),
        (troop_raise_skill, "$g_talk_troop", skl_surgery, 2),
        (troop_raise_skill, "$g_talk_troop", skl_wound_treatment, 2),
        (troop_raise_skill, "$g_talk_troop", skl_leadership, 3),
        
        (add_xp_to_troop, 200, "$g_talk_troop"),
        # (troop_add_proficiency_points, "$g_talk_troop", 20),
        (troop_equip_items, "$g_talk_troop"),
      (try_end),
      
      (try_begin),
        (le, "$g_talk_troop_relation", 50),
        (call_script, "script_troop_change_relation_with_troop", "$g_talk_troop", "trp_player", 5),
      (try_end),
    ]
  ],
  

  #SB : re-enable this default behaviour for high-relationship with spouse (50+) before rejecting it
  [anyone, "spouse_join",
   [
     (ge, "$g_talk_troop_relation", 50),
     (call_script, "script_dplmc_print_player_spouse_says_my_husband_wife_to_s0", "$g_talk_troop", 0),
   ],
   "Of course, {s0}! It would be my pleasure. I do wonder what I should wear for this outing... Perhaps we can shop together sometime?", "close_window", [
     # (party_add_members, "p_main_party", "$g_talk_troop", 1),
     # (call_script, "script_dplmc_save_civilian_clothing", "$g_talk_troop"),#Save personal items
     # (str_store_troop_name, s6, "$g_talk_troop"),
     # (display_message, "@{s6} has joined your party."),
    (try_begin),
      (troop_get_slot, ":encountered_town", "$g_talk_troop", slot_troop_first_encountered),
      (neg|is_between, ":encountered_town", centers_begin, centers_end), #if we did not distribute equipment already
      (troop_add_item, "$g_talk_troop","itm_courser", imod_old), #add at least 1 horse
        
       # ..and some proficiencies
      (troop_raise_attribute, "$g_talk_troop", ca_strength, 2),
      (troop_raise_attribute, "$g_talk_troop", ca_agility, 2),
      (troop_raise_attribute, "$g_talk_troop", ca_intelligence, 3), #+3 skill points
      (troop_raise_attribute, "$g_talk_troop", ca_charisma, 2),
      (store_random_in_range, ":attr", ca_strength, ca_charisma + 1),
      (troop_raise_attribute, "$g_talk_troop", ":attr", 2),
        
      (try_for_range, ":skill", "skl_persuasion", "skl_reserved_5"),
        (store_random_in_range, ":increase", -3, 3), #chance of 3x0, 1 or 2
        (val_max, ":increase", 0), #validate param
        (troop_raise_skill, "$g_talk_troop", ":skill", 1),
      (try_end),
        
      #assume no combat skill but raise riding, add a leadership skill
      (troop_raise_skill, "$g_talk_troop", skl_riding, 1),
      (store_random_in_range, ":skill", "skl_trade", "skl_reserved_1"),
      (troop_raise_skill, "$g_talk_troop", ":skill", 2),
        
      (add_xp_to_troop, 100, "$g_talk_troop"),
      # (troop_add_proficiency_points, "$g_talk_troop", 10),
      (troop_equip_items, "$g_talk_troop"),
    (try_end),
    (call_script, "script_recruit_troop_as_companion", "$g_talk_troop"),
    (assign, "$g_leave_encounter", 1),
  ]],
  [
    anyone,
    
    "spouse_join",
    
    [
      (call_script, "script_dplmc_print_player_spouse_says_my_husband_wife_to_s0", "$g_talk_troop", 0),
      (troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_moralist),
    ],
    
    "Ride out with you to the wars? I must confess to being tempted, if only to see to it that you and your men refrain from the vices to which your sex is susceptible, such as drinking and wenching and plundering and slaughtering prisoners. But I am a woman, a lady of noble lineage, and for a Calradian woman, riding out to war is just not to be done.^^It is not my place. My place is here, maintaining your household and protecting your interests in your absence, and ensuring your hearth is warmed when you return.^^That is my role as a woman, and I am content.", 
    
    "spouse_pretalk",

    [
      # (assign, "$g_leave_encounter", 1),
     
      # no relationship modification
    ]
  ],
  
  [
    anyone,
    
    "spouse_join",
    
    [
      (call_script, "script_dplmc_print_player_spouse_says_my_husband_wife_to_s0", "$g_talk_troop", 0),
      (troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_ambitious),
    ],
    
    "What? Ride to the wars like a common camp follower? Spend my days in slaughter like some harlot of a Sword Sister? You presume a great deal, {s0}. I am not some common tavern drek or tomboy mercenary. I am a Lady of Calradia, brought up from birth to assist my husband in the ruling of the household and lands. I seek my glory in the deeds of my husband. Not in my own.^^For me to play a man's part would cheapen me and subject me to the scorn and contempt of every highborn Calradian. I do not take this suggestion kindly and I do not wish to be asked again.", 
    
    "spouse_pretalk",
    
    [
      # (assign, "$g_leave_encounter", 1),
      
      (try_begin),
        (is_between, "$g_talk_troop_relation", -50, 20),
        (gt, "$g_time_since_last_talk", 24),
        (call_script, "script_troop_change_relation_with_troop", "$g_talk_troop", "trp_player", -10),
      (try_end),
    ]
  ],


  [
    anyone,
    
    "spouse_join",
    
    [
      (call_script, "script_dplmc_print_player_spouse_says_my_husband_wife_to_s0", "$g_talk_troop", 0),
      (troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_conventional),
    ],

    "Oh, {s0}, why do you ask me this? I couldn't ride into battle with you! I've never held a sword in my life! I'd be worse than hopeless! Few Calradians of noble lineage teach their daughters to fight and I'm not sure I would have learned to fight even I'd been given the opportunity. The weakest recruit in your army has more virtue in a fight than I, who have never wielded any weapon deadlier than an embroidery needle. I would get your men killed trying to protect me.^^You are my {s0} and I respect you, but if you wanted a wife who was going to be able to stand with you shoulder to shoulder, shield to shield -- you should have married someone else.", 
    
    "spouse_pretalk",
    
    [
      # (assign, "$g_leave_encounter", 1),

      (try_begin),
        # (call_script, "script_troop_get_relation_with_troop", "$g_talk_troop", "trp_player"),
        (is_between, "$g_talk_troop_relation", -50, 20),
        (gt, "$g_time_since_last_talk", 24),
        (call_script, "script_troop_change_relation_with_troop", "$g_talk_troop", "trp_player", -5),
      (try_end),
    ]
  ],
  

##diplomacy end+

  [anyone|plyr,"spouse_talk",
   [
   #SB : gender string for polygamy and such
   (call_script, "script_troop_get_family_relation_to_troop", "$g_talk_troop", "trp_player"),
   ],
   "We shall speak later, my {s11}.", "close_window",[
    (assign, "$g_leave_encounter", 1),
  ]],




#Bride
  [anyone,"wedding_ceremony_bride_vow",
   [
#    (troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_lady),
#	(check_quest_active, "qst_wed_betrothed"),
#	(quest_slot_eq, "qst_wed_betrothed", slot_quest_target_troop, "$g_talk_troop"),
#	(quest_slot_eq, "qst_wed_betrothed", slot_quest_current_state, 2),
#	(neg|quest_slot_ge, "qst_wed_betrothed", slot_quest_expiration_days, 2),
    ],
   "My husband, I hearby pledge to be your wife, to stand with you in good times and bad. May the heavens smile upon us and bless us with children, livestock, and land.", "wedding_ceremony_player_vow",[
   (quest_get_slot, ":bride", "qst_wed_betrothed", slot_quest_target_troop),
   (set_conversation_speaker_troop, ":bride"),
 ]],

  [anyone|plyr,"wedding_ceremony_player_vow",
   [],
   "I pledge the same. Let us be husband and wife.", "wedding_ceremony_vows_complete",[
 ]],

  [anyone|plyr,"wedding_ceremony_player_vow",
   [],
   "Wait -- hold on... I'm not quite ready for this.", "close_window",[
 ]],

  [anyone,"wedding_ceremony_vows_complete",
   [],
   "I now declare you and {s3} to be husband and wife. Go now to the chamber prepared for you, and we shall make arrangements for your bride to join you in your hall in {s11}.", "close_window",[
   	(call_script, "script_courtship_event_bride_marry_groom", "$g_player_bride", "trp_player", 0), #parameters from dialog
	(call_script, "script_get_kingdom_lady_social_determinants", "$g_player_bride"),
	(str_store_troop_name, s3, "$g_player_bride"),

    (try_begin),
		(neq, reg0, "trp_player"),
		(str_store_string, s11, "str_error__player_not_logged_as_groom"),
	(else_try),
		(str_store_party_name, s11, reg1),
		(troop_set_slot, "$g_player_bride", slot_troop_cur_center, reg1),
	(try_end),
 ]],
 #WEDDING CUTSCENE BEGINS HERE

  [anyone, "spouse_pretalk",
##diplomacy start+ use relation string
#   [],
#   "Is there anything else, my {husband/wife}?", "spouse_talk",[
 [	#load relation text into s0
    (call_script, "script_dplmc_print_player_spouse_says_my_husband_wife_to_s0", "$g_talk_troop", 0),
    ##diplomacy end+
],
	"Is there anything else, {s0}?", "spouse_talk", [
 ]],






#take inventory
 [anyone,"spouse_organize_feast",
   [
   (faction_slot_eq, "$players_kingdom", slot_faction_ai_state, sfai_feast),
   (faction_slot_eq, "$players_kingdom", slot_faction_ai_object, "$g_encountered_party"),
	##diplomacy start+ load relation text into s0
    (call_script, "script_dplmc_print_player_spouse_says_my_husband_wife_to_s0", "$g_talk_troop", 0),
	##diplomacy end+
   ],
##diplomacy start+ use s0
   "A splendid idea, {s0}. However, let us wait for the current feast here to conclude, before organizing another.", "spouse_pretalk",[
]],
##diplomacy end+

 [anyone,"spouse_organize_feast",
   [
	##diplomacy start+ Handle player is co-ruler of kingdom
	(assign, ":is_coruler", 0),
	(try_begin),
		(is_between, "$players_kingdom", npc_kingdoms_begin, npc_kingdoms_end),
		(call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", "$players_kingdom"),
		(ge, reg0, DPLMC_FACTION_STANDING_LEADER_SPOUSE),
		(assign, ":is_coruler", 1),
	(try_end),
	(this_or_next|eq, ":is_coruler", 1),
	##diplomacy end+
   (eq, "$players_kingdom", "fac_player_supporters_faction"),
   (neg|is_between, "$g_player_court", centers_begin, centers_end),
   	##diplomacy start+ load relation text into s0
    (call_script, "script_dplmc_print_player_spouse_says_my_husband_wife_to_s0", "$g_talk_troop", 0),
    ##diplomacy end+
   ],
   ##diplomacy start+
   "A splendid idea, {s0}. However, we must establish a court before hosting a feast.", "spouse_pretalk",[
   ##diplomacy end+
 ]],

 [anyone,"spouse_organize_feast",
   [
	##diplomacy start+ Handle player is co-ruler of kingdom
	(assign, ":is_coruler", 0),
	(try_begin),
		(is_between, "$players_kingdom", npc_kingdoms_begin, npc_kingdoms_end),
		(call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", "$players_kingdom"),
		(ge, reg0, DPLMC_FACTION_STANDING_LEADER_SPOUSE),
		(assign, ":is_coruler", 1),
	(try_end),
	(this_or_next|eq, ":is_coruler", 1),
	##diplomacy end+
   (eq, "$players_kingdom", "fac_player_supporters_faction"),
   (store_current_hours, ":hours_since_last_feast"),
   (faction_get_slot, ":last_feast_time", "$players_kingdom", slot_faction_last_feast_start_time),
   (val_sub, ":hours_since_last_feast", ":last_feast_time"),
   (try_begin),
	(ge, "$cheat_mode", 1),
	(assign, reg4, ":hours_since_last_feast"),
	(str_store_faction_name, s4, "$players_kingdom"),
	(display_message, "@{!}DEBUG -- {reg4} hours since last feast for {s4}"),
   (try_end),
   (lt, ":hours_since_last_feast", 120),
   (store_sub, ":days_to_wait", 168, ":hours_since_last_feast"),
   (val_div, ":days_to_wait", 24),
   (assign, reg3, ":days_to_wait"),
   	##diplomacy start+ load relation text into s0
    (call_script, "script_dplmc_print_player_spouse_says_my_husband_wife_to_s0", "$g_talk_troop", 0),
    ##diplomacy end+
   ],
   ##diplomacy start+
   "A splendid idea, {s0}. However, our realm has recently had a feast. Perhaps we should wait another {reg3} days before we organize another one.", "spouse_pretalk",[
   ##diplomacy end+
]],





 [anyone,"spouse_organize_feast",
 	##diplomacy start+ load relation text into s0
	[
    (call_script, "script_dplmc_print_player_spouse_says_my_husband_wife_to_s0", "$g_talk_troop", 0),
   #[],
   ],
   "A splendid idea, {s0}. However, to not insult our guests, we must make sure that we can provide a large and varied repast, for the lords, their families, and their retinues. All told, we should count on a couple of hundred mouths to feed, over several days. Let us take an inventory of our household possessions...", "spouse_evaluate_larder_for_feast",[
   ##diplomacy end+
]],

  [anyone, "spouse_evaluate_larder_for_feast",
   [
   #SB : todo count actual number of lords expected to attend +-25%
   (call_script, "script_internal_politics_rate_feast_to_s9", "trp_household_possessions", 600, "$players_kingdom", 0),   #party, number of guests, taste, consume items
   (assign, "$feast_quality", reg0),
   ],
   "{s9}",   "spouse_feast_confirm",[]],


  [anyone|plyr, "spouse_feast_confirm",
   [
   ],
   "Let me add more items to our storehouses.",   "spouse_feast_added_items", [
   (change_screen_loot, "trp_household_possessions"),
   ]],

  [anyone, "spouse_feast_added_items",
   [],
   "All right -- let me reevalute what is there...",   "spouse_evaluate_larder_for_feast",[]],



  [anyone|plyr, "spouse_feast_confirm",
   [
   (gt, "$feast_quality", 1),
   ],
   "Let us dispatch the invitations",   "spouse_feast_confirm_yes", []],

  [anyone|plyr, "spouse_feast_confirm", [], "Let us wait, then", "spouse_pretalk",[]],


  [anyone, "spouse_feast_confirm_yes",
   [ (neq, "$players_kingdom", "fac_player_supporters_faction"),],
   "I shall send word, then, that we will host a feast as soon as conditions in the realm permit. You perhaps should continue to stock our larder, so that we may do justice to our reputation for hospitality.",   "spouse_pretalk",[


    (assign, ":feast_venue", -1),
    (try_begin),
		(is_between, "$g_encountered_party", walled_centers_begin, walled_centers_end),
		(this_or_next|party_slot_eq, "$g_encountered_party", slot_town_lord, "trp_player"),
			(party_slot_eq, "$g_encountered_party", slot_town_lord, "$g_talk_troop"),
		(assign, ":feast_venue", "$g_encountered_party"),
	(else_try),
		(try_for_range, ":center", walled_centers_begin, walled_centers_end),
			(eq, ":feast_venue", -1),
			(this_or_next|party_slot_eq, ":center", slot_town_lord, "trp_player"),
				(party_slot_eq, ":center", slot_town_lord, "$g_talk_troop"),
			(assign, ":feast_venue", ":center"),
		(try_end),
	(else_try),
		(is_between, "$g_encountered_party", walled_centers_begin, walled_centers_end),
		(assign, ":feast_venue", "$g_encountered_party"),
    (try_end),


	(str_store_party_name_link, s9, ":feast_venue"), #SB : link
	(setup_quest_text, "qst_organize_feast"),
	(str_store_string, s2, "str_you_intend_to_bring_goods_to_s9_in_preparation_for_the_feast_which_will_be_held_as_soon_as_conditions_permit"),

	(quest_set_slot, "qst_organize_feast", slot_quest_target_center, ":feast_venue"),
	(quest_set_slot, "qst_organize_feast", slot_quest_expiration_days, 30),
	(call_script, "script_start_quest", "qst_organize_feast", "$g_talk_troop"),
   ]],

   [anyone, "spouse_feast_confirm_yes",
   [
   ],
   "Very well, then. Let the feast begin immediately at our court {reg4?here:} in {s9}. You perhaps should continue to stock our larder, so that we may do justice to our reputation for hospitality. You may declare the feast to be concluded at any time, either by beginning a campaign or by letting it be known that the vassals can return to their homes.",   "spouse_pretalk",[

   (str_store_party_name_link, s9, "$g_player_court"), #SB : link
   (setup_quest_text, "qst_organize_feast"),
   (str_store_string, s2, "str_you_intend_to_bring_goods_to_s9_in_preparation_for_the_feast_which_will_be_held_as_soon_as_conditions_permit"),

   (quest_set_slot, "qst_organize_feast", slot_quest_target_center, "$g_player_court"),
   (quest_set_slot, "qst_organize_feast", slot_quest_expiration_days, 30),
   (call_script, "script_start_quest", "qst_organize_feast", "$g_talk_troop"),

   (faction_set_slot, "$players_kingdom", slot_faction_ai_state, sfai_feast),
   (faction_set_slot, "$players_kingdom", slot_faction_ai_object, "$g_player_court"),

   (assign, "$player_marshal_ai_state", sfai_feast),
   (assign, "$player_marshal_ai_object", "$g_player_court"),

   (assign, "$g_recalculate_ais", 1),
   (assign, reg4, 1),
   (try_begin),
     (neq, "$g_encountered_party", "$g_player_court"),
     (assign, reg4, 0),
   (try_end),
   ]],

  [anyone,"start",	#too early
   [
    (troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_lady),
	(check_quest_active, "qst_wed_betrothed"),
	(quest_slot_eq, "qst_wed_betrothed", slot_quest_target_troop, "$g_talk_troop"),
	(quest_slot_ge, "qst_wed_betrothed", slot_quest_expiration_days, 2),
    ],
   "How wonderful it is... In a short while we shall be married! However, I should point out that, in the remaining few days, it is not customary for us to speak too much together.", "close_window",[
	(try_begin),
		(check_quest_active, "qst_visit_lady"),
		(quest_slot_eq, "qst_visit_lady", slot_quest_giver_troop, "$g_talk_troop"),
		(call_script, "script_end_quest", "qst_visit_lady"),
	(try_end),
 ]],

  [anyone,"start",
   [
    (troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_lady),
	(check_quest_active, "qst_wed_betrothed"),
	(quest_slot_eq, "qst_wed_betrothed", slot_quest_target_troop, "$g_talk_troop"),
	(call_script, "script_get_kingdom_lady_social_determinants", "$g_talk_troop"),
	(assign, ":guardian", reg0),
#	(call_script, "script_get_heroes_attached_to_center", "$g_encountered_party", "p_temp_party"),
	(troop_get_slot, ":guardian_led_party", ":guardian", slot_troop_leaded_party),
	(party_is_active, ":guardian_led_party"),
	(party_get_attached_to, ":guardian_led_party_attached", ":guardian_led_party"),
	(eq, ":guardian_led_party_attached", "$g_encountered_party"),

	(call_script, "script_troop_get_family_relation_to_troop", ":guardian", "$g_talk_troop"),
	(str_store_troop_name, s4, ":guardian"),
	#use current location, or party is in?
    ],
   "Em, {playername}, you might not be used to our wedding customs, but I had hoped that someone would tell you... Speak first to my {s11}, {s4}.", "close_window",[
 ]],

  [anyone,"start",
   [
    (troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_lady),
	(check_quest_active, "qst_wed_betrothed"),
	(quest_slot_eq, "qst_wed_betrothed", slot_quest_target_troop, "$g_talk_troop"),
	(quest_get_slot, ":giver_troop", "qst_wed_betrothed", slot_quest_giver_troop),
	(call_script, "script_troop_get_family_relation_to_troop", ":giver_troop", "$g_talk_troop"),
    (str_store_troop_name, s10, ":giver_troop"),
	##diplomacy start+
	#check pronouns/gendered words in case it's changed so the guardian can be a woman
    ],
   "I do not know where to find my {s11} {s10}, who by tradition should preside over our wedding. Perhaps we should wait until {reg4?she:he} can be found...", "close_window",[
    ##diplomacy end+
   (assign, "$g_leave_encounter", 1),
 ]],



#Captive
  [anyone,"start",
   [
    (troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_lady),
	(neq, "$g_talk_troop_faction", "$g_encountered_party_faction"),
        ##diplomacy start+ slot_town_lord is 7... there's no way this can work
	#(party_get_slot, ":town_lord", "$g_encountered_party"),
        (party_get_slot, ":town_lord", "$g_encountered_party", slot_town_lord),
        ##diplomacy end+
	(ge, ":town_lord", active_npcs_begin),
	(str_store_troop_name, s12, ":town_lord"),
    ],
   "The honorable {s12} has agreed to allow us to return home to our families. We shall be departing shortly.", "close_window",[
 ]],

  [anyone,"start", #default for time since last talk
   [
    (troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_lady),
	(neg|troop_slot_eq, "trp_player", slot_troop_spouse, "$g_talk_troop"),
	(neq, "$g_talk_troop_faction", "$g_encountered_party_faction"),
    (troop_slot_eq, "$g_talk_troop", slot_troop_prisoner_of_party, "$g_encountered_party"),
	(gt, "$g_time_since_last_talk", 24),
    ],
   "So great is my loneliness! How I miss my family!", "kingdom_lady_captive",[
 ]],



  [anyone,"start",
   [
    (troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_lady),
	(neg|troop_slot_eq, "trp_player", slot_troop_spouse, "$g_talk_troop"),
	(neq, "$g_talk_troop_faction", "$g_encountered_party_faction"),
    (troop_slot_eq, "$g_talk_troop", slot_troop_prisoner_of_party, "$g_encountered_party"),
	(lt, "$g_talk_troop_relation", 1),
    ],
##diplomacy start+ Allow the possibility of male versions of the lines
   "You are a cad, {sir/madame}, to hold a {reg65?lady:free-spirited lad} like this...", "kingdom_lady_captive",[#"a lady" -> "a {reg65?lady:free-spirited lad}"
 ]],##diplomacy end+

  [anyone,"start",
   [
    (troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_lady),
	(neg|troop_slot_eq, "trp_player", slot_troop_spouse, "$g_talk_troop"),
	(neq, "$g_talk_troop_faction", "$g_encountered_party_faction"),
    (troop_slot_eq, "$g_talk_troop", slot_troop_prisoner_of_party, "$g_encountered_party"),
	(lt, "$g_talk_troop_relation", 11),
    ],
   "It is strange. On occasion you have shown me such kindness, and yet you continue to hold me here against my will.", "kingdom_lady_captive",[
 ]],

  [anyone,"start",
   [
    (troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_lady),
	(neg|troop_slot_eq, "trp_player", slot_troop_spouse, "$g_talk_troop"),
	(neq, "$g_talk_troop_faction", "$g_encountered_party_faction"),
    (troop_slot_eq, "$g_talk_troop", slot_troop_prisoner_of_party, "$g_encountered_party"),
    ],
   "Why haven't my family paid my ransom? You may hold me as prisoner, but it seems that you care for me more than they do!", "kingdom_lady_captive",[
 ]],


  [anyone|auto_proceed, "start",
  [
    (troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_lady),
	(neg|troop_slot_eq, "trp_player", slot_troop_spouse, "$g_talk_troop"),
	(neq, "$g_talk_troop_faction", "$g_encountered_party_faction"),
    (troop_slot_eq, "$g_talk_troop", slot_troop_cur_center, "$g_encountered_party"),

	(call_script, "script_get_kingdom_lady_social_determinants", "$g_talk_troop"),
	(assign, ":guardian", reg0),
	(neq, "$g_encountered_party_faction", "fac_player_supporters_faction"),

	(store_faction_of_troop, ":guardian_faction", ":guardian"),
	(neq, ":guardian_faction", "$g_encountered_party_faction"),
  ],
  "{!}.", "lady_stranded_next",
  []],

  [anyone,"lady_stranded_next",
  ##diplomacy start+ change to use script_dplmc_print_subordinate_says_sir_madame_to_s0
   #[],
   [(call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),],#added
   "Greetings, {s0}. The tides of war have left me stranded here in this fortress, but I will shortly be departing.", "close_window",[#changed {sir/my lady} to {s0}
   ##diplomacy end+
 ]],



  [anyone,"start",
   [
    (troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_lady),
	(neg|troop_slot_eq, "trp_player", slot_troop_spouse, "$g_talk_troop"),
	(neq, "$g_talk_troop_faction", "$g_encountered_party_faction"),
    (troop_slot_eq, "$g_talk_troop", slot_troop_cur_center, "$g_encountered_party"),

	(call_script, "script_get_kingdom_lady_social_determinants", "$g_talk_troop"),
	(assign, ":guardian", reg0),
	(store_faction_of_troop, ":guardian_faction", ":guardian"),
	(neq, ":guardian_faction", "$g_encountered_party_faction"),

    ],
	#Changed "ladies" to "{reg65?ladies:lads}"
   "{playername} -- I assume that you, as a {man/lady} of honor, will accord gentle-born {reg65?ladies:lads} such as ourselves the right to return to our families, and not demand a ransom.", "lady_talk_refugee",[
   ##diplomacy end+
 ]],


  [anyone,"start", [(troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_lady),
                    (check_quest_active, "qst_escort_lady"),
                    (eq, "$talk_context", tc_entering_center_quest_talk),
                    (quest_slot_eq, "qst_escort_lady", slot_quest_object_troop, "$g_talk_troop")],
   "Thank you for escorting me here, {playername}. Please accept this gift as a token of my gratitude.\
 I hope we shall meet again sometime in the future.", "lady_escort_lady_succeeded",
   [
     (quest_get_slot, ":cur_center", "qst_escort_lady", slot_quest_target_center),
     (add_xp_as_reward, 300),
     (call_script, "script_troop_add_gold", "trp_player", 250),
     (call_script, "script_end_quest", "qst_escort_lady"),
     (call_script, "script_change_player_relation_with_troop", "$g_talk_troop", 2),
     (troop_set_slot, "$g_talk_troop", slot_troop_cur_center, ":cur_center"),
     (remove_member_from_party,"$g_talk_troop"),
     ]],

	[anyone|plyr,"lady_escort_lady_succeeded", [], "It was an honor to serve you, {s65}.", "close_window",[]],


  [anyone,"start",
   [
    (troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_lady),
	(neg|troop_slot_eq, "trp_player", slot_troop_spouse, "$g_talk_troop"),
	(neq, "$g_talk_troop_faction", "$g_encountered_party_faction"),
    (troop_get_slot, ":new_location", "$g_talk_troop", slot_troop_cur_center),
	(str_clear, s5),
	(try_begin),
		(is_between, ":new_location", centers_begin, centers_end),
		(str_store_party_name, s4, ":new_location"),
		(str_store_string, s5, "str_for_s4"),
	(try_end),
    #SB : check relation before showing last string
    (try_begin),
      (this_or_next|le, "$player_honor", 0),
      (lt, "$g_talk_troop_relation", -10),
      (assign, reg5, 0),
    (else_try),
      (assign, reg5, 1),
    (try_end),
    ],
   "We will shortly depart{s5}. {reg5?It is good to know that some people in this world retain a sense of honor:I appreciate the hospitality {playername}, but would prefer if you didn't bother us again}.", "close_window",
   [
   ]],


  [anyone|plyr,"lady_talk_refugee",
   [],
   "Of course, my {reg65?lady:lad}", "close_window",[
    (troop_get_slot, ":current_location", "$g_talk_troop", slot_troop_cur_center),
	(call_script, "script_get_kingdom_lady_social_determinants", "$g_talk_troop"),
	(assign, ":new_location", reg1),
	(troop_set_slot, "$g_talk_troop", slot_troop_cur_center, ":new_location"),
	(try_begin),
		(neq, ":current_location", ":new_location"),
		(call_script, "script_troop_change_relation_with_troop", "trp_player", "$g_talk_troop", 1),
    (try_end),
 ]],

  [anyone|plyr,"lady_talk_refugee",
   [],
   ##diplomacy start+ Allow the possibility of male versions of the lines
   #changed "my lady" to "{reg65?my lady:sirrah}"
   "You assume wrong, {reg65?my lady:sirrah}!", "lady_captive_talk",[
   ##diplomacy end+
 ]],

  [anyone,"lady_captive_talk",
   [],
   "What?! What infamy is this?", "lady_captive_confirm",[
 ]],

  [anyone|plyr,"lady_captive_confirm",
   [],
   "My apologies -- you must have misunderstood me. Of course you may leave.", "close_window",[
   #SB : default to lady leaving
    # (troop_get_slot, ":current_location", "$g_talk_troop", slot_troop_cur_center),
    (call_script, "script_get_kingdom_lady_social_determinants", "$g_talk_troop"),
    (assign, ":new_location", reg1),
    (troop_set_slot, "$g_talk_troop", slot_troop_cur_center, ":new_location"),
    # (str_store_party_name, s4, "$current_town"),
    # (try_begin), #no relationship increase, since we were rude
        # (neq, ":current_location", ":new_location"),
        # (call_script, "script_troop_change_relation_with_troop", "trp_player", "$g_talk_troop", 1),
    # (try_end),
 ]],

  [anyone|plyr,"lady_captive_confirm",
   [],
   "Contact your family to arrange for a ransom, my lady.", "close_window",[
    (troop_set_slot, "$g_talk_troop", slot_troop_prisoner_of_party, "$g_encountered_party"),
	(call_script, "script_change_player_honor", -2),
	(call_script, "script_troop_change_relation_with_troop", "trp_player", "$g_talk_troop", -10),
    ##diplomacy start+
    #There are other people who this would annoy: The woman's father (usually her legal guardian
	#before she marries), her brother (especially if her father is dead), her husband or fiance,
	#and possibly any suitors.  Other relatives may be irritated to a greater or lesser degree,
	#but those will be the primary ones.
	(call_script, "script_get_kingdom_lady_social_determinants", "$g_talk_troop"),
	(assign, ":guardian", reg0),
	(store_faction_of_troop, ":guardian_faction", ":guardian"),

	(try_for_range, ":troop_no", heroes_begin, heroes_end),
		(this_or_next|troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_hero),
			(troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_lady),
		(neq, "$g_talk_troop", ":troop_no"),
		(neq, ":troop_no", active_npcs_including_player_begin),
		(store_faction_of_troop, ":troop_faction", ":troop_no"),

		(this_or_next|is_between, ":troop_no", kingdom_ladies_begin, kingdom_ladies_end),
			(eq, ":troop_faction", ":guardian_faction"),
		(assign, ":relation_change", 0),

		(try_begin),
			(eq, ":troop_no", ":guardian"),
			(val_min, ":relation_change", -10),
		(try_end),

		#family
		(call_script, "script_troop_get_family_relation_to_troop", "$g_talk_troop", ":troop_no"),
		(val_min, reg0, 10),
		(store_mul, ":relation_change", reg0, -1),

		#Family-centric characters are more upset
		(try_begin),
			(ge, reg0, 2),
			(troop_slot_eq, ":troop_no", slot_lord_reputation_type, lrep_conventional),
			(val_sub, ":relation_change", 1),
		(try_end),

		(try_begin),
			#betrothed
			(troop_slot_eq, ":troop_no", slot_troop_betrothed, "$g_talk_troop"),
			(val_min, ":relation_change", -10),
		(else_try),
			(lt, reg0, 2),
			#suitors
			(is_between, ":troop_no", lords_begin, lords_end),
			(this_or_next|troop_slot_eq, ":troop_no", slot_troop_love_interest_1, "$g_talk_troop"),
			(this_or_next|troop_slot_eq, ":troop_no", slot_troop_love_interest_2, "$g_talk_troop"),
				(troop_slot_eq, ":troop_no", slot_troop_love_interest_3, "$g_talk_troop"),

			(call_script, "script_troop_get_relation_with_troop", ":troop_no", "$g_talk_troop"),
			(assign, ":fondness", reg0),

			(ge, ":fondness", 5),
			(val_min, ":relation_change", -1),
			(ge, ":fondness", 10),
			(val_min, ":relation_change", -2),
			(ge, ":fondness", 15),
			(val_min, ":relation_change", -3),
			(ge, ":fondness", 20),
			(val_min, ":relation_change", -4),
		(try_end),

		#Some lords are more prone to fury at personal offenses than others
		(try_begin),
			(troop_slot_eq, ":troop_no", slot_lord_reputation_type, lrep_quarrelsome),
			(lt, ":relation_change", 0),
			(val_sub, ":relation_change", 2),
		(try_end),

		#Now apply the modification
		(lt, ":relation_change", 0),
		(call_script, "script_troop_change_relation_with_troop", "trp_player", ":troop_no", ":relation_change"),
	(try_end),
##diplomacy end+
#incomplete -- make sure ransoms are offered for ladies
 ]],


  [anyone|plyr,"kingdom_lady_captive",
   [],
   "Then write to your family, and ask them to hurry up with the ransom!", "close_window",[
   #SB : reset global if rejected
   (assign, "$g_ransom_offer_rejected", 0),
 ]],#incomplete



#  [anyone|plyr,"kingdom_lady_captive",
#   [
#    (troop_get_slot, ":is_female", "trp_player"),
#	(eq, ":is_female", 0),

#   (troop_slot_eq, "$g_talk_troop", slot_troop_spouse, -1),
#   (troop_slot_eq, "trp_player", slot_troop_spouse, -1),
#   ],
#   "Then marry me forthwith, and stay here as my wife", "close_window",[
# ]],#incomplete


  [anyone|plyr,"kingdom_lady_captive",
   [],
   "I have changed my mind -- you are free to go.", "close_window",[
    ##diplomacy start+
    #(troop_set_slot, "$g_talk_troop", slot_troop_prisoner_of_party, -1),
	#(troop_set_slot, "$g_talk_troop", slot_troop_met, 1),

	##Ensure the freeing works properly.
	(try_begin),
		#Add this for dual-use situations, such as if the lady is a prisoner of the party
		(party_count_prisoners_of_type, ":holding_as_prisoner", "p_main_party", "$g_talk_troop"),
		(gt, ":holding_as_prisoner", 0),
		(party_remove_prisoners, "p_main_party", "$g_talk_troop", 1),
	(else_try),
		(party_count_prisoners_of_type, ":holding_as_prisoner",  "$g_encountered_party", "$g_talk_troop"),
		(gt, ":holding_as_prisoner", 0),
		(party_remove_prisoners, "$g_encountered_party", "$g_talk_troop", 1),
	(else_try),
		(troop_get_slot, ":captor_party", "$g_talk_troop", slot_troop_prisoner_of_party),
		(ge, ":captor_party", 0),
		(party_count_prisoners_of_type, ":holding_as_prisoner",  ":captor_party", "$g_talk_troop"),
		(gt, ":holding_as_prisoner", 0),
		(party_remove_prisoners, ":captor_party", "$g_talk_troop", 1),
	(try_end),

	(troop_set_slot, "$g_talk_troop", slot_troop_prisoner_of_party, -1),
	#close any open quests
	(call_script, "script_remove_troop_from_prison", "$g_talk_troop"),
	(str_store_troop_name_link, s7, "$g_talk_troop"),
	(display_message, "str_dplmc_has_been_set_free"),
	(troop_set_slot, "$g_talk_troop", slot_troop_met, 1), #SB : probably has to do with courtship reset
	(call_script, "script_get_kingdom_lady_social_determinants", "$g_talk_troop"),
	(troop_set_slot, "$g_talk_troop", slot_troop_cur_center, reg1),
	##diplomacy end+
	]],#incomplete





#Kingdom ladies quest resolution

  [anyone,"start",
   [
    (troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_lady),
	(check_quest_active, "qst_duel_courtship_rival"),
    (check_quest_failed, "qst_duel_courtship_rival"),
    (quest_slot_eq, "qst_duel_courtship_rival", slot_quest_giver_troop, "$g_talk_troop"),
    (quest_get_slot, ":quest_target_troop", "qst_duel_courtship_rival", slot_quest_target_troop),
    (str_store_troop_name, s10, ":quest_target_troop"),
	(lt, "$g_talk_troop_relation", 0),
    ],
   "Well, {playername} -- you fought a duel with {s10}, and lost. According to our custom and tradition, I should no longer receive you. Farewell, {playername}.", "close_window",[
    (call_script, "script_end_quest", "qst_duel_courtship_rival"),
	(troop_set_slot, "$g_talk_troop", slot_troop_courtship_state, 4),
 ]],#incomplete


  [anyone,"start",
   [
    (troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_lady),
	(check_quest_active, "qst_duel_courtship_rival"),
    (check_quest_failed, "qst_duel_courtship_rival"),
    (quest_slot_eq, "qst_duel_courtship_rival", slot_quest_giver_troop, "$g_talk_troop"),
    (quest_get_slot, ":quest_target_troop", "qst_duel_courtship_rival", slot_quest_target_troop),
    (str_store_troop_name, s10, ":quest_target_troop"),
	##diplomacy start+
	#check pronouns/gendered words in case it's possible for the other lord to be a woman
	(call_script, "script_dplmc_store_troop_is_female_reg", ":quest_target_troop", 3),
    ],
   "Oh {playername} -- I heard of your duel with {s10}. I wish now that you had never fought {reg3?her:him}, for our honor and tradition demand that, having lost to {reg3?her:him}, you now break off your suit with me. Farewell, {playername}.", "lady_duel_lost",[
    ##diplomacy end+
    (troop_set_slot, "$g_talk_troop", slot_troop_courtship_state, 4),
    (call_script, "script_end_quest", "qst_duel_courtship_rival"),
 ]],

  [anyone|plyr,"lady_duel_lost",
	[], "Very well -- we must do as tradition demands... Farewell, my lady", "close_window", [
 ]],

  [anyone|plyr,"lady_duel_lost",
	[], "Let honor and tradition hang!", "lady_duel_lost_flaunt_conventions", [
	]],

  [anyone, "lady_duel_lost_flaunt_conventions",
	[], "Oh, {playername}! Although people will talk, it would so break my heart to no longer be able to see you. We shall ignore this silly, cruel tradition.", "close_window", [
	(troop_set_slot, "$g_talk_troop", slot_troop_courtship_state, 2),
	(call_script, "script_change_player_honor", -5),
	]],

  [anyone, "lady_duel_lost_flaunt_conventions",
	[], "No, {playername} -- I cannot afford to fritter away my good name, and neither can you.", "close_window", [
	]],


  [anyone,"start",
   [
    (troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_lady),
	(check_quest_active, "qst_duel_courtship_rival"),
    (check_quest_succeeded, "qst_duel_courtship_rival"),
    (quest_slot_eq, "qst_duel_courtship_rival", slot_quest_giver_troop, "$g_talk_troop"),
    (quest_get_slot, ":quest_target_troop", "qst_duel_courtship_rival", slot_quest_target_troop),
	(call_script, "script_troop_get_relation_with_troop", "$g_talk_troop", ":quest_target_troop"),
	(lt, reg0, 0),
    (str_store_troop_name_link, s10, ":quest_target_troop"),
	##diplomacy start+
	#check pronouns/gendered words in case it's possible for the other lord to be a woman
	(call_script, "script_dplmc_store_troop_is_female_reg", ":quest_target_troop", 3),
    ],
   "Oh, {playername} -- I have heard that you won your duel with {s10}. I'm grateful that you have delivered me from that {reg3?woman:man}'s attentions!",
   ##diplomacy end+
   "lady_start",[
	(call_script, "script_end_quest", "qst_duel_courtship_rival"),
	(call_script, "script_troop_change_relation_with_troop", "trp_player", "$g_talk_troop", 3),
    (add_xp_as_reward, 1000),

 ]],#incomplete


 [anyone,"start",
   [
    (troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_lady),
	(check_quest_active, "qst_duel_courtship_rival"),
    (check_quest_succeeded, "qst_duel_courtship_rival"),
    (quest_slot_eq, "qst_duel_courtship_rival", slot_quest_giver_troop, "$g_talk_troop"),
    (quest_get_slot, ":quest_target_troop", "qst_duel_courtship_rival", slot_quest_target_troop),
	(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_ambitious),
	(call_script, "script_troop_get_relation_with_troop", "$g_talk_troop", ":quest_target_troop"),
    (str_store_troop_name_link, s10, ":quest_target_troop"),
	##diplomacy start+
	#check pronouns/gendered words in case it's possible for the other lord to be a woman
	(call_script, "script_dplmc_store_troop_is_female_reg", ":quest_target_troop", 3),
    ],
   "Well, {playername} --  you won your duel with {s10}. Clearly, {reg3?she:he} was not worthy of my affections.", "lady_start",[
    ##diplomacy end+
   (call_script, "script_end_quest", "qst_duel_courtship_rival"),
	(call_script, "script_troop_change_relation_with_troop", "trp_player", "$g_talk_troop", 2),
    (add_xp_as_reward, 1000),
 ]],

[anyone|auto_proceed,"start",
   [
    (troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_lady),
	(check_quest_active, "qst_duel_courtship_rival"),
    (check_quest_succeeded, "qst_duel_courtship_rival"),
    (quest_slot_eq, "qst_duel_courtship_rival", slot_quest_giver_troop, "$g_talk_troop"),
    (quest_get_slot, ":quest_target_troop", "qst_duel_courtship_rival", slot_quest_target_troop),
	(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_conventional),
	(call_script, "script_troop_get_relation_with_troop", "$g_talk_troop", ":quest_target_troop"),
    (str_store_troop_name_link, s10, ":quest_target_troop"),
    ],
   "{!}.", "lady_duel_rep_1",[]],

[anyone,"lady_duel_rep_1",
   [],
   ##diplomacy start+ make an alternate gender version just in case
   "Well, {playername} --  you won your duel with {s10}. Oh, such foolishness, that {men/people} should fight over me! Sigh... But it is a bit romantic, I suppose.", "lady_start",[
   ##diplomacy end+
   (call_script, "script_end_quest", "qst_duel_courtship_rival"),
	(call_script, "script_troop_change_relation_with_troop", "trp_player", "$g_talk_troop", 1),
    (add_xp_as_reward, 1000),
 ]],





   [anyone|auto_proceed,"start",
   [
    (troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_lady),
	(check_quest_active, "qst_duel_courtship_rival"),
    (check_quest_succeeded, "qst_duel_courtship_rival"),
    (quest_slot_eq, "qst_duel_courtship_rival", slot_quest_giver_troop, "$g_talk_troop"),
    (quest_get_slot, ":quest_target_troop", "qst_duel_courtship_rival", slot_quest_target_troop),
	(call_script, "script_troop_get_relation_with_troop", "$g_talk_troop", ":quest_target_troop"),
    (str_store_troop_name_link, s10, ":quest_target_troop"),
    ],
   "{!}.", "lady_duel_rep_2",[]],

   [anyone,"lady_duel_rep_2",
   [##diplomacy start+
	#check pronouns in case it's possible for the other lord to be a woman
	(quest_get_slot, ":quest_target_troop", "qst_duel_courtship_rival", slot_quest_target_troop),
	(call_script, "script_dplmc_store_troop_is_female", ":quest_target_troop"),
	],
   "Well, {playername} --  you won your duel with {s10}. Honor now demands that {reg0?she:he} and I no longer meet... I was fond of {reg0?her:him}, you know. You did me no service by fighting {reg0?her:him}, {sir/madame}.", "lady_start",[
   ##diplomacy end+
	(call_script, "script_end_quest", "qst_duel_courtship_rival"),
	(call_script, "script_troop_change_relation_with_troop", "trp_player", "$g_talk_troop", -2),
    (add_xp_as_reward, 1000),
 ]],



  [anyone,"start",
   [
    (troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_lady),
    (check_quest_active, "qst_duel_for_lady"),
    (check_quest_succeeded, "qst_duel_for_lady"),
    (quest_slot_eq, "qst_duel_for_lady", slot_quest_giver_troop, "$g_talk_troop"),
    (le, "$talk_context", tc_siege_commander),
    (quest_get_slot, ":quest_target_troop", "qst_duel_for_lady", slot_quest_target_troop),
    (str_store_troop_name_link, s13, ":quest_target_troop"),
	##diplomacy start+
	#check pronouns in case it's possible for the other lord to be a woman
	(call_script, "script_dplmc_store_troop_is_female_reg", ":quest_target_troop", 3),
    ],
   "My dear {playername}, how joyous to see you again! I heard you gave that vile {s13} a well-deserved lesson.\
 I hope {reg3?she:he} never forgets {reg3?her:his} humiliation.\
 I've a reward for you, but I fear it's little compared to what you've done for me.", "lady_qst_duel_for_lady_succeeded_1",[]],
    ##diplomacy end+
 [anyone|plyr,"lady_qst_duel_for_lady_succeeded_1", [], "Oh, it will just have to do.", "lady_qst_duel_for_lady_succeeded_2",[
  (str_store_string,s10,"@Then take it, with my eternal thanks. You are a noble {man/woman}.\
 I will never forget that you helped me in my time of need.")
  ]],

  [anyone|plyr,"lady_qst_duel_for_lady_succeeded_1", [], "{s66}, this is far too much!", "lady_qst_duel_for_lady_succeeded_2",[
  (str_store_string,s10,"@Forgive me, {playername}, but I must insist you accept it.\
 The money means little to me, and I owe you so much.\
 Here, take it, and let us speak no more of this."),
    (call_script, "script_change_player_honor", 1),
  ]],

  [anyone|plyr,"lady_qst_duel_for_lady_succeeded_1", [], "Please, {s65}, no reward is necessary.", "lady_qst_duel_for_lady_succeeded_2",[
  (str_store_string,s10,"@{playername}, what a dear {man/woman} you are,\
 but I will not allow you to refuse this. I owe you far more than I can say,\
 and I am sure you can put this money to far better use than I."),
    (call_script, "script_change_player_honor", 2),
  ]],
  [anyone,"lady_qst_duel_for_lady_succeeded_2", [], "{s10}", "lady_pretalk",
   [(call_script, "script_change_player_relation_with_troop", "$g_talk_troop", 10),
    (add_xp_as_reward, 1000),
    (call_script, "script_troop_add_gold", "trp_player", 2000),
    (call_script, "script_end_quest", "qst_duel_for_lady"),
    ]],

  [anyone,"start",
   [
     (troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_lady),
     (check_quest_active, "qst_duel_for_lady"),
     (check_quest_failed, "qst_duel_for_lady"),
     (quest_slot_eq, "qst_duel_for_lady", slot_quest_giver_troop, "$g_talk_troop"),
     (le, "$talk_context", tc_siege_commander),
     (quest_get_slot, ":quest_target_troop", "qst_duel_for_lady", slot_quest_target_troop),
     (str_store_troop_name_link, s13, ":quest_target_troop"),
     ],
   "I was told that you sought satisfaction from {s13} to prove my innocence, {playername}.\
 It was a fine gesture, and I thank you for your efforts.", "lady_qst_duel_for_lady_failed", []],
  [anyone|plyr,"lady_qst_duel_for_lady_failed", [], "I beg your forgiveness for my defeat, {s65}...", "lady_qst_duel_for_lady_failed_2",[]],
  [anyone,"lady_qst_duel_for_lady_failed_2", [], "It matters not, dear {playername}. You tried.\
 The truth cannot be proven at the point of a sword, but you willingly put your life at stake for my honour.\
 That alone will convince many of my innocence.", "lady_pretalk",
   [(call_script, "script_change_player_relation_with_troop", "$g_talk_troop", 6),
    (add_xp_as_reward, 400),
    (call_script, "script_end_quest", "qst_duel_for_lady"),
    ]],

	[anyone,"start", [
	(troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_lady),
  	(troop_set_slot, "$g_talk_troop", slot_lady_no_messages, 0), #do this for all
    (check_quest_active, "qst_visit_lady"),
    (quest_slot_eq, "qst_visit_lady", slot_quest_giver_troop, "$g_talk_troop"),
	], "Ah {playername} -- you must have received my message. How happy I am that you could come!", "lady_start",[
	(call_script, "script_change_player_relation_with_troop", "$g_talk_troop", 1),
    (call_script, "script_end_quest", "qst_visit_lady"),
#	(assign, "$g_time_to_spare", 1),
	]],


	[anyone,"start", [
	(troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_lady),
    (check_quest_active, "qst_formal_marriage_proposal"),
    (quest_slot_eq, "qst_formal_marriage_proposal", slot_quest_giver_troop, "$g_talk_troop"),
	(neg|check_quest_succeeded, "qst_formal_marriage_proposal"),
	(neg|check_quest_failed, "qst_formal_marriage_proposal"),
	], "Dearest {playername} -- is there any word from my family?", "lady_proposal_pending",[
	]],

	[anyone,"start",
	[
	(troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_lady),
    (check_quest_active, "qst_formal_marriage_proposal"),
    (quest_slot_eq, "qst_formal_marriage_proposal", slot_quest_giver_troop, "$g_talk_troop"),
	(check_quest_failed, "qst_formal_marriage_proposal"),
	(call_script, "script_get_kingdom_lady_social_determinants", "$g_talk_troop"),
	(assign, ":guardian", reg0),
	(call_script, "script_troop_get_family_relation_to_troop", ":guardian", "$g_talk_troop"),
    ],
   "I hear that my {s11} has refused your request to marry me. Does that mean that we must part?", "lady_betrothed",[
	(call_script, "script_end_quest", "qst_formal_marriage_proposal"),
   ]],

	#Marriage success


  [anyone,"start", [
    (troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_lady),
    (le, "$talk_context", tc_siege_commander),
    (check_quest_active, "qst_rescue_lord_by_replace"),
    (check_quest_succeeded, "qst_rescue_lord_by_replace"),
    (quest_slot_eq, "qst_rescue_lord_by_replace", slot_quest_giver_troop, "$g_talk_troop"),
	(quest_get_slot, ":cur_lord", "qst_rescue_lord_by_replace", slot_quest_target_troop),
    (call_script, "script_troop_get_family_relation_to_troop", ":cur_lord", "$g_talk_troop"),
	##diplomacy start+ check pronouns in case the quest is altered to allow rescuing female prisoners
    ],
   "Oh, {playername}, you brought {reg4?her:him} back to me! Thank you ever so much for rescuing my {s11}.\
 Please, take this as some small repayment for your noble deed.", "lady_generic_mission_succeeded",
    ##diplomacy end+
   [
     (call_script, "script_change_player_relation_with_troop", "$g_talk_troop", 8),
     (add_xp_as_reward, 2000),
     (call_script, "script_troop_add_gold", "trp_player", 1500),
     (call_script, "script_end_quest", "qst_rescue_lord_by_replace"),
     ]],


  [anyone,"start", [
    (troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_lady),
    (check_quest_active, "qst_rescue_prisoner"),
    (check_quest_succeeded, "qst_rescue_prisoner"),
    (quest_slot_eq, "qst_rescue_prisoner", slot_quest_giver_troop, "$g_talk_troop"),
	(quest_get_slot, ":cur_lord", "qst_rescue_prisoner", slot_quest_target_troop),
    (call_script, "script_troop_get_family_relation_to_troop", ":cur_lord", "$g_talk_troop"),
	##diplomacy start+ check pronouns in case the quest is altered to allow rescuing female prisoners
    ],
   "Oh, {playername}, you brought {reg4?her:him} back to me! Thank you ever so much for rescuing my {s11}.\
 Please, take this as some small repayment for your noble deed.", "rescue_prisoner_succeed_1",
    ##diplomacy end+
    [
     # (call_script, "script_change_player_relation_with_troop", "$g_talk_troop", 8),
     # (add_xp_as_reward, 2000),
     # (call_script, "script_troop_add_gold", "trp_player", 1500),
     # (call_script, "script_end_quest", "qst_rescue_prisoner"),
     (call_script, "script_finish_quest", "qst_rescue_prisoner", 100),
     ]],#rescuerescue
   [anyone|plyr,"rescue_prisoner_succeed_1", [], "Always an honour to serve, {s65}.", "lady_pretalk",[]],



  #first time greetings
	[anyone ,"start", [(troop_slot_eq,"$g_talk_troop",slot_troop_occupation, slto_kingdom_lady),
                     (eq, "$g_talk_troop_met", 0),
                     (gt, "$g_player_tournament_placement", 4),
					 (str_clear, s8),

                     ],
   "You must be {playername}. We have just had the honor of watching you distinguish yourself in the recent tournament{s8}.",
   "lady_meet_end", []],


  [anyone ,"start", [(troop_slot_eq,"$g_talk_troop",slot_troop_occupation, slto_kingdom_lady),
                     (eq, "$g_talk_troop_met", 0),
                     (le,"$talk_context",tc_siege_commander),

					 (assign, ":known_by_relative", 0),
					 (str_clear, s15),
					 (try_for_range, ":lord", lords_begin, lords_end),
						(call_script, "script_troop_get_family_relation_to_troop", ":lord", "$g_talk_troop"),
						(gt, reg0, 5),

						(call_script, "script_troop_get_relation_with_troop", "trp_player", ":lord"),
						(gt, reg0, 10),

						(str_store_string, s15, s11),
						(str_store_troop_name, s16, ":lord"),
						(assign, ":known_by_relative", ":lord"),
					 (try_end),


					 (gt, ":known_by_relative", 0),

                     ],
   "You must be {playername}. My {s15} {s16} has spoken most highly of you. I am delighted to make your acquaintance.",
   "lady_meet_end", []],


  [anyone ,"start", [(troop_slot_eq,"$g_talk_troop",slot_troop_occupation, slto_kingdom_lady),
                     (eq, "$g_talk_troop_met", 0),
                     (le,"$talk_context",tc_siege_commander),
                     ],
   "I say, you don't look familiar...", "lady_premeet", []],

   #default greet
  [anyone,"start",
   [(troop_slot_eq, "$g_talk_troop", slot_troop_courtship_state, 4),
    (lt, "$g_talk_troop_relation", 0),
    ],
   "Ah, {playername}. How good it is to see you again. However, I believe that I am required elsewhere.", "close_window",[]],

  [anyone,"start",
   [(troop_slot_eq, "$g_talk_troop", slot_troop_courtship_state, 4),
    ],
   "{playername} -- how good it is to see you. (Whispers:) I still remember your visits fondly.", "lady_start",[]],

	[anyone ,"start", [(troop_slot_eq,"$g_talk_troop",slot_troop_occupation, slto_kingdom_lady),
                     (eq, "$g_talk_troop_met", 0),
                     (gt, "$g_player_tournament_placement", 4),
					 (ge, "$g_talk_troop_relation", 0),
                     ],
   "Ah, {playername}. How spendid it was to see you distinguish yourself in the recent tournament.",
   "lady_meet_end", []],


  [anyone,"start", [
					(troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_lady),
					(str_store_string, s12, "str_hello_playername"),
#					(assign, "$g_time_to_spare", 1),
                    ],
   "{s12}", "lady_start",[]],


	#lady_start - contains news, quest assignments
	[anyone,"lady_start", [
					(troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_lady),
					(troop_slot_ge, "$g_talk_troop", slot_troop_courtship_state, 2),
					(neg|troop_slot_eq, "$g_talk_troop", slot_troop_courtship_state, 4),
					(troop_get_slot, ":betrothed", "$g_talk_troop", slot_troop_betrothed),
					(gt, ":betrothed", -1),
					(neq, ":betrothed", "trp_player"),
					(str_store_troop_name, s5, ":betrothed"),
					(call_script, "script_troop_get_relation_with_troop", "$g_talk_troop", ":betrothed"),
					(lt, reg0, 0),
					(ge, "$g_talk_troop_relation", 10),
					],
    "I have sad news. I have become betrothed to {s5} -- against my will, I should say! Oh {playername}, I would so much rather be wed to you!", "lady_betrothed",[]],

	[anyone,"lady_start", [
					(troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_lady),
					(troop_slot_ge, "$g_talk_troop", slot_troop_courtship_state, 2),
					(troop_get_slot, ":betrothed", "$g_talk_troop", slot_troop_betrothed),
					(gt, ":betrothed", -1),
					(neq, ":betrothed", "trp_player"),
					(str_store_troop_name, s5, ":betrothed"),
					],
    "Good {playername} -- I have become betrothed to {s5}. It is now no longer seemly for us to see each other like this.", "lady_betrothed",[
#	(try_begin),
#		(check_quest_active, "qst_visit_lady"),
#		(quest_slot_eq, "qst_visit_lady", slot_quest_giver_troop, "$g_talk_troop"),
#		(call_script, "script_end_quest", "qst_visit_lady"),
#	(try_end),
	]],

	[anyone,"lady_start",
	[
	  (troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_lady),
	  (troop_slot_eq, "$g_talk_troop", slot_troop_courtship_state, 2),
	  (neg|troop_slot_eq, "$g_talk_troop", slot_troop_courtship_state, 4),
	  (neg|troop_slot_ge, "trp_player", slot_troop_spouse, active_npcs_begin),
	  (neg|troop_slot_ge, "$g_talk_troop", slot_troop_spouse, active_npcs_begin),

	  (gt, "$g_talk_troop_relation", 0),
	  (assign, "$romantic_rival", -1),

	  (try_for_range, ":rival_lord", lords_begin, lords_end),
	    (this_or_next|troop_slot_eq, ":rival_lord", slot_troop_love_interest_1, "$g_talk_troop"),
	    (this_or_next|troop_slot_eq, ":rival_lord", slot_troop_love_interest_2, "$g_talk_troop"),
	    (troop_slot_eq, ":rival_lord", slot_troop_love_interest_2, "$g_talk_troop"),
	    (call_script, "script_troop_get_relation_with_troop", "$g_talk_troop", ":rival_lord"),
	    (le, reg0, -4),

	    (this_or_next|troop_slot_eq, ":rival_lord", slot_lord_reputation_type, lrep_debauched),
	    (this_or_next|troop_slot_eq, ":rival_lord", slot_lord_reputation_type, lrep_quarrelsome),
	    (this_or_next|troop_slot_eq, ":rival_lord", slot_lord_reputation_type, lrep_roguish),
	    (troop_slot_eq, ":rival_lord", slot_lord_reputation_type, lrep_selfrighteous),

	    (assign, "$romantic_rival", ":rival_lord"),
	  (try_end),

	  (gt, "$romantic_rival", 0),
    ##diplomacy start+
	#check pronouns to support the possibility of female rivals
	(call_script, "script_dplmc_store_troop_is_female", "$romantic_rival"),
	],
	#Use reg3 below for "him" to "{reg0?her:him}", etc.
    "I must tell you -- there is another lord who has been paying me attentions, although I cannot abide {reg0?her:him}. I fear {reg0?she:he} has designs on me, and may try to force me to wed against my will.", "lady_other_suitor",[]],
	##diplomacy end+

	#romantic news/quest assignments end
  [anyone,"lady_start", [ #friendly reminder that time is short
					(troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_lady),
					(lt, "$g_time_since_last_talk", 24),
					(troop_slot_eq, "$g_talk_troop", slot_troop_courtship_state, 2),
					(gt, "$g_talk_troop_relation", 0),
					(try_begin),
						(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_adventurous),
						(str_store_string, s11, "str_i_do_enjoy_speaking_to_you_but_i_am_sure_you_understand_that_our_people_cluck_their_tongues_at_a_woman_to_spend_too_long_conversing_with_a_man_outside_her_family__although_the_heavens_know_its_never_the_man_who_is_held_to_blame_"),
					(else_try),
						(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_ambitious),
						(str_store_string, s11, "str_as_much_as_i_enjoy_speaking_to_you_i_do_not_care_to_be_gossiped_about_by_others_who_might_lack_my_grace_and_beauty_"),
					(else_try),
						(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_moralist),
						(str_store_string, s11, "str_i_do_so_enjoy_speaking_to_you_but_as_a_daughter_of_one_of_the_great_families_of_this_land_i_must_set_an_example_of_propriety_"),
					(else_try),
						(str_store_string, s11, "str_i_do_so_enjoy_speaking_to_you_but_as_a_daughter_of_good_family_i_must_protect_my_reputation_"),
					(try_end),
					],
   "{s11}It is probably not suitable for us to tarry too long here in conversation, but I would hope to see you again soon.", "lady_talk",[]],

  [anyone,"lady_start", [ #unfriendly reminder that time is short
					(troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_lady),
					(lt, "$g_time_since_last_talk", 24),
					(troop_slot_eq, "$g_talk_troop", slot_troop_courtship_state, 2),
					(try_begin),
						(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_adventurous),
						(str_store_string, s11, "str_although_it_is_kind_of_you_to_pay_me_such_attentions_i_suspect_that_you_might_find_other_ladies_who_may_be_more_inclined_to_return_your_affection"),
					(else_try),
						(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_ambitious),
						(str_store_string, s11, "str_as_flattered_as_i_am_by_your_attentions_perhaps_you_should_seek_out_another_lady_of_somewhat_shall_we_say_different_tastes"),
					(else_try),
						(str_store_string, s11, "str_as_flattered_as_i_am_by_your_attentions_i_am_a_daughter_of_good_family_and_must_be_aware_of_my_reputation_it_is_not_seemly_that_i_converse_too_much_at_one_time_with_one_man_i_am_sure_you_understand_now_if_you_will_excuse_me"),
					(try_end),

					],
   "{s11}", "lady_talk",[]],

	[anyone, "lady_start", [
	(eq, "$lady_flirtation_location", "$g_encountered_party"),
	(troop_slot_eq, "$g_talk_troop", slot_troop_met, 1),
	],  "I was planning to retire for a little while, but perhaps we may have a chance to speak more later...", "lady_talk", []],


	#Defeault lady_start - no news, assignments
	[anyone,"lady_start", [
	(troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_lady),
	(troop_slot_eq, "$g_talk_troop", slot_troop_courtship_state, 2),
	(gt, "$g_talk_troop_relation", 0),
	(str_clear, s12),
	(try_begin),
		(troop_slot_eq, "$g_talk_troop", slot_troop_courtship_state, 2),
		(gt, "$g_talk_troop_relation", 0),
		(gt, "$g_time_since_last_talk", 24),
						(try_begin),
							(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_otherworldly),
							(str_store_string, s12, "str_ah_my_gentle_playername_how_much_good_it_does_my_heart_to_see_you_again"),
						(else_try),
							(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_adventurous),
							(str_store_string, s12, "str_playername__i_am_so_glad_to_see_you_again_i_must_say_i_do_envy_your_freedom_to_ride_out_and_experience_the_world"),
						(else_try),
							(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_moralist),
							(str_store_string, s12, "str_playername__i_am_so_glad_to_see_you_i_trust_that_you_have_been_behaving_honorably_since_last_we_met"),
						(else_try),
							(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_ambitious),
							(str_store_string, s12, "str_greetings_playername__it_is_good_to_see_you_i_hope_that_you_have_had_success_in_your_efforts_to_make_your_name_in_the_world"),
						(else_try),
							(str_store_string, s12, "str_playername__i_am_so_glad_that_you_were_able_to_come"),
						(try_end),
	(try_end),


	],"It is so delightful to have a chance to spend some time together.{s12}","lady_talk", []],


	[anyone,"lady_start", [
		(troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_lady),
	],"What brings you here today?","lady_talk", []],




	#Betrothed
	[anyone|plyr, "lady_proposal_pending", [],
    "No word so far...", "close_window",[]],

	[anyone|plyr, "lady_proposal_pending", [],
    "On second thought, now is not the time for us to marry", "lady_proposal_pending_end",[]],

	[anyone,"lady_proposal_pending_end", [
	(try_begin),
		(gt, "$g_talk_troop_effective_relation", 19),
		(str_store_string, s11, "str_very_well__i_will_let_you_choose_the_time"),
	(else_try),
		(str_store_string, s11, "str_good_i_am_glad_that_you_have_abandoned_the_notion_of_pushing_me_into_marriage_before_i_was_ready"),
	(try_end),
	],
    "{s11}", "close_window",[
	(call_script, "script_end_quest", "qst_formal_marriage_proposal"),
	]],



	[anyone|plyr,"lady_betrothed", [],
    "Never! We must elope together at once!", "lady_suggest_elope",[]],

	[anyone|plyr,"lady_betrothed", [
	(troop_slot_eq, "$g_talk_troop", slot_troop_betrothed, -1),
	(call_script, "script_get_kingdom_lady_social_determinants", "$g_talk_troop"),
	(call_script, "script_troop_get_family_relation_to_troop", reg0, "$g_talk_troop"),
	],
    "Perhaps I may still be able to change your {s11}'s mind", "lady_pretalk",[]],

	[anyone|plyr,"lady_betrothed", [],
    "So be it -- let us then part", "lady_conclude_relationship",[
	]],


	[anyone,"lady_suggest_elope", [(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_conventional)],
    "Good {playername} -- you are a good and kind man, but a lady cannot defy her family. Such things are not done!", "lady_conclude_relationship",[]],


  [anyone,"lady_suggest_elope",
    [
      (assign, "$romantic_rival", -1),
	  (try_for_range, ":possible_rival", lords_begin, lords_end),
	    (this_or_next|troop_slot_eq, ":possible_rival", slot_troop_love_interest_1, "$g_talk_troop"),
	    (this_or_next|troop_slot_eq, ":possible_rival", slot_troop_love_interest_2, "$g_talk_troop"),
	    (troop_slot_eq, ":possible_rival", slot_troop_love_interest_2, "$g_talk_troop"),
	    (call_script, "script_troop_get_relation_with_troop", "$g_talk_troop", ":possible_rival"),

	    (try_begin),
	      (eq, "$cheat_mode", 1),
	      (str_store_troop_name, s4, ":possible_rival"),
	      (display_message, "str_rival_found_s4_reg0_relation"),
		(try_end),
		(gt, reg0, "$g_talk_troop_relation"),
		(assign, "$romantic_rival", ":possible_rival"),
      (try_end),

      (gt, "$romantic_rival", -1),
    ],
	##diplomacy start+ change "gentlemen" to "{gentlemen/suitors}", and Sir to {sir/madam}
    "{Sir/Madame} -- as you may know, I have been entertaining offers from a number of {gentlemen/suitors} such as yourself. I am not yet at a stage where I can commit to any of them.", "lady_other_suitor",
	##diplomacy end+
	[
    ]],


	[anyone,"lady_suggest_elope", [
	(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_ambitious),
	(neg|troop_slot_ge, "trp_player", slot_troop_renown, 350)
	],
    "Ah {playername}, you must realize. You are still finding your way in the world. I have great affection for you, {playername}, but I will not consign myself to obscurity.", "lady_conclude_relationship",[]],

	[anyone,"lady_suggest_elope", [
	(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_moralist),
	(lt, "$player_honor", 20)
	],
	##diplomacy start+
	#Replace "my husband" with "my betrothed", as the former doesn't make sense (the gender-neutrality of the replacement is a bonus)
	#Also replace "I bare little affection" with "I bear little affection"
    "Ah {playername}, although you are kind to me, I am not certain enough of your moral fiber to risk such a thing. Although I bear little affection for my betrothed, it would be a weighty thing to go against my family's wishes, and I am not certain enough of you to take that step.", "lady_conclude_relationship",[]],
	##diplomacy end+

	[anyone,"lady_suggest_elope", [(le, "$g_talk_troop_effective_relation", 20),],
    "Good {playername} -- to elope would be to throw away my ties with my family, which are everything to me! I have a considerable affection for you, but I am not sure that I am prepared to risk that.", "lady_conclude_relationship",[]],

	[anyone,"lady_suggest_elope", [
	(assign, "$home_for_spouse", -1),
	(try_for_range, ":player_center", centers_begin, centers_end),
		(eq, "$home_for_spouse", -1),
		(party_slot_eq, ":player_center", slot_town_lord, "trp_player"),
		(is_between, ":player_center", walled_centers_begin, walled_centers_end),
#		(this_or_next|is_between, ":player_center", walled_centers_begin, walled_centers_end),
#			(party_slot_eq, ":player_center", slot_center_has_manor, 1),
		(assign, "$home_for_spouse", ":player_center"),
	(try_end),
	(eq, "$home_for_spouse", -1),
	##diplomacy start+ Allow the possibility of male versions of the lines
	],
	#Replace "wife" with "{reg65?wife:husband}" and "mistress" with "{reg65?mistress:keeper}"
    "Good {playername} -- I am not used to the hardships of campaigning as you are. I want a home to call my own. If you were lord of a castle or town with a great hall, I would gladly go there as your {reg0?wife:husband}, to be {reg0?mistress:keeper} of the household. But I do not wish to live like a hunted animal.", "lady_conclude_relationship",[]],
	##diplomacy end+

	[anyone,"lady_suggest_elope", [
	(call_script, "script_get_kingdom_lady_social_determinants", "$g_talk_troop"),
	(call_script, "script_troop_get_family_relation_to_troop", reg0, "$g_talk_troop"),
	##diplomacy start+
	#Use correct pronouns for female guardians
	],
	#change "he" to "{reg4?she:he}", and "his" to "{reg4?her:his}"
    "Elope with you? Yes -- we could do that. It is a great step to defy my family -- but a loveless marriage, and life without you, might be a far worse thing! But be warned -- this will be a terrible blow to my {s11}'s prestige, and {reg4?she:he} will do everything in {reg4?her:his} power to bring you down.", "lady_elope_agree",[]],
	##diplomacy end+

	[anyone|plyr,"lady_elope_agree", [],
    "Quickly, then! There is no time to lose.", "lady_elope_agree_nurse",[
	]],

	[anyone|plyr,"lady_elope_agree", [],##diplomacy start+ change "his" to {reg4?her:his}
    "Everything in {reg4?her:his} power, you say? Em... Let me think about this...", "close_window",[
	##diplomacy end+
	]],

	[anyone, "lady_elope_agree_nurse", [],
    "Your lordship... Your ladyship... Would you like me to witness your exchange of vows?", "lady_elope_agree_lady_vows",[
    (set_conversation_speaker_troop, trp_nurse_for_lady),
	]],

	[anyone, "lady_elope_agree_lady_vows", [
	(str_store_troop_name, s4, "$g_talk_troop"),
	],##diplomacy start+ allow both genders, change "husband" to "{husband/wife}"
    "Yes, do that. For my part, I make the following vow: I, {s4}, do swear that I accept {playername} as my {husband/wife}, according to the ancient law and custom of our land...", "lady_elope_agree_nurse_2",[
	]],##diplomacy end+

	[anyone, "lady_elope_agree_nurse_2", [
	##diplomacy start+ Allow the possibility of male versions of the lines
	],
	#change "wife" to "{reg65?wife:husband}"
    "Very good. Do you, {playername}, swear similarly to accept {s4} as your {reg65?wife:husband}?", "lady_elope_agree_player_vows",[
    (set_conversation_speaker_troop, trp_nurse_for_lady),
	]],##diplomacy end+

	[anyone|plyr,"lady_elope_agree_player_vows", [],
    "I do.", "close_window",[
	(call_script, "script_courtship_event_bride_marry_groom", "$g_talk_troop", "trp_player", 1), #1 is elopement
	]],

	[anyone|plyr,"lady_elope_agree_player_vows", [],
    "Eh, what? This is all moving too fast...", "close_window",[
	]],




	#markspot - do elopement here

	[anyone|plyr,"lady_elope_agree", [
	##diplomacy start+ Allow the possibility of male versions of the lines
	],
	#replaced "lady" with "{reg65?lady:young lad}" and "her" with "{reg65?her:his}"
    "Oh, really? My dear -- I could never separate a {reg65?lady:young lad} from {reg65?her:his} family like that...", "lady_conclude_relationship",[
	##diplomacy end+
	]],

	[anyone,"lady_conclude_relationship", [],
	"So I suppose our time together must come to an end...", "lady_conclude_relationship_confirm", []],

	[anyone|plyr,"lady_conclude_relationship_confirm", [],
	"Yes -- it must be...", "lady_conclude_relationship_confirm_yes", []],

	[anyone|plyr,"lady_conclude_relationship_confirm", [],
	"Wait -- perhaps there is still a chance for us!", "lady_conclude_relationship_confirm_no", []],

	[anyone,"lady_conclude_relationship_confirm_yes", [],
	"Farewell, {playername}. We will see each other, in the courts and castles of this realm, but we must keep our distance from each other. I will remember these days fondly, nonetheless.", "close_window", [
	(troop_set_slot, "$g_talk_troop", slot_troop_courtship_state, 4),
	]],

	[anyone,"lady_conclude_relationship_confirm_no", [],
	"In that case, we shall see what the future brings.", "close_window", [
	]],






  [anyone|plyr,"lady_generic_mission_succeeded", [], "Always an honour to serve, {s65}.", "lady_pretalk",[]],

  [anyone|plyr ,"lady_premeet", [],  "I am {playername}.", "lady_meet", []],
  [anyone|plyr ,"lady_premeet", [],  "My name is {playername}. At your service.", "lady_meet", []],


  [anyone, "lady_meet", [
  (troop_slot_ge, "trp_player", slot_troop_renown, 200),
  ],  "Of course. How splendid to finally make your acquaintance.", "lady_meet_end", []],

  [anyone, "lady_meet", [],  "{playername}? I do not believe I've heard of you before.", "lady_meet_end", []],

  [anyone, "lady_meet_end", [
	(eq, "$lady_flirtation_location", "$g_encountered_party"),
  ],  "I am about to retire for a little while, but perhaps we may have a chance to speak more later...", "lady_talk", []],


  [anyone, "lady_meet_end", [
    (troop_slot_eq, "$g_talk_troop", slot_troop_spouse, -1),
	(call_script, "script_troop_get_romantic_chemistry_with_troop", "$g_talk_troop", "trp_player"),
	(le, reg0, 0),
	(call_script, "script_troop_get_relation_with_troop", "$g_talk_troop", "trp_player"),
	(le, reg0, 0),
	],  "Now, if you will excuse me...", "lady_talk", []],

  [anyone, "lady_meet_end", [],  "Can I help you with anything?", "lady_talk", []],


  [anyone|plyr,"lady_talk", [(neg|troop_slot_ge, "$g_talk_troop", slot_troop_prisoner_of_party, 0),
							 (ge, "$g_encountered_party_relation", 0),
  ],
   "I want to know the location of someone.", "lord_talk_ask_location",[]],


##### TODO: QUESTS COMMENT OUT BEGIN
##  [anyone|plyr,"lady_talk", [(check_quest_active, "qst_deliver_message_to_lover"),
##                             (quest_slot_eq, "qst_deliver_message_to_lover", slot_quest_target_troop, "$g_talk_troop"),
##                             (quest_get_slot, ":troop_no", "qst_deliver_message_to_lover", slot_quest_giver_troop),
##                             (str_store_troop_name_link, 3, ":troop_no")],
##   "I have brought you a message from {s3}", "lady_message_from_lover_success",[(call_script, "script_finish_quest", "qst_deliver_message_to_lover", 100)]],
##
##  [anyone|plyr,"lady_talk", [(check_quest_active, "qst_rescue_lady_under_siege"),
##                             (quest_slot_eq, "qst_rescue_lady_under_siege", slot_quest_object_troop, "$g_talk_troop"),
##                             (quest_slot_eq, "qst_rescue_lady_under_siege", slot_quest_current_state, 0)],
##   "TODO: I'm taking you home!", "lady_rescue_from_siege_check",[]],
##
##
##  [anyone,"lady_rescue_from_siege_check", [(neg|hero_can_join)],
##   "TODO: You don't have enough room for me!", "close_window",[]],
##
##
##  [anyone,"lady_rescue_from_siege_check", [], "TODO: Thank you so much!", "lady_pretalk",[(quest_set_slot, "qst_rescue_lady_under_siege", slot_quest_current_state, 1),
##                                                                                          (troop_set_slot, "$g_talk_troop", slot_troop_cur_center, 0),
##                                                                                          (troop_join, "$g_talk_troop")]],
##  [anyone,"lady_message_from_lover_success", [], "TODO: Thank you so much!", "lady_pretalk",[]],
##

  [anyone,"lady_pretalk", [
    (troop_slot_eq, "$g_talk_troop", slot_troop_spouse, -1),
	(call_script, "script_troop_get_romantic_chemistry_with_troop", "$g_talk_troop", "trp_player"),
	(le, reg0, 0),
	(call_script, "script_troop_get_relation_with_troop", "$g_talk_troop", "trp_player"),
	(le, reg0, 0),
], "Now, if you will excuse me...", "lady_talk",[]],


  [anyone,"lady_pretalk", [], "Is there anything else?", "lady_talk",[]],

##[anyone|plyr,"lady_talk",
##   [(troop_get_type, ":is_female", "trp_player"),
##    (eq, ":is_female", 0),],
##   "{!}CHEAT: I want to marry you! (1)", "wedding_ceremony_bride_vow",[]],
##[anyone|plyr,"lady_talk",
##   [(troop_get_type, ":is_female", "trp_player"),
##    (eq, ":is_female", 0),],
##   "{!}CHEAT: I want to marry you! (2)", "lady_elope_agree_nurse_2",[]],


##diplomacy start+
#Ask kingdom ladies about their relatives, getting personality & rivalry
#information like from the chancellor.
  [anyone|plyr,"lady_talk",
   [(neg|eq, "$g_talk_troop_met", 0),],
   "I wished to ask about one of your relatives.", "dplmc_lady_relations2",[]],

  [anyone,"dplmc_lady_relations2",
   [],
   "About which lord do you want information?", "dplmc_lady_info_relative_select",[
 ]],

   [anyone|plyr|repeat_for_troops, "dplmc_lady_info_relative_select",
   [
    (store_repeat_object, ":troop_no"),
    (neq, "$g_talk_troop", ":troop_no"),
    (is_between, ":troop_no", active_npcs_begin, kingdom_ladies_end),
    (neq, ":troop_no", "trp_player"),#don't talk about the player
    (neq, ":troop_no", "$g_talk_troop"),#don't talk about yourself
    (troop_slot_ge, ":troop_no", slot_troop_occupation, slto_kingdom_hero),
    (neg|troop_slot_ge, ":troop_no", slot_troop_occupation, slto_inactive_pretender),
    (neg|troop_slot_eq, ":troop_no", slot_troop_occupation, slto_retirement),
    #Only give info on relatives
    (call_script, "script_troop_get_family_relation_to_troop", ":troop_no", "$g_talk_troop"),
    (assign, ":relation_strength", reg0),
    (ge, ":relation_strength", 2),#2+: cousin, niece
    (str_store_troop_name, s18, ":troop_no"),
   ], "Your {s11} {s18}", "dplmc_lady_info_relative_1",
   [
      (store_repeat_object, "$lord_selected"),
   ]],

  [anyone|plyr, "dplmc_lady_info_relative_select",
   [
   ],
   "Never mind.", "lady_pretalk",[
 ]],

[anyone,"dplmc_lady_info_relative_1",
   [(lt,"$g_talk_troop_effective_relation",0),
       ],
   "Pardon, but I do not feel comfortable discussing such personal matters with you.", "lady_pretalk",[
 ]],

#Info 1
  [anyone,"dplmc_lady_info_relative_1",
   [
    (call_script, "script_dplmc_troop_political_notes_to_s47", "$lord_selected"),
   ],
   "{s47}", "dplmc_lady_info_relative_2",[
 ]],

#Info 2a: If an unmarried lady, show rumor (betrothal)
[anyone,"dplmc_lady_info_relative_1",
   [
    (is_between,"$lord_selected",kingdom_ladies_begin,kingdom_ladies_end),
    (troop_slot_eq, "$lord_selected", slot_troop_spouse, -1),
    (assign,":lady","$lord_selected"),
	(troop_get_slot, ":betrothed", ":lady", slot_troop_betrothed),
	(is_between, ":betrothed", active_npcs_begin, active_npcs_end),

	(str_store_troop_name, s9, ":lady"),
	(str_store_troop_name, s11, ":betrothed"),

	(str_store_string, s12, "str_s9_is_now_betrothed_to_s11_soon_we_believe_there_shall_be_a_wedding"),
	(try_begin),
		(troop_slot_eq, ":lady", slot_troop_courtship_state, 2),
		(assign, "$romantic_rival", ":betrothed"),
	(try_end),
   ],
   "{12}", "lady_pretalk",[
 ]],

#Info 2b: If a lady, show rumor (other)
     [anyone,"dplmc_lady_info_relative_2",
   [
    (is_between,"$lord_selected",kingdom_ladies_begin,kingdom_ladies_end),
    (assign, "$lady_selected", "$lord_selected"),
    (try_begin),
	    (str_store_string, s12, "str_i_have_not_heard_any_news_about_her"),

		(str_store_troop_name, s9, "$lady_selected"), #lady

		(try_begin),
			(eq, "$cheat_mode", 1), #for some reason, speaking to tavern merchant does not yield rumor. Try for Lady Baoth, Lord Etr
			(display_message, "str_searching_for_rumors_for_s9"),
		(try_end),

		(assign, "$romantic_rival", -1),
		(assign, ":last_lady_noted", 0),
		(try_for_range, ":log_entry", 0, "$num_log_entries"),
			(troop_slot_eq, "trp_log_array_actor", ":log_entry", "$lady_selected"),


			#Presumably possible for some events involving a lady to not involve troops
			(troop_get_slot, ":suitor", "trp_log_array_troop_object", ":log_entry"),
			(str_clear, s11),
			(try_begin),
				(is_between, ":suitor", 0, kingdom_ladies_end),
				(str_store_troop_name, s11, ":suitor"),
			(try_end),

			(troop_get_slot, ":third_party", "trp_log_array_center_object", ":log_entry"),
			(str_clear, s10),
			(try_begin),
				(is_between, ":third_party", 0, kingdom_ladies_end),
				(str_store_troop_name, s10, ":third_party"),
			(try_end),

			(assign, ":lady", "$lady_selected"),

			(try_begin),
				(troop_slot_eq, "trp_log_array_entry_type",  ":log_entry", logent_lady_favors_suitor),
				(str_store_string, s12, "str_they_say_that_s9_has_shown_favor_to_s11_perhaps_it_will_not_be_long_until_they_are_betrothed__if_her_family_permits"),
				(assign, ":last_lady_noted", ":lady"),
				(assign, ":last_suitor_noted", ":suitor"),

				(try_begin),
					(troop_slot_eq, ":lady", slot_troop_courtship_state, 2),
					(this_or_next|troop_slot_eq, ":suitor", slot_troop_love_interest_1, ":lady"),
					(this_or_next|troop_slot_eq, ":suitor", slot_troop_love_interest_2, ":lady"),
						(troop_slot_eq, ":suitor", slot_troop_love_interest_3, ":lady"),

					(assign, "$romantic_rival", ":suitor"),
				(try_end),
			(else_try),
				(troop_slot_eq, "trp_log_array_entry_type",  ":log_entry", logent_lady_betrothed_to_suitor_by_family),
				(str_store_string, s12, "str_they_say_that_s9_has_been_forced_by_her_family_into_betrothal_with_s11"),
				(assign, ":last_lady_noted", ":lady"),
				(assign, ":last_suitor_noted", ":suitor"),

				(try_begin),
					(troop_slot_eq, ":lady", slot_troop_courtship_state, 2),
					(assign, "$romantic_rival", ":suitor"),
				(try_end),
			(else_try),
				(troop_slot_eq, "trp_log_array_entry_type",  ":log_entry", logent_lady_betrothed_to_suitor_by_choice),
				(str_store_string, s12, "str_they_say_that_s9_has_agreed_to_s11s_suit_and_the_two_are_now_betrothed"),
				(assign, ":last_lady_noted", ":lady"),
				(assign, ":last_suitor_noted", ":suitor"),

				(try_begin),
					(troop_slot_eq, ":lady", slot_troop_courtship_state, 2),
					(this_or_next|troop_slot_eq, ":suitor", slot_troop_love_interest_1, ":lady"),
					(this_or_next|troop_slot_eq, ":suitor", slot_troop_love_interest_2, ":lady"),
						(troop_slot_eq, ":suitor", slot_troop_love_interest_3, ":lady"),


					(assign, "$romantic_rival", ":suitor"),
				(try_end),

			(else_try),
				(troop_slot_eq, "trp_log_array_entry_type",  ":log_entry", logent_lady_betrothed_to_suitor_by_pressure),
				(str_store_string, s12, "str_they_say_that_s9_under_pressure_from_her_family_has_agreed_to_betrothal_with_s11"),
				(assign, ":last_lady_noted", ":lady"),
				(assign, ":last_suitor_noted", ":suitor"),

				(try_begin),
					(troop_slot_eq, ":lady", slot_troop_courtship_state, 2),
					(this_or_next|troop_slot_eq, ":suitor", slot_troop_love_interest_1, ":lady"),
					(this_or_next|troop_slot_eq, ":suitor", slot_troop_love_interest_2, ":lady"),
						(troop_slot_eq, ":suitor", slot_troop_love_interest_3, ":lady"),

					(assign, "$romantic_rival", ":suitor"),
				(try_end),

			(else_try),

				(troop_slot_eq, "trp_log_array_entry_type",  ":log_entry", logent_lady_rejects_suitor),
				(str_store_string, s12, "str_they_say_that_s9_has_refused_s11s_suit"),
				(assign, ":last_lady_noted", ":lady"),
				(assign, ":last_suitor_noted", ":suitor"),

			(else_try),

				(troop_slot_eq, "trp_log_array_entry_type",  ":log_entry", logent_lady_rejected_by_suitor),
				(str_store_string, s12, "str_they_say_that_s11_has_tired_of_pursuing_s9"),
				(assign, ":last_lady_noted", ":lady"),
				(assign, ":last_suitor_noted", ":suitor"),


			(else_try),
				(troop_slot_eq, "trp_log_array_entry_type",  ":log_entry", logent_lady_father_rejects_suitor),
				(str_store_string, s12, "str_they_say_that_s9s_family_has_forced_her_to_renounce_s11_whom_she_much_loved"),
				(assign, ":last_lady_noted", ":lady"),
				(assign, ":last_suitor_noted", ":suitor"),

			(else_try),
				(troop_slot_eq, "trp_log_array_entry_type",  ":log_entry", logent_lady_elopes_with_lord),
				(str_store_string, s12, "str_they_say_that_s9_has_run_away_with_s11_causing_her_family_much_grievance"),
				(assign, ":last_lady_noted", ":lady"),
				(assign, ":last_suitor_noted", ":suitor"),

			(else_try),
				(troop_slot_eq, "trp_log_array_entry_type",  ":log_entry", logent_lady_marries_lord),
				(str_store_string, s12, "str_they_say_that_s9_and_s11_have_wed"),
				(assign, ":last_lady_noted", ":lady"),
				(assign, ":last_suitor_noted", ":suitor"),
			(else_try),
				(troop_get_slot, ":suitor", ":lady", slot_lady_last_suitor),
				(is_between, ":suitor", active_npcs_begin, active_npcs_end),
				(str_store_troop_name, s11, ":suitor"),

				(str_store_string, s12, "str_they_say_that_s9_was_recently_visited_by_s11_who_knows_where_that_might_lead"),
				(assign, ":last_lady_noted", ":lady"),
				(assign, ":last_suitor_noted", ":suitor"),
				(try_begin),
					(troop_slot_eq, ":lady", slot_troop_courtship_state, 2),
					(this_or_next|troop_slot_eq, ":suitor", slot_troop_love_interest_1, ":lady"),
					(this_or_next|troop_slot_eq, ":suitor", slot_troop_love_interest_2, ":lady"),
						(troop_slot_eq, ":suitor", slot_troop_love_interest_3, ":lady"),

					(assign, "$romantic_rival", ":suitor"),
				(try_end),
			(try_end),

		(try_end),

		(try_begin),
			(neq, ":last_suitor_noted", "$romantic_rival"),
			(assign, "$romantic_rival", -1),
		(try_end),

		(try_begin),
			(gt, ":last_lady_noted", 0),
			(call_script, "script_add_rumor_string_to_troop_notes", ":last_lady_noted", ":last_suitor_noted", s12),
		(try_end),
	(else_try),
		(eq, "$lady_selected", -1),
		(str_store_string, s12, "str_there_is_not_much_to_tell_but_it_is_still_early_in_the_season"),
	(else_try),
		(assign, reg4, "$lady_selected"),
		(str_store_troop_name, s9, "$lady_selected"),
		(str_store_string, s12, "str_error_lady_selected_=_s9"),
	(try_end),
   ],
   "{s12}.",
   "lady_pretalk", []],

#Info 2: If a lord, show location
  [anyone,"dplmc_lady_info_relative_2",
   [
     (call_script, "script_update_troop_location_notes", "$lord_selected", 1),
     (call_script, "script_get_information_about_troops_position", "$lord_selected", 0),
     ],
   "{s1}", "lady_pretalk",[]],

#Ask kingdom ladies about feasts.
    [anyone|plyr, "lady_talk", [(neg|eq, "$g_talk_troop_met", 0),],
   "Do you know of any ongoing feasts?",
   "dplmc_lady_feasts", []],

  [anyone, "dplmc_lady_feasts", [

  (str_clear, s12),
  (assign, ":feast_found", 0),
  (try_for_range, ":kingdom", kingdoms_begin, kingdoms_end),
	##zerilius changes begin
	##Bug Fix since they tell about feasts of eliminated kingdoms also.
	(faction_slot_eq, ":kingdom", slot_faction_state, sfs_active),
	##zerilius changes end
	(faction_slot_eq, ":kingdom", slot_faction_ai_state, sfai_feast),
    (assign, ":feast_found", 1),

	(faction_get_slot, ":feast_venue", ":kingdom", slot_faction_ai_object),
	(str_store_party_name, s4, ":feast_venue"),
	(str_store_faction_name, s3, ":kingdom"),

	(store_current_hours, ":hour"),
	(store_sub, ":hours_since_start", ":hour", 72),
	(faction_get_slot, ":feast_time", ":kingdom", slot_faction_last_feast_start_time),
	(val_add, ":hours_since_start", ":feast_time"),

	(try_begin),
		(gt, ":hours_since_start", 48),
		(str_store_string, s12, "str_s12there_is_a_feast_of_the_s3_in_progress_at_s4_but_it_has_been_going_on_for_a_couple_of_days_and_is_about_to_end_"),
	(else_try),
		(gt, ":hours_since_start", 24),
		(str_store_string, s12, "str_s12there_is_a_feast_of_the_s3_in_progress_at_s4_which_should_last_for_at_least_another_day_"),
	(else_try),
		(str_store_string, s12, "str_s12there_is_a_feast_of_the_s3_in_progress_at_s4_which_has_only_just_begun_"),
	(try_end),
  (try_end),

  (try_begin),
    (eq, ":feast_found", 0),
	(str_store_string, s12, "str_not_at_this_time_no"),
  (else_try),
	(str_store_string, s12, "str_s12the_great_lords_bring_their_daughters_and_sisters_to_these_occasions_to_see_and_be_seen_so_they_represent_an_excellent_opportunity_to_make_a_ladys_acquaintance"),
  (try_end),

  ],
   "{s12}",
"lady_pretalk", []],
##diplomacy end+

  [anyone|plyr,"lady_talk",
   ##diplomacy start+
   #[],#Don't show this option after the first meeting.  There's a separate "ask about relatives instead".
   [(eq, "$g_talk_troop_met", 0),
   ],
   #change "my lady" to "{reg0?my lady:good sir}"
   "May I have the honor of knowing more about you, {reg65?my lady:good sir}?", "lady_relations",[]],
   ##diplomacy end+

  [anyone,"lady_relations",
   [
    (str_store_string, s12, "str_i_am"),
    (assign, ":relation_found", 0),
    (assign, ":in_castle_of_relative", 0),

    (try_for_range, ":lord", active_npcs_begin, kingdom_ladies_end), #use this as the basis for "troop_describe_relation_with_troop"
        (call_script, "script_troop_get_family_relation_to_troop", "$g_talk_troop", ":lord"), #The normal order is reversed, because the lady is describing herself
        (this_or_next|gt, reg0, 5),
            (party_slot_eq, "$g_encountered_party", slot_town_lord, ":lord"),
        (gt, reg0, 0),

        (str_store_troop_name, s14, ":lord"),
        (try_begin),
            (eq, ":relation_found", 1),
            (str_store_string, s12, "str_s12_comma"), #SB : comma delimiter
        (try_end),
        (str_store_string, s12, "str_s12_s11_to_s14"),
        (assign, ":relation_found", 1),

        (try_begin),
            (party_slot_eq, "$g_encountered_party", slot_town_lord, ":lord"),
            (assign, ":in_castle_of_relative", 1),
        (try_end),
    (try_end),

    (try_begin),
        (eq, ":in_castle_of_relative", 1),
        (str_store_string, s12, "str_s12_period"), #SB : period terminator
    (else_try),
        (eq, ":in_castle_of_relative", 0),
        (faction_slot_eq, "$g_talk_troop_faction", slot_faction_ai_state, sfai_feast),
        (faction_slot_eq, "$g_talk_troop_faction", slot_faction_ai_object, "$g_encountered_party"),
        (str_store_string, s12, "str_s12_i_am_here_for_the_feast"),
    (else_try),
        (str_store_string, s12, "str_s12_period"),  #SB : period terminator
    (try_end),

   ],
   "{s12}", "lady_pretalk",[
   #diplomacy start+
       (assign, "$g_talk_troop_met", 1),
       ]],
   ##diplomacy end+

  [anyone|plyr,"lady_talk",
   [
    ##diplomacy start+
    #(troop_get_type, ":is_female", "trp_player"),#dplmc+ removed
	#(eq, ":is_female", 0), #dplmc+ removed

	(this_or_next|neq, reg65, "$character_gender"),
		(ge, "$g_disable_condescending_comments", 2),
	##diplomacy end+
    (troop_slot_eq, "$g_talk_troop", slot_troop_met, 1),
	(troop_slot_eq, "$g_talk_troop", slot_troop_spouse, -1),
    (neg|troop_slot_ge, "trp_player", slot_troop_spouse, active_npcs_begin),

	(neq, "$lady_flirtation_location", "$g_encountered_party"),
	##diplomacy start+
	#Ensure gender of addressed is correct (unnecessary in Native, but may be in mods)
	],
   "My {reg65?lady:lord}, I would like to profess myself your most ardent admirer", "lady_profess_admiration",#Changed "lady" to "{reg0?lady:lord}"
   ##diplomacy end+
	[
	(call_script, "script_troop_get_romantic_chemistry_with_troop", "$g_talk_troop", "trp_player"),
	(assign, ":reaction_change", reg0),

#	(try_begin),
#		(gt, "$g_player_tournament_placement", 3),
#		(val_sub, "$g_player_tournament_placement", 3),
#		(val_mul, "$g_player_tournament_placement", 4), #Twice normal, but is divided by two
#	(else_try),
#		(assign, "$g_player_tournament_placement", 0),
#	(try_end),

#	(try_begin),
#		(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_conventional),
#		(val_mul, "$g_player_tournament_placement", 2),
#	(else_try),
#		(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_moralist),
#		(val_div, "$g_player_tournament_placement", 2),
#	(try_end),

#	(val_add, ":reaction_change", "$g_player_tournament_placement"),
#	(assign, "$g_player_tournament_placement", 0),

	(val_div, ":reaction_change", 2),
	(val_max, ":reaction_change", -2),

	(call_script, "script_troop_change_relation_with_troop", "$g_talk_troop", "trp_player", ":reaction_change"),
	(assign, "$g_time_to_spare", 0),

	]],


  [anyone|plyr,"lady_talk",
   [
    ##diplomacy start+
    #(troop_get_type, ":is_female", "trp_player"),
	(this_or_next|ge, "$g_disable_condescending_comments", 2),#dplmc+ added
	(neq, reg65, "$character_gender"),
	(gt, "$g_player_tournament_placement", 3),

    #Allow players to dedicate tournament victories even after marriage, though it may irritate the player's spouse
	#(neg|troop_slot_ge, "trp_player", slot_troop_spouse, active_npcs_begin),
	],
	#Ensure gender of addressed is correct (unnecessary in Native, but may be in mods)
   "My {reg65?lady:lord}, I would like to dedicate my successes in this recent tournament to you", "lady_tournament_dedication_reaction",#Changed "lady" to "{reg0?lady:lord}"
	[
	##diplomacy end+

	(try_begin),
		(gt, "$g_player_tournament_placement", 3),
		(val_sub, "$g_player_tournament_placement", 3),
		(val_mul, "$g_player_tournament_placement", 2),
	(else_try),
		(assign, "$g_player_tournament_placement", 0),
	(try_end),

    ##diplomacy start+
    #If the player has a spouse, a dedication to someone else may irritate them.
    (try_begin),
        (neg|troop_slot_eq, "trp_player", slot_troop_spouse, -1),

		(try_for_range, ":spouse", heroes_begin, heroes_end),#<- Iterate because of the possibility of polygamy
			(neg|troop_slot_eq, ":spouse", slot_troop_occupation, dplmc_slto_dead),
			(neq, ":spouse", "$g_talk_troop"),
			(this_or_next|troop_slot_eq, "trp_player", slot_troop_spouse, ":spouse"),
			(this_or_next|troop_slot_eq, ":spouse", slot_troop_spouse, "trp_player"),
				(troop_slot_eq, "trp_player", slot_troop_betrothed, ":spouse"),
			(call_script, "script_troop_change_relation_with_troop", ":spouse", "trp_player", -1),
		(try_end),
    (try_end),
    ##diplomacy end+

	(try_begin),
		(troop_slot_eq, "$g_talk_troop", slot_lady_used_tournament, 1),
		(val_div, "$g_player_tournament_placement", 3),
		(str_store_string, s9, "str_another_tournament_dedication_oh_i_suppose_it_is_always_flattering"),
	(else_try),
		(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_conventional),
		(val_mul, "$g_player_tournament_placement", 2),
		(str_store_string, s9, "str_do_you_why_what_a_most_gallant_thing_to_say"),
	(else_try),
		(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_moralist),
		(val_div, "$g_player_tournament_placement", 2),
		(str_store_string, s9, "str_hmm_i_cannot_say_that_i_altogether_approve_of_such_frivolity_but_i_must_confess_myself_a_bit_flattered"),
	(else_try),
		(str_store_string, s9, "str_why_thank_you_you_are_most_kind_to_do_so"),
	(try_end),

	(call_script, "script_troop_change_relation_with_troop", "$g_talk_troop", "trp_player", "$g_player_tournament_placement"),
	(assign, "$g_player_tournament_placement", 0),
	(troop_set_slot, "$g_talk_troop", slot_lady_used_tournament, 1),
	]],

  [anyone,"lady_tournament_dedication_reaction", [],
   "{s9}", "lady_pretalk",
   []],



  [anyone,"lady_profess_admiration", [
	(call_script, "script_troop_get_relation_with_troop", "$g_talk_troop", "trp_player"),
    (gt, reg0, 0),

	(try_begin),
		(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_moralist),
		(str_store_string, s11, "str_you_are_most_courteous_and_courtesy_is_a_fine_virtue_"),
	(else_try),
		(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_ambitious),
		(str_store_string, s11, "str_hmm_youre_a_bold_one_but_i_like_that_"),
	(else_try),
		(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_adventurous),
		(str_store_string, s11, "str_ah_well_they_all_say_that_but_no_matter_a_compliment_well_delivered_is_at_least_a_good_start_"),
	(else_try),
		(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_otherworldly),
		(str_store_string, s11, "str_oh_do_you_mean_that_such_a_kind_thing_to_say"),
	(else_try),
		(str_store_string, s11, "str_you_are_a_most_gallant_young_man_"),
	(try_end),

  ],
   "{s11}I would like it very much if we could see more of each other.", "close_window",
   [(troop_set_slot, "$g_talk_troop", slot_troop_courtship_state, 2),
	(assign, "$lady_flirtation_location", "$g_encountered_party"),
   ]],

  [anyone,"lady_profess_admiration", [
  ],
   "Ah... You are too kind... My, the hour is getting rather late, isn't it? I really must be going.", "lady_pretalk",
   [(troop_set_slot, "$g_talk_troop", slot_troop_courtship_state, 2),
   ]],


  [anyone|plyr,"lady_talk",
   [
	 (troop_slot_eq, "$g_talk_troop", slot_troop_courtship_state, 2),
	 (eq, "$g_time_to_spare", 1),
	 (eq, "$talk_context", tc_courtship),
     ],
	 ##diplomacy start+ "my lady" -> "my {reg65?lady:lord}"
   "Do you like poetry, my {reg65?lady:lord}?", "lady_recite_poetry",[
   ##diplomacy end+
	 (assign, "$g_time_to_spare", 0),
   ]],

  [anyone,"lady_recite_poetry", [
  ],
   "That would depend on the poem. Did you intend to recite a verse?", "lady_recite_poetry",
   []],


  [anyone|plyr,"lady_recite_poetry",
   [
	 (gt, "$tragic_poem_recitations", 0),
	 (troop_slot_eq, "$g_talk_troop", slot_lady_courtship_tragic_recited, 0),

     ],
   "The wind that blows the dry steppe dust...", "lady_recite_poetry_response",[
   (assign, "$poem_selected", courtship_poem_tragic),
   (troop_set_slot, "$g_talk_troop", slot_lady_courtship_tragic_recited, 1),

   ]],

  [anyone|plyr,"lady_recite_poetry",
   [
	 (gt, "$comic_poem_recitations", 0),
	 (troop_slot_eq, "$g_talk_troop", slot_lady_courtship_comic_recited, 0),

     ],
   "All the silks of Veluca/All the furs of Khudan...", "lady_recite_poetry_response",[
   (assign, "$poem_selected", courtship_poem_comic),
   (troop_set_slot, "$g_talk_troop", slot_lady_courtship_comic_recited, 1),

   ]],

  [anyone|plyr,"lady_recite_poetry",
   [
	(gt, "$mystic_poem_recitations", 0),
	(troop_slot_eq, "$g_talk_troop", slot_lady_courtship_mystic_recited, 0),

    ],
   "You are the first and the last/the outer and the inner...", "lady_recite_poetry_response",[
   (assign, "$poem_selected", courtship_poem_mystic),
   (troop_set_slot, "$g_talk_troop", slot_lady_courtship_mystic_recited, 1),

   ]],

  [anyone|plyr,"lady_recite_poetry",
   [
	(gt, "$heroic_poem_recitations", 0),
	(troop_slot_eq, "$g_talk_troop", slot_lady_courtship_heroic_recited, 0),
     ],
   "A light pierced the gloom over Wercheg cliffs...", "lady_recite_poetry_response",[
    (assign, "$poem_selected", courtship_poem_heroic),
	(troop_set_slot, "$g_talk_troop", slot_lady_courtship_heroic_recited, 1),

   ]],

  [anyone|plyr,"lady_recite_poetry",
   [
	(gt, "$allegoric_poem_recitations", 0),
	(troop_slot_eq, "$g_talk_troop", slot_lady_courtship_allegoric_recited, 0),

     ],
   "I deflected her skeptical questioning darts/with armor made of purest devotion...", "lady_recite_poetry_response",[
    (assign, "$poem_selected", courtship_poem_allegoric),
	(troop_set_slot, "$g_talk_troop", slot_lady_courtship_allegoric_recited, 1),
   ]],


  [anyone|plyr,"lady_recite_poetry",
   [],"Actually, I can't think of any that I would care to recite...", "lady_pretalk",[]],

   [anyone,"lady_recite_poetry_response",
   [
    (call_script, "script_courtship_poem_reactions", "$g_talk_troop", "$poem_selected"),
   ],
   "{s11}", "lady_private_conversation_end",[
    (assign, ":reaction", reg0),
	(call_script, "script_troop_change_relation_with_troop", "$g_talk_troop", "trp_player", ":reaction"),
    (call_script, "script_courtship_poem_reactions", "$g_talk_troop", "$poem_selected"), #this needs to be twice, as the above resets s11
   ]],

   [anyone,"lady_private_conversation_end",
	[
	(str_clear, s11),
	(try_begin),
		(call_script, "script_troop_get_relation_with_troop", "$g_talk_troop", "trp_player"),
		(gt, reg0, 0),
		(str_store_string, s11, "str__do_come_and_see_me_again_soon"),
	(try_end),
	],
	"Time is passing quickly, and we cannot linger here too long.", "lady_pretalk",
	[
	(assign, "$g_time_to_spare", 0),
	]],


  [anyone|plyr,"lady_talk",
    [
	(neg|check_quest_active, "qst_formal_marriage_proposal"),
	(neg|troop_slot_ge, "trp_player", slot_troop_betrothed, active_npcs_begin),
	(neg|troop_slot_ge, "trp_player", slot_troop_spouse, active_npcs_begin),


	(troop_slot_eq, "$g_talk_troop", slot_troop_courtship_state, 2),
	(eq, "$talk_context", tc_courtship),
	##diplomacy start+ Allow the possibility of male versions of the lines
    ],
	#replace "my lady" with "{reg0?my lady:kind sir}"
    "Do you think that we may have a future together, {reg65?my lady:kind sir}?", "lady_marriage_discussion",[
	##diplomacy end+
    ]],


  [anyone,"lady_marriage_discussion",
    [
	(assign, "$romantic_rival", -1),
	(try_for_range, ":possible_rival", lords_begin, lords_end),
		(this_or_next|troop_slot_eq, ":possible_rival", slot_troop_love_interest_1, "$g_talk_troop"),
		(this_or_next|troop_slot_eq, ":possible_rival", slot_troop_love_interest_2, "$g_talk_troop"),
			(troop_slot_eq, ":possible_rival", slot_troop_love_interest_2, "$g_talk_troop"),
		(call_script, "script_troop_get_relation_with_troop", "$g_talk_troop", ":possible_rival"),

		(try_begin),
			(eq, "$cheat_mode", 1),
			(str_store_troop_name, s4, ":possible_rival"),
			(display_message, "str_rival_found_s4_reg0_relation"),
		(try_end),
		(gt, reg0, "$g_talk_troop_relation"),
		(assign, "$romantic_rival", ":possible_rival"),
	(try_end),
	(gt, "$romantic_rival", -1),
	##diplomacy start+ Give gender equivalents
    ],#"Sir" to "{Sir/Madame}", and "gentlemen" to "{gentlemen/suitors}"
    "{Sir/Madame} -- as you may know, I have been entertaining offers from a number of {gentlemen/suitors} such as yourself. I am not yet at a stage where I can commit to any of them.", "lady_other_suitor",[
    ]],
	##diplomacy end+

  [anyone,"lady_marriage_discussion",
    [
    (troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_ambitious),
	(neg|troop_slot_ge, "trp_player", slot_troop_renown, 350),
	],
    "It is good to hear that you are thinking seriously about the future. However, I would like to see you rise a little further in the world before I am ready to commit to marry you.", "lady_proposal_refused",[
    ]],

  [anyone,"lady_marriage_discussion",
    [
    (troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_moralist),
	(lt, "$player_honor", 10)
	],
    "It is good to hear that your intentions are honorable. However, I have resolved only to marry a man of the strongest moral fiber. I would like you to prove yourself more in that regard.", "lady_proposal_refused",[
    ]],


  [anyone,"lady_marriage_discussion",
    [
	(lt, "$g_talk_troop_relation", 20),
    ],
    "Sir -- it is comforting to hear that your intentions towards me are honorable. But perhaps we should take the time to get to allow our affections for each other to grow a little stronger, before making any such decision.", "lady_proposal_refused",[
    ]],



  [anyone,"lady_marriage_discussion",
    [
	(call_script, "script_get_kingdom_lady_social_determinants", "$g_talk_troop"),
	(assign, ":guardian", reg0),
	(troop_slot_eq, ":guardian", slot_lord_granted_courtship_permission, -1),
	(str_store_troop_name, s4, reg0),
	(call_script, "script_troop_get_family_relation_to_troop", ":guardian", "$g_talk_troop"),
	],
    "Oh {playername}, how happy that would make me! But my {s11} {s4} would never allow it... Perhaps it is best that we part...", "lady_betrothed", []],

  [anyone,"lady_marriage_discussion",
    [
	(call_script, "script_get_kingdom_lady_social_determinants", "$g_talk_troop"),
	(assign, ":guardian", reg0),
	(call_script, "script_troop_get_family_relation_to_troop", ":guardian", "$g_talk_troop"),
	(str_store_troop_name, s4, ":guardian"),

	],
    "Oh {playername}, how happy that would make me! Go ask my {s11} {s4} for permission!", "close_window",[
	(call_script, "script_get_kingdom_lady_social_determinants", "$g_talk_troop"),
	(assign, ":guardian", reg0),
	(str_store_troop_name, s12, ":guardian"),
	(str_store_troop_name, s15, "$g_talk_troop"),
    (setup_quest_text, "qst_formal_marriage_proposal"),
    (str_store_string, s2, "str_you_intend_to_ask_s12_for_permission_to_marry_s15"),

    (quest_set_slot, "qst_formal_marriage_proposal", slot_quest_target_troop, ":guardian"),
    (quest_set_slot, "qst_formal_marriage_proposal", slot_quest_expiration_days, 30),
    (quest_set_slot, "qst_formal_marriage_proposal", slot_quest_current_state, 0),
	(call_script, "script_start_quest", "qst_formal_marriage_proposal", "$g_talk_troop"),
	(quest_set_slot, "qst_formal_marriage_proposal", slot_quest_giver_troop, "$g_talk_troop"),

	#Repeated to ensure strings work correctly
	(call_script, "script_troop_get_family_relation_to_troop", ":guardian", "$g_talk_troop"),
	(str_store_troop_name, s4, ":guardian"),
    ]],

  [anyone|plyr,"lady_proposal_refused",
    [
	(is_between, "$g_talk_troop_relation", 12, 20),
    (this_or_next|neg|troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_ambitious),
		(troop_slot_ge, "trp_player", slot_troop_renown, 350),
    (this_or_next|neg|troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_moralist),
		(ge, "$player_honor", 10),
	],
    "Perhaps I can persuade you to delay no further.", "lady_proposal_refused_persuade_check",[
    ]],

  [anyone,"lady_proposal_refused_persuade_check",
    [
	],
    "What do you have to say?", "lady_proposal_refused_persuade_player_response",[

	(assign, reg4, 20),
	(call_script, "script_troop_get_relation_with_troop", "$g_talk_troop", "trp_player"),
	(assign, ":cur_relation", reg0),
	(assign, reg5, ":cur_relation"),
	(assign, reg9, 1),
    (store_skill_level, ":persuasion_level", "skl_persuasion", "trp_player"),
	(store_sub, ":difference", 20, ":cur_relation"),
	(val_mul, ":persuasion_level", 2),
	(try_begin),
		(gt, ":difference", ":persuasion_level"),
		(assign, "$g_persuasion_failure_chance", 100),
	(else_try),
		(store_mul, "$g_persuasion_failure_chance", ":difference", 100),
		(val_div, "$g_persuasion_failure_chance", ":persuasion_level"),
	(try_end),
	(assign, reg8, "$g_persuasion_failure_chance"),
	(store_sub, reg7, 100, "$g_persuasion_failure_chance"),
	(dialog_box, "str_persuasion_opportunity"),

    ]],

  [anyone|plyr,"lady_proposal_refused_persuade_player_response",
    [
	##diplomacy start+ Allow the possibility of male versions of the lines
	], #Replace "lady" with "{reg0?lady:lord}"
    "Love is as a rose, my {reg65?lady:lord}. Left unplucked, it may wither.", "lady_proposal_refused_persuade_result",[
    ]],
	##diplomacy end+

  [anyone|plyr,"lady_proposal_refused_persuade_player_response",
    [],
    "Oh, never mind.", "lady_pretalk",
    []],


  [anyone,"lady_proposal_refused_persuade_result",
    [
	(store_random_in_range, ":random", 0, 100),
	(lt, ":random", "$g_persuasion_failure_chance"),
	],##diplomacy start+ change "sir" to "{sir/madame}"
    "Enough, {sir/madame}! I shall not be rushed into marriage, with you or with anyone else! You have made me very cross. Please, leave me alone for a while. I shall let you know when I am ready to speak to you again.", "close_window", [##diplomacy end+
	(call_script, "script_troop_change_relation_with_troop", "$g_talk_troop", "trp_player", -1),
	(jump_to_menu, "mnu_town"),
	(finish_mission),
	]],


  [anyone,"lady_proposal_refused_persuade_result",
    [
	(call_script, "script_get_kingdom_lady_social_determinants", "$g_talk_troop"),
	(assign, ":guardian", reg0),
	(troop_slot_eq, ":guardian", slot_lord_granted_courtship_permission, -1),
	(str_store_troop_name, s4, reg0),
	(call_script, "script_troop_get_family_relation_to_troop", ":guardian", "$g_talk_troop"),
	##diplomacy start+ Use correct pronouns for female guardians
	],#Change "his" to "{reg4?her:his}"
    "Oh {playername}, I could never allow that to happen! Oh, if only we could be wed! But my {s11} {s4} would never give {reg4?her:his} permission... Perhaps it is best that we part...", "lady_betrothed", [
	##diplomacy end+
	(call_script, "script_troop_change_relation_with_troop", "$g_talk_troop", "trp_player", 5),
	]],

  [anyone,"lady_proposal_refused_persuade_result",
    [
	(call_script, "script_get_kingdom_lady_social_determinants", "$g_talk_troop"),
	(assign, ":guardian", reg0),
	(call_script, "script_troop_get_family_relation_to_troop", ":guardian", "$g_talk_troop"),
	(str_store_troop_name, s4, ":guardian"),
	##diplomacy start+ Use correct pronouns for female guardians
	],#Change "his" to "{reg4?her:his}"
    "Oh {playername}, I could never allow that to happen! Go ask my {s11} {s4} {reg4?her:his} permission for us to be wed!", "close_window",[
	##diplomacy end+

	(call_script, "script_troop_change_relation_with_troop", "$g_talk_troop", "trp_player", 5),
	(call_script, "script_get_kingdom_lady_social_determinants", "$g_talk_troop"),
	(assign, ":guardian", reg0),
	(str_store_troop_name, s12, ":guardian"),
	(str_store_troop_name, s15, "$g_talk_troop"),
    (setup_quest_text, "qst_formal_marriage_proposal"),
    (str_store_string, s2, "str_you_intend_to_ask_s12_for_permission_to_marry_s15"),

    (quest_set_slot, "qst_formal_marriage_proposal", slot_quest_target_troop, ":guardian"),
    (quest_set_slot, "qst_formal_marriage_proposal", slot_quest_expiration_days, 30),
    (quest_set_slot, "qst_formal_marriage_proposal", slot_quest_current_state, 0),
	(call_script, "script_start_quest", "qst_formal_marriage_proposal", "$g_talk_troop"),
	(quest_set_slot, "qst_formal_marriage_proposal", slot_quest_giver_troop, "$g_talk_troop"),
    ]],

  [anyone|plyr,"lady_proposal_refused",
    [],
    "Very well -- I shall continue to strive to be worthy of your esteem!", "close_window",[
    ]],

  [anyone|plyr,"lady_proposal_refused",
    [
	##diplomacy start+
	#Enable this if "enhanced prejudice" mode is active.
    (this_or_next|ge, "$cheat_mode", 1),
	(lt, "$g_disable_condescending_comments", 0),
	##(eq, 1, 0),
	##diplomacy end+
	(neg|check_quest_active, "qst_formal_marriage_proposal"),
	],
    "I am tired of these games! I will speak to your family about arranging a wedding immediately..", "lady_player_threatens_compel",[
    ]],

  [anyone,"lady_player_threatens_compel",
    [],
    "What? Do you mean that?", "lady_player_threatens_compel_2",[
    ]],

  [anyone|plyr,"lady_player_threatens_compel_2",
    [],
    "No, of couse not. Please forgive my burst of temper", "lady_private_conversation_end",[
    ]],

  [anyone|plyr,"lady_player_threatens_compel_2",
    [],
    "Yes -- you clearly do not know what is in your best interests.", "close_window",[
	(call_script, "script_get_kingdom_lady_social_determinants", "$g_talk_troop"),
	(assign, ":guardian", reg0),
	(str_store_troop_name, s10, "$g_talk_troop"),
	(str_store_troop_name, s12, ":guardian"),
    (setup_quest_text, "qst_formal_marriage_proposal"),
    (str_store_string, s2, "str_you_intend_to_ask_s12_to_pressure_s10_to_marry_you"),

    (quest_set_slot, "qst_formal_marriage_proposal", slot_quest_target_troop, ":guardian"),
    (quest_set_slot, "qst_formal_marriage_proposal", slot_quest_expiration_days, 30),
    (quest_set_slot, "qst_formal_marriage_proposal", slot_quest_current_state, 0),
	(call_script, "script_start_quest", "qst_formal_marriage_proposal", "$g_talk_troop"),
	(quest_set_slot, "qst_formal_marriage_proposal", slot_quest_giver_troop, "$g_talk_troop"),
    ]],



	#rival suitor sequence
  [anyone|plyr,"lady_other_suitor",
    [],
    ##diplomacy start+
    #change "my lady" to "my {reg65?lady:lord}"
	"It grieves me to hear that, my {reg65?lady:lord}, but such things must be", "lady_pretalk",
	##diplomacy end+
	[]],

  [anyone|plyr,"lady_other_suitor",
	[],
	##diplomacy start+ his to {his/her}
	"Who is the miscreant! Tell me {his/her} name!", "lady_other_suitor_challenge",
	##diplomacy end+
	[]],

  [anyone|plyr,"lady_other_suitor", #similar to other
    [
	##diplomacy start+
	#Enable this if "enhanced prejudice" mode is active.
	(lt, "$g_disable_condescending_comments", 0),
	#(eq, 1, 0),
	##diplomacy end+
	],
    "I am tired of these games! I will demand that your family compel you to marry me..", "lady_player_threatens_compel",[
    ]],

  [anyone,"lady_other_suitor_challenge",
	[
	  (check_quest_active,"qst_duel_courtship_rival"),
      (call_script, "script_troop_get_relation_with_troop", "$g_talk_troop", "$romantic_rival"),
	  (lt, reg0, 0),
	  ##diplomacy start+ Add support for female rival
	  (call_script, "script_dplmc_store_troop_is_female",  "$romantic_rival"),
	],#He -> {reg0?She:He}, man -> {reg0?woman:man}
	"I would be so grateful! But from what I understand, you already have a duel on your hands. {reg0?She:He} is not honor-bound to fight you, if you are committed to another combat. Please, conclude your other business in a hurry, to rescue me from that {reg0?woman:man}'s attentions!.", "lady_pretalk",
	##diplomacy end+
	[]],

  [anyone,"lady_other_suitor_challenge",
	[
	(check_quest_active,"qst_duel_courtship_rival"),
	##diplomacy start+
	(assign, reg0, 1),
	(try_begin),
		(eq, reg65, "$character_gender"),
		(assign, reg0, 0),
	(try_end),
	],#Next line change "You men" to "{reg0?You {men/women}:People}"
	"Ah! Such talk. But from what I hear, you already have a duel on your hands. Finish one before you start another! Sigh... {reg0?You {men/women}:People} can be so silly...", "lady_pretalk",
	##diplomacy end+
	[]],

  [anyone,"lady_other_suitor_challenge",
	[
    (call_script, "script_troop_get_relation_with_troop", "$g_talk_troop", "$romantic_rival"),
	(lt, reg0, 0),
	(str_store_troop_name, s5, "$romantic_rival"),
	##diplomacy start+ Add support for female rival
    (call_script, "script_dplmc_store_troop_is_female",  "$romantic_rival"),
	],#man -> {reg0?woman:man}
	"It is {s5}. Please, rescue me from that {reg0?woman:man}'s attentions!", "lady_other_suitor_challenge_confirm",
	##diplomacy end+
	[]],



  [anyone,"lady_other_suitor_challenge",
	[
	(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_ambitious),
	(str_store_troop_name, s5, "$romantic_rival"),
	],
	"Will you now? This should be interesting. Very well. Your rival is {s5}. Let us see which of you has the greater mettle.", "lady_other_suitor_challenge_confirm",
	[
	(assign, "$quarrel_penalty", 0),
	]],

  [anyone,"lady_other_suitor_challenge",
	[
	(troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_conventional),
	(str_store_troop_name, s5, "$romantic_rival"),
	],##diplomacy start+ change "men" to "{men/women}"
	"Oh, fie! I wish that this were not a matter of honor, so I could refuse such a request. But alas, I feel compelled to tell you that your rival is {s5}. I wish that heaven had not granted me such a fair visage, so that I would not inspire such passions in {men/women}!", "lady_other_suitor_challenge_confirm",
	[##diplomacy end+
	(assign, "$quarrel_penalty", -1),
	]],

  [anyone,"lady_other_suitor_challenge",
	[
	(str_store_troop_name, s5, "$romantic_rival"),
	],##diplomacy start+ change "sir" to "{sir/madame}"
	"I will have none of such talk! It is nonsense for you and {s5} to fight over -- whoops! I beg of you, {sir/madame}, forget the name that just escaped my lips...", "lady_other_suitor_challenge_confirm",
	[##diplomacy end+
	(assign, "$quarrel_penalty", -3),
	]],

  [anyone|plyr,"lady_other_suitor_challenge_confirm",
	[##diplomacy start+ Add support for female rival
    (call_script, "script_dplmc_store_troop_is_female",  "$romantic_rival"),],
	#Change "him" to "{reg0?her:him}"
	"So be it! I shall challenge {reg0?her:him} to a trial of arms!", "lady_other_suitor_challenge_confirm_yes",
	##diplomacy end+
	[]],

  [anyone|plyr,"lady_other_suitor_challenge_confirm",
	[],
	"On second thought, I let my passions run away with me there. Never mind.", "lady_other_suitor_challenge_confirm_no",
	[]],

  [anyone,"lady_other_suitor_challenge_confirm_yes",
	[
	  (try_begin),
	    (call_script, "script_troop_get_relation_with_troop", "$g_talk_troop", "$romantic_rival"),
	    (lt, reg0, 0),
	    (str_store_string, s15, "str_do_be_careful_i_am_so_much_endebted_to_you_for_this"),
	  (else_try),
	    (troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_ambitious),
	    (str_store_string, s15, "str_go_then__we_shall_see_which_of_you_triumphs"),
	  (else_try),
	    (str_store_string, s15, "str_sigh_i_will_never_truly_understand_men_and_their_rash_actions"),
	  (try_end),
	],
	"{s15}", "lady_pretalk",
	[
	  (call_script, "script_troop_change_relation_with_troop", "trp_player", "$g_talk_troop", "$quarrel_penalty"),
	  (str_store_troop_name_link, s11, "$g_talk_troop"), #SB : name link
	  (str_store_troop_name_link, s13, "$romantic_rival"),
	  (setup_quest_text, "qst_duel_courtship_rival"),
	  ##diplomacy start+ use correct pronoun for gender
	  (call_script, "script_dplmc_store_troop_is_female_reg", "$romantic_rival", 4),
	  ##diplomacy end+
	  (str_store_string, s2, "str_you_intend_to_challenge_s13_to_force_him_to_relinquish_his_suit_of_s11"),

	  (call_script, "script_start_quest", "qst_duel_courtship_rival", "$g_talk_troop"),

	  (quest_set_slot, "qst_duel_courtship_rival", slot_quest_target_troop, "$romantic_rival"),

	  (quest_set_slot, "qst_duel_courtship_rival", slot_quest_xp_reward, 400),
	  (quest_set_slot, "qst_duel_courtship_rival", slot_quest_expiration_days, 60),
	  (quest_set_slot, "qst_duel_courtship_rival", slot_quest_current_state, 0),
	]],

  [anyone,"lady_other_suitor_challenge_confirm_no",
	[],
	"Good. You are wise not to let your temper guide you.", "lady_private_conversation_end",
	[]],






  [anyone|plyr,"lady_talk",
   [
	 (troop_slot_ge, "$g_talk_troop", slot_troop_spouse, 0),
#     (troop_slot_ge, "$g_talk_troop", slot_troop_courtship_state, 2),
     (store_partner_quest, ":ladys_quest"),
     (lt, ":ladys_quest", 0)
     ],
   "Is there anything I can do to win your favor?", "lady_ask_for_quest",[(call_script, "script_get_quest", "$g_talk_troop"),
                                                                 (assign, "$random_quest_no", reg0)]],

  [anyone,"lady_ask_for_quest",
  [
    (troop_slot_eq, "$g_talk_troop", slot_troop_does_not_give_quest, 1),
  ],
   "I don't have anything else for you to do right now.", "lady_pretalk", []],

  [anyone,"lady_ask_for_quest",
  [
     (this_or_next|eq, "$random_quest_no", "qst_rescue_lord_by_replace"),
     (eq, "$random_quest_no", "qst_rescue_prisoner"),

     (quest_get_slot, ":quest_target_troop", "$random_quest_no", slot_quest_target_troop),
     (call_script, "script_troop_get_family_relation_to_troop", ":quest_target_troop", "$g_talk_troop"),
     (str_store_string, s17, s11),
     ##diplomacy start+ Correct pronouns if :quest_target_troop is female, although above script does so already
     (call_script, "script_dplmc_store_troop_is_female_reg",  ":quest_target_troop", 4),
  ],#He -> {reg4?She:He}, his -> {reg4?her:his}, him -> {reg4?her:him}
   "Oh, I fear I may never see my {s17}, {s13}, again... {reg4?She:He} is a prisoner in the dungeon of {s14}.\
 We have tried to negotiate {reg4?her:his} ransom, but it has been set too high.\
 We can never hope to raise that much money without selling everything we own,\
 and God knows {s13} would rather spend {reg4?her:his} life in prison than make us destitute.\
 Instead I came up with a plan to get {reg4?her:him} out of there, but it requires someone to make a great sacrifice,\
 and so far my pleas have fallen on deaf ears...", "lady_mission_told",
 ##diplomacy end+
   [
     (quest_get_slot, ":quest_target_center", "$random_quest_no", slot_quest_target_center),
     (quest_get_slot, ":quest_target_troop", "$random_quest_no", slot_quest_target_troop),
     (call_script, "script_troop_get_family_relation_to_troop", ":quest_target_troop", "$g_talk_troop"),
     (str_store_string, s17, s11),

     (str_store_troop_name, s11, "$g_talk_troop"),
     (str_store_troop_name_link, s13, ":quest_target_troop"),
     (str_store_party_name_link, s14, ":quest_target_center"),
     (setup_quest_text,"$random_quest_no"),
     ##diplomacy start+ Correct pronouns for the quest target and quest giver (reg65 for talk troop, reg4 is set for target above)
     (try_begin),
       (eq, "$random_quest_no", "qst_rescue_lord_by_replace"),
       #changed pronouns next line
       (str_store_string, s2, "@{s11} asked you to rescue {reg65?her:his} {s17}, {s13}, from {s14} by switching clothes and taking {reg4?her:his} place in prison."),
     (else_try),
        #changed pronouns next line
       (str_store_string, s2, "@{s11} asked you to rescue {reg65?her:his} {s17}, {s13}, from {s14}."),
     (try_end),
     ##diplomacy end+
    ]],

  [anyone,"lady_ask_for_quest", [
     (eq, "$random_quest_no", "qst_deliver_message_to_prisoner_lord"),
     (quest_get_slot, ":quest_target_troop", "$random_quest_no", slot_quest_target_troop),
     (call_script, "script_troop_get_family_relation_to_troop", ":quest_target_troop", "$g_talk_troop"),

  ],
   "My poor {s11}, {s13}, is a prisoner in the {s14} dungeons.\
 The only way we can talk to each other is by exchanging letters whenever we can,\
 but the journey is so dangerous that we get little chance to do so.\
 Please, would you deliver one for me?", "lady_mission_told",
   [
     (quest_get_slot, ":quest_target_center", "$random_quest_no", slot_quest_target_center),
     (quest_get_slot, ":quest_target_troop", "$random_quest_no", slot_quest_target_troop),


     (str_store_troop_name, s11, "$g_talk_troop"),
     (str_store_troop_name_link, s13, ":quest_target_troop"),
     (str_store_party_name_link, s14, ":quest_target_center"),
     (setup_quest_text,"$random_quest_no"),
     (str_store_string, s2, "@{s11} asked you to deliver a message to {s13}, who is imprisoned at {s14}."),
    ]],


  [anyone,"lady_ask_for_quest", [(eq, "$random_quest_no", "qst_duel_for_lady")],
   "Dear {playername}, you are kind to ask, but you know little of my troubles\
 and I can't possibly ask you to throw yourself into danger on my behalf.", "lady_quest_duel_for_lady",[]],

  [anyone|plyr,"lady_quest_duel_for_lady", [], "Tell me what the problem is, and I can make my own decision.", "lady_quest_duel_for_lady_2",
   [
     (quest_get_slot, ":quest_target_troop", "$random_quest_no", slot_quest_target_troop),

     (str_store_troop_name, s11, "$g_talk_troop"),
     (str_store_troop_name_link, s13, ":quest_target_troop"),
     (str_store_string, s2, "@You agreed to challenge {s13} to defend {s11}'s honour."),
     (setup_quest_text,"$random_quest_no"),
    ]],

  [anyone,"lady_quest_duel_for_lady_2", [
  ##diplomacy start+ Add possibility of male version
  (quest_get_slot, ":quest_target_troop", "$random_quest_no", slot_quest_target_troop),
  (call_script, "script_dplmc_store_troop_is_female",  ":quest_target_troop"),#gender of lord to challenge

  (store_sub, reg1, 1, reg65),#gender of quest-giver's spouse (0 to 1, 1 to 0)
  (try_begin),
    (troop_slot_ge, "$g_talk_troop",  slot_troop_spouse, 0),
    (troop_get_slot, ":spouse", "$g_talk_troop", slot_troop_spouse),
    (assign, reg1, 0),
    (call_script, "script_cf_dplmc_troop_is_female", ":spouse"),
    (assign, reg1, 1),
  (try_end),
  #Numerous gender changes in next line
  ], "Very well, as you wish it...\
 My {reg1?wife:husband} has made certain enemies in {reg1?her:his} life, {playername}. One of the most insidious is {s13}.\
 {reg0?She:He} is going around making terrible accusations against me, impugning my honour at every turn!\
 Because {reg0?she:he} cannot harm my {reg1?wife:husband} directly, {reg0?she:he} is using me as a target to try and stain our name.\
 You should hear the awful things {reg0?she:he}'s said! I only wish there was someone brave enough to make {reg0?her:him} recant {reg0?her:his} slander,\
 but {s13} is a very fine {reg0?swordsman:sword-maiden}, and {reg0?she:he}'s widely feared...", "lady_quest_duel_for_lady_3",[]],
 ##diplomacy end+

  [anyone|plyr,"lady_quest_duel_for_lady_3", [
  ##diplomacy start+ Add possibility of fe/male version
  (quest_get_slot, ":quest_target_troop", "$random_quest_no", slot_quest_target_troop),
  (call_script, "script_dplmc_store_troop_is_female",  ":quest_target_troop"),#gender of lord to challenge
  #next line, him -> {reg0?her:him}, his -> {reg0?her:his}
  ], "I fear {reg0?her:him} not, {s65}. I will make {reg0?her:him} take back {reg0?her:his} lies.", "lady_quest_duel_for_lady_3_accepted",[]],
  ##diplomacy end+
  [anyone,"lady_quest_duel_for_lady_3_accepted", [], "Oh! I can't ask that of you, {playername}, but...\
 I would be forever indebted to you, and you are so sure. It would mean so much if you would defend my honour.\
 Thank you a thousand times, all my prayers and my favor go with you.", "close_window",
   [

     (quest_get_slot, ":quest_target_troop", "$random_quest_no", slot_quest_target_troop),
     (call_script, "script_start_quest", "$random_quest_no", "$g_talk_troop"),
     (call_script, "script_report_quest_troop_positions", "$random_quest_no", ":quest_target_troop", 3),
     (call_script, "script_change_player_relation_with_troop", "$g_talk_troop", 3),
     ]],

  [anyone|plyr,"lady_quest_duel_for_lady_3", [##diplomacy start+ Use proper pronoun
  (quest_get_slot, ":quest_target_troop", "$random_quest_no", slot_quest_target_troop),
  (call_script, "script_dplmc_store_troop_is_female",  ":quest_target_troop"),#gender of lord to challenge
  ], "If {reg0?she:he}'s that dangerous, perhaps maybe it would be better to ignore {reg0?her:him}...", "lady_quest_duel_for_lady_3_rejected",[]],
  ##diplomacy end+
  [anyone,"lady_quest_duel_for_lady_3_rejected", [], "Oh... Perhaps you're right, {playername}.\
 I should let go of these silly childhood ideas of chivalry and courage. {Men/People} are not like that,\
 not anymore. Good day to you.", "close_window",
   [(troop_set_slot, "$g_talk_troop", slot_troop_does_not_give_quest, 1),
    (call_script, "script_change_player_relation_with_troop", "$g_talk_troop", -1),
    ]],


  [anyone,"lady_ask_for_quest", [], "No, {playername}, I've no need for a champion right now.", "lady_pretalk",[]],

  [anyone|plyr,"lady_mission_told", [], "As you wish it, {s65}, it shall be done.", "lady_mission_accepted",[]],
  [anyone|plyr,"lady_mission_told", [], "{s66}, I fear I cannot help you right now.", "lady_mission_rejected",[]],

  [anyone,"lady_mission_accepted", [], "You are a true {gentleman/lady}, {playername}.\
 Thank you so much for helping me", "close_window",
   [
     (try_begin),
       (eq, "$random_quest_no", "qst_deliver_message_to_prisoner_lord"),
       (call_script, "script_troop_add_gold", "trp_player", 10),
     (try_end),
     (call_script, "script_start_quest", "$random_quest_no", "$g_talk_troop"),
    ]],
##diplomacy start+ add male version
  [anyone,"lady_mission_rejected", [
  #changed "woman" -> "{reg65?woman:young lad}"
  ], "You'll not help a {reg65?woman:young lad} in need? You should be ashamed, {playername}...\
 Please leave me, I have some important embroidery to catch up.", "close_window",
##diplomacy end+
   [
     (call_script, "script_change_player_relation_with_troop", "$g_talk_troop", -1),
     (troop_set_slot, "$g_talk_troop", slot_troop_does_not_give_quest, 1),
    ]],

#Leave
  [anyone|plyr,"lady_talk", [
  (troop_slot_ge, "$g_talk_troop", slot_troop_spouse, 0),
  ], "I want to improve my relation with a lord. Can you help me?", "lady_restore_relation",[]],
  [anyone,"lady_restore_relation", [(le, "$g_talk_troop_relation", 0)], "{playername}, I don't know you well enough to act on your behalf. I am sorry.", "lady_pretalk",[]],
  [anyone,"lady_restore_relation", [], "Hmm. I guess you got on the wrong side of somebody. Very well, who do you want to restore your relation with?", "lady_restore_relation_2",[]],

  [anyone|plyr|repeat_for_troops,"lady_restore_relation_2", [(store_repeat_object, ":troop_no"),
                                                             (is_between, ":troop_no", active_npcs_begin, active_npcs_end),
                                                             (store_troop_faction, ":faction_no", ":troop_no"),
                                                             (eq, "$g_talk_troop_faction", ":faction_no"),
                                                             (call_script, "script_troop_get_player_relation", ":troop_no"),
                                                             (lt, reg0, 0),
                                                             ##diplomacy start+
                                                             #enhanced functionality for relatives
                                                             (str_store_troop_name, s1, ":troop_no"),
                                                             (call_script,"script_troop_get_family_relation_to_troop",":troop_no","$g_talk_troop"),
                                                             (try_begin),
                                                                 (ge, reg0, 1),
                                                                 (str_store_string, s10, s1),
                                                                 (str_store_string, s1, "str_dplmc_your_s11_s10"),
                                                             (try_end),
                                                             ],
   "{s1}", "lady_restore_relation_2b",[(store_repeat_object, "$troop_to_restore_relations_with")]],
  ##diplomacy end+
  [anyone|plyr,"lady_restore_relation_2", [], "Never mind. I get along with everyone well enough.", "lady_pretalk",[]],

  [anyone,"lady_restore_relation_2b", [(str_store_troop_name, s10, "$troop_to_restore_relations_with")], "Well I can try to help you there.\
 I am sure a few expensive gifts will make {s10} look at you more favorably.", "lady_restore_relation_3",[]],

  [anyone,"lady_restore_relation_3", [(str_store_troop_name, s10, "$troop_to_restore_relations_with"),
                                      (assign, "$lady_restore_cost_1", 1000),
                                      (assign, "$lady_restore_cost_2", 2000),
                                      (assign, "$lady_restore_cost_3", 3000),
                                      ##diplomacy start+
                                      #lower cost for relatives
                                      (call_script,"script_troop_get_family_relation_to_troop","$troop_to_restore_relations_with","$g_talk_troop"),
                                      (try_begin),
                                         (ge, reg0, 10),
                                         (assign, "$lady_restore_cost_1", 750),
                                         (assign, "$lady_restore_cost_2", 1500),
                                         (assign, "$lady_restore_cost_3", 2250),
                                         (str_store_string, s10, s11),
                                      (else_try),
                                         (ge, reg0, 1),
                                         (assign, "$lady_restore_cost_1", 900),
                                         (assign, "$lady_restore_cost_2", 1800),
                                         (assign, "$lady_restore_cost_3", 2700),
                                         (str_store_string, s10, s11),
                                      (try_end),
                                      ##diplomacy end+
                                      (assign, reg10, "$lady_restore_cost_1"),
                                      (assign, reg11, "$lady_restore_cost_2"),
                                      (assign, reg12, "$lady_restore_cost_3"),
									  ##diplomacy start+ Unnecessary, since the family relation script sets this
                                      #(troop_get_type, reg4, "$troop_to_restore_relations_with"),
									  ##diplomacy end+
                                      ],
   "You can improve your relation with {s10} by sending {reg4?her:him} a gift worth {reg10} denars.\
 But if you can afford spending {reg11} denars on the gift, it would make a good impression on {reg4?her:him}.\
 And if you can go up to {reg12} denars, that would really help smooth things out.", "lady_restore_relation_4",[]],

  [anyone|plyr,"lady_restore_relation_4", [(store_troop_gold,":gold", "trp_player"),
                                           (ge, ":gold", "$lady_restore_cost_1"),
                                           (assign, reg10, "$lady_restore_cost_1")],
   "I think a gift of {reg10} denars will do.", "lady_restore_relation_5",[(assign, "$temp", 1), (assign, "$temp_2", "$lady_restore_cost_1")]],
  [anyone|plyr,"lady_restore_relation_4", [(store_troop_gold,":gold", "trp_player"),
                                           (ge, ":gold", "$lady_restore_cost_2"),
                                           (assign, reg11, "$lady_restore_cost_2")],
   "Maybe I can afford {reg11} denars.", "lady_restore_relation_5",[(assign, "$temp", 2), (assign, "$temp_2", "$lady_restore_cost_2")]],
  [anyone|plyr,"lady_restore_relation_4", [(store_troop_gold,":gold", "trp_player"),
                                           (ge, ":gold", "$lady_restore_cost_3"),
                                           (assign, reg12, "$lady_restore_cost_3")],
   "In that case, I am ready to spend {reg12} denars.", "lady_restore_relation_5",[(assign, "$temp", 3), (assign, "$temp_2", "$lady_restore_cost_3")]],

  [anyone|plyr,"lady_restore_relation_4", [], "I don't think I can afford a gift at the moment.", "lady_restore_relation_cant_afford",[]],

  [anyone,"lady_restore_relation_5", [], "Excellent. Then I'll choose an appropriate gift for you and send it to {s10} with your compliments.\
 I am sure {reg4?she:he} will appreciate the gesture.", "lady_restore_relation_6",[
     (troop_remove_gold, "trp_player","$temp_2"),
     (call_script, "script_change_player_relation_with_troop", "$troop_to_restore_relations_with", "$temp"),
	 ##diplomacy start+
     #(troop_get_type, reg4, "$troop_to_restore_relations_with"),
	 (call_script, "script_dplmc_store_troop_is_female_reg", "$troop_to_restore_relations_with", 4),
	 ##diplomacy end+
     ]],

  #SB : gender string
  [anyone|plyr,"lady_restore_relation_6", [], "Thank you for your help, {reg65?madame:sir}.", "lady_pretalk",[]],

  [anyone,"lady_restore_relation_cant_afford", [], "I am afraid, I can't be of much help in that case, {playername}. I am sorry.", "lady_pretalk",[]],

  [anyone|plyr,"lady_talk", [], "I must beg my leave.", "lady_leave",[]],

  [anyone|auto_proceed,"lady_leave", [
  (call_script, "script_troop_get_relation_with_troop", "$g_talk_troop", "trp_player"),
  (try_begin),
	(lt, reg0, 0),
	(str_store_string, s12, "str_farewell"),
  (else_try),
	(str_store_string, s12, "str_farewell_playername"),
  (try_end),
  ], "{s12}", "close_window",[(eq,"$talk_context",tc_party_encounter),(assign, "$g_leave_encounter", 1)]],



#Convincing bargaining
  [anyone,"convince_begin", [], "I still don't see why I should accept what you're asking of me.", "convince_options",
   [(quest_get_slot, "$convince_value", "$g_convince_quest", slot_quest_convince_value),
    ]],

  [anyone|plyr,"convince_options", [(assign, reg8, "$convince_value")], "Then I'll make it worth your while. ({reg8} denars)", "convince_bribe",[]],
  [anyone|plyr,"convince_options",
  [(store_div, "$convince_relation_penalty", "$convince_value", 300),
   (val_add, "$convince_relation_penalty", 1),
   (assign, reg9, "$convince_relation_penalty")],
   "Please, do it for the sake of our friendship. (-{reg9} to relation)", "convince_friendship",[]],
  [anyone|plyr,"convince_options", [], "Let me try and convince you. (Persuasion)", "convince_persuade_begin", []],
  [anyone|plyr,"convince_options", [], "Never mind.", "lord_pretalk",[]],

  [anyone,"convince_bribe", [], "Mmm, a generous gift to my coffers would certainly help matters...\
 {reg8} denars should do it. If you agree, then I'll go with your suggestion.", "convince_bribe_verify",[]],

  [anyone|plyr,"convince_bribe_verify", [(store_troop_gold, ":gold", "trp_player"),
                                         (lt, ":gold", "$convince_value")],
   "I'm afraid my finances will not allow for such a gift.", "convince_bribe_cant_afford",[]],
  [anyone|plyr,"convince_bribe_verify", [(store_troop_gold, ":gold", "trp_player"),
                                         (ge, ":gold", "$convince_value")],
  "Very well, please accept these {reg8} denars as a token of my gratitude.", "convince_bribe_goon",[]],
  [anyone|plyr,"convince_bribe_verify", [], "Let me think about this some more.", "convince_begin",[]],

  [anyone,"convince_bribe_cant_afford", [], "Ah. In that case, there is little I can do,\
 unless you have some further argument to make.", "convince_options",[]],
   [anyone,"convince_bribe_goon", [], "My dear {playername}, your generous gift has led me to reconsider what you ask,\
 and I have come to appreciate the wisdom of your proposal.", "convince_accept",[
 ##diplomacy start+ add removed gold to bribed lord
 (call_script, "script_dplmc_distribute_gold_to_lord_and_holdings", "$convince_value", "$g_talk_troop"),
 ##diplomacy end+
 (troop_remove_gold, "trp_player","$convince_value")]],

  [anyone,"convince_friendship",
   [(store_add, ":min_relation", 5, "$convince_relation_penalty"),
    (ge, "$g_talk_troop_effective_relation", ":min_relation")], "You've done well by me in the past, {playername},\
 and for that I will go along with your request, but know that I do not like you using our relationship this way.", "convince_friendship_verify",[]],

  [anyone|plyr,"convince_friendship_verify", [], "I am sorry, my friend, but I need your help in this.", "convince_friendship_go_on",[]],
  [anyone|plyr,"convince_friendship_verify", [], "If it will not please you, then I'll try something else.", "lord_pretalk",[]],

  [anyone,"convince_friendship_go_on", [], "All right then, {playername}, I will accept this for your sake. But remember, you owe me for this.", "convince_accept",
   [(store_sub, ":relation_change", 0, "$convince_relation_penalty"),
    (call_script, "script_change_player_relation_with_troop","$g_talk_troop",":relation_change")]],

  [anyone,"convince_friendship",
   [(ge, "$g_talk_troop_relation", -5)], "I don't think I owe you such a favor {playername}.\
 I see no reason to accept this for you.", "lord_pretalk",[]],

  [anyone,"convince_friendship", [], "Is this a joke? You've some nerve asking me for favors, {playername},\
 and let me assure you you'll get none.", "lord_pretalk",[]],

  [anyone,"convince_persuade_begin",
  [(troop_get_slot, ":last_persuasion_time", "$g_talk_troop", slot_troop_last_persuasion_time),
   (store_current_hours, ":cur_hours"),
   (store_add, ":valid_time", ":last_persuasion_time", 24),
   (gt, ":cur_hours", ":valid_time"),
   ],
   "Very well. Make your case.", "convince_persuade_begin_2",[]],


  [anyone|plyr,"convince_persuade_begin_2", [], "[Attempt to persuade]", "convince_persuade",[
        (try_begin),
          (store_random_in_range, ":rand", 0, 100),
          (lt, ":rand", 30),
          (store_current_hours, ":cur_hours"),
          (troop_set_slot, "$g_talk_troop", slot_troop_last_persuasion_time, ":cur_hours"),
        (try_end),
        (store_skill_level, ":persuasion_level", "skl_persuasion", "trp_player"),
        (store_add, ":persuasion_potential", ":persuasion_level", 5),

        (store_random_in_range, ":random_1", 0, ":persuasion_potential"),
        (store_random_in_range, ":random_2", 0, ":persuasion_potential"),
        (store_add, ":rand", ":random_1", ":random_2"),

        (assign, ":persuasion_difficulty", "$convince_value"),
        (convert_to_fixed_point, ":persuasion_difficulty"),
        (store_sqrt, ":persuasion_difficulty", ":persuasion_difficulty"),
        (convert_from_fixed_point, ":persuasion_difficulty"),
        (val_div, ":persuasion_difficulty", 10),
        (val_add, ":persuasion_difficulty", 4),

        (store_sub, "$persuasion_strength", ":rand", ":persuasion_difficulty"),
        (val_mul, "$persuasion_strength", 20),
        (assign, reg5, "$persuasion_strength"),
        (val_sub, "$convince_value", "$persuasion_strength"),
        (quest_set_slot, "$g_convince_quest", slot_quest_convince_value, "$convince_value"),
        (str_store_troop_name, s50, "$g_talk_troop"),
		##diplomacy start+
		##OLD:
        #(troop_get_type, reg51, "$g_talk_troop"),
		##NEW:
		(try_begin),
			(call_script, "script_cf_dplmc_troop_is_female", "$g_talk_troop"),
			(assign, reg51, 1),
			(assign, reg65, 1),
		(else_try),
			(assign, reg51, 0),
			(assign, reg65, 0),
		(try_end),
		##diplomacy end+
        (try_begin),
          (lt, "$persuasion_strength", -30),
          (str_store_string, s5, "str_persuasion_summary_very_bad"),
        (else_try),
          (lt, "$persuasion_strength", -10),
          (str_store_string, s5, "str_persuasion_summary_bad"),
        (else_try),
          (lt, "$persuasion_strength", 10),
          (str_store_string, s5, "str_persuasion_summary_average"),
        (else_try),
          (lt, "$persuasion_strength", 30),
          (str_store_string, s5, "str_persuasion_summary_good"),
        (else_try),
          (str_store_string, s5, "str_persuasion_summary_very_good"),
        (try_end),
        (dialog_box, "@{s5} (Persuasion strength: {reg5})", "@Persuasion Attempt"),
  ]],
  [anyone|plyr,"convince_persuade_begin_2", [], "Wait, perhaps there is another way to convince you.", "convince_begin",[]],

  [anyone,"convince_persuade_begin", [], "By God's grace, {playername}!\
 Haven't we talked enough already? I am tired of listening to you,\
 and I do not want to hear any more of it right now.", "lord_pretalk",[]],

  [anyone,"convince_persuade", [(le, "$convince_value", 0)], "All right, all right. You have persuaded me to it.\
 I'll go ahead with what you suggest.", "convince_accept",[]],
  [anyone,"convince_persuade", [(gt, "$persuasion_strength", 5)], "You've a point, {playername},\
 I'll admit that much. However I am not yet convinced I should do as you bid.", "convince_options",[]],
  [anyone,"convince_persuade", [(gt, "$persuasion_strength", -5)], "Enough, {playername}.\
 You've a lot of arguments, but I find none of them truly convincing. I stand by what I said before.", "convince_options",[]],
  [anyone,"convince_persuade", [], "Truthfully, {playername}, I fail to see the virtue of your reasoning.\
 What you ask for makes even less sense now than it did before.", "convince_options",[]],

#Seneschal

  [anyone,"start", [(troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_seneschal),
                    (eq, "$talk_context", tc_siege_won_seneschal),
                    (str_store_party_name, s1, "$g_encountered_party"),
                    ],
   "I must congratulate you on your victory, my {lord/lady}. Welcome to {s1}.\
 We, the housekeepers of this castle, are at your service.", "siege_won_seneschal_1",[]],
  [anyone|plyr,"siege_won_seneschal_1", [], "Are you the seneschal?", "siege_won_seneschal_2",[]],
  [anyone,"siege_won_seneschal_2", [], "Indeed I am, my {lord/lady}.\
 I have always served the masters of {s1} to the best of my ability, whichever side they might be on.\
 Thus you may count on my utmost loyalty for as long as you are the {lord/lady} of this place.\
 Now, do you intend to keep me on as the seneschal? I promise you will not be disappointed.", "siege_won_seneschal_3",[]],
  [anyone|plyr,"siege_won_seneschal_3", [], "Very well, you may keep your post for the time being.", "siege_won_seneschal_4",[]],
  [anyone|plyr,"siege_won_seneschal_3", [], "You can stay, but I shall be keeping a close watch on you.", "siege_won_seneschal_4",[]],
  [anyone,"siege_won_seneschal_4", [], "Thank you, my {lord/lady}. If you do not mind my impudence,\
 may I inquire as to what you wish to do with the castle?", "siege_won_seneschal_5",[]],

  [anyone|plyr,"siege_won_seneschal_5", [], "I will sell it to another lord.", "siege_won_seneschal_6",[]],
  [anyone|plyr,"siege_won_seneschal_5", [], "I intend to claim it for myself.", "siege_won_seneschal_6",[]],

  [anyone|plyr,"siege_won_seneschal_5", [], "I haven't given it much thought. What are my options?", "siege_won_seneschal_list_options",[]],

  [anyone,"siege_won_seneschal_list_options", [], "According to our laws and traditions,\
 you can do one of several things.\
 First, you could station a garrison here to protect the castle from any immediate counterattacks,\
 then request an audience with some wealthy lord and ask him to make you an offer.\
 It would be worth a tidy sum, believe you me.\
 If you do not wish to sell, then you will have to find yourself a liege lord and protector who would accept homage from you.\
 Without a royal investiture and an army at your back, you would have a difficult time holding on to the castle.\
 Both you and {s1} would become great big targets for any man with a few soldiers and a scrap of ambition.\
 ", "siege_won_seneschal_list_options_2",[]],

  [anyone|plyr,"siege_won_seneschal_list_options_2", [], "What do you mean, a liege lord and protector? I won this place by my own hand, I don't need anyone else!", "siege_won_seneschal_list_options_3",[]],
  [anyone,"siege_won_seneschal_list_options_3", [], "Of course you don't, my {lord/lady}.\
 However, no lord in the land will recognize your claim to the castle unless it is verified by royal decree.\
 They would call {s1} an outlaw stronghold and take it from you at the earliest opportunity.\
 Surely not even you could stand against a whole army.", "siege_won_seneschal_list_options_4",[]],
  [anyone|plyr,"siege_won_seneschal_list_options_4", [], "Hmm. I'll give it some thought.", "siege_won_seneschal_6",[]],

  [anyone,"siege_won_seneschal_6", [], "I am very pleased to hear it, my {lord/lady}.\
 I am only trying to serve you to the best of my ability. Now,\
 if at any time you find you have further need of me,\
 I will be in the great hall arranging a smooth handover of the castle to your forces.\
 ", "close_window",[]],


  [anyone,"start", [(troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_seneschal),(eq,"$g_talk_troop_met",0),(str_store_party_name,s1,"$g_encountered_party")],
   "Good day, {sir/madam}. I do nott believe I've seen you here before.\
 Let me extend my welcome to you as the seneschal of {s1}.", "seneschal_intro_1",[]],

  [anyone|plyr,"seneschal_intro_1", [],  "A pleasure to meet you, {s65}.", "seneschal_intro_1a",[]],
  [anyone,"seneschal_intro_1a", [], "How can I help you?", "seneschal_talk",[]],
  [anyone|plyr,"seneschal_intro_1", [],  "What exactly do you do here?", "seneschal_intro_1b",[]],
  [anyone,"seneschal_intro_1b", [], "Ah, a seneschal's duties are many, good {sire/woman}.\
 For example, I collect the rents from my lord's estates, I manage the castle's storerooms,\
 I deal with the local peasantry, I take care of castle staff, I arrange supplies for the garrison...\
 All mundane matters on this fief are my responsibility, on behalf of my lord.\
 Everything except commanding the soldiers themselves.", "seneschal_talk",[]],

  [anyone,"start", [(troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_seneschal)],
   "Good day, {sir/madam}.", "seneschal_talk",[]],

  [anyone,"seneschal_pretalk", [], "Anything else?", "seneschal_talk",[]],


##### TODO: QUESTS COMMENT OUT BEGIN
##  [anyone|plyr,"seneschal_talk", [(check_quest_active, "qst_deliver_supply_to_center_under_siege"),
##                                  (quest_slot_eq, "qst_deliver_supply_to_center_under_siege", slot_quest_target_troop, "$g_talk_troop"),
##                                  (quest_slot_eq, "qst_deliver_supply_to_center_under_siege", slot_quest_current_state, 1),
##                                  (store_item_kind_count, ":no_supplies", "itm_siege_supply"),
##                                  (quest_get_slot, ":target_amount", "qst_deliver_supply_to_center_under_siege", slot_quest_target_amount),
##                                  (ge, ":no_supplies", ":target_amount")],
##   "TODO: Here are the supplies.", "seneschal_supplies_given",[]],
##
##  [anyone|plyr,"seneschal_talk", [(check_quest_active, "qst_deliver_supply_to_center_under_siege"),
##                                  (quest_slot_eq, "qst_deliver_supply_to_center_under_siege", slot_quest_target_troop, "$g_talk_troop"),
##                                  (quest_slot_eq, "qst_deliver_supply_to_center_under_siege", slot_quest_current_state, 1),
##                                  (store_item_kind_count, ":no_supplies", "itm_siege_supply"),
##                                  (quest_get_slot, ":target_amount", "qst_deliver_supply_to_center_under_siege", slot_quest_target_amount),
##                                  (lt, ":no_supplies", ":target_amount"),
##                                  (gt, ":no_supplies", 0)],
##   "TODO: Here are the supplies, but some of them are missing.", "seneschal_supplies_given_missing",[]],
##
##  [anyone|plyr,"seneschal_talk", [(check_quest_active, "qst_deliver_supply_to_center_under_siege"),
##                                  (quest_slot_eq, "qst_deliver_supply_to_center_under_siege", slot_quest_object_troop, "$g_talk_troop"),
##                                  (quest_slot_eq, "qst_deliver_supply_to_center_under_siege", slot_quest_current_state, 0)],
##   "TODO: Give me the supplies.", "seneschal_supplies",[]],
##
##  [anyone,"seneschal_supplies", [(store_free_inventory_capacity, ":free_inventory"),
##                                 (quest_get_slot, ":quest_target_amount", "qst_deliver_supply_to_center_under_siege", slot_quest_target_amount),
##                                 (ge, ":free_inventory", ":quest_target_amount"),
##                                 (quest_get_slot, ":quest_target_center", "qst_deliver_supply_to_center_under_siege", slot_quest_target_center),
##                                 (str_store_party_name, 0, ":quest_target_center"),
##                                 (troop_add_items, "trp_player", "itm_siege_supply", ":quest_target_amount")],
##   "TODO: Here, take these supplies. You must deliver them to {s0} as soon as possible.", "seneschal_pretalk",[(quest_set_slot, "qst_deliver_supply_to_center_under_siege", slot_quest_current_state, 1)]],
##
##  [anyone,"seneschal_supplies", [],
##   "TODO: You don't have enough space to take the supplies. Free your inventory and return back to me.", "seneschal_pretalk",[]],
##
##
##  [anyone,"seneschal_supplies_given", [],
##   "TODO: Thank you.", "seneschal_pretalk",[(party_get_slot, ":town_siege_days", "$g_encountered_party", slot_town_siege_days),
##                                            (quest_get_slot, ":target_amount", "qst_deliver_supply_to_center_under_siege", slot_quest_target_amount),
##                                            (val_sub, ":town_siege_days", ":target_amount"),
##                                            (try_begin),
##                                              (lt, ":town_siege_days", 0),
##                                              (assign, ":town_siege_days", 0),
##                                            (try_end),
##                                            (party_set_slot, "$g_encountered_party", slot_town_siege_days, ":town_siege_days"),
##                                            (troop_remove_items, "trp_player", "itm_siege_supply", ":target_amount"),
##                                            (call_script, "script_finish_quest", "qst_deliver_supply_to_center_under_siege", 100)]],
##
##  [anyone,"seneschal_supplies_given_missing", [],
##   "TODO: Thank you but it's not enough...", "seneschal_pretalk",[(store_item_kind_count, ":no_supplies", "itm_siege_supply"),
##                                                                  (quest_get_slot, ":target_amount", "qst_deliver_supply_to_center_under_siege", slot_quest_target_amount),
##                                                                  (assign, ":percentage_completed", 100),
##                                                                  (val_mul, ":percentage_completed", ":no_supplies"),
##                                                                  (val_div, ":percentage_completed", ":target_amount"),
##                                                                  (call_script, "script_finish_quest", "qst_deliver_supply_to_center_under_siege", ":percentage_completed"),
##                                                                  (party_get_slot, ":town_siege_days", "$g_encountered_party", slot_town_siege_days),
##                                                                  (val_sub, ":town_siege_days", ":no_supplies"),
##                                                                  (try_begin),
##                                                                    (lt, ":town_siege_days", 0),
##                                                                    (assign, ":town_siege_days", 0),
##                                                                  (try_end),
##                                                                  (party_set_slot, "$g_encountered_party", slot_town_siege_days, ":town_siege_days"),
##                                                                  (troop_remove_items, "trp_player", "itm_siege_supply", ":no_supplies"),
##                                                                  (call_script, "script_end_quest", "qst_deliver_supply_to_center_under_siege")]],
##
##### TODO: QUESTS COMMENT OUT END

  [anyone|plyr,"seneschal_talk", [(store_relation, ":cur_rel", "fac_player_supporters_faction", "$g_encountered_party_faction"),
                                  (ge, ":cur_rel", 0),],
   "I would like to ask you a question...", "seneschal_ask_something",[]],

  [anyone|plyr,"seneschal_talk", [(store_relation, ":cur_rel", "fac_player_supporters_faction", "$g_encountered_party_faction"),
                                  (ge, ":cur_rel", 0),],
   "I wish to know more about someone...", "seneschal_ask_about_someone",[]],

  [anyone,"seneschal_ask_about_someone", [],
   "Perhaps I may be able to help. Whom did you have in mind?", "seneschal_ask_about_someone_2",[]],

#  [anyone|plyr|repeat_for_troops,"seneschal_ask_about_someone_2", [(store_repeat_object, ":troop_no"),
#                                                                 (is_between, ":troop_no", heroes_begin, heroes_end),
#                                                                  (store_troop_faction, ":faction_no", ":troop_no"),
 #                                                                 (eq, "$g_encountered_party_faction", ":faction_no"),
 #                                                                 (str_store_troop_name, s1, ":troop_no")],
 #  "{s1}", "seneschal_ask_about_someone_3",[(store_repeat_object, "$hero_requested_to_learn_relations")]],

  [anyone|plyr,"seneschal_ask_about_someone_2", [], "Never mind.", "seneschal_pretalk",[]],

#  [anyone, "seneschal_ask_about_someone_3", [(call_script, "script_troop_write_family_relations_to_s1", "$hero_requested_to_learn_relations"),
 #                                          (call_script, "script_troop_write_owned_centers_to_s2", "$hero_requested_to_learn_relations")
#										   ],
#   "{s2}{s1}", "seneschal_ask_about_someone_4",[(add_troop_note_from_dialog, "$hero_requested_to_learn_relations", 2)]],

#  [anyone, "seneschal_ask_about_someone_relation", [(call_script, "script_troop_count_number_of_enemy_troops", "$hero_requested_to_learn_relations"),
#                                            (assign, ":no_enemies", reg0),
#                                            (try_begin),
#                                              (gt, ":no_enemies", 1),
#                                              (try_for_range, ":i_enemy", 1, ":no_enemies"),
#                                                (store_add, ":slot_no", slot_troop_enemies_begin, ":i_enemy"),
#                                                (troop_get_slot, ":cur_enemy", "$hero_requested_to_learn_relations", ":slot_no"),
#                                                (str_store_troop_name_link, s50, ":cur_enemy"),
#                                                (try_begin),
#                                                  (eq, ":i_enemy", 1),
#                                                  (troop_get_slot, ":cur_enemy", "$hero_requested_to_learn_relations", slot_troop_enemy_1),
#                                                  (str_store_troop_name_link, s51, ":cur_enemy"),
#                                                  (str_store_string, s51, "str_s50_and_s51"),
#                                                (else_try),
#                                                  (str_store_string, s51, "str_s50_comma_s51"),
#                                                (try_end),
#                                              (try_end),
#                                            (else_try),
#                                              (eq, ":no_enemies", 1),
#                                              (troop_get_slot, ":cur_enemy", "$hero_requested_to_learn_relations", slot_troop_enemy_1),
#                                              (str_store_troop_name_link, s51, ":cur_enemy"),
#                                            (else_try),
#                                              (str_store_string, s51, "str_noone"),
#                                            (try_end),
#                                            (troop_get_type, reg1, "$hero_requested_to_learn_relations")],
#   "{reg1?She:He} hates {s51}.", "seneschal_ask_about_someone_4",[(add_troop_note_from_dialog, "$hero_requested_to_learn_relations", 3)]],
# Ryan END

#  [anyone|plyr,"seneschal_ask_about_someone_4", [], "Where does {s1} stand with others?.", "seneschal_ask_about_someone_relation",[]],
#  [anyone|plyr,"seneschal_ask_about_someone_4", [], "My thanks, that was helpful.", "seneschal_pretalk",[]],


  [anyone|plyr,"seneschal_talk", [], "I must take my leave of you now. Farewell.", "close_window",[]],


  [anyone,"seneschal_ask_something", [],
   "I'll do what I can to help, of course. What did you wish to ask?", "seneschal_ask_something_2",[]],

  [anyone|plyr,"seneschal_ask_something_2", [],
   "Perhaps you know where to find someone...", "seneschal_ask_location",[]],

  [anyone,"seneschal_ask_location", [],
   "Well, a man in my position does hear a lot of things. Of whom were you thinking?", "seneschal_ask_location_2",[]],

  [anyone|plyr|repeat_for_troops,"seneschal_ask_location_2", [(store_repeat_object, ":troop_no"),
                                                              (is_between, ":troop_no", heroes_begin, heroes_end),
                                                              (store_troop_faction, ":faction_no", ":troop_no"),
                                                              (eq, "$g_encountered_party_faction", ":faction_no"),
                                                              (str_store_troop_name, s1, ":troop_no")],
   "{s1}", "seneschal_ask_location_3",[(store_repeat_object, "$hero_requested_to_learn_location")]],

  [anyone|plyr,"seneschal_ask_location_2", [], "Never mind.", "seneschal_pretalk",[]],

  [anyone,"seneschal_ask_location_3", [(call_script, "script_get_information_about_troops_position", "$hero_requested_to_learn_location", 0)],
   "{s1}", "seneschal_pretalk",[]],
#SB : merged dialogs for the quest state
  [anyone,"start",
   [(quest_slot_eq, "qst_escort_merchant_caravan", slot_quest_current_state, 1),
    (quest_slot_eq, "qst_escort_merchant_caravan", slot_quest_target_party, "$g_encountered_party"),
    (le, "$talk_context",tc_party_encounter),
    (quest_get_slot, ":destination", "qst_escort_merchant_caravan", slot_quest_target_center),
    (store_distance_to_party_from_party, ":distance", ":destination", "$g_encountered_party"),
    (lt, ":distance", 5),
    (try_begin),
      (party_is_in_town, "$g_encountered_party", ":destination"),
      (assign, reg3, 0),
    (else_try),
      (str_store_party_name, s3, ":destination"),
      (assign, reg3, 1),
    (try_end),
    (quest_get_slot, ":cur_gold", "qst_escort_merchant_caravan", slot_quest_gold_reward),
    (call_script, "script_game_get_money_text", ":cur_gold"),
    #(assign, reg3, "$caravan_escort_agreed_reward"),
    ],
   "{reg3?There! I can see the walls of {s3} in the distance:Thank you, {playername}}. We've made it safely.\
 Here, take this purse of {s1}, as I promised. I hope we can travel together again someday.", "close_window",
   [
    #(assign,"$caravan_escort_state",0),
    (quest_set_slot, "qst_escort_merchant_caravan", slot_quest_current_state, 2),
    (quest_get_slot, ":reward", "qst_escort_merchant_caravan", slot_quest_gold_reward),
    (call_script, "script_troop_add_gold", "trp_player", ":reward"),
    (try_begin), #apply extra reward for quest caravans, if it gets here instead of original map dialog
      (party_get_template_id, ":template", "$g_encountered_party"),
      (eq, ":template", "pt_merchant_caravan"), 
      (quest_get_slot, ":destination", "qst_escort_merchant_caravan", slot_quest_target_center),
      (party_set_ai_behavior, "$g_encountered_party", ai_bhvr_travel_to_party),
      (party_set_ai_object, "$g_encountered_party", ":destination"),
      (party_set_flags, "$g_encountered_party", pf_default_behavior, 0),
      (quest_get_slot, ":quest_giver_center", "qst_escort_merchant_caravan", slot_quest_giver_center),
      (call_script, "script_change_player_relation_with_center", ":quest_giver_center", 1),
      (call_script, "script_end_quest","qst_escort_merchant_caravan"),
      (quest_set_slot, "qst_escort_merchant_caravan", slot_quest_current_state, 2),
      # (assign, ":xp_reward", ":quest_gold_reward"),
      (store_mul, ":xp_reward", ":reward", 5),
      (val_add, ":xp_reward", 100),
      (add_xp_as_reward, ":xp_reward"),
      (call_script, "script_change_troop_renown", "trp_player", 2),
    (else_try), #no xp bonus
      (eq, ":template", "pt_kingdom_caravan_party"), 
      (add_xp_as_reward, ":reward"),
      (party_set_flags, "$g_encountered_party", pf_default_behavior, 1),
    (try_end),
    #SB : script call for completion
    (succeed_quest, "qst_escort_merchant_caravan"),
    (try_begin),
      (eq, "$g_dplmc_player_disguise", 1), #enabled
      (call_script, "script_acquire_disguise", disguise_guard),
    (try_end),
    (call_script, "script_end_quest", "qst_escort_merchant_caravan"),
    # (call_script, "script_troop_add_gold", "trp_player", "$caravan_escort_agreed_reward"),
    # (assign,reg(4), "$caravan_escort_agreed_reward"),
    # (val_mul,reg(4), 1),
    # (add_xp_as_reward,reg(4)),
    (assign, "$g_leave_encounter",1),
    ]],

  [party_tpl|pt_kingdom_caravan_party,"start",
   [(quest_slot_eq, "qst_escort_merchant_caravan", slot_quest_current_state, 1),
    (quest_slot_eq, "qst_escort_merchant_caravan", slot_quest_target_party, "$g_encountered_party"),
    (eq, "$talk_context", tc_party_encounter),
    ],
   "We've made it this far... Is everything clear up ahead?", "talk_caravan_escort",[]],
  [anyone|plyr,"talk_caravan_escort", [],
   "There might be bandits nearby. Stay close.", "talk_caravan_escort_2a",[]],
  [anyone,"talk_caravan_escort_2a", [],
   "Trust me, {playername}, we're already staying as close to you as we can. Lead the way.", "close_window",[(assign, "$g_leave_encounter",1)]],
  [anyone|plyr,"talk_caravan_escort", [],
   "No sign of trouble, we can breathe easy.", "talk_caravan_escort_2b",[]],
  [anyone,"talk_caravan_escort_2b", [(quest_get_slot, ":destination", "qst_escort_merchant_caravan", slot_quest_target_center),
    (str_store_party_name, s3, ":destination"),],
   "I'll breathe easy when we reach {s3} and not a moment sooner. Let's keep moving.", "close_window",[(assign, "$g_leave_encounter",1)]],

#caravan merchants
  [anyone,"start",
   [(eq, "$caravan_escort_state",1),
    (eq, "$g_encountered_party","$caravan_escort_party_id"),
    (le, "$talk_context",tc_party_encounter),
    #SB : fix certain calculations and strings
    (store_distance_to_party_from_party, ":distance", "$caravan_escort_destination_town", "$caravan_escort_party_id"),
    (lt, ":distance", 5),
    (try_begin),
      (party_is_in_town, "$caravan_escort_party_id", "$caravan_escort_destination_town"),
      (assign, reg3, 0),
    (else_try),
      (str_store_party_name, s3, "$caravan_escort_destination_town"),
      (assign, reg3, 1),
    (try_end),
    (call_script, "script_game_get_money_text", "$caravan_escort_agreed_reward"),
    ],
   "{reg3?There! I can see the walls of {s3} in the distance:Thank you, {playername}}. We've made it safely.\
 Here, take this purse of {s1}, as I promised. I hope we can travel together again someday.", "close_window",
   [
    (assign,"$caravan_escort_state",0),
    #SB : script call for completion
    (try_begin),
      (eq, "$g_dplmc_player_disguise", 1), #enabled
      (call_script, "script_acquire_disguise", disguise_guard),
    (try_end),
    (call_script, "script_troop_add_gold", "trp_player", "$caravan_escort_agreed_reward"),
    (assign,reg(4), "$caravan_escort_agreed_reward"),
    (val_mul,reg(4), 1),
    (add_xp_as_reward,reg(4)),
    (assign, "$g_leave_encounter",1),
    ]],

  [anyone,"start",
   [(eq, "$caravan_escort_state", 1),
    (eq, "$g_encountered_party", "$caravan_escort_party_id"),
    (eq, "$talk_context", tc_party_encounter),
    ],
   "We've made it this far... Is everything clear up ahead?", "talk_caravan_escort",[]],
  [anyone|plyr,"talk_caravan_escort", [],
   "There might be bandits nearby. Stay close.", "talk_caravan_escort_2a",[]],
  [anyone,"talk_caravan_escort_2a", [],
   "Trust me, {playername}, we're already staying as close to you as we can. Lead the way.", "close_window",[(assign, "$g_leave_encounter",1)]],
  [anyone|plyr,"talk_caravan_escort", [],
   "No sign of trouble, we can breathe easy.", "talk_caravan_escort_2b",[]],
  [anyone,"talk_caravan_escort_2b", [],
   "I'll breathe easy when we reach {s1} and not a moment sooner. Let's keep moving.", "close_window",[[str_store_party_name,s1,"$caravan_escort_destination_town"],(assign, "$g_leave_encounter",1)]],

  [anyone,"start", [(eq,"$talk_context", tc_party_encounter),
                    (eq, "$g_encountered_party_type", spt_kingdom_caravan),
                    (party_slot_ge, "$g_encountered_party", slot_party_last_toll_paid_hours, "$g_current_hours"),
                    ],
   "What do you want? We paid our toll to you less than three days ago.", "merchant_talk",[]],

  [anyone,"start", [(eq,"$talk_context", tc_party_encounter),(eq, "$g_encountered_party_type", spt_kingdom_caravan),(ge,"$g_encountered_party_relation",0)],
   "Hail, friend.", "merchant_talk",[]],

  [anyone,"start", [(eq,"$talk_context", tc_party_encounter),
                    (eq, "$g_encountered_party_type", spt_kingdom_caravan),
                    (lt,"$g_encountered_party_relation",0),
                    (eq, "$g_encountered_party_faction", "fac_merchants"),
                    ],
   "What do you want? We are but simple merchants, we've no quarrel with you, so leave us alone.", "merchant_talk",[]],

  [anyone,"start", [(eq,"$talk_context", tc_party_encounter),
                    (eq, "$g_encountered_party_type", spt_kingdom_caravan),
                    (lt,"$g_encountered_party_relation",0),
                    (faction_get_slot, ":faction_leader", "$g_encountered_party_faction",slot_faction_leader),
                    (str_store_troop_name, s9, ":faction_leader"),
                    #SB : gender string
                    (call_script, "script_dplmc_store_troop_is_female_reg", ":faction_leader", 4),
                    ],
   "Be warned, knave! This caravan is under the protection of {s9}.\
 Step out of our way or you will face {reg4?her:his} fury!", "merchant_talk",[]],


  [anyone,"start", [(party_slot_eq, "$g_encountered_party", slot_party_type, spt_kingdom_caravan),(this_or_next|eq,"$talk_context", tc_party_encounter),(eq,"$talk_context", 0)],
   "Yes? What do you want?", "merchant_talk",[]],
  [anyone,"merchant_pretalk", [], "Anything else?", "merchant_talk",[]],

  [anyone|plyr,"merchant_talk", [(le,"$talk_context", tc_party_encounter),
                                 (check_quest_active, "qst_cause_provocation"),
                                 (neg|check_quest_concluded, "qst_cause_provocation"),
                                 (quest_slot_eq, "qst_cause_provocation", slot_quest_target_faction, "$g_encountered_party_faction"),
                                 (quest_get_slot, ":giver_troop", "qst_cause_provocation", slot_quest_giver_troop),
                                 (store_faction_of_troop, ":giver_troop_faction", ":giver_troop"),
                                 (str_store_faction_name, s17, ":giver_troop_faction"),
                                 ],
   "You are trespassing in the territory of the {s17}. I am confiscating this caravan and all its goods!", "caravan_start_war_quest_1",[]],
  [anyone,"caravan_start_war_quest_1", [(quest_get_slot, ":giver_troop", "qst_cause_provocation", slot_quest_giver_troop),
                                 (store_faction_of_troop, ":giver_troop_faction", ":giver_troop"),
                                 (str_store_faction_name, s17, ":giver_troop_faction"),
  ],
   "What? What nonsense is this? We are at peace with the {s17}, and are free to cross its lands!", "caravan_start_war_quest_2",[]],
  [anyone|plyr,"caravan_start_war_quest_2", [], "We'll see about that! Defend yourselves!", "merchant_attack",[]],
  [anyone|plyr,"caravan_start_war_quest_2", [], "Hmm. Maybe this was all a misunderstanding. Farewell.", "close_window",[(assign, "$g_leave_encounter",1)]],


  [anyone|plyr,"merchant_talk", [(le,"$talk_context", tc_party_encounter),(eq, "$g_encountered_party_faction", "$players_kingdom")], "I have an offer for you.", "merchant_talk_offer",[]],
  #SB : moved dishonor condition up here
  # [anyone,"merchant_talk_offer", [(le, "$player_honor", -10),], "In truth, {playername}, your reputation as a blackguard precedes you and we will not hear another word from you, even if you threaten us.", "close_window",[(assign, "$g_leave_encounter", 1)]],
  [anyone,"merchant_talk_offer", [], "What is it?", "merchant_talk_offer_2",[]],
  [anyone,"merchant_talk_offer_else", [], "Anything else you'd like to ask?", "merchant_talk_offer_2",[]],

  [anyone|plyr,"merchant_talk_offer_2", [(eq,"$talk_context", tc_party_encounter),(eq, "$g_encountered_party_faction", "$players_kingdom"),
    #SB : cannot escort two parties
    (neg|check_quest_active, "qst_escort_merchant_caravan"),
  ],
   "I can escort you to your destination for a price.", "caravan_offer_protection",[]],

   #SB : pay off debts
  [anyone|plyr,"merchant_talk_offer_2", [
    (gt, "$debt_to_merchants_guild", 0),
    (store_troop_gold,":amount","trp_player"),
    (ge,":amount","$debt_to_merchants_guild"),
    (call_script, "script_game_get_money_text", "$debt_to_merchants_guild"),
  ],
   "I wish to pay off the {s1} I owe the merchant's guild.", "caravan_offer_paydebt",[]],
  [anyone, "caravan_offer_paydebt", [
    (call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),
  ], "Of course, {s0}. You have my word your money will be delivered to the guild.", "merchant_pretalk",[
    #TODO allow players to attack to get money back?
    (troop_remove_gold, "trp_player","$debt_to_merchants_guild"),
    (assign, "$debt_to_merchants_guild", 0),
  ]],

   #SB : disguise into town fork, also merchant_talk_offer right now only works for same-faction caravans
  [anyone|plyr,"merchant_talk_offer_2", [
    (eq, 1, 0), #disabled for now
    (party_get_slot, ":destination", "$g_encountered_party", slot_party_ai_object),
    (store_faction_of_party, ":town_faction", ":destination"),
    (store_relation, ":cur_rel", "$players_kingdom", ":town_faction"),
    (lt, ":cur_rel", 0),
  ],
   "I want to enter {s12} as part of your caravan.", "caravan_offer_disguise",[]],

  # [anyone,"caravan_offer_disguise", [(le, "$player_honor", -10),], "In truth, {playername}, your reputation as a blackguard preceeds you and we will not hear another word from you, even if you threaten us.", "close_window",[]],
  [anyone,"caravan_offer_disguise", [(gt, "$debt_to_merchants_guild", 50),], "I believe you have a few denars to clear with the merchants guild. I do not trust a man who cannot pay {his/her} debts to travel with us.", "merchant_talk_offer_else",[]],
  [anyone,"caravan_offer_disguise", [(neg|troop_slot_ge,"trp_player",slot_troop_renown, 75),], "Sorry, friend, we do not admit strangers so easily and neither will the guards, I think.", "merchant_talk_offer_else",[]],
  [anyone,"caravan_offer_disguise", [(lt,"$g_encountered_party_relation",0),], "I am sorry, I cannot abet your entrance to {s12} in good conscience.", "merchant_talk_offer_else",[]],
  [anyone,"caravan_offer_disguise", [(troop_get_slot, ":disguise", "trp_player", slot_troop_player_disguise_sets),
    (store_and, ":guard", ":disguise", disguise_guard), 
    (store_and, ":merchant", ":disguise", disguise_merchant),
    (store_add, ":disguise", ":guard", ":merchant"),
    (eq, ":disguise", 0),
    ], 
  "I cannot help you. It would endanger our business in {s12} to take you in, {playername}, when your intent is so conspicuous. You'll have to make do without our aid.", "merchant_pretalk",[]],

  [anyone,"caravan_offer_disguise", [
    ], 
  "For the right price, we can make room for you in our caravan. If you have a good head for numbers, you'll fit right in with the other merchants. If you're more of the martial sort, you're more than welcome to help out among the caravan guards.", "caravan_choose_disguise",[]],
  [anyone|plyr,"caravan_choose_disguise", [
    (troop_get_slot, ":disguise", "trp_player", slot_troop_player_disguise_sets),
    (val_and, ":disguise", disguise_guard),
    (eq, ":disguise", disguise_guard),
    ], 
  "I will ready my weapons and stay alert.", "caravan_offer_disguise_continue",[]],

  [anyone|plyr,"caravan_choose_disguise", [
    (troop_get_slot, ":disguise", "trp_player", slot_troop_player_disguise_sets),
    (val_and, ":disguise", disguise_merchant),
    (eq, ":disguise", disguise_merchant),
    ], 
  "Yes, I clearly have important business to do.", "caravan_offer_disguise_continue",[]],

  #disable for now, nobody uses it anyways
  [anyone,"caravan_offer_disguise_continue", [
    ], 
  "Very well. We'll be moving on to {s12}. Enjoy the ride, {s0}, but keep your eye out for brigands...", "close_window",[
    (assign, "$g_leave_encounter", 1),
    (party_set_bandit_attraction, "$g_encountered_party", 0), #prevent awkward attacks
    (set_camera_follow_party, "$g_encountered_party"),
    # (party_attach_to_party, "p_main_party", "$g_encountered_party"),
    # (party_set_icon, "p_main_party", icon_camp),
  
  ]],

##  [anyone|plyr,"merchant_talk_offer_2", [(troop_slot_eq, "$g_talk_troop", slot_troop_is_prisoner, 0),
##                                 (neg|faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "$g_talk_troop"), #he is not a faction leader!
##                                 (call_script, "script_get_number_of_hero_centers", "$g_talk_troop"),
##                                 (eq, reg0, 0), #he has no castles or towns
##                                 (hero_can_join),
##                             ],
##   "I need capable men like you. Will you join me?", "knight_offer_join",[
##       ]],

  [anyone|plyr,"merchant_talk_offer_2", [], "Nothing. Forget it", "merchant_pretalk",[]],

  [anyone|plyr,"merchant_talk", [(check_quest_active, "qst_track_down_bandits"),
  ], "I am hunting a group of bandits with the following description... Have you seen them?", "merchant_bandit_information",[]],
  [anyone,"merchant_bandit_information", [
	(call_script, "script_get_manhunt_information_to_s15", "qst_track_down_bandits"),
  ], "{s15}", "merchant_pretalk",[]],


  [anyone|plyr,"merchant_talk", [(eq,"$talk_context", tc_party_encounter), #TODO: For the moment don't let attacking if merchant has paid toll.
                                 ], "Tell me about your journey.", "merchant_trip_explanation",[]],

  [anyone, "merchant_trip_explanation", [
  	  (party_get_slot, ":origin", "$g_encountered_party", slot_party_last_traded_center),
  	  (party_get_slot, ":destination", "$g_encountered_party", slot_party_ai_object),
	  (str_store_party_name, s11, ":origin"),
	  (str_store_party_name, s12, ":destination"),

	  (str_store_string, s14, "str___we_believe_that_there_is_money_to_be_made_selling_"),
      (store_sub, ":item_to_price_slot", slot_town_trade_good_prices_begin, trade_goods_begin),
	  (assign, ":at_least_one_item_found", 0),
	  (try_for_range, ":cur_goods", trade_goods_begin, trade_goods_end),
        (store_add, ":cur_goods_price_slot", ":cur_goods", ":item_to_price_slot"),
		(party_get_slot, ":origin_price", ":origin", ":cur_goods_price_slot"),
		(party_get_slot, ":destination_price", ":destination", ":cur_goods_price_slot"),

		(gt, ":destination_price", ":origin_price"),
		(store_sub, ":price_dif", ":destination_price", ":origin_price"),

		(gt, ":price_dif", 200),
		(str_store_item_name, s15, ":cur_goods"),
		(str_store_string, s14, "str_s14s15_"),

		(assign, ":at_least_one_item_found", 1),
	  (try_end),

	  (try_begin),
		(eq, ":at_least_one_item_found", 0),
	    (str_store_string, s14, "str__we_carry_a_selection_of_goods_although_the_difference_in_prices_for_each_is_not_so_great_we_hope_to_make_a_profit_off_of_the_whole"),
	  (else_try),
		(str_store_string, s14, "str_s14and_other_goods"),

	  (try_end),

  ], "We are coming from {s11} and heading to {s12}.{s14}", "merchant_pretalk", []],



  [anyone|plyr,"merchant_talk", [(eq,"$talk_context", tc_party_encounter), #TODO: For the moment don't let attacking if merchant has paid toll.
                                 (neg|party_slot_ge, "$g_encountered_party", slot_party_last_toll_paid_hours, "$g_current_hours"),
                                 ], "I demand something from you!", "merchant_demand",[]],
  [anyone,"merchant_demand", [(eq,"$talk_context", tc_party_encounter)], "What do you want?", "merchant_demand_2",[]],

  [anyone|plyr,"merchant_demand_2", [(neq,"$g_encountered_party_faction","$players_kingdom")], "There is a toll for free passage here!", "merchant_demand_toll",[]],

  [anyone,"merchant_demand_toll", [(gt, "$g_strength_ratio", 70),
                                        (store_div, reg6, "$g_ally_strength", 2),
                                        (val_add, reg6, 40),
                                        (assign, "$temp", reg6),
                                        ], "Please, I don't want any trouble. I can give you {reg6} denars, just let us go.", "merchant_demand_toll_2",[]],
  [anyone,"merchant_demand_toll", [(store_div, reg6, "$g_ally_strength", 4),
                                        (val_add, reg6, 10),
                                        (assign, "$temp", reg6),
                                        ], "I don't want any trouble. I can give you {reg6} denars if you'll let us go.", "merchant_demand_toll_2",[]],

  [anyone|plyr,"merchant_demand_toll_2", [], "Agreed, hand it over and you may go in peace.", "merchant_demand_toll_accept",[]],
  [anyone,"merchant_demand_toll_accept", [(assign, reg6, "$temp")], "Very well then. Here's {reg6} denars. ", "close_window",
   [(assign, "$g_leave_encounter",1),
    (call_script, "script_troop_add_gold", "trp_player", "$temp"),
    (store_add, ":toll_finish_time", "$g_current_hours", merchant_toll_duration),
    (party_set_slot, "$g_encountered_party", slot_party_last_toll_paid_hours, ":toll_finish_time"),
    (try_begin),
      (ge, "$g_encountered_party_relation", -5),
      (store_relation,":rel", "$g_encountered_party_faction","fac_player_supporters_faction"),
      (try_begin),
        (gt, ":rel", 0),
        (val_sub, ":rel", 1),
      (try_end),
      (val_sub, ":rel", 1),
      (call_script, "script_set_player_relation_with_faction", "$g_encountered_party_faction", ":rel"),
    (try_end),
### Troop commentaries changes begin
    (call_script, "script_add_log_entry", logent_caravan_accosted, "trp_player",  -1, -1, "$g_encountered_party_faction"),
### Troop commentaries changes end
    (assign, reg6, "$temp"),
    ]],

  [anyone|plyr,"merchant_demand_toll_2", [], "I changed my mind, I can't take your money.", "merchant_pretalk",[]],

  [anyone|plyr,"merchant_demand_toll_2", [], "No, I want everything you have!", "merchant_attack",[]],

  [anyone|plyr,"merchant_demand_2", [(neq,"$g_encountered_party_faction","$players_kingdom")], "Hand over your gold and valuables now!", "merchant_attack_begin",[]],
  [anyone|plyr,"merchant_demand_2", [], "Nothing. Forget it.", "merchant_pretalk",[]],


  [anyone,"merchant_attack_begin", [], "Are you robbing us?{s11}", "merchant_attack_verify",[
  (str_clear, s11),
  (try_begin),
	(faction_slot_ge, "$g_encountered_party_faction", slot_faction_truce_days_with_factions_begin, 1),
	(str_store_string, s11, "str__have_you_not_signed_a_truce_with_our_lord"),
  (try_end),
  ]],
  [anyone|plyr,"merchant_attack_verify", [], "Robbing you? No, no! It was a joke.", "merchant_attack_verify_norob",[]],
  [anyone,"merchant_attack_verify_norob", [], "God, don't joke about that, {lad/lass}. For a moment I thought we were in real trouble.", "close_window",[(assign, "$g_leave_encounter",1)]],
  [anyone|plyr,"merchant_attack_verify", [], "Of course I'm robbing you. Now hand over your goods.", "merchant_attack",[
    (call_script, "script_diplomacy_party_attacks_neutral", "p_main_party", "$g_encountered_party"),
  ]],

  [anyone,"merchant_attack", [], "Damn you, you won't get anything from us without a fight!", "close_window",
   [(store_relation,":rel", "$g_encountered_party_faction","fac_player_supporters_faction"),
    (try_begin),
      (gt, ":rel", 0),
      (val_sub, ":rel", 10),
    (try_end),
    (val_sub, ":rel", 5),
    (call_script, "script_set_player_relation_with_faction", "$g_encountered_party_faction", ":rel"),
### Troop commentaries changes begin
	(call_script, "script_diplomacy_party_attacks_neutral", "p_main_party", "$g_encountered_party"),
### Troop commentaries changes end
    ]],

    #SB : change to pre-calculate distance
  [anyone,"caravan_offer_protection", [
    (get_party_ai_object,":caravan_destination","$g_encountered_party"),
    (store_distance_to_party_from_party, ":distance",":caravan_destination","$g_encountered_party"),
    (lt,":distance",10),
    (str_store_party_name, s10, ":caravan_destination"),
  ],
   "An escort? We're almost at {s10} already! Thank you for the offer, though.", "close_window",[(assign, "$g_leave_encounter",1)]],
  [anyone,"caravan_offer_protection", [],
   "These roads are dangerous indeed. One can never have enough protection.", "caravan_offer_protection_2",
   [(get_party_ai_object,":caravan_destination","$g_encountered_party"),
    (store_distance_to_party_from_party, "$caravan_distance_to_target",":caravan_destination","$g_encountered_party"),
    (store_sub,"$caravan_escort_offer","$caravan_distance_to_target", 10),
    (call_script, "script_party_calculate_strength", "p_main_party", 0),
    (assign, ":player_strength", reg0),
    (val_min, ":player_strength", 200),
    (val_add, ":player_strength", 20),
    (val_mul,"$caravan_escort_offer",":player_strength"),
    (val_div,"$caravan_escort_offer",50),
    (val_max, "$caravan_escort_offer", 5),
    ]],
  # [anyone,"caravan_offer_protection_2", [[lt,"$caravan_distance_to_target",10]],
   # "An escort? We're almost there already! Thank you for the offer, though.", "close_window",[(assign, "$g_leave_encounter",1)]],
  [anyone,"caravan_offer_protection_2", [(get_party_ai_object,":caravan_destination","$g_encountered_party"),
    (str_store_party_name, s1,":caravan_destination"),
    (assign,reg2,"$caravan_escort_offer")],
   "We are heading to {s1}. I will pay you {reg2} denars if you escort us there.", "caravan_offer_protection_3",
   []],
  [anyone|plyr,"caravan_offer_protection_3", [],
   "Agreed.", "caravan_offer_protection_4",[]],
  [anyone,"caravan_offer_protection_4", [],
   "I want you to stay close to us along the way.\
 We'll need your help if we get ambushed by bandits.", "caravan_offer_protection_5",[]],
  [anyone|plyr,"caravan_offer_protection_5", [],
   "Don't worry, you can trust me.", "caravan_offer_protection_6",[]],
  [anyone,"caravan_offer_protection_6", [(get_party_ai_object,":caravan_destination","$g_encountered_party"),
    (str_store_party_name,1,":caravan_destination")],
   "Good. Come and collect your money when we're within sight of {s1}. For now, let's just get underway.", "close_window",
   [(get_party_ai_object,":caravan_destination","$g_encountered_party"),
    (assign, "$caravan_escort_destination_town", ":caravan_destination"),
    (assign, "$caravan_escort_party_id", "$g_encountered_party"),
    (assign, "$caravan_escort_agreed_reward", "$caravan_escort_offer"),
    (assign, "$caravan_escort_state", 1),
    (assign, "$g_leave_encounter",1)
   ]],
  [anyone|plyr,"caravan_offer_protection_3", [],
   "Forget it.", "caravan_offer_protection_4b",[]],
  [anyone,"caravan_offer_protection_4b", [],
   "Perhaps another time, then.", "close_window",[(assign, "$g_leave_encounter",1)]],

  [anyone|plyr,"merchant_talk", [(eq,"$talk_context", tc_party_encounter),(lt, "$g_talk_troop_faction_relation", 0)],
   "Not so fast. First, hand over all your goods and money.", "talk_caravan_enemy_2",[]],

  [anyone,"talk_caravan_enemy_2", [],
   "Never. It is our duty to protect these goods. You shall have to fight us, brigand!", "close_window",
   [
    (store_relation,":rel","$g_encountered_party_faction","fac_player_supporters_faction"),
    (val_min,":rel",0),
    (val_sub,":rel",4),
    (call_script, "script_set_player_relation_with_faction", "$g_encountered_party_faction", ":rel"),
	(call_script, "script_diplomacy_party_attacks_neutral", "p_main_party", "$g_encountered_party"),
    ]],

  [anyone|plyr,"merchant_talk", [], "[Leave]", "close_window",[(assign, "$g_leave_encounter",1)]],




# Prison Guards
  [anyone,"start", [(eq, "$talk_context", 0),(faction_slot_eq, "$g_encountered_party_faction", slot_faction_prison_guard_troop, "$g_talk_troop"),
					##diplomacy start+ Handle player is co-ruler of NPC kingdom
					(assign, ":is_coruler", 0),
					(try_begin),
						(eq, "$g_encountered_party_faction", "$players_kingdom"),
						(is_between, "$players_kingdom", npc_kingdoms_begin, npc_kingdoms_end),
						(call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", "$players_kingdom"),
						(ge, reg0, DPLMC_FACTION_STANDING_LEADER_SPOUSE),
						(assign, ":is_coruler", 1),
					(try_end),
					(this_or_next|eq, ":is_coruler", 1),
					##diplomacy end+
                    (this_or_next|eq, "$g_encountered_party_faction", "fac_player_supporters_faction"),
                    (             party_slot_eq, "$g_encountered_party", slot_town_lord, "trp_player"),
					##diplomacy start+
					#it may be appropriate to use "your highness" instead of "my {lord/lady}"
					(call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),#added
                    ],
   "Good day, {s0}. Will you be visiting the prison?", "prison_guard_players",[]],#changed "my {lord/lady}" to "{s0}"
   ##diplomacy end+
  [anyone|plyr,"prison_guard_players", [],
   "Yes. Unlock the door.", "close_window",[(call_script, "script_enter_dungeon", "$current_town", "mt_visit_town_castle")]],
  #SB : allow setting custom guard troops
  [anyone|plyr,"prison_guard_players", [
    (call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", "$players_kingdom"),
    (eq, reg0, DPLMC_FACTION_STANDING_LEADER), #assume co-spouse can't enforce changes
    (eq, "$g_player_culture", 0), #player faction culture is not set
  ],
   "You've been lax in your duties. Stand down and I'll choose your replacement.", "dplmc_guard_talk_replace",[
     (assign, "$diplomacy_var", slot_faction_prison_guard_troop), #slot to change
     (assign, "$diplomacy_var2", 20), #level requirement
   ]],
  [anyone|plyr,"prison_guard_players", [],
   "No, not now.", "close_window",[]],

  [anyone,"start", [(eq, "$talk_context", 0),(faction_slot_eq, "$g_encountered_party_faction", slot_faction_prison_guard_troop, "$g_talk_troop")],
   "Yes? What do you want?", "prison_guard_talk",[]],

  [anyone|plyr,"prison_guard_talk", [],
   "Who is imprisoned here?", "prison_guard_ask_prisoners",[]],
  [anyone|plyr,"prison_guard_talk", [],
   "I want to speak with a prisoner.", "prison_guard_visit_prison",[]],

##diplomacy begin
  [anyone|plyr,"prison_guard_talk", [
    (party_slot_eq, "$g_encountered_party", slot_town_lord, "trp_player"),
    ],
   "I want to release a prisoner.", "dplmc_prison_guard_talk_ask_prisoner",[]],

  [anyone,"dplmc_prison_guard_talk_ask_prisoner",
   [],
   "Alright, which prisoner shall I set free?", "dplmc_prison_guard_talk_prisoner_select",[
 ]],

  ##select enemy prisoner
 [anyone|plyr|repeat_for_troops, "dplmc_prison_guard_talk_prisoner_select",
   [
     (store_repeat_object, ":troop_no"),
     (troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_hero),
     (troop_get_slot, ":party", ":troop_no", slot_troop_prisoner_of_party),
     (eq, ":party", "$g_encountered_party"),
     (str_store_troop_name, s10, ":troop_no"),
     (store_faction_of_troop, ":faction_no", ":troop_no"),
     (str_store_faction_name, s11, ":faction_no"),
     ],
   "{s10} of {s11}.", "dplmc_prison_guard_exchange_prisoner_ask_confirm",
   [
     (store_repeat_object, "$diplomacy_var"),
     (store_faction_of_troop, "$g_faction_selected", "$diplomacy_var"),
     ]],

  [anyone|plyr,"dplmc_prison_guard_talk_prisoner_select", [],
   "No one.", "close_window",
   [
   ]],

  [anyone,"dplmc_prison_guard_exchange_prisoner_ask_confirm",
   [
     (str_store_troop_name, s10, "$diplomacy_var"),
     (store_faction_of_troop, ":faction_no", "$diplomacy_var"),
     (str_store_faction_name, s11, ":faction_no"),
   ],
   "As you wish, I will release {s10} of {s11}.", "dplmc_prison_guard_exchange_prisoner_confirm",[
 ]],

  [anyone|plyr,"dplmc_prison_guard_exchange_prisoner_confirm", [],
   "Very well.", "close_window",
   [
      (party_remove_prisoners, "$g_encountered_party", "$diplomacy_var", 1),
      (call_script, "script_remove_troop_from_prison", "$diplomacy_var"),
      (str_store_troop_name, s7, "$diplomacy_var"),
      (display_message, "str_dplmc_has_been_set_free"),
      (call_script, "script_change_player_relation_with_troop", "$diplomacy_var", 3),
      (call_script, "script_change_player_honor", 1),
      (call_script, "script_update_troop_notes", "$diplomacy_var"),
   ]],

  [anyone|plyr,"dplmc_prison_guard_exchange_prisoner_confirm", [],
   "No, I changed my mind.", "close_window",[]],
##diplomacy end
  [anyone,"prison_guard_ask_prisoners", [],
   "Currently, {s50} {reg1?are:is} imprisoned here.{s49}","prison_guard_talk",[
    (party_clear, "p_temp_party"),
	(party_clear, "p_temp_party_2"),
    (assign, ":num_heroes_in_dungeon", 0),
    (assign, ":num_heroes_given_parole", 0),

    (party_get_num_prisoner_stacks, ":num_stacks","$g_encountered_party"),
    (try_for_range, ":i_stack", 0, ":num_stacks"),
        (party_prisoner_stack_get_troop_id, ":stack_troop","$g_encountered_party",":i_stack"),
        (troop_is_hero, ":stack_troop"),
		(try_begin),
			(call_script, "script_cf_prisoner_offered_parole", ":stack_troop"),
			(party_add_members, "p_temp_party_2", ":stack_troop", 1),
			(val_add, ":num_heroes_given_parole", 1),
		(else_try),
			(party_add_members, "p_temp_party", ":stack_troop", 1),
			(val_add, ":num_heroes_in_dungeon", 1),
		(try_end),
    (try_end),
    (call_script, "script_print_party_members", "p_temp_party"),
	(str_store_string, s50, "str_s51"),
    (try_begin),
        (gt, ":num_heroes_in_dungeon", 1),
        (assign, reg1, 1),
    (else_try),
        (assign, reg1, 0),
    (try_end),

	(str_clear, s49),
    (try_begin),
        (ge, ":num_heroes_given_parole", 1),
		(call_script, "script_print_party_members", "p_temp_party_2"),
		(try_begin),
			(ge, ":num_heroes_given_parole", 2),
			(assign, reg2, 1),
		(else_try),
			(assign, reg2, 0),
		(try_end),
		(str_store_string, s49, "str__meanwhile_s51_reg2areis_being_held_in_the_castle_but_reg2havehas_made_pledges_not_to_escape_and_reg2areis_being_held_in_more_comfortable_quarters" ), #somewhat awkward wording prevents both gender and singular/plural pronoun issues
    (try_end)


	]],

  [anyone,"prison_guard_visit_prison",
  [
    (this_or_next|faction_slot_eq, "$g_encountered_party_faction", slot_faction_marshall, "trp_player"),
    (this_or_next|party_slot_eq, "$g_encountered_party", slot_town_lord, "trp_player"),
    (eq, "$g_encountered_party_faction", "$players_kingdom"),
  ],
   "Of course, {sir/madam}. Go in.", "close_window",
   [
     (call_script, "script_enter_dungeon", "$current_town", "mt_visit_town_castle")
   ]],

  [anyone, "prison_guard_visit_prison",
  [
    #below condition is added by ozan, please lets discuss if it is needed or not. But I think this condition is needed because if there is nobody in prison
    #prison guard should not say you need to get permission, or take me money ext to let player go inside.
    (assign, ":num_heroes_in_dungeon", 0),
    (party_get_num_prisoner_stacks, ":num_stacks", "$g_encountered_party"),
    (assign, ":end_condition", ":num_stacks"),
    (try_for_range, ":i_stack", 0, ":end_condition"),
      (party_prisoner_stack_get_troop_id, ":stack_troop","$g_encountered_party",":i_stack"),
      (troop_is_hero, ":stack_troop"),
      (try_begin),
        (call_script, "script_cf_prisoner_offered_parole", ":stack_troop"),
      (else_try),
        (val_add, ":num_heroes_in_dungeon", 1),
        (assign, ":end_condition", 0),
      (try_end),
    (try_end),

    (ge, ":num_heroes_in_dungeon", 1),
   ],
   "You need to get permission from the lord to talk to prisoners.", "prison_guard_visit_prison_2",[]],

  [anyone, "prison_guard_visit_prison", [], "There is nobody inside, therefore you can freely go inside and look around.", "prison_guard_visit_prison_nobody", []],

  [anyone|plyr,"prison_guard_visit_prison_nobody", [], "All right then. I'll take a look at the prison.", "close_window",
  [
    (call_script, "script_enter_dungeon", "$current_town", "mt_visit_town_castle"),
  ]],

  [anyone|plyr,"prison_guard_visit_prison_nobody", [], "I have more important business to do.", "close_window",[]],

  [anyone|plyr,"prison_guard_visit_prison_2", [], "All right then. I'll try that.", "close_window",[]],
  [anyone|plyr,"prison_guard_visit_prison_2", [], "Come on now. I thought you were the boss here.", "prison_guard_visit_prison_3",[]],
  [anyone,"prison_guard_visit_prison_3", [], "He-heh. You got that right. Still, I can't let you into the prison.", "prison_guard_visit_prison_4",[]],

  [anyone|plyr,"prison_guard_visit_prison_4", [], "All right then. I'll leave now.", "close_window",[]],
  [anyone|plyr,"prison_guard_visit_prison_4", [(store_troop_gold,":gold","trp_player"),(ge,":gold",100)],
   "I found a purse with 100 denars a few paces away. I reckon it belongs to you.", "prison_guard_visit_prison_5",[]],

  [anyone,"prison_guard_visit_prison_5", [], "Ah! I was looking for this all day. How good of you to bring it back {sir/madam}.\
 Well, now that I know what an honest {man/lady} you are, there can be no harm in letting you inside for a look. Go in.... Just so you know, though -- I'll be hanging onto the keys, in case you were thinking about undoing anyone's chains.", "close_window",
 [(troop_remove_gold, "trp_player",100),(call_script, "script_enter_dungeon", "$current_town", "mt_visit_town_castle")]],

  [anyone|plyr,"prison_guard_visit_prison_4", [],
   "Give me the keys to the cells -- now!", "prison_guard_visit_break",[
   ]],

  [anyone,"prison_guard_visit_break", [], "Help! Help! Prison break!", "close_window",[
  #SB : draw weapons, so player doesn't get an advantage
  (call_script, "script_encounter_agent_draw_weapon"),
  (call_script, "script_activate_town_guard"),
  (assign, "$g_main_attacker_agent", "$g_talk_agent"),
  (assign, "$talk_context", tc_prison_break),
#  (try_begin),
#		(store_relation, ":relation", "fac_player_faction", "$g_encountered_party_faction"),
#	Reduce relation with town
# (try_end),

   (assign, ":end_cond", kingdom_ladies_end),
   (try_for_range, ":prisoner", active_npcs_begin, ":end_cond"),
     (troop_set_slot, ":prisoner", slot_troop_mission_participation, 0), #new
   (try_end),
  ]],


  [anyone|plyr,"prison_guard_talk", [],
   "Never mind.", "close_window",[]],




# Castle Guards
  [anyone,"start", [(eq, "$talk_context", 0),(faction_slot_eq, "$g_encountered_party_faction", slot_faction_castle_guard_troop, "$g_talk_troop"),
  					##diplomacy start+ Handle player is co-ruler of NPC kingdom
					(assign, ":is_coruler", 0),
					(try_begin),
						(eq, "$g_encountered_party_faction", "$players_kingdom"),
						(is_between, "$players_kingdom", npc_kingdoms_begin, npc_kingdoms_end),
						(call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", "$players_kingdom"),
						(ge, reg0, DPLMC_FACTION_STANDING_LEADER_SPOUSE),
						(assign, ":is_coruler", 1),#ruler or co-ruler of faction
					(try_end),
					(this_or_next|eq, ":is_coruler", 1),
					##diplomacy end+
                    (this_or_next|eq, "$g_encountered_party_faction", "fac_player_supporters_faction"),
                    (             party_slot_eq, "$g_encountered_party", slot_town_lord, "trp_player")
                    ],
   "Your orders, {Lord/Lady}?", "castle_guard_players",[
   #SB : reset slot for visit filter
   (party_set_slot, "$current_town", slot_party_temp_slot_1, 0),  #reset to default bhvr
   ]],
  [anyone|plyr,"castle_guard_players", [],
   "Open the door. I'll go in.", "close_window",[(call_script, "script_enter_court", "$current_town")]],
  [anyone|plyr,"castle_guard_players", [
    (call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", "$players_kingdom"),
    (eq, reg0, DPLMC_FACTION_STANDING_LEADER), #assume co-spouse can't enforce changes
    (eq, "$g_player_culture", 0), #player faction culture is not set
  ],
   "Relieve yourself, soldier. Somebody else will guard the keep in your stead.", "dplmc_guard_talk_replace",[
     (assign, "$diplomacy_var", slot_faction_castle_guard_troop), #slot to change
     (assign, "$diplomacy_var2", 25), #level requirement, not much choice there
   ]],
  [anyone|plyr,"castle_guard_players", [],
   "Never mind.", "close_window",[]],


#SB : different prompts for different disguises
  [anyone|auto_proceed,"start", [(eq, "$talk_context", 0),(faction_slot_eq, "$g_encountered_party_faction", slot_faction_castle_guard_troop, "$g_talk_troop"),(gt, "$sneaked_into_town",disguise_none),
                    (gt,"$g_time_since_last_talk",0)],
   "Get out of my sight, beggar! You stink!", "castle_guard_sneaked_intro_ask",[]],
  # [anyone,"start", [(eq, "$talk_context", 0),(faction_slot_eq, "$g_encountered_party_faction", slot_faction_castle_guard_troop, "$g_talk_troop"),],
   # "Get lost before I lose my temper!", "close_window",[]],
  [anyone,"castle_guard_sneaked_intro_ask", [
    (eq, "$talk_context", tc_town_talk),
    (gt, "$sneaked_into_town",disguise_none),
    (eq, "$g_time_since_last_talk", 0),
  ], "Get lost before I lose my temper!", "close_window",[
    (agent_play_sound, "$g_talk_agent", "snd_encounter_nobleman"),
  ]],
  
  [anyone,"castle_guard_sneaked_intro_ask", [
    (eq, "$sneaked_into_town",disguise_pilgrim),
  ], "Get out of my sight, beggar! You stink!", "castle_guard_sneaked_intro_1",[]],
  
  #other commoner disguises
  [anyone,"castle_guard_sneaked_intro_ask", [
  ], "Where do you think you're going?", "castle_guard_sneaked_intro_1",[]],

  [anyone|plyr,"castle_guard_sneaked_intro_1", [], "I want to enter the hall and speak to the lord.", "castle_guard_sneaked_intro_2",[]],
  [anyone|plyr,"castle_guard_sneaked_intro_1", [], "[Leave]", "close_window",[]],
  [anyone,"castle_guard_sneaked_intro_2", [
    (eq, "$sneaked_into_town",disguise_pilgrim),
  ], "Are you out of your mind, {man/woman}?\
 Beggars are not allowed into the hall. Now get lost or I'll beat you bloody.", "close_window",[]],
  [anyone,"castle_guard_sneaked_intro_2", [
    (eq, "$sneaked_into_town",disguise_farmer),
  ], "Don't make me laugh. Go back to the dirt where you belong, peasant!", "close_window",[]],
  [anyone,"castle_guard_sneaked_intro_2", [
    (eq, "$sneaked_into_town",disguise_hunter),
  ], "What?! The lord has no need to speak to poachers. If you must sell your wares, use the servant's door, {man/woman}!", "close_window",[]],
  [anyone,"castle_guard_sneaked_intro_2", [
    (eq, "$sneaked_into_town",disguise_merchant),
  ], "Away with you, the lord does not deal with penny-pinching merchants. Speak with the guildmaster if you have business here.", "close_window",[]],
  [anyone,"castle_guard_sneaked_intro_2", [
    (eq, "$sneaked_into_town",disguise_guard),
  ], "You have the wrong ideas, friend. Mercenaries have no place in the great hall.", "close_window",[]],
  [anyone,"castle_guard_sneaked_intro_2", [
    (eq, "$sneaked_into_town",disguise_bard),
  ], "The last minstrel that attempted to gain entrance was chased out of town tarred and feathered. I doubt you wish the same fate.", "close_window",[]],


  [anyone,"start", [(eq, "$talk_context", 0),(faction_slot_eq, "$g_encountered_party_faction", slot_faction_castle_guard_troop, "$g_talk_troop")],
   "What do you want?", "castle_guard_intro_1",[]],
  [anyone|plyr,"castle_guard_intro_1", [],
   "I want to enter the hall and speak to the lord.", "castle_guard_intro_2",[]],
  [anyone|plyr,"castle_guard_intro_1", [],
   "Never mind.", "close_window",[]],

   [anyone,"castle_guard_intro_2", [
	(faction_slot_eq, "$g_encountered_party_faction", slot_faction_ai_state, sfai_feast),
	(faction_slot_eq, "$g_encountered_party_faction", slot_faction_ai_object, "$current_town"),

	(this_or_next|neq, "$players_kingdom", "$g_encountered_party_faction"),
		(neg|troop_slot_ge, "trp_player", slot_troop_renown, 50),

	(neg|troop_slot_ge, "trp_player", slot_troop_renown, 125),
	(neq, "$g_player_eligible_feast_center_no", "$current_town"),

	(neg|check_quest_active, "qst_wed_betrothed"),
	(neg|check_quest_active, "qst_wed_betrothed_female"),

	(neg|troop_slot_ge, "trp_player", slot_troop_spouse, 1), #Married players always make the cut

   ], "I'm afraid there is a feast in progress, and you are not invited.", "close_window",
   []],


   [anyone,"castle_guard_intro_2", [], "You can go in after leaving your weapons with me. No one is allowed to carry arms into the lord's hall.", "castle_guard_intro_3",
   []],

  [anyone|plyr,"castle_guard_intro_3", [], "Here, take my arms. I'll go in.", "close_window", [
  (party_set_slot, "$current_town", slot_party_temp_slot_1, 0), #SB : guard reset filter
  (call_script, "script_enter_court", "$current_town")]],

  [anyone|plyr,"castle_guard_intro_3", [], "No, I give my arms to no one.", "castle_guard_intro_2b", []],
  [anyone,"castle_guard_intro_2b", [], "Then you can't go in.", "close_window", []],

##  [anyone|plyr,"castle_guard_intro_1", [],
##   "Never mind.", "close_window",[]],
##  [anyone,"castle_guard_intro_2", [],
##   "Does the lord expect you?", "castle_guard_intro_3",[]],
##  [anyone|plyr,"castle_guard_intro_3", [], "Yes.", "castle_guard_intro_check",[]],
##  [anyone|plyr,"castle_guard_intro_3", [], "No.", "castle_guard_intro_no",[]],
##  [anyone,"castle_guard_intro_check", [], "Hmm. All right {sir/madam}.\
## You can go in. But you must leave your weapons with me. Noone's allowed into the court with weapons.", "close_window",[]],
##  [anyone,"castle_guard_intro_check", [], "You liar!\
## Our lord would have no business with a filthy vagabond like you. Get lost now before I kick your butt.", "close_window",[]],
##  [anyone,"castle_guard_intro_no", [], "Well... What business do you have here then?", "castle_guard_intro_4",[]],
##  [anyone|plyr,"castle_guard_intro_4", [], "I wish to present the lord some gifts.", "castle_guard_intro_gifts",[]],
##  [anyone|plyr,"castle_guard_intro_4", [], "I have an important matter to discuss with the lord. Make way now.", "castle_guard_intro_check",[]],
##  [anyone,"castle_guard_intro_gifts", [], "Really? What gifts?", "castle_guard_intro_5",[]],
##  [anyone|plyr,"castle_guard_intro_4", [], "Many gifts. For example, I have a gift of 20 denars here for his loyal servants.", "castle_guard_intro_gifts",[]],
##  [anyone|plyr,"castle_guard_intro_4", [], "My gifts are of no concern to you. They are for your lords and ladies..", "castle_guard_intro_check",[]],
##  [anyone,"castle_guard_intro_gifts", [], "Oh! you can give those 20 denars to me. I can distribute them for you.\
## You can enter the court and present your gifts to the lord. I'm sure he'll be pleased.\
## But you must leave your weapons with me. Noone's allowed into the court with weapons.", "close_window",[]],

#Kingdom Parties
#  [anyone,"start", [(this_or_next|eq,"$g_encountered_party_template","pt_swadian_foragers"),
#                    (eq,"$g_encountered_party_template","pt_vaegir_foragers"),
##  [anyone,"start", [(this_or_next|party_slot_eq,"$g_encountered_party",slot_party_type, spt_forager),
##                    (this_or_next|party_slot_eq,"$g_encountered_party",slot_party_type, spt_scout),
##                    (party_slot_eq,"$g_encountered_party",slot_party_type, spt_patrol),
##                    (str_store_faction_name,5,"$g_encountered_party_faction")],
##   "In the name of the {s5}.", "kingdom_party_encounter",[]],
##
##  [anyone,"kingdom_party_encounter", [(le,"$g_encountered_party_relation",-10)],
##   "Surrender now, and save yourself the indignity of defeat!", "kingdom_party_encounter_war",[]],
##  [anyone|plyr,"kingdom_party_encounter_war", [],  "[Go to Battle]", "close_window",[(encounter_attack)]],
##
##  [anyone,"kingdom_party_encounter", [(ge,"$g_encountered_party_relation",10)],
##   "Greetings, fellow warrior.", "close_window",[(eq,"$talk_context",tc_party_encounter),(assign, "$g_leave_encounter", 1)]],
##
##  [anyone,"kingdom_party_encounter", [],
##   "You can go.", "close_window",[]],








#Player Parties
##  [party_tpl|pt_old_garrison,"start", [],
##   "They told us to leave the castle to the new garrison {sir/madam}. So we left and came to rejoin you.", "player_old_garrison_encounter",[]],
##
##  [anyone|plyr,"player_old_garrison_encounter", [(party_can_join)],
##   "You have done well. You'll join my command now.", "close_window",[(assign, "$g_move_heroes", 1),
##                                        (call_script, "script_party_add_party", "p_main_party", "$g_encountered_party"),
##                                        (remove_party, "$g_encountered_party"),
##                                        (assign, "$g_leave_encounter", 1)]],
##  [anyone|plyr,"player_old_garrison_encounter", [(assign, reg1, 0),
##                                                 (try_begin),
##                                                   (neg|party_can_join),
##                                                   (assign, reg1, 1),
##                                                 (try_end)],
##   "You can't join us now{reg1?, I can't command all the lot of you:}. Follow our lead.", "close_window",[(party_set_ai_behavior, "$g_encountered_party", ai_bhvr_attack_party),
##                                                                         (party_set_ai_object, "$g_encountered_party", "p_main_party"),
##                                                                         (party_set_flags, "$g_encountered_party", pf_default_behavior, 0),
##                                                                         (assign, "$g_leave_encounter", 1)]],
##
##  [anyone|plyr,"player_old_garrison_encounter", [(assign, reg1, 0),
##                                                 (try_begin),
##                                                   (neg|party_can_join),
##                                                   (assign, reg1, 1),
##                                                 (try_end)],
##   "You can't join us now{reg1?, I can't command all the lot of you:}. Stay here and wait for me.", "close_window",[
##       (party_set_ai_behavior, "$g_encountered_party", ai_bhvr_travel_to_point),
##       (party_get_position, pos1, "$g_encountered_party"),
##       (party_set_ai_target_position, "$g_encountered_party", pos1),
##       (party_set_flags, "$g_encountered_party", pf_default_behavior, 0),
##       (assign, "$g_leave_encounter", 1)]],
##






  [anyone,"start", [(eq, "$talk_context", tc_castle_gate)],
   "What do you want?", "castle_gate_guard_talk",[]],

  [anyone,"castle_gate_guard_pretalk", [],
   "Yes?", "castle_gate_guard_talk",[]],

  [anyone|plyr,"castle_gate_guard_talk", [(ge, "$g_encountered_party_relation", 0)],
  "We need shelter for the night. Will you let us in?", "castle_gate_open",[]],
  [anyone|plyr,"castle_gate_guard_talk", [(party_slot_ge, "$g_encountered_party", slot_town_lord, 1)], "I want to speak with the lord of the castle.", "request_meeting_castle_lord",[]],
  [anyone|plyr,"castle_gate_guard_talk", [], "I want to speak with someone in the castle.", "request_meeting_other",[]],

  [anyone|plyr,"castle_gate_guard_talk", [], "[Leave]", "close_window",[]],

  [anyone,"request_meeting_castle_lord", [(party_get_slot, ":castle_lord", "$g_encountered_party", slot_town_lord),
                                         (call_script, "script_get_troop_attached_party", ":castle_lord"),
                                         (eq, "$g_encountered_party", reg0),
                                         (str_store_troop_name, s2, ":castle_lord"),
                                         (assign, "$lord_requested_to_talk_to", ":castle_lord"),
                                          ],  "Wait here. {s2} will see you.", "close_window",[]],

  [anyone,"request_meeting_castle_lord", [],  "My lord is not here now.", "castle_gate_guard_pretalk",[]],

  [anyone,"request_meeting_other", [],  "Who is that?", "request_meeting_3",[]],

  [anyone|plyr|repeat_for_troops,"request_meeting_3", [(store_repeat_object, ":troop_no"),
                                                       (troop_is_hero, ":troop_no"),
                                                       (troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_hero),
                                                       (call_script, "script_get_troop_attached_party", ":troop_no"),
                                                       (eq, "$g_encountered_party", reg0),
                                                       (str_store_troop_name, s3, ":troop_no"),
                                                       ],
   "{s3}", "request_meeting_4",[(store_repeat_object, "$lord_requested_to_talk_to")]],

  [anyone|plyr,"request_meeting_3", [], "Never mind.", "close_window",[(assign, "$lord_requested_to_talk_to", 0)]],

  [anyone,"request_meeting_4", [##diplomacy start+ correct pronoun
  (call_script, "script_dplmc_store_troop_is_female",  "$lord_requested_to_talk_to"),
], "Wait there. I'll send {reg0?her:him} your request.", "request_meeting_5",[]],#"him" to "{reg0?her:him}"
##diplomacy end+

  [anyone|plyr,"request_meeting_5", [], "I'm waiting...", "request_meeting_6",[]],

  [anyone,"request_meeting_6",
   [
     (call_script, "script_troop_get_player_relation", "$lord_requested_to_talk_to"),
     (assign, ":lord_relation", reg0),
     (gt, ":lord_relation", -20),
    ], "All right. {s2} will talk to you now.", "close_window",[(str_store_troop_name, s2, "$lord_requested_to_talk_to")]],

  [anyone,"request_meeting_6", [(str_store_troop_name, s2, "$lord_requested_to_talk_to"),
  ##diplomacy start+ correct pronoun
  (call_script, "script_dplmc_store_troop_is_female",  "$lord_requested_to_talk_to"),
  ], "{s2} says {reg0?she:he} will not see you. Begone now.", "close_window",[]],#"he" to "{reg0?she:he}"
  ##diplomacy end+

  [anyone,"castle_gate_open", [(party_get_slot, ":castle_lord", "$g_encountered_party", slot_town_lord),
                                         (call_script, "script_get_troop_attached_party", ":castle_lord"),
                                         (eq, "$g_encountered_party", reg0),
                                         (ge, "$g_encountered_party_relation", 0),
                                         (call_script, "script_troop_get_player_relation", ":castle_lord"),
                                         (assign, ":castle_lord_relation", reg0),
                                         #(troop_get_slot, ":castle_lord_relation", ":castle_lord", slot_troop_player_relation),
                                         (ge, ":castle_lord_relation", 5),
                                         (str_store_troop_name, s2, ":castle_lord")
                                         ],  "My lord {s2} will be happy to see you {sir/madam}.\
 Come on in. I am opening the gates for you.", "close_window",[(assign,"$g_permitted_to_center",1)]],


  [anyone,"castle_gate_open", [(party_get_slot, ":castle_lord", "$g_encountered_party", slot_town_lord),
                                         (call_script, "script_get_troop_attached_party", ":castle_lord"),
                                         (neq, "$g_encountered_party", reg0),
                                         (ge, "$g_encountered_party_relation", 0),
                                         (call_script, "script_troop_get_player_relation", ":castle_lord"),
                                         (assign, ":castle_lord_relation", reg0),
                                         #(troop_get_slot, ":castle_lord_relation", ":castle_lord", slot_troop_player_relation),
                                         (ge, ":castle_lord_relation", 5),
                                         (str_store_troop_name, s2, ":castle_lord")
                                         ],  "My lord {s2} is not in the castle now.\
 But I think he would approve of you taking shelter here.\
 Come on in. I am opening the gates for you.", "close_window",[(assign,"$g_permitted_to_center",1)]],

  [anyone,"castle_gate_open", [(party_get_slot, ":castle_lord", "$g_encountered_party", slot_town_lord),
                               (call_script, "script_troop_get_player_relation", ":castle_lord"),
                               (assign, ":castle_lord_relation", reg0),
                               #(troop_get_slot, ":castle_lord_relation", ":castle_lord", slot_troop_player_relation),
                               (ge, ":castle_lord_relation", -2),
                                         ],  "Come on in. I am opening the gates for you.", "close_window",[(assign,"$g_permitted_to_center",1)]],

  [anyone,"castle_gate_open", [(party_get_slot, ":castle_lord", "$g_encountered_party", slot_town_lord),
                               (call_script, "script_troop_get_player_relation", ":castle_lord"),
                               (assign, ":castle_lord_relation", reg0),
                               #(troop_get_slot, ":castle_lord_relation", ":castle_lord", slot_troop_player_relation),
                               (ge, ":castle_lord_relation", -19),
                               (str_store_troop_name, s2, ":castle_lord")
                                         ],  "Come on in. But make sure your men behave sensibly within the walls.\
 My lord {s2} does not want trouble here.", "close_window",[(assign,"$g_permitted_to_center",1)]],

  [anyone,"castle_gate_open", [(party_get_slot, ":castle_lord", "$g_encountered_party", slot_town_lord),
                               (str_store_troop_name, s2, ":castle_lord"),
  ],  "My lord {s2} does not want you here. Begone now.", "close_window",[]],


#Enemy Kingdom Meetings


#  [anyone,"start", [(eq, "$talk_context", tc_lord_talk_in_center)],
#   "Greetings {playername}.", "request_meeting_1",[]],

#  [anyone,"request_meeting_pretalk", [(eq, "$talk_context", tc_lord_talk_in_center)],
#   "Yes?", "request_meeting_1",[]],

#  [anyone|plyr,"request_meeting_1", [(ge, "$g_encountered_party_faction", 0)], "Open the gates and let me in!", "request_meeting_open_gates",[]],

#  [anyone|plyr,"request_meeting_1", [(party_slot_ge, "$g_encountered_party", slot_town_lord, 1)], "I want to speak with the lord of the castle.", "request_meeting_castle_lord",[]],
#  [anyone|plyr,"request_meeting_1", [], "I want to speak with someone in the castle.", "request_meeting_other",[]],

##### TODO: QUESTS COMMENT OUT BEGIN
##  [anyone|plyr,"request_meeting_1",[(check_quest_active,"qst_bring_prisoners_to_enemy"),
##                                    (neg|check_quest_succeeded, "qst_bring_prisoners_to_enemy"),
##                                    (quest_get_slot, ":quest_giver_troop", "qst_bring_prisoners_to_enemy", slot_quest_giver_troop),
##                                    (quest_get_slot, ":quest_target_amount", "qst_bring_prisoners_to_enemy", slot_quest_target_amount),
##                                    (quest_get_slot, ":quest_object_troop", "qst_bring_prisoners_to_enemy", slot_quest_object_troop),
##                                    (quest_slot_eq, "qst_bring_prisoners_to_enemy", slot_quest_target_center, "$g_encountered_party"),
##                                    (party_count_prisoners_of_type, ":num_prisoners", "p_main_party", ":quest_object_troop"),
##                                    (ge, ":num_prisoners", ":quest_target_amount"),
##                                    (str_store_troop_name,1,":quest_giver_troop"),
##                                    (assign, reg1, ":quest_target_amount"),
##                                    (str_store_troop_name_plural,2,":quest_object_troop")],
##   "TODO: Sir, lord {s1} ordered me to bring {reg1} {s2} for ransom.", "guard_prisoners_brought",
##   [(quest_get_slot, ":quest_target_amount", "qst_bring_prisoners_to_enemy", slot_quest_target_amount),
##    (quest_get_slot, ":quest_target_center", "qst_bring_prisoners_to_enemy", slot_quest_target_center),
##    (quest_get_slot, ":quest_object_troop", "qst_bring_prisoners_to_enemy", slot_quest_object_troop),
##    (party_remove_prisoners, "p_main_party", ":quest_object_troop", ":quest_target_amount"),
##    (party_add_members, ":quest_target_center", ":quest_object_troop", ":quest_target_amount"),
##    (call_script, "script_game_get_join_cost", ":quest_object_troop"),
##    (assign, ":reward", reg0),
##    (val_mul, ":reward", ":quest_target_amount"),
##    (val_div, ":reward", 2),
##    (call_script, "script_troop_add_gold", "trp_player", ":reward"),
##    (party_get_slot, ":cur_lord", "$g_encountered_party", slot_town_lord),#Removing gold from the town owner's wealth
##    (troop_get_slot, ":cur_wealth", ":cur_lord", slot_troop_wealth),
##    (val_sub, ":cur_wealth", ":reward"),
##    (troop_set_slot, ":cur_lord", slot_troop_wealth, ":cur_wealth"),
##    (quest_set_slot, "qst_bring_prisoners_to_enemy", slot_quest_target_amount, ":reward"),
##    (succeed_quest, "qst_bring_prisoners_to_enemy"),
##    ]],
##
##  [anyone|plyr,"request_meeting_1",[(check_quest_active,"qst_bring_prisoners_to_enemy"),
##                                    (neg|check_quest_succeeded, "qst_bring_prisoners_to_enemy"),
##                                    (quest_get_slot, ":quest_giver_troop", "qst_bring_prisoners_to_enemy", slot_quest_giver_troop),
##                                    (quest_get_slot, ":quest_target_amount", "qst_bring_prisoners_to_enemy", slot_quest_target_amount),
##                                    (quest_get_slot, ":quest_object_troop", "qst_bring_prisoners_to_enemy", slot_quest_object_troop),
##                                    (quest_slot_eq, "qst_bring_prisoners_to_enemy", slot_quest_target_center, "$g_encountered_party"),
##                                    (party_count_prisoners_of_type, ":num_prisoners", "p_main_party", ":quest_object_troop"),
##                                    (lt, ":num_prisoners", ":quest_target_amount"),
##                                    (gt, ":num_prisoners", 0),
##                                    (str_store_troop_name,1,":quest_giver_troop"),
##                                    (assign, reg1, ":quest_target_amount"),
##                                    (str_store_troop_name_plural,2,":quest_object_troop")],
##   "TODO: Sir, lord {s1} ordered me to bring {reg1} {s2} for ransom, but some of them died during my expedition.", "guard_prisoners_brought_some",
##   [(quest_get_slot, ":quest_target_amount", "qst_bring_prisoners_to_enemy", slot_quest_target_amount),
##    (quest_get_slot, ":quest_target_center", "qst_bring_prisoners_to_enemy", slot_quest_target_center),
##    (quest_get_slot, ":quest_object_troop", "qst_bring_prisoners_to_enemy", slot_quest_object_troop),
##    (party_count_prisoners_of_type, ":num_prisoners", "p_main_party", ":quest_object_troop"),
##    (party_remove_prisoners, "p_main_party", ":quest_object_troop", ":num_prisoners"),
##    (party_add_members, ":quest_target_center", ":quest_object_troop", ":num_prisoners"),
##    (call_script, "script_game_get_join_cost", ":quest_object_troop"),
##    (assign, ":reward", reg0),
##    (val_mul, ":reward", ":num_prisoners"),
##    (val_div, ":reward", 2),
##    (call_script, "script_troop_add_gold", "trp_player", ":reward"),
##    (party_get_slot, ":cur_lord", "$g_encountered_party", slot_town_lord),#Removing gold from the town owner's wealth
##    (troop_get_slot, ":cur_wealth", ":cur_lord", slot_troop_wealth),
##    (val_sub, ":cur_wealth", ":reward"),
##    (troop_set_slot, ":cur_lord", slot_troop_wealth, ":cur_wealth"),
##    (call_script, "script_game_get_join_cost", ":quest_object_troop"),
##    (assign, ":reward", reg0),
##    (val_mul, ":reward", ":quest_target_amount"),
##    (val_div, ":reward", 2),
##    (quest_set_slot, "qst_bring_prisoners_to_enemy", slot_quest_current_state, 1),#Some of the prisoners are given, so it's state will change for remembering that.
##    (quest_set_slot, "qst_bring_prisoners_to_enemy", slot_quest_target_amount, ":reward"),#Still needs to pay the lord the full price of the prisoners
##    (succeed_quest, "qst_bring_prisoners_to_enemy"),
##    ]],
##
##
##  [anyone,"guard_prisoners_brought", [],
##   "TODO: Thank you. Here is the money for prisoners.", "request_meeting_pretalk",[]],
##
##  [anyone,"guard_prisoners_brought_some", [],
##   "TODO: Thank you, but that's not enough. Here is the money for prisoners.", "request_meeting_pretalk",[]],

#  [anyone|plyr,"request_meeting_1", [], "[Leave]", "close_window",[]],





##  [anyone,"request_meeting_open_gates", [(party_get_slot, ":castle_lord", "$g_encountered_party", slot_town_lord),
##                                         (call_script, "script_get_troop_attached_party", ":castle_lord"),
##                                         (eq, "$g_encountered_party", reg0),
##                                         (str_store_troop_name, 1, ":castle_lord")
##                                         ],  "My lord {s1} is in the castle now. You must ask his permission to enter.", "request_meeting_pretalk",[]],
##
##  [anyone,"request_meeting_open_gates", [(party_get_slot, ":castle_lord", "$g_encountered_party", slot_town_lord),
##                                         (call_script, "script_get_troop_attached_party", ":castle_lord"),
##                                         (neq, "$g_encountered_party", reg0),
##                                         (ge, "$g_encountered_party_relation", 0),
##                                         (troop_get_slot, ":castle_lord_relation", ":castle_lord", slot_troop_player_relation),
##                                         (ge, ":castle_lord_relation", 20),
##                                         (str_store_troop_name, 1, ":castle_lord")
##                                         ],  "My lord {s1} is not in the castle now.\
## But I think he would approve of you taking shelter here, {sir/madam}.\
## Come on in. I am opening the gates for you.", "close_window",[]],
##
##  [anyone,"request_meeting_open_gates", [(party_get_slot, ":castle_lord", "$g_encountered_party", slot_town_lord),(str_store_troop_name, 1, ":castle_lord")],
##   "My lord {s1} is not in the castle now. I can't allow you into the castle without his orders.", "request_meeting_pretalk",[]],




# Quest conversations

##### TODO: QUESTS COMMENT OUT BEGIN

##  [party_tpl|pt_peasant_rebels,"start", [],
##   "TODO: What.", "peasant_rebel_talk",[]],
##  [anyone|plyr, "peasant_rebel_talk", [], "TODO: Die.", "close_window",[]],
##  [anyone|plyr, "peasant_rebel_talk", [], "TODO: Nothing.", "close_window",[(assign, "$g_leave_encounter",1)]],
##
##  [party_tpl|pt_noble_refugees,"start", [],
##   "TODO: What.", "noble_refugee_talk",[]],
##  [anyone|plyr, "noble_refugee_talk", [], "TODO: Nothing.", "close_window",[(assign, "$g_leave_encounter",1)]],
##


  [anyone,"start", [(eq,"$talk_context",tc_join_battle_ally),
                    ],
   "You have come just in time. Let us join our forces now and teach our enemy a lesson.", "close_window",
   []],

  [anyone,"start", [(eq,"$talk_context",tc_join_battle_enemy),
                    ],
   "You are making a big mistake by fighting against us.", "close_window",
   []],

  [anyone,"start", [(eq,"$talk_context",tc_ally_thanks),
                    (troop_is_hero, "$g_talk_troop"),
                    (eq, "$g_talk_troop_met", 0),
                    (ge, "$g_talk_troop_relation", 17),
                    ],
   "I don't think we have met properly my friend. You just saved my life out there, and I still don't know your name...", "ally_thanks_meet", []],


  [anyone,"start", [(eq,"$talk_context",tc_ally_thanks),
                    (troop_is_hero, "$g_talk_troop"),
                    (eq, "$g_talk_troop_met", 0),
                    (ge, "$g_talk_troop_relation", 5),
					(str_store_troop_name, s1, "$g_talk_troop"),
                    ],
   "Your help was most welcome stranger. My name is {s1}. Can I learn yours?", "ally_thanks_meet", []],

  [anyone,"start", [(eq,"$talk_context",tc_ally_thanks),
                    (troop_is_hero, "$g_talk_troop"),
                    (eq, "$g_talk_troop_met", 0),
                    (ge, "$g_talk_troop_relation", 0),
                    (str_store_troop_name, s1, "$g_talk_troop"),
                    ],
   "Thanks for your help, stranger. We haven't met properly yet, have we? What is your name?", "ally_thanks_meet", []],

  [anyone|plyr,"ally_thanks_meet", [], "My name is {playername}.", "ally_thanks_meet_2", []],

  [anyone, "ally_thanks_meet_2", [(ge, "$g_talk_troop_relation", 15),(str_store_troop_name, s1, "$g_talk_troop")],
   "Well met indeed {playername}. My name is {s1} and I am forever in your debt. If there is ever anything I can help you with, just let me know...", "close_window", []],
  [anyone, "ally_thanks_meet_2", [(ge, "$g_talk_troop_relation", 5),], "Well met {playername}. I am in your debt for what you just did. I hope one day I will find a way to repay it.", "close_window", []],
  [anyone, "ally_thanks_meet_2", [], "Well met {playername}. I am {s1}. Thanks for your help and I hope we meet again.", "close_window", []],

#Post 0907 changes begin
  [anyone,"start", [(eq,"$talk_context",tc_ally_thanks),
                    (troop_is_hero, "$g_talk_troop"),
                    (ge, "$g_talk_troop_relation", 30),
                    (ge, "$g_relation_boost", 10),
                    ],
   "Again you save our necks, {playername}! Truly, you are the best of friends. {s43}", "close_window", [
       (call_script, "script_lord_comment_to_s43", "$g_talk_troop", "str_battle_won_default"),
       (try_begin),
         (party_stack_get_troop_id, ":enemy_party_leader", "p_encountered_party_backup", 0),
         (is_between, ":enemy_party_leader", active_npcs_begin, active_npcs_end),
         (call_script, "script_add_log_entry", logent_lord_helped_by_player, "trp_player",  -1, ":enemy_party_leader", -1),
       (try_end),
       ]],

  [anyone,"start", [(eq,"$talk_context",tc_ally_thanks),
                    (troop_is_hero, "$g_talk_troop"),
                    (ge, "$g_talk_troop_relation", 20),
                    (ge, "$g_relation_boost", 5),
                    ],
   "You arrived just in the nick of time! {playername}. You have my deepest thanks! {s43}", "close_window", [
       (call_script, "script_lord_comment_to_s43", "$g_talk_troop", "str_battle_won_default"),
#       (try_begin),
#         (party_stack_get_troop_id, ":enemy_party_leader", "p_encountered_party_backup", 0),
#         (is_between, ":enemy_party_leader", active_npcs_begin, active_npcs_end),
       (call_script, "script_add_log_entry", logent_lord_helped_by_player, "trp_player",  -1, "$g_talk_troop", -1),
#       (try_end),
       ]],

  [anyone,"start", [(eq,"$talk_context",tc_ally_thanks),
                    (troop_is_hero, "$g_talk_troop"),
                    (ge, "$g_talk_troop_relation", 0),
                    (ge, "$g_relation_boost", 3),
                    ],
   "You turned up just in time, {playername}. I will not forget your help. {s43}", "close_window", [
       (call_script, "script_lord_comment_to_s43", "$g_talk_troop", "str_battle_won_default"),
#       (try_begin),
#         (party_stack_get_troop_id, ":enemy_party_leader", "p_encountered_party_backup", 0),
#         (is_between, ":enemy_party_leader", active_npcs_begin, active_npcs_end),
       (call_script, "script_add_log_entry", logent_lord_helped_by_player, "trp_player",  -1, "$g_talk_troop", -1),
#       (try_end),
       ]],

  [anyone,"start", [(eq,"$talk_context",tc_ally_thanks),
                    (troop_is_hero, "$g_talk_troop"),
                    (ge, "$g_talk_troop_relation", -5),
                    ],
   "Good to see you here, {playername}. {s43}", "close_window", [
                    (call_script, "script_lord_comment_to_s43", "$g_talk_troop", "str_battle_won_default"),
                    (call_script, "script_troop_change_relation_with_troop", "$g_talk_troop", "trp_player", 1),
       ]],


  [anyone,"start", [(eq,"$talk_context",tc_ally_thanks),
                    (troop_is_hero, "$g_talk_troop"),
                    (ge, "$g_relation_boost", 4),
                    ],
   "{s43}", "close_window", [
                    (call_script, "script_lord_comment_to_s43", "$g_talk_troop", "str_battle_won_grudging_default"),
                    ]],


  [anyone,"start", [(eq,"$talk_context",tc_ally_thanks),
                    (troop_is_hero, "$g_talk_troop"),
                    ],
   "{s43}", "close_window", [
                    (call_script, "script_lord_comment_to_s43", "$g_talk_troop", "str_battle_won_unfriendly_default"),
                    ]],


#  [anyone,"start", [(eq,"$talk_context",tc_ally_thanks),
#                    (troop_is_hero, "$g_talk_troop"),
#                    (ge, "$g_talk_troop_relation", -20),
#                    ],
#   "So, this is {playername}. Well, your help wasn't really needed, but I guess you had nothing better to do, right?", "close_window", []],

#  [anyone,"start", [(eq,"$talk_context",tc_ally_thanks),
#                    (troop_is_hero, "$g_talk_troop"),
#                    ],
#   "Who told you to come to our help? I certainly didn't. Begone now. I want nothing from you and I will not let you steal my victory.", "close_window", []],

#Post 0907 changes begin

  [anyone,"start", [(eq,"$talk_context",tc_ally_thanks),
                    (ge, "$g_relation_boost", 10),
                    (party_get_num_companions, reg1, "$g_encountered_party"),
                    (val_sub, reg1, 1),
                    ],
   "Thank you for your help {sir/madam}. You saved {reg1?our lives:my life} out there.", "close_window", []],

  [anyone,"start", [(eq,"$talk_context",tc_ally_thanks),
                    (ge, "$g_relation_boost", 5),
                    ],
   "Thank you for your help {sir/madam}. Things didn't look very well for us but then you came up and everything changed.", "close_window", []],

  [anyone,"start", [(eq,"$talk_context",tc_ally_thanks)],
   "Thank you for your help, {sir/madam}. It was fortunate to have you nearby.", "close_window", []],

  [anyone,"start", [(eq, "$talk_context", tc_hero_freed),
                    (store_conversation_troop,":cur_troop"),
                    (eq,":cur_troop","trp_kidnapped_girl"),],
   "Oh {sir/madam}. Thank you so much for rescuing me. Will you take me to my family now?", "kidnapped_girl_liberated_battle",[]],

  [anyone,"start", [(eq,"$talk_context",tc_hero_freed)],
   "I am in your debt for freeing me friend.", "freed_hero_answer",
   []],

  [anyone|plyr,"freed_hero_answer", [],
   "You're not going anywhere. You'll be my prisoner now!", "freed_hero_answer_1",
   [
     (store_conversation_troop, ":cur_troop_id"),
     (party_add_prisoners, "p_main_party", ":cur_troop_id", 1),#take prisoner
    ]],

  [anyone,"freed_hero_answer_1", [],
   "Alas. Will my luck never change?", "close_window",
   []],

  [anyone|plyr,"freed_hero_answer", [],
   "You're free to go, {s65}.", "freed_hero_answer_2",
   [
    ]],

  [anyone,"freed_hero_answer_2", [],
   "Thank you, good {sire/lady}. I never forget someone who's done me a good turn.", "close_window",
   []],

  [anyone|plyr,"freed_hero_answer", [],
   "Would you like to join me?", "freed_hero_answer_3",
   []],

  [anyone,"freed_hero_answer_3", [(store_random_in_range, ":random_no",0,2),(eq, ":random_no", 0)],
   "All right I will join you.", "close_window",
   [
     (store_conversation_troop, ":cur_troop_id"),
     (party_add_members, "p_main_party", ":cur_troop_id", 1),#join hero
   ]],

  [anyone,"freed_hero_answer_3", [],
   "No, I want to go on my own.", "close_window",
   [
    ]],

  [anyone,"start", [(eq,"$talk_context",tc_hero_defeated)],
   "You'll not live long to enjoy your victory. My kinsmen will soon wipe out the stain of this defeat.", "defeat_hero_answer",
   [
    ]],

  [anyone|plyr,"defeat_hero_answer", [],
   "You are my prisoner now.", "defeat_hero_answer_1",
   [
     (party_add_prisoners, "p_main_party", "$g_talk_troop", 1),#take prisoner
     #(troop_set_slot, "$g_talk_troop", slot_troop_is_prisoner, 1),
     (troop_set_slot, "$g_talk_troop", slot_troop_prisoner_of_party, "p_main_party"),
     (call_script, "script_event_hero_taken_prisoner_by_player", "$g_talk_troop"),
    ]],

  [anyone,"defeat_hero_answer_1", [],
   "Damn you. You will regret this.", "close_window",
   []],

  [anyone|plyr,"defeat_hero_answer", [],
   "You're free to go this time, but don't cross my path again.", "defeat_hero_answer_2",
   []],

  [anyone,"defeat_hero_answer_2", [],
   "We will meet again.", "close_window",
   []],




  [anyone,"combined_political_quests", [
  (eq, "$political_quest_found", "qst_resolve_dispute"),
	],
   "{s9}", "political_quest_suggested",
   [
   (quest_set_slot, "qst_resolve_dispute", slot_quest_target_troop, "$political_quest_target_troop"),
   (quest_set_slot, "qst_resolve_dispute", slot_quest_object_troop, "$political_quest_object_troop"),

   (quest_get_slot, ":target_troop", "qst_resolve_dispute", slot_quest_target_troop),
   (quest_get_slot, ":object_troop", "qst_resolve_dispute", slot_quest_object_troop),
   (str_store_troop_name, s4, ":target_troop"),
   (str_store_troop_name, s5, ":object_troop"),
   (faction_get_slot, ":faction_leader", "$players_kingdom", slot_faction_leader),
   (str_store_troop_name, s7, ":faction_leader"),
   (try_begin),
      (eq, "$players_kingdom", "fac_player_supporters_faction"),
	  (faction_slot_eq, "fac_player_supporters_faction", slot_faction_leader, "trp_player"),
	  (str_store_string, s9, "str_you_may_be_aware_my_lord_of_the_quarrel_between_s4_and_s5_which_is_damaging_the_unity_of_this_realm_and_sapping_your_authority_if_you_could_persuade_the_lords_to_reconcile_it_would_boost_your_own_standing_however_in_taking_this_on_you_run_the_risk_of_one_the_lords_deciding_that_you_have_taken_the_rivals_side"),
   (else_try),
	  (str_store_string, s9, "str_you_may_be_aware_my_lord_of_the_quarrel_between_s4_and_s5_which_is_damaging_the_unity_of_this_realm_and_sapping_your_authority_if_you_could_persuade_the_lords_to_reconcile_i_imagine_that_s7_would_be_most_pleased_however_in_taking_this_on_you_run_the_risk_of_one_the_lords_deciding_that_you_have_taken_the_rivals_side"),
   (try_end),
   ]],

  [anyone,"political_quest_follow_on", [
  (eq, "$political_quest_found", "qst_resolve_dispute"),
	],
   "I think that is a wise move. Good luck to you.", "close_window",
   [
    (assign, "$g_leave_encounter", 1),
    (setup_quest_text,"qst_resolve_dispute"),

	(quest_get_slot, ":lord_1", "qst_resolve_dispute", slot_quest_target_troop),
	(str_store_troop_name_link, s11, ":lord_1"),

	(quest_get_slot, ":lord_2", "qst_resolve_dispute", slot_quest_object_troop),
	(str_store_troop_name_link, s12, ":lord_2"),

	(str_store_string, s2, "str_resolve_the_dispute_between_s11_and_s12"),
	(call_script, "script_start_quest", "qst_resolve_dispute", -1),
	(quest_set_slot, "qst_resolve_dispute", slot_quest_expiration_days, 30),
	(quest_set_slot, "qst_resolve_dispute", slot_quest_giver_troop, "$g_talk_troop"),
	(quest_set_slot, "qst_resolve_dispute", slot_quest_target_state, 0),
	(quest_set_slot, "qst_resolve_dispute", slot_quest_object_state, 0),

	(quest_get_slot, ":lord_1", "qst_resolve_dispute", slot_quest_target_troop), #this block just to check if the slots work
	(str_store_troop_name, s11, ":lord_1"),
	(quest_get_slot, ":lord_2", "qst_resolve_dispute", slot_quest_object_troop),
	(str_store_troop_name, s12, ":lord_2"),
	],
   ],


   [anyone,"combined_political_quests", [

  (eq, "$political_quest_found", "qst_offer_gift"),
  (quest_set_slot, "qst_offer_gift", slot_quest_target_troop, "$political_quest_target_troop"),
  (quest_set_slot, "qst_offer_gift", slot_quest_giver_troop, "$g_talk_troop"),

  (quest_get_slot, ":target_troop", "qst_offer_gift", slot_quest_target_troop),
  (str_store_troop_name, s4, ":target_troop"),
  (troop_get_type, reg4, ":target_troop"),
  (call_script, "script_troop_get_family_relation_to_troop", ":target_troop", "$g_talk_troop"),

	],
   "Your relations with {s4} are not all that they could be. As {reg4?she:he} is my {s11}, I can mediate to attempt to mend your quarrel. Perhaps the best way for me to do this would be to send {reg4?her:him} a gift -- a fur-trimmed velvet robe, perhaps. If you can provide me with a bolt of velvet and a length of furs, I can have one made and sent to {reg4?her:him.}", "political_quest_suggested",
   [
   (quest_get_slot, ":target_troop", "qst_offer_gift", slot_quest_target_troop),
   #SB : gender reg calls
   (call_script, "script_dplmc_store_troop_is_female_reg", ":target_troop", 4),
   ]],



  [anyone,"political_quest_follow_on", [
  (eq, "$political_quest_found", "qst_offer_gift"),
  ],
   "Splendid. I shall await the materials.", "close_window",
   [
   (assign, "$g_leave_encounter", 1),
    (setup_quest_text,"qst_offer_gift"),

    (quest_get_slot, ":lord_1", "qst_offer_gift", slot_quest_target_troop),
    #SB : name links
    (str_store_troop_name_link, s14, ":lord_1"),
    (str_store_troop_name_link, s12, "$g_talk_troop"),
    ##diplomacy start+
    #(troop_get_type, reg4, "$g_talk_troop"),
    (assign, reg4, reg65),
    ##diplomacy end+

    (str_store_string, s2, "str_you_intend_to_bring_gift_for_s14"),

   (call_script, "script_start_quest", "qst_offer_gift", "$g_talk_troop"),
   (quest_set_slot, "qst_offer_gift", slot_quest_expiration_days, 30),
   ]],




   [anyone,"combined_political_quests", [
   (eq, "$political_quest_found", "qst_denounce_lord"),
   (this_or_next|eq, "$g_talk_troop", "$g_player_minister"),
		(troop_slot_eq, "trp_player", slot_troop_spouse, "$g_talk_troop"),

   (str_store_troop_name, s4, "$political_quest_target_troop"),
   ##diplomacy start+ use script for gender
   #(troop_get_type, reg4, "$political_quest_target_troop"),
   (call_script, "script_dplmc_store_troop_is_female_reg", "$political_quest_target_troop", 4),
   ##diplomacy end+
   (str_store_faction_name, s5, "$players_kingdom"),

   (troop_get_slot, ":reputation_string", "$political_quest_target_troop", slot_lord_reputation_type),
   (val_add, ":reputation_string", "str_lord_derogatory_default"),
   (str_store_string, s7, ":reputation_string"),

   (troop_get_slot, ":reputation_string", "$political_quest_target_troop", slot_lord_reputation_type),
   (val_add, ":reputation_string", "str_lord_derogatory_result"),
   (str_store_string, s8, ":reputation_string"),

	],
   "As you may realize, {s4} has many enemies among the lords of the {s5}. In particular, they feel that {reg4?she:he} is {s7}, and worry that {reg4?she:he} will {s8}. Were you to denounce {s4} to {reg4?her:his} face, you may reap much popularity -- although, of course, you would make an enemy of {reg4?her:him}, and risk being challenged to a duel.", "political_quest_suggested",
   [
   ]],

    [anyone,"combined_political_quests", [
    (eq, "$political_quest_found", "qst_denounce_lord"),
    ##diplomacy start+ use script for gender
    #(troop_get_type, reg4, "$political_quest_target_troop"),
    (call_script, "script_dplmc_store_troop_is_female_reg", "$political_quest_target_troop", 4),
    ##diplomacy end+

	(str_clear, s9),
	(call_script, "script_troop_get_relation_with_troop", "trp_player", "$g_talk_troop"),
	(assign, ":player_relation_with_target", reg0),

    (str_store_troop_name, s4, "$political_quest_target_troop"),
	(try_begin),
		(ge, ":player_relation_with_target", 2),
		(neg|troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_debauched),
		(neg|troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_quarrelsome),
		(str_store_string, s9, "str_i_realize_that_you_are_on_good_terms_with_s4_but_we_ask_you_to_do_this_for_the_good_of_the_realm"),
	(else_try),
		(ge, ":player_relation_with_target", 2),
		(str_store_string, s9, "str_i_realize_that_you_are_on_good_terms_with_s4_but_the_blow_will_hurt_him_more"),
	(try_end),

    (str_store_faction_name, s5, "$players_kingdom"),
    (str_store_troop_name, s4, "$political_quest_target_troop"),

    (troop_get_slot, ":reputation_string", "$political_quest_target_troop", slot_lord_reputation_type),
    (val_add, ":reputation_string", "str_lord_derogatory_default"),
    (str_store_string, s7, ":reputation_string"),

    (troop_get_slot, ":reputation_string", "$political_quest_target_troop", slot_lord_reputation_type),
    (val_add, ":reputation_string", "str_lord_derogatory_result"),
    (str_store_string, s8, ":reputation_string"),


	],

    "As you may realize, many of us in the peerage of the {s5} consider {s4} to be {s7}, and a liability to our cause. We worry that {reg4?she:he} will {s8}. People know my views on {s4} already, but if you were to denounce {reg4?her:him} to {reg4?her:his} face, you would further erode his standing -- and discourage our liege from entrusting {reg4?her:him} with any more power or responsibility. Of course, you would make an enemy of {reg4?her:him}, and risk being challenged to a duel.{s9}", "political_quest_suggested",
    [


	]],


	[anyone,"political_quest_follow_on", [
	(eq, "$political_quest_found", "qst_denounce_lord"),
	(this_or_next|eq, "$g_talk_troop", "$g_player_minister"),
		(troop_slot_eq, "trp_player", slot_troop_spouse, "$g_talk_troop"),
  ],
   "We appreciate what you are doing. I find such intrigues distasteful, but it is all for the good of the {s5}.", "close_window",
   [
   (quest_set_slot, "qst_denounce_lord", slot_quest_target_troop, "$political_quest_target_troop"),

   (quest_get_slot, ":target_troop", "qst_denounce_lord", slot_quest_target_troop),
   (str_store_troop_name_link, s14, ":target_troop"),
   (str_store_troop_name_link, s12, "$g_talk_troop"),

   (str_store_string, s2, "str_you_intend_to_denounce_s14_to_his_face_on_behalf_of_s14"),
   (setup_quest_text, "qst_denounce_lord"),

   (call_script, "script_start_quest", "$political_quest_found", "$g_talk_troop"),
   (quest_set_slot, "qst_denounce_lord", slot_quest_expiration_days, 60),

   (str_store_faction_name, s5, "$players_kingdom"),
   (assign, "$g_leave_encounter", 1),
   ]],


	[anyone,"political_quest_follow_on", [
	(eq, "$political_quest_found", "qst_denounce_lord"),
  ],
   "Very well. It is always risky to involve yourself in intrigues of this sort, but in this case, I think you will benefit.", "close_window",
   [
   (quest_set_slot, "qst_denounce_lord", slot_quest_target_troop, "$political_quest_target_troop"),

   (quest_get_slot, ":target_troop", "qst_denounce_lord", slot_quest_target_troop),
   (str_store_troop_name_link, s14, ":target_troop"),
   (str_store_troop_name_link, s12, "$g_talk_troop"),

   (str_store_string, s2, "str_you_intend_to_denounce_s14_to_his_face_on_behalf_of_s14"),
   (setup_quest_text, "qst_denounce_lord"),

   (call_script, "script_start_quest", "$political_quest_found", "$g_talk_troop"),
   (assign, "$g_leave_encounter", 1),
]],




   [anyone,"combined_political_quests", [
    (eq, "$political_quest_found", "qst_intrigue_against_lord"),
    (str_store_troop_name, s4, "$political_quest_target_troop"),
       ##diplomacy start+ use script for gender
   #(troop_get_type, reg4, "$political_quest_target_troop"),
   (call_script, "script_dplmc_store_troop_is_female_reg", "$political_quest_target_troop", 4),
   ##diplomacy end+
    (str_store_faction_name, s5, "$players_kingdom"),
    (troop_get_slot, ":reputation_string", "$political_quest_target_troop", slot_lord_reputation_type),
    (val_add, ":reputation_string", "str_lord_derogatory_default"),
    (str_store_string, s7, ":reputation_string"),

    (troop_get_slot, ":reputation_string_2", "$political_quest_target_troop", slot_lord_reputation_type),
    (val_add, ":reputation_string_2", "str_lord_derogatory_result"),
    (str_store_string, s8, ":reputation_string_2"),

	(faction_get_slot, ":faction_leader", "$players_kingdom", slot_faction_leader),
	(str_store_troop_name, s9, ":faction_leader"),
	],
   "You and I have a common interest in seeking to curtail the rise of {s4}. I feel that {reg4?she:he} is {s7}, and worry that {reg4?she:he} will {s8}. Were you to tell our liege {s9} your opinion of {s4}, it might discourage {s9} from granting {s4} any further powers or responsibilities, at least for a while, and I would be much obliged to you.", "political_quest_suggested",
   []],

   #Intrigue lord for
	[anyone,"political_quest_follow_on", [
	(eq, "$political_quest_found", "qst_intrigue_against_lord"),
#	(this_or_next|eq, "$g_talk_troop", "$g_player_minister"),
#		(troop_slot_eq, "trp_player", slot_troop_spouse, "$g_talk_troop"),
    (str_store_faction_name, s5, "$players_kingdom"),

  ],
   "We appreciate what you are doing. I find such intrigues distasteful, but it is all for the good of the {s5}.", "close_window",
   [
   (quest_set_slot, "qst_intrigue_against_lord", slot_quest_target_troop, "$political_quest_target_troop"),

   (quest_get_slot, ":target_troop", "qst_intrigue_against_lord", slot_quest_target_troop),
   (store_faction_of_troop, ":target_troop_faction", ":target_troop"),
   (faction_get_slot, ":faction_liege", ":target_troop_faction", slot_faction_leader),
   (str_store_troop_name_link, s14, ":target_troop"),
   (str_store_troop_name_link, s13, ":faction_liege"),
   (str_store_troop_name_link, s12, "$g_talk_troop"),

   (str_store_string, s2, "str_you_intend_to_denounce_s14_to_s13_on_behalf_of_s12"),
   (setup_quest_text, "qst_intrigue_against_lord"),

   (call_script, "script_start_quest", "$political_quest_found", "$g_talk_troop"),
   (quest_set_slot, "qst_intrigue_against_lord", slot_quest_expiration_days, 60),
   (assign, "$g_leave_encounter", 1),
   ]],


  [anyone,"combined_political_quests", [],
   "I cannot think of anything right now, but we will have some items of mutual interest in the future.", "political_quest_suggested",
   []],

  [anyone|plyr,"political_quest_suggested", [
  (gt, "$political_quest_found", 0),
  ],
   "I like that idea.", "political_quest_follow_on",
   [
   ]],

  [anyone|plyr,"political_quest_suggested", [
  (gt, "$political_quest_found", 0),
  ],
   "Hmm.. Maybe you can think of something else?", "combined_political_quests",
   [
   (quest_set_slot, "$political_quest_found", slot_quest_dont_give_again_remaining_days, 3),
   (call_script, "script_get_political_quest", "$g_talk_troop"),
   (assign, "$political_quest_found", reg0),
   (assign, "$political_quest_target_troop", reg1),
   (assign, "$political_quest_object_troop", reg2),

   ]],

   #SB : period
  [anyone|plyr,"political_quest_suggested", [],
   "Let us discuss another topic.", "political_quests_end",
   []],



  [anyone,"political_quests_end", [
  (troop_slot_eq, "$g_talk_troop", slot_troop_occupation, slto_kingdom_hero),
  ],
   "Very well.", "lord_pretalk",
   []],

  [anyone,"political_quests_end", [
  (troop_slot_eq, "trp_player", slot_troop_spouse, "$g_talk_troop"),
  ],
   "Very well.", "spouse_pretalk",
   []],

  [anyone,"political_quests_end", [
  (eq, "$g_talk_troop", "$g_player_minister"),
  ],
   "Very well.", "minister_pretalk",
   []],

  [anyone,"political_quests_end", [
  ],
   "Very well.", "close_window",
   [
   (assign, "$g_leave_encounter", 1),
   ]],




# Local merchant

  [trp_local_merchant,"start", [], "Mercy! Please don't kill me!", "local_merchant_mercy",[]],
  [anyone|plyr,"local_merchant_mercy", [(quest_get_slot, ":quest_giver_troop", "qst_kill_local_merchant", slot_quest_giver_troop),(str_store_troop_name, s2, ":quest_giver_troop"),
  ##diplomacy start+ Initialize reg4 for use below
  (assign, reg4, 0),
  (try_begin),
	(call_script, "script_cf_dplmc_troop_is_female", ":quest_giver_troop"),
	(assign, reg4, 1),
  (try_end),
  ],#next line man to {reg65?woman:man}
   "I have nothing against you {reg65?woman:man}. But {s2} wants you dead. Sorry.", "local_merchant_mercy_no",[]],
   ##diplomacy end+
  [anyone,"local_merchant_mercy_no", [], "Damn you! May you burn in Hell!", "close_window",[]],
  [anyone|plyr,"local_merchant_mercy", [], "I'll let you live, if you promise me...", "local_merchant_mercy_yes",[]],

  [anyone,"local_merchant_mercy_yes", [], "Of course, I promise, I'll do anything. Just spare my life... ", "local_merchant_mercy_yes_2",[]],
  ##diplomacy start+ use reg4 from before to make gender correct
  [anyone|plyr,"local_merchant_mercy_yes_2", [], "You are going to forget about {s2}'s debt to you. And you will sign a paper stating that {reg4?she:he} owes you nothing.", "local_merchant_mercy_yes_3",[]],
  ##diplomacy end+
  [anyone,"local_merchant_mercy_yes_3", [], "Yes, of course. I'll do as you say.", "local_merchant_mercy_yes_4",[]],
  [anyone|plyr,"local_merchant_mercy_yes_4", [], "And if my lord hears so much of a hint of a complaint about this issue, then I'll come back for you,\
 and it won't matter how much you scream for mercy then.\
 Do you understand me?", "local_merchant_mercy_yes_5",[]],
  [anyone,"local_merchant_mercy_yes_5", [], "Yes {sir/madam}. Don't worry. I won't make any complaint.", "local_merchant_mercy_yes_6",[]],
  [anyone|plyr,"local_merchant_mercy_yes_6", [], "Good. Go now, before I change my mind.", "close_window",
   [(quest_set_slot, "qst_kill_local_merchant", slot_quest_current_state, 2),
    (call_script, "script_succeed_quest", "qst_kill_local_merchant"),
    (finish_mission),
    ]],

# Village traitor

  [trp_fugitive,"start", [], "What do you want?", "fugitive_1",[]],
  [trp_fugitive|plyr,"fugitive_1", [
     (quest_get_slot, ":quest_target_dna", "qst_hunt_down_fugitive", slot_quest_target_dna),
     (call_script, "script_get_name_from_dna_to_s50", ":quest_target_dna"),
     (str_store_string, s4, s50),
      ], "I am looking for a murderer by the name of {s4}. You fit his description.", "fugitive_2",[]],
  [trp_fugitive|plyr,"fugitive_1", [], "Nothing. Sorry to trouble you.", "close_window",[]],
  [trp_fugitive,"fugitive_2", [], "I don't understand, {sir/madam}.\
 I never killed anyone. I think you've got the wrong man.", "fugitive_3",[]],
  [trp_fugitive|plyr,"fugitive_3", [], "Then drop your sword. If you are innocent, you have nothing to fear.\
 We'll go now and talk to your neighbours, and if they verify your story, I'll go on my way.", "fugitive_4",[]],
  [anyone,"fugitive_4", [], "I'm not going anywhere, friend. You're going to have to fight for your silver, today.", "fugitive_5",
   []],

  [trp_fugitive|plyr,"fugitive_5", [], "No problem. I really just need your head, anyway.", "fugitive_fight_start",[]],
  [trp_fugitive|plyr,"fugitive_5", [], "I come not for money, but to execute the law!", "fugitive_fight_start",[]],
  [trp_fugitive|plyr,"fugitive_5", [], "Alas, that you cannot be made to see reason.", "fugitive_fight_start",[]],

  [anyone,"fugitive_fight_start", [], "Die, dog!", "close_window",
   [
	(set_party_battle_mode),
    (quest_set_slot, "qst_hunt_down_fugitive", slot_quest_current_state, 1),
    (call_script, "script_activate_tavern_attackers"),
   ]],


  [anyone,"member_chat", [(check_quest_active, "qst_incriminate_loyal_commander"),
                          (quest_slot_eq, "qst_incriminate_loyal_commander", slot_quest_current_state, 0),
                          (store_conversation_troop, "$g_talk_troop"),
                          (eq, "$g_talk_troop", "$incriminate_quest_sacrificed_troop"),
                          (quest_get_slot, ":quest_target_center", "qst_incriminate_loyal_commander", slot_quest_target_center),
                          (store_distance_to_party_from_party, ":distance", "p_main_party", ":quest_target_center"),
                          (lt, ":distance", 10),
                          ], "Yes {sir/madam}?", "sacrificed_messenger_1",[]],

  [anyone|plyr,"sacrificed_messenger_1", [(quest_get_slot, ":quest_target_center", "qst_incriminate_loyal_commander", slot_quest_target_center),
                                          (str_store_party_name, s1, ":quest_target_center"),
                                          (quest_get_slot, ":quest_object_troop", "qst_incriminate_loyal_commander", slot_quest_object_troop),
                                          (str_store_troop_name, s2, ":quest_object_troop"),],
   "Take this letter to {s1} and give it to {s2}.", "sacrificed_messenger_2",[]],
  [anyone|plyr,"sacrificed_messenger_1", [],
   "Nothing. Nothing at all.", "close_window",[]],

  [anyone,"sacrificed_messenger_2", [],
   "Yes {sir/madam}. You can trust me. I will not fail you.", "sacrificed_messenger_3",[]],

  [anyone|plyr,"sacrificed_messenger_3", [],
   "Good. I will not forget your service. You will be rewarded when you return.", "close_window",[(party_remove_members, "p_main_party", "$g_talk_troop", 1),
                                     (set_spawn_radius, 0),
                                     (spawn_around_party, "p_main_party", "pt_sacrificed_messenger"),
                                     (assign, ":new_party", reg0),
                                     (party_add_members, ":new_party", "$g_talk_troop", 1),
                                     (party_set_ai_behavior, ":new_party", ai_bhvr_travel_to_party),
                                     (quest_get_slot, ":quest_target_center", "qst_incriminate_loyal_commander", slot_quest_target_center),
                                     (party_set_ai_object, ":new_party", ":quest_target_center"),
                                     (party_set_flags, ":new_party", pf_default_behavior, 0),
                                     (quest_set_slot, "qst_incriminate_loyal_commander", slot_quest_current_state, 2),
                                     (quest_set_slot, "qst_incriminate_loyal_commander", slot_quest_target_party, ":new_party")]],
  [anyone|plyr,"sacrificed_messenger_3", [], "Arggh! I can't do this. I can't send you to your own death!", "sacrificed_messenger_cancel",[]],
  [anyone,"sacrificed_messenger_cancel", [], "What do you mean {sir/madam}", "sacrificed_messenger_cancel_2",[]],
  [anyone|plyr,"sacrificed_messenger_cancel_2", [(quest_get_slot, ":quest_giver", "qst_incriminate_loyal_commander", slot_quest_giver_troop),
                                                 (str_store_troop_name, s3, ":quest_giver"),
      ], "There's a trap set up for you in the town.\
 {s3} ordered me to sacrifice one of my chosen warriors to fool the enemy,\
 but {reg3?she:he} will just need to find another way.", "sacrificed_messenger_cancel_3",[
     (quest_get_slot, ":quest_giver", "qst_incriminate_loyal_commander", slot_quest_giver_troop),
     (quest_set_slot, "qst_incriminate_loyal_commander", slot_quest_current_state, 1),
     (call_script, "script_change_player_relation_with_troop",":quest_giver",-5),
     (call_script, "script_change_player_honor", 3),
     (call_script, "script_fail_quest", "qst_incriminate_loyal_commander"),
     #SB : gender string
     (call_script, "script_dplmc_store_troop_is_female_reg", ":quest_giver", 3),
     ]],
  [anyone,"sacrificed_messenger_cancel_3", [], "Thank you, {sir/madam}.\
 I will follow you to the gates of hell. But this would not be a good death.", "close_window",[]],

  [party_tpl|pt_sacrificed_messenger,"start", [],
   "Don't worry, {sir/madam}, I'm on my way.", "close_window",[(assign, "$g_leave_encounter",1)]],

#Spy

  [party_tpl|pt_spy,"start", [], "Good day {sir/madam}. Such fine weather don't you think? If you'll excuse me now I must go on my way.", "follow_spy_talk",[]],

  [anyone|plyr, "follow_spy_talk",
   [
     (quest_get_slot, ":quest_giver", "qst_follow_spy", slot_quest_giver_troop),
     (str_store_troop_name, s1, ":quest_giver"),
     ],
   "In the name of {s1}, you are under arrest!", "follow_spy_talk_2", []],
  [anyone, "follow_spy_talk_2", [], "You won't get me alive!", "close_window", []],
  [anyone|plyr, "follow_spy_talk", [], "Never mind me. I was just passing by.", "close_window", [(assign, "$g_leave_encounter",1)]],

  [party_tpl|pt_spy_partners,"start", [], "Greetings.", "spy_partners_talk",[]],

  [anyone|plyr,"spy_partners_talk",
   [
     (quest_get_slot, ":quest_giver", "qst_follow_spy", slot_quest_giver_troop),
     (str_store_troop_name, s1, ":quest_giver"),
     ],
   "In the name of {s1} You are under arrest!", "spy_partners_talk_2",[]],
  [anyone,"spy_partners_talk_2", [], "You will have to fight us first!", "close_window",[]],
  [anyone|plyr,"spy_partners_talk", [], "Never mind me. I was just passing by.", "close_window",[(assign, "$g_leave_encounter",1)]],


###Conspirator
##
##  [party_tpl|pt_conspirator_leader,"start", [], "TODO: Hello.", "conspirator_talk",[]],
##  [party_tpl|pt_conspirator,"start", [], "TODO: Hello.", "conspirator_talk",[]],
##
##  [anyone|plyr,"conspirator_talk", [(gt, "$qst_capture_conspirators_leave_meeting_counter", 0),
##                                    (quest_get_slot,":quest_giver","qst_capture_conspirators",slot_quest_giver_troop),
##                                    (str_store_troop_name,s1,":quest_giver")],
##   "TODO: In the name of {s1}, you are under arrest!", "conspirator_talk_2",[]],
##
##  [anyone|plyr,"conspirator_talk", [], "TODO: Bye.", "close_window",[(assign, "$g_leave_encounter",1)]],
##
##  [anyone,"conspirator_talk_2", [], "You won't get me alive!", "close_window",[]],
##
#Runaway Peasants


  [party_tpl|pt_runaway_serfs,"start", [(party_slot_eq, "$g_encountered_party", slot_town_center, 0)],#slot_town_center is used for first time meeting
   "Good day {sir/madam}.", "runaway_serf_intro_1",
   [(party_set_slot, "$g_encountered_party", slot_town_center, 1)]],

  [anyone|plyr,"runaway_serf_intro_1", [(quest_get_slot, ":lord", "qst_bring_back_runaway_serfs", slot_quest_giver_troop),
                                        (str_store_troop_name, s4, ":lord")],
   "I have been sent by your {s4} whom you are running from. He will not punish you if you return now.", "runaway_serf_intro_2",[]],

  [anyone,"runaway_serf_intro_2", [(quest_get_slot, ":target_center", "qst_bring_back_runaway_serfs", slot_quest_target_center),
                                   (str_store_party_name, s6, ":target_center"),
                                   (quest_get_slot, ":quest_object_center", "qst_bring_back_runaway_serfs", slot_quest_object_center),
                                   (str_store_party_name, s1, ":quest_object_center")],
   "My good {sir/madam}. Our lives at our village {s1} was unbearable. We worked all day long and still went to bed hungry.\
 We are going to {s6} to start a new life, where we will be treated like humans.", "runaway_serf_intro_3",[]],

  [anyone|plyr,"runaway_serf_intro_3", [(quest_get_slot, ":quest_object_center", "qst_bring_back_runaway_serfs", slot_quest_object_center),
                                        (str_store_party_name, s1, ":quest_object_center"),],
   "You have gone against our laws by running from your bondage. You will go back to {s1} now!", "runaway_serf_go_back",
   [(quest_get_slot, ":quest_object_center", "qst_bring_back_runaway_serfs", slot_quest_object_center),
    (call_script, "script_change_player_relation_with_center", ":quest_object_center", -1)]],

  [anyone|plyr,"runaway_serf_intro_3", [], "Well, maybe you are right. All right then. If anyone asks, I haven't seen you.", "runaway_serf_let_go",
   [(quest_get_slot, ":quest_object_center", "qst_bring_back_runaway_serfs", slot_quest_object_center),
    (call_script, "script_change_player_relation_with_center", ":quest_object_center", 1)]],

  [party_tpl|pt_runaway_serfs,"runaway_serf_go_back", [(quest_get_slot, ":home_center", "qst_bring_back_runaway_serfs", slot_quest_object_center),
                                                       (str_store_party_name, s5, ":home_center")],
   "All right {sir/madam}. As you wish. We'll head back to {s5} now.", "close_window",
   [(quest_get_slot, ":quest_object_center", "qst_bring_back_runaway_serfs", slot_quest_object_center),
    (party_set_ai_object, "$g_encountered_party", ":quest_object_center"),
    (assign, "$g_leave_encounter",1)]],

  [anyone,"runaway_serf_let_go", [], "God bless you, {sir/madam}. We will not forget your help.", "close_window",
   [(party_set_slot, "$g_encountered_party", slot_town_castle, 1),
    (assign, "$g_leave_encounter",1)]],


  [party_tpl|pt_runaway_serfs,"start", [(party_slot_eq, "$g_encountered_party", slot_town_castle, 1),
                                        ],
   "Good day {sir/madam}. Don't worry. If anyone asks, we haven't seen you.", "runaway_serf_reconsider",[]],

  [anyone|plyr,"runaway_serf_reconsider", [], "I have changed my mind. You must back to your village!", "runaway_serf_go_back",
   [(party_set_slot, "$g_encountered_party", slot_town_castle, 0),
    (quest_get_slot, ":quest_object_center", "qst_bring_back_runaway_serfs", slot_quest_object_center),
    (call_script, "script_change_player_relation_with_center", ":quest_object_center", -2)]],

  [anyone|plyr,"runaway_serf_reconsider", [], "Good. Go quickly now before I change my mind.", "runaway_serf_let_go",[]],


  [party_tpl|pt_runaway_serfs,"start", [(party_slot_eq, "$g_encountered_party", slot_town_castle, 0),
                                        (get_party_ai_object, ":cur_ai_object"),
                                        (quest_get_slot, ":home_center", "qst_bring_back_runaway_serfs", slot_quest_object_center),
                                        (neq, ":home_center", ":cur_ai_object")],
   "Good day {sir/madam}. We were heading back to {s5}, but I am afraid we lost our way.", "runaway_serf_talk_caught",[]],

  [anyone|plyr,"runaway_serf_talk_caught", [], "Do not test my patience. You are going back now!", "runaway_serf_go_back",[]],
  [anyone|plyr,"runaway_serf_talk_caught", [], "Well, if you are that eager to go, then go.", "runaway_serf_let_go",
   [(quest_get_slot, ":quest_object_center", "qst_bring_back_runaway_serfs", slot_quest_object_center),
    (call_script, "script_change_player_relation_with_center", ":quest_object_center", 1)]],

  [party_tpl|pt_runaway_serfs,"start",
   [(quest_get_slot, ":home_center", "qst_bring_back_runaway_serfs", slot_quest_object_center),
    (str_store_party_name, s5, ":home_center")], "We are on our way back to {s5} {sir/madam}.", "runaway_serf_talk_again_return",[]],

  [anyone|plyr,"runaway_serf_talk_again_return", [], "Make haste now. The sooner you return the better.", "runaway_serf_talk_again_return_2",[]],
  [anyone|plyr,"runaway_serf_talk_again_return", [], "Good. Keep going.", "runaway_serf_talk_again_return_2",[]],

  [anyone|plyr,"runaway_serf_talk_again_return_2", [], "Yes {sir/madam}. As you wish.", "close_window",[(assign, "$g_leave_encounter",1)]],



#Quest bandits
  [anyone,"start", [
  (check_quest_active, "qst_track_down_bandits"),
  (quest_slot_eq, "qst_track_down_bandits", slot_quest_target_party, "$g_encountered_party"),
  (neg|is_between, "$g_encountered_party_faction", kingdoms_begin, kingdoms_end), #ie, the party has not respawned as a non-bandit
  ],
   "This must be your unlucky day, mate. We're just about the worst people you could run into, in these parts.", "troublesome_bandits_intro_1",[
   ]],

 [anyone|plyr,"troublesome_bandits_intro_1", [],
   "Heh. For me, you are nothing more than walking money bags.\
 A merchant in {s1} offered me good money for your heads.",
   "troublesome_bandits_intro_2", [(quest_get_slot, ":quest_giver_center", "qst_track_down_bandits", slot_quest_giver_center),
                                   (str_store_party_name, s1, ":quest_giver_center")
                                   ]],
  [anyone,"troublesome_bandits_intro_2", [],
   "A bounty hunter! Kill {him/her}! Kill {him/her} now!", "close_window",[
   (encounter_attack)]],


#Deserters
  [party_tpl|pt_deserters, "start", [(eq,"$talk_context",tc_party_encounter),
                                     (party_get_slot,":protected_until_hours", "$g_encountered_party",slot_party_ignore_player_until),
                                     (store_current_hours,":cur_hours"),
                                     (store_sub, ":protection_remaining",":protected_until_hours",":cur_hours"),
                                     (gt, ":protection_remaining", 0)], "What do you want?\
 You want to pay us some more money?", "deserter_paid_talk",[]],
  [anyone|plyr,"deserter_paid_talk", [], "Sorry to trouble you. I'll be on my way now.", "deserter_paid_talk_2a",[]],
  [anyone,"deserter_paid_talk_2a", [], "Yeah. Stop fooling around and go make some money.\
 I want to see that purse full next time I see you.", "close_window",[(assign, "$g_leave_encounter",1)]],
  [anyone|plyr,"deserter_paid_talk", [], "No. It's your turn to pay me this time.", "deserter_paid_talk_2b",[]],
  [anyone,"deserter_paid_talk_2b", [], "What nonsense are you talking about? You want trouble? You got it.", "close_window",[
    
       #SB : start attack
       (call_script, "script_encounter_agent_draw_weapon"),
       (assign, "$cant_leave_encounter", 1),
       (encounter_attack),
       (party_set_slot,"$g_encountered_party",slot_party_ignore_player_until,0),
       (party_ignore_player, "$g_encountered_party", 0),
    ]],


  [party_tpl|pt_deserters,"start", [
      (eq,"$talk_context",tc_party_encounter)
                    ], "We are the free brothers.\
 We will fight only for ourselves from now on.\
 Now give us your gold or taste our steel.", "deserter_talk",[]],
##  [anyone|plyr,"deserter_talk", [(check_quest_active, "qst_bring_back_deserters"),
##                                 (quest_get_slot, ":target_deserter_troop", "qst_bring_back_deserters", slot_quest_target_troop),
##                                 (party_count_members_of_type, ":num_deserters", "$g_encountered_party",":target_deserter_troop"),
##                                 (gt, ":num_deserters", 1)],
##   "If you surrender to me now, you will rejoin the army of your kingdom without being punished. Otherwise you'll get a taste of my sword.", "deserter_join_as_prisoner",[]],
  [anyone|plyr,"deserter_talk", [], "When I'm done with you, you'll regret ever leaving your army.", "close_window",[]],
  [anyone|plyr,"deserter_talk", [], "There's no need to fight. I am ready to pay for free passage.", "deserter_barter",[]],

##  [anyone,"deserter_join_as_prisoner", [(call_script, "script_party_calculate_strength", "p_main_party"),
##                                        (assign, ":player_strength", reg0),
##                                        (store_encountered_party,":encountered_party"),
##                                        (call_script, "script_party_calculate_strength", ":encountered_party"),
##                                        (assign, ":enemy_strength", reg0),
##                                        (val_mul, ":enemy_strength", 2),
##                                        (ge, ":player_strength", ":enemy_strength")],
##   "All right we join you then.", "close_window",[(assign, "$g_enemy_surrenders", 1)]],
##  [anyone,"deserter_join_as_prisoner", [], "TODO: We will never surrender!", "close_window",[(encounter_attack)]],
## CC
  [anyone|plyr,"deserter_talk",
    [
      # (store_num_free_stacks,":stack_left","p_main_party"),
      # (party_stack_get_troop_id, ":troop_no", "$g_encountered_party", 0),
      # (this_or_next|gt, ":stack_left", 0),
      # (main_party_has_troop, ":troop_no"),
      (party_can_join),

      (store_troop_faction, ":faction", "$g_talk_troop"), #top stack rarely dies from attrition
      (try_begin), #allow player's kingdom to accept deserters of same culture
        (faction_slot_eq, "fac_player_supporters_faction", slot_faction_state, sfs_active),
        (is_between, "$g_player_culture", npc_kingdoms_begin, npc_kingdoms_end),
        (eq, "$g_player_culture", ":faction"),
        (assign, ":faction", "$players_kingdom"),
        (assign, reg10, 1),
      (else_try),
        (call_script, "script_faction_get_adjective_to_s10", ":faction"),
        (assign, reg10, 0),
      (try_end),
      (this_or_next|eq, "$players_kingdom", ":faction"),
      (eq, "$supported_pretender_old_faction", ":faction"),

    ], "I will reward you and provide protection if you {reg10?enlist in my:rejoin the {s10}} army.", "deserter_recruit",[]],
  [anyone,"deserter_recruit", [
  (call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),
  ], "How generous, {s0}. Show us {reg5} denars, then we will consider joining you.", "deserter_recruit_2",
    [
      (party_get_num_companion_stacks, ":num_stacks","$g_encountered_party"),
      (assign, ":recruit_cost", 0),
      (try_for_range, ":i_stack", 0, ":num_stacks"),
        (party_stack_get_troop_id, ":troop_no", "$g_encountered_party", ":i_stack"),
        (party_stack_get_size, ":stack_size", "$g_encountered_party", ":i_stack"),
        (party_stack_get_num_wounded, ":num_wounded","$g_encountered_party",":i_stack"),
        (try_begin),
          (gt, ":num_wounded", 0),
          (val_sub, ":stack_size", ":num_wounded"),
          (val_div, ":num_wounded", 4), #quarter cost for recruiting wounded
          (val_add, ":stack_size", ":num_wounded"),
        (try_end),
        (call_script, "script_game_get_join_cost", ":troop_no"),
        (assign, ":join_cost", reg0),
        (val_mul, ":join_cost", ":stack_size"),
        (val_add, ":recruit_cost", ":join_cost"),
      (try_end),
      (party_get_num_prisoners, ":num_prisoners", "$g_encountered_party"),
      (val_mul, ":num_prisoners", 50), #deserters can't count or use game_get_prisoner_price
      (val_add, ":recruit_cost", ":num_prisoners"),
      
      # (store_skill_level, ":persuasion_level", "skl_persuasion", "trp_player"),
      (party_get_skill_level, ":persuasion", "p_main_party", "skl_persuasion"),
      (faction_get_slot, ":serfdom", "$g_talk_troop_faction", dplmc_slot_faction_serfdom),
      (val_sub, ":persuasion", ":serfdom"),
      (val_mul, ":persuasion", 3), #high serfdom leads to a malus in hiring deserter
      # (try_begin),
        # (troop_slot_eq, "trp_player", slot_troop_original_faction, "$g_talk_troop_faction"),
        # (val_add, ":persuasion", 25),
      # (try_end),
      (store_sub, ":persuasion", 100, ":persuasion"), #discount from persuasion and faction slider
      (val_mul, ":recruit_cost", ":persuasion"),

      #faction instability contributes to divider at 1/4 rate
      (faction_get_slot, ":instability", "$g_talk_troop_faction", slot_faction_instability),
      (val_div, ":instability", 4),
      (val_add, ":instability", 100), #base percentage
      (try_begin), #player recruiting culturally, higher cost
        (neq, "$players_kingdom", "$g_talk_troop_faction"),
        (val_sub, ":instability", 25),
      (try_end),
      (try_begin), #player attempt recruiting while substantially weaker, bargain for more
        (lt, "$g_strength_ratio", 60),
        (val_div, ":instability", 2),
      (try_end),
      (val_div, ":recruit_cost", ":instability"),
      (assign, reg5, ":recruit_cost"),
      (assign, "$temp", ":recruit_cost"),
    ]],

  [anyone|plyr,"deserter_recruit_2",
      [
        (store_troop_gold, reg2, "trp_player"),
        (ge,reg2,"$temp"),
        (assign,reg5,"$temp"),
      ],
     "All right, here's your {reg5} denars.", "deserter_recruit_3a",
     [
        (troop_remove_gold, "trp_player", "$temp"),
        # (display_message, "@Your current action is disgraceful.", message_defeated),
        (play_sound, "snd_quest_failed"),
        (store_div, ":renown_sub", "$temp", -150), #about 1 renown per 3-4 troop
        (try_begin),#supporters get less malus
           (store_troop_faction, ":faction", "$g_talk_troop"),
           (eq, ":faction", "$supported_pretender_old_faction"),
           (val_div, ":renown_sub", 2),
        (try_end),

        #malus applied for getting batches of free troops
        (call_script, "script_objectionable_action", tmt_aristocratic, "str_hire_deserters"),
        (call_script, "script_change_troop_renown", "trp_player", ":renown_sub"),
        (party_get_num_companions, ":num_recruited", "$g_encountered_party"), #not counting prisoners
        (val_mul, ":num_recruited", 20), #about 1 point of morale lost per 5 men
        (call_script, "script_change_faction_troop_morale", ":faction", ":num_recruited")
     ]],
  [anyone|plyr,"deserter_recruit_2", [],
   "I don't have that much money with me", "deserter_barter_3b",[]],

  [anyone,"deserter_recruit_3a", [], "We are at your service from now on.", "close_window",
    [
      (call_script, "script_party_add_party", "p_main_party", "$g_encountered_party"),
      (party_detach, "$g_encountered_party"),
      (remove_party, "$g_encountered_party"),
      (assign, "$g_leave_encounter", 1),
    ]],
## CC


  [anyone,"deserter_barter", [], "Good. You are clever. Now, having a look at your baggage, I reckon a fellow like you could pretty easily afford {reg5} denars. We wouldn't want to be too greedy, now would we? Pay us, and then you can go.", "deserter_barter_2",[
    (store_troop_gold, ":total_value", "trp_player"),
    (troop_get_inventory_capacity, ":inv_size", "trp_player"),
    (try_for_range, ":i_slot", 0, ":inv_size"),
         (troop_get_inventory_slot, ":item_id", "trp_player", ":i_slot"),
         (ge, ":item_id", 0),
         (try_begin),
           (is_between, ":item_id", trade_goods_begin, trade_goods_end),
           (store_item_value, ":item_value", ":item_id"),
           (val_add, ":total_value", ":item_value"),
         (try_end),
    (try_end),
    (store_div, "$g_tribute_amount", ":total_value", 10), #10000 gold = excellent_target
    (val_max, "$g_tribute_amount", 10),
    (assign,reg(5),"$g_tribute_amount")]],
  [anyone|plyr,"deserter_barter_2", [(store_troop_gold,reg(2)),(ge,reg(2),"$g_tribute_amount"),(assign,reg(5),"$g_tribute_amount")],
   "All right here's your {reg5} denars.", "deserter_barter_3a",[
   (troop_remove_gold, "trp_player","$g_tribute_amount"),
   (add_gold_to_party, "$g_tribute_amount", "$g_encountered_party"), #SB : pay tribute
   ]],
  [anyone|plyr,"deserter_barter_2", [],
   "I don't have that much money with me", "deserter_barter_3b",[
    (call_script, "script_encounter_agent_draw_weapon"),
   ]],
  #SB : force attack after this option
  [anyone,"deserter_barter_3b", [],
   "Too bad. Then we'll have to sell you to the slavers.", "close_window",[
    (assign,"$cant_leave_encounter", 1),
    (encounter_attack),]],


  [anyone,"deserter_barter_3a", [], "Heh. That wasn't difficult, now, was it? All right. Go now.", "close_window",[
    (store_current_hours,":protected_until"),
    (val_add, ":protected_until", 72),
    (party_set_slot,"$g_encountered_party",slot_party_ignore_player_until,":protected_until"),
    (party_ignore_player, "$g_encountered_party", 72),
    
    #SB : objectionable action
    (call_script, "script_objectionable_action", tmt_aristocratic, "str_pay_bandits"),

    (assign, "$g_leave_encounter",1)
    ]],

##### TODO: QUESTS COMMENT OUT END

#Tavernkeepers

  [anyone ,"start", [(store_conversation_troop,reg(1)),(ge,reg(1),tavernkeepers_begin),(lt,reg(1),tavernkeepers_end)],
   "Good day dear {sir/madam}. How can I help you?", "tavernkeeper_talk",
   [
#    (store_encountered_party,reg(2)),
#    (party_get_slot,"$tavernkeeper_party",reg(2),slot_town_mercs),
    #SB : pre-calculate amount in inventory
    (try_begin),
      (check_quest_active,"qst_deliver_wine"),
      (quest_slot_eq, "qst_deliver_wine", slot_quest_target_center, "$g_encountered_party"),
      (assign, ":total_units", 0),
      (try_begin), #legacy quest items, use count and not amount
        (quest_get_slot, ":quest_target_item", "qst_deliver_wine", slot_quest_target_item),
        (this_or_next|eq, ":quest_target_item", "itm_quest_wine"),
        (eq, ":quest_target_item", "itm_quest_ale"),
        (store_item_kind_count, ":total_units", ":quest_target_item"),
      (else_try),
        (troop_get_inventory_capacity, ":inv_cap", "trp_player"),
        (try_for_range, ":i_slot", 10, ":inv_cap"),
          (troop_get_inventory_slot, ":item_no", "trp_player", ":i_slot"),
          (eq, ":item_no", ":quest_target_item"),
          (troop_get_inventory_slot_modifier, ":imod", "trp_player", ":i_slot"),
          (neq, ":imod", imod_rotten),
          (troop_inventory_slot_get_item_amount, ":cur_amount", "trp_player", ":i_slot"),
          (val_add, ":total_units", ":cur_amount"),
        (try_end),
      (try_end),
      (quest_set_slot, "qst_deliver_wine", slot_quest_temp_slot, ":total_units"),
    (try_end),
    ]],

  [anyone,"tavernkeeper_pretalk", [], "Anything else?", "tavernkeeper_talk",[]],

  #SB : todo, also enable this quest with the goods merchant as recipient
  [anyone|plyr,"tavernkeeper_talk", [(check_quest_active,"qst_deliver_wine"),
                                     (quest_slot_eq, "qst_deliver_wine", slot_quest_target_center, "$g_encountered_party"),
                                     (quest_get_slot, ":quest_target_item", "qst_deliver_wine", slot_quest_target_item),
                                     (quest_get_slot, ":quest_target_amount", "qst_deliver_wine", slot_quest_target_amount),
                                     # #SB : use new item operation instead of slot
                                     # (item_get_max_ammo, ":max_count", ":quest_target_item"),
                                     # (val_mul, ":max_count", ":quest_target_amount"),
                                     # (store_item_kind_count, ":item_count", ":quest_target_item"),
                                     (quest_slot_ge, "qst_deliver_wine", slot_quest_temp_slot, ":quest_target_amount"),
                                     (assign, reg9, ":quest_target_amount"),
                                     (str_store_item_name, s4, ":quest_target_item"),
                                     ],
   "I was told to deliver you {reg9} units of {s4}.", "tavernkeeper_deliver_wine",[]],
#SB : gender string, grammar (quest giver is always "Guild Master")
   [anyone,"tavernkeeper_deliver_wine", [],
 "At last! My stock was almost depleted.\
 I have paid the cost of the {s4} in advance, but\
 here, take these {reg5} denars. That should cover your pay.\
 And give that {s9} my regards.\
 I'll put in a good word for you next time I deal with {reg3?her:him}.", "tavernkeeper_pretalk",
   [(quest_get_slot, ":quest_target_item", "qst_deliver_wine", slot_quest_target_item),
    (quest_get_slot, ":quest_target_amount", "qst_deliver_wine", slot_quest_target_amount),
    (quest_get_slot, ":quest_gold_reward", "qst_deliver_wine", slot_quest_gold_reward),
    (quest_get_slot, ":quest_giver_troop", "qst_deliver_wine", slot_quest_giver_troop),
    # (troop_remove_items, "trp_player", ":quest_target_item", ":quest_target_amount"),
    #SB : remove whole items followed by non-rotten from bottom of inventory up
    (try_begin),
      (this_or_next|eq, ":quest_target_item", "itm_quest_wine"),
      (eq, ":quest_target_item", "itm_quest_ale"),
      (troop_remove_items, "trp_player", ":quest_target_item", ":quest_target_amount"),
    (else_try),
      (troop_get_inventory_capacity, ":inv_cap", "trp_player"),
      # (item_get_max_ammo, ":max_amount", ":quest_target_item"),
      (try_for_range, ":i_slot", 10, ":inv_cap"),
        (gt, ":quest_target_amount", 0),
        (troop_get_inventory_slot, ":item_no", "trp_player", ":i_slot"),
        (eq, ":item_no", ":quest_target_item"),
        (troop_get_inventory_slot_modifier, ":imod", "trp_player", ":i_slot"),
        (neq, ":imod", imod_rotten),
        (troop_inventory_slot_get_item_amount, ":cur_amount", "trp_player", ":i_slot"),
        # (eq, ":cur_amount", ":max_amount"), #whole items, affected by item modifiers
        (troop_inventory_slot_get_item_max_amount, ":cur_max", "trp_player", ":i_slot"),
        (eq, ":cur_max", ":cur_amount"),
        (val_sub, ":quest_target_amount", ":cur_amount"),
        (troop_set_inventory_slot, "trp_player", ":i_slot", -1),
        (try_begin),
          (le, ":quest_target_amount", 0),
          (assign, ":inv_cap", -1), #loop break
        (try_end),
      (try_end),
      (try_for_range_backwards, ":i_slot", 10, ":inv_cap"),
        (gt, ":quest_target_amount", 0),
        (troop_get_inventory_slot, ":item_no", "trp_player", ":i_slot"),
        (eq, ":item_no", ":quest_target_item"),
        (troop_get_inventory_slot_modifier, ":imod", "trp_player", ":i_slot"),
        (neq, ":imod", imod_rotten),
        (troop_inventory_slot_get_item_amount, ":cur_amount", "trp_player", ":i_slot"),
        (try_begin), #last batch
          (lt, ":quest_target_amount", ":cur_amount"),
          (val_sub, ":cur_amount", ":quest_target_amount"),
          (troop_inventory_slot_set_item_amount, "trp_player", ":i_slot", ":cur_amount"),
          (assign, ":quest_target_amount", 0), #set this back down to 0
          (assign, ":inv_cap", 0), #probably doesn't work for backwards range?
        (else_try), #deduct and delete from inv
          (val_sub, ":quest_target_amount", ":cur_amount"),
          (troop_set_inventory_slot, "trp_player", ":i_slot", -1),
        (try_end),
      (try_end),
    (try_end),
    (call_script, "script_troop_add_gold", "trp_player", ":quest_gold_reward"),
    (assign, ":xp_reward", ":quest_gold_reward"),
    (val_mul, ":xp_reward", 4),
    (add_xp_as_reward, ":xp_reward"),
    (assign, reg5, ":quest_gold_reward"),
    (str_store_item_name, s4, ":quest_target_item"),
    (str_store_troop_name, s9, ":quest_giver_troop"),
    (call_script, "script_dplmc_store_troop_is_female_reg", ":quest_giver_troop", 3),

    (quest_get_slot, ":giver_town", "qst_deliver_wine", slot_quest_giver_center),
    (call_script, "script_change_player_relation_with_center", ":giver_town", 2),
    (call_script, "script_change_player_relation_with_center", "$current_town", 1),
    (call_script, "script_end_quest", "qst_deliver_wine"),
    ]],

  [anyone|plyr,"tavernkeeper_talk", [(check_quest_active,"qst_deliver_wine"),
                                     (quest_slot_eq, "qst_deliver_wine", slot_quest_target_center, "$g_encountered_party"),
                                     (quest_get_slot, ":quest_target_item", "qst_deliver_wine", slot_quest_target_item),
                                     (quest_get_slot, ":quest_target_amount", "qst_deliver_wine", slot_quest_target_amount),
                                     # (store_item_kind_count, ":item_count", ":quest_target_item"),
                                     # (lt, ":item_count", ":quest_target_amount"),
                                     # (gt, ":item_count", 0),
                                     (neg|quest_slot_ge, "qst_deliver_wine", slot_quest_temp_slot, ":quest_target_amount"),
                                     (assign, reg9, ":quest_target_amount"),
                                     (str_store_item_name, s4, ":quest_target_item"),
                                     ],
   "I was told to deliver you {reg9} units of {s4}, but I lost some of the cargo on the way.", "tavernkeeper_deliver_wine_incomplete",[]],
  [anyone,"tavernkeeper_deliver_wine_incomplete", [],
 "Attacked by bandits eh?\
 You are lucky they left you alive.\
 Anyway, I can pay you no more than {reg5} denars for this.\
 And I will let {s1} know that my order was delivered less than completely,\
 so you will probably be charged for this loss.", "tavernkeeper_pretalk",
   [(quest_get_slot, ":quest_target_item", "qst_deliver_wine", slot_quest_target_item),
    (quest_get_slot, ":quest_target_amount", "qst_deliver_wine", slot_quest_target_amount),
    (quest_get_slot, ":quest_gold_reward", "qst_deliver_wine", slot_quest_gold_reward),
    (quest_get_slot, ":quest_giver_troop", "qst_deliver_wine", slot_quest_giver_troop),
    # (store_item_kind_count, ":item_count", ":quest_target_item"),
    # (troop_remove_items, "trp_player", ":quest_target_item", ":item_count"),
    (try_begin), #non-perishable
      (this_or_next|eq, ":quest_target_item", "itm_quest_wine"),
      (eq, ":quest_target_item", "itm_quest_ale"),
      (store_item_kind_count, ":item_count", ":quest_target_item"),
      (troop_remove_items, "trp_player", ":quest_target_item", ":item_count"),
      (val_sub, ":quest_target_amount", ":item_count"),
    (else_try),
      #SB : remove items by quantity, top-down with only one pass
      (troop_get_inventory_capacity, ":inv_cap", "trp_player"),
      (assign, ":item_count", 0),
      (try_for_range, ":i_slot", 10, ":inv_cap"),
        (gt, ":quest_target_amount", 0),
        (troop_get_inventory_slot, ":item_no", "trp_player", ":i_slot"),
        (eq, ":item_no", ":quest_target_item"),
        (troop_get_inventory_slot_modifier, ":imod", "trp_player", ":i_slot"),
        (neq, ":imod", imod_rotten),
        (troop_inventory_slot_get_item_amount, ":cur_amount", "trp_player", ":i_slot"),
        (try_begin), #last batch
          (lt, ":quest_target_amount", ":cur_amount"),
          (val_sub, ":cur_amount", ":quest_target_amount"),
          (troop_inventory_slot_set_item_amount, "trp_player", ":i_slot", ":cur_amount"),
          (val_add, ":item_count", ":quest_target_amount"),
          (assign, ":quest_target_amount", 0), #set this back down to 0
          (assign, ":inv_cap", 0),
        (else_try), #deduct and delete from inv
          (val_sub, ":quest_target_amount", ":cur_amount"),
          (troop_set_inventory_slot, "trp_player", ":i_slot", -1),
          (val_add, ":item_count", ":quest_target_amount"),
        (try_end),
      (try_end),
    (try_end),
    #SB : refetch this slot value since we've decremented
    (quest_get_slot, ":quest_total_amount", "qst_deliver_wine", slot_quest_target_amount),
    # (quest_get_slot, ":quest_temp_amount", "qst_deliver_wine", slot_quest_temp_slot),
 
    (val_mul, ":quest_gold_reward", ":item_count"),
    (val_div, ":quest_gold_reward", ":quest_total_amount"),
    (call_script, "script_troop_add_gold", "trp_player", ":quest_gold_reward"),
    (assign, reg5, ":quest_gold_reward"),
    (assign, ":xp_reward", ":quest_gold_reward"),
    (val_mul, ":xp_reward", 4),
    (add_xp_as_reward, ":xp_reward"),
    (store_item_value,":debt",":quest_target_item"),
    (item_get_max_ammo, ":max_amount", ":quest_target_item"),
    (store_sub, ":item_left", ":quest_total_amount", ":item_count"),
    (val_mul, ":debt", 6),
    (val_mul, ":debt", ":item_left"),
    (val_div, ":debt", ":quest_total_amount"),
    (val_div, ":debt", ":max_amount"),
    (val_div, ":debt", 5),
    (val_add, "$debt_to_merchants_guild", ":debt"),
    (quest_get_slot, ":giver_town", "qst_deliver_wine", slot_quest_giver_center),
    (str_store_troop_name, s1, ":quest_giver_troop"),
    (call_script, "script_change_player_relation_with_center", ":giver_town", 1),
    (call_script, "script_end_quest", "qst_deliver_wine"),
    ]],

  [anyone|plyr,"tavernkeeper_talk", [(check_quest_active,"qst_deliver_wine"),
                                     (quest_slot_eq, "qst_deliver_wine", slot_quest_target_center, "$g_encountered_party"),
                                     (quest_get_slot, ":quest_target_item", "qst_deliver_wine", slot_quest_target_item),
                                     (store_item_kind_count, ":item_count", ":quest_target_item"),
                                     (eq, ":item_count", 0),
                                     (quest_get_slot, reg9, "qst_deliver_wine", slot_quest_target_amount),
                                     (str_store_item_name, s4, ":quest_target_item"),
                                     ],
   "I was told to deliver you {reg9} units of {s4}, but I lost the cargo on the way.", "tavernkeeper_deliver_wine_lost",[]],

  [anyone,"tavernkeeper_deliver_wine_lost", [],
 "What? I was waiting for that {s4} for weeks!\
 And now you are telling me that you lost it?\
 You may rest assured that I will let {s1} know about this.", "tavernkeeper_pretalk",
   [(add_xp_as_reward, 40),
    (quest_get_slot, ":quest_target_item", "qst_deliver_wine", slot_quest_target_item),
    (quest_get_slot, ":quest_target_amount", "qst_deliver_wine", slot_quest_target_amount),
    (quest_get_slot, ":quest_giver_troop", "qst_deliver_wine", slot_quest_giver_troop),
    (str_store_item_name, s4, ":quest_target_item"),
    (str_store_troop_name, s1, ":quest_giver_troop"),
    #SB : recalculate new debt
    (store_item_value,":qst_deliver_wine_debt",":quest_target_item"),
    (item_get_max_ammo, ":max_amount", ":quest_target_item"),
    (val_mul,":qst_deliver_wine_debt",":quest_target_amount"),
    (val_mul,":qst_deliver_wine_debt", 6),
    (val_div,":qst_deliver_wine_debt", 5),
    (val_div, ":qst_deliver_wine_debt", ":max_amount"),
    (val_add, "$debt_to_merchants_guild", ":qst_deliver_wine_debt"),
    (call_script, "script_end_quest", "qst_deliver_wine"),
   ]],

##  [anyone|plyr,"tavernkeeper_talk", [], "I need to hire some soldiers. Can you help me?", "tavernkeeper_buy_peasants",[]],
##  [anyone,"tavernkeeper_buy_peasants",
##   [
##       (store_encountered_party,reg(3)),
##       (store_faction_of_party,reg(4),reg(3)),
##       (store_relation,reg(5),"fac_player_supporters_faction",reg(4)),
##       (lt, reg(5), -3),
##    ], "I don't think anyone from this town will follow somebody like you. Try your luck elsewhere.", "tavernkeeper_buy_peasants_2",[]],
##  [anyone,"tavernkeeper_buy_peasants", [], "I know a few fellows who would follow you if you paid for their equipment.", "tavernkeeper_buy_peasants_2",[(set_mercenary_source_party,"$tavernkeeper_party"),[change_screen_buy_mercenaries]]],
##  [anyone,"tavernkeeper_buy_peasants_2", [], "Anything else?", "tavernkeeper_talk",[]],
##
##  [anyone|plyr,"tavernkeeper_talk", [], "I want to rest for a while.", "tavernkeeper_rest",[]],
###  [anyone,"tavernkeeper_rest", [], "Of course... How long do you want to rest?", "tavernkeeper_rest_2",[]],
##  [anyone,"tavernkeeper_rest",
##   [
##       (store_encountered_party,reg(3)),
##       (store_faction_of_party,reg(4),reg(3)),
##       (store_relation,reg(5),"fac_player_supporters_faction",reg(4)),
##       (lt, reg(5), -3),
##      ], "You look like trouble stranger. I can't allow you to stay for the night. No.", "close_window",
##   []],
##  [anyone,"tavernkeeper_rest", [], "Of course... That will be {reg3} denars for the room and food. How long do you want to rest?", "tavernkeeper_rest_2",
##   [(store_party_size,reg(3)),
##    (val_add,reg(3),1),
##    (val_div,reg(3),3),
##    (val_max,reg(3),1),
##    (assign,"$tavern_rest_cost",reg(3))]],
##  [anyone|plyr,"tavernkeeper_rest_2", [(store_time_of_day,reg(1)),
##                                       (val_add,reg(1),7),
##                                       (val_mod,reg(1),24),
##                                       (lt,reg(1),12),
##                                       (store_troop_gold,reg(8),"trp_player"),
##                                       (ge,reg(8),"$tavern_rest_cost"),
##                                       ],
##   "I want to rest until morning.", "close_window",
##   [(assign, reg(2), 13),(val_sub,reg(2),reg(1)),(assign, "$g_town_visit_after_rest", 1),(rest_for_hours, reg(2)),(troop_remove_gold, "trp_player","$tavern_rest_cost"),(call_script, "script_change_player_party_morale", 2)]],
##  [anyone|plyr,"tavernkeeper_rest_2", [(store_time_of_day,reg(1)),
##                                       (val_add,reg(1),7),
##                                       (val_mod,reg(1),24),
##                                       (ge,reg(1),12),
##                                       (store_troop_gold,reg(8),"trp_player"),
##                                       (ge,reg(8),"$tavern_rest_cost"),
##                                       ],
##   "I want to rest until evening.", "close_window",
##   [(assign, reg(2), 28),(val_sub,reg(2),reg(1)),(assign, "$g_town_visit_after_rest", 1),(rest_for_hours, reg(2)),(troop_remove_gold, "trp_player","$tavern_rest_cost"),(call_script, "script_change_player_party_morale", 2)]],
##  [anyone|plyr,"tavernkeeper_rest_2", [], "Forget it.", "close_window",[]],

  [anyone|plyr,"tavernkeeper_talk", [
      (store_current_hours,":cur_hours"),
      (val_sub, ":cur_hours", 24),
      (gt, ":cur_hours", "$buy_drinks_last_time"),
	  ##diplomacy start+ Replace with cultural equivalent
	  ##OLD:
      #], "I'd like to buy every man who comes in here tonight a jar of your best wine.", "tavernkeeper_buy_drinks",[]],
	  ##NEW:
	  (call_script, "script_dplmc_print_cultural_word_to_sreg", "$g_talk_troop", DPLMC_CULTURAL_TERM_TAVERNWINE, s0),
	  ], "I'd like to buy every man who comes in here tonight a jar of your best {s0}.", "tavernkeeper_buy_drinks",[]],
	  ##diplomacy end+

      #SB : make it harder to buy back relations
  [anyone,"tavernkeeper_buy_drinks",
   [
        (this_or_next|eq, "$sneaked_into_town", disguise_pilgrim),
        (eq, "$sneaked_into_town", disguise_farmer),
   ], "With what money, friend? You look like you could barely hold down a meal, let afford a round of drinks.", "close_window", []],
   # TODO : add option to insist on paying, risk getting arrested by guards/recognized while drunk

  [anyone,"tavernkeeper_buy_drinks",
   [
        (this_or_next|lt, "$player_honor", -20), #lowest game checks for (marriage), shouldn't reach this point
        (neg|party_slot_ge, "$current_town", slot_center_player_relation, -40), #this is the "angry" threshold
   ], "Why {playername}, I do believe that would be a waste of our time. The local boys would dump their perfectly good drinks as soon as they heard it came from you. I think it best if you could find other places to spend your blood money...", "close_window", []],
   
   
  [anyone,"tavernkeeper_buy_drinks",
   [
        (party_get_slot, ":lord", "$current_town", slot_town_lord),
        (gt, ":lord", stl_unassigned),
        (this_or_next|is_between, ":lord", active_npcs_begin, active_npcs_end),
        (troop_slot_eq, ":lord", slot_troop_occupation, slto_kingdom_hero),
        (call_script, "script_troop_get_relation_with_troop", "trp_player", ":lord"),
        (lt, reg0, -20), #same relationship malus as hired assassin
        #TODO add spousal relationship as well (both player and town ruler)
   ], "No offense, {playername}, but I wouldn't stay in business long if {s1} got word that you're around. In fact, I would caution you to watch your back if you plan on lodging in this town... Who knows what sort of ruffians might show up in the middle of the night?", "close_window", []],

  # [anyone,"tavernkeeper_buy_drinks",
   # [
        # (this_or_next|lt, "$player_honor", -20), #lowest game checks for (marriage), shouldn't reach this point
        # (neg|party_slot_ge, "$current_town", slot_center_player_relation, -40), #this is the "angry" threshold
   # ], "Why {playername}, I do believe that would be a waste of our time. The local boys would dump their perfectly good drinks as soon as they heard it came from you. I think it best if you could find other places to spend your blood money...", "close_window", []],
   
  #SB : TODO adjust cost of buying drinks (prosperity based?)
  # [anyone,"tavernkeeper_buy_drinks",
   # [
    # ], "Of course, {my lord/my lady}. I reckon {reg5} denars should be enough for that. What should I tell the lads?", "tavernkeeper_buy_drinks_2",[
        # (assign, "$temp", 1000),
        # (assign, reg5, "$temp"),
        # ]],

  #SB : mylord replacement
  [anyone,"tavernkeeper_buy_drinks",
   [(call_script, "script_dplmc_print_commoner_at_arg1_says_sir_madame_to_s0", "$current_town"),
    ], "Of course, {s0}. I reckon {reg5} denars should be enough for that. What should I tell the lads?", "tavernkeeper_buy_drinks_2",[
        # (assign, "$temp", 1000), #Native's base cost is 1k
        (call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", "$g_encountered_party_faction"),
        #returns 60 to 0
        (store_add, "$temp", reg0, 20),
        # (try_begin),
          # (gt, "$player_has_homage", 0),
          # (val_mul, "$temp", 2),
        # (try_end),
        (val_mul, "$temp", 20),
        #prosperity plays a small role - more expensive in dilapidated taverns
        (party_get_slot, ":prosperity", "$current_town", slot_town_prosperity),
        (call_script, "script_round_value", ":prosperity"),
        (val_sub, "$temp", reg0),
        (assign, reg5, "$temp"),
        ]],

#SB : TODO add other intrigue option, rebellion vs lord, prison break etc
  [anyone|plyr,"tavernkeeper_buy_drinks_2",
   [
        (store_troop_gold, ":gold", "trp_player"),
        (ge, ":gold", "$temp"),
        (str_store_party_name, s10, "$current_town"),
    ], "Let everyone know of the generosity of {playername} to the people of {s10}.", "tavernkeeper_buy_drinks_end", []],

  [anyone,"tavernkeeper_buy_drinks_end",
  ##diplomacy start+ Replace {sir/madam} with {s0}
   #[], "Don't worry {sir/madam}. Your name will be cheered and toasted here all night.", "tavernkeeper_pretalk",
   [(call_script, "script_dplmc_print_commoner_at_arg1_says_sir_madame_to_s0", "$current_town"),
   ], "Don't worry {s0}. Your name will be cheered and toasted here all night.", "tavernkeeper_pretalk",
   ##diplomacy end+
   [
       (troop_remove_gold, "trp_player", "$temp"),
       (call_script, "script_change_player_relation_with_center", "$current_town", 1),
       (store_current_hours,":cur_hours"),
       #SB : TODO store_add longer delay once relation is high enough
       (assign, "$buy_drinks_last_time", ":cur_hours"),
       ]],


  [anyone|plyr,"tavernkeeper_buy_drinks_2", [], "Actually, cancel that order.", "tavernkeeper_pretalk",[]],

  [anyone|plyr,"tavernkeeper_talk", [
  (neq, "$g_encountered_party_faction", "fac_player_supporters_faction"),
  ],
   "Have you heard of anyone in this realm who might have a job for a {man/woman} like myself?", "tavernkeeper_job_ask",[
   ]],

  [anyone,"tavernkeeper_job_ask",
   [
	(str_store_string, s9, "str__of_course_the_land_is_currently_at_peace_so_you_may_have_better_luck_in_other_realms"),
	(try_for_range, ":faction", kingdoms_begin, kingdoms_end),
		(store_relation, ":relation", "$g_encountered_party_faction", ":faction"),
		(lt, ":relation", 0),
		(str_clear, s9),
	(try_end),
	(faction_get_slot, ":leader",  "$g_encountered_party_faction", slot_faction_leader),
	(str_store_troop_name, s10, ":leader"),
	##diplomacy start+ Fix pronoun "his" -> {reg0?her:his}
	(call_script, "script_dplmc_store_troop_is_female", ":leader"),
   ], "Hmm... Well, {s10} is often looking for mercenaries to fight in {reg0?her:his} wars.{s9}", "tavernkeeper_job_search",
   ##diplomacy end+
    [
   (assign, "$g_troop_list_no", 0),
    ]],


  [anyone, "tavernkeeper_job_search",
  [],
  "Let me think some more...", "tavernkeeper_job_result",
  [
    (call_script, "script_npc_find_quest_for_player_to_s11", "$g_encountered_party_faction"),
	(assign, ":quest_giver", reg0),

	(call_script, "script_get_dynamic_quest", ":quest_giver"),
	(assign, ":quest_type", reg0),

	(try_begin),
		(gt, ":quest_giver", -1),
		(str_store_troop_name, s7, ":quest_giver"),
		(str_clear, s9), #location string

		(assign, ":location", -1),
		(try_begin),
			(troop_slot_eq, ":quest_giver", slot_troop_occupation, slto_kingdom_hero),
			(troop_get_slot, ":quest_giver_party", ":quest_giver", slot_troop_leaded_party),
			(party_is_active, ":quest_giver_party"),
			(party_get_attached_to, ":location", ":quest_giver_party"),
		(else_try),
			(is_between, ":quest_giver", mayors_begin, mayors_end),
			(try_for_range, ":town", towns_begin, towns_end),
				(party_slot_eq, ":town", slot_town_elder, ":quest_giver"),
				(assign, ":location", ":town"),
			(try_end),
		(try_end),

		(try_begin),
			(gt, ":location", -1),
			(try_begin),
				(eq, ":location", "$g_encountered_party"),
				(str_store_string, s8, "str_here"),
			(else_try),
				(str_store_string, s8, "str_over"),
			(try_end),
			(str_store_party_name, s12, ":location"),
			(str_store_string, s9, "str_s8_in_s12"),
		(try_end),

		##diplomacy start+ Do this first
		(call_script, "script_dplmc_store_troop_is_female_reg", ":quest_giver", 4),
		##diplomacy end+
		(try_begin),
			(eq, ":quest_type", "qst_track_down_bandits"),
			(str_store_string, s10, "str__has_put_together_a_bounty_on_some_bandits_who_have_been_attacking_travellers_in_the_area"),
		(else_try),
			(eq, ":quest_type", "qst_destroy_bandit_lair"),
			(str_store_string, s10, "str__has_been_worried_about_bandits_establishing_a_hideout_near_his_home"),
		(else_try),
			(eq, ":quest_type", "qst_retaliate_for_border_incident"),
			(str_store_string, s10, "str__is_looking_for_a_way_to_avoid_an_impending_war"),
		(else_try),
			(eq, ":quest_type", "qst_rescue_prisoner"),
			(str_store_string, s10, "str__may_need_help_rescuing_an_imprisoned_family_member"),
		(else_try),
			(eq, ":quest_type", "qst_cause_provocation"),
			(str_store_string, s10, "str__has_been_asking_around_for_someone_who_might_want_work_id_watch_yourself_with_him_though"),
		(else_try),
			(str_store_string, s10, "str_tavernkeeper_invalid_quest"),
		(try_end),

		##diplomacy start+
		#(troop_get_type, reg4, ":quest_giver"),
		(call_script, "script_dplmc_store_troop_is_female_reg", ":quest_giver", 4),
		##diplomacy end+
	(try_end),

  ]],


  [anyone, "tavernkeeper_job_result", [
  	(store_sub, ":last_troop", mayors_end, 1),
	(lt, "$g_troop_list_no", ":last_troop"),
  ], "I have heard that {s7} {s9}{s10} You may want to speak with {reg4?her:him}.", "tavernkeeper_job_search",
   [
       ]],

  [anyone, "tavernkeeper_job_result", [
  (store_sub, ":last_troop", mayors_end, 1),
  (ge, "$g_troop_list_no", ":last_troop"),
  ], "There may be other work, of course -- lords and guildmasters often have other tasks which we don't hear about. Also, the villages around here frequently need help, although they'd be more likely to pay you with a wedge of cheese and goodwill than with cold hard denars.", "tavernkeeper_job_result_2",
   [
       ]],

  [anyone,"tavernkeeper_job_result_2", [], "I'll keep my ears open for other opportunities. You may want to ask again from time to time.", "close_window",[]],



  [anyone|plyr,"tavernkeeper_talk", [], "I guess I should leave now.", "close_window",[]],

#Tavern Talk (with companions)
#  [anyone, "companion_recruit_yes", [(neg|hero_can_join, "p_main_party"),], "I don't think can lead any more men than you do now.\
# You need to release someone from service if you want me to join your party.", "close_window", []],




#Tavern Talk (with ransom brokers)


  [anyone,"start", [(is_between, "$g_talk_troop", ransom_brokers_begin, ransom_brokers_end),
                    (eq, "$g_talk_troop_met", 0),
					##diplomacy start+
					#Use proper style of address in lieu of sir/madam if necessary (althoguh since these first-time
					#meetings are likely to occur near the game's start, this will usually not make a difference).
					(call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),#Write {sir/madame} or replacement to {s0}
					],
   "Greetings to you, {s0}. You look like someone who should get to know me.", "ransom_broker_intro",[]],#changed {sir/madam} to {s0}
   ##diplomacy end+

  [anyone|plyr,"ransom_broker_intro",[], "Why is that?", "ransom_broker_intro_2",[]],
  [anyone, "ransom_broker_intro_2", [], "I broker ransoms for the poor wretches who are captured in these endless wars.\
 Normally I travel between the salt mines and the slave markets on the coast, on commission from those whose relatives have gone missing.\
 But if I'm out on my errands of mercy, and I come across a fellow dragging around a captive or two,\
 well, there's no harm in a little speculative investment, is there?\
 And you look like the type who might have a prisoner to sell.", "ransom_broker_info_talk",[(assign, "$ransom_broker_families_told",0),
                                                                                            (assign, "$ransom_broker_prices_told",0),
                                                                                            (assign, "$ransom_broker_ransom_me_told",0),
                                                                                            ]],

  [anyone|plyr,"ransom_broker_info_talk",[(eq, "$ransom_broker_families_told",0)], "What if their families can't pay?", "ransom_broker_families",[]],
  [anyone, "ransom_broker_families", [], "Oh, then I spin them a few heartwarming tales of life on the galleys.\
 You'd be surprised what sorts of treasures a peasant can dig out of his cowshed or wheedle out of his cousins,\
 assuming he's got the proper motivation!\
 And if in the end they cannot come up with the silver, then there are always slave merchants who are looking for galley slaves.\
 One cannot do Heaven's work with an empty purse, you see.", "ransom_broker_info_talk",[(assign, "$ransom_broker_families_told",1)]],
  [anyone|plyr,"ransom_broker_info_talk",[(eq, "$ransom_broker_prices_told",0)], "What can I get for a prisoner?", "ransom_broker_prices",[]],
  [anyone, "ransom_broker_prices", [], "It varies. I fancy that I have a fine eye for assessing a ransom.\
 There are a dozen little things about a man that will tell you whether he goes to bed hungry, or dines each night on soft dumplings and goose.\
 The real money of course is in the gentry, and if you ever want to do my job you'll want to learn about every landowning family in Calradia,\
 their estates, their heraldry, their offspring both lawful and bastard, and, of course, their credit with the merchants.", "ransom_broker_info_talk",[(assign, "$ransom_broker_prices_told",1)]],
  [anyone|plyr,"ransom_broker_info_talk",[(eq, "$ransom_broker_ransom_me_told",0)], "Would you be able to ransom me if I were taken?", "ransom_broker_ransom_me",[]],
  [anyone, "ransom_broker_ransom_me", [], "Of course. I'm welcome in every court in Calradia.\
 There's not many who can say that! So always be sure to keep a pot of denars buried somewhere,\
 and a loyal servant who can find it in a hurry.", "ransom_broker_info_talk",[(assign, "$ransom_broker_ransom_me_told",1)]],
  [anyone|plyr,"ransom_broker_info_talk",[], "That's all I need to know. Thank you.", "ransom_broker_pretalk",[]],

  [anyone,"start", [(is_between, "$g_talk_troop", ransom_brokers_begin, ransom_brokers_end),
  ],
   "Greetings. If you have any prisoners, I will be happy to buy them from you.", "ransom_broker_talk",[]],
  [anyone,"ransom_broker_pretalk", [],
   "Anyway, if you have any prisoners, I will be happy to buy them from you.", "ransom_broker_talk",[]],

   #SB : disable while disguised, you sneaked in not your prisoners
  [anyone|plyr,"ransom_broker_talk",
   [(store_num_regular_prisoners,reg0),(ge,reg0,1),(eq, "$sneaked_into_town",0)],
   "Then you'd better bring your purse. I have got prisoners to sell.", "ransom_broker_sell_prisoners",[]],
  ##diplomacy start+
  [anyone|plyr,"ransom_broker_talk",
   [(store_num_regular_prisoners,reg0),(ge,reg0,1),(eq, "$sneaked_into_town",0)],
   "I want to sell all the prisoners I have with me.", "ransom_broker_sell_prisoners_all",[]],
  [anyone,"ransom_broker_sell_prisoners_all", [
  (call_script, "script_dplmc_sell_all_prisoners", 0, 0),#do not actually sell
  (store_num_regular_prisoners, reg2),
  (val_sub, reg2, 1),
  ],
  "Let's see...  I'll give you {reg0} denars for your {reg1} {reg2?prisoners:prisoner}.  Do we have a deal?", "ransom_broker_sell_prisoners_all_2", []],
  [anyone|plyr,"ransom_broker_sell_prisoners_all_2", [],
   "We have a deal.", "ransom_broker_sell_prisoners_2", [(call_script, "script_dplmc_sell_all_prisoners", 1, 0),
   # #SB : objection
   # (call_script, "script_objectionable_action", tmt_egalitarian, "str_sell_slavery"),
   ]
  ],
  [anyone|plyr,"ransom_broker_sell_prisoners_all_2", [],
   "Let me think about it again.", "ransom_broker_pretalk",[]],
  ##diplomacy end+

  [anyone|plyr,"ransom_broker_talk", [], "Tell me about what you do again.", "ransom_broker_intro_2",[]],

  #SB : exchange prisoner
  [anyone|plyr,"ransom_broker_talk",[
  #pre-fetch quest lord
  (try_begin),
    (check_quest_active, "qst_rescue_prisoner"),
    (neg|check_quest_succeeded, "qst_rescue_prisoner"),
    (quest_get_slot, "$lord_selected", "qst_rescue_prisoner", slot_quest_target_troop),
  (else_try),
    (assign, "$lord_selected", -1),
  (try_end),
  (party_get_num_prisoner_stacks, ":end", "$current_town"),
  (try_for_range, ":i_stack", 0, ":end"),
    (party_prisoner_stack_get_troop_id, ":stack_troop", "$current_town", ":i_stack"),
    (troop_is_hero, ":stack_troop"),
    (troop_slot_eq, ":stack_troop", slot_troop_occupation, slto_kingdom_hero),
    (store_faction_of_troop, ":troop_faction", ":stack_troop"),
    (try_begin), #allow quest troop to always be ransomed regardless of weird relations
      (eq, ":stack_troop", "$lord_selected"),
      (assign, ":troop_faction", "$players_kingdom"),
    (try_end),
    (store_relation, ":kingdom_relation", "$players_kingdom", ":troop_faction"),
    #found a candidate
    (call_script, "script_troop_get_player_relation", ":stack_troop"),
    (assign, ":relation", reg0),
    (this_or_next|ge, ":relation", 0), #inter-personal relation
    (eq, "$players_kingdom", ":troop_faction"), #always enabled
    (ge, ":kingdom_relation", 0), #at peace
    (assign, ":end", -1),
  (try_end),
  (eq, ":end", -1),
  ], "I wish to ransom one of the nobles in the local dungeons.", "ransom_kingdom_hero",[
    (party_get_num_prisoner_stacks, "$temp", "$current_town"), #store stack size
  ]],
  #TODO also facilitate qst_capture_enemy_hero
  #SB : ransom lord (only active for quests)
  [anyone|plyr,"ransom_broker_talk",[
  #pre-fetch quest lord
  (try_begin),
    (check_quest_active, "qst_rescue_prisoner"),
    (neg|check_quest_succeeded, "qst_rescue_prisoner"),
    (quest_get_slot, "$lord_selected", "qst_rescue_prisoner", slot_quest_target_troop),
  (else_try),
    (assign, "$lord_selected", -1),
  (try_end),
  (party_get_num_prisoner_stacks, ":end", "$current_town"),
  (try_for_range, ":i_stack", 0, ":end"),
    (party_prisoner_stack_get_troop_id, ":stack_troop", "$current_town", ":i_stack"),
    (troop_is_hero, ":stack_troop"),
    (troop_slot_eq, ":stack_troop", slot_troop_occupation, slto_kingdom_hero),
    (store_faction_of_troop, ":troop_faction", ":stack_troop"),
    (try_begin), #allow quest troop to always be ransomed regardless of weird relations
      (eq, ":stack_troop", "$lord_selected"),
      (assign, ":troop_faction", "$players_kingdom"),
    (try_end),
    (store_relation, ":kingdom_relation", "$players_kingdom", ":troop_faction"),
    #found a candidate
    (call_script, "script_troop_get_player_relation", ":stack_troop"),
    (assign, ":relation", reg0),
    (this_or_next|ge, ":relation", 0), #inter-personal relation
    (eq, "$players_kingdom", ":troop_faction"), #always enabled
    (ge, ":kingdom_relation", 0), #at peace
    (assign, ":end", -1),
  (try_end),
  (eq, ":end", -1),
  ], "I wish to ransom one of the nobles in the local dungeons.", "ransom_kingdom_hero",[
    (party_get_num_prisoner_stacks, "$temp", "$current_town"), #store stack size
  ]],
  [anyone,"ransom_kingdom_hero",[
    (party_slot_eq, "$current_town", slot_town_lord, "trp_player"),
    (call_script, "script_dplmc_print_commoner_at_arg1_says_sir_madame_to_s0", "$current_town"),
  ], "There is nothing more I can do {s0}, those prisoners are already yours to dispose of as you please.", "ransom_broker_pretalk",[]],
  [anyone,"ransom_kingdom_hero",[
    (party_get_slot, ":town_lord", "$current_town", slot_town_lord),
    (try_begin),
      (is_between, ":town_lord", heroes_begin, heroes_end),      
      (str_store_troop_name, s1, ":town_lord"),
      (call_script, "script_troop_get_player_relation", ":town_lord"),
      (assign, ":relation", reg0),
    (else_try), #unassigned
      (str_store_party_name, s1, "$current_town"),
      (party_get_slot, ":relation", "$current_town", slot_center_player_relation),
    (try_end),
    (lt, ":relation", -5), #arbitrary value
    (call_script, "script_dplmc_print_commoner_at_arg1_says_sir_madame_to_s0", "$current_town"),
  ], "Sorry {s0}, even with my influences I fear that {s1} will not welcome your gold.", "ransom_broker_pretalk",[]],  
  [anyone,"ransom_kingdom_hero",[], "Whom do you wish to ransom?", "ransom_kingdom_hero_choose",[
    (try_begin), #refresh this value here, in case we cancel selection
      (check_quest_active, "qst_rescue_prisoner"),
      (neg|check_quest_succeeded, "qst_rescue_prisoner"),
      (quest_get_slot, "$lord_selected", "qst_rescue_prisoner", slot_quest_target_troop),
    (try_end),
  ]],
  [anyone|plyr, "ransom_kingdom_hero_choose", [], "Never mind.", "ransom_broker_pretalk", []],
  [anyone|plyr|repeat_for_100, "ransom_kingdom_hero_choose", [
    (store_repeat_object, ":i_stack"),
    (lt, ":i_stack", "$temp"),
    (party_prisoner_stack_get_troop_id, ":prisoner", "$current_town", ":i_stack"),
    (troop_is_hero, ":prisoner"),
    (store_faction_of_troop, ":troop_faction", ":prisoner"),
    (store_relation, ":kingdom_relation", "$players_kingdom", ":troop_faction"),
    (this_or_next|eq, ":prisoner", "$lord_selected"), #allow quest lord
    (ge, ":kingdom_relation", 0),
    (str_store_troop_name, s1, ":prisoner"),
    (try_begin),
      (eq, ":prisoner", "$lord_selected"),
      (quest_get_slot, ":giver", "qst_rescue_prisoner", slot_quest_giver_troop),
      (str_store_troop_name, s2, ":giver"),
      (str_store_string, s1, "@{s1} at the behest of {s2}"),
    (try_end),
    ], "{s1}", "ransom_kingdom_hero_chosen",
    [(store_repeat_object, ":i_stack"),
     (party_prisoner_stack_get_troop_id, "$lord_selected", "$current_town", ":i_stack"),
    ],
  ],
  #disallow ransoming of kings, although we list them
  [anyone,"ransom_kingdom_hero_chosen",[
  (assign, ":kingdom_no", -1),
  (try_for_range, ":kingdom", kingdoms_begin, kingdoms_end),
    (faction_slot_eq, ":kingdom", slot_faction_leader, "$lord_selected"),
    (assign, ":kingdom_no", ":kingdom"),
  (try_end),
  (neq, ":kingdom_no", -1),
  
  #set up strings
  (party_get_slot, ":town_lord", "$current_town", slot_town_lord),
  (try_begin), #we already filtered out the player
    (is_between, ":town_lord", heroes_begin, heroes_end),
    (str_store_troop_name, s1, ":town_lord"),
  (else_try),
    (str_store_party_name, s1, "$current_town"),
  (try_end),
  (str_store_faction_name, s2, ":kingdom_no"),
  (call_script, "script_dplmc_print_cultural_word_to_sreg", "$lord_selected", DPLMC_CULTURAL_TERM_KING, s3),
  (call_script, "script_dplmc_print_commoner_at_arg1_says_sir_madame_to_s0", "$current_town"),
  ], "I am sorry {s0}, as {s1} is inimical to {s2}, I do not believe I am capable of negotiating for the release of a {s3}.", "ransom_kingdom_hero",[]],

  
  [anyone,"ransom_kingdom_hero_chosen",[
  (call_script, "script_calculate_ransom_amount_for_troop", "$lord_selected"),
  (assign, ":ransom", reg0),
  #round up slightly to represent broker's fees
  (val_div, ":ransom", dplmc_ransom_commission),
  (val_add, ":ransom", 1), #add commission once
  (val_mul, ":ransom", dplmc_ransom_commission),
  (call_script, "script_game_get_money_text", ":ransom"),
  (assign, "$temp", ":ransom"),
  (str_store_troop_name, s11, "$lord_selected"),
  ], "I believe {s11}'s liberty is currently valued at {s1}?", "ransom_kingdom_hero_pay",[]],
  
  [anyone|plyr,"ransom_kingdom_hero_pay",[
    (store_troop_gold, ":gold", "trp_player"),
    (gt, ":gold", "$temp"),
  ], "Certainly. I wish to speak to {s11} at once.", "close_window", [
    #move from player to town ruler's coffers or town wealth
    (troop_remove_gold, "trp_player", "$temp"),
    (party_get_slot, ":town_lord", "$current_town", slot_town_lord),
    (val_sub, "$temp", dplmc_ransom_commission),
    (try_begin),
      (is_between, ":town_lord", heroes_begin, heroes_end),
      (call_script, "script_dplmc_distribute_gold_to_lord_and_holdings", "$temp", ":town_lord"),
    (else_try),
      (party_get_slot, ":cur_wealth", "$current_town", slot_town_wealth),
      (val_add, ":cur_wealth", "$temp"),
      (party_set_slot, "$current_town", slot_town_wealth, ":cur_wealth"),
    (try_end),
    #skim a bit of commission
    (troop_add_gold, "$g_talk_troop", dplmc_ransom_commission),
    #from mnu_sneak_into_town_caught_ran_away
    (assign, "$talk_context", tc_hero_freed),
    (assign, "$castle_meeting_selected_troop", "$lord_selected"),
    (jump_to_menu, "mnu_castle_meeting_selected"),
    # (call_script, "script_setup_troop_meeting", "$lord_selected", -1),
    (troop_set_slot, "$lord_selected", slot_troop_mission_participation, -1),

    #succeed quest from the troop meeting
    (party_remove_prisoners, "$current_town", "$lord_selected", 1),
    # (troop_set_slot, "$lord_selected", slot_troop_prisoner_of_party, -1),
    (finish_mission), #jump out of this and into castle meeting
  ]],

  [anyone|plyr,"ransom_kingdom_hero_pay",[
  ], "I don't think I can pay that just yet.", "ransom_kingdom_hero_choose",[]],
  

  [anyone|plyr,"ransom_broker_talk",[
  ], "I wish to ransom one of my companions.", "ransom_broker_ransom_companion",[]],

  [anyone,"ransom_broker_ransom_companion",[], "Whom do you wish to ransom?", "ransom_broker_ransom_companion_choose",[]],

  [anyone|plyr|repeat_for_troops,"ransom_broker_ransom_companion_choose",[
  (store_repeat_object, ":imprisoned_companion"),
  (neg|troop_slot_eq, ":imprisoned_companion", slot_troop_occupation, slto_kingdom_hero),
  (is_between, ":imprisoned_companion", companions_begin, companions_end),
  (troop_slot_ge, ":imprisoned_companion", slot_troop_prisoner_of_party, centers_begin),
  (str_store_troop_name, s4, ":imprisoned_companion"),
  ], "{s4}", "ransom_broker_ransom_companion_name_sum",[

  (store_repeat_object, "$companion_to_be_ransomed"),
  ]],

  [anyone|plyr,"ransom_broker_ransom_companion_choose",[
  ], "Never mind.", "ransom_broker_pretalk",[]],


  [anyone,"ransom_broker_ransom_companion_name_sum",[], "Let me check my ledger, here... Yes. Your friend is being held in the dungeon at {s7}. How interesting! I remember hearing that the rats down there are unusually large -- like mastiffs, they say... Now... For the very reasonable sum of {reg5} denars, which includes both the ransom and my commission and expenses, we can arrange it so that {s5} can once again enjoy {reg4?her:his} freedom. What do you say?", "ransom_broker_ransom_companion_verify",[
  (str_store_troop_name, s5, "$companion_to_be_ransomed"),
  ##diplomacy start+
  #(troop_get_type, reg4, "$companion_to_be_ransomed"),
  (call_script, "script_dplmc_store_troop_is_female_reg", "$companion_to_be_ransomed", 4),
  ##diplomacy end+

  (troop_get_slot, ":prison_location", "$companion_to_be_ransomed", slot_troop_prisoner_of_party),
  (str_store_party_name, s7, ":prison_location"),

  (store_character_level, ":companion_level", "$companion_to_be_ransomed"),
  (store_add, "$companion_ransom_amount", ":companion_level", 20),
  (val_mul, "$companion_ransom_amount", ":companion_level"),
  (val_mul, "$companion_ransom_amount", 5), #Level 1: 110, level 40: 12,000
  (assign, reg5, "$companion_ransom_amount"),
  ]],

  [anyone|plyr,"ransom_broker_ransom_companion_verify",[
  (store_troop_gold, ":player_gold", "trp_player"),
  (ge, ":player_gold", "$companion_ransom_amount"),

  ], "Here's your money.", "ransom_broker_ransom_companion_accept",[
  (troop_remove_gold, "trp_player", "$companion_ransom_amount"),




  (troop_set_slot, "$companion_to_be_ransomed", slot_troop_occupation, slto_player_companion),
  (troop_set_slot, "$companion_to_be_ransomed", slot_troop_current_mission, npc_mission_rejoin_when_possible),
  (troop_set_slot, "$companion_to_be_ransomed", slot_troop_days_on_mission, 1),

  (try_begin),
	(troop_get_slot, ":held_at_prison", "$companion_to_be_ransomed", slot_troop_prisoner_of_party),
	##diplomacy start+ give ransom to one who was imprisoning the companion
	(try_begin),
		(is_between, ":held_at_prison", centers_begin, centers_end),
		(party_get_slot, ":town_lord", ":held_at_prison", slot_town_lord),
		(is_between, ":town_lord", heroes_begin, heroes_end),
		(call_script, "script_dplmc_distribute_gold_to_lord_and_holdings", "$companion_ransom_amount", ":town_lord"),
	(else_try),
	    #if the center has no lord, split it among the faction
		(store_faction_of_party, ":prison_faction", ":held_at_prison"),
		(call_script, "script_dplmc_faction_leader_splits_gold", ":prison_faction", "$companion_ransom_amount"),
	(try_end),
	##diplomacy end+
	(party_count_prisoners_of_type, ":holding_as_prisoner",  ":held_at_prison", "$companion_to_be_ransomed"),
	(gt, ":holding_as_prisoner", 0),
	(party_remove_prisoners, ":held_at_prison", "$companion_to_be_ransomed", 1),
  (try_end),
  (troop_set_slot, "$companion_to_be_ransomed", slot_troop_prisoner_of_party, -1),

  (troop_set_slot, "$companion_to_be_ransomed", slot_troop_personalityclash_penalties, 0),
  (troop_set_slot, "$companion_to_be_ransomed", slot_troop_morality_penalties, 0),

  ]],

  [anyone|plyr,"ransom_broker_ransom_companion_verify",[
  ], "I can't afford that right now.", "ransom_broker_ransom_companion_refuse",[]],


  [anyone,"ransom_broker_ransom_companion_accept",[], "Splendid! In a few days, I would think, you should find {s5} riding to rejoin you, blinking in the sunlight and no doubt very grateful! Is there any other way in which I can help you?", "ransom_broker_talk",[
  (str_store_troop_name, s5, "$companion_to_be_ransomed"),

  ]],

  [anyone,"ransom_broker_ransom_companion_refuse",[], "Of course, of course... Never mind what they say about the rats, by the way -- I've never actually seen one myself, on account of the pitch-black darkness. Anyway, I'm sure that {s5} will understand why it's important for you to control expenditures. Now... Was there anything else?", "ransom_broker_talk",[
  (str_store_troop_name, s5, "$companion_to_be_ransomed"),
  ]],


  [anyone|plyr,"ransom_broker_talk",[], "Not this time. Good-bye.", "close_window",[]],
  [anyone,"ransom_broker_sell_prisoners", [],
  "Let me see what you have...", "ransom_broker_sell_prisoners_2",
   [[change_screen_trade_prisoners]]],
#  [anyone, "ransom_broker_sell_prisoners_2", [], "You take more prisoners, bring them to me. I will pay well.", "close_window",[]],
  [anyone, "ransom_broker_sell_prisoners_2", [], "I will be staying here for a few days. Let me know if you need my services.", "close_window",[]],


#Tavern Talk (with travelers)
  [anyone, "start", [(is_between, "$g_talk_troop", tavern_travelers_begin, tavern_travelers_end),
                     (str_store_troop_name, s10, "$g_talk_troop"),
                     (eq,"$g_talk_troop_met",0),
                     ],
   "Greetings, friend. You look like the kind of {man/person} who'd do well to know me.\
 I travel a lot all across Calradia and keep an open ear.\
 I can provide you information that you might find useful. For a meager price of course.", "tavern_traveler_talk", [(assign, "$traveler_land_asked", 0)]],

  [anyone, "start",
   [
     (is_between, "$g_talk_troop", tavern_travelers_begin, tavern_travelers_end),
     (gt, "$last_lost_companion", 0),
     (assign, ":companion_found_town", -1),
     (troop_get_slot, ":companion_found_town", "$last_lost_companion", slot_troop_cur_center),
     (is_between, ":companion_found_town", towns_begin, towns_end),
     (str_store_troop_name, s10, "$last_lost_companion"),
     (str_store_party_name, s11, ":companion_found_town"),
     ],
   "Greetings, {playername}. I saw your companion {s10} at a tavern in {s11} some days ago. I thought you might like to know.", "tavern_traveler_lost_companion_thanks",
   [(assign, "$last_lost_companion", 0)]],

  [anyone|plyr, "tavern_traveler_lost_companion_thanks", [(troop_get_type, reg3, "$last_lost_companion")], "Thanks. I'll go and find {reg3?her:him} there.", "tavern_traveler_pretalk", []],
  [anyone|plyr, "tavern_traveler_lost_companion_thanks", [], "Thanks, but I don't really care.", "tavern_traveler_pretalk", []],

  [anyone, "start", [(is_between, "$g_talk_troop", tavern_travelers_begin, tavern_travelers_end),
                     ],
   "Greetings, {playername}.", "tavern_traveler_talk", [(assign, "$traveler_land_asked", 0)]],



  [anyone, "tavern_traveler_pretalk", [], "Yes?", "tavern_traveler_talk", []],

  [anyone|plyr, "tavern_traveler_talk", [(eq, "$traveler_land_asked", 0)], "What can you tell me about this land?", "tavern_traveler_tell_kingdoms", [(assign, "$traveler_land_asked", 1)]],
  [anyone, "tavern_traveler_tell_kingdoms", [], "Calradia is divided into rival kingdoms, which can neither manage to live in peace with their neighbours,\
 nor completely eliminate them.\
 As a result, there's seldom a break to the bitter wars which plague this land and drain its life blood.\
 Well, at least this must be a good place to be for an adventurer such as yourself.\
 With some luck and skill, you can make a name for yourself here, amass a fortune perhaps, or gain great power.\
 Opportunities are endless and so are the rewards, if you are willing to risk your life for them.", "tavern_traveler_tell_kingdoms_2", []],

  [anyone|plyr, "tavern_traveler_tell_kingdoms_2", [], "Tell me more about these opportunities.", "tavern_traveler_tell_kingdoms_3", []],
  [anyone|plyr, "tavern_traveler_tell_kingdoms_2", [], "Thank you. That was all I needed to know", "close_window", []],

  
  #SB: alternative traveller dialog
  #if we already have a claimant
  [anyone, "tavern_traveler_tell_kingdoms_3", [
    (gt, "$supported_pretender", 0),
    (str_store_troop_name, s1, "$supported_pretender"),
  ], "No need for me to inform you of anything, {s0}. I'm sure {s1} will inform you of these things in more detail than I.",
   "tavern_traveler_pretalk", [(call_script, "script_dplmc_print_commoner_at_arg1_says_sir_madame_to_s0", "$current_town"),]],
   #if we have our own kingdom
  [anyone, "tavern_traveler_tell_kingdoms_3", [
    (faction_slot_eq, "fac_player_supporters_faction", slot_faction_state, sfs_active),
    (eq, "$players_kingdom", "fac_player_supporters_faction"),
    # (call_script, "script_dplmc_print_commoner_at_arg1_says_sir_madame_to_s0", "$current_town"),
    (call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),
  ], "Well, {s0}, it seems that I have nothing to teach you in this world of politics. But perhaps you would be interested in the lives of others who were... less blessed by providence than yourself shall we say?",
   "tavern_traveler_tell_kingdoms_4b", []],
   #SB : this only describes one state of "power"
  [anyone, "tavern_traveler_tell_kingdoms_3", [(gt, "$player_has_homage", 0),], "Well, you probably know everything I could tell you already. You seem to be doing pretty well.",
   "tavern_traveler_tell_kingdoms_4", []],
  [anyone, "tavern_traveler_tell_kingdoms_3", [], "The kingdoms will pay good money for mercenaries if they are engaged in a war.\
 If you have done a bit of fighting, speaking with one of their lords will probably result in being offered a mercenary contract.\
 However the real rewards come if you can manage to become a vassal to a king.\
 A vassal can own villages, castles and towns and get rich with the taxes and revenues of these estates.\
 Normally, only nobles of the realm own land in this way,\
 but in time of war, a king will not hesitate to accept someone who distinguishes {himself/herself} on the battlefield as a vassal, and grant {him/her} the right to own land.",
   "tavern_traveler_tell_kingdoms_4a", []],

  [anyone, "tavern_traveler_tell_kingdoms_4a", [], "It is not unheard-of for adventurers to renounce allegiance to a Calradian king altogether, declare themselves kings, and claim land in their own name. This is a difficult path, however, as the great nobles of the land, with their long ancestries, are not likely to accept such upstarts as their monarch. Such rulers would need to be very careful in establishing their right to rule, or they would be set upon from all sides.",
   "tavern_traveler_tell_kingdoms_4", []],

   #SB : this one doesn't describe the player as "an adventurer"
  [anyone, "tavern_traveler_tell_kingdoms_4b", [], "There are many pretenders in Calradia -- those who are born to the right family, who go around and rally support for their claim over the current king's false cause.\
 With the right sort of support from yourself and a few nudges here and there, they could easily start civil wars and perhaps even replace the king one day. Of course, your claim is equally as good as theirs, and a co-rulership of Calradia isn't unheard of.",
   "tavern_traveler_tell_kingdoms_5", []],
   
  [anyone, "tavern_traveler_tell_kingdoms_4", [], "It might be easier for an adventurer like yourself to pledge support to an existing king's rival.\
  There are many such pretenders in Calradia -- those who are born to the right family, who go around and stir up trouble saying they have a better claim to the throne than the current king.\
 If those claim holders could find supporters, they could easily start civil wars and perhaps even replace the king one day.",
   "tavern_traveler_tell_kingdoms_5", []],

  [anyone|plyr, "tavern_traveler_tell_kingdoms_5", [], "Interesting. Where can I find these claim holders?", "tavern_traveler_tell_kingdoms_6", []],
  [anyone|plyr, "tavern_traveler_tell_kingdoms_5", [], "I guess I heard enough already. Thank you.", "close_window", []],

  [anyone, "tavern_traveler_tell_kingdoms_6", [], "A claim holder's life would be in danger in his own country of course.\
 Therefore, they usually stay at rival courts, raising support and hoping to find someone willing to champion their cause.\
 I usually hear news about some of them, and may be able to tell you their location with some precision.\
 But of course, I would ask for a little something for such a service.",
   "tavern_traveler_pretalk", [(assign, "$traveller_claimants_mentioned", 1)]],

  [anyone|plyr, "tavern_traveler_talk", [(eq, "$traveller_claimants_mentioned", 1)], "I want to know the location of a claimant.", "tavern_traveler_pretender_location", []],
  [anyone, "tavern_traveler_pretender_location", [], "Whose location do you want to know?", "tavern_traveler_pretender_location_ask", []],

  [anyone|plyr|repeat_for_troops, "tavern_traveler_pretender_location_ask",
   [
     (store_repeat_object, ":troop_no"),
     (is_between, ":troop_no", pretenders_begin, pretenders_end),
     (neg|troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_hero),
     (troop_slot_ge, ":troop_no", slot_troop_cur_center, 1),
     (str_store_troop_name, s11, ":troop_no"),
     (neq, ":troop_no", "$supported_pretender"),
     ],  "{s11}", "tavern_traveler_pretender_location_ask_2",
   [
     (store_repeat_object, "$temp"),
     ]],

  [anyone|plyr, "tavern_traveler_pretender_location_ask",
   [],  "Never mind.", "tavern_traveler_pretalk", []],


  #SB : raise cost slightly for pretender
  [anyone, "tavern_traveler_pretender_location_ask_2", [], "I can reveal this information to you for a small price, let's say 300 denars.", "tavern_traveler_pretender_location_ask_money", []],

  [anyone|plyr, "tavern_traveler_pretender_location_ask_money",
   [
     (store_troop_gold, ":cur_gold", "trp_player"),
     (ge, ":cur_gold", 300),
   ],
   "All right. Here is 300 denars.", "tavern_traveler_pretender_location_tell",
   [
     (troop_remove_gold, "trp_player", 300),
   ]],

  [anyone|plyr, "tavern_traveler_pretender_location_ask_money", [], "Never mind.", "tavern_traveler_pretalk", []],

  #use pre-formatted string as stored below
  [anyone, "tavern_traveler_pretender_location_tell", [], "{s15}.", "tavern_traveler_pretalk",
   [
     (str_store_troop_name, s15, "$temp"),
     (troop_get_slot, ":cur_center", "$temp", slot_troop_cur_center),
     (str_store_party_name_link, s5, ":cur_center"),
     #SB : rumour string
     (str_store_string_reg, s4, s15),
     # (str_store_string_reg, s5, s11),
     (str_store_string, s15, "str_s4_is_at_s5"),
     (call_script, "script_add_rumor_string_to_troop_notes", "$temp", -1, 15),
     (change_screen_notes, 1, "$temp"), #SB : jump to notes
   ]],

  ##diplomacy start+
  #The tavern travellers can give the locations of than just pretenders and
  #the player's former travelling companions.  I've decided to add book sellers
  #and ransom brokers, but not lords.
  #Another alteration is that only booksellers / ransom brokers the player has
  #met can be located.
  #Code credit to rubik's Custom Commander
  # CC
  #SB : minstrels
  [anyone|plyr, "tavern_traveler_talk", [], "I am looking for minstrels...", "tavern_traveler_minstrel_location", []],

  [anyone, "tavern_traveler_minstrel_location",
    [
        (call_script, "script_cf_no_known_taverngoers", tavern_minstrels_begin, tavern_minstrels_end),
    ], "I am sorry, I'm not really a big fan of their music.", "tavern_traveler_pretalk", []],

  [anyone, "tavern_traveler_minstrel_location", [], "I might have heard some ribald songs recently. For 30 denars, I'll tell you where.", "tavern_traveler_minstrel_location_ask_money", []],

  [anyone|plyr, "tavern_traveler_minstrel_location_ask_money",
   [
     (store_troop_gold, ":cur_gold", "trp_player"),
     (ge, ":cur_gold", 30),
     ], "All right. Here is 30 denars.", "tavern_traveler_npc_location_tell",
   [ #SB : redirect dialog, set range
     (troop_remove_gold, "trp_player", 30),
     (call_script, "script_list_known_taverngoers", tavern_minstrels_begin, tavern_minstrels_end, slot_center_tavern_minstrel),
     # (assign, "$temp", slot_center_tavern_minstrel),
     # (assign, "$temp_2", tavern_minstrels_begin),
     # (assign, "$temp_3", tavern_minstrels_end),
     ]],

  [anyone|plyr, "tavern_traveler_minstrel_location_ask_money", [], "Never mind.", "tavern_traveler_pretalk", []],

    
  #SB : change the following to use new utility scripts
  [anyone|plyr, "tavern_traveler_talk", [], "I am looking for book merchants...", "tavern_traveler_bookseller_location", []],

  [anyone, "tavern_traveler_bookseller_location",
    [
        (call_script, "script_cf_no_known_taverngoers", tavern_booksellers_begin, tavern_booksellers_end),
    ], "I am sorry I haven't run across any lately.", "tavern_traveler_pretalk", []],

  [anyone, "tavern_traveler_bookseller_location", [], "I might have crossed paths with one or two recently. For 100 denars, I'll tell you where.", "tavern_traveler_bookseller_location_ask_money", []],

  [anyone|plyr, "tavern_traveler_bookseller_location_ask_money",
   [
     (store_troop_gold, ":cur_gold", "trp_player"),
     (ge, ":cur_gold", 100),
     ], "All right. Here is 100 denars.", "tavern_traveler_npc_location_tell",
   [ #SB : redirect dialog, set range
     (troop_remove_gold, "trp_player", 100),
     (call_script, "script_list_known_taverngoers", tavern_booksellers_begin, tavern_booksellers_end, slot_center_tavern_bookseller),
     # (assign, "$temp", slot_center_tavern_bookseller),
     # (assign, "$temp_2", tavern_booksellers_begin),
     # (assign, "$temp_3", tavern_booksellers_end),
     ]],

  [anyone|plyr, "tavern_traveler_bookseller_location_ask_money", [], "Never mind.", "tavern_traveler_pretalk", []],

  #SB : move this to single dialog
  # [anyone, "tavern_traveler_bookseller_location_tell", [], "You can find them at {s11}.", "tavern_traveler_pretalk",
   # [
      # (assign, ":num_towns", 0),
      # (try_for_range, ":troop_no", tavern_booksellers_begin, ":num_towns"),
        # (neg|party_slot_eq, ":town_no", slot_center_tavern_bookseller, 0),
        # (party_get_slot, ":seller", ":town_no", slot_center_tavern_bookseller),#addition - fixed 2011-03-29
        # (troop_slot_ge, ":seller", slot_troop_met, 1),#addition
        # (val_add, ":num_towns", 1),
        # (try_begin),
          # (eq, ":num_towns", 1),
          # (str_store_party_name_link, s11, ":town_no"),
        # (else_try),
          # (eq, ":num_towns", 2),
          # (str_store_party_name_link, s10, ":town_no"),
          # (str_store_string, s11, "str_s10_and_s11"),
        # (try_end),
      # (try_end),
      # (display_message, "@You can find book merchants at {s11}."),
     # ]],

  [anyone|plyr, "tavern_traveler_talk", [], "I am looking for ransom brokers...", "tavern_traveler_ransom_broker_location", []],

  [anyone, "tavern_traveler_ransom_broker_location",
    [
      (call_script, "script_cf_no_known_taverngoers", ransom_brokers_begin, ransom_brokers_end),
    ], "I am sorry I haven't run across any lately.", "tavern_traveler_pretalk", []],

  [anyone, "tavern_traveler_ransom_broker_location", [], "I know where they are. For 50 denars, I'll tell you.", "tavern_traveler_ransom_broker_location_ask_money", []],

  [anyone|plyr, "tavern_traveler_ransom_broker_location_ask_money",
   [
     (store_troop_gold, ":cur_gold", "trp_player"),
     (ge, ":cur_gold", 50),
     ], "All right. Here is 50 denars.", "tavern_traveler_npc_location_tell",
   [ #SB : redirect dialog, set range
     (troop_remove_gold, "trp_player", 50),
     (call_script, "script_list_known_taverngoers", ransom_brokers_begin, ransom_brokers_end, slot_center_ransom_broker),
     # (assign, "$temp", slot_center_ransom_broker),
     # (assign, "$temp_2", ransom_brokers_begin),
     # (assign, "$temp_3", ransom_brokers_end),
     ]],

  [anyone|plyr, "tavern_traveler_ransom_broker_location_ask_money", [], "Never mind.", "tavern_traveler_pretalk", []],

  [anyone, "tavern_traveler_npc_location_tell", [], "You can find them at {s11}.", "tavern_traveler_pretalk",
   [
      # (assign, ":num_towns", 0),
      # (try_for_range, ":town_no", towns_begin, towns_end),
        # (neq, ":town_no", "p_town_2"),
        # (neg|party_slot_eq, ":town_no", slot_center_ransom_broker, 0),
        # (party_get_slot, ":broker", ":town_no", slot_center_ransom_broker),#addition - fixed 2011-03-29
        # (troop_slot_ge, ":broker", slot_troop_met, 1),#addition # removed 2011-03-29
        # (val_add, ":num_towns", 1),
        # (try_begin),
          # (eq, ":num_towns", 1),
          # (str_store_party_name, s11, ":town_no"),
        # (else_try),
          # (str_store_party_name, s12, ":town_no"),
          # (eq, ":num_towns", 2),
          # (str_store_string, s11, "@{s12} and {s11}"),
        # (else_try),
          # (str_store_string, s11, "@{s12}, {s11}"),
        # (try_end),
      # (try_end),
      # (display_message, "@You can find ransom brokers at {s11}."),
     ]],
  # CC
  ##diplomacy end+

##diplomacy start+
#Allow another method of retrieving dismissed employees
    [anyone|plyr, "tavern_traveler_talk", [
#Verify that the player in fact has dismissed employees, who are not
#already on their way back.  Also verify that the player is capable
#of taking them back.
(assign, ":player_village", villages_end),
(assign, ":player_castle", castles_end),
(assign, ":player_town", towns_end),
(try_for_range, ":center_no", villages_begin, ":player_village"),
    (party_slot_eq, ":center_no", slot_town_lord, "trp_player"),
    (assign, ":player_village", ":center_no"),#assign and break loop
(try_end),
(try_for_range, ":center_no", castles_begin, ":player_castle"),
    (party_slot_eq, ":center_no", slot_town_lord, "trp_player"),
    (assign, ":player_castle", ":center_no"),#assign and break loop
(try_end),
(try_for_range, ":center_no", towns_begin, ":player_town"),
    (party_slot_eq, ":center_no", slot_town_lord, "trp_player"),
    (assign, ":player_town", ":center_no"),#assign and break loop
(try_end),

(assign, ":exist_contactable_employees", 0),
(try_begin),
#Chamberlain?
(eq, "$g_player_chamberlain", -1),
(neg|troop_slot_eq, "trp_dplmc_chamberlain", slot_troop_met, 0),
(this_or_next|is_between, ":player_village", villages_begin, villages_end),
(this_or_next|is_between, ":player_castle", castles_begin, castles_end),
   (is_between, ":player_town", towns_begin, towns_end),
(assign, ":exist_contactable_employees", 1),
(else_try),
#Constable?
(eq, "$g_player_constable", -1),
(neg|troop_slot_eq, "trp_dplmc_constable", slot_troop_met, 0),
(this_or_next|is_between, ":player_castle", castles_begin, castles_end),
   (is_between, ":player_town", towns_begin, towns_end),
(assign, ":exist_contactable_employees", 1),
(else_try),
#Chancellor?
(eq, "$g_player_chancellor", -1),
(neg|troop_slot_eq, "trp_dplmc_chancellor", slot_troop_met, 0),
(is_between, ":player_town", towns_begin, towns_end),
(assign, ":exist_contactable_employees", 1),
(try_end),

(neq, ":exist_contactable_employees", 0),

], "I am looking for one of my former employees...", "dplmc_tavern_traveler_employee_1", []],

  [anyone, "dplmc_tavern_traveler_employee_1", [], "Maybe I can help you. Who are you looking for?", "dplmc_tavern_traveler_employee_2", []],

[anyone|plyr, "dplmc_tavern_traveler_employee_2",
[
#Check is chamberlain dismissed
(eq, "$g_player_chamberlain", -1),
(neg|troop_slot_eq, "trp_dplmc_chamberlain", slot_troop_met, 0),
#Check if chamberlain could return
(assign, ":player_center", centers_end),
(try_for_range, ":center_no", centers_begin, ":player_center"),
   (party_slot_eq, ":center_no", slot_town_lord, "trp_player"),
   (assign, ":player_center", ":center_no"),#set result and break loop
(try_end),
(is_between, ":player_center", centers_begin, centers_end),
(str_store_troop_name_plural, s11, "trp_dplmc_chamberlain"), #SB : former
], "My former chamberlain, {s11}.", "dplmc_tavern_traveler_employee_3", [
(assign, "$temp", "trp_dplmc_chamberlain"),
]],

[anyone|plyr, "dplmc_tavern_traveler_employee_2",
[
#Check is constable dismissed
(eq, "$g_player_constable", -1),
(neg|troop_slot_eq, "trp_dplmc_constable", slot_troop_met, 0),
#Check if constable could return
(assign, ":player_center", walled_centers_end),
(try_for_range, ":center_no", walled_centers_begin, ":player_center"),
   (party_slot_eq, ":center_no", slot_town_lord, "trp_player"),
   (assign, ":player_center", ":center_no"),#set result and break loop
(try_end),
(is_between, ":player_center", walled_centers_begin, walled_centers_end),
(str_store_troop_name_plural, s11, "trp_dplmc_constable"),  #SB : former
], "My former constable, {s11}.", "dplmc_tavern_traveler_employee_3", [
(assign, "$temp", "trp_dplmc_constable"),
]],

[anyone|plyr, "dplmc_tavern_traveler_employee_2",
[
#Check is chancellor dismissed
(eq, "$g_player_chancellor", -1),
(neg|troop_slot_eq, "trp_dplmc_chancellor", slot_troop_met, 0),
#Check if chancellor could return
(assign, ":player_center", towns_end),
(try_for_range, ":center_no", towns_begin, ":player_center"),
   (party_slot_eq, ":center_no", slot_town_lord, "trp_player"),
   (assign, ":player_center", ":center_no"),#set result and break loop
(try_end),
(is_between, ":player_center", towns_begin, towns_end),
(str_store_troop_name_plural, s11, "trp_dplmc_chancellor"),  #SB : former
], "My former chancellor, {s11}.", "dplmc_tavern_traveler_employee_3", [
(assign, "$temp", "trp_dplmc_chancellor"),
]],

[anyone|plyr, "dplmc_tavern_traveler_employee_2",
   [],  "Never mind.", "tavern_traveler_pretalk", []],

[anyone, "dplmc_tavern_traveler_employee_3",
[
(this_or_next|eq, "$temp", "trp_dplmc_chamberlain",),
(this_or_next|eq, "$temp", "trp_dplmc_constable",),
   (eq, "$temp", "trp_dplmc_chancellor",),
(neg|troop_slot_eq, "$temp", slot_troop_occupation, dplmc_slto_dead),
(neg|troop_slot_eq, "$temp", slot_troop_occupation, slto_kingdom_hero),
(neg|troop_slot_ge, "$temp", slot_troop_prisoner_of_party, 1),#deliberately not 0, in case of uninitialized slotm

(try_begin),
   (eq, "$temp", "trp_dplmc_chamberlain"),
   (assign, "$g_player_chamberlain", 0),
(else_try),
   (eq, "$temp", "trp_dplmc_constable"),
   (assign, "$g_player_constable", 0),
(else_try),
   (eq, "$temp", "trp_dplmc_chancellor"),
   (assign, "$g_player_chancellor", 0),
(try_end),
(call_script, "script_dplmc_store_troop_is_female", "$temp"),
], "I will send word to {reg0?her:him} that you are looking for {reg0?her:him}.",
"tavern_traveler_pretalk", []],

#Catch any errors.
[anyone|plyr, "dplmc_tavern_traveler_employee_3",
   [],  "I am afraid I'm not able to help you.", "tavern_traveler_pretalk", []],
##diplomacy end+

  [anyone|plyr, "tavern_traveler_talk", [], "I am looking for one of my companions...", "tavern_traveler_companion_location", []],

  [anyone, "tavern_traveler_companion_location", [], "Maybe I can help you. Who are you looking for?", "tavern_traveler_companion_location_ask", []],

  [anyone|plyr|repeat_for_troops, "tavern_traveler_companion_location_ask",
   [
     (store_repeat_object, ":troop_no"),
     (is_between, ":troop_no", companions_begin, companions_end),

     (troop_slot_ge, ":troop_no", slot_troop_playerparty_history, 1),
##diplomacy start+ Verify that the troops are actually former companions.
     (neg|troop_slot_eq, ":troop_no", slot_troop_playerparty_history, dplmc_pp_history_nonplayer_entry),
	 (neg|troop_slot_eq, ":troop_no", slot_troop_met, 0),
##diplomacy end+

     (assign, ":continue", 0),
     (try_begin),
       (this_or_next|troop_slot_ge, ":troop_no", slot_troop_cur_center, 1),
       (troop_slot_ge, ":troop_no", slot_troop_prisoner_of_party, 0),

       (assign, ":continue", 1),
     (try_end),

     (eq, ":continue", 1),

     (str_store_troop_name, s11, ":troop_no"),
   ],
   "{s11}", "tavern_traveler_companion_location_ask_2",
   [
     (store_repeat_object, "$temp"),
   ]],

  [anyone|plyr, "tavern_traveler_companion_location_ask",
   [],  "Never mind.", "tavern_traveler_pretalk", []],

  #SB : varying costs
  [anyone, "tavern_traveler_companion_location_ask_2", [(str_store_troop_name, s15, "$temp")], "I guess I know where {s15} is. For 30 denars, I'll tell you.", "tavern_traveler_companion_location_ask_money", [
  (store_character_level, "$temp_2", "$temp"),
  (val_mul, "$temp_2", 5),
  (assign, reg1, "$temp_2"),
  
  ]],

  [anyone|plyr, "tavern_traveler_companion_location_ask_money",
   [
     (store_troop_gold, ":cur_gold", "trp_player"),
     (ge, ":cur_gold", "$temp_2"),
     ], "All right. Here is the money.", "tavern_traveler_companion_location_tell",
   [
     (troop_remove_gold, "trp_player", "$temp_2"),
     ]],

  [anyone|plyr, "tavern_traveler_companion_location_ask_money", [], "Never mind, I don't want to know.", "tavern_traveler_pretalk", []],

  [anyone, "tavern_traveler_companion_location_tell", [], "{s15} is currently at {s11}.{s12}", "tavern_traveler_pretalk",
   [
     (str_store_troop_name, s15, "$temp"),

     (try_begin),
       (troop_slot_ge, "$temp", slot_troop_cur_center, 1),
       (troop_get_slot, ":cur_center", "$temp", slot_troop_cur_center),
       (str_store_string, s12, "str_space"),
     (else_try),
       (troop_get_slot, ":cur_center", "$temp", slot_troop_prisoner_of_party),

       (try_begin),
         (is_between, ":cur_center", towns_begin, towns_end),
         (str_store_string, s13, "str_town"),
       (else_try),
         (str_store_string, s13, "str_castle"),
       (try_end),
	   (call_script, "script_dplmc_store_troop_is_female_reg", "$temp", 4), #SB : script call for gender to reg4
       (str_store_string, s12, "str__but_he_is_holding_there_as_a_prisoner_at_dungeon_of_s13"), #[TODO : Control Grammer] New text, control grammer of text later. s13 can be "castle" or "town".
     (try_end),


     #SB : rumour string since we can't confirm or deny anything from troop notes
     (str_store_string_reg, s4, s15),
     (try_begin),
       (is_between, ":cur_center", centers_begin, centers_end),
       (str_store_party_name_link, s5, ":cur_center"),
     (else_try),
       (str_store_string, s5, "str_prisoner_at_large"),
     (try_end),
     (str_store_string, s15, "str_s4_is_at_s5"),
     #copy string
     (str_store_string_reg, s16, s5),
     (call_script, "script_add_rumor_string_to_troop_notes", "$temp", -1, 15),
     (str_store_string_reg, s11, s16),
	 # #s10, s11 etc used above, refresh sreg
     # (try_begin),
		# (party_is_active, ":cur_center"),
		# (str_store_party_name, s11, ":cur_center"),
	 # (else_try),
		# (str_store_party_name, s11, "str_prisoner_at_large"),
	 # (try_end),
     ]],

  [anyone|plyr, "tavern_traveler_talk", [],
   "Farewell.", "close_window", []],

   #SB: this is never really useful since it gets excluded, plus script_update_faction_traveler_notes is not informative at all
  [anyone, "start", [(is_between, "$g_talk_troop", tavern_travelers_begin, tavern_travelers_end),
                     (party_get_slot, ":info_faction", "$g_encountered_party", slot_center_traveler_info_faction),
                     (str_store_faction_name, s17, ":info_faction"),
                     ],
                     #SB : grammar kingdom string
   "Greetings. They say you're the kind of {man/woman} who'd be interested to hear that I travel frequently through the {s17}. I'll tell you all I know for a mere 100 denars.", "tavern_traveler_answer", []],

  [anyone|plyr, "tavern_traveler_answer", [(store_troop_gold, ":cur_gold", "trp_player"),
                                            (ge, ":cur_gold", 100)],
   "Here's 100 denars. Tell me what you know.", "tavern_traveler_continue", [(party_get_slot, ":info_faction", "$g_encountered_party", slot_center_traveler_info_faction),
                                           (call_script, "script_update_faction_traveler_notes", ":info_faction"),
                                           (change_screen_notes, 2, ":info_faction"),
                                           ]],

  [anyone|plyr, "tavern_traveler_answer", [],
   "Sorry friend. I am not interested.", "close_window", []],

  [anyone, "tavern_traveler_continue", [],
   "Well, that's all I can tell you. Good bye.", "close_window", [(troop_remove_gold, "trp_player", 100),]],

#Tavern Talk (with book sellers)
  [anyone, "start", [(is_between, "$g_talk_troop", tavern_booksellers_begin, tavern_booksellers_end),
                     ],
   "Good day {sir/madam}, will you be looking at my books?", "bookseller_talk", []],
  [anyone|plyr, "bookseller_talk", [], "Yes. Show me what you have for sale.", "bookseller_buy", []],

  [anyone,"bookseller_buy", [], "Of course {sir/madam}.", "book_trade_completed",[[change_screen_trade]]],
  [anyone,"book_trade_completed", [], "Anything else?", "bookseller_talk",[]],

  [anyone|plyr,"bookseller_talk", [], "Nothing. Thanks.", "close_window",[]],



#Tavern Talk (with minstrels)


    #SB : disguise chat
  [anyone, "start", [(is_between, "$g_talk_troop", tavern_minstrels_begin, tavern_minstrels_end),
                     (eq, "$sneaked_into_town", disguise_bard),
                     ],
   "Ah, it's good to see a fellow minstrel!", "minstrel_1", []],
  [anyone, "start", [(is_between, "$g_talk_troop", tavern_minstrels_begin, tavern_minstrels_end),
                     ],
   "Greetings to you, {most noble sir/most noble lady}.", "minstrel_1", []],


  [anyone|plyr, "minstrel_1", [(eq, "$minstrels_introduced", 0),],
   "What is it you do?", "minstrel_job_description",
   [(assign, "$minstrels_introduced", 1), ]],

  [anyone|plyr, "minstrel_1", [(eq, "$minstrels_introduced", 1)  ],
   "I have some questions about courtship in Calradia",
   "minstrel_courtship_questions", []],

  [anyone|plyr, "minstrel_1", [(eq, "$minstrels_introduced", 1)  ],
   "Can you teach me any poems?",
   "minstrel_courtship_poem", []],


  [anyone, "minstrel_courtship_poem", [
    (eq, "$allegoric_poem_recitations", 0),
	(this_or_next|eq, "$g_talk_troop", "trp_tavern_minstrel_1"),
		(eq, "$g_talk_troop", "trp_tavern_minstrel_5"),
  ],
   "I can teach you the poem, 'The Storming of the Castle of Love.' It is short enough to be easily learned. It is an allegoric poem, replete with symbols and metaphor. It describes how a brave but rough warrior wins the heart of his lady by learning the virtues of chivalry, becoming a true and noble knight. Its theme -- that the role of a woman is to inspire but also civilize a man -- is appreciated by some noble ladies, but not all.",
   "minstrel_courtship_poem_teach", [
    (assign, "$poem_selected", courtship_poem_allegoric),
   ]],

  [anyone, "minstrel_courtship_poem", [
    (eq, "$mystic_poem_recitations", 0),
	(this_or_next|eq, "$g_talk_troop", "trp_tavern_minstrel_3"),
		(eq, "$g_talk_troop", "trp_tavern_minstrel_1"),
  ],
   "I can teach you the poem, 'The Heart's Desire.' It is a lyrical poem, which can be interpreted either erotically or spiritually. The lover realizes the majesty of the divine by gazing upon the body of his beloved. I believe that it appeals to women of a certain romantic temperament, but you risk scandalizing or boring others.",
   "minstrel_courtship_poem_teach", [
   (assign, "$poem_selected", courtship_poem_mystic),
   ]],

#ashik poem
  [anyone, "minstrel_courtship_poem", [
  	(eq, "$tragic_poem_recitations", 0),
	(this_or_next|eq, "$g_talk_troop", "trp_tavern_minstrel_3"),
		(eq, "$g_talk_troop", "trp_tavern_minstrel_2"),  ],
   "I can teach you the tale of Kais and Layala. It is a sad and simple story -- the shepherd boy Kais and the nobleman's daughter Layala love each other, but they can never marry. The poem is Kais' lament as he wanders alone, unwilling to forget his true love, driving himself mad with longing. Some ladies melt at the sweetness of his sorrows; others glaze over at his self-pity.",
   "minstrel_courtship_poem_teach", [
   (assign, "$poem_selected", courtship_poem_tragic),

   ]],


#nord saga
  [anyone, "minstrel_courtship_poem", [
	(eq, "$heroic_poem_recitations", 0),
	(this_or_next|eq, "$g_talk_troop", "trp_tavern_minstrel_4"),
		(eq, "$g_talk_troop", "trp_tavern_minstrel_2"),

  ],
   "I can teach you part of the saga of Helgerad and Kara. It is a heroic tale, full of blood and battle. The shieldmaiden Kara chooses the warrior Helgered as her lover, as he is the only man who can defeat her in combat. Her father, who pledged her to another, comes with his sons and his huscarls to kill Helgered. They fight, and Helgered and Kara slaughter the entire host except for Kara's beloved younger brother -- who, alas, grows up to avenge his father by slaying Helgered. The depiction of warrior and shieldmaiden as equals will appeal to some women, but a mail-wearing, blood-spattered heroine will shock and repulse others.",
   "minstrel_courtship_poem_teach", [
   (assign, "$poem_selected", courtship_poem_heroic),
   ]],


  [anyone, "minstrel_courtship_poem", [
    (eq, "$comic_poem_recitations", 0),
	(this_or_next|eq, "$g_talk_troop", "trp_tavern_minstrel_5"),
		(eq, "$g_talk_troop", "trp_tavern_minstrel_4"),
  ],
   "I can teach you the poem, 'An Argument in the Garden.' It is a comic poem, which satirizes the conventions of courtly love. A lover steals into a garden in Veluca, and plies her with lots of witty lines to persuade his lover to submit to his embraces. She shoots down all of his advances one by one, then when he is downcast, she takes him in her arms and tells him that she wanted him all along, except on her terms, not his. A lady with a sense of humor may find it amusing, but others might feel that they are the ones who are being mocked.",
   "minstrel_courtship_poem_teach", [
   (assign, "$poem_selected", courtship_poem_comic),
   ]],


  [anyone, "minstrel_courtship_poem_teach", [],
   "To teach it to you, I will need some hours of your time -- and, of course, a small fee for my services. About 300 denars would suffice.",
   "minstrel_courtship_poem_teach_2", []],

   #SB : disguise_bard
  [anyone, "minstrel_courtship_poem", [
  (eq, "$g_dplmc_player_disguise", 1), #enabled
  (troop_get_slot, ":has_disguise", "trp_player", slot_troop_player_disguise_sets),
  (val_and, ":has_disguise", disguise_bard),
  (eq, ":has_disguise", 0),
  ],
   "I believe you already know the poems I am best equipped to teach. However, I believe that you are eager to learn more -- I can also teach you some courtly fashion and the use of the lyre.\
 All yours for the small token price of 1000 denars, as I am hesitant to sell off this antique lyre...",
   "minstrel_disguise_teach", [
    #TODO check if they're using lyre or lute
   ]],

  [anyone|plyr, "minstrel_disguise_teach", [
    (store_troop_gold, ":gold", "trp_player"),
    (ge, ":gold", 1000),
  ],
   "Yes -- show me your moves.", #TODO : add some random text blurbs from manuals
   "close_window", [
    (troop_remove_gold, "trp_player", 1000),
    (call_script, "script_acquire_disguise", disguise_bard),
  ]],
  [anyone|plyr, "minstrel_disguise_teach", [], "Never mind.", "minstrel_pretalk", []],
   
  [anyone, "minstrel_courtship_poem", [],
   "I believe you already know the poems I am best equipped to teach.",
   "minstrel_pretalk", []],

  [anyone|plyr, "minstrel_courtship_poem_teach_2", [
  (store_troop_gold, ":gold", "trp_player"),
  (ge, ":gold", 300),
  ],
   "Yes -- teach me that one",
   "minstrel_courtship_poem_teach_3", []],

  [anyone|plyr, "minstrel_courtship_poem_teach_2", [],
   "Never mind.",
   "minstrel_pretalk", []],


  [anyone, "minstrel_courtship_poem_teach_3", [
  (eq, "$poem_selected", courtship_poem_allegoric),
  ],
   "Very well -- repeat after me:^\
   I deflected her skeptical questioning darts^\
   with armor made of purest devotion^\
   purged in the forge of my heart^\
   from the slag of any baser emotion",
   "minstrel_courtship_poem_teach_4", []],


  [anyone, "minstrel_courtship_poem_teach_3", [
  (eq, "$poem_selected", courtship_poem_mystic),
  ],
   "Very well -- repeat after me:^\
   You are the first and the last^\
   the outer and the inner^\
   When I drink from the cup of love^\
   I escape the tread of time^\
   A moment in solitude with you^\
   Would have no beginning and no end",
   "minstrel_courtship_poem_teach_4", []],


  [anyone, "minstrel_courtship_poem_teach_3", [
  (eq, "$poem_selected", courtship_poem_tragic),
  ],
  "Very well -- repeat after me:^\
  The wind that blows the dry steppe dust^\
  Stirs the curtains in your tower^\
  The moon that lights my drunken path home^\
  Looks on you sleeping in your bower^\
  If I cried out to the wind^\
  Could it carry a message from my lips?^\
  If I wept before the moon^\
  Would it grant me just a glimpse?",
  "minstrel_courtship_poem_teach_4", [
   ]],


  [anyone, "minstrel_courtship_poem_teach_3", [
  (eq, "$poem_selected", courtship_poem_heroic),
  ],
  "Very well -- repeat after me:^\
   A light pierced the gloom over Wercheg cliffs...^\
   Where charge of surf broke on shieldwall of shore^\
   Grey-helmed and grey-cloaked the maiden stood^\
   On wave-steed's prow, the sailcloth snapping^\
   Over din of oars, of timbers cracking^\
   She cried out to her hearth-brothers, arrayed for war",
   "minstrel_courtship_poem_teach_4", [
   ]],


  [anyone, "minstrel_courtship_poem_teach_3", [
  (eq, "$poem_selected", courtship_poem_comic),
  ],
  "Very well -- repeat after me:^All the silks of Veluca, all the furs of Khudan^Would buy you not the briefest kiss^What I bestow, I bestow for love^And the sake of my own happiness^But brought you a gift? Let us see! Let us see!^Or should tell my father how you came to see me?",
  "minstrel_courtship_poem_teach_4", [
   ]],


  [anyone|plyr, "minstrel_courtship_poem_teach_4", [
  (eq, "$poem_selected", courtship_poem_allegoric),
  ],
  "'I deflected her skeptical questioning darts...'",
  "minstrel_learn_poem_continue", [
    (troop_remove_gold, "trp_player", 300),
    (val_add, "$allegoric_poem_recitations", 1),
  ]],


  [anyone|plyr, "minstrel_courtship_poem_teach_4", [
  (eq, "$poem_selected", courtship_poem_mystic),
  ],
  "'You are the first and the last..'",
  "minstrel_learn_poem_continue", [
    (troop_remove_gold, "trp_player", 300),
    (val_add, "$mystic_poem_recitations", 1),
  ]],




  [anyone|plyr, "minstrel_courtship_poem_teach_4", [
  (eq, "$poem_selected", courtship_poem_tragic),
  ],
  "'The wind that blows the dry steppe dust...'",
  "minstrel_learn_poem_continue", [
    (troop_remove_gold, "trp_player", 300),
	(val_add, "$tragic_poem_recitations", 1),
  ]],


  [anyone|plyr, "minstrel_courtship_poem_teach_4", [
  (eq, "$poem_selected", courtship_poem_heroic),
  ],
  "'A light pierced the gloom over Wercheg cliffs...'",
  "minstrel_learn_poem_continue", [
    (troop_remove_gold, "trp_player", 300),
	(val_add, "$heroic_poem_recitations", 1),
  ]],


  [anyone|plyr, "minstrel_courtship_poem_teach_4", [
  (eq, "$poem_selected", courtship_poem_comic),
  ],
  "'All the silks of Veluca...'",
  "minstrel_learn_poem_continue", [
    (troop_remove_gold, "trp_player", 300),
	(val_add, "$comic_poem_recitations", 1),
  ]],


  [anyone|plyr, "minstrel_courtship_poem_teach_4", [
  ],
  "Pshaw... What kind of doggerel is that?",
  "minstrel_courtship_poem_teach_reject", []],

  [anyone, "minstrel_courtship_poem_teach_reject", [
  ],
  "Very well. If the poem is not to your taste, then keep your money. But remember -- with poets and with lovers, what is important is not what pleases you. What is important is what your pleases your audience. If you wish to learn the poem, I am still willing to teach.",
  "minstrel_pretalk", []],


  [anyone, "minstrel_learn_poem_continue", [
  ],
   "Very good -- but there are many stanzas to go. Now, listen closely...", "close_window",
   [
    (try_begin),
      (try_begin),
        (eq, "$poem_selected", courtship_poem_mystic),
        (set_achievement_stat, ACHIEVEMENT_ROMANTIC_WARRIOR, 0, 1),
      (else_try),
        (eq, "$poem_selected", courtship_poem_tragic),
        (set_achievement_stat, ACHIEVEMENT_ROMANTIC_WARRIOR, 1, 1),
      (else_try),
        (eq, "$poem_selected", courtship_poem_heroic),
        (set_achievement_stat, ACHIEVEMENT_ROMANTIC_WARRIOR, 2, 1),
      (else_try),
        (eq, "$poem_selected", courtship_poem_comic),
        (set_achievement_stat, ACHIEVEMENT_ROMANTIC_WARRIOR, 3, 1),
      (else_try),
        (eq, "$poem_selected", courtship_poem_allegoric),
        (set_achievement_stat, ACHIEVEMENT_ROMANTIC_WARRIOR, 4, 1),
      (try_end),

      (assign, ":number_of_poems_player_know", 0),
      (try_for_range, ":poem_number", 0, 5),
        (get_achievement_stat, ":poem_is_known", ACHIEVEMENT_ROMANTIC_WARRIOR, ":poem_number"),
        (eq, ":poem_is_known", 1),
        (val_add, ":number_of_poems_player_know", 1),
      (try_end),

      (try_begin),
        (ge, ":number_of_poems_player_know", 3),
        (unlock_achievement, ACHIEVEMENT_ROMANTIC_WARRIOR),
      (try_end),
    (try_end),

    (assign, "$g_leave_town",1),
    (rest_for_hours, 2, 2, 0),
    (finish_mission),
   ]],


  [anyone|plyr, "minstrel_1", [(eq, "$minstrels_introduced", 1)],
   "Can you tell me anything about the eligible maidens in this realm?",
   "minstrel_gossip", [
   ]],

  [anyone, "minstrel_gossip",
  [],
   "About whom did you wish to know?",
   "minstrel_gossip_select", []],

  [anyone|plyr,"minstrel_gossip_select",
   [],
   "Just tell me the latest piece of gossip",
   "minstrel_gossip_maiden_selected_2", [

    (assign, "$lady_selected", -1),
	(assign, "$romantic_rival", -1),

    (try_for_range, ":log_entry", 0, "$num_log_entries"),
		(troop_get_slot, ":lady", "trp_log_array_actor", ":log_entry"),
		(is_between, ":lady", kingdom_ladies_begin, kingdom_ladies_end),
		(neg|troop_slot_eq, "trp_player", slot_troop_spouse, ":lady"),

		(troop_get_slot, ":type", "trp_log_array_entry_type", ":log_entry"),
		(is_between, ":type", 50, 65), #excludes log entries in which a party is an actor

		(store_faction_of_troop, ":lady_faction", ":lady"),
		(store_faction_of_party, ":town_faction", "$g_encountered_party"),
		(eq, ":lady_faction", ":town_faction"),
		(assign, "$lady_selected", ":lady"),
		(try_begin),
			(eq, "$cheat_mode", 1),
			(str_store_troop_name, s4, ":lady"),
			(troop_get_slot, reg4, "trp_log_array_entry_type", ":log_entry"),
			(assign, reg5, "$num_log_entries"),
			(display_message, "str_log_entry_type_reg4_for_s4_total_entries_reg5"),
		(try_end),
	(try_end),

   ]],


  [anyone|plyr|repeat_for_troops,"minstrel_gossip_select",
   [
   (store_repeat_object, "$temp"),
   (troop_slot_eq, "$temp", slot_troop_occupation, slto_kingdom_lady),
   (troop_slot_eq, "$temp", slot_troop_spouse, -1),
   (store_faction_of_troop, ":lady_faction", "$temp"),
   (store_faction_of_party, ":town_faction", "$g_encountered_party"),
   (eq, ":lady_faction", ":town_faction"),
   (str_store_troop_name, s10, "$temp"),
   ],
   "{s10}",
   "minstrel_gossip_maiden_selected", [
    (store_repeat_object, "$lady_selected"),
   ]],

  [anyone|plyr,"minstrel_gossip_select",
   [], "Never mind.", "minstrel_pretalk", []],


   [anyone,"minstrel_gossip_maiden_selected",
   [
	(try_begin),
		(eq, "$cheat_mode", 1),
		(assign, reg3, "$lady_selected"),
		(display_message, "@{!}DEBUG: Gossip for troop {reg3}"),
		(gt, reg3, -1),
		(display_message, "@{!}DEBUG: {s3}"),
	(try_end),

	(try_begin),
	   (gt, "$lady_selected", -1),
	   (str_store_troop_name, s9, "$lady_selected"), #lady

      ##diplomacy start+ Make gender-correct
      (try_begin),
         (call_script, "script_cf_dplmc_troop_is_female", "$lady_selected"),
         (assign, reg4, 1),
      (else_try),
         (assign, reg4, 0),
      (try_end),
      #the strings below have been modified to use reg4 for gender
      ##diplomacy end+
	   (str_store_string, s10, "str_error__reputation_type_for_s9_not_within_range"),
	   (try_begin),
			(troop_slot_eq, "$lady_selected", slot_lord_reputation_type, lrep_conventional),
			(str_store_string, s16, "str_they_say_that_s9_is_a_most_conventional_maiden__devoted_to_her_family_of_a_kind_and_gentle_temperament_a_lady_in_all_her_way"),
	   (else_try),
			(troop_slot_eq, "$lady_selected", slot_lord_reputation_type, lrep_otherworldly),
			(str_store_string, s16, "str_they_say_that_s9_is_a_bit_of_a_romantic_a_dreamer__of_a_gentle_temperament_yet_unpredictable_she_is_likely_to_be_led_by_her_passions_and_will_be_trouble_for_her_family_ill_wager"),
	   (else_try),
			(troop_slot_eq, "$lady_selected", slot_lord_reputation_type, lrep_ambitious),
			(str_store_string, s16, "str_they_say_that_s9_is_determined_to_marry_well_and_make_her_mark_in_the_world_she_may_be_a_tremendous_asset_for_her_husband__provided_he_can_satisfy_her_ambition"),
	   (else_try),
			(troop_slot_eq, "$lady_selected", slot_lord_reputation_type, lrep_adventurous),
			(str_store_string, s16, "str_they_say_that_s9_loves_to_hunt_and_ride_maybe_she_wishes_she_were_a_man_whoever_she_marries_will_have_a_tough_job_keeping_the_upper_hand_i_would_say"),
	   (else_try),
			(troop_slot_eq, "$lady_selected", slot_lord_reputation_type, lrep_moralist),
			(str_store_string, s16, "str_they_say_that_s9_is_a_lady_of_the_highest_moral_standards_very_admirable_very_admirable__and_very_hard_to_please_ill_warrant"),
	   (try_end),

	   (call_script, "script_add_rumor_string_to_troop_notes", "$lady_selected", -1, s16),
   (try_end),
   ],
   "{s16}",
   "minstrel_gossip_maiden_selected_2", [
   ]],


   [anyone,"minstrel_gossip_maiden_selected_2",
   [
	##diplomacy+
	##OLD:
	#(troop_slot_eq, "trp_player", slot_troop_spouse, "$lady_selected"),
	#(is_between, "$lady_selected", kingdom_ladies_begin, kingdom_ladies_end),
	##NEW:
	(is_between, "$lady_selected", heroes_begin, heroes_end),
	(this_or_next|troop_slot_eq, "$lady_selected", slot_troop_spouse, "trp_player"),
		(troop_slot_eq, "trp_player", slot_troop_spouse, "$lady_selected"),
	(call_script, "script_dplmc_store_troop_is_female",  "$lady_selected"),#Add support for male version
	],#Next line, "She" -> {reg0?She:He} , "she" -> {reg0?she:he}
	"{reg0?She:He} is married to you, of course! Clearly, no one would dream that {reg0?she:he} would do anything to engender gossip.",
   "minstrel_postgossip",
   ##diplomacy end+
	[]],


   [anyone,"minstrel_gossip_maiden_selected_2",
   [
    (gt, "$lady_selected", -1),
	(assign, ":lady", "$lady_selected"),
	(neg|troop_slot_ge, ":lady", slot_troop_spouse, active_npcs_begin),
	(troop_get_slot, ":betrothed", ":lady", slot_troop_betrothed),
	(is_between, ":betrothed", active_npcs_begin, active_npcs_end),

	(str_store_troop_name, s9, ":lady"),
	(str_store_troop_name, s11, ":betrothed"),

	(str_store_string, s12, "str_s9_is_now_betrothed_to_s11_soon_we_believe_there_shall_be_a_wedding"),
	(try_begin),
		(troop_slot_eq, ":lady", slot_troop_courtship_state, 2),
		(assign, "$romantic_rival", ":betrothed"),
	(try_end),
	],
	"{s12}.",
   "minstrel_postgossip", []],





   [anyone,"minstrel_gossip_maiden_selected_2",
   [
      ##diplomacy start+ Make gender-correct
      #xxx TODO ensure this actually works, untangle how this is used
      #The strings below have been modified to use reg4 for gender
     (try_begin),
        (call_script, "script_cf_dplmc_troop_is_female", "$lady_selected"),
        (assign, reg4, 1),
	 (else_try),
        (assign, reg4, 0),
     (try_end),
      ##diplomacy end+
    (try_begin),
		(is_between, "$lady_selected", kingdom_ladies_begin, kingdom_ladies_end),
	    (str_store_string, s12, "str_i_have_not_heard_any_news_about_her"),

		(str_store_troop_name, s9, "$lady_selected"), #lady

		(try_begin),
			(eq, "$cheat_mode", 1), #for some reason, speaking to tavern merchant does not yield rumor. Try for Lady Baoth, Lord Etr
			(display_message, "str_searching_for_rumors_for_s9"),
		(try_end),

		(assign, "$romantic_rival", -1),
		(assign, ":last_lady_noted", 0),
		(try_for_range, ":log_entry", 0, "$num_log_entries"),
			(troop_slot_eq, "trp_log_array_actor", ":log_entry", "$lady_selected"),


			#Presumably possible for some events involving a lady to not involve troops
			(troop_get_slot, ":suitor", "trp_log_array_troop_object", ":log_entry"),
			(str_clear, s11),
			(try_begin),
				(is_between, ":suitor", 0, kingdom_ladies_end),
				(str_store_troop_name, s11, ":suitor"),
			(try_end),

			(troop_get_slot, ":third_party", "trp_log_array_center_object", ":log_entry"),
			(str_clear, s10),
			(try_begin),
				(is_between, ":third_party", 0, kingdom_ladies_end),
				(str_store_troop_name, s10, ":third_party"),
			(try_end),

			(assign, ":lady", "$lady_selected"),

			(try_begin),
				(troop_slot_eq, "trp_log_array_entry_type",  ":log_entry", logent_lady_favors_suitor),
				(str_store_string, s12, "str_they_say_that_s9_has_shown_favor_to_s11_perhaps_it_will_not_be_long_until_they_are_betrothed__if_her_family_permits"),
				(assign, ":last_lady_noted", ":lady"),
				(assign, ":last_suitor_noted", ":suitor"),

				(try_begin),
					(troop_slot_eq, ":lady", slot_troop_courtship_state, 2),
					(this_or_next|troop_slot_eq, ":suitor", slot_troop_love_interest_1, ":lady"),
					(this_or_next|troop_slot_eq, ":suitor", slot_troop_love_interest_2, ":lady"),
						(troop_slot_eq, ":suitor", slot_troop_love_interest_3, ":lady"),

					(assign, "$romantic_rival", ":suitor"),
				(try_end),
			(else_try),
				(troop_slot_eq, "trp_log_array_entry_type",  ":log_entry", logent_lady_betrothed_to_suitor_by_family),
				(str_store_string, s12, "str_they_say_that_s9_has_been_forced_by_her_family_into_betrothal_with_s11"),
				(assign, ":last_lady_noted", ":lady"),
				(assign, ":last_suitor_noted", ":suitor"),

				(try_begin),
					(troop_slot_eq, ":lady", slot_troop_courtship_state, 2),
					(assign, "$romantic_rival", ":suitor"),
				(try_end),
			(else_try),
				(troop_slot_eq, "trp_log_array_entry_type",  ":log_entry", logent_lady_betrothed_to_suitor_by_choice),
				(str_store_string, s12, "str_they_say_that_s9_has_agreed_to_s11s_suit_and_the_two_are_now_betrothed"),
				(assign, ":last_lady_noted", ":lady"),
				(assign, ":last_suitor_noted", ":suitor"),

				(try_begin),
					(troop_slot_eq, ":lady", slot_troop_courtship_state, 2),
					(this_or_next|troop_slot_eq, ":suitor", slot_troop_love_interest_1, ":lady"),
					(this_or_next|troop_slot_eq, ":suitor", slot_troop_love_interest_2, ":lady"),
						(troop_slot_eq, ":suitor", slot_troop_love_interest_3, ":lady"),


					(assign, "$romantic_rival", ":suitor"),
				(try_end),

			(else_try),
				(troop_slot_eq, "trp_log_array_entry_type",  ":log_entry", logent_lady_betrothed_to_suitor_by_pressure),
				(str_store_string, s12, "str_they_say_that_s9_under_pressure_from_her_family_has_agreed_to_betrothal_with_s11"),
				(assign, ":last_lady_noted", ":lady"),
				(assign, ":last_suitor_noted", ":suitor"),

				(try_begin),
					(troop_slot_eq, ":lady", slot_troop_courtship_state, 2),
					(this_or_next|troop_slot_eq, ":suitor", slot_troop_love_interest_1, ":lady"),
					(this_or_next|troop_slot_eq, ":suitor", slot_troop_love_interest_2, ":lady"),
						(troop_slot_eq, ":suitor", slot_troop_love_interest_3, ":lady"),

					(assign, "$romantic_rival", ":suitor"),
				(try_end),

			(else_try),

				(troop_slot_eq, "trp_log_array_entry_type",  ":log_entry", logent_lady_rejects_suitor),
				(str_store_string, s12, "str_they_say_that_s9_has_refused_s11s_suit"),
				(assign, ":last_lady_noted", ":lady"),
				(assign, ":last_suitor_noted", ":suitor"),

			(else_try),

				(troop_slot_eq, "trp_log_array_entry_type",  ":log_entry", logent_lady_rejected_by_suitor),
				(str_store_string, s12, "str_they_say_that_s11_has_tired_of_pursuing_s9"),
				(assign, ":last_lady_noted", ":lady"),
				(assign, ":last_suitor_noted", ":suitor"),


			(else_try),
				(troop_slot_eq, "trp_log_array_entry_type",  ":log_entry", logent_lady_father_rejects_suitor),
				(str_store_string, s12, "str_they_say_that_s9s_family_has_forced_her_to_renounce_s11_whom_she_much_loved"),
				(assign, ":last_lady_noted", ":lady"),
				(assign, ":last_suitor_noted", ":suitor"),

			(else_try),
				(troop_slot_eq, "trp_log_array_entry_type",  ":log_entry", logent_lady_elopes_with_lord),
				(str_store_string, s12, "str_they_say_that_s9_has_run_away_with_s11_causing_her_family_much_grievance"),
				(assign, ":last_lady_noted", ":lady"),
				(assign, ":last_suitor_noted", ":suitor"),

			(else_try),
				(troop_slot_eq, "trp_log_array_entry_type",  ":log_entry", logent_lady_marries_lord),
				(str_store_string, s12, "str_they_say_that_s9_and_s11_have_wed"),
				(assign, ":last_lady_noted", ":lady"),
				(assign, ":last_suitor_noted", ":suitor"),
			(else_try),
				(troop_get_slot, ":suitor", ":lady", slot_lady_last_suitor),
				(is_between, ":suitor", active_npcs_begin, active_npcs_end),
				(str_store_troop_name, s11, ":suitor"),

				(str_store_string, s12, "str_they_say_that_s9_was_recently_visited_by_s11_who_knows_where_that_might_lead"),
				(assign, ":last_lady_noted", ":lady"),
				(assign, ":last_suitor_noted", ":suitor"),
				(try_begin),
					(troop_slot_eq, ":lady", slot_troop_courtship_state, 2),
					(this_or_next|troop_slot_eq, ":suitor", slot_troop_love_interest_1, ":lady"),
					(this_or_next|troop_slot_eq, ":suitor", slot_troop_love_interest_2, ":lady"),
						(troop_slot_eq, ":suitor", slot_troop_love_interest_3, ":lady"),

					(assign, "$romantic_rival", ":suitor"),
				(try_end),
			(try_end),

		(try_end),

		(try_begin),
			(neq, ":last_suitor_noted", "$romantic_rival"),
			(assign, "$romantic_rival", -1),
		(try_end),

		(try_begin),
			(gt, ":last_lady_noted", 0),
			(call_script, "script_add_rumor_string_to_troop_notes", ":last_lady_noted", ":last_suitor_noted", s12),
		(try_end),
	(else_try),
		(eq, "$lady_selected", -1),
		(str_store_string, s12, "str_there_is_not_much_to_tell_but_it_is_still_early_in_the_season"),
	(else_try),
		(assign, reg4, "$lady_selected"),
		(str_store_troop_name, s9, "$lady_selected"),
		(str_store_string, s12, "str_error_lady_selected_=_s9"),
	(try_end),
   ],
   "{s12}.",
   "minstrel_postgossip", []],

  [anyone|plyr, "minstrel_postgossip", [],
   "Very interesting -- but let us speak of something else.",
   "minstrel_pretalk", []],

  [anyone|plyr, "minstrel_postgossip", [],
   "Very interesting -- is there any more news?",
   "minstrel_gossip", []],

  [anyone|plyr, "minstrel_postgossip", [
  (is_between, "$romantic_rival", active_npcs_begin, active_npcs_end),
  (neg|check_quest_active, "qst_duel_courtship_rival"),
  (neg|troop_slot_ge, "trp_player", slot_troop_spouse, kingdom_ladies_begin),
  #diplomacy start+ extra check since the wife may be a lord
  (neg|troop_slot_ge, "trp_player", slot_troop_spouse, active_npcs_begin),
  #diplomacy end+
  ],
   "What? I'll make that miscreant face my sword",
   "minstrel_duel_confirm", []],

  [anyone, "minstrel_duel_confirm", [
  (str_store_troop_name, s11, "$romantic_rival"),
  ],
   "Do you mean that? {s11} will be honor-bound to fight you, but challenging a lord to duel over a woman is seen as a bit hot-headed, even in this warlike age.",
   "minstrel_duel_confirm_2", []],

  [anyone|plyr, "minstrel_duel_confirm_2", [
  (str_store_troop_name, s11, "$romantic_rival"),
  (str_store_troop_name, s12, "$lady_selected"),
  ],
   "Yes -- I intend to force {s11} to relinquish his suit of {s12}",
   "minstrel_duel_issued", []],

  [anyone|plyr, "minstrel_duel_confirm_2", [
  ],
   "No -- I let my passions run away with me, there",
   "minstrel_pretalk", []],

  [anyone, "minstrel_duel_issued", [
  ],
   "As you wish. I'll spead the word of your intentions, so that {s13} does not try to back out...",
   "minstrel_pretalk", [
	(str_store_troop_name, s11, "$lady_selected"),
    (str_store_troop_name_link, s13, "$romantic_rival"),
	 ##diplomacy start+ use correct pronoun for gender
	 (call_script, "script_dplmc_store_troop_is_female_reg", "$romantic_rival", 4),
	 ##diplomacy end+
    (str_store_string, s2, "str_you_intend_to_challenge_s13_to_force_him_to_relinquish_his_suit_of_s11"),
    (setup_quest_text, "qst_duel_courtship_rival"),
    (call_script, "script_start_quest", "qst_duel_courtship_rival", "$lady_selected"),
    (quest_set_slot, "qst_duel_courtship_rival", slot_quest_giver_troop, "$lady_selected"),

    (quest_set_slot, "qst_duel_courtship_rival", slot_quest_target_troop, "$romantic_rival"),
    (quest_set_slot, "qst_duel_courtship_rival", slot_quest_xp_reward, 400),
    (quest_set_slot, "qst_duel_courtship_rival", slot_quest_expiration_days, 60),
    (quest_set_slot, "qst_duel_courtship_rival", slot_quest_current_state, 0),
   ]],




  [anyone|plyr, "minstrel_1", [(eq, "$minstrels_introduced", 1)  ],
   "Do you know of any ongoing feasts?",
   "minstrel_courtship_locations", []],

  [anyone, "minstrel_courtship_locations", [

  (str_clear, s12),
  (assign, ":feast_found", 0),
  (try_for_range, ":kingdom", kingdoms_begin, kingdoms_end),
	##zerilius changes begin
	##Bug Fix since they tell about feasts of eliminated kingdoms also.
	(faction_slot_eq, ":kingdom", slot_faction_state, sfs_active),
	##zerilius changes end
	(faction_slot_eq, ":kingdom", slot_faction_ai_state, sfai_feast),
    (assign, ":feast_found", 1),

	(faction_get_slot, ":feast_venue", ":kingdom", slot_faction_ai_object),
	(str_store_party_name, s4, ":feast_venue"),
	(str_store_faction_name, s3, ":kingdom"),

	(store_current_hours, ":hour"),
	(store_sub, ":hours_since_start", ":hour", 72),
	(faction_get_slot, ":feast_time", ":kingdom", slot_faction_last_feast_start_time),
	(val_add, ":hours_since_start", ":feast_time"),

	(try_begin),
		(gt, ":hours_since_start", 48),
		(str_store_string, s12, "str_s12there_is_a_feast_of_the_s3_in_progress_at_s4_but_it_has_been_going_on_for_a_couple_of_days_and_is_about_to_end_"),
	(else_try),
		(gt, ":hours_since_start", 24),
		(str_store_string, s12, "str_s12there_is_a_feast_of_the_s3_in_progress_at_s4_which_should_last_for_at_least_another_day_"),
	(else_try),
		(str_store_string, s12, "str_s12there_is_a_feast_of_the_s3_in_progress_at_s4_which_has_only_just_begun_"),
	(try_end),
  (try_end),

  (try_begin),
    (eq, ":feast_found", 0),
	(str_store_string, s12, "str_not_at_this_time_no"),
  (else_try),
	(str_store_string, s12, "str_s12the_great_lords_bring_their_daughters_and_sisters_to_these_occasions_to_see_and_be_seen_so_they_represent_an_excellent_opportunity_to_make_a_ladys_acquaintance"),
  (try_end),

  ],
   "{s12}",
"minstrel_pretalk", []],

  [anyone|plyr, "minstrel_1", [],
   "Good-bye.", "close_window", []],

  [anyone, "minstrel_courtship_questions", [],
   "What do you wish to know?",
"minstrel_courtship_questions_2", []],

  [anyone, "minstrel_courtship_prequestions", [],
   "Can I answer any other questions for you?",
"minstrel_courtship_questions_2", []],

  [anyone|plyr, "minstrel_courtship_questions_2", [
  (eq, "$minstrels_discussed_love", 1),
  ],
   "Is there a place for me in the game of love?",
   "minstrel_player_role", [
   (assign, "$minstrels_discussed_player_role", 1),
   ]],

  [anyone|plyr, "minstrel_courtship_questions_2", [
   (eq, "$minstrels_discussed_player_role", 1),
  ],
   "How would a suitor meet a lady?",
   "minstrel_player_advice_meet", [
    (assign, "$minstrels_discussed_meetings", 1),
   ]],

  [anyone|plyr, "minstrel_courtship_questions_2", [
   (eq, "$minstrels_discussed_meetings", 1),
  ],
   "Having met a lady, how would the suitor woo her?",
   "minstrel_player_advice_woo", [
   ]],



  [anyone|plyr, "minstrel_courtship_questions_2", [],
   "Tell me about marriage and love among the nobility of Calradia",
   "minstrel_nobles", [
   (assign, "$minstrels_discussed_love", 1),
   ]],

  [anyone, "minstrel_nobles", [],
   "Nobles are an odd lot. In Calradia, a daughter is a political asset, to be given away to a lord with whom her father wishes to make an alliance. Yet the great families of this land idealize pure love between man and woman, and I have seen many a hardened warrior weep copious tears at the doomed ardour of Sahira and Janun in the songs -- even as he made plans to break his own daughter's heart.",
"minstrel_nobles_2", []],

  [anyone, "minstrel_nobles_2", [],
   "Fathers differ, of course. Some Calradian nobles will let their daughters choose a husband who pleases them. Others, however, feel that to allow their daughters any choice at all would be to diminish their own authority, and insist on imposing a groom whether she likes it or not.",
"minstrel_nobles_3", []],

  [anyone, "minstrel_nobles_3", [], "But the majority will steer a middle course -- they will want to make the final decision about a groom, but will weigh their daughter's preferences heavily. Among other factors, a happy marriage is more likely to produce heirs. So, there is a place for courtship, and for the use of skill and passion to win a lady's heart.",
"minstrel_prequestions", []],

  [anyone|plyr, "minstrel_courtship_questions_2", [
  (eq, "$minstrels_discussed_love", 1),
  ],
   "What if a lady and her father disagree about a suitor?",
   "minstrel_daughter_father", []],

  [anyone, "minstrel_daughter_father", [], "It happens sometimes that a bride elopes. This is a major blow to the father's prestige, leading to lasting enmities. Indeed, it is possible that a war may be fought over a woman. Now, that is a fine topic for a song.",
   "minstrel_daughter_father_2", []],

  [anyone, "minstrel_daughter_father_2", [], "In the end, however, most brides will submit to their parents' choice. A noblewoman's family is everything to her, and few are brave enough to risk its disapproval for the sake of man she barely knows. She may pine for her lover, but still accept the groom -- and without tragic love, what would we have to sing about?",
   "minstrel_prequestions", []],



   [anyone, "minstrel_player_role", [
   (troop_get_type, ":is_female", "trp_player"),
   (eq, ":is_female", 0),
   ], "Of course! Calradian lords make a great deal of lineage, but in the end, lands and money speak louder than one's ancestors. Even though you are a foreigner, if you are coming up in the world, then many parents will consider you a fine catch.",
   "minstrel_player_role_2", []],

   [anyone, "minstrel_player_role_2", [
   ], "You will have to compete with many other lords of your realm, however, who will have an advantage -- they have known these ladies from childhood, and will have been sized up as grooms by carefully discerning mothers and aunts. Some ladies may be fascinated by the stranger, yet opt for the familiar.",
   "minstrel_player_role_3", []],

   [anyone, "minstrel_player_role_3", [
   ], "So know this -- you may have your heart broken. But to enter the arena of love fearing heartbreak is like entering the battlefield fearing the enemy's arrows. Be brave, and shrug off the sting of rejection, and victory may yet be yours.",
   "minstrel_prequestions", []],

##diplomacy start+ Make either-gender version, if gender roles are reversed
  [anyone, "minstrel_player_role", [
   ], "{Sir/Lady} -- I will speak bluntly. Most of the {ladies/lords} of this land are looking for a demure {lad/maiden}, whose skin as fair as snow -- and your skin is burnt brown by the sun. They want a {boy/maiden} whose voice is soft as bells -- and your voice is hoarse from commanding {soldiers/men} in battle. Also, athough the {ladies/lords} of Calradia appreciate poems about love, most also want heirs, and few {men/women} can ride and fight while {caring for their children/with child}.",
   "minstrel_female_player_3", []],


  [anyone, "minstrel_female_player_3", [
   ], "However, not all {ladies/lords} will be so conventionally minded. We poets sing of shield {boys/maidens} and of {hunters/huntresses}, of {lads/women} who forged their own path without having sacrificed the chance for love. I would not tell you that it would be easy for you to find a devoted {wife/husband} who will accept your ways, but I would not say that it is impossible.",
   "minstrel_prequestions", []],
##diplomacy end+

  [anyone|plyr, "minstrel_courtship_questions_2", [
  (eq, "$minstrels_discussed_love", 1),
  ],
   "What advantage is there in seeking a {wife/husband}?",
   "minstrel_spouse_benefits", []],

  [anyone, "minstrel_spouse_benefits", [
  (troop_get_type, ":is_female", "trp_player"),
  (eq, ":is_female", 0),
  ],
   "Ah! You are quite the romantic, I see! Well, aside from the obvious benefits of love, companionship and other, em, domestic matters, to marry among the nobility brings great assets. You may forge a strong alliance with the bride's family, and a wife may also assist you in manipulating the politics of the realm to your advantage.",
   "minstrel_wife_benefits_2", []],

  [anyone, "minstrel_wife_benefits_2", [
  ],
   "What's more, most of the great families of Calradia have at some point intermarried with royalty, which would boost your own claim to rule -- should you ever choose to assert it...",
   "minstrel_prequestions", []],

  [anyone, "minstrel_spouse_benefits", [
  (troop_get_type, ":is_female", "trp_player"),
  (eq, ":is_female", 1),
  ],
   "Ah! You are quite the romantic, I see! Well, aside from the obvious benefits of love, companionship and other, em, domestic matters, to marry among the nobility brings great assets. You may have access to the groom's castles and properties, and be able to work with him to advance both of your standings in the realm.",
   "minstrel_wife_benefits_2", []],



   [anyone, "minstrel_player_advice_meet", [
   ], "Every so often, a king or great lord of Calradia will hold a feast. In towns they will often be accompanied by tournaments, and in castles they will be accompanied by hunts. The feasts provide a chance for the lords to repair some of the rivalries that may undermine the strength of the realm. They also provide an opportunity for families to show off their eligible daughters, and ladies will often be allowed to mingle unsupervised with the guests.",
   "minstrel_player_advice_meet_2", []],

   [anyone, "minstrel_player_advice_meet_2", [
   ], "If you have the opportunity, you may attempt to pay the lady a compliment. This indicates to her that you are a potential suitor, and she will usually know if she wishes you to continue your suit. Incidentally, if you come to her fresh from having distinguished yourself in the tournament or in the hunt, then you may make a stronger first impression than otherwise.",
   "minstrel_prequestions", []],


  [anyone, "minstrel_player_advice_woo", [
   ], "To woo a lady takes a certain amount of time and patience, and several meetings spaced over a period of months. A lady who is interested in you will often find ways of letting you know if she wishes you to come visit her. Alternately, you may simply go and ask her father or brother for permission. If you do not have permission from her guardian, it may be possible to arrange an assignation through other means.",
   "minstrel_player_advice_woo_2", []],

  [anyone, "minstrel_player_advice_woo_2", [
   ], "Having arranged an assignment, you may then attempt to charm her and win her favor. Perhaps one of the most difficult aspects of this is finding a topic of conversation. Most Calradian noblewomen lead a cloistered life, at least until they are married, and thus will have little to say that will interest you. On other hand, she will soon tire of hearing of your own deeds in the outside world.",
   "minstrel_player_advice_woo_3", []],

  [anyone, "minstrel_player_advice_woo_3", [
   ], "One time-tested mode of courtship is simply to recite a popular poem, and discuss it. This way, you are both on an equal footing, and neither will have an advantage in knowledge or experience. Of course, different ladies will have different tastes in poetry.",
   "minstrel_player_advice_woo_4", []],

  [anyone, "minstrel_player_advice_woo_4", [
   ], "At some point, you will be able to discuss directly the issue of marriage. She will then let you know if you measure up to what she wants in a husband. Some ladies will coolly assess who is the most prestigious of her suitors, others will be guided by their passions. Some will look to your companions, to see whether you are the kind of husband who will treat her as an equal, while others will follow the lead of their fathers.",
   "minstrel_player_advice_woo_5", []],

  [anyone, "minstrel_player_advice_woo_5", [
   ], "At any rate, it is a challenging business -- and do not forget, you may find that your suit prospers with a lady, only to have it falter on a father's political ambitions. So you must ask yourself: are you willing to risk disappointment and heartbreak? Alternately, are you willing to throw away your standing in society, to make enemies of allies, in pursuit of a forbidden love? Because if you are, then perhaps some day we will write poems about you.",
   "minstrel_prequestions", []],


  [anyone|plyr, "minstrel_courtship_questions_2", [],
   "What is it that you poets and musicians do again?",
   "minstrel_job_description", []],

   [anyone, "minstrel_job_description", [],
   "I compose and write songs for the lords of the land, and their ladies. Sometimes I sing about war, sometimes about the virtues of kings, and sometimes, for the more sophisticated audiences, about the virtues of wine. For most audiences, however, I sing of love.", "minstrel_courtship_prequestions", []],

  [anyone|plyr, "minstrel_courtship_questions_2", [],
   "No, that is all.",
   "minstrel_pretalk", []],

  [anyone, "minstrel_prequestions", [
   ], "Do you have any other questions?",
   "minstrel_courtship_questions_2", []],

  [anyone, "minstrel_pretalk", [],
   "Is there anything else?",
   "minstrel_1", []],







##diplomacy start+
##Tavern Talk (with farmers)
##Alternate opening lines when the farmer should know who the player is.
  [anyone, "start", [(eq, "$talk_context", tc_tavern_talk),
                     (eq, "$g_talk_troop", "trp_farmer_from_bandit_village"),
                     (neg|check_quest_active, "qst_eliminate_bandits_infesting_village"),
                     (neg|check_quest_active, "qst_deal_with_bandits_at_lords_village"),
                     (assign, ":end_cond", villages_end),
                     (eq, "$sneaked_into_town", 0),#SB : disable if snuck in
                     (try_for_range, ":cur_village", villages_begin, ":end_cond"),
                       (party_slot_eq, ":cur_village", slot_village_bound_center, "$g_encountered_party"),
                       (party_slot_ge, ":cur_village", slot_village_infested_by_bandits, 1),
                       (neg|party_slot_eq, ":cur_village", slot_village_infested_by_bandits, "trp_peasant_woman"),#not insurrection
                       (str_store_party_name, s1, ":cur_village"),
                       (quest_set_slot, "qst_eliminate_bandits_infesting_village", slot_quest_target_center, ":cur_village"),
                       (quest_set_slot, "qst_eliminate_bandits_infesting_village", slot_quest_current_state, 0),
                       (party_get_slot, ":village_elder", ":cur_village", slot_town_elder),
                       (quest_set_slot, "qst_eliminate_bandits_infesting_village", slot_quest_giver_troop, ":village_elder"),
                       (quest_set_slot, "qst_eliminate_bandits_infesting_village", slot_quest_giver_center, ":cur_village"),
                       (assign, ":end_cond", 0),
                     (try_end),
                    #Player is a lord in this kingdom, or a notable lord is his own kingdom
                    (call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", "$g_encountered_party_faction"),
                    (this_or_next|gt, reg0, DPLMC_FACTION_STANDING_MEMBER),#i.e. not just a mercenary
                       (troop_slot_ge, "trp_player", slot_troop_renown, 600),

                     (assign, "$temp", ":cur_village"),#Save the village for later use in the conversation
                     (assign, "$temp_2", 1),#Player is famous

							(call_script, "script_dplmc_print_commoner_at_arg1_says_sir_madame_to_s0", "$g_encountered_party"),
							(val_sub, reg0, 2),
							(val_max, reg0, 0),#i.e. only non-zero if >= 3
							(str_clear, s0),
                     ],
   "{reg0?Your highness:My {lord/lady}}, we are in dire need of assistance.  Will you hear my plea?", "farmer_from_bandit_village_1", []],
##diplomacy end+
#Tavern Talk (with farmers)
  [anyone, "start", [(eq, "$talk_context", tc_tavern_talk),
                     (eq, "$g_talk_troop", "trp_farmer_from_bandit_village"),
                     (neg|check_quest_active, "qst_eliminate_bandits_infesting_village"),
                     (neg|check_quest_active, "qst_deal_with_bandits_at_lords_village"),
                     (assign, ":end_cond", villages_end),
                     (try_for_range, ":cur_village", villages_begin, ":end_cond"),
                       (party_slot_eq, ":cur_village", slot_village_bound_center, "$g_encountered_party"),
                       (party_slot_ge, ":cur_village", slot_village_infested_by_bandits, 1),
                       ##diplomacy begin
                       (neg|party_slot_eq, ":cur_village", slot_village_infested_by_bandits, "trp_peasant_woman"),
                       ##diplomacy_end
                       (str_store_party_name, s1, ":cur_village"),
                       (quest_set_slot, "qst_eliminate_bandits_infesting_village", slot_quest_target_center, ":cur_village"),
                       (quest_set_slot, "qst_eliminate_bandits_infesting_village", slot_quest_current_state, 0),
                       (party_get_slot, ":village_elder", ":cur_village", slot_town_elder),
                       (quest_set_slot, "qst_eliminate_bandits_infesting_village", slot_quest_giver_troop, ":village_elder"),
                       (quest_set_slot, "qst_eliminate_bandits_infesting_village", slot_quest_giver_center, ":cur_village"),
                       (assign, ":end_cond", 0),
                     (try_end),
                     ##diplomacy start+ Save the village for use later in the conversation
                     (assign, "$temp", ":cur_village"),
                     (assign, "$temp_2", 1),#player is not a lord of this faction or a well-known lord of another faction
                     ##diplomacy end+
                     ],
   "{My lord/Madam}, you look like a {man/lady} of the sword and someone who could help us.\
 Will you hear my plea?", "farmer_from_bandit_village_1", []],

  [anyone|plyr, "farmer_from_bandit_village_1", [
  ##diplomacy start+ either gender
  ],# "man" -> "{reg65?woman:man}"
   "What is the matter, my good {reg65?woman:man}?", "farmer_from_bandit_village_2", []],
   ##diplomacy end+

   [anyone|plyr, "farmer_from_bandit_village_1", [],
   "What are you burbling about peasant? Speak out.", "farmer_from_bandit_village_2", []],

##diplomacy start+
##Add this if the lord is the player, to skip the "why don't you ask your lord?" line.
  [anyone, "farmer_from_bandit_village_2", [
   (assign, ":lord_is_player", 0),
   (try_begin),
      (party_slot_eq, "$temp", slot_town_lord, "trp_player"),
      (store_faction_of_party, ":village_faction", "$temp"),
      (this_or_next|eq, ":village_faction", "$players_kingdom"),
         (eq, ":village_faction", "fac_player_supporters_faction"),
      (assign, ":lord_is_player", 1),
   (try_end),
   (neq, ":lord_is_player", 0),

  (call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),
  ],
   "A band of brigands have taken refuge in our village. They take everything we have, force us to serve them, and do us much evil.\
 If one of us so much as breathes a word of protest, they kill the poor soul on the spot right away.\
 Our lives have become unbearable. I risked my skin and ran away to find someone who can help us.\
 Please {s0}, you are a {man/lady} of valor and a fearsome warrior, with many friends and soldiers at your service.\
 If there is anyone who can help us, it's you.", "farmer_from_bandit_village_5", [(assign, "$temp", 0)]],
##diplomacy end+

  [anyone, "farmer_from_bandit_village_2", [],
   "A band of brigands have taken refuge in our village. They take everything we have, force us to serve them, and do us much evil.\
 If one of us so much as breathes a word of protest, they kill the poor soul on the spot right away.\
 Our lives have become unbearable. I risked my skin and ran away to find someone who can help us.", "farmer_from_bandit_village_3", []],

##diplomacy start+
## If the town has a lord that the player has met, use the correct gender.
#  [anyone|plyr, "farmer_from_bandit_village_3", []
#   "Why don't you go to the lord of your village? He should take care of the vermin.", "farmer_from_bandit_village_4", []],
  [anyone|plyr, "farmer_from_bandit_village_3", [
     (assign, reg0, 0),
	  (try_begin),
	     (gt, "$temp", 1),
		  (party_slot_ge, "$temp", slot_town_lord, 1),
		  (party_get_slot, ":town_lord", "$temp", slot_town_lord),
		  (troop_slot_ge, ":town_lord", slot_troop_met, 1),
		  (call_script, "script_dplmc_store_troop_is_female", ":town_lord"),
	  (try_end),
  ],
   "Why don't you go to the {reg0?mistress:lord} of your village? {reg0?She:He} should take care of the vermin.", "farmer_from_bandit_village_4", []],

##Different line if the village lord is in captivity
  [anyone, "farmer_from_bandit_village_4", [
  (gt, "$temp", 1),
  (party_slot_ge, "$temp", slot_town_lord, 1),
  (party_get_slot, ":town_lord", "$temp", slot_town_lord),
  (troop_slot_ge, ":town_lord", slot_troop_prisoner_of_party, 0),
  (call_script, "script_dplmc_print_commoner_at_arg1_says_sir_madame_to_s0", "$g_encountered_party"),
  (call_script, "script_dplmc_store_troop_is_female", ":town_lord"),
  (assign, reg1, "$temp_2"),
  ],
   "Our {reg0?lady:lord} is imprisoned, so we cannot go to {reg0?her:him} for protection.\
 Please {s0}, you {reg1?are:look like} a {man/lady} of valor, {reg1?with:and you have no doubt} many friends and soldiers at your service. \
 If there is anyone who can help us, it's you.", "farmer_from_bandit_village_5", [(assign, "$temp", 0)]],

##Different line if the village has no lord
  [anyone, "farmer_from_bandit_village_4", [
  (gt, "$temp", 1),
  (neg|party_slot_ge, "$temp", slot_town_lord, 1),
  (call_script, "script_dplmc_print_commoner_at_arg1_says_sir_madame_to_s0", "$g_encountered_party"),
  (assign, reg1, "$temp_2"),
  ],
   "We have no lord, so we cannot go to him for protection.\
 Please {s0}, you {reg1?are:look like} a {man/lady} of valor, {reg1?with:and you have no doubt} many friends and soldiers at your service. \
 If there is anyone who can help us, it's you.", "farmer_from_bandit_village_5", [(assign, "$temp", 0)]],

##Alter the default line to be different when the player is recognized
  [anyone, "farmer_from_bandit_village_4", [
  (call_script, "script_dplmc_print_commoner_at_arg1_says_sir_madame_to_s0", "$g_encountered_party"),
  (party_get_slot, ":town_lord", "$temp", slot_town_lord),
  (call_script, "script_dplmc_store_troop_is_female", ":town_lord"),
  (assign, reg1, "$temp_2"),
  ],
   "I did, {s0}, but our {reg0?lady:lord}'s {reg0?servants:men} did not let me see {reg0?her:him} and said {reg0?she:he} was occupied with more important matters and that we should deal with our own problem ourselves.\
 Please {s0}, you {reg1?are:look like} a {man/lady} of valor and a fearsome warrior, {reg1?with:and you have no doubt} many friends and soldiers at your service. \
 If there is anyone who can help us, it's you.", "farmer_from_bandit_village_5", [(assign, "$temp", 0)]],
##diplomacy end+

  [anyone|plyr, "farmer_from_bandit_village_5", [],
   "Very well, I'll help you. Where is this village?", "farmer_from_bandit_village_accepted", []],
  [anyone|plyr, "farmer_from_bandit_village_5", [],
   "I can't be bothered with this right now.", "farmer_from_bandit_village_denied", []],
  [anyone|plyr, "farmer_from_bandit_village_5", [(eq, "$temp", 0)],
   "Why would I fight these bandits? What's in it for me?", "farmer_from_bandit_village_barter", []],


  [anyone, "farmer_from_bandit_village_accepted", [##diplomacy start+
    (call_script, "script_dplmc_print_commoner_at_arg1_says_sir_madame_to_s0", "$g_encountered_party"),
  ],#Next line, replace {sir/madam} with {s0}
   #"God bless you, {sir/madam}. Our village is {s7}. It is not too far from here.", "close_window",
   "God bless you, {s0}. Our village is {s7}. It is not too far from here.", "close_window",
   ##diplomacy end+
   [(quest_get_slot, ":target_center", "qst_eliminate_bandits_infesting_village", slot_quest_target_center),
    (str_store_party_name_link,s7,":target_center"),
    (setup_quest_text, "qst_eliminate_bandits_infesting_village"),
    (str_store_string, s2, "@A villager from {s7} begged you to save their village from the bandits that took refuge there."),
    (party_get_slot, ":village_elder", ":target_center", slot_town_elder),
    # (quest_set_slot, "qst_eliminate_bandits_infesting_village", slot_quest_giver_troop, ":village_elder"),
    (call_script, "script_start_quest", "qst_eliminate_bandits_infesting_village", ":village_elder"), #SB : corrected giver troop
    ]],

  [anyone, "farmer_from_bandit_village_denied", [],"As you say {sir/madam}. Forgive me for bothering you.", "close_window", []],

  [anyone, "farmer_from_bandit_village_barter", [##diplomacy start+
  (call_script, "script_dplmc_print_commoner_at_arg1_says_sir_madame_to_s0", "$g_encountered_party"),
    ],#Next line, replace {sir/madam} with {s0}
   "We are but poor farmers {s0}, and the bandits have already got most of what we have on this world.\
 but we'll be glad to share with you whatever we have got.\
 And we'll always be in your gratitude if you help us.", "farmer_from_bandit_village_5", [(assign, "$temp", 1)]],
##diplomacy end+

  [anyone, "start", [(eq, "$talk_context", tc_tavern_talk),
                     (eq, "$g_talk_troop", "trp_farmer_from_bandit_village"),
                     (check_quest_active, "qst_eliminate_bandits_infesting_village"),
    ##diplomacy start+
    ##OLD:
    #                 ],
    #"Thank you for helping us {sir/madam}. Crush those bandits!", "close_window", []],
    ##NEW:
                     (call_script, "script_dplmc_print_commoner_at_arg1_says_sir_madame_to_s0", "$g_encountered_party"),
                      ],
    "Thank you for helping us {s0}. Crush those bandits!", "close_window", []],
    ##diplomacy end+


#Tavern Talk (with troops)

  #SB : blocking certain disguise sets from freely hiring mercenaries
  [anyone, "start", [
                     (eq, "$talk_context", tc_tavern_talk),
                     (neg|troop_is_hero, "$g_talk_troop"),
                     (party_slot_eq, "$current_town", slot_center_mercenary_troop_type, "$g_talk_troop"),
                     (party_slot_ge, "$current_town", slot_center_mercenary_troop_amount, 1),
                     
                     #disguise stuff
                     (eq, "$g_dplmc_player_disguise", 1), #skip dialog if disguise system disabled
                     (this_or_next|eq, "$sneaked_into_town", disguise_hunter),
                     (this_or_next|eq, "$sneaked_into_town", disguise_farmer),
                     (eq, "$sneaked_into_town", disguise_pilgrim),
                     (call_script, "script_get_disguise_string", "$sneaked_into_town", 0), #"farmer" etc to s0
                     ],
   "What are you looking at, {s0}? Unless you want to buy a round of drinks, get lost!", "close_window", []],
   #TODO : use wine/ale as prompt to actually hire

  [anyone, "start", [
                     (eq, "$talk_context", tc_tavern_talk),
                     (neg|troop_is_hero, "$g_talk_troop"),
                     (neg|is_between, "$g_talk_troop", startup_merchants_begin, startup_merchants_end),
                     (party_get_slot, ":mercenary_troop", "$g_encountered_party", slot_center_mercenary_troop_type),
                     (party_get_slot, ":mercenary_amount", "$g_encountered_party", slot_center_mercenary_troop_amount),
                     (gt, ":mercenary_amount", 0),
                     (store_sub, reg3, ":mercenary_amount", 1),
                     (store_sub, reg4, reg3, 1),
                     (call_script, "script_game_get_join_cost", ":mercenary_troop"),
                     (assign, ":join_cost", reg0),
                     (store_mul, reg5, ":mercenary_amount", reg0),
                     (party_get_free_companions_capacity, ":free_capacity", "p_main_party"),
                     (val_min, ":mercenary_amount", ":free_capacity"),
                     (store_troop_gold, ":cur_gold", "trp_player"),
                     (try_begin),
                       (gt, ":join_cost", 0),
                       (val_div, ":cur_gold", ":join_cost"),
                       (val_min, ":mercenary_amount", ":cur_gold"),
                     (try_end),
                     (assign, "$temp", ":mercenary_amount"),
                     ],
   "Do you have a need for mercenaries, {sir/madam}?\
 {reg3?Me and {reg4?{reg3} of my mates:one of my mates} are:I am} looking for a master.\
 We'll join you for {reg5} denars.", "mercenary_tavern_talk", []],

  [anyone, "start", [
  (eq, "$talk_context", tc_tavern_talk),
  ],
   "Any orders, {sir/madam}?", "mercenary_after_recruited", []],

  [anyone|plyr, "mercenary_after_recruited", [],
   "Make your preparations. We'll be moving at dawn.", "mercenary_after_recruited_1", []],
  # #SB : add direct to garrison
  # [anyone|plyr, "mercenary_after_recruited", [(eq, "$players_kingdom", "$g_encountered_party_faction"),],
   # "Report to the garrison commander at once. We need more soldiers on the walls.", "mercenary_after_recruited_1", [
     # (party_remove_members, "p_main_party", "$g_talk_troop", "$temp"),
     # (party_add_members, "p_main_party", "$g_talk_troop", "$temp"),
   # ]],
  [anyone|plyr, "mercenary_after_recruited", [],
   "Take your time. We'll be staying in this town for a while.", "mercenary_after_recruited_2", []],

   #SB : add stupid fading animation
  [anyone, "mercenary_after_recruited_1", [], "Of course {sir/madam}. We'll be leaving shortly.", "close_window", [
    (assign, "$g_belligerent_drunk_leaving", "$g_talk_agent"),
    (entry_point_get_position, pos1, 0),
    (agent_set_scripted_destination, "$g_talk_agent", pos1),
  ]],
  [anyone, "mercenary_after_recruited_2", [], "Yes {sir/madam}. We'll be ready when you tell us to leave.", "close_window", [
    (assign, "$g_belligerent_drunk_leaving", 0),
    (agent_get_position, pos1, "$g_talk_agent"),
    (agent_set_scripted_destination, "$g_talk_agent", pos1),]],

  [anyone|plyr, "mercenary_tavern_talk", [(party_get_slot, ":mercenary_amount", "$g_encountered_party", slot_center_mercenary_troop_amount),
                                          (eq, ":mercenary_amount", "$temp"),
                                          (party_get_slot, ":mercenary_troop", "$g_encountered_party", slot_center_mercenary_troop_type),
                                          (call_script, "script_game_get_join_cost", ":mercenary_troop"),
                                          (store_mul, reg5, "$temp", reg0),
                                          ],
   "All right. I will hire all of you. Here is {reg5} denars.", "mercenary_tavern_talk_hire", []],

  [anyone|plyr, "mercenary_tavern_talk", [(party_get_slot, ":mercenary_amount", "$g_encountered_party", slot_center_mercenary_troop_amount),
                                          (lt, "$temp", ":mercenary_amount"),
                                          (gt, "$temp", 0),
                                          (assign, reg6, "$temp"),
                                          (party_get_slot, ":mercenary_troop", "$g_encountered_party", slot_center_mercenary_troop_type),
                                          (call_script, "script_game_get_join_cost", ":mercenary_troop"),
                                          (store_mul, reg5, "$temp", reg0),
                                          ],
   "All right. But I can only hire {reg6} of you. Here is {reg5} denars.", "mercenary_tavern_talk_hire", []],


  [anyone, "mercenary_tavern_talk_hire", [
    #SB : merge string formats
    (call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),
    (store_sub, reg1, "$temp", 1), #amount hired
    (store_random_in_range, ":rand", "str_mercenary_intro_1",  "str_bandit_intro_1"),
    (str_store_string, s17, ":rand"),
                                          # (try_begin),
                                            # (eq, ":rand", 0),
                                            # (gt, "$temp", 1),
											# ##diplomacy start+ lads -> {reg65?companions:lads}; {sir/madame} -> {s0}
											# (call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),
                                            # (str_store_string, s17,
                                             # "@You chose well, {s0}. My {reg65?companions:lads} know how to keep their word and earn their pay."),
											 # ##diplomacy end+
                                          # (else_try),
                                            # (eq, ":rand", 1),
											# ##diplomacy start+ {sir/madame} -> {s0}
											# (call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),
                                            # (str_store_string, s17,
                                             # "@Well done, {s0}. Keep the money and wine coming our way, and there's no foe in Calradia you need fear."),
											 # ##diplomacy end+
                                          # (else_try),
                                            # (eq, ":rand", 2),
											# ##diplomacy start+ {sir/madame} -> {s0}
											# (call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),
                                            # (str_store_string, s17,
                                             # "@We are at your service, {s0}. Point us in the direction of those who need hurting, and we'll do the rest."),
											 # ##diplomacy end+
                                          # (else_try),
                                            # (str_store_string, s17,
                                             # "str_you_will_not_be_disappointed_sirmadam_you_will_not_find_better_warriors_in_all_calradia"),
                                          # (try_end),
    ],
   "{s17}", "close_window", [
                                          (party_get_slot, ":mercenary_troop", "$g_encountered_party", slot_center_mercenary_troop_type),
                                          (call_script, "script_game_get_join_cost", ":mercenary_troop"),
                                          (store_mul, ":total_cost", "$temp", reg0),
                                          (troop_remove_gold, "trp_player", ":total_cost"),
                                          (party_add_members, "p_main_party", ":mercenary_troop", "$temp"),
                                          (party_set_slot, "$g_encountered_party", slot_center_mercenary_troop_amount, 0),
                                          ]],

  [anyone|plyr, "mercenary_tavern_talk", [(eq, "$temp", 0),
                                          (party_get_free_companions_capacity, ":free_capacity", "p_main_party"),
                                          (ge, ":free_capacity", 1)],
##diplomacy start+ Gender-check to avoid accidental absurdities if there are female mercenaries
   "That sounds good. But I can't afford to hire any more {reg65?soldiers:men} right now.", "tavern_mercenary_cant_lead", []],
##diplomacy end+


  [anyone|plyr, "mercenary_tavern_talk", [(eq, "$temp", 0),
                                          (party_get_free_companions_capacity, ":free_capacity", "p_main_party"),
                                          (eq, ":free_capacity", 0)],
##diplomacy start+ Gender-check to avoid accidental absurdities if there are female mercenaries
   "That sounds good. But I can't lead any more {reg65?soldiers:men} right now.", "tavern_mercenary_cant_lead", [
      (store_sub, reg3, "$temp", 1), #SB : store quantity
   ]],
##diplomacy end+
  [anyone, "tavern_mercenary_cant_lead", [], "That's a pity. Well, {reg3?we will:I will} be lingering around here for a while, if you need to hire anyone.", "close_window", []],

  [anyone|plyr, "mercenary_tavern_talk", [],
   "Sorry. I don't need any other men right now.", "close_window", []],

#Trainers
  [anyone,"start", [(is_between, "$g_talk_troop", training_ground_trainers_begin, training_ground_trainers_end),
                    (eq, "$g_talk_troop_met", 0)],
   "Good day to you {lad/lass}. You look like another adventurer who has come to try {his/her} chance in these lands.\
 Well, trust my word, you won't be able to survive long here unless you know how to fight yourself out of a tight spot.", "trainer_intro_1",[]],

  [anyone|plyr, "trainer_intro_1", [],
   "Thank you for your advice. This place looks like a training field. Maybe I can learn about fighting here?", "trainer_intro_2", []],

  [anyone,"trainer_intro_2", [],
   "Indeed you can. I am a veteran soldier... fought a good deal in the wars in my time. But these days, I train young novices in this area.\
 I can find you some opponents to practice with if you like. Or if you have any questions about the theory of combat, feel free to ask.", "trainer_intro_3",[]],

  [anyone|plyr, "trainer_intro_3", [],
   "Yes, I do have a few questions.", "trainer_intro_4a", []],
  [anyone|plyr, "trainer_intro_3", [],
   "Actually, I can move on to practice.", "trainer_intro_4b", []],

  [anyone, "trainer_intro_4a", [],
   "Well, ask anything you like.", "trainer_talk_combat", []],
  [anyone, "trainer_intro_4b", [],
   "Good. It's good to find someone eager for practice. Let's see what you will do.", "trainer_practice_1", []],

 # [anyone,"start", [(is_between, "$g_talk_troop", training_ground_trainers_begin, training_ground_trainers_end),
                   # (neq,"$waiting_for_training_fight_result", 0),
                   # (neq,"$training_fight_won", 0)],
 # "That was a good fight. ", "trainer_practice_1",
  # [(val_sub, "$num_opponents_to_beat_in_a_row", 1),
   # (assign,"$waiting_for_training_fight_result",0),
   # ]],
 [anyone,"start", [(is_between, "$g_talk_troop", training_ground_trainers_begin, training_ground_trainers_end),
                   (neg|troop_slot_eq, "$g_talk_troop", slot_troop_trainer_waiting_for_result, 0),
                   (troop_slot_eq, "$g_talk_troop", slot_troop_trainer_training_fight_won, 1)],
 "That was a good fight. ", "trainer_practice_1",
  [(troop_get_slot, ":beat", "$g_talk_troop", slot_troop_trainer_num_opponents_to_beat),
   (val_sub, ":beat", 1),
   (troop_set_slot, "$g_talk_troop", slot_troop_trainer_num_opponents_to_beat, ":beat"),
   (troop_set_slot, "$g_talk_troop", slot_troop_trainer_waiting_for_result, 0),
   ]],
  [anyone,"start", [(is_between, "$g_talk_troop", training_ground_trainers_begin, training_ground_trainers_end),
                    (neg|troop_slot_eq, "$g_talk_troop", slot_troop_trainer_waiting_for_result, 0)],
    "Ha! Looks like you've developed a bit of a limp there. Don't worry, even losses have their value, provided you learn from them. Shake the stars out of your eyes and get back in there. There's no other way to win.", "trainer_practice_1",
   [(troop_set_slot, "$g_talk_troop", slot_troop_trainer_num_opponents_to_beat, 3),(troop_set_slot, "$g_talk_troop", slot_troop_trainer_waiting_for_result,0)]],

  # [anyone,"start", [(is_between, "$g_talk_troop", training_ground_trainers_begin, training_ground_trainers_end),
                    # (neq, "$waiting_for_training_fight_result", 0)],
 # "Ha! Looks like you've developed a bit of a limp there. Don't worry, even losses have their value, provided you learn from them. Shake the stars out of your eyes and get back in there. There's no other way to win.", "trainer_practice_1",
   # [(assign,"$num_opponents_to_beat_in_a_row",3),(assign,"$waiting_for_training_fight_result",0)]],

    [anyone,"start", [(is_between, "$g_talk_troop", training_ground_trainers_begin, training_ground_trainers_end)],
   "Good day. Ready for some training today?", "trainer_talk",[]],

    [anyone,"trainer_pretalk", [],
   "Ah, are you ready for some training?", "trainer_talk",[]],

    [anyone|plyr,"trainer_talk", [],
   "I am ready for some practice.", "trainer_practice_1",[]],

    [anyone|plyr,"trainer_talk", [],
   "First, tell me something about combat...", "trainer_combat_begin",[]],

##    [anyone|plyr,"trainer_talk", [],
##   "I have some novice soldiers with me. Can you train them?", "trainer_train_novices_1",[]],

    [anyone|plyr,"trainer_talk", [],
   "I need to leave now. Farewell.", "close_window",[]],


    [anyone,"trainer_combat_begin", [],
   "What do you want to know?", "trainer_talk_combat",[]],
    [anyone,"trainer_combat_pretalk", [],
   "What else do you want to know?", "trainer_talk_combat",[]],

    [anyone|plyr,"trainer_talk_combat", [], "Tell me about defending myself.", "trainer_explain_defense",[]],
    [anyone|plyr,"trainer_talk_combat", [], "Tell me about attacking with weapons.", "trainer_explain_attack",[]],
    [anyone|plyr,"trainer_talk_combat", [], "Tell me about fighting on horseback.", "trainer_explain_horseback",[]],
#    [anyone|plyr,"trainer_talk_combat", [], "Tell me about using ranged weapons.", "trainer_explain_ranged",[]],
#    [anyone|plyr,"trainer_talk_combat", [], "Tell me about weapon types.", "trainer_explain_weapon_types",[]],
    [anyone|plyr,"trainer_talk_combat", [], "I guess I know all the theory I need. Let's talk about something else.", "trainer_pretalk",[]],

   [anyone,"trainer_explain_defense", [], "Good question. The first thing you should know as a fighter is how to defend yourself.\
 Keeping yourself out of harm's way is the first rule of combat, and it is much more important than giving harm to others.\
 Everybody can swing a sword around and hope to cut some flesh, but only those fighters that are experts at defense live to tell of it.",
	"trainer_explain_defense_2",[]],
  [anyone,"trainer_explain_defense_2", [], "Now. Defending yourself is easiest if you are equipped with a shield.\
 Just block with your shield. [Hold down the right mouse button to defend yourself with the shield.] In this state, you will be able to deflect all attacks that come from your front. However, you will still be open to strikes from your sides or your back.", "trainer_explain_defense_3",[]],
  [anyone|plyr,"trainer_explain_defense_3", [], "What if I don't have a shield?", "trainer_explain_defense_4",[]],
  [anyone,"trainer_explain_defense_4", [], "Then you will have to use your weapon to block your opponent.\
 This is a bit more difficult than defending with a shield.\
 Defending with a weapon, you can block against only ONE attack direction.\
 That is, you block against either overhead swings, side swings or thrusts.\
 Therefore you must watch your opponent carefully and start to block AFTER he starts his attack.\
 In this way you will be able to block against the direction of his current attack.\
 If you start to block BEFORE he makes his move, he may just attack in another direction than the one you are blocking against and score a hit.", "trainer_combat_pretalk",[]],
  [anyone,"trainer_explain_attack", [], "Good question. Attacking is the best defence, they say.\
 A tactic many fighters find useful is taking an offensive stance and readying your weapon for attack, waiting for the right moment for swinging it.\
 [You can ready your weapon for attack by pressing and holding down the left mouse button.]", "trainer_explain_attack_2",[]],
  [anyone|plyr,"trainer_explain_attack_2", [], "That sounds useful.", "trainer_explain_attack_3",[]],
  [anyone,"trainer_explain_attack_3", [], "It is a good tactic, but remember that, your opponent may see that and take a defensive stance against the direction you are swinging your weapon.\
 If that happens, you must break your attack and quickly attack from another direction\
 [You may cancel your current attack by quickly tapping the right mouse button].", "trainer_explain_attack_4",[]],
  [anyone|plyr,"trainer_explain_attack_4", [], "If my opponent is defending against the direction I am attacking from, I will break and use another direction.", "trainer_explain_attack_5",[]],
  [anyone,"trainer_explain_attack_5", [], "Yes, selecting the direction you swing your weapon is a crucial skill.\
 There are four main directions you may use: right swing, left swing, overhead swing and thrust. You must use each one wisely.\
 [to control your swing direction with default controls, move your mouse in the direction you want to swing from as you press the left mouse button].", "trainer_combat_pretalk",[]],
  [anyone,"trainer_explain_horseback", [], "Very good question. A horse may be a warrior's most powerful weapon in combat.\
 It gives you speed, height, power and initiative. A lot of deadly weapons will become even deadlier on horseback.\
 However you must pay particular attention to horse-mounted enemies couching their lances, as they may take down any opponent in one hit.\
 [To use the couched lance yourself, wield a lance or similar weapon, and speed up your horse without pressing attack or defense buttons.\
 after you reach a speed, you'll lower your lance. Then try to target your enemies by maneuvering your horse.]", "trainer_combat_pretalk",[]],

  # [anyone,"trainer_practice_1", [(eq,"$training_system_explained", 0)],
 # "I train novices in four stages, each tougher than the one before.\
 # To finish a stage and advance to the next one, you have to win three fights in a row.", "trainer_practice_1",
   # [
     # (assign, "$num_opponents_to_beat_in_a_row", 3),
     # (assign, "$novicemaster_opponent_troop", "trp_novice_fighter"),
     # (assign, "$training_system_explained", 1),
     # ]],
  # [anyone,"trainer_practice_1",
   # [(ge,"$novice_training_difficulty",4)],
 # "You have passed all stages of training. But if you want you can still practice. Are you ready?", "novicemaster_are_you_ready",
   # [(assign,"$num_opponents_to_beat_in_a_row",99999)]],
  # [anyone,"trainer_practice_1",
   # [(eq,"$num_opponents_to_beat_in_a_row",0),(eq,"$novice_training_difficulty",0)],
 # "Way to go {lad/lass}. With this victory, you have advanced to the next training level. From now on your opponents will be regular fighters, not the riff-raff off the street, so be on your toes.",
   # "trainer_practice_1",
   # [[assign,"$num_opponents_to_beat_in_a_row",3],
    # [val_add,"$novice_training_difficulty",1],
    # [add_xp_to_troop,100],
    # [assign,"$novicemaster_opponent_troop","trp_regular_fighter"]]],
  # [anyone,"trainer_practice_1",
   # [[eq,"$num_opponents_to_beat_in_a_row",0],[eq,"$novice_training_difficulty",1]],
 # "Way to go {lad/lass}. Welcome to the third training level. From now on your opponents will be veteran fighters; soldiers and arena regulars and the like. These guys know some dirty tricks, so keep your defense up.",
   # "trainer_practice_1",
   # [[assign,"$num_opponents_to_beat_in_a_row",3],
    # [val_add,"$novice_training_difficulty",1],
    # [add_xp_to_troop,100],
    # [assign,"$novicemaster_opponent_troop","trp_veteran_fighter"]]],
  # [anyone,"trainer_practice_1",
   # [[eq,"$num_opponents_to_beat_in_a_row",0],[eq,"$novice_training_difficulty",2]],
 # "You've got the heart of a champion, {lad/lass}, and the sword arm to match. From now on your opponents will be champion fighters.\
 # These are the cream of the crop, the finest warriors I have trained. If you can best three of them in a row, you will join their ranks.",
   # "trainer_practice_1",
   # [[assign,"$num_opponents_to_beat_in_a_row",3],
    # [val_add,"$novice_training_difficulty",1],
    # [add_xp_to_troop,100],
    # [assign,"$novicemaster_opponent_troop","trp_champion_fighter"]]],
  # [anyone,"trainer_practice_1",
   # [[eq,"$num_opponents_to_beat_in_a_row",0],[eq,"$novice_training_difficulty",3]],
 # "It does my heart good to see such a promising talent. You have passed all tiers of training. You can now tell everyone that you have been trained by the master of the training field.",
   # "novicemaster_finish_training",
   # [[assign,"$num_opponents_to_beat_in_a_row",3],
    # [val_add,"$novice_training_difficulty",1],
    # [add_xp_to_troop,300]]],
  # [anyone|plyr,"novicemaster_finish_training", [], "Thank you master.", "novicemaster_finish_training_2",[]],
  # [anyone,"novicemaster_finish_training_2", [], "I wish you good luck in the tournaments. And, don't forget,\
  # if you want to practice your swordwork anytime, just come and say the word.", "close_window",[]],

  [anyone,"trainer_practice_1", [(troop_slot_eq, "$g_talk_troop", slot_troop_trainer_training_system_explained, 0)],
 "I train novices in four stages, each tougher than the one before.\
 To finish a stage and advance to the next one, you have to win three fights in a row.", "trainer_practice_1",
   [(troop_set_slot, "$g_talk_troop", slot_troop_trainer_training_system_explained, 1)]],

  [anyone,"trainer_practice_1",
   [(troop_slot_ge,"$g_talk_troop",slot_troop_trainer_training_difficulty,4)],
 "You have passed all stages of training. But if you want you can still practice. Are you ready?", "novicemaster_are_you_ready",
   [(store_random_in_range, ":opponent", fighters_begin, mercenary_troops_end),
    (try_begin),
      (eq, ":opponent", "trp_cattle"),
      (assign, ":opponent", "trp_fugitive"),
    (try_end),
    (troop_set_slot, "$g_talk_troop", slot_troop_trainer_opponent_troop, ":opponent"),
    # (troop_set_slot, "$g_talk_troop", slot_troop_trainer_num_opponents_to_beat, 99999),
   ]],

  [anyone,"trainer_practice_1",
   [(troop_slot_eq, "$g_talk_troop", slot_troop_trainer_num_opponents_to_beat, 0),
   (troop_get_slot, ":diff", "$g_talk_troop", slot_troop_trainer_training_difficulty),
   (neq, ":diff", 3),
   (store_add, ":diffstr", ":diff", "str_tier_reg"),
   (str_store_string, s2, ":diffstr"),
   ], "{s2}", "trainer_practice_1",
   [#(troop_set_slot, "$g_talk_troop", slot_num_opponents_to_beat_in_a_row, 3),
    (troop_get_slot, ":diff", "$g_talk_troop", slot_troop_trainer_training_difficulty),
    (val_add, ":diff", 1),
    (troop_set_slot,"$g_talk_troop", slot_troop_trainer_training_difficulty, ":diff"),
    (store_add, ":opponent", fighters_begin, ":diff"),
    (troop_set_slot, "$g_talk_troop", slot_troop_trainer_num_opponents_to_beat, 3),
    (troop_set_slot, "$g_talk_troop", slot_troop_trainer_opponent_troop, ":opponent"),
    #reward
    (options_get_campaign_ai, ":reduce"),
    (val_mul, ":diff", 50),
    (store_mul, ":xp", ":diff", ":reduce"),
    (add_xp_to_troop,":xp", "$g_player_troop"),
    ]],


  [anyone,"trainer_practice_1",
   [(troop_slot_eq, "$g_talk_troop", slot_troop_trainer_num_opponents_to_beat, 0),
    (troop_slot_eq,"$g_talk_troop", slot_troop_trainer_training_difficulty, 3)],
   "It does my heart good to see such a promising talent. You have passed all tiers of training. You can now tell everyone that you have been trained by the master of the training field. If you have any recruits nearby that need a lesson, don't hesitate to see me.", "novicemaster_finish_training",
   [(troop_set_slot,"$g_talk_troop", slot_troop_trainer_training_difficulty, 4),
    (troop_set_slot,"$g_talk_troop", slot_troop_trainer_num_opponents_to_beat, 90000),
    (add_xp_to_troop, arena_grand_prize, "$g_player_troop"),
    (try_begin),
      (troop_slot_eq, "$g_talk_troop", slot_troop_trainer_training_fight_won, 1),
      (finish_mission),
    (try_end),
    
    (try_begin), #add flag
      (troop_get_slot, ":flag", "trp_player", slot_troop_banner_scene_prop),
      (gt, ":flag", banner_scene_props_begin),
      (val_sub, ":flag", banner_scene_props_begin),
      (val_add, ":flag", banner_map_icons_begin),
      (party_set_banner_icon, "$g_encountered_party", ":flag"),
    (try_end),

    ]
    ],

  [anyone|plyr,"novicemaster_finish_training", [], "Thank you master.", "novicemaster_finish_training_2",[]],
  [anyone,"novicemaster_finish_training_2", [
  (troop_get_inventory_slot, ":weapon", "$g_talk_troop", ek_item_0),
  (gt, ":weapon", 0),
  (troop_set_inventory_slot, "$g_talk_troop", ek_item_0, -1),
  (str_store_item_name, s2, ":weapon"),
  (troop_add_item, "$g_player_troop", ":weapon", imod_champion),
  ], "I wish you good luck in the future. And, just so that you're never out of practice, you can take this {s2} with you.\
  Also, if you want to practice your swordwork anytime, just come and say the word. Your companions are all welcome.", "close_window",[]],
  [anyone,"novicemaster_finish_training_2", [], "I wish you good luck in the tournaments. And, don't forget, if you want to practice your swordwork anytime, just come and say the word.", "close_window",[]],
  [anyone,"trainer_practice_1",
   [
      (troop_get_slot, reg8, "$g_talk_troop", slot_troop_trainer_num_opponents_to_beat),
      (troop_get_slot, ":troop", "$g_talk_troop", slot_troop_trainer_opponent_troop),
      (str_store_troop_name, s9, ":troop"),
     ],
 "Your next opponent will be a {s9}. You need to win {reg8} more\
 fights in a row to advance to the next stage. Are you ready?", "novicemaster_are_you_ready",
   []],
  [anyone|plyr,"novicemaster_are_you_ready", [
    #SB : check wounded status
    (neg|troop_is_wounded, "trp_player"),
  ], "Yes I am.", "novicemaster_ready_to_fight",[]],
  [anyone,"novicemaster_ready_to_fight", [], "Here you go then. Good luck.", "close_window",
   [
     (troop_set_slot, "$g_talk_troop", slot_troop_trainer_training_fight_won, 0),
     (troop_set_slot, "$g_talk_troop", slot_troop_trainer_waiting_for_result, 1),
     (troop_get_slot, ":opponent", "$g_talk_troop", slot_troop_trainer_opponent_troop),
     # (assign, "$training_fight_won", 0),
     # (assign, "$waiting_for_training_fight_result", 1),
     (modify_visitors_at_site, "$g_training_ground_melee_training_scene"),
     (reset_visitors),
     # (assign, reg0, 0),
     # (assign, reg1, 1),
     # (assign, reg2, 2),
     # (assign, reg3, 3),
     # (shuffle_range, 0, 4),
     (store_random_in_range, ":entry_no", 0, 4),
     (set_visitor, ":entry_no", "trp_player"),
     
     #SB : make sure opponent has randomized equipment
     # (set_visitor, reg1, "$novicemaster_opponent_troop"),
     (store_random_in_range, ":random_no", 0, 4),
     (try_begin),
       (eq, ":random_no", ":entry_no"),
       (store_sub, ":random_no", 3, ":entry_no"), #opponent
     (try_end),
     (set_visitor, ":random_no", ":opponent"),
     
     (set_visitor, 4, "$g_talk_troop"), #trainer
     (set_jump_mission, "mt_training_ground_trainer_training"),
     (jump_to_scene, "$g_training_ground_melee_training_scene"),
     ]],

  [anyone|plyr,"novicemaster_are_you_ready", [], "Just a minute. I am not ready yet.", "novicemaster_not_ready",[]],
  [anyone,"novicemaster_not_ready", [], "Hey, You will never make it if you don't practice.", "close_window",[
    (try_begin), #this jumps out of the scene
      (troop_slot_eq, "$g_talk_troop", slot_troop_trainer_training_fight_won, 1),
      (finish_mission),
    (try_end),
  ]],


#Crooks

##  [anyone ,"start", [(is_between,"$g_talk_troop",crooks_begin,crooks_end),(eq,"$g_talk_troop_met",0),(eq,"$sneaked_into_town",0),(store_random_in_range, reg2, 2)],
##   "You {reg2?looking for:want} something?:", "crook_intro_1",[]],
##  [anyone|plyr,"crook_intro_1",[],"I am trying to learn my way around the town.", "crook_intro_2",[]],
##
##  [anyone,"crook_intro_2",[(eq,"$crook_talk_order",0),(val_add,"$crook_talk_order",1),(str_store_troop_name,s1,"$g_talk_troop")],
##"Then you came to the right guy. My name is {s1}, and I know everyone and everything that goes around in this town.\
## Anyone you want to meet, I can arrange it. Anything you need to know, I can find out. For the the right price, of course. Do you have gold?", "crook_intro_2a",[]],
##  [anyone|plyr,"crook_intro_2a",[],"I have gold. Plenty of it.", "crook_intro_2a_1a",[]],
##  [anyone|plyr,"crook_intro_2a",[],"Not really.", "crook_intro_2a_1b",[]],
##  [anyone,"crook_intro_2a_1a",[],"Good. That means you and I will be great friends.", "crook_talk",[]],
##  [anyone,"crook_intro_2a_1b",[],"Then you should look into earning some. Listen to me now, for I'll give you some free advice.\
## The easiest way to make money is to fight in the tournaments and bet on yourself. If you are good, you'll quickly get yourself enough money to get going.", "crook_talk",[]],
##
##  [anyone,"crook_intro_2",[(eq,"$crook_talk_order",1),(val_add,"$crook_talk_order",1),(str_store_troop_name,s1,"$g_talk_troop")],
##"Then you need to go no further. I am {s1}, and I can provide you anything... For the the right price.", "crook_intro_2b",[]],
##  [anyone|plyr,"crook_intro_2b",[],"Are you a dealer?", "crook_intro_2b_1",[]],
##  [anyone,"crook_intro_2b_1",[],"A dealer? Yes. I deal in knowledge... connections.. lies... secrets... Those are what I deal in. Interested?", "crook_talk",[]],
##
##  [anyone,"crook_intro_2",[(eq,"$crook_talk_order",2),(val_add,"$crook_talk_order",1),(str_store_troop_name,s1,"$g_talk_troop")],
##"Then this is your lucky day. Because you are talking to {s1}, and I know every piss-stained brick of this wicked town.\
##I know every person, every dirty little secret. And all that knowledge can be yours. For a price.", "crook_talk",[]],
##
##  [anyone,"crook_intro_2",[(val_add,"$crook_talk_order",1),(str_store_troop_name,s1,"$g_talk_troop")],
## "Then {s1} is at your service {sir/madam}. If you want to know what's really going on in this town, or arrange a meeting in secret, then come to me. I can help you.", "crook_talk",[]],
##
##  [anyone ,"start", [(is_between,"$g_talk_troop",crooks_begin,crooks_end),(eq,"$g_talk_troop_met",0),(eq,"$sneaked_into_town",1),(eq,"$crook_sneak_intro_order",0),(val_add,"$crook_sneak_intro_order",1)],
##   "Good day. {playername} right?", "crook_intro_sneak_1",[]],
##  [anyone|plyr,"crook_intro_sneak_1", [], "You must be mistaken. I'm just a poor pilgrim. I don't answer to that name.", "crook_intro_sneak_2",[]],
##  [anyone,"crook_intro_sneak_2", [(str_store_troop_name,s1,"$g_talk_troop")], "Of course you do. And if the town guards knew you were here, they'd be upon you this minute.\
## But don't worry. Noone knows it is {playername} under that hood. Except me of course. But I am {s1}. It is my business to know things.", "crook_intro_sneak_3",[]],
##  [anyone|plyr,"crook_intro_sneak_3", [], "You won't tip off the guards about my presence?", "crook_intro_sneak_4",[]],
##  [anyone,"crook_intro_sneak_4", [], "What? Of course not! Well, maybe I would, but the new captain of the guards is a dung-eating cheat.\
## I led him to this fugitive, and the man was worth his weight in silver as prize money. But I swear, I didn't see a penny of it.\
## The bastard took it all to himself. So your secret is safe with me.", "crook_intro_sneak_5",[]],
##  [anyone,"crook_intro_sneak_5", [], "Besides, I heard you have a talent for surviving any kind of ordeal.\
## I wouldn't want you to survive this one as well and then come after me with a sword. Ha-hah.", "crook_talk",[]],
##
##
##  [anyone ,"start", [(is_between,"$g_talk_troop",crooks_begin,crooks_end),(eq,"$g_talk_troop_met",0),(eq,"$sneaked_into_town",1),(str_store_troop_name,s1,"$g_talk_troop")],
##   "{s1} is at your service {sir/madam}. If you want to know what's really going on in this town, or arrange a meeting in secret, then come to me. I can help you.", "crook_talk",[]],
##
##  [anyone ,"start", [(is_between,"$g_talk_troop",crooks_begin,crooks_end),(store_character_level, ":cur_level", "trp_player"),(lt,":cur_level",8)],
##   "{You again?/Delighted to see you again my pretty.}", "crook_talk",[]],
##  [anyone ,"start", [(is_between,"$g_talk_troop",crooks_begin,crooks_end)],
##   "I see that you need my services {sir/madam}...", "crook_talk",[]],
##  [anyone ,"crook_pretalk", [],
##   "Is that all?", "crook_talk",[]],



##  [anyone|plyr,"crook_talk", [], "I'm looking for a person...", "crook_search_person",[]],
##  [anyone|plyr,"crook_talk", [], "I want you to arrange me a meeting with someone...", "crook_request_meeting",[]],
##  [anyone|plyr,"crook_talk", [], "[Leave]", "close_window",[]],



#  [anyone,"crook_enter_dungeon", [],
#   "Alright but this will cost you 50 denars.", "crook_enter_dungeon_2", []],

#  [anyone|plyr, "crook_enter_dungeon_2", [(store_troop_gold, ":cur_gold", "trp_player"),
#                                            (ge, ":cur_gold", 50)],
#   "TODO: Here it is. 50 denars.", "crook_enter_dungeon_3_1",[(troop_remove_gold, "trp_player", 50)]],

#  [anyone|plyr, "crook_enter_dungeon_2", [(store_troop_gold, ":cur_gold", "trp_player"),
#                                            (ge, ":cur_gold", 50)],
#   "Never mind then.", "crook_pretalk",[]],

#  [anyone|plyr, "crook_enter_dungeon_2", [(store_troop_gold, ":cur_gold", "trp_player"),
#                                            (lt, ":cur_gold", 50)],
#   "TODO: I don't have that much money.", "crook_enter_dungeon_3_2",[]],

#  [anyone,"crook_enter_dungeon_3_1", [],
#   "TODO: There you go.", "close_window", [(call_script, "script_enter_dungeon", "$current_town", "mt_visit_town_castle")]],

#  [anyone,"crook_enter_dungeon_3_2", [],
#   "TODO: Come back later then.", "crook_pretalk",[]],


##  [anyone, "crook_request_meeting", [],
##   "Who do you want to meet with?", "crook_request_meeting_2",[]],
##  [anyone|plyr|repeat_for_troops,"crook_request_meeting_2", [(store_encountered_party, ":center_no"),
##                                                             (store_repeat_object, ":troop_no"),
##                                                             (is_between, ":troop_no", heroes_begin, heroes_end),
##                                                             (troop_get_slot, ":cur_center", ":troop_no", slot_troop_cur_center),
##                                                             (call_script, "script_get_troop_attached_party", ":troop_no"),
##                                                             (assign, ":cur_center_2", reg0),
##                                                             (this_or_next|eq, ":cur_center", ":center_no"),
##                                                             (eq, ":cur_center_2", ":center_no"),
##                                                             (neg|party_slot_eq, ":center_no", slot_town_lord, ":troop_no"),#Neglect the ruler of the center
##                                                             (str_store_troop_name, s1, ":troop_no")],
##   "{s1}", "crook_request_meeting_3", [(store_repeat_object, "$selected_troop")]],
##
##  [anyone|plyr,"crook_request_meeting_2", [], "Never mind.", "crook_pretalk", []],
##
##  [anyone,"crook_request_meeting_3", [],
##   "Alright but this will cost you 50 denars.", "crook_request_meeting_4", []],
##
##  [anyone|plyr, "crook_request_meeting_4", [(store_troop_gold, ":cur_gold", "trp_player"),
##                                            (ge, ":cur_gold", 50)],
##   "TODO: Here it is. 50 denars.", "crook_search_person_5_1",[(troop_remove_gold, "trp_player", 50)]],
##
##  [anyone|plyr, "crook_request_meeting_4", [(store_troop_gold, ":cur_gold", "trp_player"),
##                                            (ge, ":cur_gold", 50)],
##   "Never mind then.", "crook_pretalk",[]],
##
##  [anyone|plyr, "crook_request_meeting_4", [(store_troop_gold, ":cur_gold", "trp_player"),
##                                            (lt, ":cur_gold", 50)],
##   "TODO: I don't have that much money.", "crook_search_person_5_2",[]],
##
##  [anyone, "crook_search_person_5_1", [],
##   "TODO: Ok.", "close_window",[(party_get_slot, ":town_alley", "$g_encountered_party", slot_town_alley),
##                                (modify_visitors_at_site,":town_alley"),(reset_visitors),
##                                (set_visitor,0,"trp_player"),
##                                (set_visitor,17,"$selected_troop"),
##                                (set_jump_mission,"mt_conversation_encounter"),
##                                (jump_to_scene,":town_alley"),
##                                (assign, "$talk_context", tc_back_alley),
##                                (change_screen_map_conversation, "$selected_troop")]],
##
##  [anyone, "crook_search_person_5_2", [],
##   "TODO: Come back later then.", "crook_pretalk",[]],
##
##  [anyone, "crook_search_person", [],
##   "TODO: Who are you searching for?", "crook_search_person_2",[]],
##  [anyone|plyr|repeat_for_factions,"crook_search_person_2", [(store_repeat_object, ":faction_no"),
##                                                             (is_between, ":faction_no", kingdoms_begin, kingdoms_end),
##                                                             (str_store_faction_name, s1, ":faction_no")],
##   "TODO: I'm looking for a {s1}.", "crook_search_person_3", [(store_repeat_object, "$selected_faction")]],
##
##  [anyone|plyr,"crook_search_person_2", [], "Never mind.", "crook_pretalk", []],
##
##
##  [anyone, "crook_search_person_3", [],
##   "TODO: Who?", "crook_search_person_4",[]],
##
##  [anyone|plyr|repeat_for_troops,"crook_search_person_4", [(store_repeat_object, ":troop_no"),
##                                                           (is_between, ":troop_no", heroes_begin, heroes_end),
##                                                           (store_troop_faction, ":faction_no", ":troop_no"),
##                                                           (eq, ":faction_no", "$selected_faction"),
##                                                           (str_store_troop_name, s1, ":troop_no")],
##   "{s1}", "crook_search_person_5", [(store_repeat_object, "$selected_troop")]],
##
##  [anyone|plyr,"crook_search_person_4", [], "Never mind.", "crook_pretalk", []],
##
##  [anyone, "crook_search_person_5", [(call_script, "script_get_information_about_troops_position", "$selected_troop", 0),
##                                     (eq, reg0, 1),
##                                     (str_store_troop_name, s1, "$selected_troop")],
##   "TODO: I know where {s1} is at the moment, but hearing it will cost you 50 denars.", "crook_search_person_6",[]],
##
##  [anyone, "crook_search_person_5", [],
##   "TODO: Sorry I don't know anything.", "crook_pretalk",[]],
##
##  [anyone|plyr, "crook_search_person_6", [(store_troop_gold, ":cur_gold", "trp_player"),
##                                          (ge, ":cur_gold", 50)],
##   "TODO: Here it is. 50 denars.", "crook_search_person_7_1",[(troop_remove_gold, "trp_player", 50)]],
##
##  [anyone|plyr, "crook_search_person_6", [(store_troop_gold, ":cur_gold", "trp_player"),
##                                          (ge, ":cur_gold", 50)],
##   "Never mind then.", "crook_pretalk",[]],
##
##  [anyone|plyr, "crook_search_person_6", [(store_troop_gold, ":cur_gold", "trp_player"),
##                                          (lt, ":cur_gold", 50)],
##   "TODO: I don't have that much money.", "crook_search_person_7_2",[]],
##
##  [anyone, "crook_search_person_7_1", [(call_script, "script_get_information_about_troops_position", "$selected_troop", 0)],
##   "{s1}", "crook_pretalk",[]],
##
##  [anyone, "crook_search_person_7_2", [],
##   "TODO: Come back later then.", "crook_pretalk",[]],
##

 #SB : range const for craftsman
  [anyone|auto_proceed,"start", [
  (is_between,"$g_talk_troop",craftsman_begin, craftsman_end),
  (party_get_slot, ":days_until_complete", "$g_encountered_party", slot_center_player_enterprise_days_until_complete),
  (ge, ":days_until_complete", 2),
  (assign, reg4, ":days_until_complete"),
  ],
   "{!}.", "start_craftsman_soon",[]],

  [anyone,"start_craftsman_soon", [
  ],
   "Good day, my {lord/lady}. We hope to begin production in about {reg4} days", "close_window",[]],

  [anyone,"start", [
  (is_between,"$g_talk_troop",craftsman_begin, craftsman_end),
  ],
   "Good day, my {lord/lady}. We are honored that you have chosen to visit us. What do you require?", "master_craftsman_talk",[]],

  [anyone,"master_craftsman_pretalk", [],
   "Very good, my {lord/lady}. Do you require anything else?", "master_craftsman_talk",[]],

  [anyone|plyr,"master_craftsman_talk", [],
   "Let's go over the accounts.", "master_craftsman_accounts",[]],

  [anyone|plyr,"master_craftsman_talk", [],
   "Let's check the inventories.", "master_craftsman_pretalk",[
   (change_screen_loot, "$g_talk_troop"),
   ]],

  [anyone|plyr,"master_craftsman_talk", [
  (party_slot_eq, "$g_encountered_party", slot_center_player_enterprise_production_order, 1),
  ],
   "I'd like you to sell goods as they are produced.", "master_craftsman_pretalk",[
  (party_set_slot, "$g_encountered_party", slot_center_player_enterprise_production_order, 0),
   ]],

  [anyone|plyr,"master_craftsman_talk", [
  (party_slot_eq, "$g_encountered_party", slot_center_player_enterprise_production_order, 0),
  ],
   "I'd like you to keep all goods in the warehouse until I arrive.", "master_craftsman_pretalk",[
  (party_set_slot, "$g_encountered_party", slot_center_player_enterprise_production_order, 1),
   ]],

  [anyone,"master_craftsman_accounts", [
  ], "We currently produce {s3} worth {reg1} denars each week, while the quantity of {s4} needed to manufacture it costs {reg2}, and labor and upkeep are {reg3}.{s9} This means that we theoretically make a {s12} of {reg0} denars a week, assuming that we have no raw materials in the inventories, and that we sell directly to the market.", "master_craftsman_pretalk",
  [
    (party_get_slot, ":item_produced", "$g_encountered_party", slot_center_player_enterprise),
    (call_script, "script_process_player_enterprise", ":item_produced", "$g_encountered_party"),

    (try_begin),
	  (ge, reg0, 0),
	  (str_store_string, s12, "str_profit"),
    (else_try),
	  (str_store_string, s12, "str_loss"),
    (try_end),

    (str_store_item_name, s3, ":item_produced"),
    (item_get_slot, ":primary_raw_material", ":item_produced", slot_item_primary_raw_material),
    (str_store_item_name, s4, ":primary_raw_material"),

    (item_get_slot, ":secondary_raw_material", ":item_produced", slot_item_secondary_raw_material),
    (str_clear, s9),
    (try_begin),
	  (gt, ":secondary_raw_material", 0),
	  (str_store_item_name, s11, ":secondary_raw_material"),
	  (str_store_string, s9, "str_describe_secondary_input"),
    (try_end),
  ]],

  #SB : disguise_merchant
  [anyone|plyr,"master_craftsman_talk", [
    (eq, "$g_dplmc_player_disguise", 1), #enabled
    (troop_get_slot, ":has_disguise", "trp_player", slot_troop_player_disguise_sets),
    (val_and, ":has_disguise", disguise_merchant),
    (eq, ":has_disguise", 0),
  ], "I will be requiring a set of merchant's clothing so as to conduct business.", "master_craftsman_disguise_asked",[]],

  [anyone,"master_craftsman_disguise_asked", [
  (str_store_party_name, s5, "$g_encountered_party"),
  ], "As you wish, my {lord/lady}. I will have them delivered to you soon after the tailors have your measure.", "master_craftsman_pretalk",
  [(call_script, "script_acquire_disguise", disguise_merchant)]],

  
  [anyone|plyr,"master_craftsman_talk", [
  ], "Could you explain my options related to production?", "master_craftsman_production_options",[]],

  [anyone,"master_craftsman_production_options", [
  (str_store_party_name, s5, "$g_encountered_party"),
  ], "Certainly, my {lord/lady}. Most of the time, the most profitable thing for you to do would be to let us buy raw materials and sell the finished goods directly to the market. Because of our longstanding relations with the local merchants, we can usually get a very good price.", "master_craftsman_production_options_2",[]],

  [anyone,"master_craftsman_production_options_2", [
  (str_store_party_name, s5, "$g_encountered_party"),
  ], "However, if you find that you can acquire raw materials cheaper outside {s5}, you may place them in the inventories, and we will use them instead of buying from the market. Likewise, if you feel that you can get a better price for the finished goods elsewhere, then you may ask us to deposit what we produce in our warehouses for you to take.", "master_craftsman_pretalk",[]],

  [anyone|plyr,"master_craftsman_talk", [
  ], "It will no longer be possible for me to continue operating this enterprise.", "master_craftsman_auction_price",[]],

  [anyone,"master_craftsman_auction_price", [
  (party_get_slot, ":item_produced", "$g_encountered_party", slot_center_player_enterprise),
  (item_get_slot, ":base_price",":item_produced", slot_item_base_price),
  (item_get_slot, ":number_runs", ":item_produced", slot_item_output_per_run),
  (store_mul, "$liquidation_price", ":base_price", ":number_runs"),
  (val_mul, "$liquidation_price", 4),

  (troop_get_inventory_capacity, ":total_capacity", "$g_talk_troop"),
  (try_for_range, ":capacity_iterator", 0, ":total_capacity"),
		(troop_get_inventory_slot, ":item_in_slot", "$g_talk_troop", ":capacity_iterator"),
		(gt, ":item_in_slot", 0),
		(item_get_slot, ":price_for_inventory_item", ":item_in_slot", slot_item_base_price),
#		(troop_inventory_slot_get_item_amount, ":item_ammo", "$g_talk_troop", ":capacity_iterator"),
#		(troop_inventory_slot_get_item_max_amount, ":item_max_ammo", "$g_talk_troop", ":capacity_iterator"),
#		(try_begin),
#			(lt, ":item_ammo", ":item_max_ammo"),
#			(val_mul, ":price_for_inventory_item", ":item_ammo"),
#			(val_div, ":price_for_inventory_item", ":item_max_ammo"),
#		(try_end),

        (store_sub, ":item_slot_no", ":item_in_slot", trade_goods_begin),
        (val_add, ":item_slot_no", slot_town_trade_good_prices_begin),
        (party_get_slot, ":index", "$g_encountered_party", ":item_slot_no"),
		(val_mul, ":price_for_inventory_item", ":index"),
		(val_div, ":price_for_inventory_item", 1200),
		#modify by site
		#divide by 1200 not 1000
		(val_add, "$liquidation_price", ":price_for_inventory_item"),
  (try_end),

  (assign, reg4, "$liquidation_price"),

  ], "A pity, my {lord/lady}. If we sell the land and the equipment, and liquidate the inventories, I estimate that we can get {reg4} denars.", "master_craftsman_auction_decide",[]],

  [anyone|plyr,"master_craftsman_auction_decide", [
  ], "That sounds reasonable. Please proceed with the sale.", "master_craftsman_liquidation",[
  (troop_add_gold, "trp_player", "$liquidation_price"),
  (troop_clear_inventory, "$g_talk_troop"),
  (party_set_slot, "$g_encountered_party", slot_center_player_enterprise, 0),
  (party_set_slot, "$g_encountered_party", slot_center_player_enterprise_production_order, 0),

  ]],

  [anyone|plyr,"master_craftsman_auction_decide", [
  ], "Hmm. Let's hold off on that.", "master_craftsman_pretalk",[]],

  [anyone,"master_craftsman_liquidation", [
  ], "As you wish. It was an honor to have been in your employ.", "close_window",[
    (finish_mission),
  ]],

  [anyone|plyr,"master_craftsman_talk", [
  (eq, 1, 0),
  ], "{!}As you wish, {sir/my lady}. It was an honor to work in your employ.", "close_window",[]],

  [anyone|plyr,"master_craftsman_talk", [],
   "That is all for now.", "close_window",[]],





#Mayor talk (town elder)

  [anyone ,"start", [(is_between,"$g_talk_troop",mayors_begin,mayors_end),(eq,"$g_talk_troop_met",0),
                     (this_or_next|eq, "$players_kingdom", "$g_encountered_party_faction"),
                     (             eq, "$g_encountered_party_faction", "fac_player_supporters_faction"),
					 ##diplomacy start+
					 #Change "my lord" to "my lord/my lady" or "your highnes" as appropriate.
					 (call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),#Write {sir/madame} or replacement to {s0}
					 ],
   "Good day, {s0}.", "mayor_begin",[]],#Changed "my lord" to {s0}
   ##diplomacy end+
  [anyone ,"start", [(is_between,"$g_talk_troop",mayors_begin,mayors_end),(eq,"$g_talk_troop_met",0),
                     (str_store_party_name, s9, "$current_town")],
   "Hello stranger, you seem to be new to {s9}. I am the guild master of the town.", "mayor_talk",[]],

  [anyone ,"start", [(is_between,"$g_talk_troop",mayors_begin,mayors_end)],
   "Good day, {playername}.", "mayor_begin",
   [
     #Delete last offered quest if peace is formed.
     (try_begin),
       (eq, "$merchant_offered_quest", "qst_persuade_lords_to_make_peace"),
       (party_get_slot, ":target_faction", "qst_persuade_lords_to_make_peace", slot_quest_target_faction),
       (party_get_slot, ":object_faction", "qst_persuade_lords_to_make_peace", slot_quest_object_faction),
       (store_relation, ":reln", ":target_faction", ":object_faction"),
       (ge, ":reln", 0),
       (assign, "$merchant_quest_last_offerer", -1),
       (assign, "$merchant_offered_quest", -1),
     (try_end),
     ]],


  [anyone,"mayor_begin", [(check_quest_active, "qst_persuade_lords_to_make_peace"),
                          (quest_slot_eq, "qst_persuade_lords_to_make_peace", slot_quest_giver_troop, "$g_talk_troop"),
                          (check_quest_succeeded, "qst_persuade_lords_to_make_peace"),
                          (quest_get_slot, ":quest_target_troop", "qst_persuade_lords_to_make_peace", slot_quest_target_troop),
                          (quest_get_slot, ":quest_object_troop", "qst_persuade_lords_to_make_peace", slot_quest_object_troop),
                          (val_mul, ":quest_target_troop", -1),
                          (val_mul, ":quest_object_troop", -1),
                          (quest_get_slot, ":quest_target_faction", "qst_persuade_lords_to_make_peace", slot_quest_target_faction),
                          (quest_get_slot, ":quest_object_faction", "qst_persuade_lords_to_make_peace", slot_quest_object_faction),
                          (str_store_troop_name, s12, ":quest_target_troop"),
                          (str_store_troop_name, s13, ":quest_object_troop"),
                          (str_store_faction_name, s14, ":quest_target_faction"),
                          (str_store_faction_name, s15, ":quest_object_faction"),
                          (str_store_party_name, s19, "$current_town"),
                         ],
   "{playername}, it was an incredible feat to get {s14} and {s15} make peace, and you made it happen.\
 Your involvement has not only saved our town from disaster, but it has also saved thousands of lives, and put an end to all the grief this bitter war has caused.\
 As the townspeople of {s19}, know that we'll be good on our word, and we are ready to pay the {reg12} denars we promised.", "lord_persuade_lords_to_make_peace_completed",
   [(quest_get_slot, ":quest_target_faction", "qst_persuade_lords_to_make_peace", slot_quest_target_faction),
    (quest_get_slot, ":quest_object_faction", "qst_persuade_lords_to_make_peace", slot_quest_object_faction),
    #Forcing 2 factions to make peace within 72 hours.
    (assign, "$g_force_peace_faction_1", ":quest_target_faction"),
    (assign, "$g_force_peace_faction_2", ":quest_object_faction"),
    (quest_get_slot, ":quest_reward", "qst_persuade_lords_to_make_peace", slot_quest_gold_reward),
    (assign, reg12, ":quest_reward"),
    #TODO: Change these values
    (add_xp_as_reward, 4000),
    ]],


  [anyone|plyr,"lord_persuade_lords_to_make_peace_completed", [],
   "Thank you. Let me have the money.", "lord_persuade_lords_to_make_peace_pay",[]],
  [anyone|plyr,"lord_persuade_lords_to_make_peace_completed", [],
   "No need for a payment. I only did what was right.", "lord_persuade_lords_to_make_peace_no_pay",[]],

  [anyone ,"lord_persuade_lords_to_make_peace_pay", [],
   "Oh, yes, of course. We had already got the money for you.\
 Here, please accept these {reg12} denars together with our most sincere thanks.\
 Me and the people of our town will not forget your help.", "close_window",
   [(quest_get_slot, ":quest_reward", "qst_persuade_lords_to_make_peace", slot_quest_gold_reward),
    (call_script, "script_troop_add_gold", "trp_player", ":quest_reward"),
    (call_script, "script_change_player_relation_with_center", "$current_town", 5),
    (call_script, "script_end_quest", "qst_persuade_lords_to_make_peace"),
    (quest_get_slot, ":quest_reward", "qst_persuade_lords_to_make_peace", slot_quest_gold_reward),
    (assign, reg12, ":quest_reward")
    ]],

    #SB : spelling of impossible
  [anyone ,"lord_persuade_lords_to_make_peace_no_pay", [],
   "You are indeed an extraordenary person, {sir/madame}, and it is an honour for me to have known you.\
 You not only did what was impossible and put an end to this terrible war, but you won't even accept a reward for it.\
 Very well, I will not insist on the matter, but please know that you will have our eternal respect and gratitude.", "close_window",
   [
    (call_script, "script_change_player_honor", 3),
    (call_script, "script_change_player_relation_with_center", "$current_town", 8),
    (call_script, "script_end_quest", "qst_persuade_lords_to_make_peace"),
    ]],

  [anyone,"mayor_begin", [(check_quest_active, "qst_deal_with_night_bandits"),
                          (quest_slot_eq, "qst_deal_with_night_bandits", slot_quest_giver_troop, "$g_talk_troop"),
                          (check_quest_succeeded, "qst_deal_with_night_bandits"),
                         ],
   "Very nice work, {playername}, you made short work of those lawless curs.\
 Thank you kindly for all your help, and please accept this bounty of 150 denars.", "lord_deal_with_night_bandits_completed",
   [
     (add_xp_as_reward,200),
     (call_script, "script_troop_add_gold", "trp_player", 150),
     (call_script, "script_change_player_relation_with_center", "$current_town", 1),
     (call_script, "script_end_quest", "qst_deal_with_night_bandits"),
    ]],


  [anyone|plyr,"lord_deal_with_night_bandits_completed", [],
   "It was my pleasure, {s65}.", "close_window",[]],

# Ryan BEGIN
  [anyone,"mayor_begin", [(check_quest_active, "qst_deal_with_looters"),
                          (quest_slot_eq, "qst_deal_with_looters", slot_quest_giver_troop, "$g_talk_troop"),
                         ],
   "Ah, {playername}. Have you any progress to report?", "mayor_looters_quest_response",
   [
    ]],

  [anyone|plyr,"mayor_looters_quest_response",
   [
     (store_num_parties_destroyed_by_player, ":num_looters_destroyed", "pt_looters"),
     (party_template_get_slot,":previous_looters_destroyed","pt_looters",slot_party_template_num_killed),
     (val_sub,":num_looters_destroyed",":previous_looters_destroyed"),
     (quest_get_slot,":looters_paid_for","qst_deal_with_looters",slot_quest_current_state),
     (lt,":looters_paid_for",":num_looters_destroyed"),
     ],
   "I've killed some looters.", "mayor_looters_quest_destroyed",[]],
  [anyone|plyr,"mayor_looters_quest_response", [(eq,1,0)
  ],
   "I've brought you some goods.", "mayor_looters_quest_goods",[]],
  [anyone|plyr,"mayor_looters_quest_response", [
  ],
   "Not yet, sir. Farewell.", "close_window",[]],

  [anyone,"mayor_looters_quest_destroyed", [],
   "Aye, my scouts saw the whole thing. That should make anyone else think twice before turning outlaw!\
 The bounty is 40 denars for every band, so that makes {reg1} in total. Here is your money, as promised.",
   "mayor_looters_quest_destroyed_2",[
      (store_num_parties_destroyed_by_player, ":num_looters_destroyed", "pt_looters"),
      (party_template_get_slot,":previous_looters_destroyed","pt_looters",slot_party_template_num_killed),
      (val_sub,":num_looters_destroyed",":previous_looters_destroyed"),
      (quest_get_slot,":looters_paid_for","qst_deal_with_looters",slot_quest_current_state),
      (store_sub,":looter_bounty",":num_looters_destroyed",":looters_paid_for"),
      (val_mul,":looter_bounty",40),
      (assign,reg1,":looter_bounty"),
      (call_script, "script_troop_add_gold", "trp_player", ":looter_bounty"),
      (assign,":looters_paid_for",":num_looters_destroyed"),
      (quest_set_slot,"qst_deal_with_looters",slot_quest_current_state,":looters_paid_for"),
      ]],
  [anyone,"mayor_looters_quest_destroyed_2", [
      (quest_get_slot,":total_looters","qst_deal_with_looters",slot_quest_target_amount),
      (quest_slot_ge,"qst_deal_with_looters",slot_quest_current_state,":total_looters"), # looters paid for >= total looters
      (quest_get_slot,":xp_reward","qst_deal_with_looters",slot_quest_xp_reward),
      (quest_get_slot,":gold_reward","qst_deal_with_looters",slot_quest_gold_reward),
      (add_xp_as_reward, ":xp_reward"),
      (call_script, "script_troop_add_gold", "trp_player", ":gold_reward"),
      (call_script, "script_change_troop_renown", "trp_player", 1),
      (call_script, "script_change_player_relation_with_center", "$current_town", 5),
      (call_script, "script_end_quest", "qst_deal_with_looters"),
      (try_for_parties, ":cur_party_no"),
        (party_get_template_id, ":cur_party_template", ":cur_party_no"),
        (eq, ":cur_party_template", "pt_looters"),
        (party_set_flags, ":cur_party_no", pf_quest_party, 0),
      (try_end),
  ],
   "And that's not the only good news! Thanks to you, the looters have ceased to be a threat. We've not had a single attack reported for some time now.\
   If there are any of them left, they've either run off or gone deep into hiding. That's good for business,\
   and what's good for business is good for the town!\
   I think that concludes our arrangement, {playername}. Please accept this silver as a token of my gratitude. Thank you, and farewell.",
   "close_window",[
      ]],
  [anyone,"mayor_looters_quest_destroyed_2", [],
   "Anything else you need?",
   "mayor_looters_quest_response",[
      ]],

  [anyone,"mayor_looters_quest_goods", [
      (quest_get_slot,reg1,"qst_deal_with_looters",slot_quest_target_item),
  ],
   "Hah, I knew I could count on you! Just tell me which item to take from your baggage, and I'll send some men to collect it.\
 I still need {reg1} denars' worth of goods.",
   "mayor_looters_quest_goods_response",[
      ]],
  [anyone|plyr|repeat_for_100,"mayor_looters_quest_goods_response", [
      (store_repeat_object,":goods"),
      (val_add,":goods",trade_goods_begin),
      (is_between,":goods",trade_goods_begin,trade_goods_end),
      (player_has_item,":goods"),
      (str_store_item_name,s5,":goods"),
  ],
   "{s5}.", "mayor_looters_quest_goods_2",[
      (store_repeat_object,":goods"),
      (val_add,":goods",trade_goods_begin),
      (troop_remove_items,"trp_player",":goods",1),
      (assign,":value",reg0),
      (call_script, "script_troop_add_gold", "trp_player", ":value"),
      (quest_get_slot,":gold_num","qst_deal_with_looters",slot_quest_target_item),
      (val_sub,":gold_num",":value"),
      (quest_set_slot,"qst_deal_with_looters",slot_quest_target_item,":gold_num"),
      (str_store_item_name,s6,":goods"),
   ]],
  [anyone|plyr,"mayor_looters_quest_goods_response", [
  ],
   "Nothing at the moment, sir.", "mayor_looters_quest_goods_3",[]],

  [anyone,"mayor_looters_quest_goods_3", [
  ],
   "Anything else you need?",
   "mayor_looters_quest_response",[
      ]],

  [anyone,"mayor_looters_quest_goods_2", [
      (quest_slot_ge,"qst_deal_with_looters",slot_quest_target_item,1),
      (quest_get_slot,reg1,"qst_deal_with_looters",slot_quest_target_item),
  ],
   "Excellent, here is the money for your {s6}. Do you have any more goods to give me? I still need {reg1} denars' worth of goods.",
   "mayor_looters_quest_goods_response",[
      ]],
  [anyone,"mayor_looters_quest_goods_2", [
      (neg|quest_slot_ge,"qst_deal_with_looters",slot_quest_target_item,1),
      (quest_get_slot,":xp_reward","qst_deal_with_looters",slot_quest_xp_reward),
      (quest_get_slot,":gold_reward","qst_deal_with_looters",slot_quest_gold_reward),
      (add_xp_as_reward, ":xp_reward"),
      (call_script, "script_troop_add_gold", "trp_player", ":gold_reward"),
#      (call_script, "script_change_troop_renown", "trp_player", 1),
      (call_script, "script_change_player_relation_with_center", "$current_town", 3),
      (call_script, "script_end_quest", "qst_deal_with_looters"),
      (try_for_parties, ":cur_party_no"),
        (party_get_template_id, ":cur_party_template", ":cur_party_no"),
        (eq, ":cur_party_template", "pt_looters"),
        (party_set_flags, ":cur_party_no", pf_quest_party, 0),
      (try_end),
  ],
   "Well done, {playername}, that's the last of the goods I need. Here is the money for your {s6}, and a small bonus for helping me out.\
 I'm afraid I won't be paying for any more goods, nor bounties on looters, but you're welcome to keep hunting the bastards if any remain.\
 Thank you for your help, I won't forget it.",
   "close_window",[
      ]],
# Ryan END



  [anyone,"mayor_begin", [(check_quest_active, "qst_move_cattle_herd"),
                          (quest_slot_eq, "qst_move_cattle_herd", slot_quest_giver_troop, "$g_talk_troop"),
                          (check_quest_succeeded, "qst_move_cattle_herd"),
                          ],
   "Good to see you again {playername}. I have heard that you have delivered the cattle successfully.\
 I will tell the merchants how reliable you are.\
 And here is your pay, {reg8} denars.", "close_window",
   [(quest_get_slot, ":quest_gold_reward", "qst_move_cattle_herd", slot_quest_gold_reward),
    (call_script, "script_troop_add_gold", "trp_player", ":quest_gold_reward"),
    (store_div, ":xp_reward", ":quest_gold_reward", 3),
    (add_xp_as_reward, ":xp_reward"),
    (call_script, "script_change_troop_renown", "trp_player", 1),
    (call_script, "script_change_player_relation_with_center", "$current_town", 3),
    (call_script, "script_end_quest", "qst_move_cattle_herd"),
    (assign, reg8, ":quest_gold_reward"),
    ]],

  [anyone,"mayor_begin", [(check_quest_active, "qst_move_cattle_herd"),
                          (quest_slot_eq, "qst_move_cattle_herd", slot_quest_giver_troop, "$g_talk_troop"),
                          (check_quest_failed, "qst_move_cattle_herd"),
                          ],
   "I heard that you have lost the cattle herd on your way to {s9}.\
 I had a very difficult time explaining your failure to the owner of that herd, {sir/madam}.\
 Do you have anything to say?", "move_cattle_herd_failed",
   []],

  [anyone|plyr ,"move_cattle_herd_failed", [],
   "I am sorry. But I was attacked on the way.", "move_cattle_herd_failed_2",[]],
  [anyone|plyr ,"move_cattle_herd_failed", [],
   "I am sorry. The stupid animals wandered off during the night.", "move_cattle_herd_failed_2",[]],

  [anyone,"move_cattle_herd_failed_2", [],
   "Well, it was your responsibility to deliver that herd safely, no matter what.\
 You should know that the owner of the herd demanded to be compensated for his loss, and I had to pay him 1000 denars.\
 So you now owe me that money.", "merchant_ask_for_debts",
   [(val_add, "$debt_to_merchants_guild", 1000), #SB : val_add
    (call_script, "script_end_quest", "qst_move_cattle_herd"),]],

  [anyone,"mayor_begin", [(check_quest_active, "qst_kidnapped_girl"),
                          (quest_slot_eq, "qst_kidnapped_girl", slot_quest_current_state, 4),
                          (quest_slot_eq, "qst_kidnapped_girl", slot_quest_giver_troop, "$g_talk_troop"),
                          ],
   "{playername} -- I am in your debt for bringing back my friend's daughter.\
  Please take these {reg8} denars that I promised you.\
  My friend wished he could give more but paying that ransom brought him to his knees.", "close_window",
   [(quest_get_slot, ":quest_gold_reward", "qst_kidnapped_girl", slot_quest_gold_reward),
    (call_script, "script_troop_add_gold", "trp_player", ":quest_gold_reward"),
    (assign, reg8, ":quest_gold_reward"),
    (assign, ":xp_reward", ":quest_gold_reward"),
    (val_mul, ":xp_reward", 2),
    (val_add, ":xp_reward", 100),
    (add_xp_as_reward, ":xp_reward"),
    (call_script, "script_change_troop_renown", "trp_player", 3),
    (call_script, "script_change_player_relation_with_center", "$current_town", 2),
    (call_script, "script_end_quest", "qst_kidnapped_girl"),
    ]],

  [anyone,"mayor_begin", [(check_quest_active, "qst_track_down_bandits"),
                          (check_quest_succeeded, "qst_track_down_bandits"),
                          (quest_slot_eq, "qst_track_down_bandits", slot_quest_giver_troop, "$g_talk_troop"),
                          ],
   "Well -- it sounds like you were able to track down the bandits, and show them what happens to those who would disrupt the flow of commerce.\
 Here is your reward: {reg5} denars.\
 It is well earned, and we are most grateful.",
   "mayor_friendly_pretalk", [(quest_get_slot, ":quest_gold_reward", "qst_track_down_bandits", slot_quest_gold_reward),
                              (call_script, "script_troop_add_gold", "trp_player", ":quest_gold_reward"),
                              (assign, ":xp_reward", ":quest_gold_reward"),
                              (val_mul, ":xp_reward", 2),
                              (add_xp_as_reward, ":xp_reward"),
                              (call_script, "script_change_player_relation_with_center", "$current_town", 2),
                              (call_script, "script_change_troop_renown", "trp_player", 3),
                              (call_script, "script_end_quest", "qst_track_down_bandits"),
                              (assign, reg5, ":quest_gold_reward"),
                              ]],

  [anyone,"mayor_begin", [(check_quest_active, "qst_troublesome_bandits"),
                          (check_quest_succeeded, "qst_troublesome_bandits"),
                          (quest_slot_eq, "qst_troublesome_bandits", slot_quest_giver_troop, "$g_talk_troop"),
                          ],
   "I have heard about your deeds. You have given those bandits the punishment they deserved.\
 You are really as good as they say.\
 Here is your reward: {reg5} denars.\
 I would like to give more but those bandits almost brought me to bankruptcy.",
   "mayor_friendly_pretalk", [(quest_get_slot, ":quest_gold_reward", "qst_troublesome_bandits", slot_quest_gold_reward),
                              (call_script, "script_troop_add_gold", "trp_player", ":quest_gold_reward"),
                              (assign, ":xp_reward", ":quest_gold_reward"),
                              (val_mul, ":xp_reward", 2),
                              (add_xp_as_reward, ":xp_reward"),
                              (call_script, "script_change_player_relation_with_center", "$current_town", 2),
                              (call_script, "script_change_troop_renown", "trp_player", 3),
                              (call_script, "script_end_quest", "qst_troublesome_bandits"),
                              (assign, reg5, ":quest_gold_reward"),
                              ]],

  #destroy lair quest end dialogs taken from here

  [anyone,"mayor_begin", [(ge, "$debt_to_merchants_guild", 50)],
   "According to my accounts, you owe the merchants guild {reg1} denars.\
 I'd better collect that now.", "merchant_ask_for_debts",[(assign,reg(1),"$debt_to_merchants_guild")]],
  [anyone|plyr,"merchant_ask_for_debts", [[store_troop_gold,reg(5),"trp_player"],[ge,reg(5),"$debt_to_merchants_guild"]],
   "Alright. I'll pay my debt to you.", "merchant_debts_paid",[[troop_remove_gold, "trp_player","$debt_to_merchants_guild"],
                                                                [assign,"$debt_to_merchants_guild",0]]],
  [anyone, "merchant_debts_paid", [], "Excellent. I'll let my fellow merchants know that you are clear of any debts.", "mayor_pretalk",[]],

  [anyone|plyr, "merchant_ask_for_debts", [], "I'm afraid I can't pay that sum now.", "merchant_debts_not_paid",[]],
  [anyone, "merchant_debts_not_paid", [(assign,reg(1),"$debt_to_merchants_guild")], "In that case, I am afraid, I can't deal with you. Guild rules...\
 Come back when you can pay the {reg1} denars.\
 And know that we'll be charging an interest to your debt.\
 So the sooner you pay it, the better.", "close_window",[]],


  [anyone,"mayor_begin", [], "What can I do for you?", "mayor_talk", []],
  [anyone,"mayor_friendly_pretalk", [], "Now... What else may I do for you?", "mayor_talk",[]],
  [anyone,"mayor_pretalk", [], "Yes?", "mayor_talk",[]],

  [anyone|plyr,"mayor_talk", [], "Can you tell me about what you do?", "mayor_info_begin",[
  #SB : store town name
  (str_store_party_name, s9, "$current_town"),
  ]],

  [anyone|plyr,"mayor_talk", [(store_partner_quest, ":partner_quest"),
                              (lt, ":partner_quest", 0),
                              (neq, "$merchant_quest_last_offerer", "$g_talk_troop")],
   "Do you happen to have a job for me?", "merchant_quest_requested",[
     (assign,"$merchant_quest_last_offerer", "$g_talk_troop"),
     (call_script, "script_get_quest", "$g_talk_troop"),
     (assign, "$random_merchant_quest_no", reg0),
     (assign,"$merchant_offered_quest","$random_merchant_quest_no"),
     ]],

  [anyone|plyr,"mayor_talk", [(store_partner_quest, ":partner_quest"),
                              (lt, ":partner_quest", 0),
                              (eq,"$merchant_quest_last_offerer", "$g_talk_troop"),
                              (gt,"$merchant_offered_quest", 0) #not sure why was zero
                              ],
   "About that job you offered me...", "merchant_quest_last_offered_job",[]],

  [anyone|plyr,"mayor_talk", [(store_partner_quest,reg(2)),(ge,reg(2),0)],
   "About the job you gave me...", "merchant_quest_about_job",[]],

  [anyone|plyr,"mayor_talk",[], "I have some questions of a political nature.", "mayor_political_talk",[]],

  [anyone|plyr,"mayor_talk",[], "How is trade around here?", "mayor_economy_report_1",[
  (call_script, "script_merchant_road_info_to_s42", "$g_encountered_party"), #also does items to s32
  ]],

  [anyone|plyr,"mayor_talk",[
  ], "How does the wealth of this region compare with the rest of Calradia?", "mayor_wealth_comparison_1",[
  ]],


  [anyone|plyr,"mayor_talk",[
  (item_slot_ge, "itm_velvet", slot_item_secondary_raw_material, "itm_raw_dyes"), #ie, the item information has been updated, to ensure savegame compatibility
  #SB : disguise conditional
  (this_or_next|eq,"$sneaked_into_town",disguise_merchant),
  (eq,"$sneaked_into_town",disguise_none),
  ], "I wish to buy land in this town for a productive enterprise", "mayor_investment_possible",[
  ]],





  [anyone,"mayor_investment_possible",[
  (party_slot_ge, "$g_encountered_party", slot_center_player_enterprise, 1),
  (party_get_slot, ":item_produced", "$g_encountered_party", slot_center_player_enterprise),
  (call_script, "script_get_enterprise_name", ":item_produced"),
  (str_store_string, s4, reg0),
  ], "You already operate a {s4} here. There probably aren't enough skilled tradesmen to start a second enterprise.", "mayor_pretalk",[
  ]],

  [anyone,"mayor_investment_possible",[
  (ge, "$cheat_mode", 3)
  ], "{!}CHEAT: Yes, we're playtesting this feature, and you're in cheat mode. Go right ahead.", "mayor_investment_advice",[
  ]],
  #SB : disguise conditional
  [anyone,"mayor_investment_possible",[
  (eq,"$sneaked_into_town",disguise_merchant),
  (str_store_string, s9, "str_enterprise_enemy_realm"),
  ], "Well, you seem like a shrewd enough {lass/fellow}, despite that stupid hat, you're more than welcome to invest money here. Whether you'll be able to make a profit remains to be seen.", "mayor_investment_advice",[]],

  [anyone,"mayor_investment_possible",[
  (party_slot_eq, "$g_encountered_party", slot_town_lord, "trp_player"),
  ##diplomacy start+ Replace {sir/my lady} with {s0}
  (call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),
#  ], "Of course, {sir/my lady}. You are the lord of this town, and no one is going to stop you.", "mayor_investment_advice",[
  ], "Of course, {s0}. You are the lord of this town, and no one is going to stop you.", "mayor_investment_advice",[
##diplomacy end+
  ]],

  [anyone,"mayor_investment_possible",[
  (party_get_slot, ":town_liege", "$g_encountered_party", slot_town_lord),
  ##diplomacy start+ Add support for ladies etc.
  #(is_between, ":town_liege", active_npcs_begin, active_npcs_end),
  (is_between, ":town_liege", heroes_begin, heroes_end),
  ##diplomacy end+
  (call_script, "script_troop_get_relation_with_troop", "trp_player", ":town_liege"),
  (assign, ":relation", reg0),
  (lt, ":relation", 0),
  (str_store_troop_name, s4, ":town_liege"),
  ], "Well... Given your relationship with our liege, {s4}, I think that you will not find many here who are brave enough to sell you any land.", "mayor_investment",[
  ]],

  [anyone|auto_proceed,"mayor_investment",[], "{!}.", "mayor_pretalk",[]],


  [anyone,"mayor_investment_possible",[
  ##diplomacy start+ Optional economic change, increase relation required
  ##OLD:
  #	(neg|party_slot_ge, "$current_town", slot_center_player_relation, 0),
  ##NEW:
  (assign, ":required_relation", 0),#need 0+ normally
  (try_begin),
	(ge, "$g_dplmc_gold_changes", DPLMC_GOLD_CHANGES_MEDIUM),
	(neq, "$g_encountered_party", "$g_starting_town"),
	(val_add, ":required_relation", 1),#need 1+ with economic changes on medium+
  (try_end),
  (neg|party_slot_ge, "$current_town", slot_center_player_relation, ":required_relation"),
  ##diplomacy end+
  ], "Well... To be honest, I think that we in the guild would like to know you a little better. We can be very particular about outsiders coming in here and buying land.", "mayor_pretalk",[
  ]],

  [anyone,"mayor_investment_possible",[
  ##diplomacy start+ Replace {sir/my lady} with {s0}
  (call_script, "script_dplmc_print_commoner_at_arg1_says_sir_madame_to_s0", "$g_encountered_party"),
#  ], "Very good, {sir/my lady}. We in the guild know and trust you, and I think I could find someone to sell you the land you need.", "mayor_investment_advice",[]],
  ], "Very good, {s0}. We in the guild know and trust you, and I think I could find someone to sell you the land you need.", "mayor_investment_advice", []],
##diplomacy end+

  [anyone,"mayor_investment_advice",[], "A couple of things to keep in mind -- skilled laborers are always at a premium, so I doubt that you will be able to open up more than one enterprise here. In order to make a profit for yourself, you should choose a commodity which is in relatively short supply, but for which the raw materials are cheap. What sort of enterprise would you like to start?", "investment_choose_enterprise",[
  ]],

  [anyone|plyr,"investment_choose_enterprise",[], "A mill and bakery, to make bread from grain", "investment_summary",[
  (assign, "$enterprise_production", "itm_bread"),
  ]],

  [anyone|plyr,"investment_choose_enterprise",[], "A brewery, to make ale from grain", "investment_summary",[
  (assign, "$enterprise_production", "itm_ale"),
  ]],

  [anyone|plyr,"investment_choose_enterprise",[], "A tannery, to make leather from hides", "investment_summary",[
  (assign, "$enterprise_production", "itm_leatherwork"),
  ]],

  [anyone|plyr,"investment_choose_enterprise",[], "A wine press, to make wine from grapes", "investment_summary",[
  (assign, "$enterprise_production", "itm_wine"),
  ]],

  [anyone|plyr,"investment_choose_enterprise",[], "An oil press, to make oil from olives", "investment_summary",[
  (assign, "$enterprise_production", "itm_oil"),
  ]],

  [anyone|plyr,"investment_choose_enterprise",[], "An ironworks, to make tools from iron", "investment_summary",[
  (assign, "$enterprise_production", "itm_tools"),
  ]],

  [anyone|plyr,"investment_choose_enterprise",[], "A weavery and dyeworks, to make velvet from silk and dye", "investment_summary",[
  (assign, "$enterprise_production", "itm_velvet"),
  ]],

  [anyone|plyr,"investment_choose_enterprise",[], "A weavery, to make wool cloth from wool", "investment_summary",[
  (assign, "$enterprise_production", "itm_wool_cloth"),
  ]],

  [anyone|plyr,"investment_choose_enterprise",[], "A weavery, to make linen from flax", "investment_summary",[
  (assign, "$enterprise_production", "itm_linen"),
  ]],

  [anyone|plyr,"investment_choose_enterprise",[], "Never mind.", "mayor_pretalk",[
  ]],

  [anyone,"investment_summary",[], "Very good, sir. The land and the materials on which you may build your {s3} will cost you {reg7} denars. Right now, your {s3} will produce {s4} worth {reg1} denars each week, while the {s6} needed to manufacture that batch will be {reg2} and labor and upkeep will be {reg3}.{s9} I should guess that your profit would be {reg0} denars a week. This assumes of course that prices remain constant -- which, I can virtually guarantee you, they will not. Do you wish to proceed?", "mayor_investment_confirm",
  [
    #(item_get_slot, ":base_price", "$enterprise_production", slot_item_base_price),
    #(item_get_slot, ":number_runs", "$enterprise_production", slot_item_output_per_run),
    #(store_mul, "$enterprise_cost", ":base_price", ":number_runs"),
    #(val_mul, "$enterprise_cost", 5),
    (item_get_slot, "$enterprise_cost", "$enterprise_production", slot_item_enterprise_building_cost),

    (assign, reg7, "$enterprise_cost"),

    (str_store_item_name, s4, "$enterprise_production"),

    (call_script, "script_get_enterprise_name", "$enterprise_production"),
    (str_store_string, s3, reg0),

    (call_script, "script_process_player_enterprise", "$enterprise_production", "$g_encountered_party"),
    #reg0: Profit per cycle
    #reg1: Selling price of total goods
    #reg2: Selling price of total goods

    (item_get_slot, ":primary_raw_material", "$enterprise_production", slot_item_primary_raw_material),
    (str_store_item_name, s6, ":primary_raw_material"),
	##diplomacy start+ For testing, print some additional diagnostics
	(assign, ":save_reg0", reg0),
	(assign, ":save_reg1", reg1),
	(try_begin),
		(ge, "$cheat_mode", 1),
		(ge, "$g_dplmc_gold_changes", DPLMC_GOLD_CHANGES_MEDIUM),
		(try_begin),
			(call_script, "script_dplmc_good_produced_at_center_or_its_villages", ":primary_raw_material", "$g_encountered_party"),
			(ge, reg0, 1),
			(display_message, "@{!}There is a local supply of {s6}."),
		(else_try),
			(store_sub, ":item_slot_no", ":primary_raw_material", trade_goods_begin),
			(val_add, ":item_slot_no", slot_town_trade_good_prices_begin),
			(item_get_slot, reg0, ":primary_raw_material", slot_item_base_price),
			(party_get_slot, reg1, "$g_encountered_party", ":item_slot_no"),
			(val_mul, reg0, reg1),
			(val_div, reg0, average_price_factor),
			(assign, ":base_price", reg0),
			(call_script, "script_dplmc_assess_ability_to_purchase_good_from_center", ":primary_raw_material", "$g_encountered_party"),
			(item_get_slot, reg1, ":primary_raw_material", slot_item_base_price),
			(val_mul, reg1, reg0),
			(val_div, reg1, average_price_factor),
			(assign, reg0, ":base_price"),
			(display_message, "@{!}{s6} must be imported, modifying the price from {reg0} to {reg1}."),
		(try_end),
	(try_end),
	##diplomacy end+

    (str_clear, s9),
    (assign, ":cost_of_secondary_input", reg10),
    (try_begin),
	  (gt, ":cost_of_secondary_input", 0),
	  (item_get_slot, ":secondary_raw_material", "$enterprise_production", slot_item_secondary_raw_material),
      (str_store_item_name, s11, ":secondary_raw_material"),
      (str_store_string, s9, "str_describe_secondary_input"),
    (try_end),
	##diplomacy end+
	(try_begin),
		(ge, "$cheat_mode", 1),
		(ge, "$g_dplmc_gold_changes", DPLMC_GOLD_CHANGES_MEDIUM),
		(gt, ":cost_of_secondary_input", 0),
		(try_begin),
			(call_script, "script_dplmc_good_produced_at_center_or_its_villages", ":secondary_raw_material", "$g_encountered_party"),
			(ge, reg0, 1),
			(display_message, "@{!}There is a local supply of {s11}."),
		(else_try),
			(store_sub, ":item_slot_no", ":secondary_raw_material", trade_goods_begin),
			(val_add, ":item_slot_no", slot_town_trade_good_prices_begin),
			(item_get_slot, reg0, ":secondary_raw_material", slot_item_base_price),
			(party_get_slot, reg1, "$g_encountered_party", ":item_slot_no"),
			(val_mul, reg0, reg1),
			(val_div, reg0, average_price_factor),
			(assign, ":base_price", reg0),
			(call_script, "script_dplmc_assess_ability_to_purchase_good_from_center", ":secondary_raw_material", "$g_encountered_party"),
			(item_get_slot, reg1, ":secondary_raw_material", slot_item_base_price),
			(val_mul, reg1, reg0),
			(val_div, reg1, average_price_factor),
			(assign, reg0, ":base_price"),
			(display_message, "@{!}{s9} must be imported, modifying the price from {reg0} to {reg1}."),
		(try_end),
	(try_end),
	(assign, reg0, ":save_reg0"),
	(assign, reg1, ":save_reg1"),
	##diplomacy end+
  ]],


  [anyone|plyr,"mayor_investment_confirm",[
  (store_troop_gold, ":player_gold", "trp_player"),
  (ge, ":player_gold","$enterprise_cost"),
  ], "Yes. Here is money for the land.", "mayor_investment_purchase",[
  (party_set_slot, "$g_encountered_party", slot_center_player_enterprise, "$enterprise_production"),
  (party_set_slot, "$g_encountered_party", slot_center_player_enterprise_days_until_complete, 7),

  (troop_remove_gold, "trp_player", "$enterprise_cost"),
  (store_sub, ":current_town_order", "$current_town", towns_begin),
  (store_add, ":craftsman_troop", ":current_town_order", craftsman_begin),  #SB : range const
  (try_begin),
    (eq, "$enterprise_production", "itm_bread"),
    (troop_set_name, ":craftsman_troop", "str_master_miller"),
  (else_try),
    (eq, "$enterprise_production", "itm_ale"),
    (troop_set_name, ":craftsman_troop", "str_master_brewer"),
  (else_try),
    (eq, "$enterprise_production", "itm_oil"),
    (troop_set_name, ":craftsman_troop", "str_master_presser"),
  (else_try),
    (eq, "$enterprise_production", "itm_tools"),
    (troop_set_name, ":craftsman_troop", "str_master_smith"),
  (else_try),
    (eq, "$enterprise_production", "itm_wool_cloth"),
    (troop_set_name, ":craftsman_troop", "str_master_weaver"),
  (else_try),
    (eq, "$enterprise_production", "itm_linen"),
    (troop_set_name, ":craftsman_troop", "str_master_weaver"),
  (else_try),
    (eq, "$enterprise_production", "itm_leatherwork"),
    (troop_set_name, ":craftsman_troop", "str_master_tanner"),
  (else_try),
    (eq, "$enterprise_production", "itm_velvet"),
    (troop_set_name, ":craftsman_troop", "str_master_dyer"),
  (else_try),
    (eq, "$enterprise_production", "itm_wine"),
    (troop_set_name, ":craftsman_troop", "str_master_vinter"),
  (try_end),
  ]],

  #SB : go back to list of enterprises instead of pretalk
  [anyone|plyr,"mayor_investment_confirm",[], "No -- that's not economical for me at the moment.", "mayor_investment_advice",[]],

  [anyone,"mayor_investment_purchase",[], "Very good. Your enterprise should be up and running in about a week. When next you come, and thereafter, you should speak to your {s4} about its operations.", "mayor_pretalk",[
  (store_sub, ":current_town_order", "$current_town", towns_begin),
  (store_add, ":craftsman_troop", ":current_town_order", craftsman_begin),  #SB : range const
  (str_store_troop_name, s4, ":craftsman_troop"),

  ]],



## SB : add conditional lordship/rulership and flavour text for guildmaster
  [anyone|plyr,"mayor_talk", [], "Goodbye.", "close_window",[]],
  
  [anyone, "mayor_info_begin", [
  (call_script, "script_dplmc_get_troop_standing_in_faction", "$g_encountered_party_faction", "trp_player"),
  (this_or_next|party_slot_eq,"$current_town",slot_town_lord, "trp_player"),
  (ge, reg0, DPLMC_FACTION_STANDING_LEADER_SPOUSE),
  ],
   "I am but your humble servant, the guildmaster of {s9}.\
 The folks of {s9} sometimes ask me to manage tasks that are beneath your notice.", "mayor_info_talk",[(assign, "$mayor_info_lord_told",0)]],

  [anyone, "mayor_info_begin", [
  (troop_get_slot, ":renown", "trp_player", slot_troop_renown),
  (try_begin),
    (gt, ":renown", 200),
    (assign, reg5, 1),
    (try_begin),
      (ge, "$player_honor", 0),
      (assign, reg4, 0),
    (else_try),
      (assign, reg4, 1),
    (try_end),
  (else_try),
    (assign, reg5, 0),
  (try_end),
  ],
   "I am the guildmaster of {s9}. You can say I am the leader of the good people of {s9}.\
 {reg5?Though you may not have heard of me, I have heard of your {reg4?dastardly:good} deeds, {playername}:I can help you find a job if you are looking for some honest work}.", "mayor_info_talk",[(assign, "$mayor_info_lord_told",0)]],

  [anyone|plyr,"mayor_info_talk",[(eq, "$mayor_info_lord_told",0)], "Who rules this town?", "mayor_info_lord",[]],
  
##diplomacy start+ make gender correct
  [anyone, "mayor_info_lord", #moto fix
    [
    (party_get_slot, ":town_lord","$current_town",slot_town_lord),
    (assign, reg5, ":town_lord"),
    (assign, reg10, 0),
    (try_begin), 
        (eq, ":town_lord", "trp_player"), 
        (str_store_string, s10, "str_your_excellency"), 
    (else_try),
        (le, ":town_lord", stl_unassigned),
        (str_store_string, s10, "@yet to be announced"),
        (assign, reg10, 1),
    (else_try), 
        (is_between, ":town_lord", active_npcs_begin, active_npcs_end), 
        (str_store_troop_name, s10, ":town_lord"),
    (else_try), 
        (faction_get_slot, ":town_lord", "$g_encountered_party_faction", slot_faction_leader), 
        (str_store_troop_name, s10, ":town_lord"), 
    (try_end), 
    (try_begin), #SB fix
      (neq, ":town_lord", stl_unassigned),
      (call_script, "script_dplmc_store_troop_is_female", ":town_lord"),
    (try_end),
   ],#Next line, He -> {reg0?She:He}
   "Our town's lord and protector is {s10}. {reg10?Until then:{reg5?{reg0?She:He} owns the castle and sometimes resides there, and collects taxes from the town:It is not everyday that we are blessed with your presence}. However} we regulate ourselves in most of the matters that concern ourselves.\
 As the town's guildmaster I have the authority to decide those things.", "mayor_info_talk",
    [
        (assign, "$mayor_info_lord_told",1)
    ]],
 ##diplomacy end+

  [anyone|plyr,"mayor_info_talk",[], "That's all I need to know. Thanks.", "mayor_pretalk",[]],


  [anyone, "mayor_political_talk", [(faction_get_slot, ":faction_leader","$g_encountered_party_faction",slot_faction_leader),
									(str_store_troop_name, s10, ":faction_leader"),
									(party_get_slot, ":town_lord","$current_town",slot_town_lord),
									(try_begin),
										(eq, ":town_lord", "trp_player"),
										(str_store_string, s10, "str_your_excellency"),
									(else_try),
										(is_between, ":town_lord", active_npcs_begin, active_npcs_end),
										(neq, ":town_lord", ":faction_leader"),
										(str_store_troop_name, s11, ":town_lord"),
										(neq, ":town_lord", ":faction_leader"),
										(str_store_string, s10, "str_s10_and_s11"),
									(try_end),
									],
   "Politics? Good heaven, the guild has nothing to do with politics. We are loyal servants of {s10}. We merely govern our own affairs, and pass on the townspeople's concerns to our lords and masters, and maybe warn them from time to time against evil advice. Anyway, what did you wish to ask?", "mayor_political_questions",[]],

  [anyone,"mayor_prepolitics",[ (faction_get_slot, ":faction_leader","$g_encountered_party_faction",slot_faction_leader),
								(try_begin),
									(eq, ":faction_leader", "trp_player"),
									(str_store_string, s9, "str_your_loyal_subjects"),
								(else_try),
									(str_store_troop_name, s10, ":faction_leader"),
									(str_store_string, s9, "str_loyal_subjects_of_s10"),
								(try_end),
  ], "Did I mention that we here are all {s9}? Because I can't stress that enough... Anyway... Is there anything else?", "mayor_political_questions",[]],

   [anyone|plyr,"mayor_political_questions",[], "What is the cause of all these wars in Calradia?", "mayor_war_description_1",[
  ]],

  [anyone,"mayor_war_description_1",[ (faction_get_slot, ":faction_leader","$g_encountered_party_faction",slot_faction_leader),
								(str_store_troop_name, s10, ":faction_leader"),
								(str_store_string, s22, "str_the"),
								(try_begin),
									(eq, "$g_encountered_party_faction", "fac_kingdom_5"),
									(str_store_string, s22, "str_we"),
								(try_end),
								(val_max, "$g_mayor_given_political_dialog", 1),

  ], "Well, to answer your question generally, each monarch claims to be the rightful heir to the old Calradic emperors. Some of these claims are based on forgotten dynastic marriages and others are based on obscure promises, while {s22} Rhodoks invoke the empire's unwritten constitution. So in theory, any one realm has the right to declare war on any other realm at any time.", "mayor_war_description_2",[]],
  
  ##SB : cut off dialogue here if high ranking
  [anyone,"mayor_war_description_2",[
  #(faction_slot_eq, "$g_encountered_party_faction", slot_faction_leader, "trp_player"),
  (call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", "$g_encountered_party_faction"),
  (ge, reg0, DPLMC_FACTION_STANDING_MARSHALL),
  ],
    "In practice, to make war is exhausting work. It is easy enough to lay waste to the enemy's farmland, but crops will grow back, and it is a far different matter to capture an enemy stronghold and to hold it. So the monarchs of Calradia will fight a little, sign a truce, fight a little more, and so on and so forth. Often, a monarch will go to war when another realm provokes them. At such times, some bad influences who look to enrich themselves with ransoms and pillage will clamor for retribution, and thus the damage caused by war to a monarch's treasury is less than the damage caused by doing nothing would be to his authority...\
 Of course, your highness is far more experienced in these matters, as I and the humble folks here would not presume to know anything of strategy...", "mayor_prepolitics",[]],

  [anyone,"mayor_war_description_2",[ (faction_get_slot, ":faction_leader","$g_encountered_party_faction",slot_faction_leader),
                                (call_script, "script_dplmc_store_troop_is_female_reg", ":faction_leader", 4),
                                (str_store_troop_name, s10, ":faction_leader"),
  ], "In practice, to make war is exhausting work. It is easy enough to lay waste to the enemy's farmland, but crops will grow back, and it is a far different matter to capture an enemy stronghold and to hold it. So the monarchs of Calradia will fight a little, sign a truce, fight a little more, and so on and so forth. Often, a monarch will go to war when another realm provokes them. At such times, some bad influences who look to enrich themselves with ransoms and pillage will clamor for retribution, and thus the damage caused by war to a monarch's treasury is less than the damage caused by doing nothing would be to {reg4?her:his} authority... I'm of course not talking about {s10}, as no one would ever question {reg4?her:his} authority", "mayor_war_description_3",[]],

  [anyone,"mayor_war_description_3",[
    # (faction_get_slot, ":faction_leader","$g_encountered_party_faction",slot_faction_leader),
    # (call_script, "script_dplmc_store_troop_is_female_reg", ":faction_leader", 4),
    # (str_store_troop_name, s10, ":faction_leader"),
  ], "I would stress again that we in the guild have nothing to do with politics. But if {s10} were to ask for my advice on these matters, as a loyal subject, I would tell {reg4?her:him} that while {reg4?her:his} claim to all of Calradia is truly just, even the most legitimate claim must be backed by armed men, and armed men want money, and money comes from trade, and war ruins trade, so sometimes the best way to push a claim is not to push it, if you know what I mean...", "mayor_war_description_4",[]],

  [anyone,"mayor_war_description_4",[
    # (faction_get_slot, ":faction_leader","$g_encountered_party_faction",slot_faction_leader),
    # (call_script, "script_dplmc_store_troop_is_female_reg", ":faction_leader", 4),
    # (str_store_troop_name, s10, ":faction_leader"),
    (str_store_party_name, s4, "$g_encountered_party"),

  ], "You may tell {s10} this if you see {reg4?her:him}. Don't mention my name specifically -- just say 'the people of {s4}' told you this. Our personal opinion, of course, as to what would be in {s10}'s best interests. None of us would ever dream of questioning a monarch's sovereign right to push {reg4?her:his} legitimate claims.", "mayor_prepolitics",[
  ]],

  [anyone|plyr,"mayor_political_questions",[
    (faction_get_slot, ":faction_leader","$g_encountered_party_faction",slot_faction_leader),
    (str_store_troop_name, s10, ":faction_leader"),
    (ge, "$g_mayor_given_political_dialog", 1),
    (assign, ":continue", 0),
    (try_for_range, ":cur_faction", kingdoms_begin, kingdoms_end),
      (faction_slot_eq, ":cur_faction", slot_faction_state, sfs_active),
      (neq, ":cur_faction", "$g_encountered_party_faction"),
      (assign, ":continue", 1), #at least 1 faction is active
    (try_end),
    (eq, ":continue", 1),
    (try_begin),
      (eq, ":faction_leader", "trp_player"),
      (assign, reg5, 1),
    (else_try),
      (assign, reg5, 0),
    (try_end),
  ], "{reg5?Hypothetically speaking, what would be my:What is {s10}'s} policy in regards to the other realms of Calradia?", "mayor_politics_assess",[
  ]],

  [anyone,"mayor_politics_assess",[
    (assign, ":continue", 0),
    (try_for_range, ":cur_faction", kingdoms_begin, kingdoms_end),
      (faction_slot_eq, ":cur_faction", slot_faction_state, sfs_active),
      (neq, ":cur_faction", "$g_encountered_party_faction"),
      (assign, ":continue", 1), #at least 1 faction is active
    (try_end),
    (eq, ":continue", 0),
    
    (try_begin),
      (faction_slot_eq, "$g_encountered_party_faction", slot_faction_leader, "trp_player"),
      (assign, reg10, 1),
    (else_try),
      (assign, reg10, 0),
    (try_end),

  ], "What realms? {reg10?Your Majesty:Our liege} has conquered them all!", "mayor_friendly_pretalk",[]],

  [anyone,"mayor_politics_assess",[], "Which realm did you have in mind?", "mayor_politics_assess_realm",[
  ]],

  [anyone|plyr|repeat_for_factions,"mayor_politics_assess_realm",[
  (store_repeat_object, ":faction"),
  (is_between, ":faction", kingdoms_begin, kingdoms_end),
  (faction_slot_eq, ":faction", slot_faction_state, sfs_active),
  (neq, ":faction", "$g_encountered_party_faction"),
  (str_store_faction_name, s11, ":faction"),
  ], "{s11}", "mayor_politics_give_realm_assessment",[
  (store_repeat_object, "$g_faction_selected"),
  ]],

  [anyone,"mayor_politics_give_realm_assessment",[], "{s14}", "mayor_prepolitics",[
  (call_script, "script_npc_decision_checklist_peace_or_war", "$g_encountered_party_faction", "$g_faction_selected", -1),
  ]],

   [anyone|plyr,"mayor_political_questions",[], "What can you say about the internal politics of the realms?", "mayor_internal_politics",[
  ]],

  [anyone,"mayor_internal_politics",[
  (str_store_faction_name, s4, "$g_encountered_party_faction"),
  (faction_get_slot, ":leader", "$g_encountered_party_faction", slot_faction_leader),
  (call_script, "script_dplmc_store_troop_is_female_reg", ":leader", 4),
  (try_begin),
    (eq, ":leader", "trp_player"),
    (assign, reg5, 1),
  (else_try),
    (assign, reg5, 0),
    (str_store_troop_name, s5, ":leader"),
  (try_end),
  ], "Well, here in the {s4} we are all united by our love for {reg5?your grace:{s5}} and support for {reg5?your:{reg4?her:his} legitimate claim to the} rulership of all Calradia. But I have heard some talk of internal bickering in other realms...", "mayor_internal_politics_2",[
  ]],

  [anyone,"mayor_internal_politics_2",[], "The lords of a realm often have very different ideas about honor, strategy, and the way a nobleman should behave. In addition, they compete with each other for the ruler's favor, and are constantly weighing up their position -- how they stand, how their friends and family stand, and how their enemies stand.", "mayor_internal_politics_3", []],

  [anyone,"mayor_internal_politics_3",[], "Underlying all the tensions is the possibility that a lord may abandon his liege, and pledge vassalhood to another. In theory, each lord has sworn an oath of vassalage, but in practice, a vassal can always find an excuse to absolve himself. The vassal may claim that the liege has failed to hold up his end of the bargain, to protect the vassal and treat him justly. Or, the vassal may claim that his liege is in fact a usurper, and another has a better claim to the kingship.", "mayor_internal_politics_4", []],

  [anyone,"mayor_internal_politics_4",[], "Lieges and vassals still watch each other carefully. If a king believes that his vassal is going to change sides or rebel, he may indict the vassal for treason and seize his properties. Likewise, if a vassal fears that he will be indicted, he may rebel. Usually, whoever makes the first move will be able to control the vassal's fortresses.", "mayor_internal_politics_5", []],

  [anyone,"mayor_internal_politics_5",[
  (call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", "$g_encountered_party_faction"),
  (ge, reg0, DPLMC_FACTION_STANDING_LEADER_SPOUSE),
  ], 
    "Now, men do not trust a vassal who turns coat easily. But I'm sure your grace know the heart and mind of the realm, keeping better council than myself.", "mayor_prepolitics", []],
  [anyone,"mayor_internal_politics_5",[], "Now, men do not trust a vassal who turns coat easily, nor do they trust a king who lightly throws around charges of treason. Those two factors can keep a realm together. But if relations between a vassal and a liege deteriorate far enough, things can become very tense indeed... In other lands, of course. These things could never happen here in the {s4}.", "mayor_prepolitics", []],

  #SB : add faction policy strings if no access to chancellor
  [anyone|plyr, "mayor_political_questions", [], "Do you have any insight into the realm's domestic policies?", "mayor_politics_policy", []],
  [anyone,"mayor_politics_policy", [], "Well, let's see.. {s20}", "mayor_political_questions",[
    (str_clear, s20),
    (call_script, "script_display_policy_string_to_reg", "$g_encountered_party_faction", 1, 1),
  ]],
  
  [anyone|plyr, "mayor_political_questions", [], "That is all. Thank you.", "mayor_pretalk", []],


  [anyone,"merchant_quest_about_job", [], "What about it?", "merchant_quest_about_job_2",[]],
  [anyone|plyr,"merchant_quest_about_job_2", [], "What if I can't finish it?", "merchant_quest_what_if_fail",[]],
  [anyone|plyr,"merchant_quest_about_job_2", [], "Well, I'm still working on it.", "merchant_quest_about_job_working",[]],
  [anyone,"merchant_quest_about_job_working", [], "Good. I'm sure you will handle it.", "mayor_pretalk",[]],


  [anyone,"merchant_quest_last_offered_job", [], "Eh, you want to reconsider that. Good...", "merchant_quest_brief",
   [[assign,"$random_merchant_quest_no","$merchant_offered_quest"]]],


  [anyone,"merchant_quest_what_if_fail", [(store_partner_quest,":partner_quest"),(eq,":partner_quest","qst_deliver_wine")],
   "I hope you don't fail. In that case, I'll have to ask for the price of the cargo you were carrying.", "mayor_pretalk",[]],
  [anyone,"merchant_quest_what_if_fail", [], "Well, just do your best to finish it.", "mayor_pretalk",[]],

  [anyone,"merchant_quest_taken", [], "Excellent. I am counting on you then. Good luck.", "mayor_pretalk",
   []],
  [anyone,"merchant_quest_stall", [], "Well, the job will be available for a few more days I guess. Tell me if you decide to take it.", "mayor_pretalk",[]],


  [anyone,"mayor_economy_report_1", [], "{s32}", "mayor_economy_report_2",
   []],

  [anyone,"mayor_economy_report_2", [], "{s42}", "mayor_economy_report_3",
   []],

   [anyone,"mayor_economy_report_3", [], "{s47}", "mayor_pretalk",
   []],


###################################################################3
# Random Merchant quests....
##############################

# Ryan BEGIN
  # deal with looters

  [anyone,"merchant_quest_requested",
   [
     (eq,"$random_merchant_quest_no","qst_deal_with_looters"),
     ],
   "Well, you look able enough. I think I might have something you could do.", "merchant_quest_brief", []],

  [anyone,"merchant_quest_brief",
   [
     (eq,"$random_merchant_quest_no","qst_deal_with_looters"),
     (try_begin),
       (party_slot_eq,"$g_encountered_party",slot_party_type,spt_town),
       (str_store_string,s5,"@town"),
     (else_try),
       (party_slot_eq,"$g_encountered_party",slot_party_type,spt_village),
       (str_store_string,s5,"@village"),
     (try_end),
     ],
   "We've had some fighting near the {s5} lately, with all the chaos that comes with it,\
 and that's led some of our less upstanding locals to try and make their fortune out of looting the shops and farms during the confusion.\
 A lot of valuable goods were taken. I need somebody to teach those bastards a lesson.\
 Sound like your kind of work?", "merchant_quest_looters_choice", []],

  [anyone|plyr,"merchant_quest_looters_choice", [], "Aye, I'll do it.", "merchant_quest_looters_brief", []],

  [anyone|plyr,"merchant_quest_looters_choice", [], "I'm afraid I can't take the job at the moment.", "merchant_quest_stall",[]],

  [anyone,"merchant_quest_looters_brief", [
   (try_begin),
	(party_slot_eq,"$g_encountered_party",slot_party_type,spt_town),
	(str_store_string,s5,"@town"),
   (else_try),
	(party_slot_eq,"$g_encountered_party",slot_party_type,spt_village),
	(str_store_string,s5,"@village"),
   (try_end),

#     (party_get_slot,":merchant","$current_town",slot_town_merchant),
#     (troop_clear_inventory,":merchant"),
   (store_random_in_range,":random_num_looters",3,7),
   (quest_set_slot,"qst_deal_with_looters",slot_quest_target_amount,":random_num_looters"),
   (try_for_range,":unused",0,":random_num_looters"),
     (store_random_in_range,":random_radius",5,14),
     (set_spawn_radius,":random_radius"),
     (spawn_around_party,"$g_encountered_party","pt_looters"),
     (party_set_flags, reg0, pf_quest_party, 1),
     (party_set_ai_behavior, reg0, ai_bhvr_patrol_location),
     (party_set_ai_patrol_radius, reg0, 2),
     (party_get_position, pos0, reg0),
     (party_set_ai_target_position, reg0, pos0),
   (try_end),
   (str_store_troop_name_link, s9, "$g_talk_troop"),
   (str_store_party_name_link, s13, "$g_encountered_party"),
   (str_store_party_name, s4, "$g_encountered_party"),
   (setup_quest_text, "qst_deal_with_looters"),
   (str_store_string, s2, "@The Guildmaster of {s13} has asked you to deal with looters in the surrounding countryside."),
   (call_script, "script_start_quest", "qst_deal_with_looters", "$g_talk_troop"),
   (assign, "$g_leave_encounter",1),
  ],
   "Excellent! You'll find the looters roaming around the countryside, probably trying to rob more good people.\
 Kill or capture the bastards, I don't care what you do with them.\
 I'll pay you a bounty of 40 denars on every band of looters you destroy,\
 until all the looters are dealt with.", "close_window",
   []],
# Ryan END

#The following few quests are non-random -- they will be checked every time a player asks for a job. If circumstances allow it, then the player will
  [anyone,"merchant_quest_requested", [
  (eq,"$random_merchant_quest_no","qst_retaliate_for_border_incident"),

  (quest_get_slot, ":target_faction", "qst_retaliate_for_border_incident", slot_quest_target_faction),
  (call_script, "script_faction_get_adjective_to_s10", ":target_faction"),

  (faction_get_slot, ":leader", "$g_encountered_party_faction", slot_faction_leader),
  (str_store_troop_name, s5, ":leader"),
##diplomacy start+ Use forrect gender for faction leader
  (call_script, "script_dplmc_store_troop_is_female", ":leader"),
#Next line, fix pronouns with reg0
	], "Well, there is a very great favor which you could do us... As you may have heard, some {s10}s have come across the border to attack our people. {s5} is under great pressure from some of the more bellicose of {reg0?her:his} vassals to respond with a declaration of war. Unfortunately, while the great lords of this land grow rich from bloodshed, we of the commons will be caught in the middle, and will suffer.",
	"merchant_quest_explain_2", []],
##diplomacy end+

  [anyone,"merchant_quest_explain_2", [
  (eq,"$random_merchant_quest_no","qst_retaliate_for_border_incident"),
  (quest_get_slot, ":target_troop", "qst_retaliate_for_border_incident", slot_quest_target_troop),
  (str_store_troop_name, s7, ":target_troop"),
##diplomacy start+ Use correct gender for faction leader
  (faction_get_slot, ":leader", "$g_encountered_party_faction", slot_faction_leader),
  (call_script, "script_dplmc_store_troop_is_female", ":leader"),
##diplomacy end+
  ],
##diplomacy start+ Fix pronouns with reg0
  "We are not saying that {s5} should overlook this aggression -- far from it! But if {reg0?she:he} charges one of {reg0?her:his} own lords to respond, then the cycle of provocation will necessarily lead to a full-fledged confrontation. Now, if an outsider were to step in and defeat a {s10} lord in battle, then honor would be done, and it would defuse the clamor for war. If the defeated lord were a known troublemaker -- {s7} -- then the {s10}s might be able to overlook it.",
  "merchant_quest_brief",[]],
##diplomacy end+

  [anyone,"merchant_quest_brief", [
  (eq,"$random_merchant_quest_no","qst_retaliate_for_border_incident"),
  (quest_get_slot, ":target_troop", "qst_retaliate_for_border_incident", slot_quest_target_troop),
  (str_store_troop_name, s7, ":target_troop"),
  ],
  "We need you to attack and defeat {s7}. This will not be an easy task, and that outsider would damage {his/her} relationship with the {s10}s, but we would be very grateful. We could not acknowledge a connection with that outsider, but we could be sure that {he/she} would be handsomely rewarded... Could you do this?",
  "merchant_quest_retaliate_confirm",[]],

  [anyone|plyr,"merchant_quest_retaliate_confirm", [], "Aye, I can do it.", "merchant_quest_track_bandits_brief", [
#    (quest_set_slot, "qst_retaliate_for_border_incident", slot_quest_target_troop, "$g_target_leader"),
#    (quest_set_slot, "qst_retaliate_for_border_incident", slot_quest_target_faction, "$g_target_faction"),

	(str_store_faction_name, s11, "$g_encountered_party_faction"),
    (setup_quest_text, "qst_retaliate_for_border_incident"),
    (str_store_string, s2, "str_track_down_s7_and_defeat_him_defusing_calls_for_war_within_the_s11"),
    (call_script, "script_start_quest", "qst_retaliate_for_border_incident", "$g_talk_troop"),
  ]],

  [anyone|plyr,"merchant_quest_retaliate_confirm", [], "I would prefer not to get mixed up in such things", "merchant_pretalk", [
	(quest_set_slot, "qst_retaliate_for_border_incident", slot_quest_dont_give_again_remaining_days, 5),
  ]],



  [anyone,"destroy_lair_quest_brief", [
     (eq,"$random_quest_no", "qst_destroy_bandit_lair"),
	 (quest_get_slot, ":bandit_lair", "qst_destroy_bandit_lair", slot_quest_target_party),
	 (party_get_template_id, ":bandit_type", ":bandit_lair"),
	 (eq, ":bandit_type", "pt_sea_raider_lair"),
	 ],
	"The raiders are likely to have laid up their ships in a well-concealed cove, somewhere along the coastline, preferably next to a small stream where they have some water. The best way to discover its location would be to find a group of sea raiders who appear to be heading back to their base to resupply, and follow them.", "merchant_quest_track_bandit_lair_choice",
   []],

  [anyone,"destroy_lair_quest_brief", [
     (eq,"$random_quest_no", "qst_destroy_bandit_lair"),
	 (quest_get_slot, ":bandit_lair", "qst_destroy_bandit_lair", slot_quest_target_party),
	 (party_get_template_id, ":bandit_type", ":bandit_lair"),
	 (eq, ":bandit_type", "pt_desert_bandit_lair"),
	 ],
	"Bandits such as these usually establish their hideouts in the foothills on the edge of the desert, often in a canyon near a spring. This gives them both water and concealment. The best way to discover its location would be to find a group of desert bandits who appear to be heading back to their base to resupply, and follow them.", "merchant_quest_track_bandit_lair_choice",
   []],

  [anyone,"destroy_lair_quest_brief", [
     (eq,"$random_quest_no", "qst_destroy_bandit_lair"),
	 (quest_get_slot, ":bandit_lair", "qst_destroy_bandit_lair", slot_quest_target_party),
	 (party_get_template_id, ":bandit_type", ":bandit_lair"),
	 (eq, ":bandit_type", "pt_mountain_bandit_lair"),
	 ],
	"Bandits such as these will usually establish a base in the highlands, often on an steep ledge where they have a view of the surrounding countryside. This makes them difficult to surprise. The best way to discover its location would be to find a group of mountain bandits who appear to be heading back to their base to resupply, and follow them.", "merchant_quest_track_bandit_lair_choice",
   []],

  [anyone,"destroy_lair_quest_brief", [
     (eq,"$random_quest_no", "qst_destroy_bandit_lair"),
	 (quest_get_slot, ":bandit_lair", "qst_destroy_bandit_lair", slot_quest_target_party),
	 (party_get_template_id, ":bandit_type", ":bandit_lair"),
	 (eq, ":bandit_type", "pt_forest_bandit_lair"),
	 ],
	"Bandits such as these will usually set up their encampments deep in the woods, sometimes in the middle of a swamp. The best way to discover its location would be to find a group of forest bandits who appear to be heading back to their base to resupply, and follow them.", "merchant_quest_track_bandit_lair_choice",
   []],

  [anyone,"destroy_lair_quest_brief", [
     (eq,"$random_quest_no", "qst_destroy_bandit_lair"),
	 (quest_get_slot, ":bandit_lair", "qst_destroy_bandit_lair", slot_quest_target_party),
	 (party_get_template_id, ":bandit_type", ":bandit_lair"),
	 (eq, ":bandit_type", "pt_steppe_bandit_lair"),
	 ],
	"Bandits such as these will usually set up their encampments in the woodland on the steppe, where they have some concealment. The best way to discover its location would be to find a group of steppe bandits who appear to be heading back to their base to resupply, and follow them.", "merchant_quest_track_bandit_lair_choice",
   []],

  [anyone,"destroy_lair_quest_brief", [
     (eq,"$random_quest_no", "qst_destroy_bandit_lair"),
	 (quest_get_slot, ":bandit_lair", "qst_destroy_bandit_lair", slot_quest_target_party),
	 (party_get_template_id, ":bandit_type", ":bandit_lair"),
	 (eq, ":bandit_type", "pt_taiga_bandit_lair"),
	 ],
	"Bandits such as these will usually set up their encampments deep in the woods. The best way to discover its location would be to find a group of tundra bandits who appear to be heading back to their base to resupply, and follow them.", "merchant_quest_track_bandit_lair_choice",
   []],

  [anyone|plyr,"merchant_quest_track_bandit_lair_choice", [], "Aye, I'll do it.", "merchant_quest_destroy_lair_brief", [

    (quest_get_slot, ":target_party", "qst_destroy_bandit_lair", slot_quest_target_party),
    (party_set_flags, ":target_party", pf_quest_party, 1),
#    (quest_set_slot, "qst_track_down_bandits", slot_quest_target_party, "$g_bandit_party_for_bounty"), #WHY IS THIS COMMENTED OUT?
    (quest_set_slot, "qst_destroy_bandit_lair", slot_quest_giver_troop, "$g_talk_troop"),
    (quest_set_slot, "qst_destroy_bandit_lair", slot_quest_giver_center, "$g_encountered_party"),

    (str_store_troop_name_link, s11, "$g_talk_troop"),
    (str_store_party_name, s9, ":target_party"),
    (setup_quest_text, "qst_destroy_bandit_lair"),
    (str_store_string, s2, "str_bandit_lair_quest_description"),
    (call_script, "script_start_quest", "qst_destroy_bandit_lair", "$g_talk_troop"),
  ]],

  [anyone|plyr,"merchant_quest_track_bandit_lair_choice", [], "I'm afraid I can't take the job at the moment.", "lord_pretalk",[
  (quest_set_slot, "qst_destroy_bandit_lair", slot_quest_dont_give_again_remaining_days, 1),
  ]],

   [anyone,"merchant_quest_destroy_lair_brief", [
  ], "Very good. We will await word of your success.", "close_window",
   [
   (assign, "$g_leave_encounter", 1),
   ]],



  [anyone,"merchant_quest_requested", [
  (eq,"$random_merchant_quest_no", "qst_track_down_bandits"),
  ], "We have heard that {s4}, some travellers on the road {reg4?to:from} {s5} were attacked by {s7}.", "merchant_quest_brief",
   [
   (call_script,"script_merchant_road_info_to_s42", "$g_encountered_party"),
   (assign, "$g_bandit_party_for_bounty", reg0),
   (assign, ":origin", reg1),
   (assign, ":destination", reg2),
   (assign, ":hours_ago", reg3),
   (try_begin),
	(lt, ":hours_ago", 24),
	(str_store_string, s4, "str_a_short_while_ago"),
   (else_try),
	(lt, ":hours_ago", 48),
	(str_store_string, s4, "str_one_day_ago"),
   (else_try),
 	(lt, ":hours_ago", 72),
	(str_store_string, s4, "str_two_days_day_ago"),
   (else_try),
 	(lt, ":hours_ago", 144),
	(str_store_string, s4, "str_earlier_this_week"),
   (else_try),
	(str_store_string, s4, "str_about_a_week_ago"),
   (try_end),


   (try_begin),
	(eq, ":origin", "$g_encountered_party"),
	(str_store_party_name, s5, ":destination"),
	(assign, reg4, 0),
   (else_try),
	(eq, ":destination", "$g_encountered_party"),
	(str_store_party_name, s5, ":origin"),
	(assign, reg4, 1),
   (try_end),

   (str_store_party_name, s7, "$g_bandit_party_for_bounty"),
   ###
   (quest_set_slot, "qst_track_down_bandits", slot_quest_target_party, "$g_bandit_party_for_bounty"),
   ]],

  [anyone,"merchant_quest_brief", [
     (eq,"$random_merchant_quest_no", "qst_track_down_bandits"),
     (quest_get_slot, ":target_party", "qst_track_down_bandits", slot_quest_target_party),
	 (str_store_party_name, s4, ":target_party"),
	 ],
	"We would like you to track these {s4} down. The merchants of the town were able to get a description of their leader, and have put together a bounty. If you can hunt them down and destroy them, we'll make it worth your while...", "merchant_quest_track_bandits_choice",
   []],

  [anyone|plyr,"merchant_quest_track_bandits_choice", [], "Aye, I'll do it.", "merchant_quest_track_bandits_brief", [
    (assign, "$merchant_offered_quest", 0),
	(assign,"$merchant_quest_last_offerer", "$g_talk_troop"),

    (quest_get_slot, ":target_party", "qst_track_down_bandits", slot_quest_target_party),
    (party_set_flags, ":target_party", pf_quest_party, 1),
#    (quest_set_slot, "qst_track_down_bandits", slot_quest_target_party, "$g_bandit_party_for_bounty"), #WHY IS THIS COMMENTED OUT?
    (quest_set_slot, "qst_track_down_bandits", slot_quest_giver_troop, "$g_talk_troop"),
    (quest_set_slot, "qst_track_down_bandits", slot_quest_giver_center, "$g_encountered_party"),

    (str_store_party_name_link, s8, "$g_encountered_party"),
    (str_store_party_name, s9, ":target_party"),
    (setup_quest_text, "qst_track_down_bandits"),
    (str_store_string, s2, "str_track_down_the_s9_who_attacked_travellers_near_s8_then_report_back_to_the_town"),
    (call_script, "script_start_quest", "qst_track_down_bandits", "$g_talk_troop"),
  ]],


   [anyone,"merchant_quest_track_bandits_brief", [
  ], "Very good. The band may not have lingered long in the area, but chances are that they will be spotted by other travellers on the road.", "close_window",
   [
   (assign, "$g_leave_encounter", 1),
   ]],

  [anyone|plyr,"merchant_quest_track_bandits_choice", [], "I'm afraid I can't take the job at the moment.", "merchant_quest_stall",[
  (quest_set_slot, "qst_track_down_bandits", slot_quest_dont_give_again_remaining_days, 1),
  ]],



  #Random quests begin here. Deliver wine:
  [anyone,"merchant_quest_requested", [(eq,"$random_merchant_quest_no","qst_deliver_wine"),], "You're looking for a job?\
 Actually I was looking for someone to deliver some {s4}.\
 Perhaps you can do that...", "merchant_quest_brief",
   [(quest_get_slot, ":quest_target_item", "qst_deliver_wine", slot_quest_target_item),
    (str_store_item_name, s4, ":quest_target_item"),
    ]],

  [anyone,"merchant_quest_brief", [(eq,"$random_merchant_quest_no","qst_deliver_wine"),
  (quest_get_slot, ":quest_target_item", "qst_deliver_wine", slot_quest_target_item),
  (this_or_next|eq, ":quest_target_item", "itm_wine"),
  (this_or_next|eq, ":quest_target_item", "itm_ale"),
  (is_between, ":quest_target_item", food_begin, food_end),
  ],
   "I have a cargo of {s6} that needs to be delivered to the tavern in {s4}.\
 If you can take {reg5} units of {s6} to {s4} in 7 days before any goes bad, you may earn {reg8} denars.\
 What do you say?", "merchant_quest_brief_deliver_wine",
   [(quest_get_slot, reg5, "qst_deliver_wine", slot_quest_target_amount),
    (quest_get_slot, reg8, "qst_deliver_wine", slot_quest_gold_reward),
    (quest_get_slot, ":quest_target_item", "qst_deliver_wine", slot_quest_target_item),
    (quest_get_slot, ":quest_target_center", "qst_deliver_wine", slot_quest_target_center),
    (str_store_troop_name, s9, "$g_talk_troop"),
    (str_store_party_name_link, s3, "$g_encountered_party"),
    (str_store_party_name_link, s4, ":quest_target_center"),
    (str_store_item_name, s6, ":quest_target_item"),
    (setup_quest_text,"qst_deliver_wine"),
    #SB : temp item count
    (item_get_max_ammo, ":max_amount", ":quest_target_item"),
    (store_div, "$temp", reg5, ":max_amount"),
    (str_store_string, s2, "@{s9} of {s3} asked you to deliver {reg5} units of {s6} to the tavern in {s4} in 7 days."),
    #s2 should not be changed until the decision is made
   ]],

  [anyone,"merchant_quest_brief", [(eq,"$random_merchant_quest_no","qst_deliver_wine")],
   "I have a shipment of {s6} that needs to be delivered to the goods merchant in {s4}.\
 If you can take {reg5} units of {s6} to {s4} in 7 days, you may earn {reg8} denars.\
 What do you say?", "merchant_quest_brief_deliver_wine",
   [(quest_get_slot, reg5, "qst_deliver_wine", slot_quest_target_amount),
    (quest_get_slot, reg8, "qst_deliver_wine", slot_quest_gold_reward),
    (quest_get_slot, ":quest_target_item", "qst_deliver_wine", slot_quest_target_item),
    (quest_get_slot, ":quest_target_center", "qst_deliver_wine", slot_quest_target_center),
    (str_store_troop_name, s9, "$g_talk_troop"),
    (str_store_party_name_link, s3, "$g_encountered_party"),
    (str_store_party_name_link, s4, ":quest_target_center"),
    (str_store_item_name, s6, ":quest_target_item"),
    #SB : temp item count
    (item_get_max_ammo, ":max_amount", ":quest_target_item"),
    (store_div, "$temp", reg5, ":max_amount"),
    (setup_quest_text,"qst_deliver_wine"),
    (str_store_string, s2, "@{s9} of {s3} asked you to deliver {reg5} units of {s6} to the merchant's store in {s4} in 7 days."),
    #s2 should not be changed until the decision is made
   ]],
  [anyone|plyr,"merchant_quest_brief_deliver_wine", [(store_free_inventory_capacity,":capacity"),
                                                     (ge, ":capacity", "$temp"),
                                                     ],
      "Alright. I will make the delivery.", "merchant_quest_taken",
   [
    # (quest_get_slot, ":quest_target_amount", "qst_deliver_wine", slot_quest_target_amount),
    (quest_get_slot, ":quest_target_center", "qst_deliver_wine", slot_quest_target_center),
    (quest_get_slot, ":quest_target_item", "qst_deliver_wine", slot_quest_target_item),
    (troop_add_items, "trp_player", ":quest_target_item", "$temp"), #SB : use item count
    (call_script, "script_start_quest", "qst_deliver_wine", "$g_talk_troop"),
    #SB : magically empty stock of items at target center once quest is taken
    (try_for_range, ":slots", slot_town_tavernkeeper, slot_center_player_relation),
      (party_get_slot, ":troop_no", ":quest_target_center", ":slots"),
      (gt, ":troop_no", 0),
      (troop_get_inventory_capacity, ":inv_cap", ":troop_no"),
      (try_for_range, ":i_slot", 10, ":inv_cap"),
        (troop_get_inventory_slot, ":item_id", ":troop_no", ":i_slot"),
        (eq, ":item_id", ":quest_target_item"),
        (troop_set_inventory_slot, ":troop_no", ":i_slot", -1),
      (try_end),
    (try_end),
    
    ]],

  [anyone|plyr,"merchant_quest_brief_deliver_wine", [], "I am afraid I can't carry all that cargo now.", "merchant_quest_stall",[]],

#escort merchant caravan:
  [anyone,"merchant_quest_requested", [(eq,"$random_merchant_quest_no","qst_escort_merchant_caravan")], "You're looking for a job?\
 Actually I was looking for someone to escort a caravan.\
 Perhaps you can do that...", "merchant_quest_brief",
   []],

  [anyone,"merchant_quest_brief", [(eq, "$random_merchant_quest_no", "qst_escort_merchant_caravan")],
   "I am going to send a caravan of goods to {s8}.\
 However with all those bandits and deserters on the roads, I don't want to send them out without an escort.\
 If you can lead that caravan to {s8} in 15 days, you will earn {reg8} denars.\
 Of course your party needs to be at least {reg4} strong to offer them any protection.", "escort_merchant_caravan_quest_brief",
   [(quest_get_slot, reg8, "qst_escort_merchant_caravan", slot_quest_gold_reward),
    (quest_get_slot, reg4, "qst_escort_merchant_caravan", slot_quest_target_amount),
    (quest_get_slot, ":quest_target_center", "qst_escort_merchant_caravan", slot_quest_target_center),
    (str_store_party_name, s8, ":quest_target_center"),
   ]],

  [anyone|plyr,"escort_merchant_caravan_quest_brief", [(store_party_size_wo_prisoners, ":party_size", "p_main_party"),
                                                       (quest_get_slot, ":quest_target_amount", "qst_escort_merchant_caravan", slot_quest_target_amount),
                                                       (ge,":party_size",":quest_target_amount"),
                                                       ],
   "Alright. I will escort the caravan.", "merchant_quest_taken",
   [(quest_get_slot, ":quest_target_center", "qst_escort_merchant_caravan", slot_quest_target_center),
    (set_spawn_radius, 1),
    (spawn_around_party,"$g_encountered_party","pt_merchant_caravan"),
    (assign, ":quest_target_party", reg0),
    (party_set_ai_behavior, ":quest_target_party", ai_bhvr_track_party),
    (party_set_ai_object, ":quest_target_party", "p_main_party"),
    (party_set_flags, ":quest_target_party", pf_default_behavior, 0),
    (quest_set_slot, "qst_escort_merchant_caravan", slot_quest_target_party, ":quest_target_party"),
    (quest_set_slot, "qst_escort_merchant_caravan", slot_quest_current_state, 0),
    (str_store_party_name_link, s8, ":quest_target_center"),
    (setup_quest_text, "qst_escort_merchant_caravan"),
    (str_store_string, s2, "@Escort the merchant caravan to the town of {s8}."),
    (call_script, "script_start_quest", "qst_escort_merchant_caravan", "$g_talk_troop"),
    #SB : does this actually expire properly?
    ]],

  [anyone|plyr,"escort_merchant_caravan_quest_brief", [(store_party_size_wo_prisoners, ":party_size", "p_main_party"),
                                                       (quest_get_slot, ":quest_target_amount", "qst_escort_merchant_caravan", slot_quest_target_amount),
                                                       (lt,":party_size",":quest_target_amount"),],
   "I am afraid I don't have that many soldiers with me.", "merchant_quest_stall",[]],
  [anyone|plyr,"escort_merchant_caravan_quest_brief", [(store_party_size_wo_prisoners, ":party_size", "p_main_party"),
                                                       (quest_get_slot, ":quest_target_amount", "qst_escort_merchant_caravan", slot_quest_target_amount),
                                                       (ge,":party_size",":quest_target_amount"),],
   "Sorry. I can't do that right now", "merchant_quest_stall",[]],

  [party_tpl|pt_merchant_caravan,"start", [(quest_get_slot, ":quest_target_party", "qst_escort_merchant_caravan", slot_quest_target_party),
                                           (eq,"$g_encountered_party",":quest_target_party"),
                                           (quest_slot_eq,"qst_escort_merchant_caravan", slot_quest_current_state, 2),
                                           ],
   "We can cover the rest of the way ourselves. Thanks.", "close_window",[(assign, "$g_leave_encounter", 1)]],

  [party_tpl|pt_merchant_caravan,"start", [(quest_get_slot, ":quest_target_party", "qst_escort_merchant_caravan", slot_quest_target_party),
                                           (eq,"$g_encountered_party",":quest_target_party"),
                                           (quest_get_slot, ":quest_target_center", "qst_escort_merchant_caravan", slot_quest_target_center),
                                           (store_distance_to_party_from_party, ":dist", ":quest_target_center",":quest_target_party"),
                                           (lt,":dist",4),
                                           (quest_slot_eq, "qst_escort_merchant_caravan", slot_quest_current_state, 1),
                                           ],
   "Well, we have almost reached {s21}. We can cover the rest of the way ourselves.\
 Here's your pay... {reg14} denars.\
 Thanks for escorting us. Good luck.", "close_window",[(quest_get_slot, ":quest_target_party", "qst_escort_merchant_caravan", slot_quest_target_party),
                                                       (quest_get_slot, ":quest_target_center", "qst_escort_merchant_caravan", slot_quest_target_center),
                                                       (quest_get_slot, ":quest_giver_center", "qst_escort_merchant_caravan", slot_quest_giver_center),
                                                       (quest_get_slot, ":quest_gold_reward", "qst_escort_merchant_caravan", slot_quest_gold_reward),
                                                       (party_set_ai_behavior, ":quest_target_party", ai_bhvr_travel_to_party),
                                                       (party_set_ai_object, ":quest_target_party", ":quest_target_center"),
                                                       (party_set_flags, ":quest_target_party", pf_default_behavior, 0),
                                                       (str_store_party_name, s21, ":quest_target_center"),
                                                       (call_script, "script_change_player_relation_with_center", ":quest_giver_center", 1),
                                                       (call_script, "script_end_quest","qst_escort_merchant_caravan"),
                                                       (quest_set_slot, "qst_escort_merchant_caravan", slot_quest_current_state, 2),
                                                       (call_script, "script_troop_add_gold", "trp_player", ":quest_gold_reward"),
                                                       (assign, ":xp_reward", ":quest_gold_reward"),
                                                       (val_mul, ":xp_reward", 5),
                                                       (val_add, ":xp_reward", 100),
                                                       (add_xp_as_reward, ":xp_reward"),
                                                       (call_script, "script_change_troop_renown", "trp_player", 2),
                                                       (try_begin), #SB : add disguise as reward
                                                         (eq, "$g_dplmc_player_disguise", 1), #enabled
                                                         (call_script, "script_acquire_disguise", disguise_guard),
                                                       (try_end),
                                                       (assign, reg14, ":quest_gold_reward"),
                                                       (assign, "$g_leave_encounter", 1),
                                                       ]],

  [party_tpl|pt_merchant_caravan,"start", [(quest_get_slot, ":quest_target_party", "qst_escort_merchant_caravan", slot_quest_target_party),
                                           (eq,"$g_encountered_party",":quest_target_party"),
                                           (quest_slot_eq, "qst_escort_merchant_caravan", slot_quest_current_state, 0),
                                           ],
   "Greetings. You must be our escort, right?", "merchant_caravan_intro_1",[(quest_set_slot, "qst_escort_merchant_caravan", slot_quest_current_state, 1),]],

  [anyone|plyr,"merchant_caravan_intro_1", [], "Yes. My name is {playername}. I will lead you to {s1}.",
   "merchant_caravan_intro_2",[(quest_get_slot, ":quest_target_center", "qst_escort_merchant_caravan", slot_quest_target_center),
                               (str_store_party_name, s1, ":quest_target_center"),
                               ]],

  [anyone,"merchant_caravan_intro_2", [], "Well, It is good to know we won't travel alone. What do you want us to do now?", "escort_merchant_caravan_talk",[]],

  [party_tpl|pt_merchant_caravan,"start", [(quest_get_slot, ":quest_target_party", "qst_escort_merchant_caravan", slot_quest_target_party),
                                           (eq, "$g_encountered_party", ":quest_target_party"),
                                           ],
   "Eh. We've made it this far... What do you want us to do?", "escort_merchant_caravan_talk",[]],

  [anyone|plyr,"escort_merchant_caravan_talk", [], "You follow my lead. I'll take you through a safe route.", "merchant_caravan_follow_lead",[]],
  [anyone,"merchant_caravan_follow_lead", [], "Alright. We'll be right behind you.", "close_window",[
    (party_set_ai_behavior, "$g_encountered_party", ai_bhvr_escort_party),
    (party_set_flags, "$g_encountered_party", pf_default_behavior, 0),
    (party_set_ai_object, "$g_encountered_party", "p_main_party"),
    (assign, "$g_leave_encounter", 1)]],
  [anyone|plyr,"escort_merchant_caravan_talk", [], "You stay here for a while. I'll go ahead and check the road.", "merchant_caravan_stay_here",[]],
  [anyone,"merchant_caravan_stay_here", [], "Alright. We'll be waiting here for you.", "close_window",[
    (party_set_ai_behavior, "$g_encountered_party", ai_bhvr_hold),
    (party_set_flags, "$g_encountered_party", pf_default_behavior, 0),
    (assign, "$g_leave_encounter", 1)]],
#  [anyone|plyr,"escort_merchant_caravan_talk", [], "You go ahead to {s1}. I'll catch up with you.", "merchant_caravan_go_to_destination",[]],
#  [anyone,"merchant_caravan_go_to_destination", [], "Alright. But stay close.", "close_window",[[assign,"escort_merchant_caravan_mode",2]]],


# Troublesome bandits:
  [anyone,"merchant_quest_requested", [(eq, "$random_merchant_quest_no", "qst_troublesome_bandits")],
 "Actually, I was looking for an able adventurer like you.\
 There's this group of particularly troublesome bandits.\
 They have infested the vicinity of our town and are preying on my caravans.\
 They have avoided all the soldiers and the militias up to now.\
 If someone doesn't stop them soon, I am going to be ruined...", "merchant_quest_brief",
   []],

  [anyone,"merchant_quest_brief", [(eq,"$random_merchant_quest_no", "qst_troublesome_bandits")],
  "I will pay you {reg8} denars if you hunt down those troublesome bandits.\
 It's dangerous work. But I believe that you are the {man/one} for it.\
 What do you say?", "troublesome_bandits_quest_brief",[(quest_get_slot, reg8, "qst_troublesome_bandits", slot_quest_gold_reward),
                                                       ]],

  [anyone|plyr,"troublesome_bandits_quest_brief", [],
   "Very well. I will hunt down those bandits.", "merchant_quest_taken_bandits",
   [(set_spawn_radius,7),
    (quest_get_slot, ":quest_giver_center", "qst_troublesome_bandits", slot_quest_giver_center),
    (spawn_around_party,":quest_giver_center","pt_troublesome_bandits"),
    (quest_set_slot, "qst_troublesome_bandits", slot_quest_target_party, reg0),
    (store_num_parties_destroyed,"$qst_troublesome_bandits_eliminated","pt_troublesome_bandits"),
    (store_num_parties_destroyed_by_player, "$qst_troublesome_bandits_eliminated_by_player", "pt_troublesome_bandits"),
    (str_store_troop_name, s9, "$g_talk_troop"),
    (str_store_party_name_link, s4, "$g_encountered_party"),
    (setup_quest_text,"qst_troublesome_bandits"),
    (str_store_string, s2, "@Merchant {s9} of {s4} asked you to hunt down the troublesome bandits in the vicinity of the town."),
    (call_script, "script_start_quest", "qst_troublesome_bandits", "$g_talk_troop"),
    ]],
  [anyone,"merchant_quest_taken_bandits", [], "You will? Splendid. Good luck to you.", "close_window",
   []],

  [anyone|plyr,"troublesome_bandits_quest_brief", [],
   "Sorry. I don't have time for this right now.", "merchant_quest_stall",[]],

# Kidnapped girl:
  [anyone,"merchant_quest_requested", [(eq, "$random_merchant_quest_no", "qst_kidnapped_girl")],
 "Actually, I was looking for a reliable {man/helper} that can undertake an important mission.\
 A group of bandits have kidnapped the daughter of a friend of mine and are holding her for ransom.\
 My friend is ready to pay them, but we still need\
 someone to take the money to those rascals and bring the girl back to safety.", "merchant_quest_brief",
   []],

  [anyone,"merchant_quest_brief", [(eq, "$random_merchant_quest_no", "qst_kidnapped_girl")],
  "The amount the bandits ask as ransom is {reg12} denars.\
 I will give you that money once you accept to take the quest.\
 You have 15 days to take the money to the bandits who will be waiting near the village of {s4}.\
 Those bastards said that they are going to kill the poor girl if they don't get the money by that time.\
 You will get your pay of {reg8} denars when you bring the girl safely back here.",
   "kidnapped_girl_quest_brief",[(quest_get_slot, ":quest_target_center", "qst_kidnapped_girl", slot_quest_target_center),
                                 (str_store_party_name, s4, ":quest_target_center"),
                                 (quest_get_slot, reg8, "qst_kidnapped_girl", slot_quest_gold_reward),
                                 (quest_get_slot, reg12, "qst_kidnapped_girl", slot_quest_target_amount),
                                 ]],

  [anyone|plyr,"kidnapped_girl_quest_brief", [],
      "All right. I will take the ransom money to the bandits and bring back the girl.",
   "kidnapped_girl_quest_taken",[(set_spawn_radius, 4),
                                 (quest_get_slot, ":quest_target_center", "qst_kidnapped_girl", slot_quest_target_center),
                                 (quest_get_slot, ":quest_target_amount", "qst_kidnapped_girl", slot_quest_target_amount),
                                 (spawn_around_party,":quest_target_center","pt_bandits_awaiting_ransom"),
                                 (assign, ":quest_target_party", reg0),
                                 (quest_set_slot, "qst_kidnapped_girl", slot_quest_target_party, ":quest_target_party"),
                                 (party_set_ai_behavior, ":quest_target_party", ai_bhvr_hold),
                                 (party_set_ai_object, ":quest_target_party", "p_main_party"),
                                 (party_set_flags, ":quest_target_party", pf_default_behavior, 0),
                                 (call_script, "script_troop_add_gold", "trp_player", ":quest_target_amount"),
                                 (assign, reg12, ":quest_target_amount"),
                                 (str_store_troop_name, s1, "$g_talk_troop"),
                                 (str_store_party_name_link, s4, "$g_encountered_party"),
                                 (str_store_party_name_link, s3, ":quest_target_center"),
                                 (setup_quest_text, "qst_kidnapped_girl"),
                                 (str_store_string, s2, "@Guildmaster of {s4} gave you {reg12} denars to pay the ransom of a girl kidnapped by bandits.\
 You are to meet the bandits near {s3} and pay them the ransom fee.\
 After that you are to bring the girl back to {s4}."),
                                 (call_script, "script_start_quest", "qst_kidnapped_girl", "$g_talk_troop"),
                                 ]],

  [anyone,"kidnapped_girl_quest_taken", [], "Good. I knew we could trust you at this.\
 Here is the ransom money, {reg12} denars.\
 Count it before taking it.\
 And please, don't attempt to do anything rash.\
 Keep in mind that the girl's well being is more important than anything else...", "close_window",
   []],

  [anyone|plyr,"kidnapped_girl_quest_brief", [],
   "Sorry. I don't have time for this right now.", "merchant_quest_stall",[]],


  [trp_kidnapped_girl,"start",
   [
     (eq, "$talk_context", tc_entering_center_quest_talk),
     ],
   "Thank you so much for bringing me back!\
  I can't wait to see my family. Good-bye.",
   "close_window",
   [(remove_member_from_party, "trp_kidnapped_girl"),
    (quest_set_slot, "qst_kidnapped_girl", slot_quest_current_state, 4),
    ]],



  [trp_kidnapped_girl|plyr,"kidnapped_girl_liberated_map", [], "Yes. Come with me. We are going home.", "kidnapped_girl_liberated_map_2a",[]],
  [trp_kidnapped_girl,"kidnapped_girl_liberated_map_2a", [(neg|party_can_join)], "Unfortunately. You do not have room in your party for me.", "close_window",[(assign, "$g_leave_encounter",1)]],
  [trp_kidnapped_girl,"kidnapped_girl_liberated_map_2a", [], "Oh really? Thank you so much!",
   "close_window", [(party_join),
                    (quest_set_slot, "qst_kidnapped_girl", slot_quest_current_state, 3),
                    (assign, "$g_leave_encounter",1)]],
  [trp_kidnapped_girl|plyr,"kidnapped_girl_liberated_map", [], "Wait here a while longer. I'll come back for you.", "kidnapped_girl_liberated_map_2b",[]],
  [trp_kidnapped_girl,"kidnapped_girl_liberated_map_2b", [], "Oh, please {sir/madam}, do not leave me here all alone!", "close_window",[(assign, "$g_leave_encounter",1)]],


  [trp_kidnapped_girl,"start", [],
   "Oh {sir/madam}. Thank you so much for rescuing me. Will you take me to my family now?", "kidnapped_girl_liberated_map",[]],

  [trp_kidnapped_girl|plyr,"kidnapped_girl_liberated_battle", [], "Yes. Come with me. We are going home.", "kidnapped_girl_liberated_battle_2a",[]],
  [trp_kidnapped_girl,"kidnapped_girl_liberated_battle_2a", [(neg|hero_can_join, "p_main_party")], "Unfortunately. You do not have room in your party for me.", "kidnapped_girl_liberated_battle_2b",[]],
  [trp_kidnapped_girl,"kidnapped_girl_liberated_battle_2a", [], "Oh really? Thank you so much!",
   "close_window",[(party_add_members, "p_main_party","trp_kidnapped_girl",1),
                   (quest_set_slot, "qst_kidnapped_girl", slot_quest_current_state, 3),
                   ]],
  [trp_kidnapped_girl|plyr,"kidnapped_girl_liberated_battle", [], "Wait here a while longer. I'll come back for you.", "kidnapped_girl_liberated_battle_2b",[]],
  [trp_kidnapped_girl,"kidnapped_girl_liberated_battle_2b", [], "Oh, please {sir/madam}, do not leave me here all alone!",
   "close_window", [(add_companion_party,"trp_kidnapped_girl"),
                    (assign, "$g_leave_encounter",1)]],

  [trp_kidnapped_girl,"start", [], "Can I come with you now?", "kidnapped_girl_liberated_map",[]],


  [party_tpl|pt_bandits_awaiting_ransom,"start", [(quest_slot_eq, "qst_kidnapped_girl", slot_quest_current_state, 0),],
   "Are you the one that brought the ransom?\
 Quick, give us the money now.", "bandits_awaiting_ransom_intro_1",[(quest_set_slot, "qst_kidnapped_girl", slot_quest_current_state, 1),]],
  [party_tpl|pt_bandits_awaiting_ransom,"start", [(quest_slot_eq, "qst_kidnapped_girl", slot_quest_current_state, 1),],
   "You came back?\
 Quick, give us the money now.", "bandits_awaiting_ransom_intro_1",[]],
  [party_tpl|pt_bandits_awaiting_ransom|plyr, "bandits_awaiting_ransom_intro_1", [(store_troop_gold, ":cur_gold"),
                                                                                  (quest_get_slot, ":quest_target_amount", "qst_kidnapped_girl", slot_quest_target_amount),
                                                                                  (ge, ":cur_gold", ":quest_target_amount")
                                                                                  ],
   "Here, take the money. Just set the girl free.", "bandits_awaiting_ransom_pay",[]],
  [party_tpl|pt_bandits_awaiting_ransom, "bandits_awaiting_ransom_pay", [],
   "Heh. You've brought the money all right.\
 You can take the girl now.\
 It was a pleasure doing business with you...", "close_window",
   [(quest_get_slot, ":quest_target_amount", "qst_kidnapped_girl", slot_quest_target_amount),
    (quest_get_slot, ":quest_target_party", "qst_kidnapped_girl", slot_quest_target_party),
    (quest_get_slot, ":quest_target_center", "qst_kidnapped_girl", slot_quest_target_center),
    (troop_remove_gold, "trp_player", ":quest_target_amount"),
    (remove_member_from_party, "trp_kidnapped_girl", ":quest_target_party"),
    (set_spawn_radius, 1),
    (spawn_around_party, ":quest_target_party", "pt_kidnapped_girl"),
    (assign, ":girl_party", reg0),
    (party_set_ai_behavior, ":girl_party", ai_bhvr_hold),
    (party_set_flags, ":girl_party", pf_default_behavior, 0),
    (quest_set_slot, "qst_kidnapped_girl", slot_quest_current_state, 2),
    (party_set_ai_behavior, ":quest_target_party", ai_bhvr_travel_to_party),
    (party_set_ai_object, ":quest_target_party", ":quest_target_center"),
    (party_set_flags, ":quest_target_party", pf_default_behavior, 0),
    (add_gold_to_party, ":quest_target_amount", ":quest_target_party"), #does this work?
    #SB : objection
    (call_script, "script_objectionable_action", tmt_aristocratic, "str_pay_bandits"),
    (assign, "$g_leave_encounter",1),
    ]],

  [anyone|plyr, "bandits_awaiting_ransom_intro_1", [],
   "No way! You release the girl first.", "bandits_awaiting_ransom_b",[
        #SB : add animation
        (call_script, "script_encounter_agent_draw_weapon"),
   ]],
  [anyone, "bandits_awaiting_ransom_b", [],
   "You fool! Stop playing games and give us the money! ", "bandits_awaiting_ransom_b2",[]],
  [anyone|plyr, "bandits_awaiting_ransom_b2", [(store_troop_gold, ":cur_gold"),
                                               (quest_get_slot, ":quest_target_amount", "qst_kidnapped_girl", slot_quest_target_amount),
                                               (ge, ":cur_gold", ":quest_target_amount")],
   "All right. Here's your money. Let the girl go now.", "bandits_awaiting_ransom_pay",[]],
  [anyone|plyr, "bandits_awaiting_ransom_b2", [],
   "I had left the money in a safe place. Let me go fetch it.", "bandits_awaiting_ransom_no_money",[]],
  [anyone, "bandits_awaiting_ransom_no_money", [],
   "Are you testing our patience or something?  Go and bring that money here quickly.", "close_window",[(assign, "$g_leave_encounter",1)]],
  [anyone|plyr, "bandits_awaiting_ransom_b2", [],
   "I have no intention to pay you anything. I demand that you release the girl now!", "bandits_awaiting_ransom_fight",[]],
  [anyone, "bandits_awaiting_ransom_fight", [],
   "You won't be demanding anything when you're dead.", "close_window",[(encounter_attack),(assign,"$cant_leave_encounter", 1),]],
#SB : fix attack strings
  [party_tpl|pt_bandits_awaiting_ransom,"start", [(quest_slot_ge, "qst_kidnapped_girl", slot_quest_current_state, 2),],
   "What's it? You have given us the money. We have no more business.", "bandits_awaiting_remeet",[]],
  [anyone|plyr,"bandits_awaiting_remeet", [],
   "Sorry to bother you. I'll be on my way now.", "close_window",[(assign, "$g_leave_encounter",1)]],
  [anyone|plyr,"bandits_awaiting_remeet", [],
   "We have one more business. You'll give the money back to me.", "bandits_awaiting_remeet_2",[]],
  [anyone,"bandits_awaiting_remeet_2", [],
   "Oh, that business! Of course. Let us get down to it.", "close_window",[
    #SB : add animation
    (call_script, "script_encounter_agent_draw_weapon"),
    (encounter_attack),(assign,"$cant_leave_encounter", 1),]],

  [party_tpl|pt_kidnapped_girl,"start", [],
   "Oh {sir/madam}. Thank you so much for rescuing me. Will you take me to my family now?", "kidnapped_girl_encounter_1",[]],
  [anyone|plyr,"kidnapped_girl_encounter_1", [], "Yes. Come with me. I'll take you home.", "kidnapped_girl_join",[]],
  [anyone,"kidnapped_girl_join", [(neg|party_can_join)], "Unfortunately. You do not have room in your party for me.", "close_window",[(assign, "$g_leave_encounter",1)]],
  [anyone,"kidnapped_girl_join", [], "Oh, thank you so much!",
   "close_window",[(party_join),
                   (quest_set_slot, "qst_kidnapped_girl", slot_quest_current_state, 3),
                   (assign, "$g_leave_encounter",1)]],
  [anyone|plyr,"kidnapped_girl_encounter_1", [], "Wait here a while longer. I'll come back for you.", "kidnapped_girl_wait",[]],
  [anyone,"kidnapped_girl_wait", [], "Oh, please {sir/madam}, do not leave me here all alone!", "close_window",[(assign, "$g_leave_encounter",1)]],

  [anyone|plyr,"merchant_quest_about_job_2", [(store_partner_quest, ":partner_quest"),
                                              (eq, ":partner_quest", "qst_kidnapped_girl"),
                                              (quest_slot_eq, "qst_kidnapped_girl", slot_quest_current_state, 3),
                                              (neg|main_party_has_troop, "trp_kidnapped_girl")],
   "Unfortunately I lost the girl on the way here...", "lost_kidnapped_girl",[]],
  [anyone,"lost_kidnapped_girl", [],
   "Oh no! How am I going to tell this to my friend?", "lost_kidnapped_girl_2",[]],
  [anyone|plyr,"lost_kidnapped_girl_2", [],
   "I'm sorry. I could do nothing about it.", "lost_kidnapped_girl_3",[]],
  [anyone,"lost_kidnapped_girl_3", [],
   "You let me down {playername}. I had trusted you.\
 I will let people know of your incompetence at this task.\
 Also, I want back that {reg8} denars I gave you as the ransom fee.", "lost_kidnapped_girl_4",
   [(quest_get_slot, reg8, "qst_kidnapped_girl", slot_quest_target_amount),
    (try_for_parties, ":cur_party"),
      (party_count_members_of_type, ":num_members", ":cur_party", "trp_kidnapped_girl"),
      (gt, ":num_members", 0),
      (party_remove_members, ":cur_party", "trp_kidnapped_girl", 1),
      (party_remove_prisoners, ":cur_party", "trp_kidnapped_girl", 1),
    (try_end),
    (call_script, "script_end_quest", "qst_kidnapped_girl"),
    (call_script, "script_change_troop_renown", "trp_player", -5),
    ]],
  [anyone|plyr, "lost_kidnapped_girl_4", [(store_troop_gold,":gold"),
                                          (quest_get_slot, ":quest_target_amount", "qst_kidnapped_girl", slot_quest_target_amount),
                                          (ge,":gold",":quest_target_amount"),
                                          ],
   "Of course. Here you are...", "merchant_quest_about_job_5a",[(quest_get_slot, ":quest_target_amount", "qst_kidnapped_girl", slot_quest_target_amount),
                                                                (troop_remove_gold, "trp_player",":quest_target_amount"),
                                                                ]],
  [anyone,"merchant_quest_about_job_5a", [],
   "At least you have the decency to return the money.", "close_window",[]],
  [anyone|plyr,"lost_kidnapped_girl_4", [],
   "Sorry. I don't have that amount with me.", "merchant_quest_about_job_5b",[]],
  [anyone,"merchant_quest_about_job_5b", [],
   "Do you expect me to believe that? You are going to pay that ransom fee back! Go and bring the money now!",
   "close_window",[(quest_get_slot, ":quest_target_amount", "qst_kidnapped_girl", slot_quest_target_amount),
                   (val_add, "$debt_to_merchants_guild", ":quest_target_amount"),
                   ]],


#  Give us the money now. Quick.
# Here, take the money. Just set the girl free.
# Heh, It was a pleasure doing business with you.

# You set the girl free first. You'll have the money afterwards.
# Stop playing games.

#persuade_lords_to_make_peace
  [anyone,"merchant_quest_requested", [(eq, "$random_merchant_quest_no", "qst_persuade_lords_to_make_peace"),
                                       (quest_get_slot, ":quest_target_faction", "qst_persuade_lords_to_make_peace", slot_quest_target_faction),
                                       (quest_get_slot, ":quest_object_troop", "qst_persuade_lords_to_make_peace", slot_quest_object_troop),
                                       (quest_get_slot, ":quest_target_troop", "qst_persuade_lords_to_make_peace", slot_quest_target_troop),
                                       (str_store_troop_name_link, s12, ":quest_object_troop"),
                                       (str_store_troop_name_link, s13, ":quest_target_troop"),
                                       (str_store_faction_name_link, s14, ":quest_target_faction"),
                                       (str_store_faction_name_link, s15, "$g_encountered_party_faction"),],
   "This war between {s15} and {s14} has brought our town to the verge of ruin.\
 Our caravans get raided before they can reach their destination.\
 Our merchants are afraid to leave the safety of the town walls.\
 And as if those aren't enough, the taxes to maintain the war take away the last bits of our savings.\
 If peace does not come soon, we can not hold on for much longer.", "merchant_quest_persuade_peace_1",
   []],

  [anyone|plyr,"merchant_quest_persuade_peace_1", [], "You are right. But who can stop this madness called war?", "merchant_quest_brief",[]],
  [anyone|plyr,"merchant_quest_persuade_peace_1", [], "It is your duty to help the nobles in their war effort. You shouldn't complain about it.", "merchant_quest_persuade_peace_reject",[]],

  [anyone,"merchant_quest_persuade_peace_reject", [], "Hah. The nobles fight their wars for their greed and their dreams of glory.\
 And it is poor honest folk like us who have to bear the real burden.\
 But you obviously don't want to hear about that.", "close_window",[]],

  [anyone,"merchant_quest_brief", [(eq,"$random_merchant_quest_no","qst_persuade_lords_to_make_peace"),
  ##diplomacy start+ gender correct
  (quest_get_slot, ":quest_object_troop", "qst_persuade_lords_to_make_peace", slot_quest_object_troop),
  (call_script, "script_dplmc_store_troop_is_female", ":quest_object_troop"),
  (try_begin),
     (eq, reg0, 0),
	  (quest_get_slot, ":quest_target_troop", "qst_persuade_lords_to_make_peace", slot_quest_target_troop),
	  (call_script, "script_dplmc_store_troop_is_female", ":quest_target_troop"),
  (try_end),
  #Avoid saying "men" if either/both are female
  ],
#   "There have been attempts to reconcile the two sides and reach a settlement.\
# However, there are powerful lords on both sides whose interests lie in continuing the war.\
# These men urge all others not to heed to the word of sensible men, but to keep fighting.\
# While these leaders remain influential, no peace settlement can be reached.",
   "There have been attempts to reconcile the two sides and reach a settlement.\
 However, there are powerful lords on both sides whose interests lie in continuing the war.\
 {reg0?They:These men} urge all others not to heed to the word of sensible men, but to keep fighting.\
 While these leaders remain influential, no peace settlement can be reached.", "merchant_quest_persuade_peace_3",[]],
##diplomacy end+

  [anyone|plyr,"merchant_quest_persuade_peace_3", [], "Who are these warmongers who block the way of peace?", "merchant_quest_persuade_peace_4",[]],
  [anyone|plyr,"merchant_quest_persuade_peace_3", [], "Who are these lords you speak of?", "merchant_quest_persuade_peace_4",[]],

  [anyone,"merchant_quest_persuade_peace_4", [], "They are {s12} from {s15} and {s13} from {s14}. Until they change their mind or lose their influence,\
 there will be no chance of having peace between the two sides.", "merchant_quest_persuade_peace_5",[
       (quest_get_slot, ":quest_target_faction", "qst_persuade_lords_to_make_peace", slot_quest_target_faction),
       (quest_get_slot, ":quest_object_troop", "qst_persuade_lords_to_make_peace", slot_quest_object_troop),
       (quest_get_slot, ":quest_target_troop", "qst_persuade_lords_to_make_peace", slot_quest_target_troop),
       (str_store_troop_name_link, s12, ":quest_object_troop"),
       (str_store_troop_name_link, s13, ":quest_target_troop"),
       (str_store_faction_name_link, s14, ":quest_target_faction"),
       (str_store_faction_name_link, s15, "$g_encountered_party_faction"),
     ]],

  [anyone|plyr,"merchant_quest_persuade_peace_5", [], "What can be done about this?", "merchant_quest_persuade_peace_6",[]],
  [anyone|plyr,"merchant_quest_persuade_peace_5", [], "Alas, it seems nothing can be done about it.", "merchant_quest_persuade_peace_6",[]],

  [anyone,"merchant_quest_persuade_peace_6", [], "There is a way to resolve the issue.\
 A particularly determined person can perhaps persuade one or both of these lords to accept making peace.\
 And even if that fails, it can be possible to see that these lords are defeated by force and taken prisoner.\
 If they are captive, they will lose their influence and they can no longer oppose a settlement... What do you think? Can you do it?",
   "merchant_quest_persuade_peace_7",[]],

  [anyone|plyr,"merchant_quest_persuade_peace_7", [], "It seems difficult. But I will try.", "merchant_quest_persuade_peace_8",[]],
  [anyone|plyr,"merchant_quest_persuade_peace_7", [], "If the price is right, I may.", "merchant_quest_persuade_peace_8",[]],
  [anyone|plyr,"merchant_quest_persuade_peace_7", [], "Forget it. This is not my problem.", "merchant_quest_persuade_peace_8",[]],

  [anyone,"merchant_quest_persuade_peace_8", [], "Most of the merchants in the town will gladly open up their purses to support such a plan.\
 I think we can collect {reg12} denars between ourselves.\
 We will be happy to reward you with that sum, if you can work this out.\
 Convince {s12} and {s13} to accept a peace settlement,\
 and if either of them proves too stubborn, make sure he falls captive and can not be ransomed until a peace deal is settled.",
   "merchant_quest_persuade_peace_9",[
       (quest_get_slot, ":quest_object_troop", "qst_persuade_lords_to_make_peace", slot_quest_object_troop),
       (quest_get_slot, ":quest_target_troop", "qst_persuade_lords_to_make_peace", slot_quest_target_troop),
       (str_store_troop_name_link, s12, ":quest_object_troop"),
       (str_store_troop_name_link, s13, ":quest_target_troop"),
       (quest_get_slot, ":quest_reward", "qst_persuade_lords_to_make_peace", slot_quest_gold_reward),
       (assign, reg12, ":quest_reward")]],

  [anyone|plyr,"merchant_quest_persuade_peace_9", [], "All right. I will do my best.", "merchant_quest_persuade_peace_10",[]],
  [anyone|plyr,"merchant_quest_persuade_peace_9", [], "Sorry. I can not do this.", "merchant_quest_persuade_peace_no",[]],

  [anyone,"merchant_quest_persuade_peace_10", [], "Excellent. You will have our blessings.\
 I hope you can deal with those two old goats.\
 We will be waiting and hoping for the good news.", "close_window",[
     (str_store_party_name_link, s4, "$g_encountered_party"),
     (quest_get_slot, ":quest_target_faction", "qst_persuade_lords_to_make_peace", slot_quest_target_faction),
     (quest_get_slot, ":quest_object_troop", "qst_persuade_lords_to_make_peace", slot_quest_object_troop),
     (quest_get_slot, ":quest_target_troop", "qst_persuade_lords_to_make_peace", slot_quest_target_troop),
     (quest_get_slot, ":quest_reward", "qst_persuade_lords_to_make_peace", slot_quest_gold_reward),
     (assign, reg12, ":quest_reward"),
     (str_store_troop_name_link, s12, ":quest_object_troop"),
     (str_store_troop_name_link, s13, ":quest_target_troop"),
     (str_store_faction_name_link, s14, ":quest_target_faction"),
     (str_store_faction_name_link, s15, "$g_encountered_party_faction"),
     (setup_quest_text,"qst_persuade_lords_to_make_peace"),
     (str_store_string, s2, "@Guildmaster of {s4} promised you {reg12} denars if you can make sure that\
 {s12} and {s13} no longer pose a threat to a peace settlement between {s15} and {s14}.\
 In order to do that, you must either convince them or make sure they fall captive and remain so until a peace agreement is made."),
     (call_script, "script_start_quest", "qst_persuade_lords_to_make_peace", "$g_talk_troop"),
     (quest_get_slot, ":quest_object_troop", "qst_persuade_lords_to_make_peace", slot_quest_object_troop),
     (quest_get_slot, ":quest_target_troop", "qst_persuade_lords_to_make_peace", slot_quest_target_troop),
     (call_script, "script_report_quest_troop_positions", "qst_persuade_lords_to_make_peace", ":quest_object_troop", 3),
     (call_script, "script_report_quest_troop_positions", "qst_persuade_lords_to_make_peace", ":quest_target_troop", 4),
     ]],

  [anyone,"merchant_quest_persuade_peace_no", [], "Don't say no right away. Think about this for some time.\
 If there is a {man/lady} who can manage to do this, it is you.",
   "close_window",[]],


#deal with night bandits
  [anyone,"merchant_quest_requested",
   [
     (eq, "$random_merchant_quest_no", "qst_deal_with_night_bandits"),
     ],
   "Do I indeed! There's a group of bandits infesting the town, and I'm at the end of my rope as to how to deal with them.\
 They've been ambushing and robbing townspeople under the cover of night,\
 and then fading away quick as lightning when the guards finally show up. We've not been able to catch a one of them.\
 They only attack lone people, never daring to show themselves when there's a group about.\
 I need someone who can take on these bandits alone and win. That seems to be the only way of bringing them to justice.\
 Are you up to the task?", "merchant_quest_deal_with_night_bandits",
   []],

  [anyone,"merchant_quest_brief",
   [
     (eq,"$random_merchant_quest_no","qst_deal_with_night_bandits"),
     ],
   "There's a group of bandits infesting the town, and I'm at the end of my rope as to how to deal with them.\
 They've been ambushing and robbing townspeople under the cover of night,\
 and then fading away quick as lightning when the guards finally show up. We've not been able to catch a one of them.\
 They only attack lone people, never daring to show themselves when there's a group about.\
 I need someone who can take on these bandits alone and win. That seems to be the only way of bringing them to justice.\
 Are you up to the task?", "merchant_quest_deal_with_night_bandits",
   []],

  [anyone|plyr,"merchant_quest_deal_with_night_bandits", [],
   "Killing bandits? Why, certainly!",
   "deal_with_night_bandits_quest_taken",
   [
     (str_store_party_name_link, s14, "$g_encountered_party"),
     (setup_quest_text, "qst_deal_with_night_bandits"),
     (str_store_string, s2, "@The Guildmaster of {s14} has asked you to deal with a group of bandits terrorising the streets of {s14}. They only come out at night, and only attack lone travellers on the streets."),
     (call_script, "script_start_quest", "qst_deal_with_night_bandits", "$g_talk_troop"),
     ]],

  [anyone|plyr, "merchant_quest_deal_with_night_bandits", [],
   "My apologies, I'm not interested.", "merchant_quest_stall",[]],

  [anyone,"deal_with_night_bandits_quest_taken", [], "That takes a weight off my shoulders, {playername}.\
 You can expect a fine reward if you come back successful. Just don't get yourself killed, eh?", "mayor_pretalk",[]],


#move cattle herd
  [anyone,"merchant_quest_requested", [(eq, "$random_merchant_quest_no", "qst_move_cattle_herd"),
                                       (quest_get_slot, ":target_center", "qst_move_cattle_herd", slot_quest_target_center),
                                       (str_store_party_name,s13,":target_center"),],
   "One of the merchants here is looking for herdsmen to take his cattle to the market at {s13}.", "merchant_quest_brief",
   []],

  [anyone,"merchant_quest_brief",
   [
    (eq,"$random_merchant_quest_no","qst_move_cattle_herd"),
    (quest_get_slot, reg8, "qst_move_cattle_herd", slot_quest_gold_reward),
    (quest_get_slot, ":target_center", "qst_move_cattle_herd", slot_quest_target_center),
    (str_store_party_name, s13, ":target_center"),
    ],
   "The cattle herd must be at {s13} within 30 days. Sooner is better, much better,\
 but it must be absolutely no later than 30 days.\
 If you can do that, I'd be willing to pay you {reg8} denars for your trouble. Interested?", "move_cattle_herd_quest_brief",
   []],

  [anyone|plyr,"move_cattle_herd_quest_brief", [],  "Aye, I can take the herd to {s13}.",
   "move_cattle_herd_quest_taken",
   [
     (call_script, "script_create_cattle_herd", "$g_encountered_party", 0),
     (quest_set_slot, "qst_move_cattle_herd", slot_quest_target_party, reg0),
     (str_store_party_name_link, s10,"$g_encountered_party"),
     (quest_get_slot, ":target_center", "qst_move_cattle_herd", slot_quest_target_center),
     (str_store_party_name_link, s13, ":target_center"),
     (quest_get_slot, reg8, "qst_move_cattle_herd", slot_quest_gold_reward),
     (setup_quest_text, "qst_move_cattle_herd"),
     (str_store_string, s2, "@Guildmaster of {s10} asked you to move a cattle herd to {s13}. You will earn {reg8} denars in return."),
     (call_script, "script_start_quest", "qst_move_cattle_herd", "$g_talk_troop"),
     ]],
  [anyone|plyr,"move_cattle_herd_quest_brief", [],
   "I am sorry, but no.", "merchant_quest_stall",[]],

  [anyone,"move_cattle_herd_quest_taken", [], "Splendid. You can find the herd right outside the town.\
 After you take the animals to {s13}, return back to me and I will give you your pay.", "mayor_pretalk",[]],


#################################################
#################### Random merchant quests end

  [anyone,"merchant_quest_requested", [], "I am afraid I can't offer you a job right now.", "mayor_pretalk",[]],


#Village elders

  [anyone,"start", [(is_between,"$g_talk_troop",village_elders_begin,village_elders_end),
                    (store_partner_quest,":elder_quest"),
                    (eq,":elder_quest","qst_deliver_cattle"),
                    (check_quest_succeeded, ":elder_quest"),
                    (quest_get_slot, reg5, "qst_deliver_cattle", slot_quest_target_amount)],
   "My good {sir/madam}. Our village is grateful for your help. Thanks to the {reg5} heads of cattle you have brought, we can now raise our own herd.", "village_elder_deliver_cattle_thank",
   [(add_xp_as_reward, 400),
#    (quest_get_slot, ":num_cattle", "qst_deliver_cattle", slot_quest_target_amount),
#    (party_set_slot, "$current_town", slot_village_number_of_cattle, ":num_cattle"),
    (call_script, "script_change_center_prosperity", "$current_town", 4),
    (call_script, "script_change_player_relation_with_center", "$current_town", 5),
    (call_script, "script_end_quest", "qst_deliver_cattle"),
#Troop commentaries begin
    (call_script, "script_add_log_entry", logent_helped_peasants, "trp_player",  "$current_town", -1, -1),
#Troop commentaries end

    ]],

  [anyone,"village_elder_deliver_cattle_thank", [],
   "My good {lord/lady}, please, is there anything I can do for you?", "village_elder_talk",[]],


##  [anyone,"start",
##   [
##     (is_between, "$g_talk_troop", village_elders_begin, village_elders_end),
##     (store_partner_quest, ":elder_quest"),
##     (eq, ":elder_quest", "qst_train_peasants_against_bandits"),
##     (check_quest_succeeded, ":elder_quest"),
##     (quest_get_slot, reg5, "qst_train_peasants_against_bandits", slot_quest_target_amount)],
##   "Oh, thank you so much for training our men. Now we may stand a chance against those accursed bandits if they come again.", "village_elder_train_peasants_against_bandits_thank",
##   [
##     (add_xp_as_reward, 400),
##     (call_script, "script_change_player_relation_with_center", "$current_town", 5),
##     (call_script, "script_end_quest", "qst_train_peasants_against_bandits"),
##     (call_script, "script_add_log_entry", logent_helped_peasants, "trp_player",  "$current_town", -1, -1),
##    ]],

#  [anyone,"village_elder_train_peasants_against_bandits_thank", [],
#   "Now, good {sire/lady}, is there anything I can do for you?", "village_elder_talk",[]],


##diplomacy start+
##
#Move this village_elder_talk line below, otherwise it wouldn't be able to trigger.
#  [anyone,"start", [(is_between,"$g_talk_troop", village_elders_begin, village_elders_end),(eq,"$g_talk_troop_met",0),
#                    (str_store_party_name, s9, "$current_town")],
#   "Good day, {sir/madam}, and welcome to {s9}. I am the elder of this village.", "village_elder_talk",[]],
##diplomacy end+

  #SB: check dplmc_slot_center_last_attacked_time for expiry dplmc_slot_center_last_attacker
  #the player can still use the menu to trade but won't be able to access quests
  [anyone ,"start", [(is_between,"$g_talk_troop",village_elders_begin,village_elders_end),
                     (neg|party_slot_eq, "$current_town", slot_town_lord, "trp_player"),
                     (party_slot_eq, "$current_town", dplmc_slot_center_last_attacker, "trp_player"),
                     (party_get_slot, ":attacked_hour", "$current_town", dplmc_slot_center_last_attacked_time),
                     (gt, ":attacked_hour", 0), #make sure it's not an empty slot
                     (val_add, ":attacked_hour", 24 * 7),
                     (gt, ":attacked_hour", "$g_current_hours"),
                     ],
   "Please, {playername}, I beg of you leave us alone... What have we ever done to offend you?!", "close_window",[]],

  [anyone,"start", [(is_between,"$g_talk_troop", village_elders_begin, village_elders_end),(eq,"$g_talk_troop_met",0),
                    (str_store_party_name, s9, "$current_town"),
                    (party_slot_eq, "$current_town", slot_town_lord, "trp_player"),
					##diplomacy start+
					#Replace "my {lord/lady}" with "your highness" if appropriate.
					(call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),
					(try_begin),
						#override default behavior to write "my {lord/lady}" if a less respectful form of address would have ben chosen
						(lt, reg0, 2),
						(str_store_string, s0, "str_dplmc_my_lordlady"),
					(try_end),
					],
   "Welcome to {s9}, {s0}. We were rejoiced by the news that you are the new {lord/lady} of our humble village.\
 I am the village elder and I will be honoured to serve you in any way I can.", "village_elder_talk",[]],#Replced "my {lord/lady}" with "{s0}"

##Moved this village_elder_talk line from above, otherwise it wouldn't be able to trigger.
  [anyone,"start", [(is_between,"$g_talk_troop", village_elders_begin, village_elders_end),(eq,"$g_talk_troop_met",0),
                    (str_store_party_name, s9, "$current_town"),
					(call_script, "script_dplmc_print_commoner_at_arg1_says_sir_madame_to_s0", "$current_town"),#added this line
					],
   "Good day, {s0}, and welcome to {s9}. I am the elder of this village.", "village_elder_talk",[]],#replaced {sir/madam} with {s0}

##Replace "My {lord/lady}" with "Your highness" if appropriate.
   [anyone ,"start", [(is_between,"$g_talk_troop",village_elders_begin,village_elders_end),
                     (party_slot_eq, "$current_town", slot_town_lord, "trp_player"),
					 #We aren't going to use the contents of {s0}, just checking the return value
					 (call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),
					 (ge, reg0, 3),#"your highness"
					 ],
   "Your highness, you honour our humble village with your presence.", "village_elder_talk",[]],
  ##diplomacy end+

  [anyone ,"start", [(is_between,"$g_talk_troop",village_elders_begin,village_elders_end),
                     (party_slot_eq, "$current_town", slot_town_lord, "trp_player")],
   "{My lord/My lady}, you honour our humble village with your presence.", "village_elder_talk",[]],

  [anyone ,"start", [(is_between,"$g_talk_troop",village_elders_begin,village_elders_end),
  ##diplomacy start+
  (call_script, "script_dplmc_print_commoner_at_arg1_says_sir_madame_to_s0", "$current_town"),
  ],
   "Good day, {s0}.", "village_elder_talk",[]],#replaced {sir/madam} with {s0}
  ##diplomacy end+
  
  [anyone ,"village_elder_pretalk", [],
   "Is there anything else I can do for you?", "village_elder_talk",[]],

  #SB : add option to talk to chamberlain
  [anyone|plyr,"village_elder_talk", [(gt, "$g_player_chamberlain", 0),(party_slot_eq, "$current_town", slot_town_lord, "trp_player")],
   # "I am looking for my chamberlain. I was told he has mastered the art of Ctrl+Clicking.", "village_elder_ask_chamberlain",[]],
   "I am looking for my chamberlain. I was told he preceded me here.", "village_elder_ask_chamberlain",[]],
  [anyone,"village_elder_ask_chamberlain", [],
   "Court members come and go to our village, {sir/madam}. If he is taking a break here, you will surely find him if you wait awhile.", "village_elder_found_chamberlain",[]],
  [anyone|other(trp_dplmc_chamberlain),"village_elder_found_chamberlain", [],
   "Oh hi there... Didn't expect you to go around inspecting your property that often, so I figured I'd take a stroll to the quaint village of {s9}, collect some taxes, etc. Is there anything specific you wanted done here? Otherwise, talk to the village elder yonder.", "dplmc_chamberlain_talk",
    [(set_conversation_speaker_troop, "$g_player_chamberlain"),
     # (store_conversation_agent, "$g_talk_agent"),
     (assign, "$g_talk_agent", -1), #agent is in static entry point?
     (try_for_agents, ":agent"),
       (eq, "$g_talk_agent", -1),
       (agent_get_troop_id, ":troop", ":agent"),
       (eq, ":troop", "$g_player_chamberlain"),
       (assign, "$g_talk_agent", ":agent"),
     (try_end),
     (assign, "$g_talk_troop", "$g_player_chamberlain"),
     (set_conversation_speaker_agent, "$g_talk_agent"),
     # (assign, "$g_talk_agent", "$g_player_chamberlain")
    ]],
  #after selecting dialogs however it will go back to the village elder
  
  [anyone|plyr,"village_elder_talk", [(check_quest_active, "qst_hunt_down_fugitive"),
                                      (neg|check_quest_concluded, "qst_hunt_down_fugitive"),
                                      (quest_slot_eq, "qst_hunt_down_fugitive", slot_quest_target_center, "$current_town"),
                                      (quest_get_slot, ":quest_target_dna", "qst_hunt_down_fugitive", slot_quest_target_dna),
                                      (call_script, "script_get_name_from_dna_to_s50", ":quest_target_dna"),
                                      (str_store_string, s4, s50),
                                      ],
   "I am looking for a man by the name of {s4}. I was told he may be hiding here.", "village_elder_ask_fugitive",[]],

  #SB : add reticence if hostile
  [anyone ,"village_elder_ask_fugitive", [
    (this_or_next|lt, "$g_encountered_party_relation", -10),
    (neg|party_slot_ge, "$current_town", slot_center_player_relation, -5),
    ],
   "Strangers come and go to our village, {playername}. It would be best if you would not concern yourself with their affairs now, {s0}.", "close_window",[
   (call_script, "script_dplmc_print_commoner_at_arg1_says_sir_madame_to_s0", "$current_town"),
   ]],#changed {sir/madam} to {s0}
  [anyone, "village_elder_ask_fugitive", [
  ##diplomacy start+
   (call_script, "script_dplmc_print_commoner_at_arg1_says_sir_madame_to_s0", "$current_town"),#added (used in next two)
   (is_currently_night),
   ],
   "Strangers come and go to our village, {s0}. But I doubt you'll run into him at this hour of the night. You would have better luck during the day.", "village_elder_pretalk",[]],#changed {sir/madam} to {s0}
  [anyone, "village_elder_ask_fugitive", [],
   "Strangers come and go to our village, {s0}. If he is hiding here, you will surely find him if you look around.", "close_window",[]],#changed {sir/madam} to {s0}
  ##diplomacy end+

  [anyone|plyr,"village_elder_talk", [(store_partner_quest,":elder_quest"),(ge,":elder_quest",0)],
   "About the task you asked of me...", "village_elder_active_mission_1",[]],

  [anyone|plyr,"village_elder_talk", [(ge, "$g_talk_troop_faction_relation", 0),(store_partner_quest,":elder_quest"),(lt,":elder_quest",0)],
   "Do you have any tasks I can help you with?", "village_elder_request_mission_ask",[]],

  [anyone|plyr,"village_elder_talk", [(party_slot_eq, "$current_town", slot_village_state, svs_normal),
                                      (neg|party_slot_ge, "$current_town", slot_village_infested_by_bandits, 1),],
   "I want to buy some supplies. I will pay with gold.", "village_elder_trade_begin",[]],


  [anyone ,"village_elder_trade_begin", [], "Of course, {sir/madam}. Do you want to buy goods or cattle?", "village_elder_trade_talk",[]],

  [anyone|plyr,"village_elder_trade_talk", [], "I want to buy food and supplies.", "village_elder_trade",[]],

  [anyone ,"village_elder_trade", [],
   "We have some food and other supplies in our storehouse. Come have a look.", "village_elder_pretalk",[(change_screen_trade, "$g_talk_troop"),]],

  [anyone|plyr,"village_elder_trade_talk", [(party_slot_eq, "$current_town", slot_village_state, svs_normal),
                                            (neg|party_slot_ge, "$current_town", slot_village_infested_by_bandits, 1),
                                      (assign, ":quest_village", 0),
                                      (try_begin),
                                        (check_quest_active, "qst_deliver_cattle"),
                                        (quest_slot_eq, "qst_deliver_cattle", slot_quest_target_center, "$current_town"),
                                        (assign, ":quest_village", 1),
                                      (try_end),
                                      (eq, ":quest_village", 0),
                                      ],
   "I want to buy some cattle.", "village_elder_buy_cattle",[]],
   
  #SB : disguise_farmer
  [anyone|plyr,"village_elder_trade_talk", [
  (this_or_next|party_slot_eq, "$current_town", slot_town_lord, "trp_player"),
  (party_slot_ge, "$current_town", slot_center_player_relation, 25),
  (party_slot_ge, "$current_town", slot_center_player_relation, 10),
  (eq, "$g_dplmc_player_disguise", 1), #enabled
  (troop_get_slot, ":has_disguise", "trp_player", slot_troop_player_disguise_sets),
  (val_and, ":has_disguise", disguise_farmer),
  (eq, ":has_disguise", 0),
  ],
   "Actually, I need a set of whatever it is your peasants are wearing.", "village_elder_buy_clothing",[]],
   
  [anyone ,"village_elder_buy_clothing", [(party_slot_eq, "$current_town", slot_town_lord, "trp_player"),
    (call_script, "script_dplmc_print_commoner_at_arg1_says_sir_madame_to_s0", "$current_town"),
    (call_script, "script_dplmc_store_troop_is_female_reg", "$g_talk_troop", 4),
    (eq, reg4, "$character_gender"),
    ],
   "Of course, {s0}. You may do as you see fit with these clothes off my own back.", "village_elder_pretalk",[
     (call_script, "script_acquire_disguise", disguise_farmer),
   ]],
  [anyone ,"village_elder_buy_clothing", [],
   "That won't be a problem, I can arrange for some freshly laundered tunics to be delivered.", "village_elder_pretalk",[
   (call_script, "script_acquire_disguise", disguise_farmer),
   ]],


  [anyone|plyr,"village_elder_trade_talk", [], "I changed my mind. I don't need to buy anything.", "village_elder_pretalk",[]],

  [anyone|plyr,"village_elder_talk",
   [
     ],
   "Have you seen any enemies around here recently?", "village_elder_ask_enemies_local",[]],
  #SB : show last attacker
  [anyone,"village_elder_ask_enemies_local",
  [
        (party_get_slot, ":attacker", "$current_town", dplmc_slot_center_last_attacker),
        (gt, ":attacker", 0), #obviously
        (party_is_active, ":attacker"),
        (party_get_slot, ":attacked_hour", "$current_town", dplmc_slot_center_last_attacked_time),
        (gt, ":attacked_hour", 0), #make sure it's not an empty slot
        (val_add, ":attacked_hour", 24 * 7),
        (gt, ":attacked_hour", "$g_current_hours"),
        (store_sub, reg7, ":attacked_hour", "$g_current_hours"),
        (val_div, reg7, 24), #get days
        (str_store_party_name, s1, ":attacker"),
        
  ], "We were attacked by {s1} {reg7?{reg7} days ago:just recently}...", "village_elder_ask_enemies", []],
  
  [anyone|auto_proceed,"village_elder_ask_enemies_local",
  [], "Hmm. Let me think about it...", "village_elder_ask_enemies", []],
  
  
  [anyone,"village_elder_ask_enemies",
   [
     (assign, ":give_report", 0),
     (party_get_slot, ":original_faction", "$g_encountered_party", slot_center_original_faction),
     (store_relation, ":original_faction_relation", ":original_faction", "fac_player_supporters_faction"),
     (try_begin),
       (gt, ":original_faction_relation", 0),
       (party_slot_ge, "$g_encountered_party", slot_center_player_relation, 0),
       (assign, ":give_report", 1),
     (else_try),
       (party_slot_ge, "$g_encountered_party", slot_center_player_relation, 30),
       (assign, ":give_report", 1),
     (try_end),
     (eq, ":give_report", 0),
     ##diplomacy start+
     (call_script, "script_dplmc_print_commoner_at_arg1_says_sir_madame_to_s0", "$current_town"),#added
     ],
   "I am sorry, {s0}. We have neither seen nor heard of any war parties in this area.", "village_elder_pretalk",#replaced {sir/madam} with {s0}
   ##diplomacy end+
   []],

  [anyone,"village_elder_ask_enemies",
   [],
   "Hmm. Let me think about it...", "village_elder_tell_enemies",
   [
     (assign, "$temp", 0),
     ]],

  [anyone,"village_elder_tell_enemies",
   [
     (assign, ":target_hero_index", "$temp"),
     (assign, ":end_cond", active_npcs_end),
     (try_for_range, ":cur_troop", active_npcs_begin, ":end_cond"),
       (troop_slot_eq, ":cur_troop", slot_troop_occupation, slto_kingdom_hero),
       (troop_get_slot, ":cur_party", ":cur_troop", slot_troop_leaded_party),
       (gt, ":cur_party", 0),
       (store_troop_faction, ":cur_faction", ":cur_troop"),
       (store_relation, ":reln", ":cur_faction", "fac_player_supporters_faction"),
       (lt, ":reln", 0),
       (store_distance_to_party_from_party, ":dist", "$g_encountered_party", ":cur_party"),
       (lt, ":dist", 10),
       (call_script, "script_get_information_about_troops_position", ":cur_troop", 0),
       (eq, reg0, 1), #Troop's location is known.
       (val_sub, ":target_hero_index", 1),
       (lt, ":target_hero_index", 0),
       (assign, ":end_cond", 0),
       ## SB : update legacy dialogue with gender strings
       (call_script, "script_dplmc_store_troop_is_female_reg", ":cur_troop", 4),
       (str_store_string, s2, "@{reg4?She:He} is not commanding any soldiers at the moment."),
       (assign, ":num_troops", 0),
       (assign, ":num_wounded_troops", 0),
       (party_get_num_companion_stacks, ":num_stacks", ":cur_party"),
       (try_for_range_backwards, ":i_stack", 0, ":num_stacks"),
         (party_stack_get_troop_id, ":stack_troop", ":cur_party", ":i_stack"),
         (neg|troop_is_hero, ":stack_troop"),
         (party_stack_get_size, ":stack_size", ":cur_party", ":i_stack"),
         (party_stack_get_num_wounded, ":num_wounded", ":cur_party", ":i_stack"),
         (val_add, ":num_troops", ":stack_size"),
         (val_add, ":num_wounded_troops", ":num_wounded"),
       (try_end),
       (gt, ":num_troops", 0),
       (call_script, "script_round_value", ":num_wounded_troops"),
       (assign, reg1, reg0),
       (call_script, "script_round_value", ":num_troops"),
       (str_store_string, s2, "@{reg4?She:He} currently commands {reg0} men{reg1?, of which around {reg1} are wounded:}."),
     (try_end),
     (eq, ":end_cond", 0),
     ],
   "{s1} {s2}", "village_elder_tell_enemies",
   [
     (val_add, "$temp", 1),
     ]],

  [anyone,"village_elder_tell_enemies",
  ##diplomacy start+
   [(eq, "$temp", 0),
   	(call_script, "script_dplmc_print_commoner_at_arg1_says_sir_madame_to_s0", "$current_town"),#added
   ],
   "No, {s0}. We haven't seen any war parties in this area for some time.", "village_elder_pretalk",#replaced {sir/madam} with {s0}
  ##diplomacy end+
   []],

  [anyone,"village_elder_tell_enemies",
   [],
   "Well, I guess that was all.", "village_elder_pretalk",
   []],





  #(fire set up dialogs begin) Asking village elder to set up fire for making prison break easier.
  [anyone|plyr,"village_elder_talk",
  [
    (party_get_slot, ":bound_center", "$current_town", slot_village_bound_center),

    (assign, ":num_heroes_in_dungeon", 0),
    (assign, ":num_heroes_given_parole", 0),

    (party_get_num_prisoner_stacks, ":num_stacks", ":bound_center"),
    (try_for_range, ":i_stack", 0, ":num_stacks"),
      (party_prisoner_stack_get_troop_id, ":stack_troop",":bound_center",":i_stack"),
      (troop_is_hero, ":stack_troop"),
      (try_begin),
        (call_script, "script_cf_prisoner_offered_parole", ":stack_troop"),
        (party_add_members, "p_temp_party_2", ":stack_troop", 1),
        (val_add, ":num_heroes_given_parole", 1),
      (else_try),
        (party_add_members, "p_temp_party", ":stack_troop", 1),
        (val_add, ":num_heroes_in_dungeon", 1),
      (try_end),
    (try_end),

    (ge, ":num_heroes_in_dungeon", 1),
  ],
   "I need you to set a large fire on the outskirts of this village.", "village_elder_ask_set_fire",[]],

  [anyone,"village_elder_ask_set_fire",
   [
     ##diplomacy start+
	 (call_script, "script_dplmc_print_commoner_at_arg1_says_sir_madame_to_s0", "$current_town"),#added (re-used several times below)
	 ##diplomacy end+
     (eq, "$g_village_elder_did_not_liked_money_offered", 0),
     (party_get_slot, ":bound_center", "$current_town", slot_village_bound_center),
     (party_get_slot, ":fire_time", ":bound_center", slot_town_last_nearby_fire_time),
     (store_current_hours, ":cur_time"),
     (ge, ":fire_time", ":cur_time"),
   ],
   ##diplomacy start+
   "We have already agreed upon this, {s0}. I will do my best. You can trust me.", "close_window",[]],#changed {sir/my lady} to {s0}
   ##diplomacy end+

  [anyone,"village_elder_ask_set_fire",
   [
     (eq, "$g_village_elder_did_not_liked_money_offered", 0),
   ],
   ##diplomacy start+
   "A fire, {s0}! Fires are dangerous! Why would you want such a thing?", "village_elder_ask_set_fire_1",[]],#changed {sir/madam} to {s0}
   ##diplomacy end+

  [anyone,"village_elder_ask_set_fire", #elder did not accepted 100 denars before
   [
     (eq, "$g_village_elder_did_not_liked_money_offered", 1),
   ],
   ##diplomacy start+
   "I believe that we have already discussed this issue, {s0}.", "village_elder_ask_set_fire_5",[]],#changed {sir/my lady} to {s0}
   ##diplomacy end+

  [anyone,"village_elder_ask_set_fire", #elder did not accepted 100 and 200 denars before
   [
     (eq, "$g_village_elder_did_not_liked_money_offered", 2),
   ],
   ##diplomacy start+
   #changed {sir/madam} to {s0}, and moved it to the other side of the word "before"
   "We talked about this before {s0} and your previous offers were low compared to the risk you want me to take.",
   ##diplomacy end+
   "village_elder_ask_set_fire_5",[]],

  [anyone|plyr,"village_elder_ask_set_fire_1",[],
   "I have my reasons, and you will have yours -- a purse of silver. Will you do it, or not?", "village_elder_ask_set_fire_2",[]],

  [anyone|plyr,"village_elder_ask_set_fire_1",[],
  "Given the risk you are taking, you are entitled to know my plan.", "village_elder_ask_set_fire_explain_plan",[]],

  [anyone|plyr,"village_elder_ask_set_fire_explain_plan",[
  (party_get_slot, ":bound_center", "$g_encountered_party", slot_village_bound_center),
  (str_store_party_name, s4, ":bound_center"),
  ],
   "I wish to rescue a prisoner from {s4}. When you light the fire, the guards in {s4} will see the smoke, and some of them will rush outside to see what is going on. ", "village_elder_ask_set_fire_2",[]],


  [anyone,"village_elder_ask_set_fire_2",[
  (gt, "$g_talk_troop_effective_relation", 9),
  ],
##diplomacy start+ change {sir/my lady} to {s0}
   "As you wish, {s0}. You have been a good friend to this village, and, even though there is a risk, we should be glad to return the favor. When do you want this fire to start?", "village_elder_ask_set_fire_9",[]],
##diplomacy end+

  [anyone,"village_elder_ask_set_fire_2",[
  (lt, "$g_talk_troop_relation", 0),
  ],
##diplomacy start+ change {sir/my lady} to {s0}
   "I'm sorry, {s0}. You will forgive me for saying this, but we don't exactly have good reason to trust you. This is too dangerous.", "close_window",[]],
##diplomacy end+

  [anyone,"village_elder_ask_set_fire_2",[],
 ##diplomacy start+ change {sir/my lady} to {s0}
   "As you say, {s0}. But in doing this, we are taking a very great risk. What's in it for us?", "village_elder_ask_set_fire_3",[]],
##diplomacy end+

  [anyone|plyr,"village_elder_ask_set_fire_3",
  [
    (store_troop_gold, ":cur_gold", "trp_player"),
    (ge, ":cur_gold", 100),
  ],
   "I can give you 100 denars.", "village_elder_ask_set_fire_4",[(assign, "$g_last_money_offer_to_elder", 100),]],

  [anyone|plyr,"village_elder_ask_set_fire_3",
  [
    (store_troop_gold, ":cur_gold", "trp_player"),
    (ge, ":cur_gold", 200),
  ],
   "I can give you 200 denars.", "village_elder_ask_set_fire_6",[(assign, "$g_last_money_offer_to_elder", 200),]],

  [anyone|plyr,"village_elder_ask_set_fire_3",
  [
    (store_troop_gold, ":cur_gold", "trp_player"),
    (ge, ":cur_gold", 300),
  ],
   "I can give you 300 denars.", "village_elder_ask_set_fire_6",[(assign, "$g_last_money_offer_to_elder", 300),]],

  [anyone|plyr,"village_elder_ask_set_fire_3",[],
   "Never mind.", "close_window",[]],

  [anyone,"village_elder_ask_set_fire_4",
   [
     (eq, "$g_village_elder_did_not_liked_money_offered", 0),
   ],
   "This is madness. I cannot take such a risk.", "village_elder_talk",
   [
     (assign, "$g_village_elder_did_not_liked_money_offered", 1),
   ]],

  [anyone|plyr,"village_elder_ask_set_fire_5",
   [
     (eq, "$g_village_elder_did_not_liked_money_offered", 1),
     (store_troop_gold, ":cur_gold", "trp_player"),
     (ge, ":cur_gold", 200),
   ],
   "Then let's increase your reward to 200 denars.", "village_elder_ask_set_fire_7", [(assign, "$g_last_money_offer_to_elder", 200),]],

  [anyone|plyr,"village_elder_ask_set_fire_5",
   [
     (eq, "$g_village_elder_did_not_liked_money_offered", 1),
     (store_troop_gold, ":cur_gold", "trp_player"),
     (ge, ":cur_gold", 300),
   ],
   "Then let's increase your reward to 300 denars.", "village_elder_ask_set_fire_6",[(assign, "$g_last_money_offer_to_elder", 300),]],

  [anyone|plyr,"village_elder_ask_set_fire_5",
   [
     (eq, "$g_village_elder_did_not_liked_money_offered", 2),
     (store_troop_gold, ":cur_gold", "trp_player"),
     (ge, ":cur_gold", 300),
   ],
   "Then let's increase your reward to 300 denars. This is my last offer.", "village_elder_ask_set_fire_6",[(assign, "$g_last_money_offer_to_elder", 300),]],

  [anyone|plyr,"village_elder_ask_set_fire_5",[],
   "Never mind.", "close_window",[]],

  [anyone,"village_elder_ask_set_fire_6",[],
   "Very well. You are asking me to take a very great risk, but I will do it. When do you want this fire to start?", "village_elder_ask_set_fire_9",
   [
     (troop_remove_gold, "trp_player", "$g_last_money_offer_to_elder"),
   ]],

  [anyone,"village_elder_ask_set_fire_7",[],
   "I cannot do such a dangerous thing for 200 denars.", "village_elder_talk",
   [
     (assign, "$g_village_elder_did_not_liked_money_offered", 2),
   ]],

  [anyone|plyr,"village_elder_ask_set_fire_9",[],
   "Continue with your preparations. One hour from now, I need that fire.", "village_elder_ask_set_fire_10",
   [
     (party_get_slot, ":bound_center", "$current_town", slot_village_bound_center),
     (store_current_hours, ":cur_time"),
	 (val_add, ":cur_time", 1),
     (assign, ":fire_time", ":cur_time"),
     (party_set_slot, ":bound_center", slot_town_last_nearby_fire_time, ":fire_time"),
     (try_begin),
       (is_between, "$next_center_will_be_fired", villages_begin, villages_end),
       (party_get_slot, ":is_there_already_fire", "$next_center_will_be_fired", slot_village_smoke_added),
       (eq, ":is_there_already_fire", 0),
       (party_get_slot, ":fire_time", "$next_center_will_be_fired", slot_town_last_nearby_fire_time),
       (store_current_hours, ":cur_hours"),
       (store_sub, ":cur_time_sub_fire_duration", ":cur_hours", fire_duration),
       (val_sub, ":cur_time_sub_fire_duration", 1),
       (ge, ":fire_time", ":cur_time_sub_fire_duration"),
       (party_clear_particle_systems, "$next_center_will_be_fired"),
     (try_end),
     (assign, "$next_center_will_be_fired", "$current_town"),
     (assign, "$g_village_elder_did_not_liked_money_offered", 0),
   ]],

  [anyone|plyr,"village_elder_ask_set_fire_9",
   [
     (store_time_of_day, ":cur_day_hour"),
     (ge, ":cur_day_hour", 6),
     (lt, ":cur_day_hour", 23),
   ],
   "Do this in at the stroke of midnight. I will wait exactly one hour.", "village_elder_ask_set_fire_11",
   [
     (party_get_slot, ":bound_center", "$current_town", slot_village_bound_center),
     (store_time_of_day, ":cur_day_hour"),
     (store_current_hours, ":cur_time"),
     (store_sub, ":difference", 24, ":cur_day_hour"), #fire will be at 24 midnight today
     (store_add, ":fire_time", ":cur_time", ":difference"),
     (party_set_slot, ":bound_center", slot_town_last_nearby_fire_time, ":fire_time"),
     (try_begin),
       (is_between, "$next_center_will_be_fired", villages_begin, villages_end),
       (party_get_slot, ":is_there_already_fire", "$next_center_will_be_fired", slot_village_smoke_added),
       (eq, ":is_there_already_fire", 0),
       (party_get_slot, ":fire_time", "$next_center_will_be_fired", slot_town_last_nearby_fire_time),
       (store_current_hours, ":cur_hours"),
       (store_sub, ":cur_time_sub_fire_duration", ":cur_hours", fire_duration),
       (val_sub, ":cur_time_sub_fire_duration", 1),
       (ge, ":fire_time", ":cur_time_sub_fire_duration"),
       (party_clear_particle_systems, "$next_center_will_be_fired"),
     (try_end),
     (assign, "$next_center_will_be_fired", "$current_town"),
     (assign, "$g_village_elder_did_not_liked_money_offered", 0),
    ]],

  [anyone,"village_elder_ask_set_fire_10",[],
   "Very well, {sir/my lady}. We will make our preparations. Now you make yours.", "close_window",
   [
   (assign, ":maximum_distance", -1),
   (try_for_agents, ":cur_agent"),
     (agent_get_troop_id, ":troop_id", ":cur_agent"),
     (is_between, ":troop_id", village_elders_begin, village_elders_end),
     (agent_get_position, pos0, ":cur_agent"),
     (try_for_range, ":entry_point_id", 0, 64),
       (entry_point_get_position, pos1, ":entry_point_id"),
       (get_distance_between_positions, ":dist", pos0, pos1),
       (gt, ":dist", ":maximum_distance"),
       (assign, ":maximum_distance", ":dist"),
       (copy_position, pos2, pos1),
       (assign, ":village_elder_agent", ":cur_agent"),
     (try_end),
     (try_begin),
       (gt, ":maximum_distance", -1),
       (agent_set_scripted_destination, ":village_elder_agent", pos2),
     (try_end),
   (try_end),
   ]],

  [anyone,"village_elder_ask_set_fire_11",[],
   "As you wish, {sir/my lady}. May the heavens protect you.", "close_window",[]],
  #(fire set up dialogs end)






  [anyone|plyr,"village_elder_talk", [(call_script, "script_cf_village_recruit_volunteers_cond"),],
   "Are there any lads from this village who might want to seek their fortune in the wars?", "village_elder_recruit_start",[]],

  [anyone|plyr,"village_elder_talk", [],
   "[Leave]", "close_window",[]],



  [anyone ,"village_elder_buy_cattle", [(party_get_slot, reg5, "$g_encountered_party", slot_village_number_of_cattle),
                                        (gt, reg5, 0),
                                        (store_item_value, ":cattle_cost", "itm_cattle_meat"),
                                        (call_script, "script_game_get_item_buy_price_factor", "itm_cattle_meat"),
                                        (val_mul, ":cattle_cost", reg0),
                                        #Multiplied by 2 and divided by 100
                                        (val_div, ":cattle_cost", 50),
                                        (assign, "$temp", ":cattle_cost"),
                                        (assign, reg6, ":cattle_cost"),
                                        ],
   "We have {reg5} heads of cattle, each for {reg6} denars. How many do you want to buy?", "village_elder_buy_cattle_2",[]],

  [anyone ,"village_elder_buy_cattle", [],
   "I am afraid we have no cattle left in the village {sir/madam}.", "village_elder_buy_cattle_2",[]],


  [anyone|plyr,"village_elder_buy_cattle_2", [(party_get_slot, ":num_cattle", "$g_encountered_party", slot_village_number_of_cattle),
                                              (ge, ":num_cattle", 1),
                                              (store_troop_gold, ":gold", "trp_player"),
                                              (ge, ":gold", "$temp"),],
   "One.", "village_elder_buy_cattle_complete",[(call_script, "script_buy_cattle_from_village", "$g_encountered_party", 1, "$temp"),
                                                       ]],

  [anyone|plyr,"village_elder_buy_cattle_2", [(party_get_slot, ":num_cattle", "$g_encountered_party", slot_village_number_of_cattle),
                                              (ge, ":num_cattle", 2),
                                              (store_troop_gold, ":gold", "trp_player"),
                                              (store_mul, ":cost", "$temp", 2),
                                              (ge, ":gold", ":cost"),],
   "Two.", "village_elder_buy_cattle_complete",[(call_script, "script_buy_cattle_from_village", "$g_encountered_party", 2, "$temp"),
                                                       ]],

  [anyone|plyr,"village_elder_buy_cattle_2", [(party_get_slot, ":num_cattle", "$g_encountered_party", slot_village_number_of_cattle),
                                              (ge, ":num_cattle", 3),
                                              (store_troop_gold, ":gold", "trp_player"),
                                              (store_mul, ":cost", "$temp", 3),
                                              (ge, ":gold", ":cost"),],
   "Three.", "village_elder_buy_cattle_complete",[(call_script, "script_buy_cattle_from_village", "$g_encountered_party", 3, "$temp"),
                                                       ]],

  [anyone|plyr,"village_elder_buy_cattle_2", [(party_get_slot, ":num_cattle", "$g_encountered_party", slot_village_number_of_cattle),
                                              (ge, ":num_cattle", 4),
                                              (store_troop_gold, ":gold", "trp_player"),
                                              (store_mul, ":cost", "$temp", 4),
                                              (ge, ":gold", ":cost"),],
   "Four.", "village_elder_buy_cattle_complete",[(call_script, "script_buy_cattle_from_village", "$g_encountered_party", 4, "$temp"),
                                                       ]],

  [anyone|plyr,"village_elder_buy_cattle_2", [(party_get_slot, ":num_cattle", "$g_encountered_party", slot_village_number_of_cattle),
                                              (ge, ":num_cattle", 5),
                                              (store_troop_gold, ":gold", "trp_player"),
                                              (store_mul, ":cost", "$temp", 5),
                                              (ge, ":gold", ":cost"),],
   "Five.", "village_elder_buy_cattle_complete",[(call_script, "script_buy_cattle_from_village", "$g_encountered_party", 5, "$temp"),
                                                       ]],

  [anyone|plyr,"village_elder_buy_cattle_2", [],
   "Forget it.", "village_elder_pretalk",[]],

  [anyone ,"village_elder_buy_cattle_complete", [],
   "I will tell the herders to round up the animals and bring them to you, {sir/madam}. I am sure you will be satisfied with your purchase.", "village_elder_pretalk",[]],


  [anyone ,"village_elder_recruit_start", [(party_get_slot, ":num_volunteers", "$current_town", slot_center_volunteer_troop_amount),
                                           (party_get_free_companions_capacity, ":free_capacity", "p_main_party"),
                                           (val_min, ":num_volunteers", ":free_capacity"),
                                           (store_troop_gold, ":gold", "trp_player"),
                                           (store_div, ":gold_capacity", ":gold", 10),#10 denars per man
                                           (val_min, ":num_volunteers", ":gold_capacity"),
                                           (le, ":num_volunteers", 0),
                                           ],
   "I don't think anyone would be interested, {sir/madam}. Is there anything else I can do for you?", "village_elder_talk",[]],

  [anyone ,"village_elder_recruit_start", [(party_get_slot, ":num_volunteers", "$current_town", slot_center_volunteer_troop_amount),
                                           (party_get_free_companions_capacity, ":free_capacity", "p_main_party"),
                                           (val_min, ":num_volunteers", ":free_capacity"),
                                           (store_troop_gold, ":gold", "trp_player"),
                                           (store_div, ":gold_capacity", ":gold", 10),#10 denars per man
                                           (val_min, ":num_volunteers", ":gold_capacity"),
                                           (assign, "$temp",  ":num_volunteers"),
                                           (assign, reg5, ":num_volunteers"),
                                           (store_add, reg7, ":num_volunteers", -1),
                                           ],
   "I can think of {reg5} whom I suspect would jump at the chance. If you could pay 10 denars {reg7?each for their equipment:for his equipment}.\
 Does that suit you?", "village_elder_recruit_decision",[]],

#not used:
##  [anyone|plyr,"village_elder_recruit_decision", [(party_get_slot, ":num_volunteers", "$current_town", slot_center_volunteer_troop_amount),
##                                                  (party_get_free_companions_capacity, ":free_capacity", "p_main_party"),
##                                                  (val_min, ":num_volunteers", ":free_capacity"),
##                                                  (store_troop_gold, ":gold", "trp_player"),
##                                                  (store_div, ":gold_capacity", ":gold", 10),#10 denars per man
##                                                  (val_min, ":num_volunteers", ":gold_capacity"),
##                                                  (eq, ":num_volunteers", 0),],
##   "So be it.", "village_elder_pretalk",
##   [
##     (try_begin),
##       (party_slot_eq, "$current_town", slot_center_volunteer_troop_amount, 0), #do not change the value if it is above 0
##       (party_set_slot, "$current_town", slot_center_volunteer_troop_amount, -1),
##     (try_end),]],

  [anyone|plyr,"village_elder_recruit_decision", [(assign, ":num_volunteers", "$temp"),
                                                  (ge, ":num_volunteers", 1),
                                                  (store_add, reg7, ":num_volunteers", -1)],
   "Tell {reg7?them:him} to make ready.", "village_elder_pretalk",[(call_script, "script_village_recruit_volunteers_recruit"),]],

  [anyone|plyr,"village_elder_recruit_decision", [(party_slot_ge, "$current_town", slot_center_volunteer_troop_amount, 1)],
   "No, not now.", "village_elder_pretalk",[]],

  [anyone,"village_elder_active_mission_1", [], "Yes {sir/madam}, have you made any progress on it?", "village_elder_active_mission_2",[]],

  [anyone|plyr,"village_elder_active_mission_2",[(store_partner_quest,":elder_quest"),
                                                 (eq, ":elder_quest", "qst_deliver_grain"),
                                                 (quest_get_slot, ":quest_target_amount", "qst_deliver_grain", slot_quest_target_amount),
                                                 (call_script, "script_get_troop_item_amount", "trp_player", "itm_grain"),
                                                 (assign, ":cur_amount", reg0),
                                                 (ge, ":cur_amount", ":quest_target_amount"),
                                                 (assign, reg5, ":quest_target_amount"),
                                                 ],
   "Indeed. I brought you {reg5} packs of grain.", "village_elder_deliver_grain_thank",
   []],

  [anyone,"village_elder_deliver_grain_thank", [(str_store_party_name, s13, "$current_town")],
   "My good {lord/lady}. You have saved us from hunger and desperation. We cannot thank you enough, but you'll always be in our prayers.\
 The village of {s13} will not forget what you have done for us.", "village_elder_deliver_grain_thank_2",
   [(quest_get_slot, ":quest_target_amount", "qst_deliver_grain", slot_quest_target_amount),
    (troop_remove_items, "trp_player", "itm_grain", ":quest_target_amount"),
    (add_xp_as_reward, 400),
    (call_script, "script_change_center_prosperity", "$current_town", 4),
    (call_script, "script_change_player_relation_with_center", "$current_town", 5),
    (call_script, "script_end_quest", "qst_deliver_grain"),
#Troop commentaries begin
    (call_script, "script_add_log_entry", logent_helped_peasants, "trp_player",  "$current_town", -1, -1),
#Troop commentaries end
   ]],

  [anyone,"village_elder_deliver_grain_thank_2", [],
   "My good {lord/lady}, please, is there anything I can do for you?", "village_elder_talk",[]],


  [anyone|plyr,"village_elder_active_mission_2", [], "I am still working on it.", "village_elder_active_mission_3",[]],
  [anyone|plyr,"village_elder_active_mission_2", [], "I am afraid I won't be able to finish it.", "village_elder_mission_failed",[]],

  [anyone,"village_elder_active_mission_3",
  ##diplomacy start+ change to use script_dplmc_print_subordinate_says_sir_madame_to_s0
  #"Thank you, {sir/madam}. We are praying for your success everyday."
  [(call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),],
  "Thank you, {s0}. We are praying for your success everyday.", "village_elder_pretalk",[]],
  ##diplomacy end+

  ##diplomacy start+ change to use script_dplmc_print_subordinate_says_sir_madame_to_s0
  [anyone,"village_elder_mission_failed", #[], "Ah, I am sorry to hear that {sir/madam}. I'll try to think of something else.",
  [(call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),],
  "Ah, I am sorry to hear that {s0}. I'll try to think of something else.",
  ##diplomacy end+
  "village_elder_pretalk",
   [(store_partner_quest,":elder_quest"),
    (call_script, "script_abort_quest", ":elder_quest", 1)]],
##
##  [anyone,"village_elder_generic_mission_thank", [],
##   "You have been so helpful {sir/madam}. I do not know how to thank you.", "village_elder_generic_mission_completed",[]],
##
##  [anyone|plyr,"village_elder_generic_mission_completed", [],
##   "Speak not of it. I only did what needed to be done.", "village_elder_pretalk",[]],

# Currently not needed.
##  [anyone|plyr,"village_elder_generic_mission_failed", [],
##   "TODO: I'm sorry I failed you sir. It won't happen again.", "village_elder_pretalk",
##   [(store_partner_quest,":elder_quest"),
##    (call_script, "script_finish_quest", ":elder_quest", 0),
##    ]],


  [anyone,"village_elder_request_mission_ask",
  ##diplomacy start+ change to use script_dplmc_print_subordinate_says_sir_madame_to_s0
  #[(store_partner_quest,":elder_quest"),(ge,":elder_quest",0)],
  [(store_partner_quest,":elder_quest"),
   (ge,":elder_quest",0),
   (call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),],
  #"Well {sir/madam}, you are already engaged with a task helping us. We cannot ask more from you.", "village_elder_pretalk",[]],
  "Well {s0} you are already engaged with a task helping us. We cannot ask more from you.", "village_elder_pretalk",[]],
  ##diplomacy end+

  ##diplomacy start+ change to use script_dplmc_print_subordinate_says_sir_madame_to_s0
  [anyone,"village_elder_request_mission_ask", #[(troop_slot_eq, "$g_talk_troop", slot_troop_does_not_give_quest, 1)],
   [(troop_slot_eq, "$g_talk_troop", slot_troop_does_not_give_quest, 1),
    (call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),],
   #"No {sir/madam}, We don't have any other tasks for you.", "village_elder_pretalk",[]],
   "No {s0}, We don't have any other tasks for you.", "village_elder_pretalk",[]],
   ##diplomacy end+

  [anyone|auto_proceed,"village_elder_request_mission_ask", [], "A task?", "village_elder_tell_mission",
   [
       (call_script, "script_get_quest", "$g_talk_troop"),
       (assign, "$random_quest_no", reg0),
   ]],


  [anyone,"village_elder_tell_mission", [(eq,"$random_quest_no","qst_deliver_grain")],
   "{My good sir/My good lady}, our village has been going through such hardships lately.\
 The harvest has been bad, and recently some merciless bandits took away our seed grain that we had reserved for the planting season.\
 If we cannot find some grain soon, we will not be able to plant our fields and then we will have nothing to eat for the coming year.\
 If you can help us, we would be indebted to you forever.", "village_elder_tell_deliver_grain_mission",
   [
     (quest_get_slot, ":quest_target_center", "$random_quest_no", slot_quest_target_center),
     (str_store_party_name_link,s3,":quest_target_center"),
     (quest_get_slot, reg5, "$random_quest_no", slot_quest_target_amount),
     (setup_quest_text,"$random_quest_no"),
     (str_store_string, s2, "@The elder of the village of {s3} asked you to bring them {reg5} packs of grain."),
   ]],

  [anyone|plyr,"village_elder_tell_deliver_grain_mission", [],
   "Hmmm. How much grain do you need?", "village_elder_tell_deliver_grain_mission_2",[]],
  [anyone|plyr,"village_elder_tell_deliver_grain_mission", [],
   "I can't be bothered with this. Ask help from someone else.", "village_elder_deliver_grain_mission_reject",[]],

  [anyone,"village_elder_tell_deliver_grain_mission_2", [(quest_get_slot, reg5, "$random_quest_no", slot_quest_target_amount)],
   "I think {reg5} packs of grain will let us start the planting. Hopefully, we can find charitable people to help us with the rest.", "village_elder_tell_deliver_grain_mission_3",[]],

  [anyone|plyr,"village_elder_tell_deliver_grain_mission_3", [],
   "Then I will go and find you the grain you need.", "village_elder_deliver_grain_mission_accept",[]],
  [anyone|plyr,"village_elder_tell_deliver_grain_mission_3", [],
   "I am afraid I don't have time for this. You'll need to find help elsewhere.", "village_elder_deliver_grain_mission_reject",[]],
  ##diplomacy start+ replace {sir/madam} with {my lord/my lady} or your highness if appropriate
  [anyone,"village_elder_deliver_grain_mission_accept", #[], "Thank you, {sir/madam}. We'll be praying for you night and day.", "close_window",
   [(call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),],
   "Thank you, {s0}. We'll be praying for you night and day.", "close_window",
  ##diplomacy end+
   [(assign, "$g_leave_encounter",1),
    (call_script, "script_change_player_relation_with_center", "$current_town", 5),
    (call_script, "script_start_quest", "$random_quest_no", "$g_talk_troop"),
    ]],

##diplomacy start+ replace {sir/madam} with {my lord/my lady} or your highness if appropriate
  [anyone,"village_elder_deliver_grain_mission_reject", #[], "Yes {sir/madam}, of course. I am sorry if I have bothered you with our troubles.", "close_window",
  [(call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),], "Yes {s0}, of course. I am sorry if I have bothered you with our troubles.", "close_window",
##diplomacy end+
   [(troop_set_slot, "$g_talk_troop", slot_troop_does_not_give_quest, 1),
    ]],



  [anyone,"village_elder_tell_mission", [(eq,"$random_quest_no", "qst_train_peasants_against_bandits")],
   "We are suffering greatly at the hands of a group of bandits. They take our food and livestock,\
 and kill anyone who doesn't obey them immediately. Our men are angry that we cannot defend ourselves, but we are only simple farmers...\
 However, with some help, I think that some of the people here could be more than that.\
 We just need an experienced warrior to teach us how to fight.",
   "village_elder_tell_train_peasants_against_bandits_mission",
   [
     (quest_get_slot, ":quest_target_center", "$random_quest_no", slot_quest_target_center),
     (str_store_party_name_link, s13, ":quest_target_center"),
     (quest_get_slot, reg5, "$random_quest_no", slot_quest_target_amount),
     (setup_quest_text, "$random_quest_no"),
     (str_store_string, s2, "@The elder of the village of {s13} asked you to train {reg5} peasants to fight against local bandits."),
   ]],

  [anyone|plyr, "village_elder_tell_train_peasants_against_bandits_mission", [],
   "I can teach you how to defend yourself.", "village_elder_train_peasants_against_bandits_mission_accept",[]],
  [anyone|plyr, "village_elder_tell_train_peasants_against_bandits_mission", [],
   "You peasants have no business taking up arms. Just pay the bandits and be off with it.", "village_elder_train_peasants_against_bandits_mission_reject",[]],

  ##diplomacy start+ replace {sir/madam} with {my lord/my lady} or your highness if appropriate
  [anyone,"village_elder_train_peasants_against_bandits_mission_accept",
   [(call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),],
   "You will? Oh, splendid! We would be deeply indebted to you, {s0}. I'll instruct the village folk to assemble here and receive your training. If you can teach us how to defend ourselves, I promise you'll receive everything we can give you in return for your efforts.", "close_window",
    ##diplomacy end+
   [
     (assign, "$g_leave_encounter",1),
     #TODO: Change this value
     (call_script, "script_change_player_relation_with_center", "$current_town", 3),
     (call_script, "script_start_quest", "$random_quest_no", "$g_talk_troop"),
     ]],

##diplomacy start+ replace {sir/madam} with {my lord/my lady} or your highness if appropriate
  [anyone,"village_elder_train_peasants_against_bandits_mission_reject", #[], "Yes, of course {sir/madam}.\
  [(call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),],
  "Yes, of course {s0}.  Thank you for your counsel.", "close_window",
##diplomacy end+
   [
     (troop_set_slot, "$g_talk_troop", slot_troop_does_not_give_quest, 1),
     ]],


  [anyone,"village_elder_tell_mission", [(eq,"$random_quest_no","qst_deliver_cattle")],
   "Bandits have driven away our cattle. Our pastures are empty. If we had just a few heads of cattle we could start to raise a herd again.",
   "village_elder_tell_deliver_cattle_mission",
   [
     (quest_get_slot, ":quest_target_center", "$random_quest_no", slot_quest_target_center),
     (str_store_party_name_link,s3,":quest_target_center"),
     (quest_get_slot, reg5, "$random_quest_no", slot_quest_target_amount),
     (setup_quest_text,"$random_quest_no"),
     (str_store_string, s2, "@The elder of the village of {s3} asked you to bring them {reg5} heads of cattle."),
   ]],

  [anyone|plyr,"village_elder_tell_deliver_cattle_mission", [],
   "How many animals do you need?", "village_elder_tell_deliver_cattle_mission_2",[]],
  [anyone|plyr,"village_elder_tell_deliver_cattle_mission", [],
   "I don't have time for this. Ask help from someone else.", "village_elder_deliver_cattle_mission_reject",[]],

  [anyone,"village_elder_tell_deliver_cattle_mission_2", [(quest_get_slot, reg5, "$random_quest_no", slot_quest_target_amount)],
   "I think {reg5} heads will suffice for a small herd.", "village_elder_tell_deliver_cattle_mission_3",[]],

  [anyone|plyr,"village_elder_tell_deliver_cattle_mission_3", [],
   "Then I will bring you the cattle you need.", "village_elder_deliver_cattle_mission_accept",[]],
  [anyone|plyr,"village_elder_tell_deliver_cattle_mission_3", [],
   "I am afraid I don't have time for this. You'll need to find help elsewhere.", "village_elder_deliver_cattle_mission_reject",[]],

  ##diplomacy start+ replace {sir/madam} with {my lord/my lady} or your highness if appropriate
  [anyone,"village_elder_deliver_cattle_mission_accept", [(call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),], "Thank you, {s0}. We'll be praying for you night and day.", "close_window",
  ##diplomacy end+
   [(assign, "$g_leave_encounter",1),
    (call_script, "script_change_player_relation_with_center", "$current_town", 3),
    (call_script, "script_start_quest", "$random_quest_no", "$g_talk_troop"),
    ]],

  ##diplomacy start+ replace {sir/madam} with {my lord/my lady} or your highness if appropriate
  [anyone,"village_elder_deliver_cattle_mission_reject", [(call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),], "Yes {s0}, of course. I am sorry if I have bothered you with our troubles.", "close_window",
  ##diplomacy end+
   [(troop_set_slot, "$g_talk_troop", slot_troop_does_not_give_quest, 1),
    ]],

  #diplomacy start+ replace {sir/madam} with {my lord/my lady} or your highness if appropriate
  [anyone,"village_elder_tell_mission", [(call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),], "Thank you, {s0}, but we do not really need anything right now.", "village_elder_pretalk",[]],
  #diplomacy end+

##  [anyone|plyr,"village_elder_mission_told", [], "TODO: As you wish sir. You can count on me.", "village_elder_mission_accepted",[]],
##  [anyone|plyr,"village_elder_mission_told", [], "TODO: I'm afraid I can't carry out this mission right now, sir.", "village_elder_mission_rejected",[]],
##
##  [anyone,"village_elder_mission_accepted", [], "TODO: Excellent. Do this {playername}. I really have high hopes for you.", "close_window",
##   [(assign, "$g_leave_encounter",1),
##    (try_begin),
##    #TODO: Add quest initializations here
##    (try_end),
##    (call_script, "script_start_quest", "$random_quest_no", "$g_talk_troop"),
##    ]],

##  [anyone,"village_elder_mission_rejected", [], "TODO: Is that so? Perhaps you are not up for the task anyway...", "close_window",
##   [(assign, "$g_leave_encounter",1),
##    (call_script, "script_change_player_relation_with_troop", "$g_talk_troop", -1),
##    (troop_set_slot, "$g_talk_troop", slot_troop_does_not_give_quest, 1),
##    ]],




#Goods Merchants

  [anyone ,"start", [(is_between,"$g_talk_troop",goods_merchants_begin,goods_merchants_end),
                     (party_slot_eq, "$current_town", slot_town_lord, "trp_player")],
   "{My lord/my lady}, you honour my humble shop with your presence.", "goods_merchant_talk",[]],
  ##diplomacy start+ replace {sir/madam} with {my lord/my lady} or your highness if appropriate
  [anyone ,"start", [(is_between,"$g_talk_troop",goods_merchants_begin,goods_merchants_end),
			         (call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),],
   "Welcome {s0}. What can I do for you?", "goods_merchant_talk",[]],
  ##diplomacy end+
#  [trp_salt_mine_merchant,"start", [], "Hello.", "goods_merchant_talk",[]],

#  [anyone,"merchant_begin", [], " What can I do for you?", "goods_merchant_talk",[]],

  [anyone,"goods_merchant_pretalk", [], "Anything else?", "goods_merchant_talk",[]],

  [anyone|plyr,"goods_merchant_talk", [], "I want to buy a few items... and perhaps sell some.", "goods_trade_requested",[]],
  [anyone,"goods_trade_requested", [], "Sure, sure... Here, have a look at my stock...", "goods_trade_completed",[[change_screen_trade]]],
  [anyone,"goods_trade_completed", [], "Anything else?", "goods_merchant_talk",[]],

  #SB : condition of disguises
  [anyone|plyr,"goods_merchant_talk", [
  (this_or_next|eq, "$sneaked_into_town", disguise_none),
  (this_or_next|eq, "$sneaked_into_town", disguise_farmer),
  (eq, "$sneaked_into_town", disguise_merchant),
  ], "What goods should I buy here to trade with other towns?", "trade_info_request",[]],

  [anyone|plyr,"goods_merchant_talk", [], "Nothing. Thanks.", "close_window",[]],

  [anyone,"trade_info_request", [], "That information can be best obtained from caravan masters\
 and travelling merchants. If you want I can send you to the district where foreign merchants stay at when they come to the town.\
 If you spend some time there and listen to the talk,\
 you can learn a lot about what to buy and where to sell it.", "trade_info_request_2",[]],

  [anyone|plyr,"trade_info_request_2", [], "Then I'll go and spend some time with these merchants.", "close_window",
    [
      (jump_to_menu,"mnu_town_trade_assessment_begin"),
      (finish_mission),
    ]],

  [anyone|plyr,"trade_info_request_2", [], "I have no time for this right now.", "goods_merchant_pretalk",[]],


#  [anyone|plyr,"goods_merchant_talk", [], "What do caravans buy and sell in this town?", "goods_merchant_town_info",[]],
#  [anyone,"goods_merchant_town_info_completed", [], "Anything else?", "goods_merchant_talk",[]],


##  [anyone,"goods_merchant_town_info", [],
##   "TODO: We produce {s1}, and we consume {s2}.", "goods_merchant_town_info_completed",
##   [(call_script, "script_print_productions_above_or_below_50", "$g_encountered_party", 1),
##    (str_store_string_reg, s1, s51),
##    (call_script, "script_print_productions_above_or_below_50", "$g_encountered_party", -1),
##    (str_store_string_reg, s2, s51)]],
##
##  [anyone,"goods_merchant_town_info", [(store_encountered_party,reg(1)),(eq,reg(1),"p_zendar")],
##"You can buy tools from here at a very good price.\
## The best place to sell them would be Tulga. Heard they pay quite well for tools over there.\
## And next time you come here bring some salt. I will pay well for salt.", "goods_merchant_town_info_completed",[]],
##  [anyone,"goods_merchant_town_info", [(store_encountered_party,reg(1)),(eq,reg(1),"p_town_1")],
##"Sargoth is famous for its fine linen. Many caravans come here to buy that.\
## I heard you can sell it at Halmar and make a nice profit.\
## And next time you come here bring some iron. I will pay well for iron.", "goods_merchant_town_info_completed",[]],
##  [anyone,"goods_merchant_town_info", [[store_encountered_party,reg(1)],[eq,reg(1),"p_town_2"]],
##"I can sell you some smoked fish with a special price.\
## I heard that caravans take smoked fish to Uxkhal and make a good profit.\
## And next time you come here bring some wool. I will pay you well for wool.", "goods_merchant_town_info_completed",[]],
##  [anyone,"goods_merchant_town_info", [[store_encountered_party,reg(1)],[eq,reg(1),"p_town_3"]],
##"I can sell you some wine with a special price.\
## I heard that caravans buy wine from here and sell it at Wercheg, making a good profit.\
## And next time you come here, bring some dried meat. I will pay you well for dried meat.", "goods_merchant_town_info_completed",[]],
##  [anyone,"goods_merchant_town_info", [[store_encountered_party,reg(1)],[eq,reg(1),"p_town_4"]],
##"I have a stock of oil which I can sell you with a good price.\
## They say they offer a fortune for oil in Rivacheg, so maybe you can sell it there.\
## And next time you come here, bring some furs. I will pay you well for furs.", "goods_merchant_town_info_completed",[]],
##  [anyone,"goods_merchant_town_info", [[store_encountered_party,reg(1)],[eq,reg(1),"p_town_5"]],
##"Jelkala is famous for its velvet. Many caravans come here to buy that.\
## They say merchants will buy it at insane prices in Reyvadin, so maybe you can take it there.\
## And next time you come here, bring some pottery. I will pay you well for pottery.", "goods_merchant_town_info_completed",[]],
##  [anyone,"goods_merchant_town_info", [[store_encountered_party,reg(1)],[eq,reg(1),"p_town_6"]],
##"We produce some excellent ale here in Praven. Most caravans come here to buy that.\
## They say that the folks at Khudan will sell their right arms for ale, so maybe you can take it there.\
## And next time you come here, bring some spice. I have sold out my stock of spice and I will pay you well for it.", "goods_merchant_town_info_completed",[]],
##  [anyone,"goods_merchant_town_info", [[store_encountered_party,reg(1)],[eq,reg(1),"p_town_7"]],
##"We produce mostly wheat here in Uxkhal. I would suggest you buy that.\
## I heard you can sell it with a good profit in Tulga, so maybe you can take it there.\
## And next time you come here, bring some smoked fish. I will pay you well for it.", "goods_merchant_town_info_completed",[]],
##
##  [anyone,"goods_merchant_town_info", [[store_encountered_party,reg(1)],[eq,reg(1),"p_town_8"]],
##"Most caravans come to Reyvadin to buy wool.\
## I heard that they take it to Tihr where they pay well for wool.\
## And next time you come here, bring some velvet. I will buy it from you at a good price.", "goods_merchant_town_info_completed",[]],
##  [anyone,"goods_merchant_town_info", [[store_encountered_party,reg(1)],[eq,reg(1),"p_town_9"]],
##"Most caravans come to Khudan to buy furs.\
## I heard that they take it to Suno where they pay well for it.\
## And next time you come here, bring some ale. I will buy it from you at a good price.", "goods_merchant_town_info_completed",[]],
##  [anyone,"goods_merchant_town_info", [[store_encountered_party,reg(1)],[eq,reg(1),"p_town_10"]],
##"Most caravans come to Tulga to buy spice.\
## They say that in Praven they pay well for spice, so you may think of selling it to the mechants there.\
## And next time you come here, bring some wheat. I will buy it from you at a good price.", "goods_merchant_town_info_completed",[]],
##  [anyone,"goods_merchant_town_info", [[store_encountered_party,reg(1)],[eq,reg(1),"p_town_11"]],
##"We mine a lot of iron here in Curaw. I would suggest you buy that.\
## I heard you can take it to Sargoth and sell it with a good profit.\
## And next time you come here, bring some dried meat. I will pay you well for it.", "goods_merchant_town_info_completed",[]],
##  [anyone,"goods_merchant_town_info", [[store_encountered_party,reg(1)],[eq,reg(1),"p_town_12"]],
##"I can sell you some smoked fish with a special price.\
## I heard that caravans take smoked fish to Uxkhal and make a good profit.\
## And next time you come here bring some wine. I will pay you well for wine.", "goods_merchant_town_info_completed",[]],
##  [anyone,"goods_merchant_town_info", [[store_encountered_party,reg(1)],[eq,reg(1),"p_town_13"]],
##"I have a stock of dried meat which I can sell you with a good price.\
## They say they pay very well for dried meat in Veluca, so maybe you can sell it there.\
## And next time you come here, bring some oil. I have sold out my stock of oil and I will pay you well for it.", "goods_merchant_town_info_completed",[]],
##  [anyone,"goods_merchant_town_info", [[store_encountered_party,reg(1)],[eq,reg(1),"p_town_14"]],
##"We produce some good quality pottery here in Halmar. Most caravans come here to buy that.\
## I heard that caravans buy pottery from here and sell it at Jelkala, making a good profit.\
## And next time you come here, bring some linen. I have sold out my stock of linen and I will pay you well for it.", "goods_merchant_town_info_completed",[]],
##
##  [anyone,"goods_merchant_town_info", [[store_encountered_party,reg(1)],[eq,reg(1),"p_salt_mine"]],
##"Heh. Are you joking with me? This is the salt mine. Merchants come here to buy salt.", "goods_merchant_town_info_completed",[]],
##
##  [anyone,"goods_merchant_town_info", [
##                                       (store_encountered_party,reg(9)),
##                                       (party_get_slot,reg(5),reg(9),slot_town_export_good),
##                                       (party_get_slot,reg(6),reg(9),slot_town_import_good),
##                                       (ge,reg(5),1),
##                                       (ge,reg(6),1),
##                                       (str_store_item_name,1,reg(5)),
##                                       (str_store_item_name,2,reg(6)),
##                                       ],
##  "I can sell you some {s1} with a special price.\
##And next time you come here bring some {s2}. I will pay you well for that.", "goods_merchant_town_info_completed",[]],
##
##  [anyone,"goods_merchant_town_info", [
##                                       (store_encountered_party,reg(9)),
##                                       (party_get_slot,reg(5),reg(9),slot_town_export_good),
##                                       (ge,reg(5),1),
##                                       (str_store_item_name,1,reg(5)),
##                                       ],
##  "I can sell you some {s1} with a special price.", "goods_merchant_town_info_completed",[]],
##
##  [anyone,"goods_merchant_town_info", [
##                                       (store_encountered_party,reg(9)),
##                                       (party_get_slot,reg(6),reg(9),slot_town_import_good),
##                                       (ge,reg(6),1),
##                                       (str_store_item_name,2,reg(6)),
##                                       ],
##  "If you have some {s2} with you, I am ready to pay you good money for it.", "goods_merchant_town_info_completed",[]],
##
##  [anyone,"goods_merchant_town_info", [],
##"Sorry. Caravans hardly ever trade anything here.", "goods_merchant_town_info_completed",[]],






#############################################################################
#### ARENA MASTERS
#############################################################################
  [anyone ,"start", [(store_conversation_troop,reg(1)),
                     (is_between,reg(1),arena_masters_begin,arena_masters_end),
                     (assign, "$arena_reward_asked", 0), #set some variables.
                     (assign, "$arena_tournaments_asked", 0),
                     (eq,1,0),
                     ],
   "{!}.", "arena_intro_1",[]],
  [anyone ,"start", [(store_conversation_troop,reg(1)),
                     (is_between,reg(1),arena_masters_begin,arena_masters_end),
                     (eq,"$arena_master_first_talk", 0),
                     ],
   "Good day friend. If you came to watch the tournaments you came in vain. There won't be a tournament here anytime soon.", "arena_intro_1",[(assign,"$arena_master_first_talk", 1)]],
  [anyone|plyr,"arena_intro_1", [], "Tournaments? So they hold the tournaments here...", "arena_intro_2",[]],
  [anyone,"arena_intro_2", [], "Yes. You should see this place during one of the tournament fights.\
 Everyone from the town and nearby villages comes here. The crowd becomes mad with excitement.\
 Anyway, as I said, there won't be an event here soon, so there isn't much to see.\
 Except, there is an official duel every now and then, and  of course we have melee fights almost every day.", "arena_intro_3",[]],
  [anyone|plyr,"arena_intro_3", [], "Tell me about the melee fights.", "arena_training_melee_intro",[]],
  [anyone,"arena_training_melee_intro", [], "The fighters and knights get bored waiting for the next tournament,\
 so they have invented the training melee. It is a simple idea really.\
 Fighters jump into the arena with a weapon. There are no rules, no teams.\
 Everyone beats at each other until there is only one fighter left standing.\
 Sounds like fun, eh?", "arena_training_melee_intro_2",[]],
  [anyone|plyr,"arena_training_melee_intro_2", [(eq, "$arena_reward_asked", 0)], "Is there a reward?", "arena_training_melee_intro_reward",[(assign, "$arena_reward_asked", 1)]],
  [anyone,"arena_training_melee_intro_reward", [(assign, reg1, arena_tier1_opponents_to_beat),(assign, reg11, arena_tier1_prize),
      (assign, reg2, arena_tier2_opponents_to_beat),(assign, reg12, arena_tier2_prize),
      (assign, reg3, arena_tier3_opponents_to_beat),(assign, reg13, arena_tier3_prize),
      (assign, reg4, arena_tier4_opponents_to_beat),(assign, reg14, arena_tier4_prize),
      (assign, reg15, arena_grand_prize)
    ], "There is, actually. Some of the wealthy townsmen offer prizes for those fighters who show great skill in the fights.\
 If you can beat {reg1} opponents before going down, you'll earn {reg11} denars. You'll get {reg12} denars for striking down at least {reg2} opponents,\
 {reg13} denars if you can defeat {reg3} opponents, and {reg14} denars if you can survive long enough to beat {reg4} opponents.\
 If you can manage to be the last {man/fighter} standing, you'll earn the great prize of the fights, {reg15} denars. Sounds good, eh?", "arena_training_melee_intro_2",[(assign, "$arena_tournaments_asked", 1),]],
  [anyone,"arena_training_melee_explain_reward", [
      (assign, reg1, arena_tier1_opponents_to_beat),(assign, reg11, arena_tier1_prize),
      (assign, reg2, arena_tier2_opponents_to_beat),(assign, reg12, arena_tier2_prize),
      (assign, reg3, arena_tier3_opponents_to_beat),(assign, reg13, arena_tier3_prize),
      (assign, reg4, arena_tier4_opponents_to_beat),(assign, reg14, arena_tier4_prize),
      (assign, reg15, arena_grand_prize)
      ], "Some of the wealthy townsmen offer prizes for those fighters who show great skill in the fights.\
 If you can beat {reg1} opponents before going down, you'll earn {reg11} denars. You'll get {reg12} denars for striking down at least {reg2} opponents,\
 {reg13} denars if you can defeat {reg3} opponents, and {reg14} denars if you can survive long enough to beat {reg4} opponents.\
 If you can manage to be the last {man/fighter} standing, you'll earn the great prize of the fights, {reg15} denars. Sounds good, eh?", "arena_master_melee_pretalk",[]],
  [anyone|plyr,"arena_training_melee_intro_2", [], "Can I join too?", "arena_training_melee_intro_3",[]],
  [anyone,"arena_training_melee_intro_3", [], "Ha ha. You would have to be out of your mind not to. Of course. The melee fights are open to all.\
 Actually there is going to be a fight soon. You can go and hop in if you want to.", "arena_master_melee_talk",[]],


  [anyone ,"start", [
                     # (store_conversation_troop,reg(1)),
                     # (is_between,reg(1),arena_masters_begin,arena_masters_end),
                     #SB : use global instead of storing it again
                     (is_between, "$g_talk_troop", arena_masters_begin, arena_masters_end),
                     (eq,"$g_talk_troop_met", 0),
                     ],
   "Hello. You seem to be new here. Care to share your name?", "arena_master_intro_1",[]],
  [anyone|plyr,"arena_master_intro_1", [], "I am {playername}.", "arena_master_intro_2",[]],
  [anyone,"arena_master_intro_2", [
  # (store_encountered_party,reg(2)),(str_store_party_name,1,reg(2))
  (str_store_party_name, s1, "$current_town"),
  ],
   "Well met {playername}. I am the master of the tournaments here at {s1}. Talk to me if you want to join the fights.", "arena_master_pre_talk",[]],


  [anyone|auto_proceed ,"start", [(store_conversation_troop,reg(1)),(is_between,reg(1),arena_masters_begin,arena_masters_end),
                     (eq, "$last_training_fight_town", "$current_town"),
                     (store_current_hours,":cur_hours"),
                     (val_add, ":cur_hours", -4),
                     (lt, ":cur_hours", "$training_fight_time")],
   ".", "arena_master_fight_result",[(assign, "$arena_reward_asked", 0)]],

  [anyone ,"arena_master_fight_result",
   [
     (eq, "$g_arena_training_won", 0),
     (eq, "$g_arena_training_kills", 0)
     ],
   "Ha-ha, that's quite the bruise you're sporting. But don't worry; everybody gets trounced once in awhile. The important thing is to pick yourself up, dust yourself off and keep fighting. That's what champions do.", "arena_master_pre_talk",[(assign, "$last_training_fight_town", -1)]],

  [anyone ,"arena_master_fight_result",
   [
     (eq, "$g_arena_training_won", 0),
     (lt, "$g_arena_training_kills", arena_tier1_opponents_to_beat),
     (assign, reg8, "$g_arena_training_kills")
     ],
   "Hey, you managed to take down {reg8} opponents. Not bad. But that won't bring you any prize money.\
 Now, if I were you, I would go back there and show everyone what I can do...", "arena_master_pre_talk",[(assign, "$last_training_fight_town", -1)]],

  [anyone ,"arena_master_fight_result",
   [
     (eq, "$g_arena_training_won", 0),
     (lt, "$g_arena_training_kills", arena_tier2_opponents_to_beat),
     (assign, reg8, "$g_arena_training_kills"),
     (assign, reg10, arena_tier1_prize),
     ],
   "You put up quite a good fight there. Good moves. You definitely show promise.\
 And you earned a prize of {reg10} denars for knocking down {reg8} opponents.", "arena_master_pre_talk",[
     (call_script, "script_troop_add_gold", "trp_player", arena_tier1_prize),
     (add_xp_to_troop,5,"trp_player"),
     (assign, "$last_training_fight_town", -1)]],

  [anyone ,"arena_master_fight_result",
   [
     (eq, "$g_arena_training_won", 0),
     (lt, "$g_arena_training_kills", arena_tier3_opponents_to_beat),
     (assign, reg8, "$g_arena_training_kills"),
     (assign, reg10, arena_tier2_prize),
     (assign, reg12, arena_tier2_opponents_to_beat),
     ],
   "That was a good fight you put up there. You managed to take down no less than {reg8} opponents.\
 And of course, you earned a prize money of {reg10} denars.", "arena_master_pre_talk",[
     (call_script, "script_troop_add_gold", "trp_player", arena_tier2_prize),
     (add_xp_to_troop,10,"trp_player"),
     (assign, "$last_training_fight_town", -1)]],

  [anyone ,"arena_master_fight_result",
   [
     (eq, "$g_arena_training_won", 0),
     (lt, "$g_arena_training_kills", arena_tier4_opponents_to_beat),
     (assign, reg8, "$g_arena_training_kills"),
     (assign, reg10, arena_tier3_prize)
     ],
   "Your performance was amazing! You are without doubt a very skilled fighter.\
 Not everyone can knock down {reg8} people in the fights. Of course you deserve a prize with that performance: {reg10} denars. Nice, eh?", "arena_master_pre_talk",[
     (call_script, "script_troop_add_gold", "trp_player", arena_tier3_prize),
     (add_xp_to_troop,10,"trp_player"),
     (assign, "$last_training_fight_town", -1)]],

  [anyone ,"arena_master_fight_result",
   [
     (eq, "$g_arena_training_won", 0),
     (assign, reg8, "$g_arena_training_kills"),
     (assign, reg10, arena_tier4_prize),
     ],
   "That was damned good fighting, {playername}. You have very good moves, excellent tactics.\
 And you earned a prize of {reg10} denars for knocking down {reg8} opponents.", "arena_master_pre_talk",
   [
     (call_script, "script_troop_add_gold", "trp_player", arena_tier4_prize),
     (add_xp_to_troop,10,"trp_player"),
     (assign, "$last_training_fight_town", -1),
     ]],

  [anyone ,"arena_master_fight_result", [(assign, reg10, arena_grand_prize)],
   "Congratulations champion! Your fight there was something to remember! You managed to be the last fighter standing beating down everyone else. And of course you won the grand prize of the fights: {reg10} denars.", "arena_master_pre_talk",[
     (call_script, "script_troop_add_gold", "trp_player", arena_grand_prize),
     (add_xp_to_troop,200,"trp_player"),
     (assign, "$last_training_fight_town", -1)]],


  [anyone ,"start", [
    #(store_conversation_troop,reg(1)),(is_between,reg(1),arena_masters_begin,arena_masters_end)
     #SB : use global instead of storing it again
     (is_between, "$g_talk_troop", arena_masters_begin, arena_masters_end),
  ],
   "Hello {playername}. Good to see you again.", "arena_master_pre_talk",[(assign, "$arena_reward_asked", 0)]],


  [anyone,"arena_master_pre_talk", [], "What would you like to do?", "arena_master_talk",[]],


#  [anyone|plyr,"arena_master_talk", [], "About the arena fights...", "arena_master_melee",[]],
  [anyone|plyr,"arena_master_talk", [], "About the melee fights...", "arena_master_melee_pretalk",[]],
  [anyone|plyr,"arena_master_talk", [(eq, "$arena_tournaments_asked", 0)], "Will there be a tournament in nearby towns soon?", "arena_master_ask_tournaments",[(assign, "$arena_tournaments_asked", 1)]],
  [anyone|plyr,"arena_master_talk", [], "I need to leave now. Good bye.", "close_window",[]],

  [anyone,"arena_master_ask_tournaments", [], "{reg2?There won't be any tournaments any time soon.:{reg1?Tournaments are:A tournament is} going to be held at {s15}.}", "arena_master_talk",
   [
       (assign, ":num_tournaments", 0),
       (try_for_range_backwards, ":town_no", towns_begin, towns_end),
         (party_slot_ge, ":town_no", slot_town_has_tournament, 1),
         (val_add, ":num_tournaments", 1),
         (try_begin),
           (eq, ":num_tournaments", 1),
           (str_store_party_name, s15, ":town_no"),
         (else_try),
           (str_store_party_name, s16, ":town_no"),
           (eq, ":num_tournaments", 2),
           (str_store_string, s15, "@{s16} and {s15}"),
         (else_try),
           (str_store_string, s15, "@{!}{s16}, {s15}"),
         (try_end),
       (try_end),
       (try_begin),
         (eq, ":num_tournaments", 0),
         (assign, reg2, 1),
       (else_try),
         (assign, reg2, 0),
         (store_sub, reg1, ":num_tournaments", 1),
       (try_end),
   ]],

  [anyone,"arena_master_melee_pretalk", [], "There will be a fight here soon. You can go and jump in if you like.", "arena_master_melee_talk",[]],
  #SB : add conditions for fighting with a chosen weapon
  [anyone|plyr,"arena_master_melee_talk", [
    (neg|troop_is_wounded, "trp_player"),
    (call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", "$g_encountered_party_faction"),
    (this_or_next|ge, reg0, DPLMC_FACTION_STANDING_MEMBER),
    (party_slot_ge, "$current_town", slot_center_player_relation, 15),
  ], "Good. Let me look through the weapons rack first.", "arena_master_melee_weapon_select",
   [(store_random_in_range, "$g_player_entry_point", 32, 40), #the 8 arena sparring entries
    ]],
  #from CC
  [anyone,"arena_master_melee_weapon_select", [], "Well, please choose a weapon which you'd like to use in the melee.", "arena_player_melee_weapon_select",[]],
  [anyone|plyr,"arena_player_melee_weapon_select", [], "Two-handed Sword.", "arena_melee_weapon_select_end",
    [
      (store_random_in_range, ":random_num", 0, 60),
      (try_begin),
        (le, ":random_num", 30),
        (assign, "$g_player_entry_point", 32),
      (else_try),
        (assign, "$g_player_entry_point", 38),
      (try_end),
    ]],
  [anyone|plyr,"arena_player_melee_weapon_select", [], "Staff.", "arena_melee_weapon_select_end",
    [
      (store_random_in_range, ":random_num", 0, 60),
      (try_begin),
        (le, ":random_num", 20),
        (assign, "$g_player_entry_point", 33),
      (else_try),
        (le, ":random_num", 40),
        (assign, "$g_player_entry_point", 35),
      (else_try),
        (assign, "$g_player_entry_point", 39),
      (try_end),
    ]],
  [anyone|plyr,"arena_player_melee_weapon_select", [], "Sword and Board.", "arena_melee_weapon_select_end",
    [
      (store_random_in_range, ":random_num", 0, 60),
      (try_begin),
        (le, ":random_num", 30),
        (assign, "$g_player_entry_point", 34),
      (else_try),
        (assign, "$g_player_entry_point", 37),
      (try_end),
    ]],
  [anyone|plyr,"arena_player_melee_weapon_select", [], "Bow and Arrow.", "arena_melee_weapon_select_end",
    [
      (assign, "$g_player_entry_point", 36),
    ]],
  [anyone,"arena_melee_weapon_select_end", [], "Good luck to you.", "close_window",
    [
      (assign, "$last_training_fight_town", "$current_town"),
      (store_current_hours,"$training_fight_time"),
      (assign, "$g_mt_mode", abm_training),
      # (party_get_slot, ":scene","$current_town",slot_town_arena),
      (store_current_scene, ":scene"),
      (modify_visitors_at_site,":scene"),
      (reset_visitors),
      (set_visitor, "$g_player_entry_point", "trp_player"),
      (set_jump_mission,"mt_arena_melee_fight"),
      (jump_to_scene, ":scene"),
    ]],
  ## CC
  #SB : add conditions for fighting with a random weapon
  [anyone|plyr,"arena_master_melee_talk", [
    (neg|troop_is_wounded, "trp_player"),
  ], "Good. That's what I am going to do.", "close_window",
   [
    (assign, "$last_training_fight_town", "$current_town"),
    (store_current_hours,"$training_fight_time"),
    (assign, "$g_mt_mode", abm_training),
    # (party_get_slot, ":scene","$current_town",slot_town_arena),
    (store_current_scene, ":scene"),
    (modify_visitors_at_site,":scene"),
    (reset_visitors),
    (store_random_in_range, "$g_player_entry_point", 32, 40),
    (set_visitor, "$g_player_entry_point", "trp_player"),
    (set_jump_mission,"mt_arena_melee_fight"),
    (jump_to_scene, ":scene"),
    ]],
  [anyone|plyr,"arena_master_melee_talk", [], "Thanks. But I will give my bruises some time to heal.", "arena_master_melee_reject",[]],
  [anyone,"arena_master_melee_reject", [], "Good {man/girl}. That's clever of you.", "arena_master_pre_talk",[]],

  [anyone|plyr,"arena_master_melee_talk", [(eq, "$arena_reward_asked", 0)], "Actually, can you tell me about the rewards again?", "arena_training_melee_explain_reward",[(assign, "$arena_reward_asked", 1)]],

#  [anyone,"arena_master_pre_talk",
#   [(eq,"$arena_join_or_watch",1),
#    (ge,"$arena_bet_amount",1),
#    (eq,"$arena_bet_team","$arena_winner_team"),
#    (assign,reg(5),"$arena_win_amount")],
# "You've won the bet, eh? Let me see. The sum you have earned amounts to {reg5} denars. Here you go.", "arena_master_pre_talk",
#   [(call_script, "script_troop_add_gold", "trp_player", "$arena_win_amount"),
#    (assign,"$arena_bet_amount",0),
#    (assign,"$arena_win_amount",0),
#    ]],

#  [anyone,"arena_master_pre_talk",
#   [(eq,"$arena_join_or_watch",0),
#    (ge,"$arena_bet_amount",1),
#    (eq,"$arena_fight_won",1),
#    (assign,reg(5),"$arena_win_amount"),
#   ],
# "And you had the good sense to bet on yourself too. Hmm let me see. You have won yourself some {reg5} denars. Here you are.", "arena_master_pre_talk",
#   [(call_script, "script_troop_add_gold", "trp_player", "$arena_win_amount"),
#    (assign,"$arena_bet_amount",0),
#    (assign,"$arena_win_amount",0)]],

#  [anyone,"start", [(store_conversation_troop,reg(1)),(is_between,reg(1),arena_masters_begin,arena_masters_end),(eq,"$waiting_for_arena_fight_result",1),(eq,"$arena_join_or_watch",0),(eq,"$arena_fight_won",1)],
# "Congratulations champion. You made some pretty good moves out there. Here is your share of share of the prize money, 2 denars.", "arena_master_pre_talk",
#   [(assign,"$waiting_for_arena_fight_result",0),(add_xp_to_troop,20,"trp_player"),(call_script, "script_troop_add_gold", "trp_player",2)]],
#  [anyone,"start", [(store_conversation_troop,reg(1)),(is_between,reg(1),arena_masters_begin,arena_masters_end),(eq,"$waiting_for_arena_fight_result",1),(eq,"$arena_join_or_watch",0)],
# "That's quite the bruise you're sporting. But don't worry; everybody gets trounced once in awhile. The important thing is to pick yourself up, dust yourself off and keep fighting. That's what champions do.", "arena_master_pre_talk",[[assign,"$waiting_for_arena_fight_result"]]],
#  [anyone,"start", [(store_conversation_troop,reg(1)),(is_between,reg(1),arena_masters_begin,arena_masters_end),(eq,"$waiting_for_arena_fight_result",1)],
# "That was exciting wasn't it? Nothing like a good fight to get the blood flowing.", "arena_master_pre_talk",[(assign,"$waiting_for_arena_fight_result",0)]],

##  [anyone,"arena_master_melee", [], "The next arena fight will start in a while. Hurry up if you want to take part in it.", "arena_master_melee_talk",[
##    (party_get_slot, ":arena_cur_tier","$current_town",slot_town_arena_melee_cur_tier),
##    (try_begin), #reg3 = num teams, reg4 = team size
##      (eq, ":arena_cur_tier", 0),
##      (party_get_slot, "$_num_teams","$current_town",slot_town_arena_melee_1_num_teams),
##      (party_get_slot, "$_team_size","$current_town",slot_town_arena_melee_1_team_size),
##    (else_try),
##      (eq, ":arena_cur_tier", 1),
##      (party_get_slot, "$_num_teams","$current_town",slot_town_arena_melee_2_num_teams),
##      (party_get_slot, "$_team_size","$current_town",slot_town_arena_melee_2_team_size),
##    (else_try),
##      (party_get_slot, "$_num_teams","$current_town",slot_town_arena_melee_3_num_teams),
##      (party_get_slot, "$_team_size","$current_town",slot_town_arena_melee_3_team_size),
##    (try_end),
##   ]],
##  [anyone|plyr,"arena_master_melee_talk", [], "I want to join the next fight", "arena_master_next_melee_join",[(assign,"$arena_join_or_watch",0)]],
##  [anyone|plyr,"arena_master_melee_talk", [], "I would like to watch the next fight", "arena_master_next_melee_watch",
##   [(assign,"$arena_join_or_watch",1)]],
##  [anyone|plyr,"arena_master_melee_talk", [], "No. perhaps later.", "arena_master_we_will_fight_not",[]],
##  [anyone,"arena_master_we_will_fight_not", [], "Alright. Talk to me when you are ready.", "close_window",[]],
##  [anyone,"arena_master_next_melee_join", [
##    (assign,"$arena_bet_amount"),
##    (assign,"$arena_bet_team",0),
##    (party_get_slot, ":player_odds", "$g_encountered_party", slot_town_player_odds),
##    (store_div, ":divider", ":player_odds", 20),
##    (store_mul, ":odds_simple", ":divider", 20),
##    (val_sub, ":odds_simple", ":player_odds"),
##    (try_begin),
##      (lt, ":odds_simple", 0),
##      (val_add, ":divider", 1),
##    (try_end),
##    (val_max, ":divider", 50),
##    (store_div, ":odds_player", ":player_odds", ":divider"),
##    (store_div, ":odds_other", 1000, ":divider"),
##    (try_for_range, ":unused", 0, 5),
##      (assign, ":last_divider", 21),
##      (try_for_range, ":cur_divider", 2, ":last_divider"),
##        (store_div, ":odds_player_test", ":odds_player", ":cur_divider"),
##        (val_mul, ":odds_player_test", ":cur_divider"),
##        (eq, ":odds_player_test", ":odds_player"),
##        (store_div, ":odds_other_test", ":odds_other", ":cur_divider"),
##        (val_mul, ":odds_other_test", ":cur_divider"),
##        (eq, ":odds_other_test", ":odds_other"),
##        (val_div, ":odds_player", ":cur_divider"),
##        (val_div, ":odds_other", ":cur_divider"),
##        (assign, ":last_divider", 0),
##      (try_end),
##    (try_end),
##    (assign, reg5, ":odds_player"),
##    (assign, reg6, ":odds_other"),], "Do you want to place a bet on yourself? The odds against you are {reg5} to {reg6}.", "arena_master_will_you_bet",
##   []],
##
##  [anyone|plyr,"arena_master_will_you_bet", [], "No.", "arena_master_start_fight",[]],
##  [anyone|plyr,"arena_master_will_you_bet", [(store_troop_gold,reg(0)),(ge,reg(0),10)], "I want to bet 10 denars.",
##   "arena_master_bet_placed",[(assign,"$arena_bet_amount",10),(troop_remove_gold, "trp_player",10)]],
##  [anyone|plyr,"arena_master_will_you_bet", [(store_troop_gold,reg(0)),(ge,reg(0),50)], "I want to bet 50 denars.",
##   "arena_master_bet_placed",[(assign,"$arena_bet_amount",50),(troop_remove_gold, "trp_player",50)]],
##  [anyone|plyr,"arena_master_will_you_bet", [(store_troop_gold,reg(0)),(ge,reg(0),100)], "I want to bet 100 denars.",
##   "arena_master_bet_placed",[(assign,"$arena_bet_amount",100),(troop_remove_gold, "trp_player",100)]],
##  [anyone,"arena_master_next_melee_watch", [], "Do you want to place a bet?", "arena_master_will_you_bet",[]],
##  [anyone,"arena_master_bet_placed", [(eq,"$arena_join_or_watch",1)], "Hmm. That's good. If you win, you'll get {reg5} denars. And which team do you want to place your bet on?", "arena_master_select_team",
##   [(store_mul, "$arena_win_amount", "$arena_bet_amount", "$_num_teams"),
##    (val_mul, "$arena_win_amount", 9),
##    (val_div, "$arena_win_amount", 10),
##    (assign, reg5, "$arena_win_amount"),
##    ]],
##  [anyone|plyr,"arena_master_select_team", [], "The red team. I have a feeling they will win this one.",
##   "arena_master_start_fight",[(assign,"$arena_bet_team",0)]],
##  [anyone|plyr,"arena_master_select_team", [], "The blue team. They will sweep the ground with the reds.",
##   "arena_master_start_fight",[(assign,"$arena_bet_team",1)]],
##  [anyone|plyr,"arena_master_select_team", [(ge,"$_num_teams",3)], "The green team. My money is on them this time.",
##   "arena_master_start_fight",[(assign,"$arena_bet_team",2)]],
##  [anyone|plyr,"arena_master_select_team", [(ge,"$_num_teams",4)], "The yellow team. They will be victorious.",
##   "arena_master_start_fight",[(assign,"$arena_bet_team",3)]],
##  [anyone,"arena_master_bet_placed", [], "That's good. Let me record that. If you win, you'll get {reg5} denars.", "arena_master_start_fight",
##   [(store_mul,"$arena_win_amount", "$arena_bet_amount", "$_num_teams"),
##    (party_get_slot, ":player_odds", "$g_encountered_party", slot_town_player_odds),
##    (val_sub, "$arena_win_amount", "$arena_bet_amount"),
##    (val_mul, "$arena_win_amount", ":player_odds"),
##    (val_div, "$arena_win_amount", 1000),
##    (val_add, "$arena_win_amount", "$arena_bet_amount"),
##    (val_mul, "$arena_win_amount", 9),
##    (val_div, "$arena_win_amount", 10),
##    (assign, reg5, "$arena_win_amount"),
##    ]],
##
##  [anyone,"arena_master_start_fight", [], "Very well. The fight starts in a moment. Good luck.", "close_window",
##   [
##    (store_encountered_party,"$current_town"),
##    (party_get_slot, ":arena_scene","$current_town",slot_town_arena),
##    (modify_visitors_at_site,":arena_scene"),
##    (reset_visitors),
##
##    #Assemble participants
##    (assign, ":slot_no", 0),
##    (troop_set_slot, "trp_temp_array_a", ":slot_no", "trp_xerina"),
##    (val_add, ":slot_no", 1),
##    (troop_set_slot, "trp_temp_array_a", ":slot_no", "trp_dranton"),
##    (val_add, ":slot_no", 1),
##    (troop_set_slot, "trp_temp_array_a", ":slot_no", "trp_kradus"),
##    (val_add, ":slot_no", 1),
##    (try_for_range, reg(4), 0, 10),
##      (lt, ":slot_no", 48),
##      (troop_set_slot, "trp_temp_array_a", ":slot_no", "trp_regular_fighter"),
##      (val_add, ":slot_no", 1),
##    (try_end),
##    (try_for_range, reg(4), 0, 10),
##      (lt, ":slot_no", 48),
##      (troop_set_slot, "trp_temp_array_a", ":slot_no", "trp_veteran_fighter"),
##      (val_add, ":slot_no", 1),
##    (try_end),
##    (try_for_range, reg(4), 0, 10),
##      (lt, ":slot_no", 48),
##      (troop_set_slot, "trp_temp_array_a", ":slot_no", "trp_champion_fighter"),
##      (val_add, ":slot_no", 1),
##    (try_end),
##    (try_for_range, reg(4), 0, 5),
##      (lt, ":slot_no", 48),
##      (troop_set_slot, "trp_temp_array_a", ":slot_no", "trp_sword_sister"),
##      (val_add, ":slot_no", 1),
##    (try_end),
##    (try_for_range, reg(4), 0, 10),
##      (lt, ":slot_no", 48),
##      (troop_set_slot, "trp_temp_array_a", ":slot_no", "trp_hired_blade"),
##      (val_add, ":slot_no", 1),
##    (try_end),
##    (try_for_range, reg(4), 0, 10),
##      (lt, ":slot_no", 48),
##      (troop_set_slot, "trp_temp_array_a", ":slot_no", "trp_mercenary"),
##      (val_add, ":slot_no", 1),
##    (try_end),
##    (assign, "$pin_troop", "trp_temp_array_a"),
##    (call_script, "script_shuffle_troop_slots", 0, 48),
##
##    (try_for_range, reg(12), 0, 48),
##      (troop_set_slot, "trp_temp_array_b", reg(12),reg(12)), #Initialize temp_array_b such that temp_array_b[i] = i
##    (try_end),
##
##    (store_random_in_range, "$arena_player_team", 0, "$_num_teams"),
##    (try_for_range, ":i_team", 0, "$_num_teams"), # repeat for num_teams; reg(55) = cur_team
##      (assign, ":team_slots_start", ":i_team"),
##      (val_mul, ":team_slots_start", 8),
##      (assign, ":team_slots_end", ":team_slots_start"),
##      (val_add, ":team_slots_end", 8),
##      (assign, "$pin_troop", "trp_temp_array_b"),
##      (call_script, "script_shuffle_troop_slots", ":team_slots_start", ":team_slots_end"),
##      (assign, ":cur_slot", ":team_slots_start"),
##      (try_for_range, reg(6), 0, "$_team_size"), # repeat for team_size;
##        (troop_get_slot, ":cur_slot_troop", "trp_temp_array_a", ":cur_slot"),
##        (try_begin), #place player
##          (eq,"$arena_join_or_watch",0),
##          (eq, ":i_team", "$arena_player_team"),
##          (eq, reg(6), 0),
##          (assign, ":cur_slot_troop", "trp_player"),
##        (try_end),
##        (troop_get_slot, ":cur_entry_no", "trp_temp_array_b", ":cur_slot"),
##        (set_visitor,":cur_entry_no",":cur_slot_troop"),
##        (val_add, ":cur_slot", 1),
##      (try_end),
##    (try_end),
##
##    (try_begin),
##      (eq, "$arena_join_or_watch", 1),
##      (set_visitor, 33, "trp_player"),#entry point 51
##    (try_end),
##    (assign, "$arena_fight_won", 0),
##    (assign, "$arena_winner_team", -1),
##    (assign, "$waiting_for_arena_fight_result", 1),
##    (assign, "$g_mt_mode", abm_fight),
##    (party_get_slot, reg(6),"$current_town",slot_town_arena_melee_cur_tier),
##    (val_add,reg(6),1),
##    (val_mod,reg(6),3),
##    (party_set_slot, "$current_town",slot_town_arena_melee_cur_tier, reg(6)),
###    (set_jump_mission,"mt_arena_melee_fight"),
##    (party_get_slot, ":arena_mission_template", "$current_town", slot_town_arena_template),
##    (set_jump_mission, ":arena_mission_template"),
##    (party_get_slot, reg(7), "$current_town", slot_town_arena),
##    (jump_to_scene, reg(7)),
##    ]],



######################################################################################
  [trp_galeas,"start", [], "Hello {boy/girl}. If you have any prisoners, I will be happy to buy them from you.", "galeas_talk",[]],

  [trp_galeas|plyr,"galeas_talk",
   [[store_num_regular_prisoners,reg(0)],[ge,reg(0),1]],
   "Then you'd better bring your purse. I have got prisoners to sell.", "galeas_sell_prisoners",[]],
  [trp_galeas|plyr,"galeas_talk",[], "Not this time. Good-bye.", "close_window",[]],
  [trp_galeas,"galeas_sell_prisoners", [],
  "Let me see what you have...", "galeas_sell_prisoners_2",
   [[change_screen_trade_prisoners]]],
  [trp_galeas, "galeas_sell_prisoners_2", [], "You take more prisoners, bring them to me. I will pay well.", "close_window",[]],

##  [party_tpl|pt_refugees,"start", [], "We have been driven out of our homes because of this war.", "close_window",[(assign, "$g_leave_encounter",1)]],
##  [party_tpl|pt_farmers,"start", [], "We are just simple farmers.", "close_window",[(assign, "$g_leave_encounter",1)]],


# Random Quest related conversations
#  [trp_nobleman, "start", [],
#   "Who are you? What do you want? Be warned, we are fully armed and more than capable to defend ourselves. Go to your way now or you will regret it.", "nobleman_talk_1",
#   [(play_sound,"snd_encounter_nobleman")]],
#  [trp_nobleman|plyr, "nobleman_talk_1", [],
#   "I demand that you surrender to me.", "nobleman_talk_2",[]],
#  [trp_nobleman|plyr, "nobleman_talk_1", [],
#   "I am sorry sir. You may go.", "close_window",[(assign, "$g_leave_encounter",1)]],
#  [trp_nobleman, "nobleman_talk_2", [],
#   "Surrender to a puny peasant like you? Hah. Not likely.", "close_window",[[encounter_attack]]],
#
#  [trp_nobleman,"enemy_defeated", [], "Parley! I am of noble birth, and I ask for my right to surrender.", "nobleman_defeated_1",[]],
#  [trp_nobleman|plyr,"nobleman_defeated_1", [], "And I will grant you that. If you can be ransomed of course...", "nobleman_defeated_2",[]],
#  [trp_nobleman,"nobleman_defeated_2", [], "Oh, you need not worry about that. My family would pay a large ransom for me.", "nobleman_defeated_3",[]],
#  [trp_nobleman|plyr,"nobleman_defeated_3", [[str_store_troop_name,1,"$nobleman_quest_giver"]], "Hmm. {s1} will be happy about this... Then you are my prisoner.", "close_window",
#   [[assign,"$nobleman_quest_succeeded",1],[assign,"$nobleman_quest_nobleman_active",0]]],

# Prisoner Trains
##  [anyone,"start", [(eq,"$g_encountered_party_type",spt_prisoner_train)],
##   "What do you want?", "prisoner_train_talk",[]],
##
##  [anyone|plyr,"prisoner_train_talk", [],
##   "Set those prisoners free now!", "prisoner_train_talk_ultimatum",[]],
##  [anyone,"prisoner_train_talk_ultimatum", [],
##   "Or what? Are you going to attack us?", "prisoner_train_talk_ultimatum_2",[]],
##  [anyone|plyr,"prisoner_train_talk_ultimatum_2", [],
##   "Yes I will. Consider yourself warned!", "prisoner_train_talk_ultimatum_2a",[]],
##  [anyone,"prisoner_train_talk_ultimatum_2a", [],
##   "We'll see that.", "close_window",[
##    (call_script, "script_make_kingdom_hostile_to_player", "$g_encountered_party_faction", -3),
##    ]],
##
##  [anyone|plyr,"prisoner_train_talk_ultimatum_2", [],
##   "Attack you? Hell no! I just took pity on those poor souls.", "prisoner_train_talk_ultimatum_2b",[]],
##  [anyone,"prisoner_train_talk_ultimatum_2b", [],
##   "Find something else to take pity on.", "close_window",[(assign, "$g_leave_encounter",1)]],
##  [anyone|plyr,"prisoner_train_talk", [],
##   "Better watch those prisoners well. They may try to run away.", "prisoner_train_smalltalk",[]],
##  [anyone,"prisoner_train_smalltalk", [],
##   "Don't worry. They aren't going anywhere.", "close_window",[(assign, "$g_leave_encounter",1)]],



##  [anyone,"start", [(eq, "$g_encountered_party_type", spt_forager), (is_between, "$g_encountered_party_relation", -9, 1)],
##   "Hold it right there. Who are you?", "soldiers_interrogation",[(play_sound,"snd_encounter_vaegirs_neutral")]],
##  [anyone,"start", [(eq, "$g_encountered_party_type", spt_forager), (le, "$g_encountered_party_relation", -10)],
##   "You will not survive this!", "close_window",
##   [(store_relation, reg(5),"$g_encountered_party_faction"), (val_sub,reg(5),1), (set_relation,"$g_encountered_party_faction",0,reg(5)),(encounter_attack,0)]],
##  [anyone,"start", [(eq, "$g_encountered_party_type", spt_forager),(ge, "$g_encountered_party_relation", 1)],
##   "Our lands have been invaded. But we will drive them back.", "close_window",[(assign, "$g_leave_encounter",1),(play_sound,"snd_encounter_vaegirs_ally"),]],
##
##  [anyone,"start", [(eq, "$g_encountered_party_type", spt_scout),(is_between, "$g_encountered_party_relation", -9, 1)],
##   "Hold it right there. Who are you?", "soldiers_interrogation",[]],
##  [anyone,"start", [(eq, "$g_encountered_party_type", spt_scout),(le, "$g_encountered_party_relation", -10)],
##   "You deserve to die a thousand deaths!", "close_window",
##   [(store_relation, reg(5),"$g_encountered_party_faction"), (val_sub,reg(5),2), (set_relation,"$g_encountered_party_faction",0,reg(5)),(encounter_attack,0)]],
##  [anyone,"start", [(eq, "$g_encountered_party_type", spt_scout),(ge, "$g_encountered_party_relation", 1)],
##   "Venture deep into the enemy territory and find myself a caravan to raid. That's the way I will get rich.", "close_window",[(assign, "$g_leave_encounter",1)]],
##
##  [anyone,"start", [(this_or_next|eq, "$g_encountered_party_type", spt_patrol),(eq, "$g_encountered_party_type", spt_war_party),(is_between, "$g_encountered_party_relation", -9, 1)],
##   "Hold it right there. Who are you?", "soldiers_interrogation",[]],
##  [anyone,"start", [(this_or_next|eq, "$g_encountered_party_type", spt_patrol),(eq, "$g_encountered_party_type", spt_war_party),(le, "$g_encountered_party_relation", -10)],
##   "You will not survive this!", "close_window",
##   [(store_relation, reg(5),"$g_encountered_party_type"), (val_sub,reg(5),3), (set_relation,"$g_encountered_party_type",0,reg(5)),(encounter_attack,0)]],
##  [anyone,"start", [(this_or_next|eq, "$g_encountered_party_type", spt_patrol),(eq, "$g_encountered_party_type", spt_war_party),(ge, "$g_encountered_party_relation", 1)],
##   "Sooner or later, friend. Victory will belong to us.", "close_window",[(assign, "$g_leave_encounter",1)]],

#swadian parties
##  [anyone|plyr,"soldiers_interrogation", [], "I am {playername}.", "soldiers_interrogation_2",[]],
##  [anyone,"soldiers_interrogation_2", [], "What are you doing here?", "soldiers_interrogation_3",[]],
##  [anyone|plyr,"soldiers_interrogation_3", [], "I am carrying some merchandise.", "soldiers_interrogation_4",[]],
##  [anyone|plyr,"soldiers_interrogation_3", [], "I am just admiring the sights.", "soldiers_interrogation_4",[]],
##  [anyone,"soldiers_interrogation_4", [], "Hmm. All right. You may go now. But be careful. There is a war going on. The roads are not safe for travellers.", "close_window",[(assign, "$g_leave_encounter",1)]],


#SB : add in reinforcement encounter
  [party_tpl|pt_center_reinforcements,"start", [(eq,"$talk_context",tc_party_encounter),
                                         (party_get_slot, ":ai_object", "$g_encountered_party", slot_party_ai_object),
                                         (str_store_party_name, s21,":ai_object"),
                                         (str_store_party_name, s20, "$g_encountered_party"),
                                         ],
   "Who goes there? We are {s20}, on our way to {s21}.", "reinforcements_intro",[(agent_play_sound, "$g_talk_agent","snd_encounter_vaegirs_neutral")]],
  [anyone|plyr, "reinforcements_intro", [], "I am {playername}. I'm just passing by.", "close_window",[(assign, "$g_leave_encounter", 1),]],
  [anyone|plyr, "reinforcements_intro", [(eq, "$players_kingdom", "$g_encountered_party_faction")], "What a coincidence. I was also on my way to {s21}. Here, let me give you some troops.", "reinforcements_reinforce",[(change_screen_give_members),]],
  [anyone, "reinforcements_reinforce", [], "Thank you {sir/madam}. We'll be on our way now.", "close_window",[(assign,"$g_leave_encounter", 1),(agent_play_sound, "$g_talk_agent","snd_encounter_vaegirs_ally"),]],
    #(call_script, "script_process_outlaws_for_party", "$g_encountered_party"),
  [anyone|plyr, "reinforcements_intro", [(neq, "$players_kingdom", "$g_encountered_party_faction")], "I am {playername}. And I'm here to stop you from reaching your destination!", "reinforcement_hostile",[]],
  [party_tpl|pt_center_reinforcements,"reinforcement_hostile", [
      # (faction_get_slot, ":faction_leader", "$g_encountered_party_faction",slot_faction_leader),
      (party_get_slot, ":ai_object", "$g_encountered_party", slot_party_ai_object),
      (party_get_slot, ":leader", ":ai_object", slot_town_lord), #this should be set
      (str_store_troop_name, s3, ":leader"),
      (call_script, "script_change_player_relation_with_troop", ":leader", -1), #unnecessary?
      (call_script, "script_dplmc_store_troop_is_female_reg", ":leader", 3),
      
    ],
    #snd_encounter_vaegirs_neutral is the same as hostile
    "What!? We are under the protection of {s3}! Be certain {reg3?she:he} will take vengeance!", "reinforcements_attack",[
    #SB : add animation
    (call_script, "script_encounter_agent_draw_weapon"),
    ]],
  [anyone|plyr, "reinforcements_attack", [], "Fine, let {reg3?her:him}! I shall go after that {reg3?bitch:varlot} after I've dealt with you!", "close_window",[
      (call_script, "script_make_kingdom_hostile_to_player", "$g_encountered_party_faction", -3),
      (encounter_attack)]],
  [anyone|plyr, "reinforcements_attack", [], "Alright, go! But you haven't seen the last of {playername}!", "close_window",[(assign, "$g_leave_encounter", 1),]],



# Bandits
##  [party_tpl|pt_mountain_bandits,"start", [(this_or_next|eq, "$g_encountered_party_template", "pt_mountain_bandits"),(eq, "$g_encountered_party_template", "pt_forest_bandits"),
##                                           (eq,"$talk_context",tc_party_encounter),
##                                           (party_get_slot,":protected_until_hours", "$g_encountered_party",slot_party_ignore_player_until),
##                                           (store_current_hours,":cur_hours"),
##                                           (store_sub, ":protection_remaining",":protected_until_hours",":cur_hours"),
##                                           (ge, ":protection_remaining", 0)], "What do you want?\
## You want to pay us some more money?", "bandit_paid_talk",[]],
##
##  [anyone|plyr,"bandit_paid_talk", [], "Sorry to trouble you. I'll be on my way now.", "bandit_paid_talk_2a",[]],
##  [anyone,"bandit_paid_talk_2a", [], "Yeah. Stop fooling around and go make some money.\
## I want to see that purse full next time I see you.", "close_window",[(assign, "$g_leave_encounter",1)]],
##  [anyone|plyr,"bandit_paid_talk", [], "No. It's your turn to pay me this time.", "bandit_paid_talk_2b",[]],
##  [anyone,"bandit_paid_talk_2b", [], "What nonsense are you talking about? You want trouble? You got it.", "close_window",[
##       (party_set_slot,"$g_encountered_party",slot_party_ignore_player_until,0),
##       (party_ignore_player, "$g_encountered_party", 0),
##    ]],

# Ryan BEGIN
  [party_tpl|pt_mountain_bandits|auto_proceed,"start", [(eq,"$talk_context",tc_party_encounter),(encountered_party_is_attacker)],
   "{!}Warning: This line should never display.", "bandit_introduce",[]],
  [party_tpl|pt_forest_bandits|auto_proceed,"start", [(eq,"$talk_context",tc_party_encounter),(encountered_party_is_attacker)],
   "{!}Warning: This line should never display.", "bandit_introduce",[]],
  [party_tpl|pt_taiga_bandits|auto_proceed,"start", [(eq,"$talk_context",tc_party_encounter),(encountered_party_is_attacker)],
   "{!}Warning: This line should never display.", "bandit_introduce",[]],
  [party_tpl|pt_steppe_bandits|auto_proceed,"start", [(eq,"$talk_context",tc_party_encounter),(encountered_party_is_attacker)],
   "{!}Warning: This line should never display.", "bandit_introduce",[]],
  [party_tpl|pt_desert_bandits|auto_proceed,"start", [(eq,"$talk_context",tc_party_encounter),(encountered_party_is_attacker)],
   "{!}Warning: This line should never display.", "bandit_introduce",[]],

  [party_tpl|pt_sea_raiders,"start", [
    (eq, "$g_encountered_party_faction", "fac_outlaws"), #first stack should always be a bandit
    #sea raiders skull-drinking dialogue
    ],
   "I will drink from your skull!", "battle_reason_stated",[
   (play_sound, "snd_encounter_sea_raiders"),
   ]],
    
  [anyone,"bandit_introduce", [
      # (store_random_in_range, ":rand", 11, 15),
        # (str_store_string, s11, "@I can smell a fat purse a mile away. Methinks yours could do with some lightening, eh?"),
        # (str_store_string, s12, "@Why, it be another traveller, chance met upon the road! I should warn you, country here's a mite dangerous for a good {fellow/woman} like you. But for a small donation my boys and I'll make sure you get rightways to your destination, eh?"),
        # (str_store_string, s13, "@Well well, look at this! You'd best start coughing up some silver, friend, or me and my boys'll have to break you."),
        # (str_store_string, s14, "@There's a toll for passin' through this land, payable to us, so if you don't mind we'll just be collectin' our due from your purse..."),
        # (str_store_string_reg, s5, ":rand"),
      #SB : store strings better
      (store_random_in_range, ":intro", "str_bandit_intro_1", "str_bandit_outro_1"),
      (str_store_string, s5, ":intro"),
    ], "{s5}", "bandit_talk",[
    #SB : reintroduce steppe bandit sounds
    (try_begin),
      (eq, "$g_encountered_party_template", "pt_steppe_bandits"),
      (play_sound,"snd_encounter_steppe_bandits"),
    (else_try),
      (play_sound,"snd_encounter_bandits"),
     (try_end),
    ]],

  [anyone|plyr,"bandit_talk", [], "I'll give you nothing but cold steel, you scum!", "close_window",[(encounter_attack)]],
  [anyone|plyr,"bandit_talk", [], "There's no need to fight. I can pay for free passage.", "bandit_barter",[]],
  [anyone,"bandit_barter",
   [(store_relation, ":bandit_relation", "fac_player_faction", "$g_encountered_party_faction"),
    (ge, ":bandit_relation", -50),
    (store_troop_gold, ":total_value", "trp_player"),
    (troop_get_inventory_capacity, ":inv_size", "trp_player"),
    (try_for_range, ":i_slot", 0, ":inv_size"),
         (troop_get_inventory_slot, ":item_id", "trp_player", ":i_slot"),
         (ge, ":item_id", 0),
         (try_begin),
           (is_between, ":item_id", trade_goods_begin, trade_goods_end),
           (store_item_value, ":item_value", ":item_id"),
           (val_add, ":total_value", ":item_value"),
         (try_end),
    (try_end),
    (store_div, "$bandit_tribute", ":total_value", 10), #10000 gold = excellent_target
    (val_max, "$bandit_tribute", 10),
    (assign, reg5, "$bandit_tribute")
    ], "Silver without blood, that's our favorite kind! Hmm, having a look at you, I reckon you could easily come up with {reg5} denars. Pay it, and we'll let you be on your way.", "bandit_barter_2",[]],
  [anyone|plyr,"bandit_barter_2", [(store_troop_gold,reg2),(ge,reg2,"$bandit_tribute")], #SB: got rid of old format
   "Very well, take it.", "bandit_barter_3a",[
   (troop_remove_gold, "trp_player","$bandit_tribute"),
   (add_gold_to_party, "$bandit_tribute", "$g_encountered_party"), #SB : pay tribute
   ]],
  [anyone|plyr,"bandit_barter_2", [],
   "I don't have that much money with me...", "bandit_barter_3b",[]], #SB : elipsis
  [anyone,"bandit_barter_3b", [],
   "That's too bad. I guess we'll just have to sell you into slavery. Take {him/her}, lads!", "close_window",[(encounter_attack)]],

  [anyone,"bandit_barter", [],
   "Hey, I've heard of you! You slaughter us freebooters like dogs, and now you expect us to let you go for a few stinking coins?\
 Forget it. You gave us no quarter, and you'll get none from us.", "close_window",[
  (encounter_attack),
 ]],



  [anyone,"bandit_barter_3a", [], "Heh, that wasn't so hard, was it? All right, we'll let you go now. Be off.", "close_window",[
    (store_current_hours,":protected_until"),
    (val_add, ":protected_until", 72),
    (party_set_slot,"$g_encountered_party",slot_party_ignore_player_until,":protected_until"),
    (party_ignore_player, "$g_encountered_party", 72),
    #SB : objectionable action
    (call_script, "script_objectionable_action", tmt_aristocratic, "str_pay_bandits"),
    (assign, "$g_leave_encounter",1)
    ]],

  #SB : add all the other bandit templates
  [anyone,"start", [
    (eq, "$g_talk_troop_faction", "fac_outlaws"), #first stack should always be a bandit
    #sea raiders have their own skull-drinking dialogue
    (is_between, "$g_encountered_party_template", bandit_party_templates_begin, bandit_party_templates_end),],
   "Eh? What is it?", "bandit_meet",[]],

  [anyone|plyr,"bandit_meet", [], "Your luck has run out, wretch. Prepare to die!", "bandit_attack",
   [(store_relation, ":bandit_relation", "fac_player_faction", "$g_encountered_party_faction"),
    (val_sub, ":bandit_relation", 3),
    (val_max, ":bandit_relation", -100),
    (set_relation, "fac_player_faction", "$g_encountered_party_faction", ":bandit_relation"),
    (party_ignore_player, "$g_encountered_party", 0),
    (party_set_slot,"$g_encountered_party",slot_party_ignore_player_until, 0),
    (call_script, "script_encounter_agent_draw_weapon"), #SB : bandit draw weapon
    ]],

  [anyone,"bandit_attack", [
      # (store_random_in_range, ":rand", 11, 15),
        # (str_store_string, s11, "@Another fool come to throw {him/her}self on my weapon, eh? Fine, let's fight!"),
        # (str_store_string, s12, "@We're not afraid of you, {sirrah/wench}. Time to bust some heads!"),
        # (str_store_string, s13, "@That was a mistake. Now I'm going to have to make your death long and painful."),
        # (str_store_string, s14, "@Brave words. Let's see you back them up with deeds, cur!"),
        # (str_store_string_reg, s5, ":rand"),
        (store_random_in_range, ":string", "str_bandit_outro_1", "str_bandit_outro_5"),
        (str_store_string, s5, ":string"),
      ], "{s5}", "close_window",[
      #SB : add sound
      (try_begin),
        # (eq, "$g_talk_troop", "trp_steppe_bandits")
        (eq, "$g_encountered_party_template", "pt_steppe_bandits"),
        (play_sound, "snd_encounter_steppe_bandits"),
      (else_try),
        (eq, "$g_encountered_party_template", "pt_sea_raiders"),
        (play_sound, "snd_encounter_sea_raiders"),
      (else_try),
        (play_sound, "snd_encounter_bandits"),
      (try_end),
      
      ]],

  [anyone|plyr,"bandit_meet", [], "Never mind, I have no business with you.", "close_window",[(assign, "$g_leave_encounter", 1)]],
# Ryan END



  [party_tpl|pt_rescued_prisoners,"start", [(eq,"$talk_context",tc_party_encounter)], "Do you want us to follow you?", "disbanded_troop_ask",[]],
  [anyone|plyr,"disbanded_troop_ask", [], "Yes. Let us ride together.", "disbanded_troop_join",[]],
  [anyone|plyr,"disbanded_troop_ask", [], "No. Not at this time.", "close_window",[(assign, "$g_leave_encounter",1)]],
  [anyone,"disbanded_troop_join", [[neg|party_can_join]], "Unfortunately. You do not have room in your party for us.", "close_window",[(assign, "$g_leave_encounter",1)]],
  [anyone,"disbanded_troop_join", [], "We are at your command.", "close_window",[[party_join],(assign, "$g_leave_encounter",1)]],

  [party_tpl|pt_enemy,"start", [(eq,"$talk_context",tc_party_encounter)], "You will not capture me again. Not this time.", "enemy_talk_1",[]],
  [party_tpl|pt_enemy|plyr,"enemy_talk_1", [], "You don't have a chance against me. Give up.", "enemy_talk_2",[]],
  [party_tpl|pt_enemy,"enemy_talk_2", [], "I will give up when you are dead!", "close_window",[[encounter_attack]]],


######################################
# ROUTED WARRIORS
######################################

  [party_tpl|pt_routed_warriors, "start", [(eq,"$talk_context",tc_party_encounter)],
   "I beg you, please leave us alone.", "party_encounter_routed_agents_are_caught",
   []],

  [party_tpl|pt_routed_warriors|plyr, "party_encounter_routed_agents_are_caught", [],
   "Do you think you can run away from me? You will be my prisoner or die!", "party_encounter_routed_agents_are_caught2",
   []],

  # #SB : force recruit instead of always prisoner
  # [party_tpl|pt_routed_warriors|plyr, "party_encounter_routed_agents_are_caught", [(eq, "$g_talk_troop_faction", "$players_kingdom")],#process differently
   # "What is the meaning of this? Did you think you could join the army and desert at the first sight of blood?!", "party_encounter_routed_agents_are_deserter",
   # []],
  [party_tpl|pt_routed_warriors|plyr,"party_encounter_routed_agents_are_caught", [],
   "Ok. We'll leave you in peace for this time, do not face us again.", "close_window", [(assign, "$g_leave_encounter",1)]],

  [party_tpl|pt_routed_warriors, "party_encounter_routed_agents_are_caught2",
   [
     #(store_party_size_wo_prisoners, ":routed_party_size", "$g_encountered_party"),
     #(store_party_size_wo_prisoners, ":main_party_size", "p_main_party"),

     #SB : redundant calculation
    # # calculate power of routed party
    # (assign, ":routed_party_power", 0),
    # (party_get_num_companion_stacks, ":num_stacks", "$g_encountered_party"),
    # (try_for_range, ":i_stack", 0, ":num_stacks"),
      # (party_stack_get_troop_id, ":stack_troop", "$g_encountered_party", ":i_stack"),
      # (store_character_level, ":troop_level", ":stack_troop"),
      # (try_begin),
        # (troop_is_mounted, ":stack_troop"),
        # (val_add, ":troop_level", 5),
      # (try_end),
      # (party_stack_get_size, ":stack_size", "$g_encountered_party", ":i_stack"),
      # (val_mul, ":troop_level", ":stack_size"),
      # (val_add, ":routed_party_power", ":troop_level"),
    # (try_end),

    # # calculate power of our party
    # (assign, ":main_party_power", 0),
    # (party_get_num_companion_stacks, ":num_stacks", "p_main_party"),
    # (try_for_range, ":i_stack", 0, ":num_stacks"),
      # (party_stack_get_troop_id, ":stack_troop", "p_main_party", ":i_stack"),
      # (store_character_level, ":troop_level", ":stack_troop"),
      # (try_begin),
        # (troop_is_mounted, ":stack_troop"),
        # (val_add, ":troop_level", 5),
      # (try_end),
      # (party_stack_get_size, ":stack_size", "p_main_party", ":i_stack"),
      # (val_mul, ":troop_level", ":stack_size"),
      # (val_add, ":main_party_power", ":troop_level"),
    # (try_end),

    # (store_div, ":main_party_power_divided_by_5", ":main_party_power", 5),

    #find num attached parties to routed warriors
    (party_get_num_attached_parties, ":num_attached_parties", "$g_encountered_party"),
    (this_or_next|gt, ":num_attached_parties", 0), #always fight
    (lt, "$g_strength_ratio", 500),
    
    (store_party_size_wo_prisoners, reg20, "$g_encountered_party"),
    (val_sub, reg20, 1), #determines whether it's a lone troop
    
    ],
   "Have you no mercy? {reg20?We will fight you to the last man:I will fight with my last breath}!", "close_window",
   []],

  [party_tpl|pt_routed_warriors, "party_encounter_routed_agents_are_caught2",
    [
      #(store_party_size_wo_prisoners, ":routed_party_size", "$g_encountered_party"),
      #(store_party_size_wo_prisoners, ":main_party_size", "p_main_party"),

      # # calculate power of routed party
      # (assign, ":routed_party_population", 0),
      # (assign, ":routed_party_power", 0),
      # (party_get_num_companion_stacks, ":num_stacks", "$g_encountered_party"),
      # (try_for_range, ":i_stack", 0, ":num_stacks"),
        # (party_stack_get_troop_id, ":stack_troop", "$g_encountered_party", ":i_stack"),
        # (store_character_level, ":troop_level", ":stack_troop"),
        # (try_begin),
          # (troop_is_mounted, ":stack_troop"),
          # (val_add, ":troop_level", 5),
        # (try_end),
        # (party_stack_get_size, ":stack_size", "$g_encountered_party", ":i_stack"),
        # (val_mul, ":troop_level", ":stack_size"),
        # (val_add, ":routed_party_power", ":troop_level"),
        # (val_add, ":routed_party_population", ":stack_size"),
      # (try_end),

      # # calculate power of our party
      # (assign, ":main_party_power", 0),
      # (party_get_num_companion_stacks, ":num_stacks", "p_main_party"),
      # (try_for_range, ":i_stack", 0, ":num_stacks"),
        # (party_stack_get_troop_id, ":stack_troop", "p_main_party", ":i_stack"),
        # (store_character_level, ":troop_level", ":stack_troop"),
        # (try_begin),
          # (troop_is_mounted, ":stack_troop"),
          # (val_add, ":troop_level", 5),
        # (try_end),
        # (party_stack_get_size, ":stack_size", "p_main_party", ":i_stack"),
        # (val_mul, ":troop_level", ":stack_size"),
        # (val_add, ":main_party_power", ":troop_level"),
      # (try_end),

      # (store_div, ":main_party_power_divided_by_5", ":main_party_power", 5),
      # (lt, ":routed_party_power", ":main_party_power_divided_by_5"),

      (ge, "$g_strength_ratio", 500),
      (store_party_size_wo_prisoners, ":routed_party_size", "$g_encountered_party"),
      # (assign, reg3, ":routed_party_size"),

      (try_begin),
        (gt, ":routed_party_size", 1),
        (str_store_string, s1, "str_we_resign"),
      (else_try),
        (str_store_string, s1, "str_i_resign"),
      (try_end),
    ],
    "{s1}", "close_window",
    [(assign,"$g_enemy_surrenders", 1),
     (call_script, "script_party_wound_all_members", "$g_encountered_party"),
     (call_script, "script_party_copy", "p_total_enemy_casualties", "$g_encountered_party"),
     ]],

  #[party_tpl|pt_routed_warriors,"close_window_anythink_else", [],
  # "Anythink else.", "close_window", [(assign, "$g_leave_encounter",1)]],


# Ryan BEGIN
  [anyone,"sell_prisoner_outlaws", [[store_troop_kind_count,0,"trp_looter"],[ge,reg(0),1],[assign,reg(1),reg(0)],[val_mul,reg(1),10],[val_mul,reg(2),reg(0)],[val_mul,reg(2),10]],
   "Hmmm. 10 denars for each looter makes {reg1} denars for all {reg0} of them.", "sell_prisoner_outlaws",
   [[call_script, "script_troop_add_gold", "trp_player", reg(1)],[add_xp_to_troop,reg(2)],[remove_member_from_party,"trp_looter"]]],
  [anyone,"sell_prisoner_outlaws", [[store_troop_kind_count,0,"trp_bandit"],[ge,reg(0),1],[assign,reg(1),reg(0)],[val_mul,reg(1),20],[assign,reg(2),reg(0)],[val_mul,reg(2),20]],
   "Let me see. You've brought {reg0} bandits, so 20 denars for each comes up to {reg1} denars.", "sell_prisoner_outlaws",
   [[call_script, "script_troop_add_gold", "trp_player", reg(1)],[add_xp_to_troop,reg(2)],[remove_member_from_party,"trp_bandit"]]],
  [anyone,"sell_prisoner_outlaws", [[store_troop_kind_count,0,"trp_brigand"],[ge,reg(0),1],[assign,reg(1),reg(0)],[val_mul,reg(1),30],[assign,reg(2),reg(0)],[val_mul,reg(2),30]],
   "Well well, you've captured {reg0} brigands. Each one is worth 30 denars, so I'll give you {reg1} for them in total.", "sell_prisoner_outlaws",
   [[call_script, "script_troop_add_gold", "trp_player", reg(1)],[add_xp_to_troop,reg(2)],[remove_member_from_party,"trp_brigand"]]],
  [anyone,"sell_prisoner_outlaws", [], "I suppose that'll be all, then.", "close_window",[]],
# Ryan END

  #note that conversation globals probably aren't set here
  [anyone|plyr,"prisoner_chat", [
    (store_conversation_troop, "$g_talk_troop"),
    (check_quest_active, "qst_capture_prisoners"),
    (quest_slot_eq, "qst_capture_prisoners", slot_quest_target_troop, "$g_talk_troop"),
    (quest_get_slot, ":quest_giver_troop", "qst_capture_prisoners", slot_quest_giver_troop),
    (str_store_troop_name, s1, ":quest_giver_troop"),
  ], "{s1} wants you alive and well, so don't be trying something we'll both regret.", "prisoner_chat_2",[]],
  
  [anyone|plyr,"prisoner_chat", [], "Do not try running away or trying something stupid. I will be watching you.", "prisoner_chat_2",[]],

  [trp_fugitive,"prisoner_chat_2", [
    (check_quest_active, "qst_hunt_down_fugitive"),
    (quest_slot_eq, "qst_hunt_down_fugitive", slot_quest_current_state, 2),
  ], "Wait {playername}, I have something to tell you.", "fugitive_chat",[]],
  #SB : fugitive chat
  [anyone,"fugitive_chat", [
    (quest_get_slot, ":quest_giver_troop", "qst_hunt_down_fugitive", slot_quest_giver_troop),
    (str_store_troop_name, s4, ":quest_giver_troop"),
    (store_faction_of_troop, ":faction_no", ":quest_giver_troop"),
    (faction_get_slot, ":leader", ":faction_no", slot_faction_leader),
    (try_begin),
      (eq, ":leader", "trp_player"),
      (str_store_string, s5, "str_dplmc_your_highness"),
    (else_try),
      (str_store_troop_name, s5, ":leader"),
    (try_end),
  ], "Though it may seem to you that I have foresworn my service to {s5}, I swear that I was made the scapegoat for the crimes {s4} accused me of.", "fugitive_chat_2",[]],
  
  [anyone|plyr,"fugitive_chat_2", [], "I think not. I'll take the word of {s4} over such a pathetic excuse any day.", "close_window",[]],
  #TODO : assign random motive string instead of binary questioning
  # for example, stolen wealth - offer to share with player
  # excuse for lord to punish a rival's villagers
  # chased away as a rival to lady's affection
  [anyone|plyr,"fugitive_chat_2", [], "Now that I think about it, the story doesn't add up... You may go, before I change my mind.", "close_window",[
    (party_remove_prisoners, "p_main_party", "trp_fugitive", 1),
  ]],
  [anyone,"prisoner_chat_2", [], "No, I swear I won't.", "close_window",[]],


  [anyone,"start", [(party_slot_eq, "$current_town", slot_town_lord, "trp_player"),
                    (this_or_next|is_between,"$g_talk_troop",weapon_merchants_begin,weapon_merchants_end),
                    (this_or_next|is_between,"$g_talk_troop",armor_merchants_begin, armor_merchants_end),
                    (             is_between,"$g_talk_troop",horse_merchants_begin, horse_merchants_end),
					##diplomacy start+
					#Replace "your lordship" with "your highness" if appropriate.
					(call_script,"script_dplmc_print_subordinate_says_sir_madame_to_s0"),
					(try_begin),
						(le, reg0, 2),
						(str_store_string, s0, "str_dplmc_my_lordlady"),
						(call_script, "script_dplmc_store_troop_is_female",  "trp_player"),
						(neq, reg0, 1),
						(str_store_string, s0, "@your lordship"),
					(try_end),
                    ],
   "Greetings, {s0}. How can I serve you today?", "town_merchant_talk",[]],#change {your lordship/my lady} to {s0}
   ##diplomacy end+

  [anyone,"start", [(this_or_next|is_between,"$g_talk_troop",weapon_merchants_begin,weapon_merchants_end),
                    (this_or_next|is_between,"$g_talk_troop",armor_merchants_begin, armor_merchants_end),
                    (             is_between,"$g_talk_troop",horse_merchants_begin, horse_merchants_end)], "Good day. What can I do for you?", "town_merchant_talk",[]],

  [anyone|plyr,"town_merchant_talk", [(is_between,"$g_talk_troop",weapon_merchants_begin,weapon_merchants_end)],
   "I want to buy a new weapon. Show me your wares.", "trade_requested_weapons",[]],
  [anyone|plyr,"town_merchant_talk", [(is_between,"$g_talk_troop",armor_merchants_begin,armor_merchants_end)],
   "I am looking for some equipment. Show me what you have.", "trade_requested_armor",[]],
  [anyone|plyr,"town_merchant_talk", [(is_between,"$g_talk_troop",horse_merchants_begin,horse_merchants_end)],
   "I am thinking of buying a horse.", "trade_requested_horse",[]],
##diplomacy start+ Auto-sell hooks
  [anyone|plyr,"town_merchant_talk", [
   (is_between,"$g_talk_troop",weapon_merchants_begin,weapon_merchants_end),],
   "I'd like to sell some weapons.", "dplmc_trade_autosell_1",[
	(assign, "$temp", weapons_begin),
	(assign, "$temp_2", ranged_weapons_end),#this range includes shields
	]],
  [anyone|plyr,"town_merchant_talk", [
   (is_between,"$g_talk_troop",armor_merchants_begin,armor_merchants_end),],
   "I'd like to sell some armor.", "dplmc_trade_autosell_1",[
	(assign, "$temp", armors_begin),
	(assign, "$temp_2", armors_end),
	]],
  [anyone|plyr,"town_merchant_talk", [
   (is_between, "$g_talk_troop", horse_merchants_begin, horse_merchants_end),],
   "I'd like to sell some horses to you.", "dplmc_trade_autosell_1",[
	(assign, "$temp", horses_begin),
	(assign, "$temp_2", horses_end),
	]],

  [anyone, "dplmc_trade_autosell_1", [
    (call_script, "script_dplmc_initialize_autoloot", 0),#0 means only run if uninitialized
    (call_script, "script_dplmc_auto_sell", "trp_player", "$g_talk_troop", "$g_dplmc_auto_sell_price_limit", "$temp", "$temp_2", 0),
	 #reg0 = denars, reg1 = number of items
	 (gt, reg0, 0),
	 (gt, reg1, 0),
	 (store_sub, reg2, reg0, 1),
     (store_sub, reg3, reg1, 1),
	 ], "Let's see, aside from your personal equipment, I see {reg1} {reg3?things:thing} that I would buy for {reg0} {reg2?denars:denar}.  Do we have a deal?", "dplmc_trade_autosell_2a",
	 []],

   [anyone|plyr, "dplmc_trade_autosell_2a", [
	], "Sure.  Pleasure doing business with you.", "merchant_trade",
	[
      (call_script, "script_dplmc_auto_sell", "trp_player", "$g_talk_troop", "$g_dplmc_auto_sell_price_limit", "$temp", "$temp_2", 2),
	]],
	[anyone|plyr, "dplmc_trade_autosell_2a", [], "Not exactly.  Let me show you what I meant.", "merchant_trade",
      [(change_screen_trade),]],
	[anyone|plyr, "dplmc_trade_autosell_2a", [], "Nevermind.", "merchant_trade", []],

   #SB : corrected |plyr flag
   [anyone, "dplmc_trade_autosell_1", [],
   "Aside from what I presume is your personal equipment, I don't see anything that I would be interested in buying.", "dplmc_trade_autosell_2b",
	[]],
	[anyone|plyr, "dplmc_trade_autosell_2b", [], "Let me show you what I meant.", "merchant_trade",
      [(change_screen_trade),]],
	[anyone|plyr, "dplmc_trade_autosell_2b", [], "Nevermind then.", "merchant_trade", []],
##diplomacy end+

##diplomacy start+ change to use script_dplmc_print_subordinate_says_sir_madame_to_s0
  [anyone,"trade_requested_weapons", [(call_script,"script_dplmc_print_subordinate_says_sir_madame_to_s0"),], "Ah, yes {s0}. These arms are the best you'll find anywhere.", "merchant_trade",[[change_screen_trade]]],
  [anyone,"trade_requested_armor", [(call_script,"script_dplmc_print_subordinate_says_sir_madame_to_s0"),], "Of course, {s0}. You won't find better quality armour than these in all Calradia.", "merchant_trade",[[change_screen_trade]]],
  [anyone,"trade_requested_horse", [(call_script,"script_dplmc_print_subordinate_says_sir_madame_to_s0"),], "You have a fine eye for horses, {s0}. You won't find better beasts than these anywhere else.", "merchant_trade",[[change_screen_trade]]],
##diplomacy end+

  [anyone,"merchant_trade", [], "Anything else?", "town_merchant_talk",[]],
  [anyone|plyr,"town_merchant_talk", [], "Tell me. What are people talking about these days?", "merchant_gossip",[]],
  [anyone,"merchant_gossip", [], "Well, nothing new lately. Prices, weather, the war, the same old things.", "town_merchant_talk",[]],
  [anyone|plyr,"town_merchant_talk", [], "Good-bye.", "close_window",[]],




##  [anyone,"start", [(eq, "$talk_context", 0),
##                    (is_between,"$g_talk_troop",walkers_begin, walkers_end),
##                    (gt, "$sneaked_into_town", disguise_none),
##                     ], "Stay away beggar!", "close_window",[]],

  [anyone,"start", [(eq, "$talk_context", 0),
                    (is_between,"$g_talk_troop",walkers_begin, walkers_end),
                    (party_slot_eq, "$current_town", slot_town_lord, "trp_player"),
                     ], "My {lord/lady}?", "town_dweller_talk",[(assign, "$welfare_inquired",0),(assign, "$rumors_inquired",0),(assign, "$info_inquired",0)]],

  [anyone,"start", [(eq, "$talk_context", 0),
                    (is_between,"$g_talk_troop",walkers_begin, walkers_end),
					##diplomacy start+ replace {sir/madame} with {my lord/my lady} or {your highness} as appropriate
					(call_script,"script_dplmc_print_subordinate_says_sir_madame_to_s0"),
                     ], "Good day, {s0}.", "town_dweller_talk",[(assign, "$welfare_inquired", 0),(assign, "$rumors_inquired",0),(assign, "$info_inquired",0)]],
                    ##diplomacy end+
  [anyone|plyr,"town_dweller_talk", [(check_quest_active, "qst_hunt_down_fugitive"),
                                     (neg|check_quest_concluded, "qst_hunt_down_fugitive"),
                                      (quest_slot_eq, "qst_hunt_down_fugitive", slot_quest_target_center, "$current_town"),
                                      (quest_get_slot, ":quest_target_dna", "qst_hunt_down_fugitive", slot_quest_target_dna),
                                      (call_script, "script_get_name_from_dna_to_s50", ":quest_target_dna"),
                                      (str_store_string, s4, s50),
                                      ],
   "I am looking for a man by the name of {s4}. I was told he may be hiding here.", "town_dweller_ask_fugitive",[]],
  ##diplomacy start+ replace {sir/madame} with {my lord/my lady} or {your highness} as appropriate
  [anyone ,"town_dweller_ask_fugitive", #[],
   [(call_script,"script_dplmc_print_subordinate_says_sir_madame_to_s0"),],
   "Strangers come and go to our village, {s0}. If he is hiding here, you will surely find him if you look around.", "close_window",[]],
  ##diplomacy end+

# Ryan BEGIN
  [anyone|plyr,"town_dweller_talk",
   [
     (eq, 1, 0),
     (check_quest_active, "qst_meet_spy_in_enemy_town"),
     (neg|check_quest_succeeded, "qst_meet_spy_in_enemy_town"),
     (quest_slot_eq, "qst_meet_spy_in_enemy_town", slot_quest_target_center, "$current_town"),
     (str_store_item_name,s5,"$spy_item_worn"),
     ],
   "Pardon me, but is that a {s5} you're wearing?", "town_dweller_quest_meet_spy_in_enemy_town_ask_item",
   [
     ]],
  [anyone, "town_dweller_quest_meet_spy_in_enemy_town_ask_item", [
     (str_store_item_name,s5,"$spy_item_worn"),

     (try_begin),
     (troop_has_item_equipped,"$g_talk_troop","$spy_item_worn"),
     (str_store_string,s6,"@A {s5}? Well... Yes, I suppose it is. What a strange thing to ask."),
     (else_try),
     (str_store_string,s6,"@Eh? No, it most certainly is not a {s5}. I'd start questioning my eyesight if I were you."),
     (try_end),
  ],
   "{s6}", "town_dweller_talk",[]],

  [anyone|plyr|repeat_for_100,"town_dweller_talk",
   [
     (store_repeat_object,":object"),
     (lt,":object",4), # repeat only 4 times

     (check_quest_active, "qst_meet_spy_in_enemy_town"),
     (neg|check_quest_succeeded, "qst_meet_spy_in_enemy_town"),
     (quest_slot_eq, "qst_meet_spy_in_enemy_town", slot_quest_target_center, "$current_town"),

     (store_add,":string",":object","str_secret_sign_1"),
     (str_store_string, s4, ":string"),
     ],
   "{s4}", "town_dweller_quest_meet_spy_in_enemy_town",
   [
     (store_repeat_object,":object"),
     (assign, "$temp", ":object"),
     ]],

  [anyone ,"town_dweller_quest_meet_spy_in_enemy_town",
   [
     (call_script, "script_agent_get_town_walker_details", "$g_talk_agent"),
     (assign, ":walker_type", reg0),
     (eq, ":walker_type", walkert_spy),
     (quest_get_slot, ":secret_sign", "qst_meet_spy_in_enemy_town", slot_quest_target_amount),
     (val_sub, ":secret_sign", secret_signs_begin),
     (eq, ":secret_sign", "$temp"),
     (store_add, ":countersign", ":secret_sign", countersigns_begin),
     (str_store_string, s4, ":countersign"),
     ],
   "{s4}", "town_dweller_quest_meet_spy_in_enemy_town_know",[]],

  [anyone, "town_dweller_quest_meet_spy_in_enemy_town", [],
   "Eh? What kind of gibberish is that?", "town_dweller_quest_meet_spy_in_enemy_town_dont_know",[]],

  [anyone|plyr, "town_dweller_quest_meet_spy_in_enemy_town_dont_know", [],
   "Never mind.", "close_window",[]],

  [anyone|plyr, "town_dweller_quest_meet_spy_in_enemy_town_know", [
     (quest_get_slot, ":quest_giver", "qst_meet_spy_in_enemy_town", slot_quest_giver_troop),
     (str_store_troop_name, s4, ":quest_giver"),
  ],
   "{s4} sent me to collect your reports. Do you have them with you?", "town_dweller_quest_meet_spy_in_enemy_town_chat",[]],

  [anyone, "town_dweller_quest_meet_spy_in_enemy_town_chat", [
     (quest_get_slot, ":quest_giver", "qst_meet_spy_in_enemy_town", slot_quest_giver_troop),
     (str_store_troop_name, s4, ":quest_giver"),
  ],
   "I've been expecting you. Here they are, make sure they reach {s4} intact and without delay.", "town_dweller_quest_meet_spy_in_enemy_town_chat_2",[
     (call_script, "script_succeed_quest", "qst_meet_spy_in_enemy_town"),
     (call_script, "script_center_remove_walker_type_from_walkers", "$current_town", walkert_spy),
   ]],

  [anyone|plyr, "town_dweller_quest_meet_spy_in_enemy_town_chat_2", [],
   "Farewell.", "close_window",
   [
     ]],
# Ryan END

  [anyone|plyr,"town_dweller_talk", [(party_slot_eq, "$current_town", slot_party_type, spt_village),
                                     (eq, "$info_inquired", 0)], "What can you tell me about this village?", "town_dweller_ask_info",[(assign, "$info_inquired", 1)]],
  [anyone|plyr,"town_dweller_talk", [(party_slot_eq, "$current_town", slot_party_type, spt_town),
                                     (eq, "$info_inquired", 0)], "What can you tell me about this town?", "town_dweller_ask_info",[(assign, "$info_inquired", 1)]],


  [anyone,"town_dweller_ask_info", [(str_store_party_name, s5, "$current_town"),
                                    (assign, reg4, 0),
                                    (try_begin),
                                      (party_slot_eq, "$current_town", slot_party_type, spt_town),
                                      (assign, reg4, 1),
                                    (try_end),
									#diplomacy start+
									#replace {sir/madame} with {my lord/my lady} or {your highness} if appropriate
									(call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),
                                    (str_store_string, s6, "@This is the {reg4?town:village} of {s5}, {s0}."),
									##diplomacy end+
                                    (str_clear, s10),
                                    (try_begin),
                                      (party_slot_eq, "$current_town", slot_town_lord, "trp_player"),
                                      (str_store_string, s10, "@{s6} Our {reg4?town:village} and the surrounding lands belong to you of course, my {lord/lady}."),
                                    (else_try),
                                      (party_get_slot, ":town_lord", "$current_town", slot_town_lord),
                                      (ge, ":town_lord", 0),
                                      (str_store_troop_name, s7, ":town_lord"),
                                      (store_troop_faction, ":town_lord_faction", ":town_lord"),
                                      (str_store_faction_name, s8, ":town_lord_faction"),
                                      (str_store_string, s10, "@{s6} Our {reg4?town:village} and the surrounding lands belong to {s7} of {s8}."),
                                    (try_end),
                                    (str_clear, s5),
                                    (assign, ":number_of_goods", 0),
                                    (try_for_range, ":cur_good", trade_goods_begin, trade_goods_end),
                                      #(store_sub, ":cur_good_slot", ":cur_good", trade_goods_begin),
                                      #(val_add, ":cur_good_slot", slot_town_trade_good_productions_begin),
                                      #(party_get_slot, ":production", "$g_encountered_party", ":cur_good_slot"),

                                      (call_script, "script_center_get_production", "$g_encountered_party", ":cur_good"),
                                      (assign, ":production", reg0),
                                      (ge, ":production", 20),

                                      (str_store_item_name, s3, ":cur_good"),
                                      (try_begin),
                                        (eq, ":number_of_goods", 0),
                                        (str_store_string, s5, s3),
                                      (else_try),
                                        (eq, ":number_of_goods", 1),
                                        (str_store_string, s5, "@{s3} and {s5}"),
                                      (else_try),
                                        (str_store_string, s5, "@{!}{s3}, {s5}"),
                                      (try_end),
                                      (val_add, ":number_of_goods", 1),
                                    (try_end),
									(try_begin),
										(gt, ":number_of_goods", 0),
										(assign, reg20, 1),
									(else_try),
										(assign, reg20, 0),
									(try_end),

                                    (str_store_string, s11, "@{reg20?We mostly produce {s5} here:We don't produce much here these days}.\
 If you would like to learn more, you can speak with our {reg4?guildmaster:village elder}. He is nearby, right over there."),
                                    ],
   "{s10} {s11}", "close_window",[]],

  [anyone|plyr,"town_dweller_talk", [(party_slot_eq, "$current_town", slot_party_type, spt_village),
                                     (eq, "$welfare_inquired", 0)], "How is life here?", "town_dweller_ask_situation",[(assign, "$welfare_inquired", 1)]],
  [anyone|plyr,"town_dweller_talk", [(party_slot_eq, "$current_town", slot_party_type, spt_town),
                                     (eq, "$welfare_inquired", 0)], "How is life here?", "town_dweller_ask_situation",[(assign, "$welfare_inquired", 1)]],


  [anyone,"town_dweller_ask_situation", [(call_script, "script_agent_get_town_walker_details", "$g_talk_agent"),
                                         (assign, ":walker_type", reg0),
                                         (eq, ":walker_type", walkert_needs_money),
										 #diplomacy start+ replace {sir/madame} with {my lord/my lady} or {your highness} if appropriate
										 (call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),
										 #diplomacy end+
                                         (party_slot_eq, "$current_town", slot_party_type, spt_village)],
   #diplomacy start+ replace {sir/madame} with {my lord/my lady} or {your highness} if appropriate
   "Disaster has struck my family, {s0}. We have no land of our own, and the others have no money to pay for our labor, or even to help us. My poor children lie at home hungry and sick. I don't know what we'll do.", "town_dweller_poor",[]],
   #diplomacy end+
  [anyone,"town_dweller_ask_situation", [(call_script, "script_agent_get_town_walker_details", "$g_talk_agent"),
                                         (assign, ":walker_type", reg0),
										 #diplomacy start+ replace {sir/madame} with {my lord/my lady} or {your highness} if appropriate
										 (call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),
										 #diplomacy end+
                                         (eq, ":walker_type", walkert_needs_money)],
   #diplomacy start+ replace {sir/madame} with {my lord/my lady} or {your highness} if appropriate
   "My life is miserable, {s0}. I haven't been able to find a job for months, and my poor children go to bed hungry each night.\
 My neighbours are too poor themselves to help me.", "town_dweller_poor",[]],
   #diplomacy end+
  [anyone|plyr,"town_dweller_poor", [(store_troop_gold, ":gold", "trp_player"),
                                     (ge, ":gold", 300),
                                     ],
   "Then take these 300 denars. I hope this will help you and your family.", "town_dweller_poor_paid",
   [(troop_remove_gold, "trp_player", 300),
    ]],

  [anyone|plyr,"town_dweller_poor", [],
   "Then clearly you must travel somewhere else, or learn another trade.", "town_dweller_poor_not_paid",[]],

  [anyone,"town_dweller_poor_not_paid", [], "Yes {sir/madam}. I will do as you say.", "close_window",[]],

  [anyone,"town_dweller_poor_paid", [], "{My lord/My good lady}. \
 You are so good and generous. I will tell everyone how you helped us.", "close_window",
   [(call_script, "script_change_player_relation_with_center", "$g_encountered_party", 1),
    (call_script, "script_agent_get_town_walker_details", "$g_talk_agent"),
    (assign, ":walker_no", reg2),
    (call_script, "script_center_set_walker_to_type", "$g_encountered_party", ":walker_no", walkert_needs_money_helped),
    ]],

  [anyone,"town_dweller_ask_situation", [(call_script, "script_agent_get_town_walker_details", "$g_talk_agent"),
                                         (assign, ":walker_type", reg0),
                                         (eq, ":walker_type", walkert_needs_money_helped),
										 #diplomacy start+ replace {sir/madame} with {my lord/my lady} or {your highness} if appropriate
										 (call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),
										 #diplomacy end+
                                         ],
   #diplomacy start+ replace {sir/madame} with {my lord/my lady} or {your highness} if appropriate
   "Thank you for your kindness {s0}. With your help our lives will be better. I will pray for you everyday.", "close_window",[]],
   #diplomacy end+
  [anyone,"town_dweller_ask_situation", [(neg|party_slot_ge, "$current_town", slot_town_prosperity, 30),
  #diplomacy start+ replace {sir/madame} with {my lord/my lady} or {your highness} if appropriate
  (call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),],
   "Times are hard, {s0}. We work hard all day and yet we go to sleep hungry most nights.", "town_dweller_talk",[]],
   ##diplomacy end+

  [anyone,"town_dweller_ask_situation", [(neg|party_slot_ge, "$current_town", slot_town_prosperity, 70),#],
   #diplomacy start+ replace {sir/madame} with {my lord/my lady} or {your highness} if appropriate
   (call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),],
   "Times are hard, {s0}. But we must count our blessings.", "town_dweller_talk",[]],
   #diplomacy end+
  [anyone,"town_dweller_ask_situation",
  ##diplomacy start+ replace {sir/madame} with {my lord/my lady} or {your highness} if appropriate
  [(call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),],
   "We are not doing too badly {s0}. We must count our blessings.", "town_dweller_talk",[]],
  ##diplomacy end+

  [anyone|plyr,"town_dweller_talk", [], "What is your trade?", "town_dweller_ask_trade",[]],

  [anyone,"town_dweller_ask_trade", [
  (call_script, "script_town_walker_occupation_string_to_s14", "$g_talk_agent"),
  ],
   "{s14}", "town_dweller_talk",[]],



  [anyone|plyr,"town_dweller_talk", [(eq, "$rumors_inquired", 0)], "What is the latest rumor around here?", "town_dweller_ask_rumor",[(assign, "$rumors_inquired", 1)]],
  ##diplomacy start+ The player's persuasive abilities can coax a rumor from the less friendly.
  ##OLD:
  #[anyone,"town_dweller_ask_rumor", [(neg|party_slot_ge, "$current_town", slot_center_player_relation, -5)], "I don't know anything that would be of interest to you.", "town_dweller_talk",[]],
  ##NEW:
  [anyone,"town_dweller_ask_rumor", [
  (store_skill_level, reg0, "skl_persuasion", "trp_player"),
  (store_sub, reg0, -5, reg0),
  (neg|party_slot_ge, "$current_town", slot_center_player_relation, reg0),
  ],
  "I don't know anything that would be of interest to you.", "town_dweller_talk",[]],
  ##diplomacy end+

  [anyone,"town_dweller_ask_rumor", [(store_mul, ":rumor_id", "$current_town", 197),
                                     (val_add,  ":rumor_id", "$g_talk_agent"),
                                     (call_script, "script_get_rumor_to_s61", ":rumor_id"),
                                     (gt, reg0, 0)], "{s61}", "town_dweller_talk",[]],

  [anyone,"town_dweller_ask_rumor", [], "I haven't heard anything interesting lately.", "town_dweller_talk",[]],

  [anyone|plyr,"town_dweller_talk", [], "[Leave]", "close_window",[]],

  [anyone,"start", [(eq, "$talk_context", 0),
                    (is_between,"$g_talk_troop",regular_troops_begin, regular_troops_end),
                    (party_slot_eq,"$current_town",slot_town_lord, "trp_player"),
                    #diplomacy start+ replace {sir/madame} with {my lord/my lady} or {your highness} if appropriate
                    (call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),
                     ], "Yes {s0}?", "player_castle_guard_talk",[]],#diplomacy end+
  [anyone|plyr,"player_castle_guard_talk", [], "How goes the watch, soldier?", "player_castle_guard_talk_2",[]],
  #diplomacy start+ replace {sir/madame} with {my lord/my lady} or {your highness} if appropriate
  [anyone,"player_castle_guard_talk_2", [], "All is quiet {s0}. Nothing to report.", "player_castle_guard_talk_3",[]],
  #diplomacy end+
  [anyone|plyr,"player_castle_guard_talk_3", [], "Good. Keep your eyes open.", "close_window",[]],


  [anyone,"start", [(eq, "$talk_context", 0),
                    (is_between,"$g_talk_troop",regular_troops_begin, regular_troops_end),
                    (is_between,"$g_encountered_party_faction",kingdoms_begin, kingdoms_end),
                    (eq, "$players_kingdom", "$g_encountered_party_faction"),
                    (troop_slot_ge, "trp_player", slot_troop_renown, 100),
                    (str_store_party_name, s10, "$current_town"),
                    #diplomacy start+ replace {sir/madame} with {my lord/my lady} or {your highness} if appropriate
                    (call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),
                     ], "Good day, {s0}. Always an honor to have you here in {s10}.", "close_window",[]],
                    #diplomacy end+

  [anyone,"start", [(eq, "$talk_context", 0),
                    (is_between,"$g_talk_troop",regular_troops_begin, regular_troops_end),
                    (is_between,"$g_encountered_party_faction",kingdoms_begin, kingdoms_end),
                     ], "Mind your manners within the walls and we'll have no trouble.", "close_window",[]],

  [anyone,"start", [(eq, "$talk_context", tc_court_talk),
                    (is_between,"$g_talk_troop",regular_troops_begin, regular_troops_end),
                    (is_between,"$g_encountered_party_faction",kingdoms_begin, kingdoms_end),
                    (party_slot_eq,"$current_town",slot_town_lord, "trp_player"),
                    #diplomacy start+ replace {my lord/my lady} with {your highness} if appropriate
                    (call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),
                     ], "Your orders, {s0}?", "hall_guard_talk",[]],
                    #diplomacy end+

  [anyone,"start", [(eq, "$talk_context", tc_court_talk),
                    (is_between,"$g_talk_troop",regular_troops_begin, regular_troops_end),
                    (is_between,"$g_encountered_party_faction",kingdoms_begin, kingdoms_end),
                    #diplomacy start+ replace {sir/madame} with {my lord/my lady} or {your highness} if appropriate
                    # (call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),
                    #SB : replace with commoners, since we're not always talking to our own guards
                    (call_script, "script_dplmc_print_commoner_at_arg1_says_sir_madame_to_s0", "$current_town"),
                     ], "We are not supposed to talk while on guard, {s0}.", "close_window",[]],
                    #diplomacy end+
  [anyone|plyr,"hall_guard_talk", [], "Stay on duty and let me know if anyone comes to see me.", "hall_guard_duty",[]],
  #diplomacy start+ replace {sir/madame} with {my lord/my lady} or {your highness} if appropriate
  [anyone,"hall_guard_duty", [(call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),], "Yes, {s0}. As you wish.", "close_window",[]],
  #SB : allow filtering of larger courts
  
  [anyone|plyr,"hall_guard_talk", [
    (is_between, "$g_player_court", centers_begin, centers_end),
    (eq, "$g_player_court", "$current_town"),
    (this_or_next|party_slot_eq, "$current_town", slot_party_temp_slot_1, "p_temp_party"),
    (party_slot_eq, "$current_town", slot_party_temp_slot_1, "p_temp_party_2"),
    (call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", "$players_kingdom"),
    (eq, reg0, DPLMC_FACTION_STANDING_LEADER), #assume co-spouse can't enforce changes
  ],
   "I want you to let the regular court members rejoin us.", "dplmc_guard_talk_reenter_court",[
   ]],

  [anyone|plyr,"hall_guard_talk", [
    (is_between, "$g_player_court", centers_begin, centers_end),
    (eq, "$g_player_court", "$current_town"),
    (neg|party_slot_eq, "$current_town", slot_party_temp_slot_1, "p_temp_party_2"),
    (call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", "$players_kingdom"),
    (eq, reg0, DPLMC_FACTION_STANDING_LEADER), #assume co-spouse can't enforce changes
  ],
   "I will be speaking to any unlanded lords petitioning for an audience.", "dplmc_guard_talk_enter_court",[
   (call_script, "script_enter_court_male", "$current_town", "p_temp_party_2"),
   (assign, "$temp", reg0),
   (party_set_slot, "$current_town", slot_party_temp_slot_1, "p_temp_party_2"), #2nd mode
   ]],

  [anyone|plyr,"hall_guard_talk", [
    # (is_between, "$g_player_court", centers_begin, centers_end),
    # (eq, "$g_player_court", "$current_town"),
    (this_or_next|party_slot_eq, "$current_town", slot_town_lord, stl_unassigned),
    (party_slot_eq, "$current_town", slot_town_lord, "trp_player"),
    (neg|party_slot_eq, "$current_town", slot_party_temp_slot_1, "p_temp_party"),
    (call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", "$players_kingdom"),
    (ge, reg0, DPLMC_FACTION_STANDING_PETITIONER),
  ],
   "I wish to speak to the noble ladies currently hosted here.", "dplmc_guard_talk_enter_court",[
     (call_script, "script_enter_court_female", "$current_town", "p_temp_party_2"),
     (assign, "$temp", reg0),
     (party_set_slot, "$current_town", slot_party_temp_slot_1, "p_temp_party"), #1st mode
   ]],

  [anyone|plyr,"hall_guard_talk", [
    (party_slot_eq, "$current_town", slot_town_lord, "trp_player"),
    (neg|party_slot_eq, "$current_town", slot_party_temp_slot_1, "p_temp_party_2"),
  ],
   "Clear the halls, I need a private audience with my ministers.", "dplmc_guard_talk_enter_court",[
   (party_clear, "p_temp_party_2"),
   (call_script, "script_enter_court_staff", "$current_town", "p_temp_party_2"),
   (party_set_slot, "$current_town", slot_party_temp_slot_1, "p_temp_party_2"), #2nd mode
   ]],
   
  [anyone,"dplmc_guard_talk_enter_court", [
    (eq, "$temp", 0), #none in stack
    (call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),
   ],
   "Unfortunately there are no petitioners awaiting your pleasure, {s0}.", "close_window",
   [
     (party_set_slot, "$current_town", slot_party_temp_slot_1, 0),
   # (call_script, "script_dplmc_enter_court_aux", "$current_town", "$temp"),
   ]],
  [anyone,"dplmc_guard_talk_enter_court", [],
   "As you wish. I shall ask the chamberlain to announce your presence.", "close_window",
   [
     (call_script, "script_dplmc_enter_court_aux", "$current_town", "p_temp_party_2"),
   ]],
   
  #normal mode
  [anyone,"dplmc_guard_talk_reenter_court", [],
   "As you wish. The court shall be convened momentarily.", "close_window",
   [
     (party_set_slot, "$current_town", slot_party_temp_slot_1, 0),
     (call_script, "script_enter_court", "$current_town"),
   ]],
   
  #diplomacy end+
  #SB : allow reassignment of guard troops if the player has no culture preference
  [anyone|plyr,"hall_guard_talk", [
    (call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", "$players_kingdom"),
    (eq, reg0, DPLMC_FACTION_STANDING_LEADER), #assume co-spouse can't enforce changes
    (eq, "$g_player_culture", 0), #player faction culture is not set
  ],
   "You're not fit to guard these halls. Get out of my sight.", "dplmc_guard_talk_replace",[
     (assign, "$diplomacy_var", slot_faction_guard_troop), #slot to change
     (assign, "$diplomacy_var2", 21), #level requirement, include pre-knight horsemen troops
   ]],
   
  [anyone,"dplmc_guard_talk_replace", [],
   "I see... Who would you replace me with?", "dplmc_guard_plyr_replace",[]],
   #list members in party, in garrison too
  [anyone|plyr,"dplmc_guard_plyr_replace", [],
   "Never mind. Back to work!", "close_window",[]],
  [anyone|plyr|repeat_for_100,"dplmc_guard_plyr_replace", [
  (store_repeat_object, ":stack_no"),
  (party_get_num_companion_stacks, ":num_stacks", "p_main_party"),
  (is_between, ":stack_no", 1, ":num_stacks"),
  (party_stack_get_troop_id, ":troop_no", "p_main_party", ":stack_no"),
  (neg|troop_is_hero, ":troop_no"),
  (is_between, ":troop_no", regular_troops_begin, regular_troops_end), #condition for guard dialogs
  (store_character_level, ":cur_level", ":troop_no"),
  (ge, ":cur_level", "$diplomacy_var2"),
  (str_store_troop_name, s1, ":troop_no"),
  (assign, reg10, 0),
  (try_begin),
    (eq, "$g_talk_troop", ":troop_no"),
    (str_store_string, s2, "@Current"),
    (assign, reg10, 1),
  (else_try),
    (faction_slot_eq, "$players_kingdom", slot_faction_guard_troop, ":troop_no"),
    (str_store_string, s2, "@Court Guard"),
    (assign, reg10, 1),
  (else_try),
    (faction_slot_eq, "$players_kingdom", slot_faction_prison_guard_troop, ":troop_no"),
    (str_store_string, s2, "@Prison Guard"),
    (assign, reg10, 1),
  (else_try),
    (faction_slot_eq, "$players_kingdom", slot_faction_castle_guard_troop, ":troop_no"),
    (str_store_string, s2, "@Castle Guard"),
    (assign, reg10, 1),
  (else_try),
    (assign, ":faction_end", npc_kingdoms_end),
    (try_for_range, ":faction_no", npc_kingdoms_begin, ":faction_end"),
      (faction_slot_eq, ":faction_no", "$diplomacy_var", ":troop_no"),
      (assign, ":faction_end", ":faction_no"),
    (try_end),
    (neq, ":faction_end", npc_kingdoms_end),
    (str_store_faction_name, s2, ":faction_end"),
    (assign, reg10, 1),
  (try_end),
  ],
   "{!}{s1} {reg10?({s2}):}", "dplmc_guard_troop_replaced",[
   
   (store_repeat_object, ":stack_no"), #we already validated above
   (party_stack_get_troop_id, ":troop_no", "p_main_party", ":stack_no"),
   (faction_set_slot, "$players_kingdom", slot_faction_temp_slot, ":troop_no"),

   ]],

  #do nothing if reselected
  [anyone,"dplmc_guard_troop_replaced", [
    (faction_slot_eq, "$players_kingdom", slot_faction_temp_slot, "$g_talk_troop"),
    (call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),
  ], "Thank you for giving us a second chance, {s0}.", "close_window", [
  ]],
  #check for slot conflicts - cannot have the same troop play both prison/castle guard because of dialog conditions
  [anyone,"dplmc_guard_troop_replaced", [
    (faction_get_slot, ":troop_no", "$players_kingdom", slot_faction_temp_slot),
    (this_or_next|faction_slot_eq, "$players_kingdom", slot_faction_prison_guard_troop, ":troop_no"),
    (this_or_next|faction_slot_eq, "$players_kingdom", slot_faction_castle_guard_troop, ":troop_no"),
    (faction_slot_eq, "$players_kingdom", slot_faction_guard_troop, ":troop_no"),
    (try_begin),
      (eq, ":troop_no", "$g_talk_troop"),
      (assign, reg10, 0),
    (else_try),
      (assign, reg10, 1),
      (str_store_troop_name_plural, s10, ":troop_no"),
    (try_end),
  ], "I don't think it would be possible for {reg10?the {s10}:us} to guard both places at the same time.", "close_window", [
  ]],

  [anyone,"dplmc_guard_troop_replaced", [], "As you wish, {s0}. {s1} will now be posted among your guards.", "close_window", [
    (faction_get_slot, ":troop_no", "$players_kingdom", slot_faction_temp_slot),
    (faction_set_slot, "$players_kingdom", "$diplomacy_var", ":troop_no"),
    (party_remove_members, "p_main_party", ":troop_no", 1),
    (str_store_troop_name_plural, s1, ":troop_no"),
    (call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),
  ]],

  [anyone|plyr,"hall_guard_talk", [
     (troop_get_slot, ":employee", dplmc_employees_end, dplmc_slot_troop_affiliated),
     (gt, ":employee", 0),
     (troop_is_hero, ":employee"),
     (call_script, "script_dplmc_store_troop_is_female", ":employee"),
     (str_store_troop_name, s1, ":employee"),
  ], "Inform {s1} that {reg0?she:he} no longer needs to greet me at the door.", "hall_guard_employee_wait",[]],

  [anyone,"hall_guard_employee_wait", [(call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),], "As you wish, {s0}.", "close_window",[
    (troop_set_slot, dplmc_employees_end, dplmc_slot_troop_affiliated, 0),
  ]],
  #SB : TODO actually arrest the attending lords (incur tyranny via dishonor, controversy, declaration of war from original faction?)
  [anyone|plyr,"hall_guard_talk", [
  (eq, 1, 0),
  ], "I want you to arrest this man immediately!", "hall_guard_arrest",[]],
  #diplomacy start+ replace {sir/madame} with {my lord/my lady} or {your highness} if appropriate
  [anyone,"hall_guard_arrest", [(call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),], "Who do you want arrested {s0}?", "hall_guard_arrest_2",[]],
  #diplomacy end+
  [anyone|plyr,"hall_guard_arrest_2", [], "Ah, never mind my high spirits lads.", "close_window",[]],
  [anyone|plyr,"hall_guard_arrest_2", [], "Forget it. I will find another way to deal with this.", "close_window",[]],

  [anyone,"enemy_defeated", [], "Arggh! I hate this.", "close_window",[]],

  [anyone,"party_relieved", [], "Thank you for helping us against those bastards.", "close_window",[]],

  #SB : moved down to other bandit blocks
  # [anyone,"start", [(eq,"$talk_context", tc_party_encounter),
  # (store_encountered_party, reg(5)),(party_get_template_id,reg(7),reg(5)),(eq,reg(7),"pt_sea_raiders")],
   # "I will drink from your skull!", "battle_reason_stated",[(play_sound,"snd_encounter_sea_raiders")]],

######################################
# GENERIC MEMBER CHAT
######################################
##diplomacy start+ replace instances of {sir/madam} with {my lord/my lady} or {your highness} if appropriate,
#using s0 and script_dplmc_print_subordinate_says_sir_madame_to_s0"
  [anyone,"member_chat", [(call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),], "Your orders {s0}?", "regular_member_talk",[]],
  [anyone|plyr,"regular_member_talk", [], "Tell me about yourself", "view_regular_char_requested",[]],
  #SB : quest convenience 
  
  [anyone,"view_regular_char_requested", [(call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),], "Aye {s0}. Let me tell you all there is to know about me.", "do_regular_member_view_char",[[change_screen_view_character]]],
##diplomacy end+
  [anyone,"do_regular_member_view_char", [], "Anything else?", "regular_member_talk",[]],

##diplomacy start+
#Allow viewing (but not changing) of the equipment of the troops you are leading.
#Code credit to rubik's Custom Commander, with minor string changes.
## CC view regular's equipment
  [anyone|plyr,"regular_member_talk", [
    (check_quest_active, "qst_capture_prisoners"),
    (quest_slot_eq, "qst_capture_prisoners", slot_quest_target_troop, "$g_talk_troop"),
    (quest_get_slot, ":quest_amount", "qst_capture_prisoners", slot_quest_target_amount),
    (party_count_prisoners_of_type, ":prisoner_amount", "p_main_party", "$g_talk_troop"),
    (lt, ":prisoner_amount", ":quest_amount"),
    (troops_can_join_as_prisoner, 1),
    # (call_script, "script_faction_get_adjective_to_s10", "$g_talk_troop_faction"),
  ], "Place yourself under arrest, traitor...", "close_window",[
    (party_remove_members, "p_main_party", "$g_talk_troop", 1),
    (call_script, "script_change_faction_troop_morale", "$g_talk_troop_faction", -5, 1),
    (call_script, "script_change_troop_renown", "trp_player", -1),
    (party_add_prisoners, "p_main_party", "$g_talk_troop", 1),
  ]],
  [anyone|plyr,"regular_member_talk", [],
   "Let me see your equipment.", "dplmc_view_regular_inventory", [
     #SB : pre-copy stuff over
     (assign, "$g_player_troop", "trp_player"),
     (assign, "$diplomacy_var", "$sneaked_into_town"),
     (set_player_troop, "trp_player"),
     (call_script, "script_dplmc_copy_inventory", "$g_talk_troop", "trp_temp_array_b"),
   ]
  ],
  [anyone,"dplmc_view_regular_inventory",
    [(call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),], "Very well {s0}, here is what I am using...", "dplmc_do_view_regular_inventory",#Use {s0} instead of {sir/madam}
    [
      #SB : sort it before displaying
      (troop_sort_inventory, "trp_temp_array_b"),
      #name display
      (str_store_troop_name, s10, "$g_talk_troop"),
      (str_store_troop_name, s11, "trp_player"),
      (troop_set_name, "trp_player", s10),
      (troop_set_name, "trp_temp_array_b", s11),
      (troop_set_name, "trp_temp_array_c", s11),

      #placeholder troop should be able to equip even if original couldn't
      (troop_raise_skill, "trp_temp_array_b", skl_power_draw, 10),
      (troop_raise_skill, "trp_temp_array_b", skl_power_throw, 10),
      (troop_raise_skill, "trp_temp_array_b", skl_riding, 10),
      (troop_raise_attribute, "trp_temp_array_b", ca_strength, 30),
    
      #copy max of facekeys, overriding tableau troop doesn't reflect equipment
      (str_store_troop_face_keys, s13, "$g_talk_troop", 1),
      (troop_set_face_keys, "trp_temp_array_b", s13, 0),
      (troop_set_face_keys, "trp_temp_array_b", s13, 1),
      (troop_get_type, ":gender", "$g_talk_troop"),
      (troop_set_type, "trp_temp_array_b", ":gender"),
      # (troop_set_name, "trp_player", s10),
      (set_player_troop, "trp_temp_array_b"),
      (troop_clear_inventory, "trp_temp_array_c"),
      (change_screen_equip_other, "trp_temp_array_c"), #should be safe left panel
      (assign, "$sneaked_into_town", 999), #temp to check in tableau

    ]],
  [anyone,"dplmc_do_view_regular_inventory", [(call_script, "script_dplmc_print_subordinate_says_sir_madame_to_s0"),],
   "Is that satisfactory, {s0}?", "dplmc_do_view_regular_inventory_2", [

   ]#Use {s0} instead of {sir/madam}
  ],
  [anyone|plyr,"dplmc_do_view_regular_inventory_2",
    [],
   "Indeed.", "do_regular_member_view_char", [
     #SB : reset player troop & name
     (set_player_troop, "trp_player"),
     (troop_clear_inventory, "trp_temp_array_b"),
     (troop_clear_inventory, "trp_temp_array_c"),
     (str_store_troop_name, s10, "trp_temp_array_b"),
     (troop_set_name, "trp_player", s10),
     (assign, "$sneaked_into_town", "$diplomacy_var"),
     (troop_raise_skill, "trp_temp_array_b", skl_power_draw, -10),
     (troop_raise_skill, "trp_temp_array_b", skl_power_throw, -10),
     (troop_raise_skill, "trp_temp_array_b", skl_riding, -10),
     (troop_raise_attribute, "trp_temp_array_b", ca_strength, -30),
   ]
  ],
## CC view regular's equipment
##diplomacy end+

  [anyone|plyr,"regular_member_talk", [], "Nothing. Keep moving.", "close_window",[]],





######################################
# GENERIC PARTY ENCOUNTER
######################################

  [anyone,"start", [(eq,"$talk_context",tc_party_encounter),
                    (gt,"$encountered_party_hostile",0),
                    (encountered_party_is_attacker),
                    ],
   "You have no chance against us. Surrender now or we will kill you all...", "party_encounter_hostile_attacker",
   []],
   # [(try_begin),
      # (eq,"$g_encountered_party_template","pt_steppe_bandits"),
      # (play_sound, "snd_encounter_steppe_bandits"),
    # (try_end)]],
#  [anyone|plyr,"party_encounter_hostile_attacker", [
#                    ],
#   "I will pay you 1000 denars if you just let us go.", "close_window", []],
  [anyone|plyr,"party_encounter_hostile_attacker", [
                    ],
   "We will fight you to the end!", "close_window", []],
  [anyone|plyr,"party_encounter_hostile_attacker", [
                    ],
   "Don't attack! We surrender.", "close_window", [(assign,"$g_player_surrenders",1)]],

  [anyone,"start", [(eq,"$talk_context",tc_party_encounter),
                    (neg|encountered_party_is_attacker),
                    ],
   "What do you want?", "party_encounter_hostile_defender",
   []],

  [anyone|plyr,"party_encounter_hostile_defender", [],
   "Surrender or die!", "party_encounter_hostile_ultimatum_surrender", [
        #SB : add animation
        (call_script, "script_encounter_agent_draw_weapon"),
       ]],

#post 0907 changes begin
  [anyone,"party_encounter_hostile_ultimatum_surrender", [],
   "{s43}", "close_window", [
       (call_script, "script_lord_comment_to_s43", "$g_talk_troop", "str_lord_challenged_default"),
       ]],
#post 0907 changes end

  [anyone|plyr,"party_encounter_hostile_defender", [],
   "Nothing. We'll leave you in peace.", "close_window", [(assign, "$g_leave_encounter",1)]],








  [anyone|auto_proceed, "start",
  [
    (is_between, "$g_talk_troop", startup_merchants_begin, startup_merchants_end),
    (check_quest_active, "qst_collect_men"),
    #(neq, "$talk_context", tc_tavern_talk),
    #(neq, "$talk_context", tc_back_alley),
    (eq, "$talk_context", tc_merchants_house),
  ],
  "{!}.", "merchant_end", []],

  [anyone, "merchant_end", [],
  "Heh! I must really be in a tight spot, to place my hopes in a passing stranger. However, something about you tells me that my trust is not misplaced. Now, go see if you can round up some volunteers.", "close_window", []],

  [anyone, "start",
  [
    (is_between, "$g_talk_troop", startup_merchants_begin, startup_merchants_end),
    (eq, "$talk_context", tc_merchants_house),
    (check_quest_active, "qst_save_town_from_bandits"),

    (store_div, ":number_of_civilian_loses_div_2", "$number_of_civilian_loses", 2),

    (try_begin),
      (eq, "$g_killed_first_bandit", 1),
      (store_add, ":player_success", "$number_of_bandits_killed_by_player", 1),
    (else_try),
      (store_add, ":player_success", "$number_of_bandits_killed_by_player", 0),
    (try_end),

    (val_sub, ":player_success", ":number_of_civilian_loses_div_2"),
    (val_max, ":player_success", 0),

    (call_script, "script_change_player_relation_with_center", "$g_starting_town", ":player_success"),

    (try_begin),
      (eq, "$g_killed_first_bandit", 1),
      (gt, "$number_of_bandits_killed_by_player", 2),
      (str_store_string, s3, "str_you_fought_well_at_town_fight_survived"),
      (troop_add_gold, "trp_player", 200),
    (else_try),
      (eq, "$g_killed_first_bandit", 1),
      (gt, "$number_of_bandits_killed_by_player", 0),
      (str_store_string, s3, "str_you_fought_normal_at_town_fight_survived"),
      (troop_add_gold, "trp_player", 200),
    (else_try),
      (eq, "$g_killed_first_bandit", 1),
      (eq, "$number_of_bandits_killed_by_player", 0),
      (str_store_string, s3, "str_you_fought_bad_at_town_fight_survived"),
      (troop_add_gold, "trp_player", 100),
    (else_try),
      (eq, "$g_killed_first_bandit", 0),
      (ge, "$number_of_bandits_killed_by_player", 2),
      (str_store_string, s3, "str_you_fought_well_at_town_fight"),
      (troop_add_gold, "trp_player", 100),
    (else_try),
      (str_store_string, s3, "str_you_wounded_at_town_fight"),
      (troop_add_gold, "trp_player", 100),
    (try_end),

    (try_begin),
      (ge, "$number_of_civilian_loses", 1),
      (assign, reg0, "$number_of_civilian_loses"),
      (str_store_string, s2, "str_unfortunately_reg0_civilians_wounded_during_fight_more"),
    (else_try),
      (eq, "$number_of_civilian_loses", 1),
      (assign, reg0, "$number_of_civilian_loses"),
      (str_store_string, s2, "str_unfortunately_reg0_civilians_wounded_during_fight"),
    (else_try),
      (str_store_string, s2, "str_also_one_another_good_news_is_any_civilians_did_not_wounded_during_fight"),
    (try_end),

    (call_script, "script_succeed_quest", "qst_save_town_from_bandits"),
    (call_script, "script_end_quest", "qst_save_town_from_bandits"),
  ],
  "{s3}{s2}", "merchant_quest_4e",
  []],

  [anyone|plyr,"merchant_quest_4e",
  [
    (try_begin),
      (eq, "$g_killed_first_bandit", 1),
      (gt, "$number_of_bandits_killed_by_player", 2),
      (str_store_string, s1, "str_you_fought_well_at_town_fight_survived_answer"),
    (else_try),
      (eq, "$g_killed_first_bandit", 1),
      (gt, "$number_of_bandits_killed_by_player", 0),
      (str_store_string, s1, "str_you_fought_normal_at_town_fight_survived_answer"),
    (else_try),
      (eq, "$g_killed_first_bandit", 1),
      (eq, "$number_of_bandits_killed_by_player", 0),
      (str_store_string, s1, "str_you_fought_bad_at_town_fight_survived_answer"),
    (else_try),
      (eq, "$g_killed_first_bandit", 0),
      (ge, "$number_of_bandits_killed_by_player", 2),
      (str_store_string, s1, "str_you_fought_well_at_town_fight_answer"),
    (else_try),
      (str_store_string, s1, "str_you_wounded_at_town_fight_answer"),
    (try_end),
  ],
  "{s1}", "merchant_finale",
  [
    (assign, "$dialog_with_merchant_ended", 1),
    #SB : slight renown bonus
    (store_add, ":renown", "$number_of_bandits_killed_by_player", "$g_killed_first_bandit"),
    (val_div, ":renown", 2),
    (call_script, "script_change_troop_renown", "trp_player", ":renown"),
    # (troop_add_proficiency_points, "trp_player", ":renown"),
  ]],

  #[anyone|auto_proceed, "start",
  #[
  #  (is_between, "$g_talk_troop", startup_merchants_begin, startup_merchants_end),
  #  (eq, "$talk_context", tc_merchants_house),
  #  (check_quest_finished, "qst_save_town_from_bandits"),
  #],
  #"{!}.", "merchant_all_quest_completed",
  #[
  #]],


  [anyone|plyr,"merchant_quest_4e",
  [
  ],
  "The Heavens alone grant us victory.", "merchant_finale",
  [
    (assign, "$dialog_with_merchant_ended", 1),
    #SB : slight honor bonus
    (call_script, "script_change_player_party_morale", 5),
  ]],

  [anyone|plyr,"merchant_quest_4e",
  [],
  "I'm glad to see that you're alive, too.", "merchant_finale",
  [
    (assign, "$dialog_with_merchant_ended", 1),
    #SB : slight relationship bonus
    (call_script, "script_change_player_relation_with_center", "$g_starting_town", 2),
  ]],


  [anyone,"merchant_finale", [
  (faction_get_slot, ":faction_leader", "$g_encountered_party_faction", slot_faction_leader),
  (str_store_troop_name, s5, ":faction_leader"),
  ],
  "Yes, yes... Now, a couple of my boys have the watch captain pinned down in a back room, with a knife at his throat. I''ll need to go drag him before {s5} and explain what this breach of the peace is all about. You don't need to be part of that, though. I'll tell you what -- if all goes well, I'll meet you in the tavern again shortly, and let you know how it all came out. If you don't see me in the tavern, but instead see my head on a spike over the city gate, I'll assume you know enough to stay out of town for a while and forget this whole episode ever happened. So -- hopefully we'll meet again!", "close_window",
[
(assign, "$g_do_one_more_meeting_with_merchant", 2),
# (assign, "$g_do_one_more_meeting_with_merchant", 1), no need to this, do not open this line, it is already assigning while leaving mission.
# (jump_to_menu, "mnu_town"),
# (finish_mission, 0),
#SB : clean up mt_town_fight in case we use it later
(mission_tpl_entry_set_override_flags, "mt_town_fight", 3, af_override_horse),
(mission_tpl_entry_clear_override_items, "mt_town_fight", 3),
(try_for_range, ":entry_no", town_walker_entries_start, town_walker_entries_start + num_town_walkers),
  (mission_tpl_entry_set_override_flags, "mt_town_fight", ":entry_no", af_override_horse),
  (mission_tpl_entry_clear_override_items, "mt_town_fight", ":entry_no"),
(try_end),
]],



  [anyone, "start",
  [
    (is_between, "$g_talk_troop", startup_merchants_begin, startup_merchants_end),
    (eq, "$talk_context", tc_merchants_house),
    (neg|check_quest_finished, "qst_collect_men"),
    (eq, "$current_startup_quest_phase", 1),

    (try_begin),
      (eq, "$g_killed_first_bandit", 1),
      (str_store_string, s1, "str_are_you_all_right"),
    (else_try),
      (str_store_string, s1, "str_you_are_awake"),
    (try_end),
  ],
  "{s1}", "merchant_quest_1_prologue_1",
  []],

  [anyone,"merchant_quest_1_prologue_1",
  [
  ],
  "We've always had brigands in the hills, driven to banditry by war, debt, or love of violence. Recently, however, they've been getting bolder -- leaving their camps in the wild and venturing into town, looking for unwary prey. The watch commander tells us it's because of all the fighting on the frontiers -- fewer men to keep an eye on the streets -- but I'm not sure what to make of that. It seems to me that the most logical explanation is that these bandits have an ally inside the walls, who helps them enter unnoticed and helps them identify particularly tempting targets... Last week, you see, they took my brother.", "merchant_quest_1_prologue_2",
  []],

  [anyone,"merchant_quest_1_prologue_2",
  [],
  "I don't know what my brother was thinking -- a lad from a prominent house, out alone after dark in times like these... Well, I suppose you were too, but you're a stranger here, and didn't know how bad things have become. He had no such excuse. But he's family, so what can you do? If you don't protect your kin, then people will start thinking that you can't protect your investements, either, and I can't have that... No doubt the gang will soon send word about a ransom, but I don't care to pay it.", "merchant_quest_1_prologue_3",[]],


  [anyone,"merchant_quest_1_prologue_3",
  [],
  "So here's my proposition. You look like you've had a bit of experience with a blade -- and more importantly, you must have a bit of fire in your belly, or you wouldn't be coming to Calradia to seek your fortune. So here's what I'm asking you to do: gather a small party, track down these bandits to their lair, teach them a lesson they won't forget, and get my brother back safe. In return, you'll earn my lasting gratitude and a bit of silver. What do you say?", "merchant_quest_1a",[]],

  [anyone|plyr,"merchant_quest_1a",
  [
  ],
  "I am interested.", "merchant_quest_1b",[]],

  [anyone|plyr,"merchant_quest_1a",
  [
  ],
  "I am not interested, have more important business to do.", "close_window",
  [
    (assign, "$dialog_with_merchant_ended", 1),
  ]],

  ##diplomacy start+ Allow skipping the tutorial.
  [anyone|plyr,"merchant_quest_1a",
  [
     (ge, "$cheat_mode", 1),
  ],
  "{!}[CHEAT] I have played this before, and would prefer to skip the tutorial.", "dplmc_devel_merchant_quest_skip",
  []],

  [anyone,"dplmc_devel_merchant_quest_skip",
  [],
  "{!}Okay.  I'll just give you the reward, and we can assume that all of this already happened.", "close_window",
  [
	#Setup quest 1: recruit 5 men
	(troop_add_gold, "trp_player", 100),
    (str_store_troop_name, s9, "$g_talk_troop"),
    (str_store_party_name, s1, "$g_starting_town"),
    (str_store_string, s2, "str_start_up_quest_message_1"),
	(call_script, "script_start_quest", "qst_collect_men", "$g_talk_troop"),
	(party_get_position, pos1, "$current_town"),
	#Finish quest 1
	(call_script, "script_succeed_quest", "qst_collect_men"),
	(call_script, "script_end_quest", "qst_collect_men"),
	#Setup quest 2: find location of brother
	(str_store_party_name, s9, "$current_town"),
	(str_store_string, s2, "str_start_up_quest_message_2"),
	(call_script, "script_start_quest", "qst_learn_where_merchant_brother_is", "$g_talk_troop"),
	#Finish quest 2
	(call_script, "script_succeed_quest", "qst_learn_where_merchant_brother_is"),
	(call_script, "script_end_quest", "qst_learn_where_merchant_brother_is"),
	#Setup quest 3: rescue brother
	(str_store_troop_name, s10, "$g_talk_troop"),
	(str_store_string, s2, "str_find_the_lair_near_s9_and_free_the_brother_of_the_prominent_s10_merchant"),
	(call_script, "script_start_quest", "qst_save_relative_of_merchant", "$g_talk_troop"),
	#Finish quest 3
	(assign, "$relative_of_merchant_is_found", 1),
	(call_script, "script_succeed_quest", "qst_save_relative_of_merchant"),
	(call_script, "script_finish_quest", "qst_save_relative_of_merchant", 100),
	(troop_add_gold, "trp_player", 200),
	#Setup quest 4: fight bandits
	(str_store_party_name_link, s9, "$g_starting_town"),
	(str_store_string, s2, "str_save_town_from_bandits"),
	(call_script, "script_start_quest", "qst_save_town_from_bandits", "$g_talk_troop"),
	#Finish quest 4
	(assign, "$current_startup_quest_phase", 4),
	(call_script, "script_change_player_relation_with_center", "$g_starting_town", 1),
	(troop_add_gold, "trp_player", 200),
    (call_script, "script_succeed_quest", "qst_save_town_from_bandits"),
    (call_script, "script_end_quest", "qst_save_town_from_bandits"),
	#So he'll reappear in the tavern (unless you don't immediately speak with him)
	(assign, "$dialog_with_merchant_ended", 1),
	(assign, "$g_do_one_more_meeting_with_merchant", 1),
	#Fix a subsequent-dialog bug if you speak with him again in his house at the start
	(neg|is_between, "$g_encountered_party_faction", npc_kingdoms_begin, npc_kingdoms_end),
	(store_faction_of_party, "$g_encountered_party_faction", "$g_starting_town"),
  ]],
  ##diplomacy end+

  [anyone,"merchant_quest_1b",
  [
  ],
  "You won't be able to do this by yourself, though. If you try and take on the whole gang singlehandedly, the hunter will become the hunted, I'll warrant. You'll first want to round up a group of volunteers. There's always a few lads in the villages around here, looking for a bit of work that's more interesting than tilling the soil or hauling water. They'll follow you if you pay. So... Take this purse of 100 denars. Consider it an advance on your reward. Go round to the villages, and use the money to hire some help. I'll reckon that you need at least five men to take on these bandits.", "merchant_quest_1c",
  [
    (call_script, "script_troop_add_gold", "trp_player", 100),

    (str_store_troop_name, s9, "$g_talk_troop"),
    (str_store_party_name_link, s1, "$g_starting_town"), #SB : link center
    (str_store_string, s2, "str_start_up_quest_message_1"),

    (call_script, "script_start_quest", "qst_collect_men", "$g_talk_troop"),

    (party_get_position, pos1, "$current_town"),
  ]],

  [anyone|plyr,"merchant_quest_1c",
  [
  ],
  "Very good, sir. I'll go collect some men from around the villages.", "merchant_quest_1d",[]],

  #SB : add flavor element to quest reward for defeating bandit
  [anyone,"merchant_quest_1d",
  [
    (str_store_party_name, s1, "$current_town"),
    # (eq, "$g_killed_first_bandit", 1),
    (assign, reg10, "$g_killed_first_bandit"),
  ],
  "Good. You can find me again in the tavern here in {s1} after you've got your group together. Then we'll speak about what we do next. {reg10?While you're at it, take these off my hands. I've hid the body of that fellow you knocked about, but I can't keep these weapons here.:}", "close_window",
  [
    (try_begin),
      (eq, "$g_killed_first_bandit", 1),
      (assign, ":chance", 100), #salvage chance
      (try_for_range, ":item_slot", ek_item_0, ek_head),
        (troop_get_inventory_slot, ":item_no", "trp_bandit", ":item_slot"),
        (gt, ":item_no", 0), 
        (store_random_in_range, ":random_no", 0, 100),
        (lt, ":random_no", ":chance"),
        (troop_add_item, "trp_player", ":item_no", 0),
        (val_div, ":chance", 2),
      (try_end),
    (try_end),
    (assign, "$dialog_with_merchant_ended", 1),
  ]],



  #[anyone, "merchant_all_quest_completed",
  #[
  #],
  #"TODO-STARTUP : You can leave now.", "close_window",
  #[
  #]],

  [anyone,"start", [], "Surrender or die. Make your choice", "battle_reason_stated",[]],
  [anyone|plyr,"battle_reason_stated", [], "I am not afraid of you. I will fight.", "close_window",[[encounter_attack]]],

  [anyone,"start", [], "Hello. What can I do for you?", "free",[]],
  [anyone|plyr,"free", [[neg|in_meta_mission]], "Tell me about yourself", "view_char_requested",[]],
  [anyone,"view_char_requested", [], "Very well, listen to this...", "view_char",[[change_screen_view_character]]],
  [anyone,"view_char", [], "Anything else?", "free",[]],

  [anyone|plyr,"end", [], "[Done]", "close_window",[]],

  [anyone|plyr,"start", [], "Drop your weapons and surrender if you want to live", "threaten_1",[]],
  [anyone,"threaten_1", [], "We will fight you first", "end",[[encounter_attack]]],

#  [anyone|plyr,"free", [[partner_is_mercmaster]], "I need to hire some mercenaries.", "mercenaries_requested",[]],
#  [anyone,"mercenaries_requested", [], "I have the toughest fighters in all Calradia.", "buy_mercenaries",[[change_screen_buy_mercenaries]]],
#  [anyone,"buy_mercenaries", [], "Anything else?", "free",[]],

#  [anyone|plyr,"free", [[partner_is_recruitable]], "I need a capable sergeant like yourself. How much do you ask to work for me?", "employ_mercenary_requested",[]],
#  [anyone,"employ_mercenary_requested", [[store_mercenary_price,0],[store_mercenary_wage,1]], "I want {reg0} denars now and {reg1} denars as monthly payment.", "employ_mercenary_2",[]],
#  [anyone|plyr,"employ_mercenary_2", [], "I see I need to think of this.", "employ_mercenary_giveup",[]],
#  [anyone|plyr,"employ_mercenary_2", [[neg|hero_can_join]], "I don't have any more room in my party right now. I will talk to you again later.", "employ_mercenary_giveup",[]],
#  [anyone|plyr,"employ_mercenary_2", [[player_gold_ge,reg(0)],[hero_can_join]], "That's fine. Here's the {reg0} denars. From now on you work for me.", "employ_mercenary_commit",[[troop_remove_gold, "trp_player",reg(0)],[recruit_mercenary]]],
#  [anyone,"employ_mercenary_giveup", [], "Suits me.", "free",[]],
#  [anyone,"employ_mercenary_commit", [], "You got yourself the best fighter in the land.", "end",[]],


  [anyone,"member_direct_campaign", [], "Yes, {my lord/my lady}. Which message do you wish to send to the vassals?", "member_direct_campaign_choice",
  []],



  [anyone|plyr,"member_direct_campaign_choice",
   [
#     (eq, "$g_talk_troop_faction", "$players_kingdom"),
	 (this_or_next|neg|faction_slot_ge, "$players_kingdom", slot_faction_marshall, active_npcs_begin),
		(eq, "$players_kingdom", "fac_player_supporters_faction"),
     (this_or_next|faction_slot_eq, "$players_kingdom", slot_faction_ai_state, sfai_default),
		(faction_slot_eq, "$players_kingdom", slot_faction_ai_state, sfai_feast),
     ],
   "I want to start a new campaign. Let us assemble the army here.", "member_direct_campaign_call_to_arms_verify",
   [
     (faction_get_slot, ":old_marshall", "$players_kingdom", slot_faction_marshall),
     (try_begin),
        (ge, ":old_marshall", 0),
        (troop_get_slot, ":old_marshall_party", ":old_marshall", slot_troop_leaded_party),
        (party_is_active, ":old_marshall_party"),
        (party_set_marshal, ":old_marshall_party", 0),
     (try_end),

    (faction_set_slot, "$players_kingdom", slot_faction_marshall, "trp_player"),
   ]],

  [anyone|plyr,"member_direct_campaign_choice",
   [
#     (eq, "$g_talk_troop_faction", "$players_kingdom"),
     (faction_slot_eq, "$players_kingdom", slot_faction_marshall, "trp_player"),
     (neg|faction_slot_eq, "$players_kingdom", slot_faction_ai_state, sfai_default),
     (neg|faction_slot_eq, "$players_kingdom", slot_faction_ai_state, sfai_feast),
     ],
   "I want to end the campaign and let everyone return home.", "member_give_order_disband_army_verify", []],

  [anyone|plyr,"member_direct_campaign_choice",
   [
#     (eq, "$g_talk_troop_faction", "$players_kingdom"),
     (faction_slot_eq, "$players_kingdom", slot_faction_marshall, "trp_player"),
     (neg|faction_slot_eq, "$players_kingdom", slot_faction_ai_state, sfai_feast),
	 (check_quest_active, "qst_organize_feast"),
	 (quest_get_slot, ":venue", "qst_organize_feast", slot_quest_target_center),
	 (store_faction_of_party, ":venue_faction", ":venue"),
	 (eq, ":venue_faction", "$players_kingdom"),
	 (str_store_party_name, s4, ":venue"),
     ],
   "I wish to invite the vassals of the realm to a feast at {s4}.", "member_give_order_invite_feast_verify", []],




  [anyone|plyr,"member_direct_campaign_choice",
   [
     ],
   "Never mind.", "member_pretalk",
   []],




  [anyone,"member_give_order_invite_feast_verify", [],
   "You wish to invite the lords of the realm to a feast?", "member_give_order_invite_feast_verify_2",[]],

  [anyone|plyr,"member_give_order_invite_feast_verify_2", [], "Yes. It is time for us to strengthen the bonds that bring us together.", "member_give_order_invite_feast",[]],
  [anyone|plyr,"member_give_order_invite_feast_verify_2", [], "On second thought, this is perhaps not the time.", "member_pretalk",[]],

  [anyone,"member_give_order_invite_feast",
   [
	 (quest_get_slot, ":venue", "qst_organize_feast", slot_quest_target_center),
     (str_store_party_name, s4, ":venue"),
   ],
   "All right then. I shall dispatch messengers informing the lords of the realm of your feast at {s4}.", "member_pretalk",
   [
	 (quest_get_slot, ":venue", "qst_organize_feast", slot_quest_target_center),

	 (assign, "$player_marshal_ai_state", sfai_feast),
	 (assign, "$player_marshal_ai_object", ":venue"),
     (call_script, "script_decide_faction_ai", "$players_kingdom"),
	 (assign, "$g_recalculate_ais", 1),
	 (str_store_party_name, s4, ":venue"),

     ]],





  [anyone,"member_direct_campaign_call_to_arms_verify", [],
   "You wish to summon all lords for a new campaign?", "member_give_order_call_to_arms_verify_2",[]],

  [anyone|plyr,"member_give_order_call_to_arms_verify_2", [], "Yes. We must gather all our forces before we march on the enemy.", "member_give_order_call_to_arms",[]],
  [anyone|plyr,"member_give_order_call_to_arms_verify_2", [], "On second thought, it won't be necessary to summon everyone.", "member_pretalk",[]],

  [anyone,"member_give_order_call_to_arms",
   [],
   "All right then. I will send messengers and tell everyone to come here.", "member_pretalk",
   [
	 (assign, "$player_marshal_ai_state", sfai_gathering_army),
	 (assign, "$player_marshal_ai_object", "p_main_party"),
     (call_script, "script_decide_faction_ai", "$players_kingdom"),
	 (assign, "$g_recalculate_ais", 1),
     ]],


  [anyone,"member_give_order_disband_army_verify", [],
   "You want to end the current campaign and release all lords from duty?", "member_give_order_disband_army_2",[]],

  [anyone|plyr,"member_give_order_disband_army_2", [], "Yes. We no longer need all our forces here.", "member_give_order_disband_army",[]],
  [anyone|plyr,"member_give_order_disband_army_2", [], "On second thought, it will be better to stay together for now.", "member_pretalk",[]],

  [anyone,"member_give_order_disband_army",
   [],
   "All right. I will let everyone know that they are released from duty.", "member_pretalk",
   [
	 (assign, "$player_marshal_ai_state", sfai_default),
	 (assign, "$player_marshal_ai_object", -1),
     (call_script, "script_decide_faction_ai", "$players_kingdom"),
	 (assign, "$g_recalculate_ais", 1),

     ]],


  [anyone,"mayor_wealth_comparison_1",[

  # (assign, ":wealthiest_center", "$g_encountered_party"),
  # (assign, ":poorer_centers", 0),
  # (assign, ":richer_centers", 0),

  # (party_get_slot, ":wealthiest_center_wealth", "$g_encountered_party", slot_town_prosperity),
  # (party_get_slot, ":mayor_center_wealth", "$g_encountered_party", slot_town_prosperity),
  (try_for_range, ":other_center", towns_begin, towns_end),
    (party_get_slot, ":other_center_wealth", ":other_center", slot_town_prosperity),
    (party_set_slot, ":other_center", slot_party_temp_slot_1, ":other_center_wealth"),
  (try_end),

  # (try_for_range, ":other_center", towns_begin, towns_end),
	# (neq, ":other_center", "$g_encountered_party"),
	# (party_get_slot, ":other_center_wealth", ":other_center", slot_town_prosperity),
	# (try_begin),
		# (gt, ":other_center_wealth", ":wealthiest_center_wealth"),
		# (val_add, ":richer_centers", 1),
		# (assign, ":wealthiest_center", ":other_center"),
		# (assign, ":wealthiest_center_wealth", ":other_center_wealth"),
    # (else_try),
		# (gt, ":other_center_wealth", ":mayor_center_wealth"),
		# (val_add, ":richer_centers", 1),
    # (else_try),
		# (val_add, ":poorer_centers", 1),
    # (try_end),
  # (try_end),

  # (assign, reg4, ":richer_centers"),
  # (assign, reg5, ":poorer_centers"),
  # (str_store_party_name, s5, "$g_encountered_party"),
  # (str_store_party_name, s4, ":wealthiest_center"),
  (call_script, "script_dplmc_mayor_wealth_comparison", "$current_town", 0),

  ], "{s0}", "mayor_wealth_comparison_2",[
  ]],
  #Production of this town
  #Production of the hinterland
  #Volume of trade

  [anyone,"mayor_wealth_comparison_2",[
  (try_for_range, ":other_center", towns_begin, towns_end),
    # (neq, ":other_center", "$g_encountered_party"),
    (assign, ":other_town_production", 0),
    (try_for_range, ":item_kind_id", trade_goods_begin, trade_goods_end),
        (call_script, "script_center_get_production", ":other_center", ":item_kind_id"),
        (val_add, ":other_town_production", reg0),
    (try_end),
    (party_set_slot, ":other_center", slot_party_temp_slot_1, ":other_town_production"),
  (try_end),
  (call_script, "script_dplmc_mayor_wealth_comparison", "$current_town", 1),

  ], "{s0}", "mayor_wealth_comparison_3",[
  ]],

  [anyone,"mayor_wealth_comparison_3",[
  (try_for_range, ":village", villages_begin, villages_end),
    (assign, ":village_good_production", 0),
    (try_for_range, ":item_kind_id", trade_goods_begin, trade_goods_end),
        (call_script, "script_center_get_production", ":village", ":item_kind_id"),
        (val_add, ":village_good_production", reg0),
    (try_end),
    (party_get_slot, ":market_town", ":village", slot_village_market_town),
    (party_get_slot, ":market_center_production", ":market_town", slot_party_temp_slot_1),
    (val_add, ":market_center_production", ":village_good_production"),
    (party_set_slot, ":market_town", slot_party_temp_slot_1, ":market_center_production"),
  (try_end),
  (call_script, "script_dplmc_mayor_wealth_comparison", "$current_town", 2),
  ], "{s0}", "mayor_wealth_comparison_4",[
  ]],


  [anyone,"mayor_wealth_comparison_4",[
  (try_for_range, ":log_entry_iterator", 0, "$num_log_entries"),
	(store_sub, ":log_entry_no", "$num_log_entries", ":log_entry_iterator"),
    (troop_slot_eq, "trp_log_array_entry_type", ":log_entry_no", logent_party_traded),

    (troop_get_slot, ":event_time",            "trp_log_array_entry_time",              ":log_entry_no"),
	(store_current_hours, ":cur_hour"),
	(store_sub, ":hours_ago", ":cur_hour", ":event_time"),
	(lt, ":hours_ago", 1344),

    (troop_get_slot, ":origin",    "trp_log_array_center_object",          ":log_entry_no"),
	(is_between, ":origin", towns_begin, towns_end), #exclude village trading here

    (troop_get_slot, ":destination",    "trp_log_array_troop_object",          ":log_entry_no"),
	(party_get_slot, ":num_visits", ":destination", slot_party_temp_slot_1),
	(val_add, ":num_visits", 1),
	(party_set_slot, ":destination", slot_party_temp_slot_1, ":num_visits"),
  (try_end),
  (call_script, "script_dplmc_mayor_wealth_comparison", "$current_town", 3),
  ], "{s0}", "mayor_wealth_comparison_5",[
  ]],


  [anyone,"mayor_wealth_comparison_5",[

  (try_for_range, ":log_entry_iterator", 0, "$num_log_entries"),
    (store_sub, ":log_entry_no", "$num_log_entries", ":log_entry_iterator"),
    (troop_slot_eq, "trp_log_array_entry_type", ":log_entry_no", logent_traveller_attacked),

    (troop_get_slot, ":event_time",            "trp_log_array_entry_time",              ":log_entry_no"),
    (store_current_hours, ":cur_hour"),
    (store_sub, ":hours_ago", ":cur_hour", ":event_time"),
    (lt, ":hours_ago", 1344),

    (troop_get_slot, ":origin",    "trp_log_array_center_object",          ":log_entry_no"),
    (troop_get_slot, ":destination",    "trp_log_array_troop_object",          ":log_entry_no"),

	(try_begin),
		(is_between, ":destination", towns_begin, towns_end),
		(party_get_slot, ":num_attacks", ":destination", slot_party_temp_slot_1),
		(val_add, ":num_attacks", 1),
		(party_set_slot, ":destination", slot_party_temp_slot_1, ":num_attacks"),
	(try_end),

	(try_begin),
		(is_between, ":origin", towns_begin, towns_end),
		(party_get_slot, ":num_attacks", ":origin", slot_party_temp_slot_1),
		(val_add, ":num_attacks", 1),
		(party_set_slot, ":origin", slot_party_temp_slot_1, ":num_attacks"),
	(try_end),
  (try_end),
  (call_script, "script_dplmc_mayor_wealth_comparison", "$current_town", 4),
  ], "{s0}", "mayor_pretalk",[
  ]],

##diplomacy start+
#Imported Floris dialog options letting you rebel directly from your liege by
#leaving his kingdom and refusing to hand over your fiefs.
## Floris - Rebellion Option
  [anyone|plyr ,"lord_ask_leave_service_verify_again", [
	##altered the condition block
	(neg|troop_slot_eq, "trp_player", slot_troop_spouse, "$g_talk_troop"),
	(neg|troop_slot_eq, "$g_talk_troop", slot_troop_spouse, "trp_player"),
	(neg|faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "trp_player"),
	(call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", "$g_talk_troop_faction"),
	(lt, reg0, DPLMC_FACTION_STANDING_LEADER_SPOUSE),

	(assign, ":has_walled_center", walled_centers_end),
	(try_for_range, ":center_no", walled_centers_begin, ":has_walled_center"),
		(party_slot_eq, ":center_no", slot_town_lord, "trp_player"),
		(assign, ":has_walled_center", ":center_no"),
	(try_end),
	(is_between, ":has_walled_center", walled_centers_begin, walled_centers_end),

  ], "I have no intention of losing my lands, {s65}.", "dplmc_lord_ask_leave_service_rebellion",[]],

   [anyone,"dplmc_lord_ask_leave_service_rebellion", [
	(ge, "$g_talk_troop_relation", 15)],
	"Hrmph. Now do not be hasty with such words, {playername}. I deserve more respect than that, I think. Those lands belong to me and my heirs as you swore. If you continue down this route you will do me great offense, and there is no need for this to come to blows.",
		"dplmc_lord_ask_leave_service_rebellion_verify",[]],

  [anyone,"dplmc_lord_ask_leave_service_rebellion", [
  ],
  "You've grown rash, {playername}. Your oath binds you to me and you govern what you do at my will. Think about what it is you are saying, as it is far from wise and will end poorly for you. You'd do well to reconsider.",
	"dplmc_lord_ask_leave_service_rebellion_verify",[]],

   [anyone|plyr ,"dplmc_lord_ask_leave_service_rebellion_verify", [], "You are right, {s65}. The lands are yours, but still I must go.", "lord_ask_leave_service_3",[]],

   [anyone|plyr ,"dplmc_lord_ask_leave_service_rebellion_verify", [], "My blood and sweat earned those lands, not yours. They are mine.", "dplmc_lord_ask_leave_rebellion_confirm",[
   ##diplomacy start+
	#The relation change with the liege is exacerbated by the number of fiefs
	#lost.  The "-10" figure is the previous relation hit for defecting; this now
	#scales up with the number of centers taken.
	(assign, ":relation_change", 0),
	(try_for_range, ":center_no", walled_centers_begin, walled_centers_end),
		(party_slot_eq, ":center_no", slot_town_lord, "trp_player"),
		(val_add, ":relation_change", -10),
	(try_end),

	#Defecting from a supposedly-beloved lord causes a greater hit to honor than if
	#the defection isn't so out-of-the-blue.
	(store_add, ":honor_change", "$g_talk_troop_relation", 5),
	(val_div, ":honor_change", -10),
	(val_min, ":honor_change", 0),
	#Defecting during a time of war is more dishonorable than defecting during a time
	#of peace.
	(try_begin),
		(assign, ":is_war", 0),
		(try_for_range, ":faction_no", npc_kingdoms_begin, npc_kingdoms_end),
			(faction_slot_eq, ":faction_no", slot_faction_state, sfs_active),
			(neq, ":faction_no", "$g_talk_troop_faction"),
			(store_relation, ":reln", ":faction_no", "$g_talk_troop_faction"),
			(lt, ":reln", 0),
			(assign, ":is_war", 1),
		(try_end),
		(gt, ":is_war", 0),
		(val_add, ":honor_change", -5),
	(try_end),
	#The baseline change is -10.  The greatest possible is -25 (100 relation with the king, and at war).
	(val_sub, ":honor_change", 10),

	#If the player was insufficiently recognized for his service, the honor loss
	#is lower.  (This will further modify the reaction of some lords.)
	(call_script, "script_dplmc_center_point_calc", "$g_talk_troop_faction", "trp_player", "$g_talk_troop", 3),
	(assign, ":avg_renown_per_center_point", reg0),
	(assign, ":player_center_points", reg1),
	(assign, ":king_center_points", reg2),
	(troop_get_slot, ":player_renown", "trp_player", slot_troop_renown),
	(troop_get_slot, ":king_renown", "$g_talk_troop", slot_troop_renown),
	(assign, ":fief_unfairness", 0),#0 = no justification on basis of unfairness, 1 = justified by unfairness

	(try_begin),
		(eq, ":player_center_points", 0),
		#Unfair if the player has no fiefs and at least 3/4 of average renown per center point
		(try_begin),
			(store_mul, reg0, ":avg_renown_per_center_point", 3),
			(val_div, reg0, 4),
			(ge, ":player_renown", reg0),
			(assign, ":fief_unfairness", 1),
			(val_add, ":honor_change", 5),
		(try_end),
	(else_try),
		#Unfair if the player's (renown / center points) is more than 5/4 the average
        (gt, ":player_center_points", 0),
		(store_div, ":player_renown_per_point", ":player_renown", ":player_center_points"),
		(store_mul, reg0, ":avg_renown_per_center_point", 5),
		(val_div, reg0, 4),
		#player is insufficiently rewarded for his renown
		(ge, ":player_renown_per_point", reg0),
		(assign, ":fief_unfairness", 1),
		(val_add, ":honor_change", 5),
   	(else_try),
        #Unfair if the player's renown per center point is more than 5/4 that of the king,
        #and not less than 3/4 of the faction average
        (store_mul, reg0, ":avg_renown_per_center_point", 3),
        (val_div, reg0, 4),
        (ge, ":player_renown_per_point", reg0),

        (store_mul, reg0, ":king_renown", 5),
        (val_div, reg0, 4),
        (gt, ":king_center_points", 0),
        (val_div, reg0, ":king_center_points"),
		#player is insufficiently rewarded for his renown
		(ge, ":player_renown_per_point", reg0),
		(assign, ":fief_unfairness", 1),
	(try_end),

    (call_script, "script_change_player_relation_with_troop", "$g_talk_troop", ":relation_change"),
	(val_min, ":honor_change", -10),#In any event there will be some level of honor loss.
	(call_script, "script_change_player_honor", ":honor_change"),

	#If the player's departure is not justified by some other cause (such as
	#not being granted the rights to a fief that he had conquered, which Martial lords
	#would be sympathetic to at least in principle), he takes a general relations hit.
	(try_for_range, ":troop_no", heroes_begin, heroes_end),
		(troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_hero),
		(neq, ":troop_no", "$g_talk_troop"),
		(neq, ":troop_no", active_npcs_including_player_begin),
		(store_troop_faction, ":faction_no", ":troop_no"),
		(eq, ":faction_no", "$g_talk_troop_faction"),

		#Calculate the relationship penalty, if any
		(assign, ":relation_penalty", 0),

		#Relevant factors are:
		#The troop's relation with the player, the troop's relation with his liege,
		#the troop's primary reputation, and whether the troop has the tmt_honest
		#morality subtype (which despite its name is primarily related to keeping
		#bargains), and whether this defection is causing the troop to lose any fiefs.
		(call_script, "script_troop_get_player_relation", ":troop_no"),
		(assign, ":troop_player_relation", reg0),

		(call_script, "script_troop_get_relation_with_troop", ":troop_no", "$g_talk_troop"),
		(assign, ":troop_king_relation", reg0),

		(troop_get_slot, ":reputation", ":troop_no", slot_lord_reputation_type),
		(call_script, "script_dplmc_get_troop_morality_value", ":troop_no", tmt_honest),
		(assign, ":honest_val", reg0),

		(assign, ":fiefs_lost", 0),
		(try_for_range, ":village_no", villages_begin, villages_end),
			(party_slot_eq, ":village_no", slot_town_lord, ":troop_no"),
			(party_get_slot, ":bound_center", ":village_no", slot_village_bound_center),
			(ge, ":bound_center", 1),
			(party_slot_eq, ":bound_center", slot_town_lord, "trp_player"),
			(val_add, ":fiefs_lost", 1),
		(try_end),

		#Modify for relationship with liege
		(try_begin),
			(this_or_next|ge, ":honest_val", 1),
			(this_or_next|eq, ":reputation", lrep_upstanding),
				(eq, ":reputation", lrep_moralist),
			(ge, ":troop_king_relation", 5),
			(val_sub, ":relation_penalty", 1),
		(else_try),
			(this_or_next|lt, ":honest_val", 0),
			(this_or_next|eq, ":reputation", lrep_debauched),
			(this_or_next|eq, ":reputation", lrep_roguish),
				(eq, ":reputation", lrep_ambitious),
			(ge, ":troop_king_relation", 25),
			(val_sub, ":relation_penalty", 1),
		(else_try),
			(ge, ":troop_king_relation", 15),
			(val_sub, ":relation_penalty", 1),
		(try_end),

		#Those who like the king more than the player will take his side,
		#if they met the above relation threshold.
		(try_begin),
			(lt, ":relation_penalty", 0),
			(ge, ":troop_king_relation", ":troop_player_relation"),
			(val_sub, ":relation_penalty", 1),
		(try_end),

		#Lords who would consider the rebellion more justified if the player was "under-fiefed"
		#(some will only care if they liked the player; others have a more general sense of fairness).
		(try_begin),
			(ge, ":fief_unfairness", 1),
			(try_begin),
				(ge, ":honest_val", 0),
				(neq, ":reputation", lrep_debauched),
				(neq, ":reputation", lrep_selfrighteous),
				(neq, ":reputation", lrep_quarrelsome),
				(neq, ":reputation", lrep_cunning),
				(neq, ":reputation", lrep_ambitious),
				(ge, ":troop_player_relation", 0),
				(val_add, ":relation_penalty", ":fief_unfairness"),
			(else_try),
				(ge, ":troop_player_relation", 20),
				(val_add, ":relation_penalty", ":fief_unfairness"),
			(try_end),
		(try_end),

		#Subtract a penalty for lost fiefs
		(try_begin),
			(ge, ":fiefs_lost", 1),
			#apply -2 times fiefs lost
			(this_or_next|eq, ":reputation", lrep_custodian),
			(this_or_next|eq, ":reputation", lrep_ambitious),
            (this_or_next|eq, ":reputation", lrep_quarrelsome),
            (this_or_next|eq, ":reputation", lrep_selfrighteous),
            (this_or_next|eq, ":reputation", lrep_cunning),
            (this_or_next|eq, ":reputation", lrep_debauched),
				(eq, ":reputation", lrep_martial),
			(val_sub, ":relation_penalty", ":fiefs_lost"),
			(val_sub, ":relation_penalty", ":fiefs_lost"),
		(else_try),
			(ge, ":fiefs_lost", 1),
			#apply -1 times fiefs lost
			(neg|ge, ":reputation", lrep_conventional),
			(neq, ":reputation", lrep_goodnatured),
			(val_sub, ":relation_penalty", ":fiefs_lost"),
		(try_end),

		#Apply a non-zero (and non-positive) penalty
		(lt, ":relation_penalty", 0),
		(call_script, "script_change_player_relation_with_troop", ":troop_no", ":relation_penalty"),
	(try_end),
	##diplomacy end+
	]],

   [anyone, "dplmc_lord_ask_leave_rebellion_confirm", [
	(ge, "$g_talk_troop_relation", 25)],
	"You disappoint me greatly, {playername}. You may have once had my confidence, but this is beyond reason. Do not doubt that I will defend my house's honor from your insult. This is war between us.", "dplmc_lord_ask_leave_rebellion_confirm_final", [
	(call_script, "script_player_leave_faction", 0), #"1" would mean give back fiefs
    (call_script, "script_activate_player_faction", "trp_player"),]],

   [anyone, "dplmc_lord_ask_leave_rebellion_confirm", [ #SB : spelling
   ], "I should have seen your treachery coming. I must be growing soft to have been fool enough to miss your schemes. No matter. Your time will yet come, {playername}. Justice is swiftest on a field of battle.", "dplmc_lord_ask_leave_rebellion_confirm_final", [
    (call_script, "script_player_leave_faction", 0), #"1" would mean give back fiefs
    (call_script, "script_activate_player_faction", "trp_player")]],

   [anyone|plyr, "dplmc_lord_ask_leave_rebellion_confirm_final", [
   ], "I hold you in no ill-esteem, {s65}. I do only what is just.", "dplmc_lord_ask_leave_rebellion_end", []],
   [anyone|plyr, "dplmc_lord_ask_leave_rebellion_confirm_final", [
   ], "We all do what we must. Good bye.", "dplmc_lord_ask_leave_rebellion_end", []],
   [anyone|plyr, "dplmc_lord_ask_leave_rebellion_confirm_final", [
   ], "Then I await the day we meet in battle.", "dplmc_lord_ask_leave_rebellion_end", []],

   [anyone, "dplmc_lord_ask_leave_rebellion_end", [
	(ge, "$g_talk_troop_relation", 25),
	(str_store_faction_name, s1, "$g_talk_troop_faction")
	],
	"This is a dark day, {playername}. It will be marked and rued throughout the {s1}. Your treachery will not be soon forgotten. It would be best if you left quickly.", "close_window", [
	(assign, "$g_leave_encounter", 1)]],

   [anyone, "dplmc_lord_ask_leave_rebellion_end", [
   ], "You are not the same {man/woman} I took as my vassal, {playername}. Be gone from my sight before I end this now.", "close_window", [(assign, "$g_leave_encounter", 1)]],
## Floris - Rebellion Option
##diplomacy end+

  [anyone|plyr,"free", [[in_meta_mission]], " Good-bye.", "close_window",[]],
  [anyone|plyr,"free", [[neg|in_meta_mission]], " [Leave]", "close_window",[]],
#  [anyone,"free", [], "NO MATCHING SENTENCE!", "close_window",[]],
]

