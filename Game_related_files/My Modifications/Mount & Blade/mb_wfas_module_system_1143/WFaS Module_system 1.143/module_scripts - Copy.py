# -*- coding: cp1254 -*-
from header_common import *
from header_operations import *
from module_constants import *
from header_parties import *
from header_skills import *
from header_mission_templates import *
from header_items import *
from header_triggers import *
from header_terrain_types import *
from header_music import *
from header_presentations import *
from ID_animations import *


####################################################################################################################
# scripts is a list of script records.
# Each script record contns the following two fields:
# 1) Script id: The prefix "script_" will be inserted when referencing scripts.
# 2) Operation block: This must be a valid operation block. See header_operations.py for reference.
####################################################################################################################

scripts = [

  #script_game_start:
  # This script is called when a new game is started
  # INPUT: none
  ("game_start",
   [
      (faction_set_slot, "fac_player_supporters_faction", slot_faction_state, sfs_inactive),
      (assign, "$g_player_luck", 200),
      (troop_set_slot, "trp_player", slot_troop_occupation, slto_kingdom_hero),
      (troop_set_slot, "trp_player", slot_troop_prisoner_of_party, -1),
      (try_for_range, ":cur_troop", kingdom_heroes_begin, kingdom_heroes_end),
        (troop_set_slot, ":cur_troop", slot_troop_prisoner_of_party, -1),
        (troop_set_slot, ":cur_troop", slot_troop_custom_banner_flag_type, -1),
        (troop_set_slot, ":cur_troop", slot_troop_custom_banner_map_flag_type, -1),
      (try_end),
      (troop_set_slot, "trp_player", slot_troop_custom_banner_flag_type, -1),
      (troop_set_slot, "trp_player", slot_troop_custom_banner_map_flag_type, -1),
      (store_random_in_range, "$g_election_date", 0, 45), #setting a random election date
      #Assigning global constant
      (call_script, "script_store_average_center_value_per_faction"),

      (troop_set_slot, "trp_player", slot_troop_custom_banner_bg_color_1, 0xFFFFFFFF),
      (troop_set_slot, "trp_player", slot_troop_custom_banner_bg_color_2, 0xFFFFFFFF),
      (troop_set_slot, "trp_player", slot_troop_custom_banner_charge_color_1, 0xFFFFFFFF),
      (troop_set_slot, "trp_player", slot_troop_custom_banner_charge_color_2, 0xFFFFFFFF),
      (troop_set_slot, "trp_player", slot_troop_custom_banner_charge_color_3, 0xFFFFFFFF),
      (troop_set_slot, "trp_player", slot_troop_custom_banner_charge_color_4, 0xFFFFFFFF),

      #Setting background colors for banners
      (troop_set_slot, "trp_banner_background_color_array", 0, 0xFF8f4531),
      (troop_set_slot, "trp_banner_background_color_array", 1, 0xFF315458),
      (troop_set_slot, "trp_banner_background_color_array", 2, 0xFF373736),
      (troop_set_slot, "trp_banner_background_color_array", 3, 0xFFa48b28),
      (troop_set_slot, "trp_banner_background_color_array", 4, 0xFF497735),
      (troop_set_slot, "trp_banner_background_color_array", 5, 0xFF82362d),
      (troop_set_slot, "trp_banner_background_color_array", 6, 0xFF793329),
      (troop_set_slot, "trp_banner_background_color_array", 7, 0xFF262521),
      (troop_set_slot, "trp_banner_background_color_array", 8, 0xFFd9dad1),
      (troop_set_slot, "trp_banner_background_color_array", 9, 0xFF524563),
      (troop_set_slot, "trp_banner_background_color_array", 10, 0xFF91312c),
      (troop_set_slot, "trp_banner_background_color_array", 11, 0xFFafa231),
      (troop_set_slot, "trp_banner_background_color_array", 12, 0xFF706d3c),
      (troop_set_slot, "trp_banner_background_color_array", 13, 0xFFd6d3ce),
      (troop_set_slot, "trp_banner_background_color_array", 14, 0xFF912929),
      (troop_set_slot, "trp_banner_background_color_array", 15, 0xFF394584),
      (troop_set_slot, "trp_banner_background_color_array", 16, 0xFF42662e),
      (troop_set_slot, "trp_banner_background_color_array", 17, 0xFFdfded6),
      (troop_set_slot, "trp_banner_background_color_array", 18, 0xFF292724),
      (troop_set_slot, "trp_banner_background_color_array", 19, 0xFF58611b),
      (troop_set_slot, "trp_banner_background_color_array", 20, 0xFF313a67),
      (troop_set_slot, "trp_banner_background_color_array", 21, 0xFFb5a231),
      (troop_set_slot, "trp_banner_background_color_array", 22, 0xFFbdb629),
      (troop_set_slot, "trp_banner_background_color_array", 23, 0xFF6e7929),
      (troop_set_slot, "trp_banner_background_color_array", 24, 0xFFd6d3ce),
      (troop_set_slot, "trp_banner_background_color_array", 25, 0xFF94a642),
      (troop_set_slot, "trp_banner_background_color_array", 26, 0xFF944131),
      (troop_set_slot, "trp_banner_background_color_array", 27, 0xFF893b34),
      (troop_set_slot, "trp_banner_background_color_array", 28, 0xFF425510),
      (troop_set_slot, "trp_banner_background_color_array", 29, 0xFF94452e),
      (troop_set_slot, "trp_banner_background_color_array", 30, 0xFF475a94),
      (troop_set_slot, "trp_banner_background_color_array", 31, 0xFFd1b231),
      (troop_set_slot, "trp_banner_background_color_array", 32, 0xFFe1e2df),
      (troop_set_slot, "trp_banner_background_color_array", 33, 0xFF4a4942),
      (troop_set_slot, "trp_banner_background_color_array", 34, 0xFFc6b74d),
      (troop_set_slot, "trp_banner_background_color_array", 35, 0xFF7b5184),
      (troop_set_slot, "trp_banner_background_color_array", 36, 0xFF212421),
      (troop_set_slot, "trp_banner_background_color_array", 37, 0xFF3c5d9a),
      (troop_set_slot, "trp_banner_background_color_array", 38, 0xFF4d7136),
      (troop_set_slot, "trp_banner_background_color_array", 39, 0xFFdfdfd6),
      (troop_set_slot, "trp_banner_background_color_array", 40, 0xFF527539),
      (troop_set_slot, "trp_banner_background_color_array", 41, 0xFF9c3c39),
      (troop_set_slot, "trp_banner_background_color_array", 42, 0xFF42518c),
      (troop_set_slot, "trp_banner_background_color_array", 43, 0xFFa46a2c),
      (troop_set_slot, "trp_banner_background_color_array", 44, 0xFF843829),
      (troop_set_slot, "trp_banner_background_color_array", 45, 0xFF2c6189),
      (troop_set_slot, "trp_banner_background_color_array", 46, 0xFF556421),
      (troop_set_slot, "trp_banner_background_color_array", 47, 0xFF9d621e),
      (troop_set_slot, "trp_banner_background_color_array", 48, 0xFFdeded6),
      (troop_set_slot, "trp_banner_background_color_array", 49, 0xFF6e4891),
      (troop_set_slot, "trp_banner_background_color_array", 50, 0xFF865a29),
      (troop_set_slot, "trp_banner_background_color_array", 51, 0xFFdedfd9),
      (troop_set_slot, "trp_banner_background_color_array", 52, 0xFF524273),
      (troop_set_slot, "trp_banner_background_color_array", 53, 0xFF8c3821),
      (troop_set_slot, "trp_banner_background_color_array", 54, 0xFF948403),
      (troop_set_slot, "trp_banner_background_color_array", 55, 0xFF313031),
      (troop_set_slot, "trp_banner_background_color_array", 56, 0xFF47620d),
      (troop_set_slot, "trp_banner_background_color_array", 57, 0xFFdfded6),
      (troop_set_slot, "trp_banner_background_color_array", 58, 0xFFd6d7d6),
      (troop_set_slot, "trp_banner_background_color_array", 59, 0xFF2e2f2c),
      (troop_set_slot, "trp_banner_background_color_array", 60, 0xFF604283),
      (troop_set_slot, "trp_banner_background_color_array", 61, 0xFF395584),
      (troop_set_slot, "trp_banner_background_color_array", 62, 0xFF313031),
      (troop_set_slot, "trp_banner_background_color_array", 63, 0xFF7e3f2e),
      (troop_set_slot, "trp_banner_background_color_array", 64, 0xFF343434),
      (troop_set_slot, "trp_banner_background_color_array", 65, 0xFF3c496b),
      (troop_set_slot, "trp_banner_background_color_array", 66, 0xFFd9d8d1),
      (troop_set_slot, "trp_banner_background_color_array", 67, 0xFF99823c),
      (troop_set_slot, "trp_banner_background_color_array", 68, 0xFF9f822e),
      (troop_set_slot, "trp_banner_background_color_array", 69, 0xFF393839),
      (troop_set_slot, "trp_banner_background_color_array", 70, 0xFFa54931),
      (troop_set_slot, "trp_banner_background_color_array", 71, 0xFFdfdcd6),
      (troop_set_slot, "trp_banner_background_color_array", 72, 0xFF9f4a36),
      (troop_set_slot, "trp_banner_background_color_array", 73, 0xFF8c7521),
      (troop_set_slot, "trp_banner_background_color_array", 74, 0xFF9f4631),
      (troop_set_slot, "trp_banner_background_color_array", 75, 0xFF793324),
      (troop_set_slot, "trp_banner_background_color_array", 76, 0xFF395076),
      (troop_set_slot, "trp_banner_background_color_array", 77, 0xFF2c2b2c),
      (troop_set_slot, "trp_banner_background_color_array", 78, 0xFF657121),
      (troop_set_slot, "trp_banner_background_color_array", 79, 0xFF7e3121),
      (troop_set_slot, "trp_banner_background_color_array", 80, 0xFF76512e),
      (troop_set_slot, "trp_banner_background_color_array", 81, 0xFFe7e3de),
      (troop_set_slot, "trp_banner_background_color_array", 82, 0xFF947921),
      (troop_set_slot, "trp_banner_background_color_array", 83, 0xFF4d7b7c),
      (troop_set_slot, "trp_banner_background_color_array", 84, 0xFF343331),
      (troop_set_slot, "trp_banner_background_color_array", 85, 0xFFa74d36),
      (troop_set_slot, "trp_banner_background_color_array", 86, 0xFFe7e3de),
      (troop_set_slot, "trp_banner_background_color_array", 87, 0xFFd6d8ce),
      (troop_set_slot, "trp_banner_background_color_array", 88, 0xFF3e4d67),
      (troop_set_slot, "trp_banner_background_color_array", 89, 0xFF913331),
      (troop_set_slot, "trp_banner_background_color_array", 90, 0xFF4d6994),
      (troop_set_slot, "trp_banner_background_color_array", 91, 0xFF4a6118),
      (troop_set_slot, "trp_banner_background_color_array", 92, 0xFFd9d8d3),
      (troop_set_slot, "trp_banner_background_color_array", 93, 0xFF394479),
      (troop_set_slot, "trp_banner_background_color_array", 94, 0xFF343331),
      (troop_set_slot, "trp_banner_background_color_array", 95, 0xFF3f4d5d),
      (troop_set_slot, "trp_banner_background_color_array", 96, 0xFF4a6489),
      (troop_set_slot, "trp_banner_background_color_array", 97, 0xFF313031),
      (troop_set_slot, "trp_banner_background_color_array", 98, 0xFFd6d7ce),
      (troop_set_slot, "trp_banner_background_color_array", 99, 0xFFc69e00),
      (troop_set_slot, "trp_banner_background_color_array", 100, 0xFF638e52),
      (troop_set_slot, "trp_banner_background_color_array", 101, 0xFFdcdbd3),
      (troop_set_slot, "trp_banner_background_color_array", 102, 0xFFdbdcd3),
      (troop_set_slot, "trp_banner_background_color_array", 103, 0xFF843831),
      (troop_set_slot, "trp_banner_background_color_array", 104, 0xFFcecfc6),
      (troop_set_slot, "trp_banner_background_color_array", 105, 0xFF8f4431),
      (troop_set_slot, "trp_banner_background_color_array", 106, 0xFF602926),
      (troop_set_slot, "trp_banner_background_color_array", 107, 0xFFd3d4cb),
      (troop_set_slot, "trp_banner_background_color_array", 108, 0xFFdcdbd3),
      (troop_set_slot, "trp_banner_background_color_array", 109, 0xFF556024),
      (troop_set_slot, "trp_banner_background_color_array", 110, 0xFF602d2c),
      (troop_set_slot, "trp_banner_background_color_array", 111, 0xFF315184),
      (troop_set_slot, "trp_banner_background_color_array", 112, 0xFF313031),
      (troop_set_slot, "trp_banner_background_color_array", 113, 0xFFe7e7e7),
      (troop_set_slot, "trp_banner_background_color_array", 114, 0xFF526d47),
      (troop_set_slot, "trp_banner_background_color_array", 115, 0xFFdedbd6),
      (troop_set_slot, "trp_banner_background_color_array", 116, 0xFFb2a631),
      (troop_set_slot, "trp_banner_background_color_array", 117, 0xFF76713f),
      (troop_set_slot, "trp_banner_background_color_array", 118, 0xFFdedbd6),
      (troop_set_slot, "trp_banner_background_color_array", 119, 0xFFe9eae7),
      (troop_set_slot, "trp_banner_background_color_array", 120, 0xFF6b5131),
      (troop_set_slot, "trp_banner_background_color_array", 121, 0xFF31557b),
      (troop_set_slot, "trp_banner_background_color_array", 122, 0xFF703324),
      (troop_set_slot, "trp_banner_background_color_array", 123, 0xFFe7e3de),
      (troop_set_slot, "trp_banner_background_color_array", 124, 0xFFd6d7ce),
      (troop_set_slot, "trp_banner_background_color_array", 125, 0xFF3f6e39),

      #Default banners
      (troop_set_slot, "trp_banner_background_color_array", 126, 0xFF212221),
      (troop_set_slot, "trp_banner_background_color_array", 127, 0xFF212221),
      (troop_set_slot, "trp_banner_background_color_array", 128, 0xFF2E3B10),
      (troop_set_slot, "trp_banner_background_color_array", 129, 0xFF425D7B),
      (troop_set_slot, "trp_banner_background_color_array", 130, 0xFF394608),

      (party_relocate_near_party, "p_main_party", "p_village_66", 5),
	  
      (str_store_troop_name, s5, "trp_player"),
      (party_set_name, "p_main_party", s5),
      (call_script, "script_update_party_creation_random_limits"),
# Reseting player party icon
      (assign, "$g_player_party_icon", -1),
# Setting food bonuses
      (item_set_slot, "itm_smoked_fish", slot_item_food_bonus, 5),
      (item_set_slot, "itm_dried_meat", slot_item_food_bonus, 5),
      (item_set_slot, "itm_cattle_meat", slot_item_food_bonus, 7),
      (item_set_slot, "itm_pork", slot_item_food_bonus, 6),
      (item_set_slot, "itm_bread", slot_item_food_bonus, 4),
      (item_set_slot, "itm_apples", slot_item_food_bonus, 5),
      (item_set_slot, "itm_cheese", slot_item_food_bonus, 5),
      (item_set_slot, "itm_chicken", slot_item_food_bonus, 6),
      (item_set_slot, "itm_honey", slot_item_food_bonus, 10),
      (item_set_slot, "itm_cabbages", slot_item_food_bonus, 4),
      (item_set_slot, "itm_sausages", slot_item_food_bonus, 5),
      (item_set_slot, "itm_butter", slot_item_food_bonus, 8),
	  
      (item_set_slot, "itm_wine", slot_item_food_bonus, 5),
      (item_set_slot, "itm_ale", slot_item_food_bonus, 4),
		

#NPC companion changes begin
      (call_script, "script_initialize_npcs"),
      (assign, "$disable_npc_complaints", 0),
      #NPC companion changes end
      


# Setting book intelligence requirements
      (item_set_slot, "itm_book_tactics", slot_item_intelligence_requirement, 9),
      (item_set_slot, "itm_book_persuasion", slot_item_intelligence_requirement, 8),
      (item_set_slot, "itm_book_leadership", slot_item_intelligence_requirement, 7),
      (item_set_slot, "itm_book_intelligence", slot_item_intelligence_requirement, 10),
      (item_set_slot, "itm_book_trade", slot_item_intelligence_requirement, 11),
      (item_set_slot, "itm_book_weapon_mastery", slot_item_intelligence_requirement, 9),
      (item_set_slot, "itm_book_engineering", slot_item_intelligence_requirement, 12),

      (item_set_slot, "itm_book_wound_treatment_reference", slot_item_intelligence_requirement, 10),
      (item_set_slot, "itm_book_training_reference", slot_item_intelligence_requirement, 10),
      (item_set_slot, "itm_book_surgery_reference", slot_item_intelligence_requirement, 10),
      
      # Setting the random town sequence:
      (store_sub, ":num_towns", towns_end, towns_begin),
      (assign, ":num_iterations", ":num_towns"),
      (try_for_range, ":cur_town_no", 0, ":num_towns"),
        (troop_set_slot, "trp_random_town_sequence", ":cur_town_no", -1),
      (try_end),
      (assign, ":cur_town_no", 0),
      (try_for_range, ":unused", 0, ":num_iterations"),
        (store_random_in_range, ":random_no", 0, ":num_towns"),
        (assign, ":is_unique", 1),
        (try_for_range, ":cur_town_no_2", 0, ":num_towns"),
          (troop_slot_eq, "trp_random_town_sequence", ":cur_town_no_2", ":random_no"),
          (assign, ":is_unique", 0),
        (try_end),
        (try_begin),
          (eq, ":is_unique", 1),
          (troop_set_slot, "trp_random_town_sequence", ":cur_town_no", ":random_no"),
          (val_add, ":cur_town_no", 1),
        (else_try),
          (val_add, ":num_iterations", 1),
        (try_end),
      (try_end),
	  # Cultures:
      (faction_set_slot, "fac_culture_1",  slot_faction_tier_1_troop, "trp_swadian_recruit"),
      (faction_set_slot, "fac_culture_1",  slot_faction_tier_2_troop, "trp_swadian_crossbowman"),
      (faction_set_slot, "fac_culture_1",  slot_faction_tier_3_troop, "trp_swadian_sharpshooter"),
      (faction_set_slot, "fac_culture_1",  slot_faction_tier_4_troop, "trp_swadian_man_at_arms"),
      (faction_set_slot, "fac_culture_1",  slot_faction_tier_5_troop, "trp_swadian_knight"),


      (faction_set_slot, "fac_culture_2", slot_faction_tier_1_troop, "trp_vaegir_recruit"),
      (faction_set_slot, "fac_culture_2", slot_faction_tier_2_troop, "trp_vaegir_archer"),
      (faction_set_slot, "fac_culture_2", slot_faction_tier_3_troop, "trp_vaegir_horseman"),
      (faction_set_slot, "fac_culture_2", slot_faction_tier_4_troop, "trp_vaegir_knight"),
      (faction_set_slot, "fac_culture_2", slot_faction_tier_5_troop, "trp_vaegir_guard"),

      (faction_set_slot, "fac_culture_3", slot_faction_tier_1_troop, "trp_khergit_tribesman"),
      (faction_set_slot, "fac_culture_3", slot_faction_tier_2_troop, "trp_khergit_horseman"),
      (faction_set_slot, "fac_culture_3", slot_faction_tier_3_troop, "trp_khergit_horse_archer"),
      (faction_set_slot, "fac_culture_3", slot_faction_tier_4_troop, "trp_khergit_veteran_horse_archer"),
      (faction_set_slot, "fac_culture_3", slot_faction_tier_5_troop, "trp_asak_bey"),

      (faction_set_slot, "fac_culture_4", slot_faction_tier_1_troop, "trp_nord_recruit"),
      (faction_set_slot, "fac_culture_4", slot_faction_tier_2_troop, "trp_nord_archer"),
      (faction_set_slot, "fac_culture_4", slot_faction_tier_3_troop, "trp_nord_warrior"),
      (faction_set_slot, "fac_culture_4", slot_faction_tier_4_troop, "trp_nord_champion"),
      (faction_set_slot, "fac_culture_4", slot_faction_tier_5_troop, "trp_nord_veteran"),

      (faction_set_slot, "fac_culture_5", slot_faction_tier_1_troop, "trp_rhodok_tribesman"),
      (faction_set_slot, "fac_culture_5", slot_faction_tier_2_troop, "trp_rhodok_sergeant"),
      (faction_set_slot, "fac_culture_5", slot_faction_tier_3_troop, "trp_rhodok_veteran_spearman"),
      (faction_set_slot, "fac_culture_5", slot_faction_tier_4_troop, "trp_rhodok_trained_crossbowman"),
      (faction_set_slot, "fac_culture_5", slot_faction_tier_5_troop, "trp_rhodok_crossbowman"),
      
# Factions:
      (faction_set_slot, "fac_kingdom_1",  slot_faction_culture, "fac_culture_1"),
      (faction_set_slot, "fac_kingdom_1",  slot_faction_leader, "trp_kingdom_1_lord"),
	  (troop_set_slot, "trp_kingdom_1_lord", slot_troop_renown, 1200),
	  
      (faction_set_slot, "fac_kingdom_2",  slot_faction_culture, "fac_culture_2"),
      (faction_set_slot, "fac_kingdom_2",  slot_faction_leader, "trp_kingdom_2_lord"),
	  (troop_set_slot, "trp_kingdom_2_lord", slot_troop_renown, 1200),

      (faction_set_slot, "fac_kingdom_3",  slot_faction_culture, "fac_culture_3"),
      (faction_set_slot, "fac_kingdom_3",  slot_faction_leader, "trp_kingdom_3_lord"),
	  (troop_set_slot, "trp_kingdom_3_lord", slot_troop_renown, 1200),

      (faction_set_slot, "fac_kingdom_4",  slot_faction_culture, "fac_culture_4"),
      (faction_set_slot, "fac_kingdom_4",  slot_faction_leader, "trp_kingdom_4_lord"),
	  (troop_set_slot, "trp_kingdom_4_lord", slot_troop_renown, 1200),

      (faction_set_slot, "fac_kingdom_5",  slot_faction_culture, "fac_culture_5"),
      (faction_set_slot, "fac_kingdom_5",  slot_faction_leader, "trp_kingdom_5_lord"),
	  (troop_set_slot, "trp_kingdom_5_lord", slot_troop_renown, 1200),
	  	  
      (try_for_range, ":faction_no", kingdoms_begin, kingdoms_end),
        (faction_set_slot, ":faction_no", slot_faction_marshall, -1),
        (faction_get_slot, ":culture", ":faction_no", slot_faction_culture),
      
        (faction_get_slot, ":troop", ":culture",  slot_faction_tier_1_troop),
        (faction_set_slot, ":faction_no",  slot_faction_tier_1_troop, ":troop"),
        (faction_get_slot, ":troop", ":culture",  slot_faction_tier_2_troop),
        (faction_set_slot, ":faction_no",  slot_faction_tier_2_troop, ":troop"),
        (faction_get_slot, ":troop", ":culture",  slot_faction_tier_3_troop),
        (faction_set_slot, ":faction_no",  slot_faction_tier_3_troop, ":troop"),
        (faction_get_slot, ":troop", ":culture",  slot_faction_tier_4_troop),
        (faction_set_slot, ":faction_no",  slot_faction_tier_4_troop, ":troop"),
        (faction_get_slot, ":troop", ":culture",  slot_faction_tier_5_troop),
        (faction_set_slot, ":faction_no",  slot_faction_tier_5_troop, ":troop"),
      
        (try_begin),
          (faction_slot_eq, ":faction_no", slot_faction_culture, "fac_culture_1"),
      
          (faction_set_slot, ":faction_no",  slot_faction_deserter_troop, "trp_swadian_deserter"),
          (faction_set_slot, ":faction_no",  slot_faction_guard_troop, "trp_swadian_crossbowman"),
          (faction_set_slot, ":faction_no",  slot_faction_messenger_troop, "trp_swadian_messenger"),
          (faction_set_slot, ":faction_no",  slot_faction_prison_guard_troop, "trp_swadian_prison_guard"),
          (faction_set_slot, ":faction_no",  slot_faction_castle_guard_troop, "trp_swadian_castle_guard"),
          (faction_set_slot, ":faction_no",  slot_faction_reinforcements_a, "pt_kingdom_1_reinforcements_a"),
          (faction_set_slot, ":faction_no",  slot_faction_reinforcements_b, "pt_kingdom_1_reinforcements_b"),
          (faction_set_slot, ":faction_no",  slot_faction_reinforcements_c, "pt_kingdom_1_reinforcements_c"),
        (else_try),
          (faction_slot_eq, ":faction_no", slot_faction_culture, "fac_culture_2"),
      
          (faction_set_slot, ":faction_no", slot_faction_deserter_troop, "trp_vaegir_deserter"),
          (faction_set_slot, ":faction_no", slot_faction_guard_troop, "trp_vaegir_archer"),
          (faction_set_slot, ":faction_no", slot_faction_messenger_troop, "trp_vaegir_messenger"),
          (faction_set_slot, ":faction_no", slot_faction_prison_guard_troop, "trp_vaegir_prison_guard"),
          (faction_set_slot, ":faction_no", slot_faction_castle_guard_troop, "trp_vaegir_castle_guard"),
          (faction_set_slot, ":faction_no",  slot_faction_reinforcements_a, "pt_kingdom_2_reinforcements_a"),
          (faction_set_slot, ":faction_no",  slot_faction_reinforcements_b, "pt_kingdom_2_reinforcements_b"),
          (faction_set_slot, ":faction_no",  slot_faction_reinforcements_c, "pt_kingdom_2_reinforcements_c"),
        (else_try),
          (faction_slot_eq, ":faction_no", slot_faction_culture, "fac_culture_3"),
      
          (faction_set_slot, ":faction_no", slot_faction_deserter_troop, "trp_khergit_deserter"),
          (faction_set_slot, ":faction_no", slot_faction_guard_troop, "trp_zyndjirli"),
          (faction_set_slot, ":faction_no", slot_faction_messenger_troop, "trp_khergit_messenger"),
          (faction_set_slot, ":faction_no", slot_faction_prison_guard_troop, "trp_khergit_prison_guard"),
          (faction_set_slot, ":faction_no", slot_faction_castle_guard_troop, "trp_khergit_castle_guard"),
          (faction_set_slot, ":faction_no",  slot_faction_reinforcements_a, "pt_kingdom_3_reinforcements_a"),
          (faction_set_slot, ":faction_no",  slot_faction_reinforcements_b, "pt_kingdom_3_reinforcements_b"),
          (faction_set_slot, ":faction_no",  slot_faction_reinforcements_c, "pt_kingdom_3_reinforcements_c"),
        (else_try),
          (faction_slot_eq, ":faction_no", slot_faction_culture, "fac_culture_4"),
      
          (faction_set_slot, ":faction_no", slot_faction_deserter_troop, "trp_nord_deserter"),
          (faction_set_slot, ":faction_no", slot_faction_guard_troop, "trp_nord_veteran_archer"),
          (faction_set_slot, ":faction_no", slot_faction_messenger_troop, "trp_nord_messenger"),
          (faction_set_slot, ":faction_no", slot_faction_prison_guard_troop, "trp_nord_prison_guard"),
          (faction_set_slot, ":faction_no", slot_faction_castle_guard_troop, "trp_nord_castle_guard"),
          (faction_set_slot, ":faction_no",  slot_faction_reinforcements_a, "pt_kingdom_4_reinforcements_a"),
          (faction_set_slot, ":faction_no",  slot_faction_reinforcements_b, "pt_kingdom_4_reinforcements_b"),
          (faction_set_slot, ":faction_no",  slot_faction_reinforcements_c, "pt_kingdom_4_reinforcements_c"),
        (else_try),
          (faction_slot_eq, ":faction_no", slot_faction_culture, "fac_culture_5"),
      
          (faction_set_slot, ":faction_no", slot_faction_deserter_troop, "trp_rhodok_deserter"),
          (faction_set_slot, ":faction_no", slot_faction_guard_troop, "trp_rhodok_veteran_spearman"),
          (faction_set_slot, ":faction_no", slot_faction_messenger_troop, "trp_rhodok_messenger"),
          (faction_set_slot, ":faction_no", slot_faction_prison_guard_troop, "trp_rhodok_prison_guard"),
          (faction_set_slot, ":faction_no", slot_faction_castle_guard_troop, "trp_rhodok_castle_guard"),
          (faction_set_slot, ":faction_no",  slot_faction_reinforcements_a, "pt_kingdom_5_reinforcements_a"),
          (faction_set_slot, ":faction_no",  slot_faction_reinforcements_b, "pt_kingdom_5_reinforcements_b"),
          (faction_set_slot, ":faction_no",  slot_faction_reinforcements_c, "pt_kingdom_5_reinforcements_c"),
        (try_end),
      (try_end), 

      (faction_set_slot, "fac_player_supporters_faction", slot_faction_marshall, "trp_player"),


# Towns:
      (call_script, "script_set_trade_route_between_centers", "p_town_1", "p_town_4"), #Koenigsberg - Vilna
      (call_script, "script_set_trade_route_between_centers", "p_town_1", "p_town_6"), #Koenigsberg - Warsaw
      (call_script, "script_set_trade_route_between_centers", "p_town_1", "p_town_11"), #Koenigsberg - Cherkassk
      (call_script, "script_set_trade_route_between_centers", "p_town_1", "p_town_12"), #Koenigsberg - Riga

      (call_script, "script_set_trade_route_between_centers", "p_town_2", "p_town_9"), #Reval - Pskov
      (call_script, "script_set_trade_route_between_centers", "p_town_2", "p_town_12"), #Reval - Riga

      (call_script, "script_set_trade_route_between_centers", "p_town_3", "p_town_5"), #Kiev - Sich
      (call_script, "script_set_trade_route_between_centers", "p_town_3", "p_town_7"), #Kiev - Lviv
      (call_script, "script_set_trade_route_between_centers", "p_town_3", "p_town_8"), #Kiev - Moscow
      (call_script, "script_set_trade_route_between_centers", "p_town_3", "p_town_16"), #Kiev - Krakow
      (call_script, "script_set_trade_route_between_centers", "p_town_3", "p_town_17"), #Kiev - Akkerman

      (call_script, "script_set_trade_route_between_centers", "p_town_4", "p_town_6"), #Vilna - Warsaw
      (call_script, "script_set_trade_route_between_centers", "p_town_4", "p_town_13"), #Vilna - Smolensk
      (call_script, "script_set_trade_route_between_centers", "p_town_4", "p_town_15"), #Vilna - Chernigow
      
      (call_script, "script_set_trade_route_between_centers", "p_town_5", "p_town_7"), #Sich - Lviv
      (call_script, "script_set_trade_route_between_centers", "p_town_5", "p_town_11"), #Sich - Cherkassk
      (call_script, "script_set_trade_route_between_centers", "p_town_5", "p_town_14"), #Sich - Bakhchisaray
      (call_script, "script_set_trade_route_between_centers", "p_town_5", "p_town_17"), #Sich - Akkerman
      
      (call_script, "script_set_trade_route_between_centers", "p_town_6", "p_town_16"), #Warsaw - Krakow
      (call_script, "script_set_trade_route_between_centers", "p_town_6", "p_town_17"), #Warsaw - Akkerman

      (call_script, "script_set_trade_route_between_centers", "p_town_7", "p_town_15"), #Lviv - Chernigow
      (call_script, "script_set_trade_route_between_centers", "p_town_7", "p_town_16"), #Lviv - Krakow
      (call_script, "script_set_trade_route_between_centers", "p_town_7", "p_town_17"), #Lviv - Akkerman
      (call_script, "script_set_trade_route_between_centers", "p_town_7", "p_town_18"), #Lviv - Kyzykermen

      (call_script, "script_set_trade_route_between_centers", "p_town_8", "p_town_9"), #Moscow - Pskow
      (call_script, "script_set_trade_route_between_centers", "p_town_8", "p_town_11"), #Moscow - Cherkassk
      (call_script, "script_set_trade_route_between_centers", "p_town_8", "p_town_13"), #Moscow - Smolensk
      (call_script, "script_set_trade_route_between_centers", "p_town_8", "p_town_15"), #Moscow - Chernigow
      (call_script, "script_set_trade_route_between_centers", "p_town_8", "p_town_18"), #Moscow - Kyzykermen

      (call_script, "script_set_trade_route_between_centers", "p_town_9", "p_town_13"), #Pskov - Smolensk
      (call_script, "script_set_trade_route_between_centers", "p_town_9", "p_town_14"), #Pskov - Bakhchisaray
      (call_script, "script_set_trade_route_between_centers", "p_town_9", "p_town_15"), #Pskov - Chernigov

      (call_script, "script_set_trade_route_between_centers", "p_town_10", "p_town_11"), #Azaq-Kale - Cherkassk
      (call_script, "script_set_trade_route_between_centers", "p_town_10", "p_town_12"), #Azaq-Kale - Riga
      
      (call_script, "script_set_trade_route_between_centers", "p_town_12", "p_town_15"), #Riga - Chernigow      

      (call_script, "script_set_trade_route_between_centers", "p_town_13", "p_town_16"), #Smolensk - Krakow

      (call_script, "script_set_trade_route_between_centers", "p_town_17", "p_town_18"), #Akkerman - Kyzykermen

      (try_for_range, ":town_no", towns_begin, towns_end),
        (party_set_slot, ":town_no", slot_town_tournament_max_teams, 4),
        (party_set_slot, ":town_no", slot_town_tournament_max_team_size, 8),
      (try_end),
      (party_set_slot, "p_town_6", slot_town_tournament_max_team_size, 2),

      (try_for_range, ":center_no", centers_begin, centers_end),
	    (try_for_range, ":item_no", trade_goods_begin, trade_goods_end),
		  (store_sub, ":item_production_slot_no", ":item_no", trade_goods_begin),
          (val_add, ":item_production_slot_no", slot_town_trade_good_productions_begin),
	      (party_set_slot, ":center_no", ":item_production_slot_no", 0),		 
        (try_end),
	  (try_end),

	  #Koenigsberg
      (party_set_slot,"p_town_1", slot_town_arena_melee_1_num_teams,   2),
      (party_set_slot,"p_town_1", slot_town_arena_melee_1_team_size,   1),
      (party_set_slot,"p_town_1", slot_town_arena_melee_2_num_teams,   4),
      (party_set_slot,"p_town_1", slot_town_arena_melee_2_team_size,   1),
      (party_set_slot,"p_town_1", slot_town_arena_melee_3_num_teams,   4),
      (party_set_slot,"p_town_1", slot_town_arena_melee_3_team_size,   1),
      (call_script, "script_center_change_trade_good_production", "p_town_1", "itm_linen", 100, 0), #primary production
	  (call_script, "script_center_change_trade_good_production", "p_town_1", "itm_ale", 60, 0), #from Warsaw primary
	  (call_script, "script_center_change_trade_good_production", "p_town_1", "itm_salt", 60, 0), #third production
	  (call_script, "script_center_change_trade_good_production", "p_town_1", "itm_smoked_fish", 100, 0), #secondary production
	  (call_script, "script_center_change_trade_good_production", "p_town_1", "itm_oil", 40, 0), #from Vilna primary

	  #Reval
      (party_set_slot,"p_town_2", slot_town_arena_melee_1_num_teams,   4),
      (party_set_slot,"p_town_2", slot_town_arena_melee_1_team_size,   4),
      (party_set_slot,"p_town_2", slot_town_arena_melee_2_num_teams,   4),
      (party_set_slot,"p_town_2", slot_town_arena_melee_2_team_size,   6),
      (party_set_slot,"p_town_2", slot_town_arena_melee_3_num_teams,   4),
      (party_set_slot,"p_town_2", slot_town_arena_melee_3_team_size,   8),
      (call_script, "script_center_change_trade_good_production", "p_town_2", "itm_smoked_fish", 200, 0), #primary production
	  (call_script, "script_center_change_trade_good_production", "p_town_2", "itm_pottery", 90, 0), #secondary production
	  (call_script, "script_center_change_trade_good_production", "p_town_2", "itm_salt", 60, 0), #third production
	  (call_script, "script_center_change_trade_good_production", "p_town_2", "itm_wool_cloth", 60, 0), #from Riga secondary (primary/smoked_fish is already produced)
	  (call_script, "script_center_change_trade_good_production", "p_town_2", "itm_furs", 50, 0), #from Pskov primary
      
	  #Kiev
      (party_set_slot,"p_town_3", slot_town_arena_melee_1_num_teams,   2),
      (party_set_slot,"p_town_3", slot_town_arena_melee_1_team_size,   8),
      (party_set_slot,"p_town_3", slot_town_arena_melee_2_num_teams,   2),
      (party_set_slot,"p_town_3", slot_town_arena_melee_2_team_size,   8),
      (party_set_slot,"p_town_3", slot_town_arena_melee_3_num_teams,   2),
      (party_set_slot,"p_town_3", slot_town_arena_melee_3_team_size,   8),
      (call_script, "script_center_change_trade_good_production", "p_town_3", "itm_wine", 120, 0), #primary production
	  (call_script, "script_center_change_trade_good_production", "p_town_3", "itm_oim_penka", 100, 0), #secondary production
	  (call_script, "script_center_change_trade_good_production", "p_town_3", "itm_butter", 100, 0), #third production
	  (call_script, "script_center_change_trade_good_production", "p_town_3", "itm_velvet", 20, 0), #from Sich primary
	  (call_script, "script_center_change_trade_good_production", "p_town_3", "itm_bread", 150, 0), #from Chernigov primary

	  #Vilna
      (party_set_slot,"p_town_4", slot_town_arena_melee_1_num_teams,   2),
      (party_set_slot,"p_town_4", slot_town_arena_melee_1_team_size,   8),
      (party_set_slot,"p_town_4", slot_town_arena_melee_2_num_teams,   3),
      (party_set_slot,"p_town_4", slot_town_arena_melee_2_team_size,   8),
      (party_set_slot,"p_town_4", slot_town_arena_melee_3_num_teams,   2),
      (party_set_slot,"p_town_4", slot_town_arena_melee_3_team_size,   5),
      (call_script, "script_center_change_trade_good_production", "p_town_4", "itm_oil", 80, 0), #primary production	  
	  (call_script, "script_center_change_trade_good_production", "p_town_4", "itm_tools", 50, 0), #secondary production
	  (call_script, "script_center_change_trade_good_production", "p_town_4", "itm_raw_grapes", 120, 0), #third production
	  (call_script, "script_center_change_trade_good_production", "p_town_4", "itm_linen", 40, 0), #from Koenigsberg primary 
	  (call_script, "script_center_change_trade_good_production", "p_town_4", "itm_ale", 90, 0), #from Warsaw primary
      
	  #Sich
      (party_set_slot,"p_town_5", slot_town_arena_melee_1_num_teams,   2),
      (party_set_slot,"p_town_5", slot_town_arena_melee_1_team_size,   3),
      (party_set_slot,"p_town_5", slot_town_arena_melee_2_num_teams,   2),
      (party_set_slot,"p_town_5", slot_town_arena_melee_2_team_size,   5),
      (party_set_slot,"p_town_5", slot_town_arena_melee_3_num_teams,   2),
      (party_set_slot,"p_town_5", slot_town_arena_melee_3_team_size,   8),
      (call_script, "script_center_change_trade_good_production", "p_town_5", "itm_velvet", 40, 0), #primary production
	  (call_script, "script_center_change_trade_good_production", "p_town_5", "itm_raw_dyes", 100, 0), #secondary production
	  (call_script, "script_center_change_trade_good_production", "p_town_5", "itm_wool_cloth", 60, 0), #third production
	  (call_script, "script_center_change_trade_good_production", "p_town_5", "itm_leatherwork", 60, 0), #from Kyzykermen primary 
	  (call_script, "script_center_change_trade_good_production", "p_town_5", "itm_pottery", 100, 0), #from Bakchisaray primary

	  #Warsaw
      (party_set_slot,"p_town_6", slot_town_arena_melee_1_num_teams,   2),
      (party_set_slot,"p_town_6", slot_town_arena_melee_1_team_size,   4),
      (party_set_slot,"p_town_6", slot_town_arena_melee_2_num_teams,   3),
      (party_set_slot,"p_town_6", slot_town_arena_melee_2_team_size,   4),
      (party_set_slot,"p_town_6", slot_town_arena_melee_3_num_teams,   3),
      (party_set_slot,"p_town_6", slot_town_arena_melee_3_team_size,   6),
      (call_script, "script_center_change_trade_good_production", "p_town_6", "itm_ale", 200, 0), #primary production
	  (call_script, "script_center_change_trade_good_production", "p_town_6", "itm_iron", 60, 0), #secondary production
	  (call_script, "script_center_change_trade_good_production", "p_town_6", "itm_oim_tutun", 40, 0), #third production
	  (call_script, "script_center_change_trade_good_production", "p_town_6", "itm_tools", 50, 0), #from Krakov primary
	  (call_script, "script_center_change_trade_good_production", "p_town_6", "itm_flour", 100, 0), #from Lviv primary

	  #Lviv
      (party_set_slot,"p_town_7", slot_town_arena_melee_1_num_teams,   4),
      (party_set_slot,"p_town_7", slot_town_arena_melee_1_team_size,   4),
      (party_set_slot,"p_town_7", slot_town_arena_melee_2_num_teams,   4),
      (party_set_slot,"p_town_7", slot_town_arena_melee_2_team_size,   6),
      (party_set_slot,"p_town_7", slot_town_arena_melee_3_num_teams,   4),
      (party_set_slot,"p_town_7", slot_town_arena_melee_3_team_size,   8),      
      (call_script, "script_center_change_trade_good_production", "p_town_7", "itm_flour", 200, 0), #primary production
	  (call_script, "script_center_change_trade_good_production", "p_town_7", "itm_leatherwork", 80, 0), #secondary production
	  (call_script, "script_center_change_trade_good_production", "p_town_7", "itm_wool_cloth", 80, 0), #third production
	  (call_script, "script_center_change_trade_good_production", "p_town_7", "itm_tools", 50, 0), #from Krakow primary
	  (call_script, "script_center_change_trade_good_production", "p_town_7", "itm_ale", 80, 0), #from Warsaw primary

	  #Moscow
      (party_set_slot,"p_town_8", slot_town_arena_melee_1_num_teams,   3),
      (party_set_slot,"p_town_8", slot_town_arena_melee_1_team_size,   1),
      (party_set_slot,"p_town_8", slot_town_arena_melee_2_num_teams,   3),
      (party_set_slot,"p_town_8", slot_town_arena_melee_2_team_size,   3),
      (party_set_slot,"p_town_8", slot_town_arena_melee_3_num_teams,   3),
      (party_set_slot,"p_town_8", slot_town_arena_melee_3_team_size,   7),
      (call_script, "script_center_change_trade_good_production", "p_town_8", "itm_oim_alcohol", 100, 0), #primary production
	  (call_script, "script_center_change_trade_good_production", "p_town_8", "itm_wool", 100, 0), #secondary production
	  (call_script, "script_center_change_trade_good_production", "p_town_8", "itm_butter", 120, 0), #third production
	  (call_script, "script_center_change_trade_good_production", "p_town_8", "itm_spice", 30, 0), #from Azaq-Kale primary
	  (call_script, "script_center_change_trade_good_production", "p_town_8", "itm_furs", 50, 0), #from Pstov primary

	  #Pskov
      (party_set_slot,"p_town_9", slot_town_arena_melee_1_num_teams,   2),
      (party_set_slot,"p_town_9", slot_town_arena_melee_1_team_size,   2),
      (party_set_slot,"p_town_9", slot_town_arena_melee_2_num_teams,   2),
      (party_set_slot,"p_town_9", slot_town_arena_melee_2_team_size,   5),
      (party_set_slot,"p_town_9", slot_town_arena_melee_3_num_teams,   2),
      (party_set_slot,"p_town_9", slot_town_arena_melee_3_team_size,   8),
      (call_script, "script_center_change_trade_good_production", "p_town_9", "itm_furs", 80, 0), #primary production
	  (call_script, "script_center_change_trade_good_production", "p_town_9", "itm_oim_alcohol", 50, 0), #secondary production	  
	  (call_script, "script_center_change_trade_good_production", "p_town_9", "itm_raw_dyes", 60, 0), #third production
	  (call_script, "script_center_change_trade_good_production", "p_town_9", "itm_dried_meat", 120, 0), #from Smolensk primary 
	  (call_script, "script_center_change_trade_good_production", "p_town_9", "itm_pottery", 60, 0), #from Reval secondary (primary/smoked_fish needs sea)

	  #Azaq-kale
      (party_set_slot,"p_town_10", slot_town_arena_melee_1_num_teams,   2),
      (party_set_slot,"p_town_10", slot_town_arena_melee_1_team_size,   3),
      (party_set_slot,"p_town_10", slot_town_arena_melee_2_num_teams,   2),
      (party_set_slot,"p_town_10", slot_town_arena_melee_2_team_size,   5),
      (party_set_slot,"p_town_10", slot_town_arena_melee_3_num_teams,   2),
      (party_set_slot,"p_town_10", slot_town_arena_melee_3_team_size,   8),
      (call_script, "script_center_change_trade_good_production", "p_town_10", "itm_spice", 40, 0), #primary production
	  (call_script, "script_center_change_trade_good_production", "p_town_10", "itm_oim_penka", 100, 0), #secondary production	  
	  (call_script, "script_center_change_trade_good_production", "p_town_10", "itm_wine", 60, 0), #third production	  
	  (call_script, "script_center_change_trade_good_production", "p_town_10", "itm_velvet", 20, 0), #from Sich primary
	  (call_script, "script_center_change_trade_good_production", "p_town_10", "itm_iron", 60, 0), #from Cherkassk primary

	  #Cherkassk
      (party_set_slot,"p_town_11", slot_town_arena_melee_1_num_teams,   2),
      (party_set_slot,"p_town_11", slot_town_arena_melee_1_team_size,   8),
      (party_set_slot,"p_town_11", slot_town_arena_melee_2_num_teams,   3),
      (party_set_slot,"p_town_11", slot_town_arena_melee_2_team_size,   4),
      (party_set_slot,"p_town_11", slot_town_arena_melee_3_num_teams,   3),
      (party_set_slot,"p_town_11", slot_town_arena_melee_3_team_size,   6),
      (call_script, "script_center_change_trade_good_production", "p_town_11", "itm_iron", 120, 0), #primary production
	  (call_script, "script_center_change_trade_good_production", "p_town_11", "itm_bread", 120, 0), #secondary production
	  (call_script, "script_center_change_trade_good_production", "p_town_11", "itm_oim_penka", 80, 0), #third production	  
	  (call_script, "script_center_change_trade_good_production", "p_town_11", "itm_raw_dyes", 80, 0), #from Sich secondary (primary/velvet is heavily produced)
	  (call_script, "script_center_change_trade_good_production", "p_town_11", "itm_spice", 30, 0), #from Azaq-Kale primary

	  #Riga
      (party_set_slot,"p_town_12", slot_town_arena_melee_1_num_teams,   3),
      (party_set_slot,"p_town_12", slot_town_arena_melee_1_team_size,   8),
      (party_set_slot,"p_town_12", slot_town_arena_melee_2_num_teams,   4),
      (party_set_slot,"p_town_12", slot_town_arena_melee_2_team_size,   6),
      (party_set_slot,"p_town_12", slot_town_arena_melee_3_num_teams,   4),
      (party_set_slot,"p_town_12", slot_town_arena_melee_3_team_size,   5),
      (call_script, "script_center_change_trade_good_production", "p_town_12", "itm_smoked_fish", 200, 0), #primary production
	  (call_script, "script_center_change_trade_good_production", "p_town_12", "itm_wool_cloth", 40, 0), #secondary production
	  (call_script, "script_center_change_trade_good_production", "p_town_12", "itm_oim_tutun", 40, 0), #third production	  
	  (call_script, "script_center_change_trade_good_production", "p_town_12", "itm_pottery", 90, 0), #from Reval secondary (primary/smoked_fish needs sea)
	  (call_script, "script_center_change_trade_good_production", "p_town_12", "itm_oil", 50, 0), #from Vilna primary

	  #Smolensk
      (party_set_slot,"p_town_13", slot_town_arena_melee_1_num_teams,   2),
      (party_set_slot,"p_town_13", slot_town_arena_melee_1_team_size,   8),
      (party_set_slot,"p_town_13", slot_town_arena_melee_2_num_teams,   4),
      (party_set_slot,"p_town_13", slot_town_arena_melee_2_team_size,   5),
      (party_set_slot,"p_town_13", slot_town_arena_melee_3_num_teams,   4),
      (party_set_slot,"p_town_13", slot_town_arena_melee_3_team_size,   7),
      (call_script, "script_center_change_trade_good_production", "p_town_13", "itm_dried_meat", 200, 0), #primary production
	  (call_script, "script_center_change_trade_good_production", "p_town_13", "itm_oim_alcohol", 50, 0), #secondary production
	  (call_script, "script_center_change_trade_good_production", "p_town_13", "itm_wine", 60, 0), #third production	  
	  (call_script, "script_center_change_trade_good_production", "p_town_13", "itm_wool", 80, 0), #from Moscow secondary (primary/alcohol is already produced)
	  (call_script, "script_center_change_trade_good_production", "p_town_13", "itm_furs", 50, 0), #from Pskov primary

	  #Bakhchisaray
      (party_set_slot,"p_town_14", slot_town_arena_melee_1_num_teams,   2),
      (party_set_slot,"p_town_14", slot_town_arena_melee_1_team_size,   4),
      (party_set_slot,"p_town_14", slot_town_arena_melee_2_num_teams,   2),
      (party_set_slot,"p_town_14", slot_town_arena_melee_2_team_size,   5),
      (party_set_slot,"p_town_14", slot_town_arena_melee_3_num_teams,   2),
      (party_set_slot,"p_town_14", slot_town_arena_melee_3_team_size,   6),
      (call_script, "script_center_change_trade_good_production", "p_town_14", "itm_pottery", 200, 0), #primary production
	  (call_script, "script_center_change_trade_good_production", "p_town_14", "itm_oim_tutun", 40, 0), #secondary production
	  (call_script, "script_center_change_trade_good_production", "p_town_14", "itm_linen", 70, 0), #third production
	  (call_script, "script_center_change_trade_good_production", "p_town_14", "itm_leatherwork", 50, 0), #from Kyzykermen primary
	  (call_script, "script_center_change_trade_good_production", "p_town_14", "itm_velvet", 20, 0), #from Sich primary

	  #Chernigov
      (party_set_slot,"p_town_15", slot_town_arena_melee_1_num_teams,   2),
      (party_set_slot,"p_town_15", slot_town_arena_melee_1_team_size,   8),
      (party_set_slot,"p_town_15", slot_town_arena_melee_2_num_teams,   3),
      (party_set_slot,"p_town_15", slot_town_arena_melee_2_team_size,   4),
      (party_set_slot,"p_town_15", slot_town_arena_melee_3_num_teams,   3),
      (party_set_slot,"p_town_15", slot_town_arena_melee_3_team_size,   6),
      (call_script, "script_center_change_trade_good_production", "p_town_15", "itm_oim_tutun", 90, 0), #primary production
	  (call_script, "script_center_change_trade_good_production", "p_town_15", "itm_oim_penka", 80, 0), #secondary production
	  (call_script, "script_center_change_trade_good_production", "p_town_15", "itm_honey", 60, 0), #third production
	  (call_script, "script_center_change_trade_good_production", "p_town_15", "itm_flour", 100, 0), #from Lviv primary
	  (call_script, "script_center_change_trade_good_production", "p_town_15", "itm_wine", 50, 0), #from Kiev primary

	  #Krakov
      (party_set_slot,"p_town_16", slot_town_arena_melee_1_num_teams,   3),
      (party_set_slot,"p_town_16", slot_town_arena_melee_1_team_size,   8),
      (party_set_slot,"p_town_16", slot_town_arena_melee_2_num_teams,   4),
      (party_set_slot,"p_town_16", slot_town_arena_melee_2_team_size,   6),
      (party_set_slot,"p_town_16", slot_town_arena_melee_3_num_teams,   4),
      (party_set_slot,"p_town_16", slot_town_arena_melee_3_team_size,   5),
      (call_script, "script_center_change_trade_good_production", "p_town_16", "itm_tools", 90, 0), #primary production
	  (call_script, "script_center_change_trade_good_production", "p_town_16", "itm_honey", 60, 0), #secondary production
	  (call_script, "script_center_change_trade_good_production", "p_town_16", "itm_raw_dyes", 60, 0), #third production
	  (call_script, "script_center_change_trade_good_production", "p_town_16", "itm_flour", 80, 0), #from Lviv primary
	  (call_script, "script_center_change_trade_good_production", "p_town_16", "itm_ale", 80, 0), #from Warsaw primary

	  #Akkerman
      (party_set_slot,"p_town_17", slot_town_arena_melee_1_num_teams,   2),
      (party_set_slot,"p_town_17", slot_town_arena_melee_1_team_size,   8),
      (party_set_slot,"p_town_17", slot_town_arena_melee_2_num_teams,   4),
      (party_set_slot,"p_town_17", slot_town_arena_melee_2_team_size,   5),
      (party_set_slot,"p_town_17", slot_town_arena_melee_3_num_teams,   4),
      (party_set_slot,"p_town_17", slot_town_arena_melee_3_team_size,   7),
      (call_script, "script_center_change_trade_good_production", "p_town_17", "itm_salt", 100, 0), #primary production
	  (call_script, "script_center_change_trade_good_production", "p_town_17", "itm_bread", 80, 0), #secondary production
	  (call_script, "script_center_change_trade_good_production", "p_town_17", "itm_cheese", 80, 0), #third production
	  (call_script, "script_center_change_trade_good_production", "p_town_17", "itm_velvet", 20, 0), #from Sich primary
	  (call_script, "script_center_change_trade_good_production", "p_town_17", "itm_oil", 40, 0), #from Kyzykermen primary


	  #Kyzykermen
      (party_set_slot,"p_town_18", slot_town_arena_melee_1_num_teams,   2),
      (party_set_slot,"p_town_18", slot_town_arena_melee_1_team_size,   4),
      (party_set_slot,"p_town_18", slot_town_arena_melee_2_num_teams,   2),
      (party_set_slot,"p_town_18", slot_town_arena_melee_2_team_size,   5),
      (party_set_slot,"p_town_18", slot_town_arena_melee_3_num_teams,   2),
      (party_set_slot,"p_town_18", slot_town_arena_melee_3_team_size,   6),
      (call_script, "script_center_change_trade_good_production", "p_town_18", "itm_leatherwork", 120, 0), #primary production
	  (call_script, "script_center_change_trade_good_production", "p_town_18", "itm_spice", 30, 0), #secondary production
	  (call_script, "script_center_change_trade_good_production", "p_town_18", "itm_dried_meat", 160, 0), #third production
	  (call_script, "script_center_change_trade_good_production", "p_town_18", "itm_pottery", 80, 0), #from Bakhchisaray primary
	  (call_script, "script_center_change_trade_good_production", "p_town_18", "itm_salt", 50, 0), #from Akkerman primary

      (try_for_range, ":item_no", trade_goods_begin, trade_goods_end),
        (store_sub, ":offset", ":item_no", trade_goods_begin),
        (val_add, ":offset", slot_town_trade_good_prices_begin),
        (try_for_range, ":center_no", centers_begin, centers_end),
          (party_set_slot, ":center_no", ":offset", average_price_factor),
        (try_end),
      (try_end),

      (try_for_range, ":town_no", towns_begin, towns_end),
        (call_script, "script_center_change_trade_good_production", ":town_no", "itm_spice", -5, 5),
		(call_script, "script_center_change_trade_good_production", ":town_no", "itm_salt", -10, 10),
		(call_script, "script_center_change_trade_good_production", ":town_no", "itm_oil", -7, 7),
		(call_script, "script_center_change_trade_good_production", ":town_no", "itm_pottery", -15, 15),
		(call_script, "script_center_change_trade_good_production", ":town_no", "itm_raw_flax", -15, 15), #raw_flax is only produced in villages
		(call_script, "script_center_change_trade_good_production", ":town_no", "itm_linen", -10, 10),
		(call_script, "script_center_change_trade_good_production", ":town_no", "itm_wool", -15, 15),
		(call_script, "script_center_change_trade_good_production", ":town_no", "itm_wool_cloth", -10, 10),
		(call_script, "script_center_change_trade_good_production", ":town_no", "itm_raw_silk", -5, 5),
		(call_script, "script_center_change_trade_good_production", ":town_no", "itm_raw_dyes", -10, 10),
		(call_script, "script_center_change_trade_good_production", ":town_no", "itm_velvet", -3, 3),
		(call_script, "script_center_change_trade_good_production", ":town_no", "itm_iron", -10, 10),
		(call_script, "script_center_change_trade_good_production", ":town_no", "itm_tools", -7, 7),
		(call_script, "script_center_change_trade_good_production", ":town_no", "itm_raw_leather", -15, 15),
		(call_script, "script_center_change_trade_good_production", ":town_no", "itm_leatherwork", -10, 10),
		(call_script, "script_center_change_trade_good_production", ":town_no", "itm_raw_date_fruit", -15, 15),
		(call_script, "script_center_change_trade_good_production", ":town_no", "itm_furs", -7, 7),
		#(call_script, "script_center_change_trade_good_production", ":town_no", "itm_oim_powder", 0, 0), #powder is consumed at only castles...
		(call_script, "script_center_change_trade_good_production", ":town_no", "itm_oim_alcohol", -7, 7),
		(call_script, "script_center_change_trade_good_production", ":town_no", "itm_oim_penka", -15, 15),
		(call_script, "script_center_change_trade_good_production", ":town_no", "itm_oim_tutun", -7, 7),
		(call_script, "script_center_change_trade_good_production", ":town_no", "itm_wine", -10, 10),
		(call_script, "script_center_change_trade_good_production", ":town_no", "itm_ale", -15, 15),
		(call_script, "script_center_change_trade_good_production", ":town_no", "itm_smoked_fish", -25, 25),
		(call_script, "script_center_change_trade_good_production", ":town_no", "itm_cheese", -20, 20), #cheese generally produced in villages
		(call_script, "script_center_change_trade_good_production", ":town_no", "itm_honey", -10, 10), #honey generally produced in villages
		(call_script, "script_center_change_trade_good_production", ":town_no", "itm_sausages", -20, 20), #sausages is only produced in villages
		(call_script, "script_center_change_trade_good_production", ":town_no", "itm_cabbages", -30, 30), #cabbages is only produced in villages
		(call_script, "script_center_change_trade_good_production", ":town_no", "itm_dried_meat", -20, 20),
		(call_script, "script_center_change_trade_good_production", ":town_no", "itm_apples", -30, 30), #apples is only produced in villages
		(call_script, "script_center_change_trade_good_production", ":town_no", "itm_raw_grapes", -20, 20), #raw grapes generally produced in villages
		(call_script, "script_center_change_trade_good_production", ":town_no", "itm_raw_olives", -15, 15), #raw olives is only produced in villages
		(call_script, "script_center_change_trade_good_production", ":town_no", "itm_grain", -35, 35), #grain is only produced in villages
		(call_script, "script_center_change_trade_good_production", ":town_no", "itm_flour", -20, 20), 
		(call_script, "script_center_change_trade_good_production", ":town_no", "itm_cattle_meat", -20, 20), #cattle meat is only produced in villages
		(call_script, "script_center_change_trade_good_production", ":town_no", "itm_bread", -25, 25),
		(call_script, "script_center_change_trade_good_production", ":town_no", "itm_chicken", -20, 20), #chicken is only produced in villages
		(call_script, "script_center_change_trade_good_production", ":town_no", "itm_pork", -20, 20), #pork is only produced in villages
		(call_script, "script_center_change_trade_good_production", ":town_no", "itm_butter", -15, 15), #butter generally produced in villages
      (try_end),

	  #modifying castle productions with nearby town productions
	  (try_for_range, ":castle_no", castles_begin, castles_end),
	    (try_for_range, ":cur_item", trade_goods_begin, trade_goods_end),

		  (assign, ":total_averaged_production", 0),
		  (try_for_range, ":town_no", towns_begin, towns_end),
            (store_sub, ":item_production_slot_no", ":cur_item", trade_goods_begin),
            (val_add, ":item_production_slot_no", slot_town_trade_good_productions_begin),
		    (party_get_slot, ":production", ":town_no", ":item_production_slot_no"),

			(ge, ":production", 15),

			(store_distance_to_party_from_party, ":dist", ":town_no", ":castle_no"),

			(le, ":dist", 72),

			(store_add, ":dist_plus_24", ":dist", 24),
			(store_mul, ":production_mul_12", ":production", 12),
			(store_div, ":averaged_production", ":production_mul_12", ":dist_plus_24"), #if close (12/24=1/2) else (12/96=1/8)
			(val_mul, ":averaged_production", 2),
			(val_div, ":averaged_production", 3), #if close (1/3) else (1/12)

			(val_add, ":total_averaged_production", ":averaged_production"),

			(str_store_party_name, s1, ":town_no"),
			(str_store_party_name, s2, ":castle_no"),
			(assign, reg3, ":dist"),
			(str_store_item_name, s7, ":cur_item"),
			(assign, reg7, ":averaged_production"),
			#(display_message, "@OZANDEBUG:{s1}-{s2} distance is {reg3} addition for {s7} is {reg7}"),
		  (try_end),

		  (str_store_item_name, s7, ":cur_item"),
		  (assign, reg7, ":total_averaged_production"),
   	      #(display_message, "@OZANDEBUG:{s7} production at {s2} is {reg7}"),

		  (call_script, "script_center_change_trade_good_production", ":castle_no", ":cur_item", ":total_averaged_production", 0),
		(try_end),
	  (try_end),
      		  	  
	# Towns (loop)
      (try_for_range, ":town_no", towns_begin, towns_end),
        (store_sub, ":offset", ":town_no", towns_begin),
        (party_set_slot,":town_no", slot_party_type, spt_town),
        #(store_add, ":cur_object_no", "trp_town_1_seneschal", ":offset"),
        #(party_set_slot,":town_no", slot_town_seneschal, ":cur_object_no"),
        (store_add, ":cur_object_no", "scn_town_1_center", ":offset"),
        (party_set_slot,":town_no", slot_town_center, ":cur_object_no"),
        (store_add, ":cur_object_no", "scn_town_1_castle", ":offset"),
        (party_set_slot,":town_no", slot_town_castle, ":cur_object_no"),
        (store_add, ":cur_object_no", "scn_town_1_prison", ":offset"),
        (party_set_slot,":town_no", slot_town_prison, ":cur_object_no"),
        (store_add, ":cur_object_no", "scn_town_1_walls", ":offset"),
        (party_set_slot,":town_no", slot_town_walls, ":cur_object_no"),
        (store_add, ":cur_object_no", "scn_town_1_tavern", ":offset"),
        (party_set_slot,":town_no", slot_town_tavern, ":cur_object_no"),
        (store_add, ":cur_object_no", "scn_town_1_store", ":offset"),
        (party_set_slot,":town_no", slot_town_store, ":cur_object_no"),
        (store_add, ":cur_object_no", "scn_town_1_arena", ":offset"),
        (party_set_slot,":town_no", slot_town_arena, ":cur_object_no"),
        (store_add, ":cur_object_no", "scn_town_1_alley", ":offset"),
        (party_set_slot,":town_no", slot_town_alley, ":cur_object_no"),
        (store_add, ":cur_object_no", "trp_town_1_mayor", ":offset"),
        (party_set_slot,":town_no", slot_town_elder, ":cur_object_no"),
        (store_add, ":cur_object_no", "trp_town_1_tavernkeeper", ":offset"),
        (party_set_slot,":town_no", slot_town_tavernkeeper, ":cur_object_no"),
        (store_add, ":cur_object_no", "trp_town_1_weaponsmith", ":offset"),
        (party_set_slot,":town_no", slot_town_weaponsmith, ":cur_object_no"),
        (store_add, ":cur_object_no", "trp_town_1_armorer", ":offset"),
        (party_set_slot,":town_no", slot_town_armorer, ":cur_object_no"),
        (store_add, ":cur_object_no", "trp_town_1_merchant", ":offset"),
        (party_set_slot,":town_no", slot_town_merchant, ":cur_object_no"),
        (store_add, ":cur_object_no", "trp_town_1_horse_merchant", ":offset"),
        (party_set_slot,":town_no", slot_town_horse_merchant, ":cur_object_no"),
        (store_add, ":cur_object_no", "scn_town_1_center", ":offset"),
        (party_set_slot,":town_no", slot_town_center, ":cur_object_no"),
        (party_set_slot,":town_no", slot_town_reinforcement_party_template, "pt_center_reinforcements"),
      (try_end),
		
      (try_for_range, ":town_no", towns_begin, towns_end),
	    (call_script, "script_center_change_trade_good_production", ":town_no", "itm_oim_powder", 40, 40),
	  (end_try), 

# Castles
      (try_for_range, ":castle_no", castles_begin, castles_end),
	    (store_sub, ":offset", ":town_no", castles_begin),
		(store_add, ":cur_object_no", "trp_castle_1_elder", ":offset"),
		(party_set_slot, ":castle_no", slot_town_elder, ":cur_object_no"),
		(store_add, ":cur_object_no", "trp_castle_1_weaponsmith", ":offset"),
		(party_set_slot,":castle_no", slot_town_weaponsmith, ":cur_object_no"),
		(store_add, ":cur_object_no", "trp_castle_1_armorer", ":offset"),
		(party_set_slot,":castle_no", slot_town_armorer, ":cur_object_no"),
		(store_add, ":cur_object_no", "trp_castle_1_horse_merchant", ":offset"),
		(party_set_slot,":castle_no", slot_town_horse_merchant, ":cur_object_no"),
		(store_add, ":cur_object_no", "trp_castle_1_merchant", ":offset"),
		(party_set_slot,":castle_no", slot_town_merchant, ":cur_object_no"),
        (store_sub, ":offset", ":castle_no", castles_begin),
        (val_mul, ":offset", 3),

        (store_add, ":exterior_scene_no", "scn_castle_1_exterior", ":offset"),
        (party_set_slot,":castle_no", slot_castle_exterior, ":exterior_scene_no"),
        (store_add, ":interior_scene_no", "scn_castle_1_interior", ":offset"),
        (party_set_slot,":castle_no", slot_town_castle, ":interior_scene_no"),
        (store_add, ":interior_scene_no", "scn_castle_1_prison", ":offset"),
        (party_set_slot,":castle_no", slot_town_prison, ":interior_scene_no"),
        
        (party_set_slot,":castle_no", slot_town_reinforcement_party_template, "pt_center_reinforcements"),
        (party_set_slot,":castle_no", slot_party_type, spt_castle),
        (party_set_slot,":castle_no", slot_center_is_besieged_by, -1),
      (try_end),

# Set which castles need to be attacked with siege towers.
      (party_set_slot,"p_town_1", slot_center_siege_with_belfry,   0),
      (party_set_slot,"p_town_13", slot_center_siege_with_belfry,   0),
      (party_set_slot,"p_town_16", slot_center_siege_with_belfry,   0),

      (party_set_slot,"p_castle_1", slot_center_siege_with_belfry,   0),
      (party_set_slot,"p_castle_2", slot_center_siege_with_belfry,   0),
      (party_set_slot,"p_castle_3", slot_center_siege_with_belfry,   0),
      (party_set_slot,"p_castle_4", slot_center_siege_with_belfry,   0),
      (party_set_slot,"p_castle_5", slot_center_siege_with_belfry,   0),
      (party_set_slot,"p_castle_6", slot_center_siege_with_belfry,   0),
      (party_set_slot,"p_castle_7", slot_center_siege_with_belfry,   0),
      (party_set_slot,"p_castle_8", slot_center_siege_with_belfry,   0),
      (party_set_slot,"p_castle_9", slot_center_siege_with_belfry,   0),
      (party_set_slot,"p_castle_10", slot_center_siege_with_belfry,   0),
      (party_set_slot,"p_castle_11", slot_center_siege_with_belfry,   0),

      (party_set_slot,"p_castle_13", slot_center_siege_with_belfry,   0),

      (party_set_slot,"p_castle_21", slot_center_siege_with_belfry,   0),
      (party_set_slot,"p_castle_25", slot_center_siege_with_belfry,   0),
      (party_set_slot,"p_castle_38", slot_center_siege_with_belfry,   0),
      (party_set_slot,"p_castle_34", slot_center_siege_with_belfry,   0),
      (party_set_slot,"p_castle_35", slot_center_siege_with_belfry,   0),
      (party_set_slot,"p_castle_40", slot_center_siege_with_belfry,   0),

# Towns

# Villages
      (call_script, "script_center_change_trade_good_production", "p_village_30", "itm_smoked_fish", 60, 0), #salis
      (call_script, "script_center_change_trade_good_production", "p_village_87", "itm_smoked_fish", 40, 0), #plunge
      (call_script, "script_center_change_trade_good_production", "p_village_5", "itm_smoked_fish", 40, 0), #elbing
      (call_script, "script_center_change_trade_good_production", "p_village_8", "itm_smoked_fish", 40, 0), #wesenberg
      (call_script, "script_center_change_trade_good_production", "p_village_35", "itm_smoked_fish", 40, 0), #snechko
	  (call_script, "script_center_change_trade_good_production", "p_village_65", "itm_smoked_fish", 40, 0), #dubechnya
	  (call_script, "script_center_change_trade_good_production", "p_village_59", "itm_smoked_fish", 40, 0), #loyew
	  (call_script, "script_center_change_trade_good_production", "p_village_37", "itm_smoked_fish", 60, 0), #budjak
	  (call_script, "script_center_change_trade_good_production", "p_village_28", "itm_smoked_fish", 40, 0), #sivash
	  (call_script, "script_center_change_trade_good_production", "p_village_44", "itm_smoked_fish", 60, 0), #esaq
	  (call_script, "script_center_change_trade_good_production", "p_village_41", "itm_smoked_fish", 60, 0), #tumnek
	  (call_script, "script_center_change_trade_good_production", "p_village_76", "itm_smoked_fish", 40, 0), #czaple
	  (call_script, "script_center_change_trade_good_production", "p_village_25", "itm_smoked_fish", 40, 0), #dzhankoy
      
      (try_for_range, ":center_no", centers_begin, centers_end),
	    (neg|is_between, ":center_no", towns_begin, towns_end),

	    (try_begin),
		  (is_between, ":center_no", villages_begin, villages_end),
		  #cheese meat production is related to number of cattles in village
		  (call_script, "script_center_change_trade_good_production", ":center_no", "itm_honey", 10, 10), #honey generally produced in villages
		  (call_script, "script_center_change_trade_good_production", ":center_no", "itm_sausages", 20, 20), #sausages generally produced in villages
		  (call_script, "script_center_change_trade_good_production", ":center_no", "itm_cabbages", 30, 30), #cabbages generally produced in villages		  
		  (call_script, "script_center_change_trade_good_production", ":center_no", "itm_apples", 30, 30), #apples generally produced in villages
		  (call_script, "script_center_change_trade_good_production", ":center_no", "itm_raw_grapes", 20, 20), #raw grapes generally produced in villages
		  (call_script, "script_center_change_trade_good_production", ":center_no", "itm_raw_olives", 15, 15), #raw olives generally produced in villages
		  (call_script, "script_center_change_trade_good_production", ":center_no", "itm_grain", 35, 35), #grain generally produced in villages
		  (call_script, "script_center_change_trade_good_production", ":center_no", "itm_flour", -20, 20), #flour generally produced in villages
		  #cattle meat production is related to number of cattles in village
		  (call_script, "script_center_change_trade_good_production", ":center_no", "itm_bread", 25, 25), #bread generally produced in villages
		  (call_script, "script_center_change_trade_good_production", ":center_no", "itm_chicken", 20, 20), #chicken generally produced in villages
		  (call_script, "script_center_change_trade_good_production", ":center_no", "itm_pork", 20, 20), #pork generally produced in villages
		  (call_script, "script_center_change_trade_good_production", ":center_no", "itm_butter", 15, 15), #butter generally produced in villages
		  (call_script, "script_center_change_trade_good_production", ":center_no", "itm_raw_silk", 10, 10), #raw grapes generally produced in villages
		  (call_script, "script_center_change_trade_good_production", ":center_no", "itm_raw_leather", 20, 20), #raw grapes generally produced in villages
		  (call_script, "script_center_change_trade_good_production", ":center_no", "itm_raw_date_fruit", 20, 20), #raw grapes generally produced in villages
		  (call_script, "script_center_change_trade_good_production", ":center_no", "itm_raw_flax", 20, 20), #raw grapes generally produced in villages
        (else_try),
		  (call_script, "script_center_change_trade_good_production", ":center_no", "itm_cheese", -20, 20), #cheese generally produced in villages
		  (call_script, "script_center_change_trade_good_production", ":center_no", "itm_honey", -10, 10), #honey generally produced in villages
		  (call_script, "script_center_change_trade_good_production", ":center_no", "itm_sausages", -20, 20), #sausages generally produced in villages
		  (call_script, "script_center_change_trade_good_production", ":center_no", "itm_cabbages", -30, 30), #cabbages generally produced in villages
		  (call_script, "script_center_change_trade_good_production", ":center_no", "itm_dried_meat", -20, 20), #dried meat generally produced in villages
		  (call_script, "script_center_change_trade_good_production", ":center_no", "itm_apples", -30, 30), #apples generally produced in villages
		  (call_script, "script_center_change_trade_good_production", ":center_no", "itm_raw_grapes", -20, 20), #raw grapes generally produced in villages
		  (call_script, "script_center_change_trade_good_production", ":center_no", "itm_raw_olives", -15, 15), #raw olives generally produced in villages
		  (call_script, "script_center_change_trade_good_production", ":center_no", "itm_grain", -35, 35), #grain generally produced in villages
		  (call_script, "script_center_change_trade_good_production", ":center_no", "itm_flour", -20, 20), #flour generally produced in villages
		  (call_script, "script_center_change_trade_good_production", ":center_no", "itm_cattle_meat", -20, 20), #cattle meat generally produced in villages
		  (call_script, "script_center_change_trade_good_production", ":center_no", "itm_bread", -25, 25), #bread generally produced in villages
		  (call_script, "script_center_change_trade_good_production", ":center_no", "itm_chicken", -20, 20), #chicken generally produced in villages
		  (call_script, "script_center_change_trade_good_production", ":center_no", "itm_pork", -20, 20), #pork generally produced in villages
		  (call_script, "script_center_change_trade_good_production", ":center_no", "itm_butter", -15, 15), #butter generally produced in villages
		  (call_script, "script_center_change_trade_good_production", ":center_no", "itm_raw_silk", -10, 10), #raw grapes generally produced in villages
		  (call_script, "script_center_change_trade_good_production", ":center_no", "itm_raw_leather", -20, 20), #raw grapes generally produced in villages
		  (call_script, "script_center_change_trade_good_production", ":center_no", "itm_raw_date_fruit", -20, 20), #raw grapes generally produced in villages
		  (call_script, "script_center_change_trade_good_production", ":center_no", "itm_raw_flax", -20, 20), #raw grapes generally produced in villages

		  (call_script, "script_center_change_trade_good_production", ":center_no", "itm_oim_powder", -30, 15),
		(try_end),

        (store_random_in_range, ":rand", -10, 0),
		(store_random_in_range, ":rand2", ":rand", 0),
        (call_script, "script_center_change_trade_good_production", ":center_no", "itm_spice", ":rand2", 0),
        (store_random_in_range, ":rand", -20, 0),
		(store_random_in_range, ":rand2", ":rand", 0),
        (call_script, "script_center_change_trade_good_production", ":center_no", "itm_salt", ":rand2", 0),
        (store_random_in_range, ":rand", -14, 0),
		(store_random_in_range, ":rand2", ":rand", 0),
        (call_script, "script_center_change_trade_good_production", ":center_no", "itm_oil", ":rand2", 0),
        (store_random_in_range, ":rand", -30, 0),
		(store_random_in_range, ":rand2", ":rand", 0),
        (call_script, "script_center_change_trade_good_production", ":center_no", "itm_pottery", ":rand2", 0),
        (store_random_in_range, ":rand", -20, 0),
		(store_random_in_range, ":rand2", ":rand", 0),
        (call_script, "script_center_change_trade_good_production", ":center_no", "itm_linen", ":rand2", 0),
        (store_random_in_range, ":rand", -30, 0),
		(store_random_in_range, ":rand2", ":rand", 0),
        (call_script, "script_center_change_trade_good_production", ":center_no", "itm_wool", ":rand2", 0),
        (store_random_in_range, ":rand", -20, 0),
		(store_random_in_range, ":rand2", ":rand", 0),
        (call_script, "script_center_change_trade_good_production", ":center_no", "itm_wool_cloth", ":rand2", 0),
        (store_random_in_range, ":rand", -20, 0),
		(store_random_in_range, ":rand2", ":rand", 0),
        (call_script, "script_center_change_trade_good_production", ":center_no", "itm_raw_dyes", ":rand2", 0),
        (store_random_in_range, ":rand", -6, 0),
		(store_random_in_range, ":rand2", ":rand", 0),
        (call_script, "script_center_change_trade_good_production", ":center_no", "itm_velvet", ":rand2", 0),
        (store_random_in_range, ":rand", -20, 0),
		(store_random_in_range, ":rand2", ":rand", 0),
        (call_script, "script_center_change_trade_good_production", ":center_no", "itm_iron", ":rand2", 0),
        (store_random_in_range, ":rand", -14, 0),
		(store_random_in_range, ":rand2", ":rand", 0),
        (call_script, "script_center_change_trade_good_production", ":center_no", "itm_tools", ":rand2", 0),
        (store_random_in_range, ":rand", -20, 0),
		(store_random_in_range, ":rand2", ":rand", 0),
        (call_script, "script_center_change_trade_good_production", ":center_no", "itm_leatherwork", ":rand2", 0),
        (store_random_in_range, ":rand", -14, 0),
		(store_random_in_range, ":rand2", ":rand", 0),
        (call_script, "script_center_change_trade_good_production", ":center_no", "itm_furs", ":rand2", 0),
        (store_random_in_range, ":rand", -14, 0),
		(store_random_in_range, ":rand2", ":rand", 0),
        (call_script, "script_center_change_trade_good_production", ":center_no", "itm_oim_alcohol", ":rand2", 0),
        (store_random_in_range, ":rand", -30, 0),
		(store_random_in_range, ":rand2", ":rand", 0),
        (call_script, "script_center_change_trade_good_production", ":center_no", "itm_oim_penka", ":rand2", 0),
        (store_random_in_range, ":rand", -14, 0),
		(store_random_in_range, ":rand2", ":rand", 0),
        (call_script, "script_center_change_trade_good_production", ":center_no", "itm_oim_tutun", ":rand2", 0),
        (store_random_in_range, ":rand", -20, 0),
		(store_random_in_range, ":rand2", ":rand", 0),
        (call_script, "script_center_change_trade_good_production", ":center_no", "itm_wine", ":rand2", 0),
        (store_random_in_range, ":rand", -30, 0),
		(store_random_in_range, ":rand2", ":rand", 0),
        (call_script, "script_center_change_trade_good_production", ":center_no", "itm_ale", ":rand2", 0),
        (store_random_in_range, ":rand", -50, 0),
		(store_random_in_range, ":rand2", ":rand", 0),
        (call_script, "script_center_change_trade_good_production", ":center_no", "itm_smoked_fish", ":rand2", 0),
      (try_end),
     
      (try_for_range, ":village_no", villages_begin, villages_end),
        (store_random_in_range, ":random_land_quality", 0, 5),
        (party_set_slot, ":village_no", slot_village_land_quality, ":random_land_quality"),
      
        (store_random_in_range, ":random_cattle", 10, 90),
        (party_set_slot, ":village_no", slot_village_number_of_cattle, ":random_cattle"),
        #Reassigning the cattle/cheese production in the village
        (store_sub, ":production", ":random_cattle", 10),
        (val_div, ":production", 2),
        (call_script, "script_center_change_trade_good_production", ":village_no", "itm_cattle_meat", ":production", 0),
		(call_script, "script_center_change_trade_good_production", ":village_no", "itm_cheese", ":production", 0),
      
        (store_sub, ":offset", ":village_no", villages_begin),

        (store_add, ":exterior_scene_no", "scn_village_1", ":offset"),
        (party_set_slot,":village_no", slot_castle_exterior, ":exterior_scene_no"),
      
        (store_add, ":store_troop_no", "trp_village_1_elder", ":offset"),
        (party_set_slot,":village_no", slot_town_elder, ":store_troop_no"),
        
        (party_set_slot,":village_no", slot_party_type, spt_village),
        (party_set_slot,":village_no", slot_village_raided_by, -1),             
      (try_end),

      (try_for_range, ":center_no", centers_begin, centers_end),
        (party_set_slot, ":center_no", slot_center_last_spotted_enemy, -1),
        (party_set_slot, ":center_no", slot_center_is_besieged_by, -1),
        (party_set_slot, ":center_no", slot_center_last_taken_by_troop, -1),
        #Assigning random prosperity
        (store_random_in_range, ":random_prosperity_adder", -25, 15),
        (call_script, "script_get_center_ideal_prosperity", ":center_no"),
        (assign, ":prosperity", reg0),
        (val_add, ":prosperity", ":random_prosperity_adder"),
        (try_begin),
          (party_slot_eq, ":center_no", slot_party_type, spt_town),
          (val_add, ":prosperity", 20),
        (try_end),
        (val_clamp, ":prosperity", 0, 100),
        (party_set_slot, ":center_no", slot_town_prosperity, ":prosperity"),		
      (try_end),

      (try_for_range, ":village_no", villages_begin, villages_end),
	    (try_for_range, ":unused", 0, 10),
		  (party_get_slot, ":prosperity", ":village_no", slot_town_prosperity),	  	  
		  (party_get_slot, ":merchant_troop", ":village_no", slot_town_elder),
	      (store_div, ":prosperity_div_3_plus_20", ":prosperity", 3),
	      (val_add, ":prosperity_div_3_plus_20", 20),
     	  (troop_add_gold, ":merchant_troop", ":prosperity_div_3_plus_20"),
        (try_end),

        (call_script, "script_refresh_village_merchant_inventory", ":village_no"),
      (try_end),

	  (call_script, "script_refresh_center_inventories"),


# Troops:

# Assign banners and renown.
# We assume there are enough banners for all kingdom heroes.
      #(assign, ":num_khergit_lords_assigned", 0),

      (try_for_range, ":kingdom_hero", kingdom_heroes_begin, kingdom_heroes_end),
        (store_troop_faction, ":kingdom_hero_faction", ":kingdom_hero"),
        #(try_begin),
        #  (eq, ":kingdom_hero_faction", "fac_kingdom_3"), #Khergit Khanate
        #  (store_add, ":kingdom_3_banners_begin", banner_scene_props_begin, khergit_banners_begin_offset),
        #  (store_add, ":banner_id", ":kingdom_3_banners_begin", ":num_khergit_lords_assigned"),
        #  (troop_set_slot, ":kingdom_hero", slot_troop_banner_scene_prop, ":banner_id"),
        #  (val_add, ":num_khergit_lords_assigned", 1),
        #(else_try),
        #  (store_sub, ":hero_offset", ":kingdom_hero", kingdom_heroes_begin),
        #  (val_sub, ":hero_offset", ":num_khergit_lords_assigned"),#Remove khergits from offset since their banners are assigned above here
        #  (try_begin),
        #    (gt, ":hero_offset", khergit_banners_begin_offset),#Do not add khergit banners to non-khergit lords
        #    (val_add, ":hero_offset", khergit_banners_end_offset),
        #    (val_sub, ":hero_offset", khergit_banners_begin_offset),
        #  (try_end),
        #  (store_add, ":banner_id", banner_scene_props_begin, ":hero_offset"),
        #  (troop_set_slot, ":kingdom_hero", slot_troop_banner_scene_prop, ":banner_id"),
        #(try_end),
        (store_character_level, ":level", ":kingdom_hero"),
        (store_mul, ":renown", ":level", ":level"),
        (val_div, ":renown", 2),
        (try_begin),
          (faction_slot_eq, ":kingdom_hero_faction", slot_faction_leader, ":kingdom_hero"),
          (troop_set_slot, ":kingdom_hero", slot_troop_loyalty, 100),
          (store_random_in_range, ":random_renown", 250, 400),
        (else_try),
          (store_random_in_range, ":random_loyalty", 50, 100),
          (troop_set_slot, ":kingdom_hero", slot_troop_loyalty, ":random_loyalty"),
          (store_random_in_range, ":random_renown", 100, 200),
        (try_end),
        (val_add, ":renown", ":random_renown"),
        (troop_set_slot, ":kingdom_hero", slot_troop_renown, ":renown"),
        (store_random_in_range, ":random_readiness", 0, 100),
        (troop_set_slot, ":kingdom_hero", slot_troop_readiness_to_join_army, ":random_readiness"),
        (troop_set_slot, ":kingdom_hero", slot_troop_readiness_to_follow_orders, 100),
        (troop_set_slot, ":kingdom_hero", slot_troop_player_order_state, spai_undefined),
        (troop_set_slot, ":kingdom_hero", slot_troop_player_order_object, -1),
      (try_end),

     #Correcting banners according to the player banner
     # (troop_get_slot, ":selected_banner_spr", "trp_player", slot_troop_banner_scene_prop),
     # (assign, ":end_cond", kingdom_heroes_end),
     # (try_for_range, ":cur_troop", kingdom_heroes_begin, ":end_cond"),
     #   (troop_slot_eq, ":cur_troop", slot_troop_banner_scene_prop, ":selected_banner_spr"),
     #   (troop_set_slot, ":cur_troop", slot_troop_banner_scene_prop, banner_scene_props_end_minus_one),
     #   (assign, ":end_cond", 0),
     # (try_end),

	  #oim code
	  #(store_sub, ":hero_offset", ":kingdom_hero", kingdom_heroes_begin),
	  #(store_add, ":banner_id", banner_scene_props_begin, ":hero_offset"),
	  
	  (assign, ":cur_banner_index", banner_scene_props_begin), 
	  (troop_set_slot, "trp_knight_2_20", slot_troop_banner_scene_prop, ":cur_banner_index"),

      (store_add, ":cur_banner_index", 1, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_3_2", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 2, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_1_18", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 3, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_4_9", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 4, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_2_10", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 5, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_2_8", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 6, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_1_1", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 7, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_4_4", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 8, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_2_16", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 9, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_5_1", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 10, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_3_10", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 11, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_4_7", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 12, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_3_1", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 13, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_3_9", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 14, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_5_2", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 15, banner_scene_props_begin), 
      (troop_set_slot, "trp_kingdom_5_lord", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 16, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_1_19", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 17, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_2_19", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 18, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_2_5", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 19, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_4_1", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 20, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_3_8", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 21, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_4_6", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 22, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_1_10", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 23, banner_scene_props_begin), 
      (troop_set_slot, "trp_kingdom_4_pretender", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 24, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_4_16", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 25, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_5_13", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 26, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_2_6", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 27, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_2_15", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 28, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_5_17", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 29, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_4_3", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 30, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_4_5", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 31, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_4_17", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 32, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_4_8", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 33, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_4_10", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 34, banner_scene_props_begin), 
      (troop_set_slot, "trp_kingdom_3_lord", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 35, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_3_3", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 36, banner_scene_props_begin), 
      (troop_set_slot, "trp_kingdom_5_pretender", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 37, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_5_5", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 38, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_5_4", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 39, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_5_18", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 40, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_5_12", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 41, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_2_2", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 42, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_4_20", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 43, banner_scene_props_begin), 
      (troop_set_slot, "trp_kingdom_4_lord", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 44, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_4_15", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 45, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_4_11", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 46, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_1_17", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 47, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_5_19", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 48, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_4_12", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 49, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_5_20", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 50, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_5_7", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 51, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_4_2", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 52, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_3_12", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 53, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_5_16", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 54, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_5_15", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 55, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_5_10", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 56, banner_scene_props_begin), 
      (troop_set_slot, "trp_kingdom_3_pretender", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 57, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_1_20", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 58, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_3_15", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 59, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_3_14", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 60, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_3_16", slot_troop_banner_scene_prop, ":cur_banner_index"),
##      (store_add, ":cur_banner_index", 61, banner_scene_props_begin), 
##      (troop_set_slot, "trp_knight_2_1", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 62, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_3_17", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 63, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_3_7", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 64, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_3_19", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 65, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_3_4", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 66, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_3_18", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 67, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_3_5", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 68, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_2_7", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 69, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_2_17", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 70, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_4_18", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 71, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_1_6", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 72, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_1_4", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 73, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_4_13", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 74, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_2_18", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 75, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_1_9", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 76, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_5_3", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 77, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_5_6", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 78, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_5_8", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 79, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_5_11", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 80, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_3_8", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 81, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_3_9", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 82, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_4_19", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 83, banner_scene_props_begin), 
      (troop_set_slot, "trp_kingdom_2_lord", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 84, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_3_11", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 85, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_2_3", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 86, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_2_4", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 87, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_2_13", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 88, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_3_6", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 89, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_4_14", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 90, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_1_5", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 91, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_1_15", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 92, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_1_16", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 93, banner_scene_props_begin), 
      (troop_set_slot, "trp_kingdom_2_pretender", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 94, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_5_14", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 95, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_1_7", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 96, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_2_14", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 97, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_2_1", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 98, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_5_9", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 99, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_2_11", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 100, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_2_12", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 101, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_1_2", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 102, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_2_9", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 103, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_1_3", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 104, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_1_14", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 105, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_1_12", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 106, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_1_11", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 107, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_1_8", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 108, banner_scene_props_begin), 
      (troop_set_slot, "trp_kingdom_1_pretender", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 109, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_3_13", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 110, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_3_20", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 111, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_1_13", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 112, banner_scene_props_begin), 
      (troop_set_slot, "trp_kingdom_1_lord", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 113, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_5_7", slot_troop_banner_scene_prop, ":cur_banner_index"),
	  #this line is out of usual order
      (store_add, ":cur_banner_index", 120, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_1_20", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 115, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_3_12", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 116, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_5_2", slot_troop_banner_scene_prop, ":cur_banner_index"),
      #(store_add, ":cur_banner_index", 117, banner_scene_props_begin), 
      #(troop_set_slot, "trp_knight_2_1", slot_troop_banner_scene_prop, ":cur_banner_index"),
      (store_add, ":cur_banner_index", 118, banner_scene_props_begin), 
      (troop_set_slot, "trp_knight_5_10", slot_troop_banner_scene_prop, ":cur_banner_index"),


	  
      (call_script, "script_give_center_to_lord", "p_town_1",  "trp_knight_4_5", 0),
      (call_script, "script_give_center_to_lord", "p_town_2",  "trp_knight_4_4", 0),
      (call_script, "script_give_center_to_lord", "p_town_3",  "trp_knight_5_1", 0),
      (call_script, "script_give_center_to_lord", "p_town_4",  "trp_knight_1_9", 0),
      (call_script, "script_give_center_to_lord", "p_town_5",  "trp_knight_5_3", 0),
      (call_script, "script_give_center_to_lord", "p_town_6",  "trp_kingdom_1_lord", 0),
      (call_script, "script_give_center_to_lord", "p_town_7",  "trp_knight_1_16", 0),
      
      (call_script, "script_give_center_to_lord", "p_town_8",  "trp_kingdom_2_lord", 0),
      (call_script, "script_give_center_to_lord", "p_town_9",  "trp_knight_2_16", 0),
      (call_script, "script_give_center_to_lord", "p_town_10", "trp_knight_3_3", 0),
      (call_script, "script_give_center_to_lord", "p_town_11", "trp_knight_2_7", 0),
      (call_script, "script_give_center_to_lord", "p_town_12", "trp_knight_4_2", 0),
      (call_script, "script_give_center_to_lord", "p_town_13", "trp_knight_1_6", 0),
      (call_script, "script_give_center_to_lord", "p_town_14", "trp_kingdom_3_lord", 0),

      (call_script, "script_give_center_to_lord", "p_town_15", "trp_knight_5_2", 0),
      (call_script, "script_give_center_to_lord", "p_town_16", "trp_knight_1_15", 0),
      (call_script, "script_give_center_to_lord", "p_town_17", "trp_knight_3_1", 0),
      (call_script, "script_give_center_to_lord", "p_town_18", "trp_knight_3_9", 0),


      (call_script, "script_give_center_to_lord", "p_castle_1", "trp_knight_1_3", 0),
      (call_script, "script_give_center_to_lord", "p_castle_2", "trp_knight_3_14", 0),
      (call_script, "script_give_center_to_lord", "p_castle_3", "trp_knight_1_1", 0),
      (call_script, "script_give_center_to_lord", "p_castle_4", "trp_knight_4_20", 0),
      (call_script, "script_give_center_to_lord", "p_castle_5", "trp_knight_4_8", 0),
      (call_script, "script_give_center_to_lord", "p_castle_6", "trp_knight_2_1", 0),
      (call_script, "script_give_center_to_lord", "p_castle_7", "trp_knight_3_10", 0),
      (call_script, "script_give_center_to_lord", "p_castle_8", "trp_knight_2_2", 0),
      (call_script, "script_give_center_to_lord", "p_castle_9", "trp_knight_5_4", 0),
      (call_script, "script_give_center_to_lord", "p_castle_10", "trp_knight_1_4", 0),
      (call_script, "script_give_center_to_lord", "p_castle_11", "trp_knight_1_5", 0),
    
      (call_script, "script_give_center_to_lord", "p_castle_12", "trp_knight_4_6", 0),
      (call_script, "script_give_center_to_lord", "p_castle_13", "trp_knight_1_12", 0),
      (call_script, "script_give_center_to_lord", "p_castle_14", "trp_knight_5_5", 0),
      (call_script, "script_give_center_to_lord", "p_castle_15", "trp_knight_5_6", 0),
      (call_script, "script_give_center_to_lord", "p_castle_16", "trp_knight_5_7", 0),
      (call_script, "script_give_center_to_lord", "p_castle_17", "trp_knight_3_4", 0),
      (call_script, "script_give_center_to_lord", "p_castle_18", "trp_knight_2_9", 0),
      (call_script, "script_give_center_to_lord", "p_castle_19", "trp_knight_2_4", 0),
      (call_script, "script_give_center_to_lord", "p_castle_20", "trp_knight_1_7", 0),
    
      (call_script, "script_give_center_to_lord", "p_castle_21", "trp_kingdom_5_lord", 0),
      (call_script, "script_give_center_to_lord", "p_castle_22", "trp_knight_3_2", 0),
      (call_script, "script_give_center_to_lord", "p_castle_23", "trp_knight_1_18", 0),
      (call_script, "script_give_center_to_lord", "p_castle_24", "trp_knight_5_8", 0),
    
      (call_script, "script_give_center_to_lord", "p_castle_25", "trp_knight_1_8", 0),
      (call_script, "script_give_center_to_lord", "p_castle_26", "trp_knight_1_2", 0),
      (call_script, "script_give_center_to_lord", "p_castle_27", "trp_knight_1_10", 0),
      (call_script, "script_give_center_to_lord", "p_castle_28", "trp_knight_1_11", 0),
    
      (call_script, "script_give_center_to_lord", "p_castle_29", "trp_knight_2_6", 0), 
      (call_script, "script_give_center_to_lord", "p_castle_30", "trp_knight_3_7", 0),
      (call_script, "script_give_center_to_lord", "p_castle_31", "trp_knight_2_20", 0),
    
      (call_script, "script_give_center_to_lord", "p_castle_32", "trp_kingdom_4_lord", 0),
      (call_script, "script_give_center_to_lord", "p_castle_33", "trp_knight_5_9", 0),
      (call_script, "script_give_center_to_lord", "p_castle_34", "trp_knight_4_13", 0),
      (call_script, "script_give_center_to_lord", "p_castle_35", "trp_knight_1_14", 0),
      
      
      (call_script, "script_give_center_to_lord", "p_castle_36", "trp_knight_4_10", 0),
      (call_script, "script_give_center_to_lord", "p_castle_37", "trp_knight_2_3", 0),
      (call_script, "script_give_center_to_lord", "p_castle_38", "trp_knight_3_5", 0),
      (call_script, "script_give_center_to_lord", "p_castle_39", "trp_knight_2_17", 0),
      (call_script, "script_give_center_to_lord", "p_castle_40", "trp_knight_3_6", 0),

	#oim villages code
        (party_set_slot, "p_village_66", slot_village_bound_center, "p_town_13"),
        (store_faction_of_party, ":town_faction", "p_town_13"),
        (call_script, "script_give_center_to_faction_aux", "p_village_66", ":town_faction"),

        (party_set_slot, "p_village_49", slot_village_bound_center, "p_castle_40"),
        (store_faction_of_party, ":town_faction", "p_castle_40"),
        (call_script, "script_give_center_to_faction_aux", "p_village_49", ":town_faction"),
		
        (party_set_slot, "p_village_70", slot_village_bound_center, "p_castle_39"),
        (store_faction_of_party, ":town_faction", "p_castle_39"),
        (call_script, "script_give_center_to_faction_aux", "p_village_70", ":town_faction"),
		
	    (call_script, "script_give_center_to_lord", "p_village_66", "trp_knight_1_6", 0),

        (party_set_slot, "p_village_54", slot_village_bound_center, "p_castle_20"),
        (store_faction_of_party, ":town_faction", "p_castle_20"),
        (call_script, "script_give_center_to_faction_aux", "p_village_54", ":town_faction"),
		
		#castle_20 p_village_54
	
	#oim code end
	  
	  
	  

	  	  # fill_village_bound_centers
    #pass 1: Give one village to each castle
      (try_for_range, ":cur_center", castles_begin, castles_end),
        (assign, ":min_dist", 999999),
        (assign, ":min_dist_village", -1),
        (try_for_range, ":cur_village", villages_begin, villages_end),
          (neg|party_slot_ge, ":cur_village", slot_village_bound_center, 1), #skip villages which are already bound.
          (store_distance_to_party_from_party, ":cur_dist", ":cur_village", ":cur_center"),
          (lt, ":cur_dist", ":min_dist"),
          (assign, ":min_dist", ":cur_dist"),
          (assign, ":min_dist_village", ":cur_village"),
        (try_end),
        (party_set_slot, ":min_dist_village", slot_village_bound_center, ":cur_center"),
        (store_faction_of_party, ":town_faction", ":cur_center"),
        (call_script, "script_give_center_to_faction_aux", ":min_dist_village", ":town_faction"),
      (try_end),

   # Give family castles to certain nobles.
#      (call_script, "script_give_center_to_lord", "p_castle_29", "trp_knight_2_10", 0), #Nelag_Castle
#      (call_script, "script_give_center_to_lord", "p_castle_30", "trp_knight_3_4", 0), #Asugan_Castle
#      (call_script, "script_give_center_to_lord", "p_castle_35", "trp_knight_1_15", 0), #Haringoth_Castle
      
    #pass 2: Give other villages to closest town.
      (try_for_range, ":cur_village", villages_begin, villages_end),
        (neg|party_slot_ge, ":cur_village", slot_village_bound_center, 1), #skip villages which are already bound.
        (assign, ":min_dist", 999999),
        (assign, ":min_dist_town", -1),
        (try_for_range, ":cur_town", towns_begin, towns_end),
          (store_distance_to_party_from_party, ":cur_dist", ":cur_village", ":cur_town"),
          (lt, ":cur_dist", ":min_dist"),
          (assign, ":min_dist", ":cur_dist"),
          (assign, ":min_dist_town", ":cur_town"),
        (try_end),
        (party_set_slot, ":cur_village", slot_village_bound_center, ":min_dist_town"),
        (store_faction_of_party, ":town_faction", ":min_dist_town"),
        (call_script, "script_give_center_to_faction_aux", ":cur_village", ":town_faction"),
      (try_end),		

      (try_for_range, ":center_no", centers_begin, centers_end),
        (store_faction_of_party, ":original_faction", ":center_no"),
        (faction_get_slot, ":culture", ":original_faction", slot_faction_culture),
        (party_set_slot, ":center_no", slot_center_culture,  ":culture"),
        (party_set_slot, ":center_no", slot_center_original_faction,  ":original_faction"),
        (party_set_slot, ":center_no", slot_center_ex_faction,  ":original_faction"),
      (try_end),
	  
      #Initialize walkers
      (try_for_range, ":center_no", centers_begin, centers_end),
        (this_or_next|party_slot_eq, ":center_no", slot_party_type, spt_town),
                     (party_slot_eq, ":center_no", slot_party_type, spt_village),
        (try_for_range, ":walker_no", 0, num_town_walkers),
          (call_script, "script_center_set_walker_to_type", ":center_no", ":walker_no", walkert_default),
        (try_end),
      (try_end),

	  (call_script, "script_update_village_market_towns"),

	  (try_for_range, ":village_no", villages_begin, villages_end),	
        (call_script, "script_refresh_village_defenders", ":village_no"),
        (call_script, "script_refresh_village_defenders", ":village_no"),
        (call_script, "script_refresh_village_defenders", ":village_no"),
        (call_script, "script_refresh_village_defenders", ":village_no"),
      (try_end),	  
	  
#Assign only family structures of lords who doesn't have a father. Other troops will get the family tree automatically
      (troop_set_slot,"trp_knight_1_1",  slot_troop_spouse, "trp_knight_1_1_wife"),
      (troop_set_slot,"trp_knight_2_1",  slot_troop_spouse, "trp_knight_2_1_wife"),
      (troop_set_slot,"trp_knight_3_1",  slot_troop_spouse, "trp_knight_3_1_wife"),
      (troop_set_slot,"trp_knight_4_1",  slot_troop_spouse, "trp_knight_4_1_wife"),
      (troop_set_slot,"trp_knight_5_1",  slot_troop_spouse, "trp_knight_5_1_wife"),
	  
      (troop_set_slot,"trp_knight_1_2",  slot_troop_spouse, "trp_knight_1_2_wife"),
      (troop_set_slot,"trp_knight_2_2",  slot_troop_spouse, "trp_knight_2_2_wife"),
      (troop_set_slot,"trp_knight_3_2",  slot_troop_spouse, "trp_knight_3_2_wife"),
      (troop_set_slot,"trp_knight_4_2",  slot_troop_spouse, "trp_knight_4_2_wife"),
      (troop_set_slot,"trp_knight_5_2",  slot_troop_spouse, "trp_knight_5_2_wife"),

      (troop_set_slot,"trp_knight_1_3",  slot_troop_spouse, "trp_knight_1_1_daughter"),
      (troop_set_slot,"trp_knight_2_3",  slot_troop_spouse, "trp_knight_2_1_daughter"),
      (troop_set_slot,"trp_knight_3_3",  slot_troop_spouse, "trp_knight_3_1_daughter"),
      (troop_set_slot,"trp_knight_4_3",  slot_troop_spouse, "trp_knight_4_1_daughter"),
      (troop_set_slot,"trp_knight_5_3",  slot_troop_spouse, "trp_knight_5_1_daughter"),

      (troop_set_slot,"trp_knight_1_4",  slot_troop_spouse, "trp_knight_1_2_daughter"),
      (troop_set_slot,"trp_knight_2_4",  slot_troop_spouse, "trp_knight_2_2_daughter"),
      (troop_set_slot,"trp_knight_3_4",  slot_troop_spouse, "trp_knight_3_2_daughter"),
      (troop_set_slot,"trp_knight_4_4",  slot_troop_spouse, "trp_knight_4_2_daughter"),
      (troop_set_slot,"trp_knight_5_4",  slot_troop_spouse, "trp_knight_5_2_daughter"),
	  
##      (troop_set_slot,"trp_kingdom_2_lord_a", slot_troop_spouse, "trp_kingdom_2_lady_a"),
##      (troop_set_slot,"trp_kingdom_2_lord_a", slot_troop_son, "trp_kingdom_2_lord_b"),
##      (troop_set_slot,"trp_kingdom_2_lord_a", slot_troop_sibling, "trp_kingdom_2_lady_c"),
##      (troop_set_slot,"trp_kingdom_2_lord_a", slot_troop_daughter, "trp_kingdom_2_lady_e"),
##      
##      (troop_set_slot,"trp_kingdom_2_lord_b", slot_troop_daughter, "trp_kingdom_2_lady_b"),
##      (troop_set_slot,"trp_kingdom_2_lord_c", slot_troop_spouse, "trp_kingdom_2_lady_c"),
##      (troop_set_slot,"trp_kingdom_2_lord_d", slot_troop_daughter, "trp_kingdom_2_lady_d"),
##      (troop_set_slot,"trp_kingdom_2_lord_e", slot_troop_spouse, "trp_kingdom_2_lady_e"),
##      (troop_set_slot,"trp_kingdom_2_lord_f", slot_troop_daughter, "trp_kingdom_2_lady_f"),
##      (troop_set_slot,"trp_kingdom_2_lord_g", slot_troop_spouse, "trp_kingdom_2_lady_g"),
##      (troop_set_slot,"trp_kingdom_2_lord_h", slot_troop_daughter, "trp_kingdom_2_lady_h"),
##      (troop_set_slot,"trp_kingdom_2_lord_i", slot_troop_spouse, "trp_kingdom_2_lady_i"),
##      (troop_set_slot,"trp_kingdom_2_lord_j", slot_troop_daughter, "trp_kingdom_2_lady_j"),
	 
##      (try_for_range, ":troop_id", merchants_begin, merchants_end),
##        (troop_set_slot, ":troop_id", slot_troop_occupation, slto_merchant),
##      (try_end),

      (try_for_range, ":troop_id", kingdom_heroes_begin, kingdom_heroes_end),
        (try_begin),
          (store_troop_faction, ":faction_id", ":troop_id"),
          (is_between, ":faction_id", kingdoms_begin, kingdoms_end),
          (troop_set_slot, ":troop_id", slot_troop_original_faction, ":faction_id"),
          (try_begin),
            (is_between, ":troop_id", pretenders_begin, pretenders_end),
            (faction_set_slot, ":faction_id", slot_faction_has_rebellion_chance, 1),
          (else_try),
            (troop_set_slot, ":troop_id", slot_troop_occupation, slto_kingdom_hero),
          (try_end),
        (try_end),
        (assign, ":initial_wealth", 6000),
        (try_begin),
          (store_troop_faction, ":faction", ":troop_id"),
          (faction_slot_eq, ":faction", slot_faction_leader, ":troop_id"),
          (assign, ":initial_wealth", 20000),
        (try_end),
        (troop_set_slot, ":troop_id", slot_troop_wealth, ":initial_wealth"),
      (try_end),

      (try_for_range, ":center_no", walled_centers_begin, walled_centers_end),#add town garrisons
        #Add initial center wealth
        (assign, ":initial_wealth", 2000),
        (try_begin),
          (is_between, ":center_no", towns_begin, towns_end),
          (val_mul, ":initial_wealth", 2),
        (try_end),
        (party_set_slot, ":center_no", slot_town_wealth, ":initial_wealth"),
      
        (assign, ":garrison_strength", 13), 
        (try_begin),
          (party_slot_eq, ":center_no", slot_party_type, spt_town),
          (assign, ":garrison_strength", 40), 
        (try_end),
        #(try_for_range, ":unused", 0, ":garrison_strength"),
        #  (call_script, "script_cf_reinforce_party", ":center_no"),
        #(try_end),
        ## ADD some XP initially
        (store_div, ":xp_amount", ":garrison_strength", 8),
        (val_add, ":xp_amount", 4),
        (try_for_range, ":unused", 0, ":xp_amount"),
          (store_random_in_range, ":xp", 7000, 9000),
          (party_upgrade_with_xp, ":center_no", ":xp", 0),
        (try_end),

        #Fill town food stores upto half the limit
        (call_script, "script_center_get_food_store_limit", ":center_no"),
        (assign, ":food_store_limit", reg0),
        (val_div, ":food_store_limit", 2),
        (party_set_slot, ":center_no", slot_party_food_store, ":food_store_limit"),

        #create lord parties
        (party_get_slot, ":center_lord", ":center_no", slot_town_lord),
        (ge, ":center_lord", 1),
        (troop_slot_eq, ":center_lord", slot_troop_leaded_party, 0),
        (call_script, "script_create_kingdom_hero_party", ":center_lord", ":center_no", 0),
        (assign, ":lords_party", "$pout_party"),
        (party_attach_to_party, ":lords_party", ":center_no"),
        (party_set_slot, ":center_no", slot_town_player_odds, 1000),
      (try_end),

      (call_script, "script_complete_family_relations"),
      (call_script, "script_complete_family_relations"),

      (try_for_range, ":troop_id", kingdom_ladies_begin, kingdom_ladies_end),
        (troop_set_slot, ":troop_id", slot_troop_occupation, slto_kingdom_lady),
        (troop_get_slot, ":cur_family", ":troop_id", slot_troop_father),
        (try_begin),
          (eq, ":cur_family", 0),
          (troop_get_slot, ":cur_family", ":troop_id", slot_troop_spouse),
        (try_end),
        (try_begin),
          (gt, ":cur_family", 0),
          (call_script, "script_get_troop_attached_party", ":cur_family"),
          (assign, ":cur_center", reg0),
          (gt, ":cur_center", 0),
          (troop_set_slot, ":troop_id", slot_troop_cur_center, ":cur_center"),
        (else_try),
          (store_troop_faction, ":faction_no", ":troop_id"),
          (call_script, "script_cf_select_random_walled_center_with_faction", ":faction_no", -1),
          (assign, ":cur_center", reg0),
          (troop_set_slot, ":troop_id", slot_troop_cur_center, ":cur_center"),
		(try_end),
	  (try_end),	
	
      (try_for_range, ":troop_id", heroes_begin, heroes_end),
        (troop_slot_eq, ":troop_id", slot_troop_occupation, slto_kingdom_lady),
        (troop_get_slot, ":cur_father", ":troop_id", slot_troop_father),
        (gt, ":cur_father", 0),# Lovers for daughters only
        (store_random_in_range, ":random_no", 0, 100),
        (le, ":random_no", 80),
        (call_script, "script_cf_get_random_kingdom_hero_as_lover", ":troop_id"),#Can fail
        (assign, ":cur_lover", reg0),
        (troop_set_slot, ":troop_id", slot_troop_lover, ":cur_lover"),
        (troop_set_slot, ":cur_lover", slot_troop_lover, ":troop_id"),
      (try_end),
		
      (try_for_range, ":troop_id", heroes_begin, heroes_end),
        (troop_get_slot, ":in_relation_1", ":troop_id", slot_troop_spouse),
        (troop_get_slot, ":in_relation_2", ":troop_id", slot_troop_sibling),
        (troop_get_slot, ":in_relation_3", ":troop_id", slot_troop_daughter),
        (troop_get_slot, ":in_relation_4", ":troop_id", slot_troop_son),
        (troop_get_slot, ":in_relation_5", ":troop_id", slot_troop_father),
        (troop_get_slot, ":in_relation_6", ":troop_id", slot_troop_mother),
        (troop_get_slot, ":in_relation_7", ":troop_id", slot_troop_lover),
#        (troop_get_slot, ":troop_rank", ":troop_id", slot_troop_kingdom_rank),
        (store_troop_faction, ":troop_faction", ":troop_id"),
		
        (assign, ":troop_enemy_count", 0),
        (try_for_range, ":i_enemy_slot", slot_troop_enemies_begin, slot_troop_enemies_end),
          (troop_slot_ge, ":troop_id", ":i_enemy_slot", 1),
          (val_add, ":troop_enemy_count", 1),
        (try_end),
			
        (try_for_range, ":i_enemy_slot", slot_troop_enemies_begin, slot_troop_enemies_end),
          (troop_set_slot, ":troop_id", ":i_enemy_slot", -1),
		(try_end),
		
        (store_random_in_range, ":random_enemy_count", 0, 4),
        (val_add, ":random_enemy_count", ":troop_enemy_count"),
        (val_min, ":random_enemy_count", 5),
        (try_for_range, ":unused", ":troop_enemy_count", ":random_enemy_count"),
          (assign, ":possible_enemy_count", 0),
          (try_for_range, ":enemy_troop_id", heroes_begin, heroes_end),
            (neq, ":enemy_troop_id", ":troop_id"),
            (neq, ":enemy_troop_id", ":in_relation_1"),
            (neq, ":enemy_troop_id", ":in_relation_2"),
            (neq, ":enemy_troop_id", ":in_relation_3"),
            (neq, ":enemy_troop_id", ":in_relation_4"),
            (neq, ":enemy_troop_id", ":in_relation_5"),
            (neq, ":enemy_troop_id", ":in_relation_6"),
            (neq, ":enemy_troop_id", ":in_relation_7"),
            (store_troop_faction, ":enemy_troop_faction", ":enemy_troop_id"),
            (eq, ":enemy_troop_faction", ":troop_faction"),
#            (troop_get_slot, ":enemy_troop_rank", ":enemy_troop_id", slot_troop_kingdom_rank),
#            (lt, ":enemy_troop_rank", 4),
#            (lt, ":troop_rank", 4),
            (assign, ":marked_as_enemy", 0),
            (try_for_range, ":i_enemy_slot_mark", slot_troop_enemies_begin, slot_troop_enemies_end),
              (troop_slot_eq, ":troop_id", ":i_enemy_slot_mark", ":enemy_troop_id"),
              (assign, ":marked_as_enemy", 1),
	  (try_end),
            (eq, ":marked_as_enemy", 0),
            (val_add, ":possible_enemy_count", 1),
	  (try_end),
          (store_random_in_range, ":random_enemy", 0, ":possible_enemy_count"),
          (assign, ":possible_enemy_count", 0),
          (assign, ":result", -1),
          (try_for_range, ":enemy_troop_id", heroes_begin, heroes_end),
            (eq, ":result", -1),
            (neq, ":enemy_troop_id", ":troop_id"),
            (neq, ":enemy_troop_id", ":in_relation_1"),
            (neq, ":enemy_troop_id", ":in_relation_2"),
            (neq, ":enemy_troop_id", ":in_relation_3"),
            (neq, ":enemy_troop_id", ":in_relation_4"),
            (neq, ":enemy_troop_id", ":in_relation_5"),
            (neq, ":enemy_troop_id", ":in_relation_6"),
            (neq, ":enemy_troop_id", ":in_relation_7"),
            (store_troop_faction, ":enemy_troop_faction", ":enemy_troop_id"),
            (eq, ":enemy_troop_faction", ":troop_faction"),
#            (troop_get_slot, ":enemy_troop_rank", ":enemy_troop_id", slot_troop_kingdom_rank),
#            (lt, ":enemy_troop_rank", 4),
#            (lt, ":troop_rank", 4),
            (assign, ":marked_as_enemy", 0),
            (try_for_range, ":i_enemy_slot_mark", slot_troop_enemies_begin, slot_troop_enemies_end),
              (troop_slot_eq, ":troop_id", ":i_enemy_slot_mark", ":enemy_troop_id"),
              (assign, ":marked_as_enemy", 1),
	  (try_end),
            (eq, ":marked_as_enemy", 0),
            (val_add, ":possible_enemy_count", 1),
            (gt, ":possible_enemy_count", ":random_enemy"),
            (assign, ":result", ":enemy_troop_id"),
	  (try_end),

          (gt, ":result", 0),
          (assign, ":enemy_troop_enemy_count", 0),
          (try_for_range, ":i_enemy_slot", slot_troop_enemies_begin, slot_troop_enemies_end),
            (troop_slot_ge, ":result", ":i_enemy_slot", 1),
            (val_add, ":enemy_troop_enemy_count", 1),
	  (try_end),

          (lt, ":enemy_troop_enemy_count", 5),
	  
          (assign, ":troop_enemy_count", 0),
          (try_for_range, ":i_enemy_slot", slot_troop_enemies_begin, slot_troop_enemies_end),
            (troop_slot_ge, ":troop_id", ":i_enemy_slot", 1),
            (val_add, ":troop_enemy_count", 1),
	  (try_end),
	  
          (store_add, ":cur_slot", slot_troop_enemies_begin, ":troop_enemy_count"),
          (troop_set_slot, ":troop_id", ":cur_slot", ":result"),
          (store_add, ":cur_slot", slot_troop_enemies_begin, ":enemy_troop_enemy_count"),
          (troop_set_slot, ":result", ":cur_slot", ":troop_id"),
        (try_end),
      (try_end),
	  (call_script, "script_ms_init"),
      (try_for_range, ":unused", 0, 8),
        (call_script, "script_spawn_bandits"),
      (try_end),
	  	  
      (set_spawn_radius, 50),
      (try_for_range, ":unused", 0, 25),
        (spawn_around_party,"p_main_party","pt_looters"),
      (try_end),

	  (call_script, "script_re_init_castle_traders"),
      (try_for_range, ":unused", 0, 5),
        (call_script, "script_update_trade_good_prices"),
      (try_end),

      (call_script, "script_assign_lords_to_empty_centers"),

      (call_script, "script_update_mercenary_units_of_towns"),
	  (call_script, "script_update_mercen_units_of_castle"),
      (call_script, "script_update_companion_candidates_in_taverns"),
      (call_script, "script_update_ransom_brokers"),
	  (call_script, "script_update_ransom_brokers_units_of_castle"),
      (call_script, "script_update_tavern_travelers"),
	  (call_script, "script_update_tavern_travelers_units_of_castle"),
      (call_script, "script_update_tavern_minstels"),
      (call_script, "script_update_booksellers"),
	  (call_script, "script_update_booksellers_units_of_castle"),
      (try_for_range, ":village_no", villages_begin, villages_end),
        (call_script, "script_update_volunteer_troops_in_village", ":village_no"),
      (try_end),
      (try_for_range, ":cur_kingdom", kingdoms_begin, kingdoms_end),
        (call_script, "script_update_faction_notes", ":cur_kingdom"),
        (store_random_in_range, ":random_no", -60, 0),
        (faction_set_slot, ":faction_no", slot_faction_ai_last_offensive_time, ":random_no"),
      (try_end),
      (try_for_range, ":cur_troop", kingdom_heroes_begin, kingdom_heroes_end),
        (call_script, "script_update_troop_notes", ":cur_troop"),
      (try_end),
      (try_for_range, ":cur_center", centers_begin, centers_end),
        (call_script, "script_update_center_notes", ":cur_center"),
      (try_end),
      (call_script, "script_update_troop_notes", "trp_player"),

      (try_for_range, ":faction_no", kingdoms_begin, kingdoms_end),
        (call_script, "script_faction_recalculate_strength", ":faction_no"),
      (try_end),

##      (assign, "$players_kingdom", "fac_kingdom_1"),
##      (call_script, "script_give_center_to_lord", "p_town_7", "trp_player", 0),
##      (call_script, "script_give_center_to_lord", "p_town_16", "trp_player", 0),
####      (call_script, "script_give_center_to_lord", "p_castle_10", "trp_player", 0),
##      (assign, "$g_castle_requested_by_player", "p_castle_10"),
	  (call_script, "script_oim_init_Zagloba_dlg"), 
	  (call_script, "script_get_player_party_morale_values"),
      (party_set_morale, "p_main_party", 80),
	  
   	  (call_script, "script_oim_diplomacy_start_peace_between_kingdoms", "fac_kingdom_1", "fac_kingdom_3", 1),
	  (call_script, "script_oim_diplomacy_start_peace_between_kingdoms", "fac_kingdom_2", "fac_kingdom_5", 1),
	  (call_script, "script_oim_diplomacy_start_peace_between_kingdoms", "fac_kingdom_3", "fac_kingdom_4", 1),
	  (call_script, "script_oim_diplomacy_start_peace_between_kingdoms", "fac_kingdom_4", "fac_kingdom_5", 1),
	  (call_script, "script_oim_diplomacy_start_peace_between_kingdoms", "fac_kingdom_5", "fac_kingdom_2", 1),
	  (call_script, "script_oim_diplomacy_start_war_between_kingdoms", "fac_kingdom_1", "fac_kingdom_2", 1),	  
	  (call_script, "script_oim_diplomacy_start_war_between_kingdoms", "fac_kingdom_1", "fac_kingdom_4", 1),	  
	  (call_script, "script_oim_diplomacy_start_war_between_kingdoms", "fac_kingdom_1", "fac_kingdom_5", 1),	  
	  (call_script, "script_oim_diplomacy_start_war_between_kingdoms", "fac_kingdom_2", "fac_kingdom_3", 1),	  
	  (call_script, "script_oim_diplomacy_start_war_between_kingdoms", "fac_kingdom_2", "fac_kingdom_4", 1),	  
	  (call_script, "script_oim_diplomacy_start_war_between_kingdoms", "fac_kingdom_3", "fac_kingdom_5", 1),	  
      
	  (assign, "$g_oim_crimes_counter", 0),	  
	  (assign, "$oim_illness_low_food_variation_time", 0),
	  
	  (call_script, "script_oim_init_goods_prices"),
	  
	  #code 
	  (try_for_range, ":town_no", walled_centers_begin, walled_centers_end), 
		(try_for_range, ":upgrade_no", ms_towns_elements_start, ms_towns_elements_end),
		   (store_random_in_range, ":rnd", 0, 100),
		   (try_begin), 
			 (ge, ":rnd", 75),
			 (call_script, "script_add_upgrade_to_town", ":town_no", ":upgrade_no"),
		   (try_end), 	 
		(try_end),
		(try_for_range, ":upgrade_no", ms_towns_upgrade_start, "trp_town_upgrade_garrison_commander"),
		   (store_random_in_range, ":rnd", 0, 100),
		   (try_begin), 
			 (ge, ":rnd", 80),
			 (call_script, "script_add_upgrade_to_town", ":town_no", ":upgrade_no"),
		   (try_end), 	 
		(try_end),
	  (try_end),

	  (try_for_range, ":village_no", villages_begin, villages_end), 
		(try_for_range, ":upgrade_no", ms_village_elements_start, ms_village_elements_end),
		   (store_random_in_range, ":rnd", 0, 100),
		   (try_begin), 
			 (ge, ":rnd", 85),
			 (call_script, "script_add_upgrade_to_town", ":village_no", ":upgrade_no"),
		   (try_end), 	 
		(try_end),
		(try_for_range, ":upgrade_no", ms_village_upgrade_start, ms_village_upgrade_end),
		   (store_random_in_range, ":rnd", 0, 100),
		   (try_begin), 
			 (ge, ":rnd", 85),
			 (call_script, "script_add_upgrade_to_town", ":village_no", ":upgrade_no"),
		   (try_end), 	 
		(try_end),
	  (try_end),
	  
	  
       (try_for_range, ":center_no", walled_centers_begin, walled_centers_end),
           (party_set_slot, ":center_no", slot_center_has_prisoner_tower, 1),
           (party_set_slot, ":center_no", slot_center_has_messenger_post, 1),
       (try_end),
	   
       (try_for_range, ":center_no", villages_begin, villages_end),
           (party_set_slot, ":center_no", slot_center_has_manor, 1),
       (try_end),
	   
	   #construct baracks, stables, arsenal and some officers
	   #ms_init_recruitment_system
	   (call_script, "script_ms_init_recruitment_system", "p_town_1", 4), 
	   (call_script, "script_ms_init_recruitment_system", "p_town_2", 2), 
	   (call_script, "script_ms_init_recruitment_system", "p_town_3", 3), 
	   (call_script, "script_ms_init_recruitment_system", "p_town_4", 2), 
	   (call_script, "script_ms_init_recruitment_system", "p_town_5", 5), 
	   (call_script, "script_ms_init_recruitment_system", "p_town_6", 4), 
	   (call_script, "script_ms_init_recruitment_system", "p_town_7", 3), 
	   (call_script, "script_ms_init_recruitment_system", "p_town_8", 3), 
	   (call_script, "script_ms_init_recruitment_system", "p_town_9", 2), 
	   (call_script, "script_ms_init_recruitment_system", "p_town_10", 5), 
	   (call_script, "script_ms_init_recruitment_system", "p_town_11", 5), 
	   (call_script, "script_ms_init_recruitment_system", "p_town_12", 3), 
	   (call_script, "script_ms_init_recruitment_system", "p_town_13", 2), 
	   (call_script, "script_ms_init_recruitment_system", "p_town_14", 3), 
	   (call_script, "script_ms_init_recruitment_system", "p_town_15", 4), 
	   (call_script, "script_ms_init_recruitment_system", "p_town_16", 3), 
	   (call_script, "script_ms_init_recruitment_system", "p_town_17", 2), 
	   (call_script, "script_ms_init_recruitment_system", "p_town_18", 2), 
	   (call_script, "script_ms_init_recruitment_system", "p_castle_1", 1), 
	   (call_script, "script_ms_init_recruitment_system", "p_castle_2", 2), 
	   (call_script, "script_ms_init_recruitment_system", "p_castle_3", 1), 
	   (call_script, "script_ms_init_recruitment_system", "p_castle_4", 2), 
	   (call_script, "script_ms_init_recruitment_system", "p_castle_5", 2), 
	   (call_script, "script_ms_init_recruitment_system", "p_castle_6", 1), 
	   (call_script, "script_ms_init_recruitment_system", "p_castle_7", 2), 
	   (call_script, "script_ms_init_recruitment_system", "p_castle_8", 1), 
	   (call_script, "script_ms_init_recruitment_system", "p_castle_9", 2), 
	   (call_script, "script_ms_init_recruitment_system", "p_castle_10", 1), 
	   (call_script, "script_ms_init_recruitment_system", "p_castle_11", 1), 
	   (call_script, "script_ms_init_recruitment_system", "p_castle_12", 2), 
	   (call_script, "script_ms_init_recruitment_system", "p_castle_13", 1), 
	   (call_script, "script_ms_init_recruitment_system", "p_castle_14", 1), 
	   (call_script, "script_ms_init_recruitment_system", "p_castle_15", 2), 
	   (call_script, "script_ms_init_recruitment_system", "p_castle_16", 1), 
	   (call_script, "script_ms_init_recruitment_system", "p_castle_17", 1), 
	   (call_script, "script_ms_init_recruitment_system", "p_castle_18", 3), 
	   (call_script, "script_ms_init_recruitment_system", "p_castle_19", 1), 
	   (call_script, "script_ms_init_recruitment_system", "p_castle_20", 1), 
	   (call_script, "script_ms_init_recruitment_system", "p_castle_21", 4), 
	   (call_script, "script_ms_init_recruitment_system", "p_castle_22", 1), 
	   (call_script, "script_ms_init_recruitment_system", "p_castle_23", 1), 
	   (call_script, "script_ms_init_recruitment_system", "p_castle_24", 3), 
	   (call_script, "script_ms_init_recruitment_system", "p_castle_25", 1), 
	   (call_script, "script_ms_init_recruitment_system", "p_castle_26", 2), 
	   (call_script, "script_ms_init_recruitment_system", "p_castle_27", 1), 
	   (call_script, "script_ms_init_recruitment_system", "p_castle_28", 4), 
	   (call_script, "script_ms_init_recruitment_system", "p_castle_29", 1), 
	   (call_script, "script_ms_init_recruitment_system", "p_castle_30", 1), 
	   (call_script, "script_ms_init_recruitment_system", "p_castle_31", 2), 
	   (call_script, "script_ms_init_recruitment_system", "p_castle_32", 1), 
	   (call_script, "script_ms_init_recruitment_system", "p_castle_33", 2), 
	   (call_script, "script_ms_init_recruitment_system", "p_castle_34", 1), 
	   (call_script, "script_ms_init_recruitment_system", "p_castle_35", 3), 
	   (call_script, "script_ms_init_recruitment_system", "p_castle_36", 1), 
	   (call_script, "script_ms_init_recruitment_system", "p_castle_37", 2), 
	   (call_script, "script_ms_init_recruitment_system", "p_castle_38", 1), 
	   (call_script, "script_ms_init_recruitment_system", "p_castle_39", 3), 
	   (call_script, "script_ms_init_recruitment_system", "p_castle_40", 2), 
	   
	   #init info pages:
	   
      (troop_set_note_available, "trp_player", 1),
     
      (try_for_range, ":troop_no", "trp_knight_1_1", "trp_heroes_end"),
        (troop_set_note_available, ":troop_no", 1),
      (try_end),

  ##    (try_for_range, ":troop_no", kings_begin, kings_end),
  ##      (troop_set_note_available, ":troop_no", 1),
  ##    (try_end),
	##  
  ##    (try_for_range, ":troop_no", kingdom_heroes_begin, kingdom_heroes_end),
  ##      (troop_set_note_available, ":troop_no", 1),
  ##    (try_end),
  ##
	##  (try_for_range, ":troop_no", kingdom_ladies_begin, kingdom_ladies_end),
  ##      (troop_set_note_available, ":troop_no", 1),
  ##    (try_end),
	##  (troop_set_note_available, "trp_knight_1_1_wife", 0),
  ##
  ##    (try_for_range, ":troop_no", pretenders_begin, pretenders_end),
  ##      (troop_set_note_available, ":troop_no", 1),
  ##    (try_end),
	  
	  #Lady and companion notes become available as you meet/recruit them
	  
      (try_for_range, ":faction_no", 1, "fac_oim_outlaws"),
        (faction_set_note_available, ":faction_no", 0),
      (try_end),
	  
	  
      (try_for_range, ":faction_no", npc_kingdoms_begin, npc_kingdoms_end),
        (faction_set_note_available, ":faction_no", 1),
      (try_end),
      (faction_set_note_available, "fac_neutral", 0),
	  
      (try_for_range, ":party_no", centers_begin, centers_end),
        (party_set_note_available, ":party_no", 1),
      (try_end),	 

      (call_script, "script_init_products"), 	  	  	   
    ]),

  #script_game_get_use_string
  # This script is called from the game engine for getting using information text
  # INPUT: used_scene_prop_id  
  # OUTPUT: s0
  ("game_get_use_string",
   [
     (store_script_param, ":instance_id", 1),

     (prop_instance_get_scene_prop_kind, ":scene_prop_id", ":instance_id"),
     
     (try_begin),
       (this_or_next|eq, ":scene_prop_id", "spr_winch_b"),
       (eq, ":scene_prop_id", "spr_winch"),
       (assign, ":effected_object", "spr_portcullis"),
     (else_try),
       (this_or_next|eq, ":scene_prop_id", "spr_door_destructible"),
       (this_or_next|eq, ":scene_prop_id", "spr_castle_f_door_b"),
       (this_or_next|eq, ":scene_prop_id", "spr_castle_e_sally_door_a"),
       (this_or_next|eq, ":scene_prop_id", "spr_castle_f_sally_door_a"),
       (this_or_next|eq, ":scene_prop_id", "spr_earth_sally_gate_left"),
       (this_or_next|eq, ":scene_prop_id", "spr_earth_sally_gate_right"),
       (this_or_next|eq, ":scene_prop_id", "spr_viking_keep_destroy_sally_door_left"),
       (this_or_next|eq, ":scene_prop_id", "spr_viking_keep_destroy_sally_door_right"),
       (this_or_next|eq, ":scene_prop_id", "spr_castle_f_door_a"),
       (this_or_next|eq, ":scene_prop_id", "spr_siege_ladder_move_6m"),
       (this_or_next|eq, ":scene_prop_id", "spr_siege_ladder_move_8m"),
       (this_or_next|eq, ":scene_prop_id", "spr_siege_ladder_move_10m"),
       (this_or_next|eq, ":scene_prop_id", "spr_siege_ladder_move_12m"),
       (eq, ":scene_prop_id", "spr_siege_ladder_move_14m"),
       (assign, ":effected_object", ":scene_prop_id"),
     (try_end),   

     (scene_prop_get_slot, ":item_situation", ":instance_id", scene_prop_open_or_close_slot),
   
     (try_begin), #opening/closing portcullis
       (eq, ":effected_object", "spr_portcullis"),

       (try_begin),
         (eq, ":item_situation", 0),
         (str_store_string, s0, "str_open_gate"),
       (else_try), 
         (str_store_string, s0, "str_close_gate"),
       (try_end),
     (else_try), #opening/closing door
       (this_or_next|eq, ":effected_object", "spr_door_destructible"),
       (this_or_next|eq, ":effected_object", "spr_castle_f_door_b"),
       (this_or_next|eq, ":effected_object", "spr_castle_e_sally_door_a"),
       (this_or_next|eq, ":effected_object", "spr_castle_f_sally_door_a"),
       (this_or_next|eq, ":effected_object", "spr_earth_sally_gate_left"),
       (this_or_next|eq, ":effected_object", "spr_earth_sally_gate_right"),
       (this_or_next|eq, ":effected_object", "spr_viking_keep_destroy_sally_door_left"),
       (this_or_next|eq, ":effected_object", "spr_viking_keep_destroy_sally_door_right"),
       (eq, ":effected_object", "spr_castle_f_door_a"),

       (try_begin),
         (eq, ":item_situation", 0),
         (str_store_string, s0, "str_open_door"),
       (else_try),
         (str_store_string, s0, "str_close_door"),
       (try_end),
     (else_try), #raising/dropping ladder
       (try_begin),
         (eq, ":item_situation", 0),
         (str_store_string, s0, "str_raise_ladder"),
       (else_try),
         (str_store_string, s0, "str_drop_ladder"),
       (try_end),
     (try_end),
   ]),

  #script_game_quick_start
  # This script is called from the game engine for initializing the global variables for tutorial, multiplayer and custom battle modes.
  # INPUT:
  # none
  # OUTPUT:
  # none
  ("game_quick_start",
    [
      #for quick battle mode
      (assign, "$g_is_quick_battle", 0),
      (assign, "$g_quick_battle_game_type", 0),
      (assign, "$g_quick_battle_troop", quick_battle_troops_begin),
      (assign, "$g_quick_battle_map", quick_battle_scenes_begin),
      (assign, "$g_quick_battle_team_1_faction", "fac_kingdom_1"),
      (assign, "$g_quick_battle_team_2_faction", "fac_kingdom_2"),
      (assign, "$g_quick_battle_army_1_size", 25),
      (assign, "$g_quick_battle_army_2_size", 25),

      (faction_set_slot, "fac_outlaws", slot_faction_quick_battle_tier_1_infantry, "trp_mountain_bandit"),
      (faction_set_slot, "fac_outlaws", slot_faction_quick_battle_tier_2_infantry, "trp_sea_raider"),
      (faction_set_slot, "fac_outlaws", slot_faction_quick_battle_tier_1_archer, "trp_forest_bandit"),
      (faction_set_slot, "fac_outlaws", slot_faction_quick_battle_tier_2_archer, "trp_forest_bandit"),
      (faction_set_slot, "fac_outlaws", slot_faction_quick_battle_tier_1_cavalry, "trp_steppe_bandit"),
      (faction_set_slot, "fac_outlaws", slot_faction_quick_battle_tier_2_cavalry, "trp_steppe_bandit"),
      (faction_set_slot, "fac_kingdom_1", slot_faction_quick_battle_tier_1_infantry, "trp_swadian_footman"),
      (faction_set_slot, "fac_kingdom_1", slot_faction_quick_battle_tier_2_infantry, "trp_swadian_infantry"),
      (faction_set_slot, "fac_kingdom_1", slot_faction_quick_battle_tier_1_archer, "trp_swadian_skirmisher"),
      (faction_set_slot, "fac_kingdom_1", slot_faction_quick_battle_tier_2_archer, "trp_swadian_crossbowman"),
      (faction_set_slot, "fac_kingdom_1", slot_faction_quick_battle_tier_1_cavalry, "trp_swadian_man_at_arms"),
      (faction_set_slot, "fac_kingdom_1", slot_faction_quick_battle_tier_2_cavalry, "trp_swadian_knight"),
      (faction_set_slot, "fac_kingdom_2", slot_faction_quick_battle_tier_1_infantry, "trp_vaegir_footman"),
      (faction_set_slot, "fac_kingdom_2", slot_faction_quick_battle_tier_2_infantry, "trp_vaegir_infantry"),
      (faction_set_slot, "fac_kingdom_2", slot_faction_quick_battle_tier_1_archer, "trp_vaegir_skirmisher"),
      (faction_set_slot, "fac_kingdom_2", slot_faction_quick_battle_tier_2_archer, "trp_vaegir_archer"),
      (faction_set_slot, "fac_kingdom_2", slot_faction_quick_battle_tier_1_cavalry, "trp_vaegir_horseman"),
      (faction_set_slot, "fac_kingdom_2", slot_faction_quick_battle_tier_2_cavalry, "trp_vaegir_knight"),
      (faction_set_slot, "fac_kingdom_3", slot_faction_quick_battle_tier_1_infantry, "trp_khergit_dismounted_lancer_multiplayer_ai"),
      (faction_set_slot, "fac_kingdom_3", slot_faction_quick_battle_tier_2_infantry, "trp_khergit_dismounted_lancer_multiplayer_ai"),
      (faction_set_slot, "fac_kingdom_3", slot_faction_quick_battle_tier_1_archer, "trp_khergit_horse_archer"),
      (faction_set_slot, "fac_kingdom_3", slot_faction_quick_battle_tier_2_archer, "trp_khergit_veteran_horse_archer"),
      (faction_set_slot, "fac_kingdom_3", slot_faction_quick_battle_tier_1_cavalry, "trp_khergit_lancer"),
      (faction_set_slot, "fac_kingdom_3", slot_faction_quick_battle_tier_2_cavalry, "trp_khergit_lancer"),
      (faction_set_slot, "fac_kingdom_4", slot_faction_quick_battle_tier_1_infantry, "trp_nord_footman"),
      (faction_set_slot, "fac_kingdom_4", slot_faction_quick_battle_tier_2_infantry, "trp_nord_trained_footman"),
      (faction_set_slot, "fac_kingdom_4", slot_faction_quick_battle_tier_1_archer, "trp_nord_archer"),
      (faction_set_slot, "fac_kingdom_4", slot_faction_quick_battle_tier_2_archer, "trp_nord_veteran_archer"),
      (faction_set_slot, "fac_kingdom_4", slot_faction_quick_battle_tier_1_cavalry, "trp_nord_scout_multiplayer_ai"),
      (faction_set_slot, "fac_kingdom_4", slot_faction_quick_battle_tier_2_cavalry, "trp_nord_scout_multiplayer_ai"),
      (faction_set_slot, "fac_kingdom_5", slot_faction_quick_battle_tier_1_infantry, "trp_rhodok_veteran_spearman"),
      (faction_set_slot, "fac_kingdom_5", slot_faction_quick_battle_tier_2_infantry, "trp_rhodok_trained_crossbowman"),
      (faction_set_slot, "fac_kingdom_5", slot_faction_quick_battle_tier_1_archer, "trp_rhodok_sergeant"),
      (faction_set_slot, "fac_kingdom_5", slot_faction_quick_battle_tier_2_archer, "trp_rhodok_veteran_spearman"),
      (faction_set_slot, "fac_kingdom_5", slot_faction_quick_battle_tier_1_cavalry, "trp_rhodok_scout_multiplayer_ai"),
      (faction_set_slot, "fac_kingdom_5", slot_faction_quick_battle_tier_2_cavalry, "trp_rhodok_scout_multiplayer_ai"),
      #(faction_set_slot, "fac_kingdom_6", slot_faction_quick_battle_tier_1_infantry, "trp_sarranid_veteran_footman"),
      #(faction_set_slot, "fac_kingdom_6", slot_faction_quick_battle_tier_2_infantry, "trp_sarranid_infantry"),
      #(faction_set_slot, "fac_kingdom_6", slot_faction_quick_battle_tier_1_archer, "trp_sarranid_skirmisher"),
      #(faction_set_slot, "fac_kingdom_6", slot_faction_quick_battle_tier_2_archer, "trp_sarranid_archer"),
      #(faction_set_slot, "fac_kingdom_6", slot_faction_quick_battle_tier_1_cavalry, "trp_sarranid_horseman"),
      #(faction_set_slot, "fac_kingdom_6", slot_faction_quick_battle_tier_2_cavalry, "trp_sarranid_mamluke"),

      #for multiplayer mode
      (assign, "$g_multiplayer_selected_map", multiplayer_scenes_begin),
      (assign, "$g_multiplayer_respawn_period", 5),
      (assign, "$g_multiplayer_round_max_seconds", 600),
      (assign, "$g_multiplayer_game_max_minutes", 30),
      (assign, "$g_multiplayer_game_max_points", 300),
	  (assign, "$g_multiplayer_squad_size", 10),
	  (assign, "$g_multiplayer_team_ratio", 3),
	  (assign, "$g_multiplayer_cbf_enable_squad_ratio", 1),
	  

      (server_get_renaming_server_allowed, "$g_multiplayer_renaming_server_allowed"),
      (server_get_changing_game_type_allowed, "$g_multiplayer_changing_game_type_allowed"),
      (assign, "$g_multiplayer_point_gained_from_flags", 100),
      (assign, "$g_multiplayer_point_gained_from_capturing_flag", 5),
      (assign, "$g_multiplayer_game_type", 0),
	  (assign, "$g_multiplayer_is_game_type_captain", 0),
      (assign, "$g_multiplayer_team_1_faction", "fac_kingdom_1"),
      (assign, "$g_multiplayer_team_2_faction", "fac_kingdom_2"),
      (assign, "$g_multiplayer_next_team_1_faction", "$g_multiplayer_team_1_faction"),
      (assign, "$g_multiplayer_next_team_2_faction", "$g_multiplayer_team_2_faction"),
      (assign, "$g_multiplayer_num_bots_team_1", 0),
      (assign, "$g_multiplayer_num_bots_team_2", 0),
      (assign, "$g_multiplayer_number_of_respawn_count", 0),
      (assign, "$g_multiplayer_num_bots_voteable", 50),
      (assign, "$g_multiplayer_max_num_bots", 101),
      (assign, "$g_multiplayer_factions_voteable", 1),
      (assign, "$g_multiplayer_maps_voteable", 1),
      (assign, "$g_multiplayer_kick_voteable", 1),
      (assign, "$g_multiplayer_ban_voteable", 1),
      (assign, "$g_multiplayer_valid_vote_ratio", 51), #more than 50 percent
      (assign, "$g_multiplayer_auto_team_balance_limit", 3), #auto balance when difference is more than 2
      (assign, "$g_multiplayer_player_respawn_as_bot", 1),
      (assign, "$g_multiplayer_stats_chart_opened_manually", 0),
      (assign, "$g_multiplayer_mission_end_screen", 0),
      (assign, "$g_multiplayer_ready_for_spawning_agent", 1),
      (assign, "$g_multiplayer_welcome_message_shown", 0),
      (assign, "$g_multiplayer_allow_player_banners", 1),
      (assign, "$g_multiplayer_force_default_armor", 1),
      (assign, "$g_multiplayer_disallow_ranged_weapons", 0),
      (assign, "$g_multiplayer_disallow_granades", 0),

      (assign, "$g_multiplayer_initial_gold_multiplier", 100),
      (assign, "$g_multiplayer_battle_earnings_multiplier", 100),
      (assign, "$g_multiplayer_round_earnings_multiplier", 100),
  
      #faction banners
      (faction_set_slot, "fac_kingdom_1", slot_faction_banner, "mesh_banner_kingdom_a"),
      (faction_set_slot, "fac_kingdom_2", slot_faction_banner, "mesh_banner_kingdom_f"),
      (faction_set_slot, "fac_kingdom_3", slot_faction_banner, "mesh_banner_kingdom_c"),
      (faction_set_slot, "fac_kingdom_4", slot_faction_banner, "mesh_banner_kingdom_b"),
      (faction_set_slot, "fac_kingdom_5", slot_faction_banner, "mesh_banner_kingdom_d"),
      #(faction_set_slot, "fac_kingdom_6", slot_faction_banner, "mesh_banner_kingdom_e"),

      (try_for_range, ":cur_item", all_items_begin, all_items_end),
        (try_for_range, ":cur_faction", npc_kingdoms_begin, npc_kingdoms_end),
          (store_sub, ":faction_index", ":cur_faction", npc_kingdoms_begin),
          (val_add, ":faction_index", slot_item_multiplayer_faction_price_multipliers_begin),
          (item_set_slot, ":cur_item", ":faction_index", 100), #100 is the default price multiplier
        (try_end),
      (try_end),
      (store_sub, ":swadian_price_slot", "fac_kingdom_1", npc_kingdoms_begin),
      (val_add, ":swadian_price_slot", slot_item_multiplayer_faction_price_multipliers_begin),
      (store_sub, ":vaegir_price_slot", "fac_kingdom_2", npc_kingdoms_begin),
      (val_add, ":vaegir_price_slot", slot_item_multiplayer_faction_price_multipliers_begin),
      (store_sub, ":khergit_price_slot", "fac_kingdom_3", npc_kingdoms_begin),
      (val_add, ":khergit_price_slot", slot_item_multiplayer_faction_price_multipliers_begin),
      (store_sub, ":nord_price_slot", "fac_kingdom_4", npc_kingdoms_begin),
      (val_add, ":nord_price_slot", slot_item_multiplayer_faction_price_multipliers_begin),
      (store_sub, ":rhodok_price_slot", "fac_kingdom_5", npc_kingdoms_begin),
      (val_add, ":rhodok_price_slot", slot_item_multiplayer_faction_price_multipliers_begin),
      #(store_sub, ":sarranid_price_slot", "fac_kingdom_6", npc_kingdoms_begin),
      #(val_add, ":sarranid_price_slot", slot_item_multiplayer_faction_price_multipliers_begin),

#      (item_set_slot, "itm_steppe_horse", ":khergit_price_slot", 50),

      #arrows
      (item_set_slot, "itm_bad_arrows", slot_item_multiplayer_item_class, multi_item_class_type_arrow),      
      (item_set_slot, "itm_norm_arrows", slot_item_multiplayer_item_class, multi_item_class_type_arrow),      
      (item_set_slot, "itm_good_arrows", slot_item_multiplayer_item_class, multi_item_class_type_arrow),
      #bolts
      (item_set_slot, "itm_bad_bullets", slot_item_multiplayer_item_class, multi_item_class_type_bolt),
      (item_set_slot, "itm_norm_bullets", slot_item_multiplayer_item_class, multi_item_class_type_bolt),
      (item_set_slot, "itm_good_bullets", slot_item_multiplayer_item_class, multi_item_class_type_bolt),
      #bows
      (item_set_slot, "itm_bad_luk", slot_item_multiplayer_item_class, multi_item_class_type_bow),
      (item_set_slot, "itm_norm_luk", slot_item_multiplayer_item_class, multi_item_class_type_bow),
      (item_set_slot, "itm_gud_luk", slot_item_multiplayer_item_class, multi_item_class_type_bow),
      (item_set_slot, "itm_uber_luk", slot_item_multiplayer_item_class, multi_item_class_type_bow),
      
      (item_set_slot, "itm_bad_pistol", slot_item_multiplayer_item_class, multi_item_class_type_throwing),
      (item_set_slot, "itm_norm_pistol", slot_item_multiplayer_item_class, multi_item_class_type_throwing),
      (item_set_slot, "itm_fast_pistol", slot_item_multiplayer_item_class, multi_item_class_type_throwing),
      (item_set_slot, "itm_power_pistol", slot_item_multiplayer_item_class, multi_item_class_type_throwing),
      (item_set_slot, "itm_uber_pistol", slot_item_multiplayer_item_class, multi_item_class_type_throwing),
      
      (item_set_slot, "itm_samopal_m", slot_item_multiplayer_item_class, multi_item_class_type_throwing),
      (item_set_slot, "itm_bad_karabin", slot_item_multiplayer_item_class, multi_item_class_type_throwing),
      (item_set_slot, "itm_norm_karabin", slot_item_multiplayer_item_class, multi_item_class_type_throwing),
      (item_set_slot, "itm_good_karabin", slot_item_multiplayer_item_class, multi_item_class_type_throwing),
      (item_set_slot, "itm_uber_karabin", slot_item_multiplayer_item_class, multi_item_class_type_throwing),
      
      (item_set_slot, "itm_bad_musket", slot_item_multiplayer_item_class, multi_item_class_type_crossbow),
      (item_set_slot, "itm_norm_musket", slot_item_multiplayer_item_class, multi_item_class_type_crossbow),
      (item_set_slot, "itm_good_musket_m", slot_item_multiplayer_item_class, multi_item_class_type_crossbow),
      (item_set_slot, "itm_uber_mushket", slot_item_multiplayer_item_class, multi_item_class_type_crossbow),
      (item_set_slot, "itm_t_bad_musket", slot_item_multiplayer_item_class, multi_item_class_type_crossbow),
      (item_set_slot, "itm_t_norm_musket", slot_item_multiplayer_item_class, multi_item_class_type_crossbow),
      (item_set_slot, "itm_t_good_musket", slot_item_multiplayer_item_class, multi_item_class_type_crossbow),
      (item_set_slot, "itm_t_uber_musket", slot_item_multiplayer_item_class, multi_item_class_type_crossbow),
      (item_set_slot, "itm_m_dwustwol_karabin", slot_item_multiplayer_item_class, multi_item_class_type_throwing),
      (item_set_slot, "itm_m_dwustwol_pistol", slot_item_multiplayer_item_class, multi_item_class_type_throwing),
	  
	  #granades:
	  (item_set_slot, "itm_m_granata_small", slot_item_multiplayer_item_class, multi_item_class_type_bolt),
	  

      #swords
      (item_set_slot, "itm_bad_shpaga", slot_item_multiplayer_item_class, multi_item_class_type_sword),
      (item_set_slot, "itm_norm_shpaga", slot_item_multiplayer_item_class, multi_item_class_type_sword),
      (item_set_slot, "itm_good_shpaga_m", slot_item_multiplayer_item_class, multi_item_class_type_sword),
      (item_set_slot, "itm_bad_palash", slot_item_multiplayer_item_class, multi_item_class_type_sword),
      (item_set_slot, "itm_norm_palash", slot_item_multiplayer_item_class, multi_item_class_type_sword),
      (item_set_slot, "itm_good_palash_m", slot_item_multiplayer_item_class, multi_item_class_type_sword),
      (item_set_slot, "itm_bad_p_palash", slot_item_multiplayer_item_class, multi_item_class_type_sword),
      (item_set_slot, "itm_norm_p_palash", slot_item_multiplayer_item_class, multi_item_class_type_sword),
      (item_set_slot, "itm_good_p_palash", slot_item_multiplayer_item_class, multi_item_class_type_sword),
      (item_set_slot, "itm_bad_sablya_a", slot_item_multiplayer_item_class, multi_item_class_type_sword),
      (item_set_slot, "itm_norm_sablya_a", slot_item_multiplayer_item_class, multi_item_class_type_sword),
      (item_set_slot, "itm_good_sablya_a", slot_item_multiplayer_item_class, multi_item_class_type_sword),
      (item_set_slot, "itm_bad_sablya_b", slot_item_multiplayer_item_class, multi_item_class_type_sword),
      (item_set_slot, "itm_norm_sablya_b", slot_item_multiplayer_item_class, multi_item_class_type_sword),
      (item_set_slot, "itm_good_sablya_b", slot_item_multiplayer_item_class, multi_item_class_type_sword),
      (item_set_slot, "itm_t_bad_sablya_a", slot_item_multiplayer_item_class, multi_item_class_type_sword),
      (item_set_slot, "itm_t_norm_sablya_a", slot_item_multiplayer_item_class, multi_item_class_type_sword),
       (item_set_slot, "itm_t_good_sablya_a", slot_item_multiplayer_item_class, multi_item_class_type_sword),     
       (item_set_slot, "itm_norn_k_shablya", slot_item_multiplayer_item_class, multi_item_class_type_sword),     
       (item_set_slot, "itm_good_k_shablya", slot_item_multiplayer_item_class, multi_item_class_type_sword),     
       (item_set_slot, "itm_m_yatagan_bad", slot_item_multiplayer_item_class, multi_item_class_type_sword),     
       (item_set_slot, "itm_m_yatagan_good", slot_item_multiplayer_item_class, multi_item_class_type_sword),     

       (item_set_slot, "itm_m_kleymor", slot_item_multiplayer_item_class, multi_item_class_type_two_handed_sword),      
      (item_set_slot, "itm_m_twohand_sword", slot_item_multiplayer_item_class, multi_item_class_type_two_handed_sword),
	  
      #axe
      (item_set_slot, "itm_bad_toporik", slot_item_multiplayer_item_class, multi_item_class_type_axe),
      (item_set_slot, "itm_good_toporik", slot_item_multiplayer_item_class, multi_item_class_type_axe),
	  
      (item_set_slot, "itm_bad_berdish", slot_item_multiplayer_item_class, multi_item_class_type_two_handed_sword),
      (item_set_slot, "itm_good_berdish", slot_item_multiplayer_item_class, multi_item_class_type_two_handed_sword),
	  
      #blunt
      (item_set_slot, "itm_bad_bulava", slot_item_multiplayer_item_class, multi_item_class_type_blunt),
      (item_set_slot, "itm_good_bulava", slot_item_multiplayer_item_class, multi_item_class_type_blunt),
	  
	  #Cleavers
      (item_set_slot, "itm_bad_chekan", slot_item_multiplayer_item_class, multi_item_class_type_blunt),
      (item_set_slot, "itm_good_chekan", slot_item_multiplayer_item_class, multi_item_class_type_blunt),
	  
	  
      #spears
      (item_set_slot, "itm_bad_spear", slot_item_multiplayer_item_class, multi_item_class_type_spear),
      (item_set_slot, "itm_good_spear", slot_item_multiplayer_item_class, multi_item_class_type_spear),
      (item_set_slot, "itm_bad_pike", slot_item_multiplayer_item_class, multi_item_class_type_spear),
      (item_set_slot, "itm_norm_pika", slot_item_multiplayer_item_class, multi_item_class_type_spear),
      (item_set_slot, "itm_good_pike_m", slot_item_multiplayer_item_class, multi_item_class_type_spear),
	  
      (item_set_slot, "itm_m_sovnya", slot_item_multiplayer_item_class, multi_item_class_type_sword),
      (item_set_slot, "itm_m_alebarda", slot_item_multiplayer_item_class, multi_item_class_type_two_handed_sword),
	  
      #lance
      (item_set_slot, "itm_bad_lance", slot_item_multiplayer_item_class, multi_item_class_type_lance),
      (item_set_slot, "itm_norm_lance", slot_item_multiplayer_item_class, multi_item_class_type_lance),
      (item_set_slot, "itm_good_lance", slot_item_multiplayer_item_class, multi_item_class_type_lance),
      (item_set_slot, "itm_gusar_lance", slot_item_multiplayer_item_class, multi_item_class_type_lance),
      #shields
	  
      (item_set_slot, "itm_bad_shield", slot_item_multiplayer_item_class, multi_item_class_type_small_shield),
      (item_set_slot, "itm_norm_shield", slot_item_multiplayer_item_class, multi_item_class_type_small_shield),
      (item_set_slot, "itm_good_shield", slot_item_multiplayer_item_class, multi_item_class_type_small_shield),
      (item_set_slot, "itm_stal_shield", slot_item_multiplayer_item_class, multi_item_class_type_small_shield),
      (item_set_slot, "itm_uber_shield", slot_item_multiplayer_item_class, multi_item_class_type_small_shield),
	  
       #armors
      (item_set_slot, "itm_m_mosk_pehota_forma", slot_item_multiplayer_item_class, multi_item_class_type_light_armor),
      (item_set_slot, "itm_m_mosk_strelok_forma", slot_item_multiplayer_item_class, multi_item_class_type_light_armor),
      (item_set_slot, "itm_m_mosk_kava_forma", slot_item_multiplayer_item_class, multi_item_class_type_light_armor),
      (item_set_slot, "itm_m_mosk_bad_armor", slot_item_multiplayer_item_class, multi_item_class_type_light_armor),
      (item_set_slot, "itm_m_mosk_light_armor", slot_item_multiplayer_item_class, multi_item_class_type_light_armor),
      (item_set_slot, "itm_m_mosk_norm_armor", slot_item_multiplayer_item_class, multi_item_class_type_light_armor),
      (item_set_slot, "itm_m_mosk_good_armor", slot_item_multiplayer_item_class, multi_item_class_type_light_armor),
      (item_set_slot, "itm_m_pol_pehota_forma", slot_item_multiplayer_item_class, multi_item_class_type_light_armor),
      (item_set_slot, "itm_m_pol_strelok_forma", slot_item_multiplayer_item_class, multi_item_class_type_light_armor),
      (item_set_slot, "itm_m_pol_kava_forma", slot_item_multiplayer_item_class, multi_item_class_type_light_armor),
      (item_set_slot, "itm_m_pol_light_armor", slot_item_multiplayer_item_class, multi_item_class_type_light_armor),
      (item_set_slot, "itm_m_pol_norm_armor", slot_item_multiplayer_item_class, multi_item_class_type_light_armor),
      (item_set_slot, "itm_m_pol_good_k_armor", slot_item_multiplayer_item_class, multi_item_class_type_light_armor),
      (item_set_slot, "itm_m_pol_good_p_armor", slot_item_multiplayer_item_class, multi_item_class_type_light_armor),
      (item_set_slot, "itm_m_ukr_pehota_forma", slot_item_multiplayer_item_class, multi_item_class_type_light_armor),
      (item_set_slot, "itm_m_ukr_strelok_forma", slot_item_multiplayer_item_class, multi_item_class_type_light_armor),
      (item_set_slot, "itm_m_ukr_kava_forma", slot_item_multiplayer_item_class, multi_item_class_type_light_armor),
      (item_set_slot, "itm_m_ukr_bad_armor", slot_item_multiplayer_item_class, multi_item_class_type_light_armor),
      (item_set_slot, "itm_m_ukr_light_armor", slot_item_multiplayer_item_class, multi_item_class_type_light_armor),
      (item_set_slot, "itm_m_ukr_norm_armor", slot_item_multiplayer_item_class, multi_item_class_type_light_armor),
      (item_set_slot, "itm_m_ukr_good_armor", slot_item_multiplayer_item_class, multi_item_class_type_light_armor),
      (item_set_slot, "itm_m_ttr_archer_forma", slot_item_multiplayer_item_class, multi_item_class_type_light_armor),
      (item_set_slot, "itm_m_ttr_kava_forma", slot_item_multiplayer_item_class, multi_item_class_type_light_armor),
      (item_set_slot, "itm_m_ttr_bad_armor_a", slot_item_multiplayer_item_class, multi_item_class_type_light_armor),
      (item_set_slot, "itm_m_ttr_bad_armor_b", slot_item_multiplayer_item_class, multi_item_class_type_light_armor),
      (item_set_slot, "itm_m_ttr_light_armor_a", slot_item_multiplayer_item_class, multi_item_class_type_light_armor),
      (item_set_slot, "itm_m_ttr_light_armor_b", slot_item_multiplayer_item_class, multi_item_class_type_light_armor),
      (item_set_slot, "itm_m_ttr_norm_armor", slot_item_multiplayer_item_class, multi_item_class_type_light_armor),
      (item_set_slot, "itm_m_ttr_good_armor", slot_item_multiplayer_item_class, multi_item_class_type_light_armor),
      (item_set_slot, "itm_m_swed_pehot_forma", slot_item_multiplayer_item_class, multi_item_class_type_light_armor),
      (item_set_slot, "itm_m_swed_strelok_forma", slot_item_multiplayer_item_class, multi_item_class_type_light_armor),
      (item_set_slot, "itm_m_swed_kava_forma", slot_item_multiplayer_item_class, multi_item_class_type_light_armor),
      (item_set_slot, "itm_m_swed_light_armor", slot_item_multiplayer_item_class, multi_item_class_type_light_armor),
      (item_set_slot, "itm_m_swed_norm_armor", slot_item_multiplayer_item_class, multi_item_class_type_light_armor),
      (item_set_slot, "itm_m_swed_good_p_armor", slot_item_multiplayer_item_class, multi_item_class_type_light_armor),
      (item_set_slot, "itm_m_swed_uber_p_armor", slot_item_multiplayer_item_class, multi_item_class_type_light_armor),
      (item_set_slot, "itm_m_swed_good_k_armor", slot_item_multiplayer_item_class, multi_item_class_type_light_armor),
      (item_set_slot, "itm_m_mosk_notsogood_armor", slot_item_multiplayer_item_class, multi_item_class_type_light_armor),
      (item_set_slot, "itm_m_pol_uber_p_armor", slot_item_multiplayer_item_class, multi_item_class_type_light_armor),
      (item_set_slot, "itm_m_pol_uber_k_armor", slot_item_multiplayer_item_class, multi_item_class_type_light_armor),
       (item_set_slot, "itm_m_yanichar_forma", slot_item_multiplayer_item_class, multi_item_class_type_light_armor),
 
  
      #boots
      (item_set_slot, "itm_bad_boots", slot_item_multiplayer_item_class, multi_item_class_type_light_foot),
      (item_set_slot, "itm_bad_boots_mosk", slot_item_multiplayer_item_class, multi_item_class_type_light_foot),
      (item_set_slot, "itm_bad_boots_swed", slot_item_multiplayer_item_class, multi_item_class_type_light_foot),
      (item_set_slot, "itm_bad_boots_k", slot_item_multiplayer_item_class, multi_item_class_type_light_foot),
      (item_set_slot, "itm_norm_boots_k", slot_item_multiplayer_item_class, multi_item_class_type_light_foot),
      (item_set_slot, "itm_good_boots_k", slot_item_multiplayer_item_class, multi_item_class_type_light_foot),
      (item_set_slot, "itm_bad_boots_p", slot_item_multiplayer_item_class, multi_item_class_type_light_foot),
      (item_set_slot, "itm_norm_boots_p", slot_item_multiplayer_item_class, multi_item_class_type_light_foot),
      (item_set_slot, "itm_good_boots_p", slot_item_multiplayer_item_class, multi_item_class_type_light_foot),
      (item_set_slot, "itm_bad_botforts", slot_item_multiplayer_item_class, multi_item_class_type_light_foot),
      (item_set_slot, "itm_norm_botforts", slot_item_multiplayer_item_class, multi_item_class_type_light_foot),
      (item_set_slot, "itm_good_botforts", slot_item_multiplayer_item_class, multi_item_class_type_light_foot),
      (item_set_slot, "itm_good_boots_ttr", slot_item_multiplayer_item_class, multi_item_class_type_light_foot),
      (item_set_slot, "itm_m_janissary_tapki", slot_item_multiplayer_item_class, multi_item_class_type_light_foot),
	  
      #helmets
	  
	  
      (item_set_slot, "itm_m_swed_shapka", slot_item_multiplayer_item_class, multi_item_class_type_light_helm),
      (item_set_slot, "itm_m_swed_light_helmet", slot_item_multiplayer_item_class, multi_item_class_type_light_helm),
      (item_set_slot, "itm_m_swed_norm_p_helmet", slot_item_multiplayer_item_class, multi_item_class_type_light_helm),
      (item_set_slot, "itm_m_swed_good_k_helmet", slot_item_multiplayer_item_class, multi_item_class_type_light_helm),
      (item_set_slot, "itm_m_mosk_shapka", slot_item_multiplayer_item_class, multi_item_class_type_light_helm),
      (item_set_slot, "itm_m_mosk_light_helmet", slot_item_multiplayer_item_class, multi_item_class_type_light_helm),
      (item_set_slot, "itm_m_mosk_norm_helmet", slot_item_multiplayer_item_class, multi_item_class_type_light_helm),
      (item_set_slot, "itm_m_mosk_good_helmet", slot_item_multiplayer_item_class, multi_item_class_type_light_helm),
      (item_set_slot, "itm_m_mosk_uber_helmet", slot_item_multiplayer_item_class, multi_item_class_type_light_helm),
      (item_set_slot, "itm_m_pol_shapka", slot_item_multiplayer_item_class, multi_item_class_type_light_helm),
      (item_set_slot, "itm_m_pol_good_shapka", slot_item_multiplayer_item_class, multi_item_class_type_light_helm),
      (item_set_slot, "itm_m_pol_light_helmet", slot_item_multiplayer_item_class, multi_item_class_type_light_helm),
      (item_set_slot, "itm_m_pol_norm_helmet", slot_item_multiplayer_item_class, multi_item_class_type_light_helm),
      (item_set_slot, "itm_m_pol_good_helmet", slot_item_multiplayer_item_class, multi_item_class_type_light_helm),
      (item_set_slot, "itm_m_ukr_shapka", slot_item_multiplayer_item_class, multi_item_class_type_light_helm),
      (item_set_slot, "itm_m_ukr_light_helmet", slot_item_multiplayer_item_class, multi_item_class_type_light_helm),
      (item_set_slot, "itm_m_ukr_norm_helmet", slot_item_multiplayer_item_class, multi_item_class_type_light_helm),
      (item_set_slot, "itm_m_ttr_shapka", slot_item_multiplayer_item_class, multi_item_class_type_light_helm),
      (item_set_slot, "itm_m_ttr_light_helmet", slot_item_multiplayer_item_class, multi_item_class_type_light_helm),
      (item_set_slot, "itm_m_ttr_norm_helmet", slot_item_multiplayer_item_class, multi_item_class_type_light_helm),
      (item_set_slot, "itm_m_ttr_good_helmet", slot_item_multiplayer_item_class, multi_item_class_type_light_helm),
      (item_set_slot, "itm_m_pol_uber_helmet", slot_item_multiplayer_item_class, multi_item_class_type_light_helm),
      (item_set_slot, "itm_m_swed_good_p_helmet", slot_item_multiplayer_item_class, multi_item_class_type_light_helm),
      (item_set_slot, "itm_m_janissar_hat", slot_item_multiplayer_item_class, multi_item_class_type_light_helm),

	  #gloves
      (item_set_slot, "itm_bad_gloves", slot_item_multiplayer_item_class, multi_item_class_type_glove),           
      (item_set_slot, "itm_norm_gloves", slot_item_multiplayer_item_class, multi_item_class_type_glove),           
      (item_set_slot, "itm_good_gloves", slot_item_multiplayer_item_class, multi_item_class_type_glove),           
      (item_set_slot, "itm_uber_gloves", slot_item_multiplayer_item_class, multi_item_class_type_glove),
      #horses
      (item_set_slot, "itm_very_bad_horse", slot_item_multiplayer_item_class, multi_item_class_type_horse),
      (item_set_slot, "itm_bad_horse", slot_item_multiplayer_item_class, multi_item_class_type_horse),
      (item_set_slot, "itm_norm_horse", slot_item_multiplayer_item_class, multi_item_class_type_horse),
      (item_set_slot, "itm_good_horse", slot_item_multiplayer_item_class, multi_item_class_type_horse),
      (item_set_slot, "itm_fast_horse", slot_item_multiplayer_item_class, multi_item_class_type_horse),
      (item_set_slot, "itm_tank_horse", slot_item_multiplayer_item_class, multi_item_class_type_horse),
      (item_set_slot, "itm_uber_horse", slot_item_multiplayer_item_class, multi_item_class_type_horse),

      #1-Swadian Warriors
      #1a-Swadian Crossbowman
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_bullets", "trp_swadian_crossbowman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_bullets", "trp_swadian_crossbowman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_bullets", "trp_swadian_crossbowman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_musket", "trp_swadian_crossbowman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_musket", "trp_swadian_crossbowman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_musket_m", "trp_swadian_crossbowman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_sablya_a", "trp_swadian_crossbowman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_sablya_a", "trp_swadian_crossbowman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_sablya_a", "trp_swadian_crossbowman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_toporik", "trp_swadian_crossbowman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_toporik", "trp_swadian_crossbowman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_gloves", "trp_swadian_crossbowman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_gloves", "trp_swadian_crossbowman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_boots", "trp_swadian_crossbowman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_boots_p", "trp_swadian_crossbowman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_boots_p", "trp_swadian_crossbowman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_boots_p", "trp_swadian_crossbowman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_pol_strelok_forma", "trp_swadian_crossbowman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_pol_light_armor", "trp_swadian_crossbowman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_pol_shapka", "trp_swadian_crossbowman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_pol_good_shapka", "trp_swadian_crossbowman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_pol_light_helmet", "trp_swadian_crossbowman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_pol_norm_helmet", "trp_swadian_crossbowman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_pistol", "trp_swadian_crossbowman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_fast_pistol", "trp_swadian_crossbowman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_uber_pistol", "trp_swadian_crossbowman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_dwustwol_karabin", "trp_swadian_crossbowman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_granata_small", "trp_swadian_crossbowman_multiplayer"),

      #1b-Swadian Infantry
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_pike", "trp_swadian_infantry_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_pika", "trp_swadian_infantry_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_pike_m", "trp_swadian_infantry_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_spear", "trp_swadian_infantry_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_spear", "trp_swadian_infantry_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_sablya_a", "trp_swadian_infantry_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_sablya_a", "trp_swadian_infantry_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_sablya_a", "trp_swadian_infantry_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_pol_pehota_forma", "trp_swadian_infantry_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_pol_light_armor", "trp_swadian_infantry_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_pol_norm_armor", "trp_swadian_infantry_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_pol_good_p_armor", "trp_swadian_infantry_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_pol_shapka", "trp_swadian_infantry_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_pol_good_shapka", "trp_swadian_infantry_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_pol_light_helmet", "trp_swadian_infantry_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_pol_norm_helmet", "trp_swadian_infantry_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_gloves", "trp_swadian_infantry_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_gloves", "trp_swadian_infantry_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_boots", "trp_swadian_infantry_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_boots_p", "trp_swadian_infantry_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_boots_p", "trp_swadian_infantry_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_boots_p", "trp_swadian_infantry_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_pistol", "trp_swadian_infantry_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_pistol", "trp_swadian_infantry_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_bullets", "trp_swadian_infantry_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_bullets", "trp_swadian_infantry_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_chekan", "trp_swadian_infantry_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_chekan", "trp_swadian_infantry_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_pol_uber_p_armor", "trp_swadian_infantry_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_pol_uber_helmet", "trp_swadian_infantry_multiplayer"),
	  
      #1c-Swadian Man At Arms 
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_arrows", "trp_swadian_man_at_arms_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_sablya_a", "trp_swadian_man_at_arms_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_arrows", "trp_swadian_man_at_arms_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_bullets", "trp_swadian_man_at_arms_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_bullets", "trp_swadian_man_at_arms_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_pistol", "trp_swadian_man_at_arms_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_pistol", "trp_swadian_man_at_arms_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_karabin", "trp_swadian_man_at_arms_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_karabin", "trp_swadian_man_at_arms_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_luk", "trp_swadian_man_at_arms_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_luk", "trp_swadian_man_at_arms_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_shield", "trp_swadian_man_at_arms_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_shield", "trp_swadian_man_at_arms_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_sablya_b", "trp_swadian_man_at_arms_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_sablya_b", "trp_swadian_man_at_arms_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_sablya_b", "trp_swadian_man_at_arms_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_lance", "trp_swadian_man_at_arms_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_lance", "trp_swadian_man_at_arms_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_gusar_lance", "trp_swadian_man_at_arms_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_pol_kava_forma", "trp_swadian_man_at_arms_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_pol_light_armor", "trp_swadian_man_at_arms_multiplayer"), 
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_pol_norm_armor", "trp_swadian_man_at_arms_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_pol_good_k_armor", "trp_swadian_man_at_arms_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_pol_shapka", "trp_swadian_man_at_arms_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_pol_good_shapka", "trp_swadian_man_at_arms_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_pol_light_helmet", "trp_swadian_man_at_arms_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_pol_norm_helmet", "trp_swadian_man_at_arms_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_pol_good_helmet", "trp_swadian_man_at_arms_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_boots", "trp_swadian_man_at_arms_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_boots_k", "trp_swadian_man_at_arms_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_boots_k", "trp_swadian_man_at_arms_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_boots_k", "trp_swadian_man_at_arms_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_gloves", "trp_swadian_man_at_arms_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_gloves", "trp_swadian_man_at_arms_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_very_bad_horse", "trp_swadian_man_at_arms_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_horse", "trp_swadian_man_at_arms_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_horse", "trp_swadian_man_at_arms_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_horse", "trp_swadian_man_at_arms_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_uber_horse", "trp_swadian_man_at_arms_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_pol_uber_k_armor", "trp_swadian_man_at_arms_multiplayer"),

      #2-Vaegir Warriors
      #2a-Vaegir Archer
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_bullets", "trp_vaegir_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_bullets", "trp_vaegir_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_bullets", "trp_vaegir_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_musket", "trp_vaegir_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_musket", "trp_vaegir_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_musket_m", "trp_vaegir_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_sablya_a", "trp_vaegir_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_sablya_a", "trp_vaegir_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_sablya_a", "trp_vaegir_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_berdish", "trp_vaegir_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_berdish", "trp_vaegir_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_mosk_strelok_forma", "trp_vaegir_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_mosk_bad_armor", "trp_vaegir_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_mosk_shapka", "trp_vaegir_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_mosk_light_helmet", "trp_vaegir_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_gloves", "trp_vaegir_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_gloves", "trp_vaegir_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_gloves", "trp_vaegir_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_boots_mosk", "trp_vaegir_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_boots_p", "trp_vaegir_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_boots_p", "trp_vaegir_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_pistol", "trp_vaegir_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_fast_pistol", "trp_vaegir_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_uber_pistol", "trp_vaegir_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_dwustwol_karabin", "trp_vaegir_archer_multiplayer"),      
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_granata_small", "trp_vaegir_archer_multiplayer"),

      #2b-Vaegir Spearman
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_spear", "trp_vaegir_spearman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_spear", "trp_vaegir_spearman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_pike", "trp_vaegir_spearman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_pika", "trp_vaegir_spearman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_sovnya", "trp_vaegir_spearman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_berdish", "trp_vaegir_spearman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_berdish", "trp_vaegir_spearman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_mosk_pehota_forma", "trp_vaegir_spearman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_mosk_bad_armor", "trp_vaegir_spearman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_mosk_light_armor", "trp_vaegir_spearman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_mosk_norm_armor", "trp_vaegir_spearman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_mosk_shapka", "trp_vaegir_spearman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_mosk_light_helmet", "trp_vaegir_spearman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_mosk_norm_helmet", "trp_vaegir_spearman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_mosk_good_helmet", "trp_vaegir_spearman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_gloves", "trp_vaegir_spearman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_gloves", "trp_vaegir_spearman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_gloves", "trp_vaegir_spearman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_boots_mosk", "trp_vaegir_spearman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_boots_p", "trp_vaegir_spearman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_boots_p", "trp_vaegir_spearman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_pistol", "trp_vaegir_spearman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_pistol", "trp_vaegir_spearman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_bullets", "trp_vaegir_spearman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_bullets", "trp_vaegir_spearman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_mosk_good_armor", "trp_vaegir_spearman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_mosk_uber_helmet", "trp_vaegir_spearman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_toporik", "trp_vaegir_spearman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_toporik", "trp_vaegir_spearman_multiplayer"),
 
      #2c-Vaegir Horseman
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_arrows", "trp_vaegir_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_arrows", "trp_vaegir_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_arrows", "trp_vaegir_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_bullets", "trp_vaegir_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_bullets", "trp_vaegir_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_luk", "trp_vaegir_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_luk", "trp_vaegir_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_gud_luk", "trp_vaegir_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_karabin", "trp_vaegir_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_karabin", "trp_vaegir_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_sablya_a", "trp_vaegir_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_sablya_a", "trp_vaegir_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_sablya_a", "trp_vaegir_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_sovnya", "trp_vaegir_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_shield", "trp_vaegir_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_shield", "trp_vaegir_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_shield", "trp_vaegir_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_mosk_kava_forma", "trp_vaegir_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_mosk_bad_armor", "trp_vaegir_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_mosk_light_armor", "trp_vaegir_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_mosk_notsogood_armor", "trp_vaegir_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_mosk_good_armor", "trp_vaegir_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_mosk_shapka", "trp_vaegir_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_mosk_light_helmet", "trp_vaegir_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_mosk_norm_helmet", "trp_vaegir_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_mosk_good_helmet", "trp_vaegir_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_mosk_uber_helmet", "trp_vaegir_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_gloves", "trp_vaegir_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_gloves", "trp_vaegir_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_gloves", "trp_vaegir_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_boots_mosk", "trp_vaegir_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_boots_k", "trp_vaegir_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_boots_k", "trp_vaegir_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_very_bad_horse", "trp_vaegir_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_horse", "trp_vaegir_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_horse", "trp_vaegir_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_tank_horse", "trp_vaegir_horseman_multiplayer"),
   
      #3-Khergit Warriors
      #khergit_veteran_footman_multiplayer
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_boots", "trp_khergit_veteran_footman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_boots_p", "trp_khergit_veteran_footman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_boots_p", "trp_khergit_veteran_footman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_boots_ttr", "trp_khergit_veteran_footman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_ttr_shapka", "trp_khergit_veteran_footman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_ttr_light_helmet", "trp_khergit_veteran_footman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_ttr_norm_helmet", "trp_khergit_veteran_footman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_ttr_good_helmet", "trp_khergit_veteran_footman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_ttr_kava_forma", "trp_khergit_veteran_footman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_ttr_bad_armor_b", "trp_khergit_veteran_footman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_ttr_light_armor_b", "trp_khergit_veteran_footman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_ttr_norm_armor", "trp_khergit_veteran_footman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_t_bad_sablya_a", "trp_khergit_veteran_footman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_t_norm_sablya_a", "trp_khergit_veteran_footman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_t_good_sablya_a", "trp_khergit_veteran_footman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_luk", "trp_khergit_veteran_footman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_luk", "trp_khergit_veteran_footman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_gud_luk", "trp_khergit_veteran_footman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_t_bad_musket", "trp_khergit_veteran_footman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_t_norm_musket", "trp_khergit_veteran_footman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_t_good_musket", "trp_khergit_veteran_footman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_arrows", "trp_khergit_veteran_footman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_arrows", "trp_khergit_veteran_footman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_bullets", "trp_khergit_veteran_footman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_bullets", "trp_khergit_veteran_footman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_shield", "trp_khergit_veteran_footman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_shield", "trp_khergit_veteran_footman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_shield", "trp_khergit_veteran_footman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_stal_shield", "trp_khergit_veteran_footman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_janissar_hat", "trp_khergit_veteran_footman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_yanichar_forma", "trp_khergit_veteran_footman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_janissary_tapki", "trp_khergit_veteran_footman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_yatagan_bad", "trp_khergit_veteran_footman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_yatagan_good", "trp_khergit_veteran_footman_multiplayer"),

 

      #3a-Khergit Veteran Horse Archer
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_arrows", "trp_khergit_veteran_horse_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_arrows", "trp_khergit_veteran_horse_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_arrows", "trp_khergit_veteran_horse_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_luk", "trp_khergit_veteran_horse_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_luk", "trp_khergit_veteran_horse_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_gud_luk", "trp_khergit_veteran_horse_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_uber_luk", "trp_khergit_veteran_horse_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_shield", "trp_khergit_veteran_horse_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_shield", "trp_khergit_veteran_horse_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_t_bad_sablya_a", "trp_khergit_veteran_horse_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_t_norm_sablya_a", "trp_khergit_veteran_horse_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_t_good_sablya_a", "trp_khergit_veteran_horse_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_ttr_archer_forma", "trp_khergit_veteran_horse_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_ttr_bad_armor_a", "trp_khergit_veteran_horse_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_ttr_light_armor_a", "trp_khergit_veteran_horse_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_ttr_shapka", "trp_khergit_veteran_horse_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_ttr_light_helmet", "trp_khergit_veteran_horse_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_ttr_norm_helmet", "trp_khergit_veteran_horse_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_boots", "trp_khergit_veteran_horse_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_boots_k", "trp_khergit_veteran_horse_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_boots_k", "trp_khergit_veteran_horse_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_boots_ttr", "trp_khergit_veteran_horse_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_very_bad_horse", "trp_khergit_veteran_horse_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_horse", "trp_khergit_veteran_horse_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_horse", "trp_khergit_veteran_horse_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_horse", "trp_khergit_veteran_horse_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_fast_horse", "trp_khergit_veteran_horse_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_uber_horse", "trp_khergit_veteran_horse_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_ttr_norm_armor", "trp_khergit_veteran_horse_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_janissar_hat", "trp_khergit_veteran_horse_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_yanichar_forma", "trp_khergit_veteran_horse_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_janissary_tapki", "trp_khergit_veteran_horse_archer_multiplayer"),

      #3a-Khergit Lancer
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_very_bad_horse", "trp_khergit_lancer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_horse", "trp_khergit_lancer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_horse", "trp_khergit_lancer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_horse", "trp_khergit_lancer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_fast_horse", "trp_khergit_lancer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_uber_horse", "trp_khergit_lancer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_shield", "trp_khergit_lancer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_shield", "trp_khergit_lancer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_shield", "trp_khergit_lancer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_stal_shield", "trp_khergit_lancer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_uber_shield", "trp_khergit_lancer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_t_bad_sablya_a", "trp_khergit_lancer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_t_norm_sablya_a", "trp_khergit_lancer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_t_good_sablya_a", "trp_khergit_lancer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_chekan", "trp_khergit_lancer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_chekan", "trp_khergit_lancer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_bulava", "trp_khergit_lancer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_bulava", "trp_khergit_lancer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_lance", "trp_khergit_lancer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_lance", "trp_khergit_lancer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_lance", "trp_khergit_lancer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_ttr_kava_forma", "trp_khergit_lancer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_ttr_bad_armor_b", "trp_khergit_lancer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_ttr_light_armor_b", "trp_khergit_lancer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_ttr_norm_armor", "trp_khergit_lancer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_ttr_good_armor", "trp_khergit_lancer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_ttr_shapka", "trp_khergit_lancer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_ttr_light_helmet", "trp_khergit_lancer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_ttr_norm_helmet", "trp_khergit_lancer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_ttr_good_helmet", "trp_khergit_lancer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_boots", "trp_khergit_lancer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_boots_k", "trp_khergit_lancer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_boots_k", "trp_khergit_lancer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_boots_ttr", "trp_khergit_lancer_multiplayer"),   
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_janissar_hat", "trp_khergit_lancer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_yanichar_forma", "trp_khergit_lancer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_janissary_tapki", "trp_khergit_lancer_multiplayer"),
      
      #Nord Warriors 

      #4c-Nord Archer
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_bullets", "trp_nord_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_bullets", "trp_nord_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_bullets", "trp_nord_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_musket", "trp_nord_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_musket", "trp_nord_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_musket_m", "trp_nord_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_uber_mushket", "trp_nord_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_shpaga", "trp_nord_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_shpaga", "trp_nord_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_shpaga_m", "trp_nord_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_p_palash", "trp_nord_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_p_palash", "trp_nord_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_p_palash", "trp_nord_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_swed_strelok_forma", "trp_nord_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_swed_light_armor", "trp_nord_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_swed_shapka", "trp_nord_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_swed_light_helmet", "trp_nord_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_gloves", "trp_nord_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_gloves", "trp_nord_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_gloves", "trp_nord_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_boots_swed", "trp_nord_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_botforts", "trp_nord_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_botforts", "trp_nord_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_botforts", "trp_nord_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_pistol", "trp_nord_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_power_pistol", "trp_nord_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_uber_pistol", "trp_nord_archer_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_dwustwol_karabin", "trp_nord_archer_multiplayer"),      
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_granata_small", "trp_nord_archer_multiplayer"), 
	  
      #4a-Nord Veteran      
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_p_palash", "trp_nord_veteran_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_p_palash", "trp_nord_veteran_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_p_palash", "trp_nord_veteran_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_pehot_palash", "trp_nord_veteran_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_alebarda", "trp_nord_veteran_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_twohand_sword", "trp_nord_veteran_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_pike", "trp_nord_veteran_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_pika", "trp_nord_veteran_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_pike_m", "trp_nord_veteran_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_swed_pehot_forma", "trp_nord_veteran_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_swed_light_armor", "trp_nord_veteran_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_swed_norm_armor", "trp_nord_veteran_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_swed_good_p_armor", "trp_nord_veteran_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_swed_uber_p_armor", "trp_nord_veteran_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_swed_shapka", "trp_nord_veteran_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_swed_light_helmet", "trp_nord_veteran_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_swed_norm_p_helmet", "trp_nord_veteran_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_gloves", "trp_nord_veteran_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_gloves", "trp_nord_veteran_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_uber_gloves", "trp_nord_veteran_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_boots_swed", "trp_nord_veteran_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_botforts", "trp_nord_veteran_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_botforts", "trp_nord_veteran_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_botforts", "trp_nord_veteran_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_swed_good_p_helmet", "trp_nord_veteran_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_kleymor", "trp_nord_veteran_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_pistol", "trp_nord_veteran_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_bullets", "trp_nord_veteran_multiplayer"),
            
      #4b-Nord Scout
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_bullets", "trp_nord_scout_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_bullets", "trp_nord_scout_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_bullets", "trp_nord_scout_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_karabin", "trp_nord_scout_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_karabin", "trp_nord_scout_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_karabin", "trp_nord_scout_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_uber_karabin", "trp_nord_scout_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_pistol", "trp_nord_scout_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_pistol", "trp_nord_scout_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_shpaga", "trp_nord_scout_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_shpaga_m", "trp_nord_scout_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_palash", "trp_nord_scout_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_palash", "trp_nord_scout_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_palash_m", "trp_nord_scout_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_lance", "trp_nord_scout_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_lance", "trp_nord_scout_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_lance", "trp_nord_scout_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_swed_kava_forma", "trp_nord_scout_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_swed_light_armor", "trp_nord_scout_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_swed_norm_armor", "trp_nord_scout_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_swed_good_k_armor", "trp_nord_scout_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_swed_shapka", "trp_nord_scout_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_swed_light_helmet", "trp_nord_scout_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_swed_norm_p_helmet", "trp_nord_scout_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_swed_good_k_helmet", "trp_nord_scout_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_gloves", "trp_nord_scout_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_gloves", "trp_nord_scout_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_uber_gloves", "trp_nord_scout_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_boots_swed", "trp_nord_scout_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_botforts", "trp_nord_scout_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_botforts", "trp_nord_scout_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_botforts", "trp_nord_scout_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_very_bad_horse", "trp_nord_scout_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_horse", "trp_nord_scout_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_horse", "trp_nord_scout_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_tank_horse", "trp_nord_scout_multiplayer"),
            
      
      #5-Rhodok Warriors         
      #5a-Rhodok Veteran Crossbowman
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_bullets", "trp_rhodok_veteran_crossbowman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_bullets", "trp_rhodok_veteran_crossbowman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_bullets", "trp_rhodok_veteran_crossbowman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_samopal_m", "trp_rhodok_veteran_crossbowman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_t_bad_musket", "trp_rhodok_veteran_crossbowman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_t_norm_musket", "trp_rhodok_veteran_crossbowman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_t_good_musket", "trp_rhodok_veteran_crossbowman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_t_uber_musket", "trp_rhodok_veteran_crossbowman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_t_bad_sablya_a", "trp_rhodok_veteran_crossbowman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_t_norm_sablya_a", "trp_rhodok_veteran_crossbowman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_t_good_sablya_a", "trp_rhodok_veteran_crossbowman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norn_k_shablya", "trp_rhodok_veteran_crossbowman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_k_shablya", "trp_rhodok_veteran_crossbowman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_ukr_strelok_forma", "trp_rhodok_veteran_crossbowman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_ukr_bad_armor", "trp_rhodok_veteran_crossbowman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_ukr_light_armor", "trp_rhodok_veteran_crossbowman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_ukr_shapka", "trp_rhodok_veteran_crossbowman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_boots", "trp_rhodok_veteran_crossbowman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_boots_p", "trp_rhodok_veteran_crossbowman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_boots_p", "trp_rhodok_veteran_crossbowman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_boots_p", "trp_rhodok_veteran_crossbowman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_pistol", "trp_rhodok_veteran_crossbowman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_power_pistol", "trp_rhodok_veteran_crossbowman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_uber_pistol", "trp_rhodok_veteran_crossbowman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_dwustwol_karabin", "trp_rhodok_veteran_crossbowman_multiplayer"),      
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_granata_small", "trp_rhodok_veteran_crossbowman_multiplayer"),

	  #5b-Rhodok Sergeant
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_bullets", "trp_rhodok_sergeant_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_bullets", "trp_rhodok_sergeant_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_bullets", "trp_rhodok_sergeant_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_pistol", "trp_rhodok_sergeant_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_pistol", "trp_rhodok_sergeant_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_fast_pistol", "trp_rhodok_sergeant_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_power_pistol", "trp_rhodok_sergeant_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_uber_pistol", "trp_rhodok_sergeant_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_t_bad_sablya_a", "trp_rhodok_sergeant_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_t_norm_sablya_a", "trp_rhodok_sergeant_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_t_good_sablya_a", "trp_rhodok_sergeant_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_bulava", "trp_rhodok_sergeant_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_bulava", "trp_rhodok_sergeant_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norn_k_shablya", "trp_rhodok_sergeant_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_k_shablya", "trp_rhodok_sergeant_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_spear", "trp_rhodok_sergeant_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_spear", "trp_rhodok_sergeant_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_ukr_pehota_forma", "trp_rhodok_sergeant_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_ukr_bad_armor", "trp_rhodok_sergeant_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_ukr_light_armor", "trp_rhodok_sergeant_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_ukr_norm_armor", "trp_rhodok_sergeant_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_ukr_good_armor", "trp_rhodok_sergeant_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_ukr_shapka", "trp_rhodok_sergeant_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_ukr_light_helmet", "trp_rhodok_sergeant_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_ukr_norm_helmet", "trp_rhodok_sergeant_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_boots", "trp_rhodok_sergeant_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_boots_p", "trp_rhodok_sergeant_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_boots_p", "trp_rhodok_sergeant_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_boots_p", "trp_rhodok_sergeant_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_gloves", "trp_rhodok_sergeant_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_gloves", "trp_rhodok_sergeant_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_dwustwol_pistol", "trp_rhodok_sergeant_multiplayer"),

	  #5c-Rhodok Horseman
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_bullets", "trp_rhodok_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_bullets", "trp_rhodok_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_bullets", "trp_rhodok_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_karabin", "trp_rhodok_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_karabin", "trp_rhodok_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_karabin", "trp_rhodok_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_uber_karabin", "trp_rhodok_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_fast_pistol", "trp_rhodok_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_power_pistol", "trp_rhodok_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_uber_pistol", "trp_rhodok_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_t_bad_sablya_a", "trp_rhodok_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_t_norm_sablya_a", "trp_rhodok_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_t_good_sablya_a", "trp_rhodok_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norn_k_shablya", "trp_rhodok_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_k_shablya", "trp_rhodok_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_bulava", "trp_rhodok_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_bulava", "trp_rhodok_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_chekan", "trp_rhodok_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_chekan", "trp_rhodok_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_lance", "trp_rhodok_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_lance", "trp_rhodok_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_lance", "trp_rhodok_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_ukr_kava_forma", "trp_rhodok_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_ukr_bad_armor", "trp_rhodok_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_ukr_light_armor", "trp_rhodok_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_ukr_norm_armor", "trp_rhodok_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_ukr_good_armor", "trp_rhodok_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_ukr_shapka", "trp_rhodok_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_ukr_light_helmet", "trp_rhodok_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_m_ukr_norm_helmet", "trp_rhodok_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_boots", "trp_rhodok_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_boots_k", "trp_rhodok_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_boots_k", "trp_rhodok_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_boots_k", "trp_rhodok_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_very_bad_horse", "trp_rhodok_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_horse", "trp_rhodok_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_horse", "trp_rhodok_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_good_horse", "trp_rhodok_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_fast_horse", "trp_rhodok_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_uber_horse", "trp_rhodok_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_bad_gloves", "trp_rhodok_horseman_multiplayer"),
      (call_script, "script_multiplayer_set_item_available_for_troop", "itm_norm_gloves", "trp_rhodok_horseman_multiplayer"),
	  
	  #
	  (call_script, "script_multiplayer_fill_scene_props_ids"), 	  
	  
		# MCA:troop costs
		(troop_set_slot, "trp_mp_swadian_militia", slot_troop_mp_squad_price, 100),
		(troop_set_slot, "trp_mp_swadian_militia", slot_troop_mp_squad_type, 11),  # tear num - troop type num
		(troop_set_slot, "trp_mp_swadian_footman", slot_troop_mp_squad_price, 200),
		(troop_set_slot, "trp_mp_swadian_footman", slot_troop_mp_squad_type, 21),
		(troop_set_slot, "trp_mp_swadian_footman_levelup", slot_troop_mp_squad_price, 300),
		(troop_set_slot, "trp_mp_swadian_footman_levelup", slot_troop_mp_squad_type, 31),
		(troop_set_slot, "trp_mp_swadian_infantry", slot_troop_mp_squad_price, 400),
		(troop_set_slot, "trp_mp_swadian_infantry", slot_troop_mp_squad_type, 41),

		(troop_set_slot, "trp_mp_swadian_skirmisher", slot_troop_mp_squad_price, 100),
		(troop_set_slot, "trp_mp_swadian_skirmisher", slot_troop_mp_squad_type, 12),
		(troop_set_slot, "trp_mp_swadian_crossbowman", slot_troop_mp_squad_price, 200),
		(troop_set_slot, "trp_mp_swadian_crossbowman", slot_troop_mp_squad_type, 22),
		(troop_set_slot, "trp_mp_swadian_crossbowman_levelup", slot_troop_mp_squad_price, 300),
		(troop_set_slot, "trp_mp_swadian_crossbowman_levelup", slot_troop_mp_squad_type, 32),
		(troop_set_slot, "trp_mp_swadian_sharpshooter", slot_troop_mp_squad_price, 400),
		(troop_set_slot, "trp_mp_swadian_sharpshooter", slot_troop_mp_squad_type, 42),

		(troop_set_slot, "trp_mp_swadian_man_at_arms", slot_troop_mp_squad_price, 200),
		(troop_set_slot, "trp_mp_swadian_man_at_arms", slot_troop_mp_squad_type, 13),
		(troop_set_slot, "trp_mp_polish_dragoon", slot_troop_mp_squad_price, 325),
		(troop_set_slot, "trp_mp_polish_dragoon", slot_troop_mp_squad_type, 23),
		(troop_set_slot, "trp_mp_swadian_sergeant", slot_troop_mp_squad_price, 475),
		(troop_set_slot, "trp_mp_swadian_sergeant", slot_troop_mp_squad_type, 33),
		(troop_set_slot, "trp_mp_swadian_knight", slot_troop_mp_squad_price, 650),
		(troop_set_slot, "trp_mp_swadian_knight", slot_troop_mp_squad_type, 43),

		
		(troop_set_slot, "trp_mp_vaegir_footman", slot_troop_mp_squad_price, 100),
		(troop_set_slot, "trp_mp_vaegir_footman", slot_troop_mp_squad_type, 11),
		(troop_set_slot, "trp_mp_vaegir_veteran", slot_troop_mp_squad_price, 200),
		(troop_set_slot, "trp_mp_vaegir_veteran", slot_troop_mp_squad_type, 21),
		(troop_set_slot, "trp_mp_vaegir_veteran_levelup", slot_troop_mp_squad_price, 300),
		(troop_set_slot, "trp_mp_vaegir_veteran_levelup", slot_troop_mp_squad_type, 31),
		(troop_set_slot, "trp_mp_vaegir_infantry", slot_troop_mp_squad_price, 400),
		(troop_set_slot, "trp_mp_vaegir_infantry", slot_troop_mp_squad_type, 41),
		
		(troop_set_slot, "trp_mp_vaegir_skirmisher", slot_troop_mp_squad_price, 100),
		(troop_set_slot, "trp_mp_vaegir_skirmisher", slot_troop_mp_squad_type, 12),
		(troop_set_slot, "trp_mp_vaegir_archer", slot_troop_mp_squad_price, 200),
		(troop_set_slot, "trp_mp_vaegir_archer", slot_troop_mp_squad_type, 22),
		(troop_set_slot, "trp_mp_vaegir_archer_levelup", slot_troop_mp_squad_price, 300),
		(troop_set_slot, "trp_mp_vaegir_archer_levelup", slot_troop_mp_squad_type, 32),
		(troop_set_slot, "trp_mp_vaegir_marksman", slot_troop_mp_squad_price, 400),
		(troop_set_slot, "trp_mp_vaegir_marksman", slot_troop_mp_squad_type, 42),
		
		(troop_set_slot, "trp_mp_vaegir_horseman", slot_troop_mp_squad_price, 200),
		(troop_set_slot, "trp_mp_vaegir_horseman", slot_troop_mp_squad_type, 13),
		(troop_set_slot, "trp_mp_moskow_dragoon", slot_troop_mp_squad_price, 325),
		(troop_set_slot, "trp_mp_moskow_dragoon", slot_troop_mp_squad_type, 23),
		(troop_set_slot, "trp_mp_vaegir_knight", slot_troop_mp_squad_price, 475),
		(troop_set_slot, "trp_mp_vaegir_knight", slot_troop_mp_squad_type, 33),
		(troop_set_slot, "trp_mp_vaegir_guard", slot_troop_mp_squad_price, 650),
		(troop_set_slot, "trp_mp_vaegir_guard", slot_troop_mp_squad_type, 43),
		
		
		(troop_set_slot, "trp_mp_khergit_skirmisher", slot_troop_mp_squad_price, 100),
		(troop_set_slot, "trp_mp_khergit_skirmisher", slot_troop_mp_squad_type, 11),
		(troop_set_slot, "trp_mp_khergit_skirmisher_levelup", slot_troop_mp_squad_price, 200),
		(troop_set_slot, "trp_mp_khergit_skirmisher_levelup", slot_troop_mp_squad_type, 21),
		(troop_set_slot, "trp_mp_saymen", slot_troop_mp_squad_price, 300),
		(troop_set_slot, "trp_mp_saymen", slot_troop_mp_squad_type, 31),
		(troop_set_slot, "trp_mp_janissar", slot_troop_mp_squad_price, 400),
		(troop_set_slot, "trp_mp_janissar", slot_troop_mp_squad_type, 41),
		
		(troop_set_slot, "trp_mp_khergit_horseman", slot_troop_mp_squad_price, 200),
		(troop_set_slot, "trp_mp_khergit_horseman", slot_troop_mp_squad_type, 12),
		(troop_set_slot, "trp_mp_khergit_horse_archer", slot_troop_mp_squad_price, 325),
		(troop_set_slot, "trp_mp_khergit_horse_archer", slot_troop_mp_squad_type, 22),
		(troop_set_slot, "trp_mp_khergit_veteran_horse_archer", slot_troop_mp_squad_price, 475),
		(troop_set_slot, "trp_mp_khergit_veteran_horse_archer", slot_troop_mp_squad_type, 32),
		(troop_set_slot, "trp_mp_zyndjirli", slot_troop_mp_squad_price, 650),
		(troop_set_slot, "trp_mp_zyndjirli", slot_troop_mp_squad_type, 42),
		
		(troop_set_slot, "trp_mp_n_khergit_horseman", slot_troop_mp_squad_price, 200),
		(troop_set_slot, "trp_mp_n_khergit_horseman", slot_troop_mp_squad_type, 13),
		(troop_set_slot, "trp_mp_n_khergit_horse_archer", slot_troop_mp_squad_price, 325),
		(troop_set_slot, "trp_mp_n_khergit_horse_archer", slot_troop_mp_squad_type, 23),
		(troop_set_slot, "trp_mp_n_khergit_veteran_horse_archer", slot_troop_mp_squad_price, 475),
		(troop_set_slot, "trp_mp_n_khergit_veteran_horse_archer", slot_troop_mp_squad_type, 33),
		(troop_set_slot, "trp_mp_n_zyndjirli", slot_troop_mp_squad_price, 650),
		(troop_set_slot, "trp_mp_n_zyndjirli", slot_troop_mp_squad_type, 43),


		(troop_set_slot, "trp_mp_nord_footman", slot_troop_mp_squad_price, 100),
		(troop_set_slot, "trp_mp_nord_footman", slot_troop_mp_squad_type, 11),
		(troop_set_slot, "trp_mp_nord_trained_footman", slot_troop_mp_squad_price, 200),
		(troop_set_slot, "trp_mp_nord_trained_footman", slot_troop_mp_squad_type, 21),
		(troop_set_slot, "trp_mp_nord_trained_footman_levelup", slot_troop_mp_squad_price, 300),
		(troop_set_slot, "trp_mp_nord_trained_footman_levelup", slot_troop_mp_squad_type, 31),
		(troop_set_slot, "trp_mp_sved_swordmaster", slot_troop_mp_squad_price, 400),
		(troop_set_slot, "trp_mp_sved_swordmaster", slot_troop_mp_squad_type, 41),

		(troop_set_slot, "trp_mp_nord_huntsman", slot_troop_mp_squad_price, 100),
		(troop_set_slot, "trp_mp_nord_huntsman", slot_troop_mp_squad_type, 12),
		(troop_set_slot, "trp_mp_nord_archer", slot_troop_mp_squad_price, 200),
		(troop_set_slot, "trp_mp_nord_archer", slot_troop_mp_squad_type, 22),
		(troop_set_slot, "trp_mp_nord_archer_levelup", slot_troop_mp_squad_price, 300),
		(troop_set_slot, "trp_mp_nord_archer_levelup", slot_troop_mp_squad_type, 32),
		(troop_set_slot, "trp_mp_nord_veteran_archer", slot_troop_mp_squad_price, 400),
		(troop_set_slot, "trp_mp_nord_veteran_archer", slot_troop_mp_squad_type, 42),

		(troop_set_slot, "trp_mp_nord_warrior", slot_troop_mp_squad_price, 200),
		(troop_set_slot, "trp_mp_nord_warrior", slot_troop_mp_squad_type, 13),
		(troop_set_slot, "trp_mp_sved_lancers", slot_troop_mp_squad_price, 325),
		(troop_set_slot, "trp_mp_sved_lancers", slot_troop_mp_squad_type, 23),
		(troop_set_slot, "trp_mp_nord_champion", slot_troop_mp_squad_price, 475),
		(troop_set_slot, "trp_mp_nord_champion", slot_troop_mp_squad_type, 33),
		(troop_set_slot, "trp_mp_nord_veteran", slot_troop_mp_squad_price, 650),
		(troop_set_slot, "trp_mp_nord_veteran", slot_troop_mp_squad_type, 43),

		
		(troop_set_slot, "trp_mp_n_rhodok_spearman", slot_troop_mp_squad_price, 100),
		(troop_set_slot, "trp_mp_n_rhodok_spearman", slot_troop_mp_squad_type, 11),
		(troop_set_slot, "trp_mp_n_rhodok_sergeant", slot_troop_mp_squad_price, 200),
		(troop_set_slot, "trp_mp_n_rhodok_sergeant", slot_troop_mp_squad_type, 21),
		(troop_set_slot, "trp_mp_n_rhodok_trained_crossbowman", slot_troop_mp_squad_price, 300),
		(troop_set_slot, "trp_mp_n_rhodok_trained_crossbowman", slot_troop_mp_squad_type, 31),
		(troop_set_slot, "trp_mp_n_rhodok_veteran_spearman", slot_troop_mp_squad_price, 400),
		(troop_set_slot, "trp_mp_n_rhodok_veteran_spearman", slot_troop_mp_squad_type, 41),

		(troop_set_slot, "trp_mp_rhodok_spearman", slot_troop_mp_squad_price, 100),
		(troop_set_slot, "trp_mp_rhodok_spearman", slot_troop_mp_squad_type, 12),
		(troop_set_slot, "trp_mp_rhodok_sergeant", slot_troop_mp_squad_price, 200),
		(troop_set_slot, "trp_mp_rhodok_sergeant", slot_troop_mp_squad_type, 22),
		(troop_set_slot, "trp_mp_rhodok_trained_crossbowman", slot_troop_mp_squad_price, 300),
		(troop_set_slot, "trp_mp_rhodok_trained_crossbowman", slot_troop_mp_squad_type, 32),
		(troop_set_slot, "trp_mp_rhodok_veteran_spearman", slot_troop_mp_squad_price, 400),
		(troop_set_slot, "trp_mp_rhodok_veteran_spearman", slot_troop_mp_squad_type, 42),

		(troop_set_slot, "trp_mp_rhodok_trained_spearman", slot_troop_mp_squad_price, 200),
		(troop_set_slot, "trp_mp_rhodok_trained_spearman", slot_troop_mp_squad_type, 13),
		(troop_set_slot, "trp_mp_rhodok_crossbowman", slot_troop_mp_squad_price, 325),
		(troop_set_slot, "trp_mp_rhodok_crossbowman", slot_troop_mp_squad_type, 23),
		(troop_set_slot, "trp_mp_ukr_storoja", slot_troop_mp_squad_price, 475),
		(troop_set_slot, "trp_mp_ukr_storoja", slot_troop_mp_squad_type, 33),
		(troop_set_slot, "trp_mp_rhodok_veteran_crossbowman", slot_troop_mp_squad_price, 650),
		(troop_set_slot, "trp_mp_rhodok_veteran_crossbowman", slot_troop_mp_squad_type, 43),
		
		
		(troop_set_slot, "trp_coop_janissary", slot_troop_mp_squad_type, 11),
		(troop_set_slot, "trp_coop_cossack_swordmen", slot_troop_mp_squad_type, 21),
		(troop_set_slot, "trp_coop_polish_axemen", slot_troop_mp_squad_type, 31),
		(troop_set_slot, "trp_coop_russian_polearmsmen", slot_troop_mp_squad_type, 41),
		(troop_set_slot, "trp_coop_swedish_swordsmen", slot_troop_mp_squad_type, 41),
		
		(troop_set_slot, "trp_coop_volunteer_militia", slot_troop_mp_squad_type, 12),
		(troop_set_slot, "trp_coop_cossack_pistoleers", slot_troop_mp_squad_type, 22),
		(troop_set_slot, "trp_coop_lithunian_defenders", slot_troop_mp_squad_type, 32),
		(troop_set_slot, "trp_coop_crimean_hawkeyes", slot_troop_mp_squad_type, 42),
		(troop_set_slot, "trp_coop_miquelet_musketeers", slot_troop_mp_squad_type, 42),
		
		(troop_set_slot, "trp_coop_moscovite_watchmen", slot_troop_mp_squad_type, 13),
		(troop_set_slot, "trp_coop_dragoons", slot_troop_mp_squad_type, 23),
		(troop_set_slot, "trp_coop_cossack_wildriders", slot_troop_mp_squad_type, 33),
		(troop_set_slot, "trp_coop_crimean_horse_archers", slot_troop_mp_squad_type, 43),
		(troop_set_slot, "trp_coop_winged_hussars", slot_troop_mp_squad_type, 43),
		
		
		(assign, "$g_mp_num_troops_per_type_tier123", 6),
		(assign, "$g_mp_num_troops_per_type_tier4", 7),
    ]),

  #script_get_army_size_from_slider_value
  # INPUT: arg1 = slider_value
  # OUTPUT: reg0 = army_size
  ("get_army_size_from_slider_value",
    [
     (store_script_param, ":slider_value", 1),
     (assign, ":army_size", ":slider_value"),
     (try_begin),
       (gt, ":slider_value", 25),
       (store_sub, ":adder_value", ":slider_value", 25),
       (val_add, ":army_size", ":adder_value"),
       (try_begin),
         (gt, ":slider_value", 50),
         (store_sub, ":adder_value", ":slider_value", 50),
         (val_mul, ":adder_value", 3),
         (val_add, ":army_size", ":adder_value"),
       (try_end),
     (try_end),
     (assign, reg0, ":army_size"),
  ]),
  
  #script_spawn_quick_battle_army
  # INPUT: arg1 = initial_entry_point, arg2 = faction_no, arg3 = infantry_ratio, arg4 = archers_ratio, arg5 = cavalry_ratio, arg6 = divide_archer_entry_points, arg7 = player_team
  # OUTPUT: none
  ("spawn_quick_battle_army",
   [
     (store_script_param, ":cur_entry_point", 1),
     (store_script_param, ":faction_no", 2),
     (store_script_param, ":infantry_ratio", 3),
     (store_script_param, ":archers_ratio", 4),
     (store_script_param, ":cavalry_ratio", 5),
     (store_script_param, ":divide_archer_entry_points", 6),
     (store_script_param, ":player_team", 7),

     (try_begin),
       (eq, ":player_team", 1),
       (call_script, "script_get_army_size_from_slider_value", "$g_quick_battle_army_1_size"),
       (assign, ":army_size", reg0),
       (set_player_troop, "$g_quick_battle_troop"),
       (set_visitor, ":cur_entry_point", "$g_quick_battle_troop"),
       (try_begin),
         (eq, ":cur_entry_point", 0),
         (try_begin),
           (is_between, ":faction_no", npc_kingdoms_begin, npc_kingdoms_end),
           (faction_get_slot, "$g_quick_battle_team_0_banner", ":faction_no", slot_faction_banner),
         (else_try),
           (assign, "$g_quick_battle_team_0_banner", "mesh_banners_default_b"),
         (try_end),
       (else_try),
         (try_begin),
           (is_between, ":faction_no", npc_kingdoms_begin, npc_kingdoms_end),
           (faction_get_slot, "$g_quick_battle_team_1_banner", ":faction_no", slot_faction_banner),
         (else_try),
           (assign, "$g_quick_battle_team_1_banner", "mesh_banners_default_b"),
         (try_end),
       (try_end),
       (val_add, ":cur_entry_point", 1),

     (else_try),
       (call_script, "script_get_army_size_from_slider_value", "$g_quick_battle_army_2_size"),
       (assign, ":army_size", reg0),
       (try_begin),
         (eq, ":cur_entry_point", 0),
         (assign, "$g_quick_battle_team_0_banner", "mesh_banners_default_a"),
       (else_try),
         (assign, "$g_quick_battle_team_1_banner", "mesh_banners_default_a"),
       (try_end),
       (val_add, ":cur_entry_point", 1),
     (try_end),

     (store_mul, ":num_infantry", ":infantry_ratio", ":army_size"),
     (val_div, ":num_infantry", 100),
     (store_mul, ":num_archers", ":archers_ratio", ":army_size"),
     (val_div, ":num_archers", 100),
     (store_mul, ":num_cavalry", ":cavalry_ratio", ":army_size"),
     (val_div, ":num_cavalry", 100),

     (try_begin),
       (store_add, ":num_total", ":num_infantry", ":num_archers"),
       (val_add, ":num_total", ":num_cavalry"),
       (neq, ":num_total", ":army_size"),
       (store_sub, ":leftover", ":army_size", ":num_total"),
       (try_begin),
         (gt, ":infantry_ratio", ":archers_ratio"),
         (gt, ":infantry_ratio", ":cavalry_ratio"),
         (val_add, ":num_infantry", ":leftover"),
       (else_try),
         (gt, ":archers_ratio", ":cavalry_ratio"),
         (val_add, ":num_archers", ":leftover"),
       (else_try),
         (val_add, ":num_cavalry", ":leftover"),
       (try_end),
     (try_end),

     (store_mul, ":rand_min", ":num_infantry", 15),
     (val_div, ":rand_min", 100),
     (store_mul, ":rand_max", ":num_infantry", 45),
     (val_div, ":rand_max", 100),
     (store_random_in_range, ":num_tier_2_infantry", ":rand_min", ":rand_max"),
     (store_sub, ":num_tier_1_infantry", ":num_infantry", ":num_tier_2_infantry"),
     (store_mul, ":rand_min", ":num_archers", 15),
     (val_div, ":rand_min", 100),
     (store_mul, ":rand_max", ":num_archers", 45),
     (val_div, ":rand_max", 100),
     (store_random_in_range, ":num_tier_2_archers", ":rand_min", ":rand_max"),
     (store_sub, ":num_tier_1_archers", ":num_archers", ":num_tier_2_archers"),
     (store_mul, ":rand_min", ":num_cavalry", 15),
     (val_div, ":rand_min", 100),
     (store_mul, ":rand_max", ":num_cavalry", 45),
     (val_div, ":rand_max", 100),
     (store_random_in_range, ":num_tier_2_cavalry", ":rand_min", ":rand_max"),
     (store_sub, ":num_tier_1_cavalry", ":num_cavalry", ":num_tier_2_cavalry"),

     (faction_get_slot, ":cur_troop", ":faction_no", slot_faction_quick_battle_tier_2_infantry),
     (set_visitors, ":cur_entry_point", ":cur_troop", ":num_tier_2_infantry"),
     (val_add, ":cur_entry_point", 1),
     (faction_get_slot, ":cur_troop", ":faction_no", slot_faction_quick_battle_tier_1_infantry),
     (set_visitors, ":cur_entry_point", ":cur_troop", ":num_tier_1_infantry"),
     (val_add, ":cur_entry_point", 1),
     (faction_get_slot, ":cur_troop", ":faction_no", slot_faction_quick_battle_tier_2_cavalry),
     (set_visitors, ":cur_entry_point", ":cur_troop", ":num_tier_2_cavalry"),
     (val_add, ":cur_entry_point", 1),
     (faction_get_slot, ":cur_troop", ":faction_no", slot_faction_quick_battle_tier_1_cavalry),
     (set_visitors, ":cur_entry_point", ":cur_troop", ":num_tier_1_cavalry"),
     (val_add, ":cur_entry_point", 1),

     (try_begin),
       (eq, ":divide_archer_entry_points", 0),
       (faction_get_slot, ":cur_troop", ":faction_no", slot_faction_quick_battle_tier_2_archer),
       (set_visitors, ":cur_entry_point", ":cur_troop", ":num_tier_2_archers"),
       (val_add, ":cur_entry_point", 1),
       (faction_get_slot, ":cur_troop", ":faction_no", slot_faction_quick_battle_tier_1_archer),
       (set_visitors, ":cur_entry_point", ":cur_troop", ":num_tier_1_archers"),
       (val_add, ":cur_entry_point", 1),
     (else_try),
       (assign, ":cur_entry_point", 40), #archer positions begin point
       (store_div, ":num_tier_1_archers_ceil_8", ":num_tier_1_archers", 8),
       (val_mul, ":num_tier_1_archers_ceil_8", 8),
       (try_begin),
         (neq, ":num_tier_1_archers_ceil_8", ":num_tier_1_archers"),
         (val_div, ":num_tier_1_archers_ceil_8", 8),
         (val_add, ":num_tier_1_archers_ceil_8", 1),
         (val_mul, ":num_tier_1_archers_ceil_8", 8),
       (try_end),
       (store_div, ":num_tier_2_archers_ceil_8", ":num_tier_2_archers", 8),
       (val_mul, ":num_tier_2_archers_ceil_8", 8),
       (try_begin),
         (neq, ":num_tier_2_archers_ceil_8", ":num_tier_2_archers"),
         (val_div, ":num_tier_2_archers_ceil_8", 8),
         (val_add, ":num_tier_2_archers_ceil_8", 1),
         (val_mul, ":num_tier_2_archers_ceil_8", 8),
       (try_end),
       (store_add, ":num_archers_ceil_8", ":num_tier_1_archers_ceil_8", ":num_tier_2_archers_ceil_8"),
       (store_div, ":num_archers_per_entry_point", ":num_archers_ceil_8", 8),
       (assign, ":left_tier_1_archers", ":num_tier_1_archers"),
       (assign, ":left_tier_2_archers", ":num_tier_2_archers"),
       (assign, ":end_cond", 1000),
       (try_for_range, ":unused", 0, ":end_cond"),
         (try_begin),
           (gt, ":left_tier_2_archers", 0),
           (assign, ":used_tier_2_archers", ":num_archers_per_entry_point"),
           (val_min, ":used_tier_2_archers", ":left_tier_2_archers"),
           (faction_get_slot, ":cur_troop", ":faction_no", slot_faction_quick_battle_tier_2_archer),
           (set_visitors, ":cur_entry_point", ":cur_troop", ":used_tier_2_archers"),
           (val_add, ":cur_entry_point", 1),
           (val_sub, ":left_tier_2_archers", ":used_tier_2_archers"),
         (else_try),
           (gt, ":left_tier_1_archers", 0),
           (assign, ":used_tier_1_archers", ":num_archers_per_entry_point"),
           (val_min, ":used_tier_1_archers", ":left_tier_1_archers"),
           (faction_get_slot, ":cur_troop", ":faction_no", slot_faction_quick_battle_tier_1_archer),
           (set_visitors, ":cur_entry_point", ":cur_troop", ":used_tier_1_archers"),
           (val_add, ":cur_entry_point", 1),
           (val_sub, ":left_tier_1_archers", ":used_tier_1_archers"),
         (else_try),
           (assign, ":end_cond", 0),
         (try_end),
       (try_end),
     (try_end),
     ]),

  ("player_arrived",
   [
      #(assign, ":player_faction_culture", "fac_culture_1"),
      #(faction_set_slot, "fac_player_supporters_faction",  slot_faction_culture, ":player_faction_culture"),
      #(faction_set_slot, "fac_player_faction",  slot_faction_culture, ":player_faction_culture"),
	]),


  #script_game_set_multiplayer_mission_end
  # This script is called from the game engine when a multiplayer map is ended in clients (not in server).
  # INPUT:
  # none
  # OUTPUT:
  # none
  ("game_set_multiplayer_mission_end",
    [
      (assign, "$g_multiplayer_mission_end_screen", 1),
  ]),
  #script_game_enable_cheat_menu
  # This script is called from the game engine when user enters "cheatmenu from command console (ctrl+~).
  # INPUT:
  # none
  # OUTPUT:
  # none
  ("game_enable_cheat_menu",
    [
      (store_script_param, ":input", 1),
      (try_begin),
        (eq, ":input", 0),
        (assign, "$cheat_mode", 0),
      (else_try),
        (eq, ":input", 1),
        (assign, "$cheat_mode", 1),
      (try_end),
      ]),

  #script_game_get_console_command
  # This script is called from the game engine when a console command is entered from the dedicated server.
  # INPUT: anything
  # OUTPUT: s0 = result text
  ("game_get_console_command",
   [
     (store_script_param, ":input", 1),
     (store_script_param, ":val1", 2),
     (try_begin),
       #getting val2 for some commands
       (eq, ":input", 2),
       (store_script_param, ":val2", 3),
     (try_end),
     (try_begin),
       (eq, ":input", 1),
       (assign, reg0, ":val1"),
       (try_begin),
         (eq, ":val1", 1),
         (assign, reg1, "$g_multiplayer_num_bots_team_1"),
         (str_store_string, s0, "str_team_reg0_bot_count_is_reg1"),
       (else_try),
         (eq, ":val1", 2),
         (assign, reg1, "$g_multiplayer_num_bots_team_2"),
         (str_store_string, s0, "str_team_reg0_bot_count_is_reg1"),
       (else_try),
         (str_store_string, s0, "str_input_is_not_correct_for_the_command_type_help_for_more_information"),
       (try_end),
     (else_try),
       (eq, ":input", 2),
       (assign, reg0, ":val1"),
       (assign, reg1, ":val2"),
       (try_begin),
         (eq, ":val1", 1),
         (ge, ":val2", 0),
         (assign, "$g_multiplayer_num_bots_team_1", ":val2"),
         (str_store_string, s0, "str_team_reg0_bot_count_is_reg1"),
       (else_try),
         (eq, ":val1", 2),
         (ge, ":val2", 0),
         (assign, "$g_multiplayer_num_bots_team_2", ":val2"),
         (str_store_string, s0, "str_team_reg0_bot_count_is_reg1"),
       (else_try),
         (str_store_string, s0, "str_input_is_not_correct_for_the_command_type_help_for_more_information"),
       (try_end),
     (else_try),
       (eq, ":input", 3),
       (assign, reg0, "$g_multiplayer_round_max_seconds"),
       (str_store_string, s0, "str_maximum_seconds_for_round_is_reg0"),
     (else_try),
       (eq, ":input", 4),
       (assign, reg0, ":val1"),
       (try_begin),
         (is_between, ":val1", multiplayer_round_max_seconds_min, multiplayer_round_max_seconds_max),
         (assign, "$g_multiplayer_round_max_seconds", ":val1"),
         (str_store_string, s0, "str_maximum_seconds_for_round_is_reg0"),
         (get_max_players, ":num_players"),
         (try_for_range, ":cur_player", 1, ":num_players"),
           (player_is_active, ":cur_player"),
           (multiplayer_send_int_to_player, ":cur_player", multiplayer_event_return_round_max_seconds, ":val1"),
         (try_end),            
       (else_try),
         (str_store_string, s0, "str_input_is_not_correct_for_the_command_type_help_for_more_information"),
       (try_end),
     (else_try),
       (eq, ":input", 5),
       (assign, reg0, "$g_multiplayer_respawn_period"),
       (str_store_string, s0, "str_respawn_period_is_reg0_seconds"),
     (else_try),
       (eq, ":input", 6),
       (assign, reg0, ":val1"),
       (try_begin),
         (is_between, ":val1", multiplayer_respawn_period_min, multiplayer_respawn_period_max),
         (assign, "$g_multiplayer_respawn_period", ":val1"),
         (str_store_string, s0, "str_respawn_period_is_reg0_seconds"),
       (else_try),
         (str_store_string, s0, "str_input_is_not_correct_for_the_command_type_help_for_more_information"),
       (try_end),
     (else_try),
       (eq, ":input", 7),
       (assign, reg0, "$g_multiplayer_num_bots_voteable"),
       (str_store_string, s0, "str_bots_upper_limit_for_votes_is_reg0"),
     (else_try),
       (eq, ":input", 8),
       (try_begin),
         (is_between, ":val1", 0, 51),
         (assign, "$g_multiplayer_num_bots_voteable", ":val1"),
         (store_add, "$g_multiplayer_max_num_bots", ":val1", 1),
         (assign, reg0, "$g_multiplayer_num_bots_voteable"),
         (str_store_string, s0, "str_bots_upper_limit_for_votes_is_reg0"),
         (get_max_players, ":num_players"),
         (try_for_range, ":cur_player", 1, ":num_players"),
           (player_is_active, ":cur_player"),
           (multiplayer_send_int_to_player, ":cur_player", multiplayer_event_return_num_bots_voteable, ":val1"),
         (try_end),
       (else_try),
         (str_store_string, s0, "str_input_is_not_correct_for_the_command_type_help_for_more_information"),
       (try_end),
     (else_try),
       (eq, ":input", 9),
       (try_begin),
         (eq, "$g_multiplayer_maps_voteable", 1),
         (str_store_string, s0, "str_map_is_voteable"),
       (else_try),
         (str_store_string, s0, "str_map_is_not_voteable"),
       (try_end),
     (else_try),
       (eq, ":input", 10),
       (try_begin),
         (is_between, ":val1", 0, 2),
         (assign, "$g_multiplayer_maps_voteable", ":val1"),
         (try_begin),
           (eq, ":val1", 1),
           (str_store_string, s0, "str_map_is_voteable"),
         (else_try),
           (str_store_string, s0, "str_map_is_not_voteable"),
         (try_end),
         (get_max_players, ":num_players"),
         (try_for_range, ":cur_player", 1, ":num_players"),
           (player_is_active, ":cur_player"),
           (multiplayer_send_int_to_player, ":cur_player", multiplayer_event_return_maps_voteable, ":val1"),
         (try_end),
       (else_try),
         (str_store_string, s0, "str_input_is_not_correct_for_the_command_type_help_for_more_information"),
       (try_end),
     (else_try),
       (eq, ":input", 11),
       (try_begin),
         (eq, "$g_multiplayer_factions_voteable", 1),
         (str_store_string, s0, "str_factions_are_voteable"),
       (else_try),
         (str_store_string, s0, "str_factions_are_not_voteable"),
       (try_end),
     (else_try),
       (eq, ":input", 12),
       (try_begin),
         (is_between, ":val1", 0, 2),
         (assign, "$g_multiplayer_factions_voteable", ":val1"),
         (try_begin),
           (eq, ":val1", 1),
           (str_store_string, s0, "str_factions_are_voteable"),
         (else_try),
           (str_store_string, s0, "str_factions_are_not_voteable"),
         (try_end),
         (get_max_players, ":num_players"),
         (try_for_range, ":cur_player", 1, ":num_players"),
           (player_is_active, ":cur_player"),
           (multiplayer_send_int_to_player, ":cur_player", multiplayer_event_return_factions_voteable, ":val1"),
         (try_end),
       (else_try),
         (str_store_string, s0, "str_input_is_not_correct_for_the_command_type_help_for_more_information"),
       (try_end),
     (else_try),
       (eq, ":input", 13),
       (try_begin),
         (eq, "$g_multiplayer_player_respawn_as_bot", 1),
         (str_store_string, s0, "str_players_respawn_as_bot"),
       (else_try),
         (str_store_string, s0, "str_players_do_not_respawn_as_bot"),
       (try_end),
     (else_try),
       (eq, ":input", 14),
       (try_begin),
         (is_between, ":val1", 0, 2),
         (assign, "$g_multiplayer_player_respawn_as_bot", ":val1"),
         (try_begin),
           (eq, ":val1", 1),
           (str_store_string, s0, "str_players_respawn_as_bot"),
         (else_try),
           (str_store_string, s0, "str_players_do_not_respawn_as_bot"),
         (try_end),
         (get_max_players, ":num_players"),
         (try_for_range, ":cur_player", 1, ":num_players"),
           (player_is_active, ":cur_player"),
           (multiplayer_send_int_to_player, ":cur_player", multiplayer_event_return_player_respawn_as_bot, ":val1"),
         (try_end),            
       (else_try),
         (str_store_string, s0, "str_input_is_not_correct_for_the_command_type_help_for_more_information"),
       (try_end),
     (else_try),
       (eq, ":input", 15),
       (try_begin),
         (eq, "$g_multiplayer_kick_voteable", 1),
         (str_store_string, s0, "str_kicking_a_player_is_voteable"),
       (else_try),
         (str_store_string, s0, "str_kicking_a_player_is_not_voteable"),
       (try_end),
     (else_try),
       (eq, ":input", 16),
       (try_begin),
         (is_between, ":val1", 0, 2),
         (assign, "$g_multiplayer_kick_voteable", ":val1"),
         (try_begin),
           (eq, ":val1", 1),
           (str_store_string, s0, "str_kicking_a_player_is_voteable"),
         (else_try),
           (str_store_string, s0, "str_kicking_a_player_is_not_voteable"),
         (try_end),
         (get_max_players, ":num_players"),
         (try_for_range, ":cur_player", 1, ":num_players"),
           (player_is_active, ":cur_player"),
           (multiplayer_send_int_to_player, ":cur_player", multiplayer_event_return_kick_voteable, ":val1"),
         (try_end),
       (else_try),
         (str_store_string, s0, "str_input_is_not_correct_for_the_command_type_help_for_more_information"),
       (try_end),
     (else_try),
       (eq, ":input", 17),
       (try_begin),
         (eq, "$g_multiplayer_ban_voteable", 1),
         (str_store_string, s0, "str_banning_a_player_is_voteable"),
       (else_try),
         (str_store_string, s0, "str_banning_a_player_is_not_voteable"),
       (try_end),
     (else_try),
       (eq, ":input", 18),
       (try_begin),
         (is_between, ":val1", 0, 2),
         (assign, "$g_multiplayer_ban_voteable", ":val1"),
         (try_begin),
           (eq, ":val1", 1),
           (str_store_string, s0, "str_banning_a_player_is_voteable"),
         (else_try),
           (str_store_string, s0, "str_banning_a_player_is_not_voteable"),
         (try_end),
         (get_max_players, ":num_players"),
         (try_for_range, ":cur_player", 1, ":num_players"),
           (player_is_active, ":cur_player"),
           (multiplayer_send_int_to_player, ":cur_player", multiplayer_event_return_ban_voteable, ":val1"),
         (try_end),
       (else_try),
         (str_store_string, s0, "str_input_is_not_correct_for_the_command_type_help_for_more_information"),
       (try_end),
     (else_try),
       (eq, ":input", 19),
       (assign, reg0, "$g_multiplayer_valid_vote_ratio"),
       (str_store_string, s0, "str_percentage_of_yes_votes_required_for_a_poll_to_get_accepted_is_reg0"),
     (else_try),
       (eq, ":input", 20),
       (try_begin),
         (is_between, ":val1", 50, 101),
         (assign, "$g_multiplayer_valid_vote_ratio", ":val1"),
         (assign, reg0, ":val1"),
         (str_store_string, s0, "str_percentage_of_yes_votes_required_for_a_poll_to_get_accepted_is_reg0"),
       (else_try),
         (str_store_string, s0, "str_input_is_not_correct_for_the_command_type_help_for_more_information"),
       (try_end),
     (else_try),
       (eq, ":input", 21),
       (assign, reg0, "$g_multiplayer_auto_team_balance_limit"),
       (str_store_string, s0, "str_auto_team_balance_threshold_is_reg0"),
     (else_try),
       (eq, ":input", 22),
       (try_begin),
         (is_between, ":val1", 2, 7),
         (assign, "$g_multiplayer_auto_team_balance_limit", ":val1"),
         (assign, reg0, "$g_multiplayer_auto_team_balance_limit"),
         (str_store_string, s0, "str_auto_team_balance_threshold_is_reg0"),
         (get_max_players, ":num_players"),
         (try_for_range, ":cur_player", 1, ":num_players"),
           (player_is_active, ":cur_player"),
           (multiplayer_send_int_to_player, ":cur_player", multiplayer_event_return_auto_team_balance_limit, ":val1"),
         (try_end),
       (else_try),
         (ge, ":val1", 7),
         (assign, "$g_multiplayer_auto_team_balance_limit", 1000),
         (assign, reg0, "$g_multiplayer_auto_team_balance_limit"),
         (str_store_string, s0, "str_auto_team_balance_threshold_is_reg0"),
         (get_max_players, ":num_players"),
         (try_for_range, ":cur_player", 1, ":num_players"),
           (player_is_active, ":cur_player"),
           (multiplayer_send_int_to_player, ":cur_player", multiplayer_event_return_auto_team_balance_limit, ":val1"),
         (try_end),
       (else_try),
         (str_store_string, s0, "str_input_is_not_correct_for_the_command_type_help_for_more_information"),
       (try_end),
     (else_try),
       (eq, ":input", 23),
       (assign, reg0, "$g_multiplayer_initial_gold_multiplier"),
       (str_store_string, s0, "str_starting_gold_ratio_is_reg0"),
     (else_try),
       (eq, ":input", 24),
       (try_begin),
         (is_between, ":val1", 0, 1001),
         (assign, "$g_multiplayer_initial_gold_multiplier", ":val1"),
         (assign, reg0, "$g_multiplayer_initial_gold_multiplier"),
         (str_store_string, s0, "str_starting_gold_ratio_is_reg0"),
       (else_try),
         (str_store_string, s0, "str_input_is_not_correct_for_the_command_type_help_for_more_information"),
       (try_end),
     (else_try),
       (eq, ":input", 25),
       (assign, reg0, "$g_multiplayer_battle_earnings_multiplier"),
       (str_store_string, s0, "str_combat_gold_bonus_ratio_is_reg0"),
     (else_try),
       (eq, ":input", 26),
       (try_begin),
         (is_between, ":val1", 0, 1001),
         (assign, "$g_multiplayer_battle_earnings_multiplier", ":val1"),
         (assign, reg0, "$g_multiplayer_battle_earnings_multiplier"),
         (str_store_string, s0, "str_combat_gold_bonus_ratio_is_reg0"),
       (else_try),
         (str_store_string, s0, "str_input_is_not_correct_for_the_command_type_help_for_more_information"),
       (try_end),
     (else_try),
       (eq, ":input", 27),
       (assign, reg0, "$g_multiplayer_round_earnings_multiplier"),
       (str_store_string, s0, "str_round_gold_bonus_ratio_is_reg0"),
     (else_try),
       (eq, ":input", 28),
       (try_begin),
         (is_between, ":val1", 0, 1001),
         (assign, "$g_multiplayer_round_earnings_multiplier", ":val1"),
         (assign, reg0, "$g_multiplayer_round_earnings_multiplier"),
         (str_store_string, s0, "str_round_gold_bonus_ratio_is_reg0"),
       (else_try),
         (str_store_string, s0, "str_input_is_not_correct_for_the_command_type_help_for_more_information"),
       (try_end),
     (else_try),
       (eq, ":input", 29),
       (try_begin),
         (eq, "$g_multiplayer_allow_player_banners", 1),
         (str_store_string, s0, "str_player_banners_are_allowed"),
       (else_try),
         (str_store_string, s0, "str_player_banners_are_not_allowed"),
       (try_end),
     (else_try),
       (eq, ":input", 30),
       (try_begin),
         (is_between, ":val1", 0, 2),
         (assign, "$g_multiplayer_allow_player_banners", ":val1"),
         (try_begin),
           (eq, ":val1", 1),
           (str_store_string, s0, "str_player_banners_are_allowed"),
         (else_try),
           (str_store_string, s0, "str_player_banners_are_not_allowed"),
         (try_end),
       (else_try),
         (str_store_string, s0, "str_input_is_not_correct_for_the_command_type_help_for_more_information"),
       (try_end),
     (else_try),
       (eq, ":input", 31),
       (try_begin),
         (eq, "$g_multiplayer_force_default_armor", 1),
         (str_store_string, s0, "str_default_armor_is_forced"),
       (else_try),
         (str_store_string, s0, "str_default_armor_is_not_forced"),
       (try_end),
     (else_try),
       (eq, ":input", 32),
       (try_begin),
         (is_between, ":val1", 0, 2),
         (assign, "$g_multiplayer_force_default_armor", ":val1"),
         (try_begin),
           (eq, ":val1", 1),
           (str_store_string, s0, "str_default_armor_is_forced"),
         (else_try),
           (str_store_string, s0, "str_default_armor_is_not_forced"),
         (try_end),
       (else_try),
         (str_store_string, s0, "str_input_is_not_correct_for_the_command_type_help_for_more_information"),
       (try_end),
     (else_try),
       (eq, ":input", 33),
       (assign, reg0, "$g_multiplayer_point_gained_from_flags"),
       (str_store_string, s0, "str_point_gained_from_flags_is_reg0"),
     (else_try),
       (eq, ":input", 34),
       (try_begin),
         (is_between, ":val1", 25, 401),
         (assign, "$g_multiplayer_point_gained_from_flags", ":val1"),
         (assign, reg0, "$g_multiplayer_point_gained_from_flags"),
         (str_store_string, s0, "str_point_gained_from_flags_is_reg0"),
       (else_try),
         (str_store_string, s0, "str_input_is_not_correct_for_the_command_type_help_for_more_information"),
       (try_end),
     (else_try),
       (eq, ":input", 35),
       (assign, reg0, "$g_multiplayer_point_gained_from_capturing_flag"),
       (str_store_string, s0, "str_point_gained_from_capturing_flag_is_reg0"),
     (else_try),
       (eq, ":input", 36),
       (try_begin),
         (is_between, ":val1", 0, 11),
         (assign, "$g_multiplayer_point_gained_from_capturing_flag", ":val1"),
         (assign, reg0, "$g_multiplayer_point_gained_from_capturing_flag"),
         (str_store_string, s0, "str_point_gained_from_capturing_flag_is_reg0"),
       (else_try),
         (str_store_string, s0, "str_input_is_not_correct_for_the_command_type_help_for_more_information"),
       (try_end),
     (else_try),
       (eq, ":input", 37),
       (assign, reg0, "$g_multiplayer_game_max_minutes"),
       (str_store_string, s0, "str_map_time_limit_is_reg0"),
     (else_try),
       (eq, ":input", 38),
       (try_begin),
         (is_between, ":val1", 5, 121),
         (assign, "$g_multiplayer_game_max_minutes", ":val1"),
         (assign, reg0, "$g_multiplayer_game_max_minutes"),
         (str_store_string, s0, "str_map_time_limit_is_reg0"),
       (else_try),
         (str_store_string, s0, "str_input_is_not_correct_for_the_command_type_help_for_more_information"),
       (try_end),
     (else_try),
       (eq, ":input", 39),
       (assign, reg0, "$g_multiplayer_game_max_points"),
       (str_store_string, s0, "str_team_points_limit_is_reg0"),
     (else_try),
       (eq, ":input", 40),
       (try_begin),
         (is_between, ":val1", 3, 1001),
         (assign, "$g_multiplayer_game_max_points", ":val1"),
         (assign, reg0, "$g_multiplayer_game_max_points"),
         (str_store_string, s0, "str_team_points_limit_is_reg0"),
       (else_try),
         (str_store_string, s0, "str_input_is_not_correct_for_the_command_type_help_for_more_information"),
       (try_end),
     (else_try),
       (eq, ":input", 41),
       (assign, reg0, "$g_multiplayer_number_of_respawn_count"),
       (try_begin),
         (eq, reg0, 0),
         (str_store_string, s1, "str_unlimited"),
       (else_try),
         (str_store_string, s1, "str_reg0"),
       (try_end),
       (str_store_string, s0, "str_defender_spawn_count_limit_is_s1"),
     (else_try),
       (eq, ":input", 42),
       (try_begin),
         (is_between, ":val1", 0, 6),
         (assign, "$g_multiplayer_number_of_respawn_count", ":val1"),
         (assign, reg0, "$g_multiplayer_number_of_respawn_count"),
         (try_begin),
           (eq, reg0, 0),
           (str_store_string, s1, "str_unlimited"),
         (else_try),
           (str_store_string, s1, "str_reg0"),
         (try_end),
         (str_store_string, s0, "str_defender_spawn_count_limit_is_s1"),
         (get_max_players, ":num_players"),
         (try_for_range, ":cur_player", 1, ":num_players"),
           (player_is_active, ":cur_player"),
           (multiplayer_send_int_to_player, ":cur_player", multiplayer_event_return_respawn_count, ":val1"),
         (try_end),                  
       (else_try),
         (str_store_string, s0, "str_input_is_not_correct_for_the_command_type_help_for_more_information"),
       (try_end),
     (else_try),
       (eq, ":input", 43),
       (try_begin),
         (eq, "$g_multiplayer_disallow_ranged_weapons", 1),
         (str_store_string, s0, "str_ranged_weapons_are_disallowed"),
       (else_try),
         (str_store_string, s0, "str_ranged_weapons_are_allowed"),
       (try_end),
     (else_try),
       (eq, ":input", 44),
       (try_begin),
         (is_between, ":val1", 0, 2),
         (assign, "$g_multiplayer_disallow_ranged_weapons", ":val1"),
         (try_begin),
           (eq, ":val1", 1),
           (str_store_string, s0, "str_ranged_weapons_are_disallowed"),
         (else_try),
           (str_store_string, s0, "str_ranged_weapons_are_allowed"),
         (try_end),
       (else_try),
         (str_store_string, s0, "str_input_is_not_correct_for_the_command_type_help_for_more_information"),
       (try_end),
	 (else_try), 
	    (eq, ":input", 45),
		#squad size
		(try_begin), 
			(is_between, ":val1", 0, 26),
		    (neq, "$g_multiplayer_game_type", multiplayer_game_type_captain_coop), #squad size is constant for coop
			(assign, "$g_multiplayer_squad_size", ":val1"),
			(store_add, ":str", "str_squad_size_normal", ":val1"), 
			(str_store_string, s0, ":str"),
			(str_store_string, s0, "str_squad_size_s0"),
        (else_try),
			(str_store_string, s0, "str_input_is_not_correct_for_the_command_type_help_for_more_information"),
		(try_end), 
	 (else_try), 
	    (eq, ":input", 46),
		#granades
       (try_begin),
         (is_between, ":val1", 0, 2),
         (assign, "$g_multiplayer_disallow_granades", ":val1"),
         (try_begin),
           (eq, ":val1", 1),
           (str_store_string, s0, "str_granades_are_disallowed"),
         (else_try),
           (str_store_string, s0, "str_granades_are_allowed"),
         (try_end),
       (else_try),
         (str_store_string, s0, "str_input_is_not_correct_for_the_command_type_help_for_more_information"),
       (try_end),
     (else_try),
		(eq, ":input", 47), # set_team_ratio <value> #sets team ratio of captains and mercenaries (1-24)
		# team ratio (for captain battle)
		(try_begin), 
			(is_between, ":val1", 1, 25),
		    (assign, "$g_multiplayer_team_ratio", ":val1"),
			
			(assign, reg0, "$g_multiplayer_team_ratio"),
			(str_store_string, s0, "str_1_div"),
			(str_store_string, s1, "str_s0_reg0"),
			(str_store_string, s0, "str_captain_merc_ratio"),
			(str_store_string, s0, "str_s0_s1"),
        (else_try),
			(str_store_string, s0, "str_input_is_not_correct_for_the_command_type_help_for_more_information"),
		(try_end),
	 (else_try),
		(eq, ":input", 48), # get_team_ratio # returns team ratio of captains and mercenaries
		(assign, reg0, "$g_multiplayer_team_ratio"),
		(str_store_string, s0, "str_1_div"),
		(str_store_string, s1, "str_s0_reg0"),
		(str_store_string, s0, "str_captain_merc_ratio"),
		(str_store_string, s0, "str_s0_s1"),
	 (else_try),
		(eq, ":input", 49), # get_squad_size # returns the squad size for captain mode
		(assign, reg0, "$g_multiplayer_squad_size"),
		(str_store_string, s0, "str_reg0"),
		(str_store_string, s0, "str_squad_size_s0"),
	 (else_try),
       (str_store_string, s0, "@{!}DEBUG : SYSTEM ERROR!"),
     (try_end),
  ]),
  

  # script_game_event_party_encounter:
  # This script is called from the game engine whenever player party encounters another party or a battle on the world map
  # INPUT:
  # param1: encountered_party
  # param2: second encountered_party (if this was a battle
  ("game_event_party_encounter",
   [
       (store_script_param_1, "$g_encountered_party"),
       (store_script_param_2, "$g_encountered_party_2"),# encountered_party2 is set when we come across a battle or siege, otherwise it's a negative value
#       (store_encountered_party, "$g_encountered_party"),
#       (store_encountered_party2,"$g_encountered_party_2"), # encountered_party2 is set when we come across a battle or siege, otherwise it's a minus value
       (store_faction_of_party, "$g_encountered_party_faction","$g_encountered_party"),
       (store_relation, "$g_encountered_party_relation", "$g_encountered_party_faction", "fac_player_faction"),
              
       (party_get_slot, "$g_encountered_party_type", "$g_encountered_party", slot_party_type),
       (party_get_template_id,"$g_encountered_party_template","$g_encountered_party"),
#       (try_begin),
#         (gt, "$g_encountered_party_2", 0),
#         (store_faction_of_party, "$g_encountered_party_2_faction","$g_encountered_party_2"),
#         (store_relation, "$g_encountered_party_2_relation", "$g_encountered_party_2_faction", "fac_player_faction"),
#         (party_get_template_id,"$g_encountered_party_2_template","$g_encountered_party_2"),
#       (else_try),
#         (assign, "$g_encountered_party_2_faction",-1),
#         (assign, "$g_encountered_party_2_relation", 0),
#         (assign,"$g_encountered_party_2_template", -1),
#       (try_end),

#NPC companion changes begin
       (call_script, "script_party_count_fit_regulars", "p_main_party"),
       (assign, "$playerparty_prebattle_regulars", reg0),

#        (try_begin),
#            (assign, "$player_party__regulars", 0),
#            (call_script, "script_party_count_fit_regulars", "p_main_party"),
#            (gt, reg0, 0),
#            (assign, "$player_party_contains_regulars", 1),
#        (try_end),
#NPC companion changes end


       (assign, "$g_last_rest_center", -1),
	   (assign, "$g_tavern_rest", 0),
       (assign, "$talk_context", 0),
       (assign,"$g_player_surrenders",0),
       (assign,"$g_enemy_surrenders",0),
       (assign, "$g_leave_encounter",0),
       (assign, "$g_engaged_enemy", 0),
#       (assign,"$waiting_for_arena_fight_result", 0),
#       (assign,"$arena_bet_amount",0),
#       (assign,"$g_player_raiding_village",0),
       (try_begin),
         (neg|is_between, "$g_encountered_party", centers_begin, centers_end),
         (rest_for_hours, 0), #stop waiting
       (try_end),
#       (assign, "$g_permitted_to_center",0),
       (assign, "$new_encounter", 1), #check this in the menu.
       (try_begin),
         (lt, "$g_encountered_party_2",0), #Normal encounter. Not battle or siege.
		 #oim code!
         (try_begin),
            (eq, "$g_encountered_party", "p_village_54"),
		    (check_quest_active,"qst_oim_potop_defend_church"),
			(neg|check_quest_succeeded,"qst_oim_potop_defend_church"),
		    (neg|check_quest_failed,"qst_oim_potop_defend_church"), 
       		(assign, "$oim_auto_talk_troop", "trp_nord_archer"), 
			(jump_to_menu, "mnu_oim_auto_talk_menu"),
			(finish_mission),
			(music_set_situation, 0),
		 (else_try),	
           (eq, "$g_encountered_party", "p_castle_17"),
		   (check_quest_active,"qst_oim_bring_tatarin_to_perekop"),
		   (neg|check_quest_succeeded,"qst_oim_bring_tatarin_to_perekop"), 
		   (neg|check_quest_failed,"qst_oim_bring_tatarin_to_perekop"), 
		   (neg|check_quest_finished,"qst_oim_bring_tatarin_to_perekop"), 
           (jump_to_menu, "mnu_oim_tatarin_brought_to_perekop"),		   
         (else_try),	
           (eq, "$g_encountered_party", "$oim_getman_target_village"),
		   (check_quest_active,"qst_oim_getman_defend_villages"),
		   (neg|check_quest_succeeded,"qst_oim_getman_defend_villages"),
		   (neg|check_quest_failed,"qst_oim_getman_defend_villages"),
           (jump_to_menu, "mnu_oim_getman_defend_village"),		   
         (else_try),			   
		   (eq, "$g_encountered_party", "p_village_53"),
		   (check_quest_active,"qst_oim_getman_nesvizh_pernach"),
		   (neg|check_quest_succeeded,"qst_oim_getman_nesvizh_pernach"),
		   (neg|check_quest_failed,"qst_oim_getman_nesvizh_pernach"),
		   (quest_slot_eq, "qst_oim_getman_nesvizh_pernach", slot_quest_current_state, 1),
    	   (jump_to_menu, "mnu_oim_getman_fight_in_nesvizh"),
         (else_try),			   
		   (quest_slot_eq, "qst_oim_getman_voron_translate",slot_quest_target_center, "$g_encountered_party"),		 
		   (check_quest_active,"qst_oim_getman_voron_translate"),
		   (neg|check_quest_failed,"qst_oim_getman_voron_translate"),
		   (quest_slot_eq, "qst_oim_getman_voron_translate", slot_quest_current_state, 2),
    	   (assign, "$oim_auto_talk_troop", "trp_oim_getman_pafnutiy"), 
		   (jump_to_menu, "mnu_oim_auto_talk_menu"),
         (else_try),			   
		   (quest_slot_eq, "qst_oim_getman_korona_vitovta", slot_quest_target_center, "$g_encountered_party"),		 
		   (check_quest_active,"qst_oim_getman_korona_vitovta"),
		   (neg|check_quest_succeeded,"qst_oim_getman_korona_vitovta"),
		   (neg|check_quest_failed,"qst_oim_getman_korona_vitovta"),
		   (quest_slot_eq, "qst_oim_getman_korona_vitovta", slot_quest_current_state, 4),
		   (jump_to_menu, "mnu_oim_korono_vitovta"),
		   	#(quest_set_slot, "qst_oim_getman_korona_vitovta", slot_quest_target_center, ":quest_target_center"),
		 (else_try), 
			#(store_current_day, ":cur_day"),
			#(quest_get_slot, "qst_oim_dmitriy_elections", slot_quest_start_time, ":cur_day"),
			(check_quest_active,"qst_oim_dmitriy_elections"),
			(check_quest_failed,"qst_oim_dmitriy_elections"),
			(quest_get_slot, ":qst_day", "qst_oim_dmitriy_elections", slot_quest_start_time),
		    (store_current_day, ":cur_day"),
			#(store_faction_of_party, ":faction", "$g_encountered_party"), 
			(val_add, ":qst_day", 3),
			(ge, ":cur_day", ":qst_day"),
			#(eq, ":faction", "fac_kingdom_2"), 
			(this_or_next|party_slot_eq, "$g_encountered_party", slot_party_type, spt_town),
			(this_or_next|party_slot_eq, "$g_encountered_party", slot_party_type, spt_castle),
			(party_slot_eq, "$g_encountered_party", slot_party_type, spt_village),
			(str_store_string, s2, "str_oim_dmitriy_elections_fail"),
			(jump_to_menu, "mnu_oim_last_game_menu"),
		 #(else_try), 	
		   #(check_quest_active, "qst_oim_deliver_caravan"),
		   #(quest_slot_eq, "qst_oim_deliver_caravan", slot_quest_target_center, "$g_encountered_party"),  
		   #(jump_to_menu, "mnu_oim_caravan_delivered"),
		 (else_try),
           (party_slot_eq, "$g_encountered_party", slot_party_type, spt_town),
           (jump_to_menu, "mnu_castle_outside"),
         (else_try),
           (party_slot_eq, "$g_encountered_party", slot_party_type, spt_castle),
           (jump_to_menu, "mnu_castle_outside"),
         (else_try),
           (party_slot_eq, "$g_encountered_party", slot_party_type, spt_ship),
           (jump_to_menu, "mnu_ship_reembark"),
         (else_try),
           (party_slot_eq, "$g_encountered_party", slot_party_type, spt_village),
           (jump_to_menu, "mnu_village"),
         (else_try),
           (party_slot_eq, "$g_encountered_party", slot_party_type, spt_cattle_herd),
           (jump_to_menu, "mnu_cattle_herd"),
         (else_try),
           (is_between, "$g_encountered_party", training_grounds_begin, training_grounds_end),
           (jump_to_menu, "mnu_training_ground"),
		 (else_try),  
           (eq, "$g_encountered_party", "p_zendar"),
           (jump_to_menu, "mnu_zendar"),
         (else_try),
           (eq, "$g_encountered_party", "p_salt_mine"),
           (jump_to_menu, "mnu_salt_mine"),
         (else_try),
           (eq, "$g_encountered_party", "p_four_ways_inn"),
           (jump_to_menu, "mnu_four_ways_inn"),
         (else_try),
           (eq, "$g_encountered_party", "p_test_scene"),
           (jump_to_menu, "mnu_test_scene"),
         (else_try),
           (eq, "$g_encountered_party", "p_battlefields"),
           (jump_to_menu, "mnu_battlefields"),
         (else_try),
           (eq, "$g_encountered_party", "p_camp_bandits"),           
           (jump_to_menu, "mnu_camp"),
         (else_try),
		   (party_get_template_id, ":cur_party_template", "$g_encountered_party"),
           (eq, ":cur_party_template", "pt_oim_static_object"),
           (jump_to_menu, "mnu_auto_return_to_map"),
         (else_try),
           (jump_to_menu, "mnu_simple_encounter"),
         (try_end),
       (else_try), #Battle or siege
         (try_begin),
           (this_or_next|party_slot_eq, "$g_encountered_party", slot_party_type, spt_town),
           (party_slot_eq, "$g_encountered_party", slot_party_type, spt_castle),
           (try_begin),
             (eq, "$auto_enter_town", "$g_encountered_party"),
             (jump_to_menu, "mnu_town"),
           (else_try),
             (eq, "$auto_besiege_town", "$g_encountered_party"),
             (jump_to_menu, "mnu_besiegers_camp_with_allies"),
           (else_try),
             (jump_to_menu, "mnu_join_siege_outside"),
           (try_end),
         (else_try),
           (jump_to_menu, "mnu_pre_join"),
         (try_end),
       (try_end),
       (assign,"$auto_enter_town",0),
       (assign,"$auto_besiege_town",0),
      ]),

  #script_game_event_simulate_battle:
  # This script is called whenever the game simulates the battle between two parties on the map.
  # INPUT:
  # param1: Defender Party
  # param2: Attacker Party
  ("game_event_simulate_battle",
    [
      (store_script_param_1, ":root_defender_party"),
      (store_script_param_2, ":root_attacker_party"),
	  (try_begin), 
        (ge, ":root_defender_party", 0),
        (ge, ":root_attacker_party", 0),
        (party_is_active, ":root_defender_party"),
        (party_is_active, ":root_attacker_party"),
        (store_faction_of_party, ":defender_faction", ":root_defender_party"),
        (store_faction_of_party, ":attacker_faction", ":root_attacker_party"),
        (eq, ":defender_faction", "fac_player_faction"),
        (eq, ":attacker_faction", "fac_player_faction"),
		(assign, ":trigger_result", 1),
      (else_try),
        (ge, ":root_defender_party", 0),
        (ge, ":root_attacker_party", 0),
        (party_is_active, ":root_defender_party"),
        (party_is_active, ":root_attacker_party"),
        (store_faction_of_party, ":defender_faction", ":root_defender_party"),
        (store_faction_of_party, ":attacker_faction", ":root_attacker_party"),
        #(neq, ":defender_faction", "fac_player_faction"),
        #(neq, ":attacker_faction", "fac_player_faction"),
        (store_relation, ":reln", ":defender_faction", ":attacker_faction"),
        (lt, ":reln", 0),
        (assign, ":trigger_result", 0),

        (try_begin),
          (this_or_next|eq, "$g_battle_simulation_cancel_for_party", ":root_defender_party"),
          (eq, "$g_battle_simulation_cancel_for_party", ":root_attacker_party"),
          (assign, "$g_battle_simulation_cancel_for_party", -1),
          (assign, "$auto_enter_town", "$g_battle_simulation_auto_enter_town_after_battle"),
          (assign, ":trigger_result", 1),
        (else_try),
          (try_begin),
            (this_or_next|party_slot_eq, ":root_defender_party", slot_party_retreat_flag, 1),
            (party_slot_eq, ":root_attacker_party", slot_party_retreat_flag, 1),
            (assign, ":trigger_result", 1), #End battle!
          (try_end),
          (party_set_slot, ":root_attacker_party", slot_party_retreat_flag, 0),

          #(assign, ":cancel_attack", 0),

          (party_collect_attachments_to_party, ":root_defender_party", "p_collective_ally"),
          (party_collect_attachments_to_party, ":root_attacker_party", "p_collective_enemy"),

          #(call_script, "script_party_count_fit_for_battle", "p_collective_ally"),
          (call_script, "script_party_calculate_strength", "p_collective_ally", 0),
          (assign, ":defender_strength", reg0),
          #(call_script, "script_party_count_fit_for_battle", "p_collective_enemy"),
          (call_script, "script_party_calculate_strength", "p_collective_enemy", 0),
          (assign, ":attacker_strength", reg0),

          (store_div, ":defender_strength", ":defender_strength", 20),
          (val_min, ":defender_strength", 50),
          (val_max, ":defender_strength", 1),
          (store_div, ":attacker_strength", ":attacker_strength", 20),
          (val_min, ":attacker_strength", 50),
          (val_add, ":attacker_strength", 1),
          (try_begin),
            #For sieges increase attacker casualties and reduce defender casualties.
            (this_or_next|party_slot_eq, ":root_defender_party", slot_party_type, spt_castle),
            (party_slot_eq, ":root_defender_party", slot_party_type, spt_town),
            (val_mul, ":defender_strength", 123), #it was 1.5 in old version, now it is only 1.23
            (val_div, ":defender_strength", 100),
      
            (val_mul, ":attacker_strength", 100), #it was 0.5 in old version, now it is only 1 / 1.23
            (val_div, ":attacker_strength", 123),
          (try_end),

          (call_script, "script_party_count_fit_for_battle", "p_collective_ally", 0),
          (assign, ":old_defender_strength", reg0),

          (try_begin),
            (neg|is_currently_night), #Don't fight at night
            (inflict_casualties_to_party_group, ":root_attacker_party", ":defender_strength", "p_temp_casualties"),
            (party_collect_attachments_to_party, ":root_attacker_party", "p_collective_enemy"),
          (try_end),
          (call_script, "script_party_count_fit_for_battle", "p_collective_enemy", 0),
          (assign, ":new_attacker_strength", reg0),

          (try_begin),
            (gt, ":new_attacker_strength", 0),
            (neg|is_currently_night), #Don't fight at night
            (inflict_casualties_to_party_group, ":root_defender_party", ":attacker_strength", "p_temp_casualties"),
            (party_collect_attachments_to_party, ":root_defender_party", "p_collective_ally"),
          (try_end),
          (call_script, "script_party_count_fit_for_battle", "p_collective_ally", 0),
          (assign, ":new_defender_strength", reg0),

          (try_begin),
            (this_or_next|eq, ":new_attacker_strength", 0),
            (eq, ":new_defender_strength", 0),
            # Battle concluded! determine winner
            
            (assign, ":do_not_end_battle", 0),
            (try_begin),
              (neg|troop_is_wounded, "trp_player"),
              (eq, ":new_defender_strength", 0),              
              (eq, "$auto_enter_town", "$g_encountered_party"),
              (eq, ":old_defender_strength", ":new_defender_strength"),
              (assign, ":do_not_end_battle", 1),
            (try_end),            
            (eq, ":do_not_end_battle", 0),

            (try_begin),
              (eq, ":new_attacker_strength", 0),
              (eq, ":new_defender_strength", 0),
              (assign, ":root_winner_party", -1),
              (assign, ":root_defeated_party", -1),
              (assign, ":collective_casualties", -1),
            (else_try),
              (eq, ":new_attacker_strength", 0),
              (assign, ":root_winner_party", ":root_defender_party"),
              (assign, ":root_defeated_party", ":root_attacker_party"),
              (assign, ":collective_casualties", "p_collective_enemy"),
            (else_try),
              (assign, ":root_winner_party", ":root_attacker_party"),
              (assign, ":root_defeated_party", ":root_defender_party"),
              (assign, ":collective_casualties", "p_collective_ally"),
            (try_end),

            (try_begin),
              (ge, ":root_winner_party", 0),
              (call_script, "script_get_nonempty_party_in_group", ":root_winner_party"),
              (assign, ":nonempty_winner_party", reg0),
              (store_faction_of_party, ":faction_receiving_prisoners", ":nonempty_winner_party"),
              (store_faction_of_party, ":defeated_faction", ":root_defeated_party"),
            (else_try),
              (assign, ":nonempty_winner_party", -1),
            (try_end),

            (try_begin),
              (ge, ":collective_casualties", 0),
              (party_get_num_companion_stacks, ":num_stacks", ":collective_casualties"),
            (else_try),
              (assign, ":num_stacks", 0),
            (try_end),
                                                                         
            (try_for_range, ":troop_iterator", 0, ":num_stacks"),
              (party_stack_get_troop_id, ":cur_troop_id", ":collective_casualties", ":troop_iterator"),
              (troop_is_hero, ":cur_troop_id"),
              (call_script, "script_remove_troop_from_prison", ":cur_troop_id"),
                              
              (troop_set_slot, ":cur_troop_id", slot_troop_leaded_party, -1),
               
              (store_random_in_range, ":rand", 0, 100),
              (str_store_troop_name_link, s1, ":cur_troop_id"),
              (str_store_faction_name_link, s2, ":faction_receiving_prisoners"),
              (store_troop_faction, ":defeated_troop_faction", ":cur_troop_id"),
              (str_store_faction_name_link, s3, ":defeated_troop_faction"),
              (try_begin),
                (ge, ":rand", hero_escape_after_defeat_chance),                
                (party_add_prisoners, ":nonempty_winner_party", ":cur_troop_id", 1),
                (gt, reg0, 0),                
                (troop_set_slot, ":cur_troop_id", slot_troop_prisoner_of_party, ":nonempty_winner_party"),
                (display_log_message, "str_hero_taken_prisoner"),				 				 				 				 		
                (call_script, "script_update_troop_location_notes", ":cur_troop_id", 0),
              (else_try),
                (display_message,"@{s1} of {s3} was defeated in battle but managed to escape."),
              (try_end),
              
              (try_begin),
                (store_troop_faction, ":cur_troop_faction", ":cur_troop_id"),
                (is_between, ":cur_troop_faction", kingdoms_begin, kingdoms_end),
                (faction_slot_eq, ":cur_troop_faction", slot_faction_marshall, ":cur_troop_id"),
                (is_between, ":cur_troop_faction", kingdoms_begin, kingdoms_end),
                #Marshall is defeated, refresh ai.
                (assign, "$g_recalculate_ais", 1),
              (try_end),
            (try_end),
			 
             (try_begin),
               (ge, ":collective_casualties", 0),
               (party_get_num_prisoner_stacks, ":num_stacks", ":collective_casualties"),
             (else_try),
               (assign, ":num_stacks", 0),
             (try_end),
             (try_for_range, ":troop_iterator", 0, ":num_stacks"),
               (party_prisoner_stack_get_troop_id, ":cur_troop_id", ":collective_casualties", ":troop_iterator"),
               (troop_is_hero, ":cur_troop_id"),
               (call_script, "script_remove_troop_from_prison", ":cur_troop_id"),
               (store_troop_faction, ":cur_troop_faction", ":cur_troop_id"),
               (str_store_troop_name_link, s1, ":cur_troop_id"),
               (str_store_faction_name_link, s2, ":faction_receiving_prisoners"),
               (str_store_faction_name_link, s3, ":cur_troop_faction"),
               (display_log_message,"str_hero_freed"),
             (try_end),

             (try_begin),
               (ge, ":collective_casualties", 0),
               (party_clear, "p_temp_party"),
               (call_script, "script_party_add_party_prisoners", "p_temp_party", ":collective_casualties"),
               (call_script, "script_party_prisoners_add_party_companions", "p_temp_party", ":collective_casualties"),
               (distribute_party_among_party_group, "p_temp_party", ":root_winner_party"),
			   			
               (call_script, "script_clear_party_group", ":root_defeated_party"),
             (try_end),
             (assign, ":trigger_result", 1), #End battle!

             #Center captured
             (try_begin),
               (ge, ":collective_casualties", 0),
               (party_get_slot, ":cur_party_type", ":root_defeated_party", slot_party_type),
               (this_or_next|eq, ":cur_party_type", spt_town),
               (eq, ":cur_party_type", spt_castle),

               (assign, "$g_recalculate_ais", 1),

               (store_faction_of_party, ":winner_faction", ":root_winner_party"),
               (store_faction_of_party, ":defeated_faction", ":root_defeated_party"),

               (str_store_party_name, s1, ":root_defeated_party"),
               (str_store_faction_name, s2, ":winner_faction"),
               (str_store_faction_name, s3, ":defeated_faction"),
               (display_log_message, "str_center_captured"),
						
               (try_begin),
                 (eq, "$g_encountered_party", ":root_defeated_party"),
                 (call_script, "script_add_log_entry", logent_player_participated_in_siege, "trp_player",  "$g_encountered_party", 0, "$g_encountered_party_faction"),
               (try_end),

               (try_begin),
                 (party_get_num_companion_stacks, ":num_stacks", ":root_winner_party"),
                 (gt, ":num_stacks", 0),
                 (party_stack_get_troop_id, ":leader_troop_no", ":root_winner_party", 0),
                 (is_between, ":leader_troop_no", kingdom_heroes_begin, kingdom_heroes_end),
                 (party_set_slot, ":root_defeated_party", slot_center_last_taken_by_troop, ":leader_troop_no"),
               (else_try),
                 (party_set_slot, ":root_defeated_party", slot_center_last_taken_by_troop, -1),
               (try_end),

               (call_script, "script_lift_siege", ":root_defeated_party", 0),
			   
               (call_script, "script_give_center_to_faction", ":root_defeated_party", ":winner_faction"),
               (try_begin),
                 (eq, ":defeated_faction", "fac_player_supporters_faction"),
                 (call_script, "script_add_notification_menu", "mnu_notification_center_lost", ":root_defeated_party", ":winner_faction"),
               (try_end),
               
               (party_get_num_attached_parties, ":num_attached_parties",  ":root_attacker_party"),
                 (try_for_range, ":attached_party_rank", 0, ":num_attached_parties"),
                 (party_get_attached_party_with_rank, ":attached_party", ":root_attacker_party", ":attached_party_rank"),
                                                                                                       
                 (party_get_num_companion_stacks, ":num_stacks", ":attached_party"),                 
                 (assign, ":total_size", 0),
                 (try_for_range, ":i_stack", 0, ":num_stacks"),
                   (party_stack_get_size, ":stack_size", ":attached_party", ":i_stack"),
                   (val_add, ":total_size", ":stack_size"),
                 (try_end),  
                 
                 (try_begin),
                   (ge, ":total_size", 10),
                   
                   (assign, ":stacks_added", 0),
                   (assign, ":last_random_stack", -1),
                   
                   (assign, ":end_condition", 10),
                   (try_for_range, ":unused", 0, ":end_condition"),
                     (store_random_in_range, ":random_stack", 1, ":num_stacks"),
                     (party_stack_get_troop_id, ":random_stack_troop", ":attached_party", ":random_stack"),
                     (party_stack_get_size, ":stack_size", ":attached_party", ":random_stack"),
                     (ge, ":stack_size", 4),
                     (neq, ":random_stack", ":last_random_stack"),
                   
                     (store_mul, ":total_size_mul_2", ":total_size", 2),
                     (assign, ":percentage", ":total_size_mul_2"),
                     (val_min, ":percentage", 100),                   
                   
                     (val_mul, ":stack_size", ":percentage"),
                     (val_div, ":stack_size", 100),
                     
					 (store_random_in_range, ":random_percentage", 1, 100), 
					 
                     (val_min, ":random_percentage", 100),                   
                     (val_mul, ":stack_size", 35),
                     (val_div, ":stack_size", 100),
                                                    
                     (party_add_members, ":root_defender_party", ":random_stack_troop", ":stack_size"),
                     (party_remove_members, ":attached_party", ":random_stack_troop", ":stack_size"),
                     
                     (val_add, ":stacks_added", 1),
                     (assign, ":last_random_stack", ":random_stack"),
                     
                     (try_begin),
                       #if troops from three different stack is already added then break
                       (eq, ":stacks_added", 3),
                       (assign, ":end_condition", 0),
                     (try_end),
                   (try_end),  
                 (try_end),  
               (try_end),
               
               #Reduce prosperity of the center by 5
			   (try_begin),
			     (neg|is_between, ":root_defeated_party", castles_begin, castles_end),				 
			     (call_script, "script_change_center_prosperity", ":root_defeated_party", -5),
			   (try_end),
               (call_script, "script_order_best_besieger_party_to_guard_center", ":root_defeated_party", ":winner_faction"),
             (try_end),
           (try_end),

           #ADD XP
           (try_begin),
             (party_slot_eq, ":root_attacker_party", slot_party_type, spt_kingdom_hero_party),
                          
             (assign, ":xp_gained_attacker", 200),

             (gt, ":new_attacker_strength", 0),             
             (call_script, "script_upgrade_hero_party", ":root_attacker_party", ":xp_gained_attacker"),
           (try_end),
           (try_begin),
             (party_slot_eq, ":root_defender_party", slot_party_type, spt_kingdom_hero_party),
                          
             (assign, ":xp_gained_defender", 200),

             (gt, ":new_defender_strength", 0),
             (call_script, "script_upgrade_hero_party", ":root_defender_party", ":xp_gained_defender"),
           (try_end),

           (try_begin),         
             #ozan - do not randomly end battles aganist towns or castles.
             (neg|party_slot_eq, ":root_defender_party", slot_party_type, spt_castle), #added by ozan
             (neg|party_slot_eq, ":root_defender_party", slot_party_type, spt_town),   #added by ozan        
             #end ozan
                          
             (party_get_slot, ":attacker_root_strength", ":root_attacker_party", slot_party_cached_strength),
             (party_get_slot, ":attacker_nearby_friend_strength", ":root_attacker_party", slot_party_nearby_friend_strength),
             (party_get_slot, ":strength_of_attacker_followers", ":root_attacker_party", slot_party_follower_strength),
             (store_add, ":total_attacker_strength", ":attacker_root_strength", ":attacker_nearby_friend_strength"),
             (val_add, ":total_attacker_strength", ":strength_of_attacker_followers"),

             (party_get_slot, ":defender_root_strength", ":root_defender_party", slot_party_cached_strength),
             (party_get_slot, ":defender_nearby_friend_strength", ":root_defender_party", slot_party_nearby_friend_strength),
             (party_get_slot, ":strength_of_defender_followers", ":root_defender_party", slot_party_follower_strength),
             (store_add, ":total_defender_strength", ":defender_root_strength", ":defender_nearby_friend_strength"),
             (val_add, ":total_attacker_strength", ":strength_of_defender_followers"),

             #Players can make save loads and change history because these random values are not determined from random_slots of troops
             (store_random_in_range, ":random_num", 0, 100),
                          
             (try_begin),
               (lt, ":random_num", 10),
               (assign, ":trigger_result", 1), #End battle!
             (try_end),
           (else_try),
             (party_get_slot, ":attacker_root_strength", ":root_attacker_party", slot_party_cached_strength),
             (party_get_slot, ":attacker_nearby_friend_strength", ":root_attacker_party", slot_party_nearby_friend_strength),
             (party_get_slot, ":strength_of_followers", ":root_attacker_party", slot_party_follower_strength),
             (store_add, ":total_attacker_strength", ":attacker_root_strength", ":attacker_nearby_friend_strength"),
             (val_add, ":total_attacker_strength", ":strength_of_followers"),

             (party_get_slot, ":defender_root_strength", ":root_defender_party", slot_party_cached_strength),
             (party_get_slot, ":defender_nearby_friend_strength", ":root_defender_party", slot_party_nearby_friend_strength),
             (store_add, ":total_defender_strength", ":defender_root_strength", ":defender_nearby_friend_strength"),

             (val_mul, ":total_defender_strength", 13), #multiply defender strength with 1.3
             (val_div, ":total_defender_strength", 10),

             (gt, ":total_defender_strength", ":total_attacker_strength"),
             (gt, ":total_defender_strength", 3),

             #Players can make save loads and change history because these random values are not determined from random_slots of troops
             (store_random_in_range, ":random_num", 0, 100),

             (try_begin),
               (lt, ":random_num", 15), #15% is a bit higher than 10% (which is open area escape probability)
               (assign, ":trigger_result", 1), #End battle!
                                             
               (assign, "$g_recalculate_ais", 1), #added new
                              
               (try_begin),
                 (eq, "$cheat_mode", 1),
                 (display_message, "@{!}DEBUG : Siege attackers are running away"),
               (try_end),
             (try_end),      
           (try_end),
         (try_end),  
       (try_end),
       (set_trigger_result, ":trigger_result"),
  ]),
  
  #script_game_event_battle_end:
  # This script is called whenever the game ends the battle between two parties on the map.
  # INPUT:
  # param1: Defender Party
  # param2: Attacker Party
  ("game_event_battle_end",
    [
##       (store_script_param_1, ":root_defender_party"),
##       (store_script_param_2, ":root_attacker_party"),
      #Fixing deleted heroes
      (try_for_range, ":cur_troop", kingdom_heroes_begin, kingdom_heroes_end),
        (troop_get_slot, ":cur_party", ":cur_troop", slot_troop_leaded_party),
        (troop_get_slot, ":cur_prisoner_of_party", ":cur_troop", slot_troop_prisoner_of_party),
        (try_begin),
          (ge, ":cur_party", 0),
          (assign, ":continue", 0),
          (try_begin),
            (neg|party_is_active, ":cur_party"),
            (assign, ":continue", 1),
          (else_try),
            (party_count_companions_of_type, ":amount", ":cur_party", ":cur_troop"),
            (le, ":amount", 0),
            (assign, ":continue", 1),
          (try_end),
          (eq, ":continue", 1),
          (try_begin),
            (eq, "$cheat_mode", 1),
            (str_store_troop_name, s1, ":cur_troop"),
            (display_message, "@DEBUG: {s1} no longer leads a party."),
          (try_end),
          (troop_set_slot, ":cur_troop", slot_troop_leaded_party, -1),
        (try_end),
        (try_begin),
          (ge, ":cur_prisoner_of_party", 0),
          (assign, ":continue", 0),
          (try_begin),
            (neg|party_is_active, ":cur_prisoner_of_party"),
            (assign, ":continue", 1),
          (else_try),
            (party_count_prisoners_of_type, ":amount", ":cur_prisoner_of_party", ":cur_troop"),
            (le, ":amount", 0),
            (assign, ":continue", 1),
          (try_end),
          (eq, ":continue", 1),
          (try_begin),
            (eq, "$cheat_mode", 1),
            (str_store_troop_name, s1, ":cur_troop"),
            (display_message, "@DEBUG: {s1} is no longer a prisoner."),
          (try_end),
          (call_script, "script_remove_troop_from_prison", ":cur_troop"),
          #searching player
          (try_begin),
            (party_count_prisoners_of_type, ":amount", "p_main_party", ":cur_troop"),
            (gt, ":amount", 0),
            (troop_set_slot, ":cur_troop", slot_troop_prisoner_of_party, "p_main_party"),
            (assign, ":continue", 0),
            (try_begin),
              (eq, "$cheat_mode", 1),
              (str_store_troop_name, s1, ":cur_troop"),
              (display_message, "@DEBUG: {s1} is now a prisoner of player."),
            (try_end),
          (try_end),
          (eq, ":continue", 1),
          #searching kingdom heroes
          (try_for_range, ":cur_troop_2", kingdom_heroes_begin, kingdom_heroes_end),
			(eq, ":continue", 1),
            (troop_get_slot, ":cur_prisoner_of_party_2", ":cur_troop_2", slot_troop_leaded_party),
            (party_is_active, ":cur_prisoner_of_party_2"),
            (party_count_prisoners_of_type, ":amount", ":cur_prisoner_of_party_2", ":cur_troop"),
            (gt, ":amount", 0),
            (troop_set_slot, ":cur_troop", slot_troop_prisoner_of_party, ":cur_prisoner_of_party_2"),
            (assign, ":continue", 0),
            (try_begin),
              (eq, "$cheat_mode", 1),
              (str_store_troop_name, s1, ":cur_troop"),
              (str_store_party_name, s2, ":cur_prisoner_of_party_2"),
              (display_message, "@DEBUG: {s1} is now a prisoner of {s2}."),
            (try_end),
          (try_end),
          #searching walled centers
          (try_for_range, ":cur_prisoner_of_party_2", walled_centers_begin, walled_centers_end),
            (eq, ":continue", 1),
            (party_count_prisoners_of_type, ":amount", ":cur_prisoner_of_party_2", ":cur_troop"),
            (gt, ":amount", 0),
            (troop_set_slot, ":cur_troop", slot_troop_prisoner_of_party, ":cur_prisoner_of_party_2"),
            (assign, ":continue", 0),
            (try_begin),
              (eq, "$cheat_mode", 1),
              (str_store_troop_name, s1, ":cur_troop"),
              (str_store_party_name, s2, ":cur_prisoner_of_party_2"),
              (display_message, "@DEBUG: {s1} is now a prisoner of {s2}."),
            (try_end),
          (try_end),
        (try_end),
      (try_end),
  ]),   
  
  #script_order_best_besieger_party_to_guard_center:
  # INPUT:
  # param1: defeated_center, param2: winner_faction
  # OUTPUT:
  # none
  ("order_best_besieger_party_to_guard_center",
    [
      (store_script_param, ":defeated_center", 1),
      (store_script_param, ":winner_faction", 2),
      (assign, ":best_party", -1),
      (assign, ":best_party_strength", 0),
      (try_for_range, ":kingdom_hero", kingdom_heroes_begin, kingdom_heroes_end),
        (troop_get_slot, ":kingdom_hero_party", ":kingdom_hero", slot_troop_leaded_party),
        (gt, ":kingdom_hero_party", 0),
        (party_is_active, ":kingdom_hero_party"),
        (store_distance_to_party_from_party, ":dist", ":kingdom_hero_party", ":defeated_center"),
        (lt, ":dist", 5),
        (store_faction_of_party, ":kingdom_hero_party_faction", ":kingdom_hero_party"),
        (eq, ":winner_faction", ":kingdom_hero_party_faction"),
        #If marshall has captured the castle, then do not leave him behind.
        (neg|faction_slot_eq, ":winner_faction", slot_faction_marshall, ":kingdom_hero"),
        (assign, ":has_besiege_ai", 0),
        (try_begin),
          (party_slot_eq, ":kingdom_hero_party", slot_party_ai_state, spai_besieging_center),
          (party_slot_eq, ":kingdom_hero_party", slot_party_ai_object, ":defeated_center"),
          (assign, ":has_besiege_ai", 1),
        (else_try),
          (party_slot_eq, ":kingdom_hero_party", slot_party_ai_state, spai_accompanying_army),
          (party_get_slot, ":kingdom_hero_party_commander_party", ":kingdom_hero_party", slot_party_commander_party),
          (try_begin), 
            (gt, ":kingdom_hero_party_commander_party", 0),
          (party_slot_eq, ":kingdom_hero_party_commander_party", slot_party_ai_state, spai_besieging_center),
          (party_slot_eq, ":kingdom_hero_party_commander_party", slot_party_ai_object, ":defeated_center"),
          (assign, ":has_besiege_ai", 1),
        (try_end),
        (try_end),
        (eq, ":has_besiege_ai", 1),
        (party_get_slot, ":kingdom_hero_party_strength", ":kingdom_hero_party", slot_party_cached_strength),#recently calculated
        (gt, ":kingdom_hero_party_strength", ":best_party_strength"),
        (assign, ":best_party_strength", ":kingdom_hero_party_strength"),
        (assign, ":best_party", ":kingdom_hero_party"),
      (try_end),
      (try_begin),
        (gt, ":best_party", 0),
        (call_script, "script_party_set_ai_state", ":best_party", spai_holding_center, ":defeated_center"),
        (party_set_slot, ":best_party", slot_party_commander_party, -1),
        (party_set_flags, ":best_party", pf_default_behavior, 1),
      (try_end),
      ]),

  #script_game_get_item_buy_price_factor:
  # This script is called from the game engine for calculating the buying price of any item.
  # INPUT:
  # param1: item_kind_id
  # OUTPUT:
  # trigger_result and reg0 = price_factor
  ("game_get_item_buy_price_factor",
    [
      (store_script_param_1, ":item_kind_id"),
      (assign, ":price_factor", 100),

      (call_script, "script_get_trade_penalty", ":item_kind_id"),
      (assign, ":trade_penalty", reg0),

      (try_begin),
        (is_between, "$g_encountered_party", centers_begin, centers_end),
        (is_between, ":item_kind_id", trade_goods_begin, trade_goods_end),
        (store_sub, ":item_slot_no", ":item_kind_id", trade_goods_begin),
        (val_add, ":item_slot_no", slot_town_trade_good_prices_begin),
        (party_get_slot, ":price_factor", "$g_encountered_party", ":item_slot_no"),			
        (val_mul, ":price_factor", 100), #normalize price factor to range 0..100
        (val_div, ":price_factor", average_price_factor),
      (try_end),
            
	  (assign, reg1, ":price_factor"),
      
      (store_add, ":penalty_factor", 100, ":trade_penalty"),
      
      (val_mul, ":price_factor", ":penalty_factor"),
      (val_div, ":price_factor", 100),	  

      (assign, reg0, ":price_factor"),	  

      (set_trigger_result, reg0),
  ]),
  
  #script_game_get_item_sell_price_factor:
  # This script is called from the game engine for calculating the selling price of any item.
  # INPUT:
  # param1: item_kind_id
  # OUTPUT:
  # trigger_result and reg0 = price_factor
  ("game_get_item_sell_price_factor",
    [
      (store_script_param_1, ":item_kind_id"),
      (assign, ":price_factor", 100),

      (call_script, "script_get_trade_penalty", ":item_kind_id"),
      (assign, ":trade_penalty", reg0),

      (try_begin),
        (is_between, "$g_encountered_party", centers_begin, centers_end),
        (is_between, ":item_kind_id", trade_goods_begin, trade_goods_end),
        (store_sub, ":item_slot_no", ":item_kind_id", trade_goods_begin),
        (val_add, ":item_slot_no", slot_town_trade_good_prices_begin),
        (party_get_slot, ":price_factor", "$g_encountered_party", ":item_slot_no"),
        (val_mul, ":price_factor", 100),#normalize price factor to range 0..100
        (val_div, ":price_factor", average_price_factor),
      (else_try),
        #increase trade penalty while selling weapons, armor, and horses
        (val_mul, ":trade_penalty", 4),
      (try_end),
      
      
      (store_add, ":penalty_divisor", 100, ":trade_penalty"),
      
      (val_mul, ":price_factor", 100),
      (val_div, ":price_factor", ":penalty_divisor"),
      
      (assign, reg0, ":price_factor"),
      (set_trigger_result, reg0),
  ]),
  
  # script_get_trade_penalty
  # 
  # Input:
  # param1: troop_id,
  # Output: reg0
  
  ("get_trade_penalty",
    [
      (store_script_param_1, ":item_kind_id"),
      (assign, ":penalty", 0),
      
      (party_get_skill_level, ":trade_skill", "p_main_party", skl_trade),
      (try_begin),
        (is_between, ":item_kind_id", trade_goods_begin, trade_goods_end),
        (assign, ":penalty", 12), #reduced slightly
        (store_mul, ":skill_bonus", ":trade_skill", 1),
        (val_sub, ":penalty", ":skill_bonus"),
      (else_try),
        (assign, ":penalty", 100),
        (store_mul, ":skill_bonus", ":trade_skill", 5),
        (val_sub, ":penalty", ":skill_bonus"),
      (try_end),

      (val_max, ":penalty", 3),

      (assign, ":penalty_multiplier", 1000),

       # Apply penalty if player is on bad terms with the town
      (try_begin),
        (is_between, "$g_encountered_party", centers_begin, centers_end),
        (party_get_slot, ":center_relation", "$g_encountered_party", slot_center_player_relation),
        (store_mul, ":center_relation_penalty", ":center_relation", -3),
        (val_add, ":penalty_multiplier", ":center_relation_penalty"),
        (try_begin),
          (lt, ":center_relation", 0),
          (store_sub, ":center_penalty_multiplier", 100, ":center_relation"),
          (val_mul, ":penalty_multiplier", ":center_penalty_multiplier"),
          (val_div, ":penalty_multiplier", 100),
        (try_end),
      (try_end),

       # Apply penalty if player is on bad terms with the merchant (not currently used)
      (call_script, "script_troop_get_player_relation", "$g_talk_troop"),
      (assign, ":troop_reln", reg0),      
      (try_begin),
        (lt, ":troop_reln", 0),
        (store_sub, ":troop_reln_dif", 0, ":troop_reln"),
        (store_mul, ":troop_relation_penalty", ":troop_reln_dif", 20),
        (val_add, ":penalty_multiplier", ":troop_relation_penalty"),
      (try_end),
      	  
	  (try_begin),
		(is_between, "$g_encountered_party", villages_begin, villages_end),
	    (val_mul, ":penalty", 5), #1.25x trade penalty in villages.
		(val_div, ":penalty", 4),
	  (try_end),
	  
	  #OiM crab mode
	  (options_get_campaign_ai, ":ai"),
	  (try_begin), 
		(eq, ":ai", 2), 
		(val_mul, ":penalty", 75), 
		(val_div, ":penalty", 100), 
	  (else_try), 
		(eq, ":ai", 1), 
		(val_mul, ":penalty", 85), 
		(val_div, ":penalty", 100), 
	  (try_end),
	  #OiM crab mode end
	  
      (val_mul, ":penalty",  ":penalty_multiplier"),
      (val_div, ":penalty", 1000),
      (val_max, ":penalty", 1),
      (assign, reg0, ":penalty"),
  ]),
  
  #script_game_event_buy_item:
  # This script is called from the game engine when player buys an item.
  # INPUT:
  # param1: item_kind_id
  ("game_event_buy_item",
    [
      (store_script_param_1, ":item_kind_id"),
      (store_script_param_2, ":return_mode"),
      (try_begin),
        (is_between, ":item_kind_id", trade_goods_begin, trade_goods_end),
        (store_sub, ":item_slot_no", ":item_kind_id", trade_goods_begin),
        (val_add, ":item_slot_no", slot_town_trade_good_prices_begin),
        (party_get_slot, ":multiplier", "$g_encountered_party", ":item_slot_no"),
    
	    (try_begin),
          (eq, ":return_mode", 0),
          (assign, ":multiplier_change", 15),
        (else_try),
          (assign, ":multiplier_change", 25),
        (try_end),

		(try_begin),
		  (this_or_next|is_between, "$g_encountered_party", villages_begin, villages_end),
		  (is_between, "$g_encountered_party", castles_begin, castles_end),
		  (val_mul, ":multiplier_change", 2),
		(try_end),

		(store_item_value, ":item_value", ":item_kind_id"),
		(try_begin),
		  (ge, ":item_value", 100),
		  (store_sub, ":item_value_sub_100", ":item_value", 100),
		  (store_div, ":item_value_sub_100_div_20", ":item_value_sub_100", 20),
		  (val_add, ":multiplier_change", ":item_value_sub_100_div_20"),
		(try_end),

		(val_add, ":multiplier", ":multiplier_change"),

        (val_min, ":multiplier", maximum_price_factor),
        (party_set_slot, "$g_encountered_party", ":item_slot_no", ":multiplier"),
      (try_end),

	  #(try_begin),
		#(check_quest_active, "qst_oim_bring_goods_zamoshie"), 
		#(neg|check_quest_succeeded, "qst_oim_bring_goods_zamoshie"),
		#(neg|check_quest_finished, "qst_oim_bring_goods_zamoshie"),
		#(eq, ":item_kind_id", "itm_salt"),
		#(store_item_kind_count, ":item_count", "itm_salt"),
		#(ge, ":item_count", 3),		
		#(call_script, "script_succeed_quest", "qst_oim_bring_goods_zamoshie"),
	  #(try_end), 
  ]),
  
  #script_game_event_sell_item:
  # This script is called from the game engine when player sells an item.
  # INPUT:
  # param1: item_kind_id
  ("game_event_sell_item",
    [
      (store_script_param_1, ":item_kind_id"),
      (store_script_param_2, ":return_mode"),
      (try_begin),
        (is_between, ":item_kind_id", trade_goods_begin, trade_goods_end),
        (store_sub, ":item_slot_no", ":item_kind_id", trade_goods_begin),
        (val_add, ":item_slot_no", slot_town_trade_good_prices_begin),
        (party_get_slot, ":multiplier", "$g_encountered_party", ":item_slot_no"),

        (try_begin),
          (eq, ":return_mode", 0),
          (assign, ":multiplier_change", 25),
        (else_try),
          (assign, ":multiplier_change", 15),
        (try_end),

		(try_begin),
		  (this_or_next|is_between, "$g_encountered_party", villages_begin, villages_end),
		  (is_between, "$g_encountered_party", castles_begin, castles_end),
		  (val_mul, ":multiplier_change", 2),
		(try_end),

		(store_item_value, ":item_value", ":item_kind_id"),
		(try_begin),
		  (ge, ":item_value", 100),
		  (store_sub, ":item_value_sub_100", ":item_value", 100),
		  (store_div, ":item_value_sub_100_div_20", ":item_value_sub_100", 20),
		  (val_add, ":multiplier_change", ":item_value_sub_100_div_20"),
		(try_end),

		(val_sub, ":multiplier", ":multiplier_change"),

        (val_max, ":multiplier", minimum_price_factor),
        (party_set_slot, "$g_encountered_party", ":item_slot_no", ":multiplier"),
      (try_end),
  ]),
      
  #non-used script
  #start_wedding_cutscene
  ("start_wedding_cutscene",
  [
  ]), 
    
  # script_game_get_troop_wage
  # This script is called from the game engine for calculating troop wages.
  # Input:
  # param1: troop_id, param2: party-id
  # Output: reg0: weekly wage
  
  ("game_get_troop_wage",
    [
      (store_script_param_1, ":troop_id"),
      (store_script_param_2, ":party_id"), #party id
      
      (assign,":wage", 0),
      (try_begin),
        (this_or_next|eq, ":troop_id", "trp_player"),
        (eq, ":troop_id", "trp_kidnapped_girl"),
      (else_try),
        (is_between, ":troop_id", pretenders_begin, pretenders_end),
      (else_try),      
        (is_between, ":troop_id", mercenary_troops_begin, mercenary_troops_end),
        (store_character_level, ":troop_level", ":troop_id"),
        (assign, ":wage", ":troop_level"),
        (val_add, ":wage", 3),
        (val_mul, ":wage", ":wage"),
        (val_div, ":wage", 20),
		(val_max, ":wage", 1),
      (else_try),
	    (neg|is_between, ":troop_id", "trp_mercanary_captain_moskov", "trp_array_factions"),
        (store_character_level, ":troop_level", ":troop_id"),
        (assign, ":wage", ":troop_level"),
        (val_add, ":wage", 3),
        (val_mul, ":wage", ":wage"),
        (val_div, ":wage", 20),
		(val_max, ":wage", 1),
      (else_try),
	    (is_between, ":troop_id", "trp_mercanary_captain_moskov", "trp_array_factions"),
        (store_character_level, ":troop_level", ":troop_id"),
        (assign, ":wage", ":troop_level"),
        (val_add, ":wage", 4),
		(val_max, ":wage", 1),
      (try_end),

      (try_begin), #mounted troops cost (50% more) than the normal cost except for tatars (25% more)
        (troop_is_mounted, ":troop_id"),
        (store_troop_faction, ":troop_faction", ":troop_id"),
		(eq, ":troop_faction", "fac_kingdom_3"),
        (val_mul, ":wage", 5),
        (val_div, ":wage", 4),
      (else_try),
        (troop_is_mounted, ":troop_id"),
        (val_mul, ":wage", 6),
        (val_div, ":wage", 4),
      (try_end),

      (try_begin),
        (is_between, ":troop_id", companions_begin, companions_end),
        (val_mul, ":wage", 3),
      (try_end),
            
      (store_skill_level, ":leadership_level", "skl_leadership", "trp_player"),
      (store_mul, ":leadership_bonus", 2, ":leadership_level"),
      (store_sub, ":leadership_factor", 100, ":leadership_bonus"), 
      (val_mul, ":wage", ":leadership_factor"),  #wage = wage * (100 - (2 * leadership)) / 100
      (val_div, ":wage", 100),

      (try_begin),
        (neq, ":troop_id", "trp_player"),
        (neq, ":troop_id", "trp_kidnapped_girl"),
        (neg|is_between, ":troop_id", pretenders_begin, pretenders_end),
        (val_max, ":wage", 1),
      (try_end),

      (try_begin),
        (eq, ":party_id", "p_main_party"),

        #new code
		(try_begin),
		  (ge, ":wage", 1),
	      (game_get_reduce_campaign_ai, ":reduce_campaign_ai"),                
	      (try_begin),
            (eq, ":reduce_campaign_ai", 0), #hard (1.00x)
            #same
          (else_try),
            (eq, ":reduce_campaign_ai", 1), #moderate (0.85x)
            (val_mul, ":wage", 85),
            (val_div, ":wage", 100),
          (else_try),                        
            (eq, ":reduce_campaign_ai", 2), #easy (0.70x)
            (val_mul, ":wage", 70),
            (val_div, ":wage", 100),
          (try_end),        
        (try_end),
		(val_max, ":wage", 1),
	  (try_end),
       
      (assign, reg0, ":wage"),
      
      (set_trigger_result, reg0),
  ]),

  # script_game_get_total_wage
  # This script is called from the game engine for calculating total wage of the player party which is shown at the party window.
  # Input: none
  # Output: reg0: weekly wage
  
  ("game_get_total_wage",
    [
      (assign, ":total_wage", 0),
      (party_get_num_companion_stacks, ":num_stacks", "p_main_party"),
      (try_for_range, ":i_stack", 0, ":num_stacks"),
        (party_stack_get_troop_id, ":stack_troop", "p_main_party", ":i_stack"),
        (party_stack_get_size, ":stack_size", "p_main_party", ":i_stack"),
        (call_script, "script_game_get_troop_wage", ":stack_troop", 0),
        (val_mul, reg0, ":stack_size"),
        (val_add, ":total_wage", reg0),
      (try_end),
	  
	  (try_for_parties, ":party_no"), 
	  	(party_is_active, ":party_no"),
		(this_or_next|party_slot_eq, ":party_no", slot_party_type, spt_castle),
		(party_slot_eq, ":party_no", slot_party_type, spt_town),
		(party_slot_eq, ":party_no", slot_town_lord, "trp_player"),
		(party_get_num_companion_stacks, ":num_stacks", ":party_no"),
		(try_for_range, ":i_stack", 0, ":num_stacks"),
			(party_stack_get_troop_id, ":stack_troop", ":party_no", ":i_stack"),
			(party_stack_get_size, ":stack_size", ":party_no", ":i_stack"),
			(call_script, "script_game_get_troop_wage", ":stack_troop", 0),
			(val_mul, reg0, ":stack_size"),
			(val_div, reg0, 2),
			(val_add, ":total_wage", reg0),
		(try_end),
	  (try_end), 	  	
	  
      (assign, reg0, ":total_wage"),
      (set_trigger_result, reg0),
  ]),
  
  # script_game_get_join_cost
  # This script is called from the game engine for calculating troop join cost.
  # Input:
  # param1: troop_id,
  # Output: reg0: weekly wage
  
  ("game_get_join_cost",
    [
      (store_script_param_1, ":troop_id"),
      
      (assign,":join_cost", 0),
      (try_begin),
        (troop_is_hero, ":troop_id"),
      (else_try),
        (store_character_level, ":troop_level", ":troop_id"),
        (assign, ":join_cost", ":troop_level"),
        (val_add, ":join_cost", 5),
        (val_mul, ":join_cost", ":join_cost"),
        (val_add, ":join_cost", 40),
        (val_div, ":join_cost", 5),
        (try_begin), #mounted troops cost %100 more than the normal cost
          (troop_is_mounted, ":troop_id"),
          (val_mul, ":join_cost", 2),
        (try_end),
      (try_end),
		#OiM crab mode
		(options_get_campaign_ai, ":ai"),
		(try_begin), 
			(eq, ":ai", 2), 
			(val_mul, ":join_cost", 1), 
			(val_div, ":join_cost", 2), 
		(else_try), 
			(eq, ":ai", 1), 
			(val_mul, ":join_cost", 3), 
			(val_div, ":join_cost", 4), 
		(try_end),
		#OiM crab mode end
	  
      (assign, reg0, ":join_cost"),
      (set_trigger_result, reg0),
  ]),
  
  # script_game_get_upgrade_xp
  # This script is called from game engine for calculating needed troop upgrade exp
  # Input:
  # param1: troop_id,
  # Output: reg0 = needed exp for upgrade 
  ("game_get_upgrade_xp",
    [
      (store_script_param_1, ":troop_id"),
      
      (assign, ":needed_upgrade_xp", 0),
      #formula : int needed_upgrade_xp = 2 * (30 + 0.006f * level_boundaries[troops[troop_id].level + 3]);  #((4+3)*0.006+30)*2
      (store_character_level, ":troop_level", ":troop_id"),
      (store_add, ":needed_upgrade_xp", ":troop_level", 3),
      (get_level_boundary, reg0, ":needed_upgrade_xp"),        
      (val_mul, reg0, 6),
      (val_div, reg0, 1000),
      (val_add, reg0, 30),

      (set_trigger_result, reg0),
  ]),
  
  # script_game_get_upgrade_cost
  # This script is called from game engine for calculating needed troop upgrade exp
  # Input:
  # param1: troop_id,
  # Output: reg0 = needed cost for upgrade
  ("game_get_upgrade_cost",
    [
      (store_script_param_1, ":troop_id"),
      
      (store_character_level, ":troop_level", ":troop_id"),
      
      (try_begin),
        (is_between, ":troop_level", 0, 6),
        (assign, reg0, 10),
      (else_try),  
        (is_between, ":troop_level", 6, 11),
        (assign, reg0, 20),
      (else_try),  
        (is_between, ":troop_level", 11, 16),
        (assign, reg0, 40),
      (else_try),  
        (is_between, ":troop_level", 16, 21),
        (assign, reg0, 120),
      (else_try),  
        (is_between, ":troop_level", 21, 26),
        (assign, reg0, 160),
      (else_try),  
        (is_between, ":troop_level", 26, 31),
        (assign, reg0, 200),
      (else_try),  
        (assign, reg0, 260),
      (try_end),  
        
      (set_trigger_result, reg0),
  ]),

  # script_game_get_prisoner_price
  # This script is called from the game engine for calculating prisoner price
  # Input:
  # param1: troop_id,
  # Output: reg0  
  
  ("game_get_prisoner_price",
    [
      (store_script_param_1, ":troop_id"),
      (assign, reg0, 50),
      (try_begin),
        (is_between, "$g_talk_troop", ransom_brokers_begin, ransom_brokers_end),
        (store_character_level, ":troop_level", ":troop_id"),
        (assign, ":ransom_amount", ":troop_level"),
        (val_mul, ":ransom_amount", ":ransom_amount"),
        (val_div, ":ransom_amount", 5),
		(val_add, ":ransom_amount", ":troop_level"), 
      (try_end),
	  #(val_min, ":ransom_amount", 12),
	  #(val_max, ":ransom_amount", 200),
	  (val_clamp, ":ransom_amount", 12, 200),
      (assign, reg0, ":ransom_amount"),
      (set_trigger_result, reg0),
  ]),


  # script_game_check_prisoner_can_be_sold
  # This script is called from the game engine for checking if a given troop can be sold.
  # Input: 
  # param1: troop_id,
  # Output: reg0: 1= can be sold; 0= cannot be sold.
  
  ("game_check_prisoner_can_be_sold",
    [
      (store_script_param_1, ":troop_id"),
      (assign, reg0, 0),
      (try_begin),
        (neg|troop_is_hero, ":troop_id"),
        (assign, reg0, 1),
      (try_end),
      (set_trigger_result, reg0),
  ]),
  
  # script_game_get_morale_of_troops_from_faction
  # This script is called from the game engine 
  # Input: 
  # param1: faction_no,
  # Output: reg0: extra morale x 100
  
  ("game_get_morale_of_troops_from_faction",
    [
      (store_script_param_1, ":unused"),            
      
      (party_get_morale, reg1, "p_main_party"),
      
      (val_add, reg0, reg1),
      
      (set_trigger_result, reg0),
  ]),
  
  #script_game_event_detect_party:
  # This script is called from the game engine when player party inspects another party.
  # INPUT:
  # param1: Party-id
  ("game_event_detect_party",
    [
        (store_script_param_1, ":party_id"),
        (try_begin),
          (party_slot_eq, ":party_id", slot_party_type, spt_kingdom_hero_party),
          (party_stack_get_troop_id, ":leader", ":party_id", 0),
          (is_between, ":leader", kingdom_heroes_begin, kingdom_heroes_end),
          (call_script, "script_update_troop_location_notes", ":leader", 0),
        (else_try),
          (is_between, ":party_id", walled_centers_begin, walled_centers_end),
          (party_get_num_attached_parties, ":num_attached_parties",  ":party_id"),
          (try_for_range, ":attached_party_rank", 0, ":num_attached_parties"),
            (party_get_attached_party_with_rank, ":attached_party", ":party_id", ":attached_party_rank"),
            (party_stack_get_troop_id, ":leader", ":attached_party", 0),
            (is_between, ":leader", kingdom_heroes_begin, kingdom_heroes_end),
            (call_script, "script_update_troop_location_notes", ":leader", 0),
          (try_end),
        (try_end),
  ]),

  #script_game_event_undetect_party:
  # This script is called from the game engine when player party inspects another party.
  # INPUT:
  # param1: Party-id
  ("game_event_undetect_party",
    [
        (store_script_param_1, ":party_id"),
        (try_begin),
          (party_slot_eq, ":party_id", slot_party_type, spt_kingdom_hero_party),
          (party_stack_get_troop_id, ":leader", ":party_id", 0),
          (is_between, ":leader", kingdom_heroes_begin, kingdom_heroes_end),
          (call_script, "script_update_troop_location_notes", ":leader", 0),
        (try_end),
  ]),

  #script_game_get_statistics_line:
  # This script is called from the game engine when statistics page is opened.
  # INPUT:
  # param1: line_no
  ("game_get_statistics_line",
    [
      (store_script_param_1, ":line_no"),
      (try_begin),
        (eq, ":line_no", 0),
        (get_player_agent_kill_count, reg1),
        (str_store_string, s1, "str_number_of_troops_killed_reg1"),
        (set_result_string, s1),
      (else_try),
        (eq, ":line_no", 1),
        (get_player_agent_kill_count, reg1, 1),
        (str_store_string, s1, "str_number_of_troops_wounded_reg1"),
        (set_result_string, s1),
      (else_try),
        (eq, ":line_no", 2),
        (get_player_agent_own_troop_kill_count, reg1),
        (str_store_string, s1, "str_number_of_own_troops_killed_reg1"),
        (set_result_string, s1),
      (else_try),
        (eq, ":line_no", 3),
        (get_player_agent_own_troop_kill_count, reg1, 1),
        (str_store_string, s1, "str_number_of_own_troops_wounded_reg1"),
        (set_result_string, s1),
      (try_end),
  ]),

  #script_game_get_date_text:
  # This script is called from the game engine when the date needs to be displayed.
  # INPUT: arg1 = number of days passed since the beginning of the game
  # OUTPUT: result string = date
  ("game_get_date_text",
    [
      (store_script_param_2, ":num_hours"),
      (store_div, ":num_days", ":num_hours", 24),
      (store_add, ":cur_day", ":num_days", 23),
      (assign, ":cur_month", 3),
      (assign, ":cur_year", 1655),
      (assign, ":try_range", 99999),
      (try_for_range, ":unused", 0, ":try_range"),
        (try_begin),
          (this_or_next|eq, ":cur_month", 1),
          (this_or_next|eq, ":cur_month", 3),
          (this_or_next|eq, ":cur_month", 5),
          (this_or_next|eq, ":cur_month", 7),
          (this_or_next|eq, ":cur_month", 8),
          (this_or_next|eq, ":cur_month", 10),
          (eq, ":cur_month", 12),
          (assign, ":month_day_limit", 31),
        (else_try),
          (this_or_next|eq, ":cur_month", 4),
          (this_or_next|eq, ":cur_month", 6),
          (this_or_next|eq, ":cur_month", 9),
          (eq, ":cur_month", 11),
          (assign, ":month_day_limit", 30),
        (else_try),
          (try_begin),
            (store_div, ":cur_year_div_4", ":cur_year", 4),
            (val_mul, ":cur_year_div_4", 4),
            (eq, ":cur_year_div_4", ":cur_year"),
            (assign, ":month_day_limit", 29),
          (else_try),
            (assign, ":month_day_limit", 28),      
          (try_end),
        (try_end),
        (try_begin),
          (gt, ":cur_day", ":month_day_limit"),
          (val_sub, ":cur_day", ":month_day_limit"),
          (val_add, ":cur_month", 1),
          (try_begin),
            (gt, ":cur_month", 12),
            (val_sub, ":cur_month", 12),
            (val_add, ":cur_year", 1),
          (try_end),
        (else_try),
          (assign, ":try_range", 0),
        (try_end),
      (try_end),
      (assign, reg1, ":cur_day"),
      (assign, reg2, ":cur_year"),
      (try_begin),
        (eq, ":cur_month", 1),
        (str_store_string, s1, "str_january_reg1_reg2"),
      (else_try),
        (eq, ":cur_month", 2),
        (str_store_string, s1, "str_february_reg1_reg2"),
      (else_try),
        (eq, ":cur_month", 3),
        (str_store_string, s1, "str_march_reg1_reg2"),
      (else_try),
        (eq, ":cur_month", 4),
        (str_store_string, s1, "str_april_reg1_reg2"),
      (else_try),
        (eq, ":cur_month", 5),
        (str_store_string, s1, "str_may_reg1_reg2"),
      (else_try),
        (eq, ":cur_month", 6),
        (str_store_string, s1, "str_june_reg1_reg2"),
      (else_try),
        (eq, ":cur_month", 7),
        (str_store_string, s1, "str_july_reg1_reg2"),
      (else_try),
        (eq, ":cur_month", 8),
        (str_store_string, s1, "str_august_reg1_reg2"),
      (else_try),
        (eq, ":cur_month", 9),
        (str_store_string, s1, "str_september_reg1_reg2"),
      (else_try),
        (eq, ":cur_month", 10),
        (str_store_string, s1, "str_october_reg1_reg2"),
      (else_try),
        (eq, ":cur_month", 11),
        (str_store_string, s1, "str_november_reg1_reg2"),
      (else_try),
        (eq, ":cur_month", 12),
        (str_store_string, s1, "str_december_reg1_reg2"),
      (try_end),
      (set_result_string, s1),
    ]),  
  
  #script_game_get_money_text:
  # This script is called from the game engine when an amount of money needs to be displayed.
  # INPUT: arg1 = amount in units
  # OUTPUT: result string = money in text
  ("game_get_money_text",
    [
      (store_script_param_1, ":amount"),
      (try_begin),
        (eq, ":amount", 1),
        (str_store_string, s1, "str_1_denar"),
      (else_try),
        (assign, reg1, ":amount"),
        (str_store_string, s1, "str_reg1_denars"),
      (try_end),
      (set_result_string, s1),
  ]),

  #script_game_get_party_companion_limit:
  # This script is called from the game engine when the companion limit is needed for a party.
  # INPUT: arg1 = none
  # OUTPUT: reg0 = companion_limit
  ("game_get_party_companion_limit",
    [
      (assign, ":troop_no", "trp_player"),

      (store_skill_level, ":leadership_skill", "skl_leadership", ":troop_no"),
      (store_attribute_level, ":charisma", ":troop_no", ca_charisma),      
	  (store_mul, ":charisma_mul_2", ":charisma", 2),

	  (options_get_campaign_ai, ":difficulty"),
	  (try_begin), #easy
	  	(eq, ":difficulty", 2), 
        (assign, ":limit", 30),
		(store_mul, ":leadership_mul_5_7_10", ":leadership_skill", 10),
	  (else_try), #moderate
	  	(eq, ":difficulty", 1), 
        (assign, ":limit", 20),
		(store_mul, ":leadership_mul_5_7_10", ":leadership_skill", 7),
	  (else_try), #hard
        (assign, ":limit", 10),
		(store_mul, ":leadership_mul_5_7_10", ":leadership_skill", 5),
	  (try_end),

      (val_add, ":limit", ":leadership_mul_5_7_10"),
      (val_add, ":limit", ":charisma_mul_2"),

      (troop_get_slot, ":troop_renown", ":troop_no", slot_troop_renown),
	  (try_begin), #easy
	  	(eq, ":difficulty", 2), 
        (store_div, ":renown_bonus", ":troop_renown", 15),
	  (else_try), #moderate
	  	(eq, ":difficulty", 1), 
        (store_div, ":renown_bonus", ":troop_renown", 20),
	  (else_try), #hard
        (store_div, ":renown_bonus", ":troop_renown", 25),
	  (try_end),

      (val_add, ":limit", ":renown_bonus"),
      (call_script, "script_get_inventory_items_count", "itm_shapka_monomaha", "trp_player"), 
	  (assign, ":count", reg0), 
      (call_script, "script_get_inventory_items_count", "itm_black_hetman", "trp_player"), 
	  (assign, ":count1", reg0), 
	  (try_begin), 
		(this_or_next|ge, ":count", 1), 
		(this_or_next|ge, ":count1", 1), 
		(this_or_next|troop_has_item_equipped, "trp_player", "itm_black_hetman"), 
		(             troop_has_item_equipped, "trp_player", "itm_shapka_monomaha"), 
		(val_add, ":limit", 50),
	  (try_end),
	  #OiM crab mode
	  #(options_get_campaign_ai, ":ai"),
	  #(try_begin), 
	  #	(eq, ":ai", 2), 
	  #	(val_mul, ":limit", 2), 
	  #	(val_div, ":limit", 1), 
	  #(else_try), 
	  #	(eq, ":ai", 1), 
	  #	(val_mul, ":limit", 4), 
	  #	(val_div, ":limit", 3), 
	  #(try_end),
	  #OiM crab mode end
	  
      (assign, reg0, ":limit"),
      (set_trigger_result, reg0),
  ]),


  #script_game_reset_player_party_name:
  # This script is called from the game engine when the player name is changed.
  # INPUT: none
  # OUTPUT: none
  ("game_reset_player_party_name",
    [(str_store_troop_name, s5, "trp_player"),
     (party_set_name, "p_main_party", s5),
     ]),

  #script_game_get_troop_note
  # This script is called from the game engine when the notes of a troop is needed.
  # INPUT: arg1 = troop_no, arg2 = note_index
  # OUTPUT: s0 = note
  ("game_get_troop_note",
    [
     (store_script_param_1, ":troop_no"),
     (store_script_param_2, ":note_index"),
     (set_trigger_result, 0),
	 (try_begin), 
     (eq, ":note_index", 0),
     (str_store_troop_name, s54, ":troop_no"),
     (try_begin),
       (eq, ":troop_no", "trp_player"),
       (this_or_next|eq, "$player_has_homage", 1),
       (eq, "$players_kingdom", "fac_player_supporters_faction"),
       (assign, ":troop_faction", "$players_kingdom"),
     (else_try),
       (store_troop_faction, ":troop_faction", ":troop_no"),
     (try_end),
     (try_begin),
       (neq, ":troop_no", "trp_player"),
       (neg|is_between, ":troop_faction", kingdoms_begin, kingdoms_end),
       (str_clear, s54),
     (else_try),
       (is_between, ":troop_no", pretenders_begin, pretenders_end),
       (neg|troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_hero),
       (neq, ":troop_no", "$supported_pretender"),
       (troop_get_slot, ":orig_faction", ":troop_no", slot_troop_original_faction),
       (try_begin),
         (faction_slot_eq, ":orig_faction", slot_faction_state, sfs_active),
         (faction_slot_eq, ":orig_faction", slot_faction_has_rebellion_chance, 1),
         (str_store_faction_name_link, s56, ":orig_faction"),
         (str_store_string, s0, "@{s54} is a claimant to the throne of {s56}."),
		 (set_trigger_result, 1),
         (add_troop_note_tableau_mesh, ":troop_no", "tableau_troop_note_mesh"),
       (try_end),
     (else_try),
	   (this_or_next|is_between, ":troop_no", kingdom_heroes_begin, kingdom_heroes_end),
	   (eq, ":troop_no", "trp_player"),
       (faction_get_slot, ":faction_leader", ":troop_faction", slot_faction_leader),
       (str_store_troop_name_link, s55, ":faction_leader"),
	   (try_begin), 
	    (is_between, ":troop_faction", kingdoms_begin, kingdoms_end),
		(str_store_faction_name_link, s56, ":troop_faction"),
	   (else_try), 
	    (str_store_faction_name, s56, ":troop_faction"),
	   (try_end), 
       (assign, reg4, 0),
       (assign, reg6, 0),
       (try_begin),
         (eq, ":troop_faction", "fac_player_faction"),
         (assign, reg6, 1),
       (else_try),
         (eq, ":faction_leader", ":troop_no"),
         (assign, reg4, 1),
       (try_end),
       (assign, ":num_centers", 0),
       (str_store_string, s58, "@nowhere"),
       (try_for_range_backwards, ":cur_center", centers_begin, centers_end),
         (party_slot_eq, ":cur_center", slot_town_lord, ":troop_no"),
         (try_begin),
           (eq, ":num_centers", 0),
           (str_store_party_name_link, s58, ":cur_center"),
         (else_try),
           (eq, ":num_centers", 1),
           (str_store_party_name_link, s57, ":cur_center"),
           (str_store_string, s58, "@{s57} and {s58}"),
         (else_try),
           (str_store_party_name_link, s57, ":cur_center"),
           (str_store_string, s58, "@{s57}, {s58}"),
         (try_end),
         (val_add, ":num_centers", 1),
       (try_end),
       (troop_get_type, reg3, ":troop_no"),
       (troop_get_slot, reg5, ":troop_no", slot_troop_renown),
       (str_clear, s59),
       (try_begin),
#         (troop_get_slot, ":relation", ":troop_no", slot_troop_player_relation),
         (call_script, "script_troop_get_player_relation", ":troop_no"),
         (assign, ":relation", reg0),
         (store_add, ":normalized_relation", ":relation", 100),
         (val_add, ":normalized_relation", 5),
         (store_div, ":str_offset", ":normalized_relation", 10),
         (val_clamp, ":str_offset", 0, 20),
         (store_add, ":str_id", "str_relation_mnus_100_ns",  ":str_offset"),
         (neq, ":str_id", "str_relation_plus_0_ns"),
         (str_store_string, s60, "@{reg3?She:He}"),
         (str_store_string, s59, ":str_id"),
         (str_store_string, s59, "@^{s59}"),
       (try_end),
       (assign, reg9, ":num_centers"),
       (str_store_string, s0, "@{reg6?:{reg4?{s54} is the ruler of {s56}.^:{s54} is a vassal of {s55} of {s56}.^}}Renown: {reg5}.^{reg9?{reg3?She:He} is the {reg3?lady:lord} of {s58}.:{reg3?She:He} has no fiefs.}{s59}"),
       (add_troop_note_tableau_mesh, ":troop_no", "tableau_troop_note_mesh"),
	   (set_trigger_result, 1),
     (try_end),
     (try_end),
     ]),
  
  #script_game_get_center_note
  # This script is called from the game engine when the notes of a center is needed.
  # INPUT: arg1 = center_no, arg2 = note_index
  # OUTPUT: s0 = note
  ("game_get_center_note",
    [
      (store_script_param_1, ":center_no"),
      (store_script_param_2, ":note_index"),

      (set_trigger_result, 0),
      (try_begin),
        (eq, ":note_index", 0),
		(is_between, ":center_no", centers_begin, centers_end),
        (party_get_slot, ":lord_troop", ":center_no", slot_town_lord),
        (try_begin),
          (ge, ":lord_troop", 0),
          (store_troop_faction, ":lord_faction", ":lord_troop"),
          (str_store_troop_name_link, s1, ":lord_troop"),
          (try_begin),
            (eq, ":lord_troop", "trp_player"),
            (gt, "$players_kingdom", 0),
            (str_store_faction_name_link, s2, "$players_kingdom"),
          (else_try),
            (str_store_faction_name_link, s2, ":lord_faction"),
          (try_end),
          (str_store_party_name, s50, ":center_no"),
          (try_begin),
            (party_slot_eq, ":center_no", slot_party_type, spt_town),
            (str_store_string, s51, "@The town of {s50}"),
          (else_try),
            (party_slot_eq, ":center_no", slot_party_type, spt_village),
            (party_get_slot, ":bound_center", ":center_no", slot_village_bound_center),
            (str_store_party_name_link, s52, ":bound_center"),
            (str_store_string, s51, "@The village of {s50} near {s52}"),
          (else_try),
            (str_store_string, s51, "@{!}{s50}"),
          (try_end),
          (str_store_string, s2, "@{s51} belongs to {s1} of {s2}.^"),
        (else_try),
          (str_clear, s2),
        (try_end),
        (try_begin),
          (is_between, ":center_no", villages_begin, villages_end),
        (else_try),
          (assign, ":num_villages", 0),
          (try_for_range_backwards, ":village_no", villages_begin, villages_end),
            (party_slot_eq, ":village_no", slot_village_bound_center, ":center_no"),
            (try_begin),
              (eq, ":num_villages", 0),
              (str_store_party_name_link, s8, ":village_no"),
            (else_try),
              (eq, ":num_villages", 1),
              (str_store_party_name_link, s7, ":village_no"),
              (str_store_string, s8, "@{s7} and {s8}"),
            (else_try),
              (str_store_party_name_link, s7, ":village_no"),
              (str_store_string, s8, "@{!}{s7}, {s8}"),
            (try_end),
            (val_add, ":num_villages", 1),
          (try_end),
          (try_begin),
            (eq, ":num_villages", 0),
            (str_store_string, s2, "@{s2}It has no villages.^"),
          (else_try),
            (store_sub, reg0, ":num_villages", 1),
            (str_store_string, s2, "@{s2}{reg0?Its villages are:Its village is} {s8}.^"),
          (try_end),
        (try_end),
        (call_script, "script_get_prosperity_text_to_s50", ":center_no"),
        (str_store_string, s0, "@{s2}Its prosperity is: {s50}", 0),
        (set_trigger_result, 1),
      (try_end),
     ]),

  #script_game_get_faction_note
  # This script is called from the game engine when the notes of a faction is needed.
  # INPUT: arg1 = faction_no, arg2 = note_index
  # OUTPUT: s0 = note
  ("game_get_faction_note",
    [
      (store_script_param_1, ":faction_no"),
      (store_script_param_2, ":note_index"),
      (set_trigger_result, 0),
	  (try_begin),
      (eq, ":note_index", 0),
     (try_begin),
       (is_between, ":faction_no", kingdoms_begin, kingdoms_end),
       (faction_slot_eq, ":faction_no", slot_faction_state, sfs_active),
       (faction_get_slot, ":faction_leader", ":faction_no", slot_faction_leader),
       (str_store_faction_name, s5, ":faction_no"),
       (str_store_troop_name_link, s6, ":faction_leader"),
       (assign, ":num_centers", 0),
       (str_store_string, s8, "@nowhere"),
       (try_for_range_backwards, ":cur_center", centers_begin, centers_end),
         (store_faction_of_party, ":center_faction", ":cur_center"),
         (eq, ":center_faction", ":faction_no"),
         (try_begin),
           (eq, ":num_centers", 0),
           (str_store_party_name_link, s8, ":cur_center"),
         (else_try),
           (eq, ":num_centers", 1),
           (str_store_party_name_link, s7, ":cur_center"),
           (str_store_string, s8, "@{s7} and {s8}"),
         (else_try),
           (str_store_party_name_link, s7, ":cur_center"),
           (str_store_string, s8, "@{s7}, {s8}"),
         (try_end),
         (val_add, ":num_centers", 1),
       (try_end),
       (assign, ":num_members", 0),
       (str_store_string, s10, "@noone"),
       (try_for_range_backwards, ":loop_var", "trp_kingdom_heroes_including_player_begin", kingdom_heroes_end),
         (assign, ":cur_troop", ":loop_var"),
         (try_begin),
           (eq, ":loop_var", "trp_kingdom_heroes_including_player_begin"),
           (assign, ":cur_troop", "trp_player"),
           (assign, ":troop_faction", "$players_kingdom"),
         (else_try),
           (store_troop_faction, ":troop_faction", ":cur_troop"),
         (try_end),
         (eq, ":troop_faction", ":faction_no"),
         (neq, ":cur_troop", ":faction_leader"),
         (troop_slot_eq, ":cur_troop", slot_troop_occupation, slto_kingdom_hero),
         (try_begin),
           (eq, ":num_members", 0),
           (str_store_troop_name_link, s10, ":cur_troop"),
         (else_try),
           (eq, ":num_members", 1),
           (str_store_troop_name_link, s9, ":cur_troop"),
           (str_store_string, s10, "@{s9} and {s10}"),
         (else_try),
           (str_store_troop_name_link, s9, ":cur_troop"),
           (str_store_string, s10, "@{s9}, {s10}"),
         (try_end),
         (val_add, ":num_members", 1),
       (try_end),
       (str_store_string, s12, "@noone"),
       (assign, ":num_enemies", 0),
       (try_for_range_backwards, ":cur_faction", kingdoms_begin, kingdoms_end),
         (faction_slot_eq, ":cur_faction", slot_faction_state, sfs_active),
         (store_relation, ":cur_relation", ":cur_faction", ":faction_no"),
         (lt, ":cur_relation", 0),
         (try_begin),
           (eq, ":num_enemies", 0),
           (str_store_faction_name_link, s12, ":cur_faction"),
         (else_try),
           (eq, ":num_enemies", 1),
           (str_store_faction_name_link, s11, ":cur_faction"),
           (str_store_string, s12, "@{s11} and {s12}"),
         (else_try),
           (str_store_faction_name_link, s11, ":cur_faction"),
           (str_store_string, s12, "@{s11}, {s12}"),
         (try_end),
         (val_add, ":num_enemies", 1),
       (try_end),
        (set_trigger_result, 1),
	    (str_store_string, s0, "@{s5} is ruled by {s6}.^It occupies {s8}.^Its vassals are {s10}.^{s5} is at war with {s12}."),
     (else_try),
       (is_between, ":faction_no", kingdoms_begin, kingdoms_end),
       (faction_slot_eq, ":faction_no", slot_faction_state, sfs_defeated),
       (str_store_faction_name, s5, ":faction_no"),
	   (set_trigger_result, 1),
       (str_store_string, s0, "@{s5} has been defeated!"),
     (else_try),
       (str_clear, s1),
	   (set_trigger_result, 1),
       (str_store_string, s0, s1),
     (try_end),
      (try_begin),
       (is_between, ":faction_no", "fac_kingdom_1", kingdoms_end), #Excluding player kingdom
       (add_faction_note_tableau_mesh, ":faction_no", "tableau_faction_note_mesh"),
      (else_try),
	   (eq, ":faction_no", "fac_player_supporters_faction"),
       (add_faction_note_tableau_mesh, ":faction_no", "tableau_faction_note_mesh_banner"),
      (try_end),
      (try_end),
     ]),

  #script_game_get_quest_note
  # This script is called from the game engine when the notes of a quest is needed.
  # INPUT: arg1 = quest_no, arg2 = note_index
  # OUTPUT: s0 = note
  ("game_get_quest_note",
    [
##      (store_script_param_1, ":quest_no"),
##      (store_script_param_2, ":note_index"),
      (set_trigger_result, 0), # set it to 1 if this script is wanted to be used rather than static notes
     ]),

  #script_game_get_info_page_note
  # This script is called from the game engine when the notes of a info_page is needed.
  # INPUT: arg1 = info_page_no, arg2 = note_index
  # OUTPUT: s0 = note
  ("game_get_info_page_note",
    [
##      (store_script_param_1, ":info_page_no"),
##      (store_script_param_2, ":note_index"),
      (set_trigger_result, 0), # set it to 1 if this script is wanted to be used rather than static notes
     ]),

  #script_game_get_scene_name
  # This script is called from the game engine when a name for the scene is needed.
  # INPUT: arg1 = scene_no
  # OUTPUT: s0 = name
  ("game_get_scene_name",
    [
      (store_script_param, ":scene_no", 1),
      (try_begin),
        (is_between, ":scene_no", multiplayer_scenes_begin, multiplayer_scenes_end),
        (store_sub, ":string_id", ":scene_no", multiplayer_scenes_begin),
        (val_add, ":string_id", multiplayer_scene_names_begin),
        (str_store_string, s0, ":string_id"),
      (else_try),
        (is_between, ":scene_no", multiplayer_new_scenes_begin, multiplayer_new_scenes_end),
        (store_sub, ":string_id", ":scene_no", multiplayer_new_scenes_begin),
        (val_add, ":string_id", multiplayer_new_scene_names_begin),
        (str_store_string, s0, ":string_id"),
      (try_end),
     ]),
  
  #script_game_get_mission_template_name
  # This script is called from the game engine when a name for the mission template is needed.
  # INPUT: arg1 = mission_template_no
  # OUTPUT: s0 = name
  ("game_get_mission_template_name",
    [
      (store_script_param, ":mission_template_no", 1),
      (call_script, "script_multiplayer_get_mission_template_game_type", ":mission_template_no"),
      (assign, ":game_type", reg0),
      (try_begin),
        (is_between, ":game_type", 0, multiplayer_num_game_types),
        (store_add, ":string_id", ":game_type", multiplayer_game_type_names_begin),
        (str_store_string, s0, ":string_id"),
      (try_end),
     ]),

  #script_add_kill_death_counts
  # INPUT: arg1 = killer_agent_no, arg2 = dead_agent_no
  # OUTPUT: none
  ("add_kill_death_counts",
   [
      (store_script_param, ":killer_agent_no", 1),
      (store_script_param, ":dead_agent_no", 2),
      
	  (try_begin),
		(eq, "$g_multiplayer_is_game_type_captain", 1),
		(try_begin),
			(ge, ":killer_agent_no", 0),
			(agent_is_human, ":killer_agent_no"),
			(agent_get_group, ":agent_group", ":killer_agent_no"),
			(player_is_active, ":agent_group"),
			(player_get_agent_id, ":killer_agent_no", ":agent_group"),
		(try_end),
		(try_begin),
			(ge, ":dead_agent_no", 0),
			(agent_is_human, ":dead_agent_no"),
			(agent_get_group, ":agent_group", ":dead_agent_no"),
			(player_is_active, ":agent_group"), 		
			(player_get_agent_id, ":dead_agent_no", ":agent_group"), 
		(try_end),
	  (try_end),
	  
      (try_begin),
        (ge, ":killer_agent_no", 0),
        (agent_get_team, ":killer_agent_team", ":killer_agent_no"),
      (else_try),
        (assign, ":killer_agent_team", -1),
      (try_end),

      (try_begin),
        (ge, ":dead_agent_no", 0),
        (agent_get_team, ":dead_agent_team", ":dead_agent_no"),
      (else_try),
        (assign, ":dead_agent_team", -1),
      (try_end),
      
      #adjusting kill counts of players/bots
      (try_begin), 
        (try_begin), 
          (ge, ":killer_agent_no", 0),
          (ge, ":dead_agent_no", 0),
          (agent_is_human, ":killer_agent_no"),
          (agent_is_human, ":dead_agent_no"),
          (neq, ":killer_agent_no", ":dead_agent_no"),
          
          (this_or_next|neq, ":killer_agent_team", ":dead_agent_team"),
          (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_deathmatch),
          (eq, "$g_multiplayer_game_type", multiplayer_game_type_duel),
          
          (try_begin),
            (agent_is_non_player, ":killer_agent_no"), #if killer agent is bot then increase bot kill counts of killer agent's team by one.
			(try_begin), 
				(eq, "$g_multiplayer_is_game_type_captain", 0),
				(agent_get_team, ":killer_agent_team", ":killer_agent_no"),
				(team_get_bot_kill_count, ":killer_agent_team_bot_kill_count", ":killer_agent_team"),
				(val_add, ":killer_agent_team_bot_kill_count", 1),
				(team_set_bot_kill_count, ":killer_agent_team", ":killer_agent_team_bot_kill_count"),            
			(try_end), 	
          (else_try), #if killer agent is not bot then increase kill counts of killer agent's player by one.
            (agent_get_player_id, ":killer_agent_player", ":killer_agent_no"),
            (player_is_active, ":killer_agent_player"),
            (player_get_kill_count, ":killer_agent_player_kill_count", ":killer_agent_player"),
            (val_add, ":killer_agent_player_kill_count", 1),
            (player_set_kill_count, ":killer_agent_player", ":killer_agent_player_kill_count"),
          (try_end),
        (try_end),           

        (try_begin), 
          (ge, ":dead_agent_no", 0),
          (agent_is_human, ":dead_agent_no"),
          (try_begin),
            (agent_is_non_player, ":dead_agent_no"), #if dead agent is bot then increase bot kill counts of dead agent's team by one.
			(try_begin), 
				(eq, "$g_multiplayer_is_game_type_captain", 0),
				(agent_get_team, ":dead_agent_team", ":dead_agent_no"),
				(team_get_bot_death_count, ":dead_agent_team_bot_death_count", ":dead_agent_team"),
				(val_add, ":dead_agent_team_bot_death_count", 1),
				(team_set_bot_death_count, ":dead_agent_team", ":dead_agent_team_bot_death_count"),
			(try_end),	
          (else_try), #if dead agent is not bot then increase death counts of dead agent's player by one.
            (agent_get_player_id, ":dead_agent_player", ":dead_agent_no"),
            (player_is_active, ":dead_agent_player"),
            (player_get_death_count, ":dead_agent_player_death_count", ":dead_agent_player"),
            (val_add, ":dead_agent_player_death_count", 1),
            (player_set_death_count, ":dead_agent_player", ":dead_agent_player_death_count"),
          (try_end),

          (try_begin),
            (assign, ":continue", 0),
      
            (try_begin),
              (this_or_next|lt, ":killer_agent_no", 0), #if he killed himself (1a(team change) or 1b(self kill)) then decrease kill counts of killer player by one.
              (eq, ":killer_agent_no", ":dead_agent_no"),
              (assign, ":continue", 1),
            (try_end),

            (try_begin),
              (eq, ":killer_agent_team", ":dead_agent_team"), #if he killed a teammate and game mod is not deathmatch then decrease kill counts of killer player by one.
              (neq, "$g_multiplayer_game_type", multiplayer_game_type_deathmatch),
              (neq, "$g_multiplayer_game_type", multiplayer_game_type_duel),
              (assign, ":continue", 1),
            (try_end),

            (eq, ":continue", 1),
                    
            (try_begin),
              (ge, ":killer_agent_no", 0),
              (assign, ":responsible_agent", ":killer_agent_no"),                
            (else_try),
              (assign, ":responsible_agent", ":dead_agent_no"),
            (try_end),

            (try_begin),
              (ge, ":responsible_agent", 0),
              (neg|agent_is_non_player, ":responsible_agent"),
              (agent_get_player_id, ":responsible_player", ":responsible_agent"),
              (ge, ":responsible_player", 0),
              (player_get_kill_count, ":dead_agent_player_kill_count", ":responsible_player"),
              (val_add, ":dead_agent_player_kill_count", -1),
              (player_set_kill_count, ":responsible_player", ":dead_agent_player_kill_count"),
            (try_end),
          (try_end),               
        (try_end),
      (try_end),
    ]),

  #script_warn_player_about_auto_team_balance
  # INPUT: none
  # OUTPUT: none
  ("warn_player_about_auto_team_balance",
   [
     (assign, "$g_multiplayer_message_type", multiplayer_message_type_auto_team_balance_next),
     (start_presentation, "prsnt_multiplayer_message_2"),
     ]),

  #script_check_team_balance
  # INPUT: none
  # OUTPUT: none
  ("check_team_balance",
   [
     (try_begin),
       (multiplayer_is_server),
  
       (assign, ":number_of_players_at_team_1", 0),
       (assign, ":number_of_players_at_team_2", 0),
       (get_max_players, ":num_players"),
       (try_for_range, ":cur_player", 0, ":num_players"),
         (player_is_active, ":cur_player"),
         (player_get_team_no, ":player_team", ":cur_player"),
         (try_begin),
           (eq, ":player_team", 0),
           (val_add, ":number_of_players_at_team_1", 1),
         (else_try),
           (eq, ":player_team", 1),
           (val_add, ":number_of_players_at_team_2", 1),
         (try_end),         
       (try_end),
 
       (store_sub, ":difference_of_number_of_players", ":number_of_players_at_team_1", ":number_of_players_at_team_2"),
       (assign, ":number_of_players_will_be_moved", 0),
       (try_begin),
         (try_begin),
           (store_mul, ":checked_value", "$g_multiplayer_auto_team_balance_limit", -1),
           (le, ":difference_of_number_of_players", ":checked_value"),
           (store_div, ":number_of_players_will_be_moved", ":difference_of_number_of_players", -2),
           (assign, ":team_with_more_players", 1),
           (assign, ":team_with_less_players", 0),
         (else_try),
           (ge, ":difference_of_number_of_players", "$g_multiplayer_auto_team_balance_limit"),
           (store_div, ":number_of_players_will_be_moved", ":difference_of_number_of_players", 2),
           (assign, ":team_with_more_players", 0),
           (assign, ":team_with_less_players", 1),
         (try_end),          
       (try_end),         
       #team balance checks are done
       (try_begin),
         (gt, ":number_of_players_will_be_moved", 0),
         (try_begin),
           (eq, "$g_team_balance_next_round", 1), #if warning is given
           
           #auto team balance starts
           (try_for_range, ":unused", 0, ":number_of_players_will_be_moved"), 
             (assign, ":max_player_join_time", 0),
             (assign, ":latest_joined_player_no", -1),
             (get_max_players, ":num_players"),                               
             (try_for_range, ":player_no", 0, ":num_players"),
               (player_is_active, ":player_no"),
               (player_get_team_no, ":player_team", ":player_no"),
               (eq, ":player_team", ":team_with_more_players"),
               (player_get_slot, ":player_join_time", ":player_no", slot_player_join_time),
               (try_begin),
                 (gt, ":player_join_time", ":max_player_join_time"),
                 (assign, ":max_player_join_time", ":player_join_time"),
                 (assign, ":latest_joined_player_no", ":player_no"),
               (try_end),
             (try_end),
             (try_begin),
               (ge, ":latest_joined_player_no", 0),
               (try_begin),
                 #if player is living add +1 to his kill count because he will get -1 because of team change while living.
                 (player_get_agent_id, ":latest_joined_agent_id", ":latest_joined_player_no"), 
                 (ge, ":latest_joined_agent_id", 0),
                 (agent_is_alive, ":latest_joined_agent_id"),

                 (player_get_kill_count, ":player_kill_count", ":latest_joined_player_no"), #adding 1 to his kill count, because he will lose 1 undeserved kill count for dying during team change
                 (val_add, ":player_kill_count", 1),
                 (player_set_kill_count, ":latest_joined_player_no", ":player_kill_count"),

                 (player_get_death_count, ":player_death_count", ":latest_joined_player_no"), #subtracting 1 to his death count, because he will gain 1 undeserved death count for dying during team change
                 (val_sub, ":player_death_count", 1),
                 (player_set_death_count, ":latest_joined_player_no", ":player_death_count"),

                 (player_get_score, ":player_score", ":latest_joined_player_no"), #adding 1 to his score count, because he will lose 1 undeserved score for dying during team change
                 (val_add, ":player_score", 1),
                 (player_set_score, ":latest_joined_player_no", ":player_score"),

                 (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
                   (player_is_active, ":player_no"),
                   (multiplayer_send_4_int_to_player, ":player_no", multiplayer_event_set_player_score_kill_death, ":latest_joined_player_no", ":player_score", ":player_kill_count", ":player_death_count"),
                 (try_end),

                 (player_get_value_of_original_items, ":old_items_value", ":latest_joined_player_no"),
                 (player_get_gold, ":player_gold", ":latest_joined_player_no"),
                 (val_add, ":player_gold", ":old_items_value"),
                 (player_set_gold, ":latest_joined_player_no", ":player_gold", multi_max_gold_that_can_be_stored),
               (try_end),

			   (call_script, "script_mp_set_player_team_no", ":latest_joined_player_no", ":team_with_less_players", 0),
               (multiplayer_send_message_to_player, ":latest_joined_player_no", multiplayer_event_force_start_team_selection),
             (try_end),
           (try_end),
     
           #for only server itself-----------------------------------------------------------------------------------------------
           (call_script, "script_show_multiplayer_message", multiplayer_message_type_auto_team_balance_done, 0), #0 is useless here
           #for only server itself-----------------------------------------------------------------------------------------------     
           (get_max_players, ":num_players"),                               
           (try_for_range, ":player_no", 1, ":num_players"),
             (player_is_active, ":player_no"),
             (multiplayer_send_int_to_player, ":player_no", multiplayer_event_show_multiplayer_message, multiplayer_message_type_auto_team_balance_done), 
           (try_end),
           (assign, "$g_team_balance_next_round", 0),
           #auto team balance done
         (else_try),
           #tutorial message (next round there will be auto team balance)
           (assign, "$g_team_balance_next_round", 1),
     
           #for only server itself-----------------------------------------------------------------------------------------------
           (call_script, "script_show_multiplayer_message", multiplayer_message_type_auto_team_balance_next, 0), #0 is useless here
           #for only server itself-----------------------------------------------------------------------------------------------     
           (get_max_players, ":num_players"),                               
           (try_for_range, ":player_no", 1, ":num_players"),
             (player_is_active, ":player_no"),
             (multiplayer_send_int_to_player, ":player_no", multiplayer_event_show_multiplayer_message, multiplayer_message_type_auto_team_balance_next), 
           (try_end),
         (try_end),
       (else_try),
         (assign, "$g_team_balance_next_round", 0),
       (try_end),
     (try_end),
   ]),

  #script_check_creating_ladder_dust_effect
  # INPUT: arg1 = instance_id, arg2 = remaining_time
  # OUTPUT: none
  ("check_creating_ladder_dust_effect",
   [
      (store_trigger_param_1, ":instance_id"),
      (store_trigger_param_2, ":remaining_time"),

      (try_begin),
        (lt, ":remaining_time", 15), #less then 0.15 seconds
        (gt, ":remaining_time", 3), #more than 0.03 seconds
      
        (scene_prop_get_slot, ":smoke_effect_done", ":instance_id", scene_prop_smoke_effect_done),
        (scene_prop_get_slot, ":opened_or_closed", ":instance_id", scene_prop_open_or_close_slot),

        (try_begin),
          (eq, ":smoke_effect_done", 0),
          (eq, ":opened_or_closed", 0),
      
          (prop_instance_get_position, pos0, ":instance_id"),

          (assign, ":smallest_dist", -1),
          (try_for_range, ":entry_point_no", multi_entry_points_for_usable_items_start, multi_entry_points_for_usable_items_end),
            (entry_point_get_position, pos1, ":entry_point_no"),
            (get_sq_distance_between_positions, ":dist", pos0, pos1),
            (this_or_next|eq, ":smallest_dist", -1),
            (lt, ":dist", ":smallest_dist"),
            (assign, ":smallest_dist", ":dist"),
            (assign, ":nearest_entry_point", ":entry_point_no"),
          (try_end),

          (try_begin),
            (set_fixed_point_multiplier, 100),

            (ge, ":smallest_dist", 0),
            (lt, ":smallest_dist", 22500), #max 15m distance
      
            (entry_point_get_position, pos1, ":nearest_entry_point"),
            (position_rotate_x, pos1, -90),

            (prop_instance_get_scene_prop_kind, ":scene_prop_kind", ":instance_id"),
            (try_begin),
              (eq, ":scene_prop_kind", "spr_siege_ladder_move_6m"),              
              (init_position, pos2),
              (position_set_z, pos2, 300),
              (position_transform_position_to_parent, pos3, pos1, pos2),
              (particle_system_burst, "psys_ladder_dust_6m", pos3, 100),
              (particle_system_burst, "psys_ladder_straw_6m", pos3, 100),
            (else_try),
              (eq, ":scene_prop_kind", "spr_siege_ladder_move_8m"),
              (init_position, pos2),
              (position_set_z, pos2, 400),
              (position_transform_position_to_parent, pos3, pos1, pos2),
              (particle_system_burst, "psys_ladder_dust_8m", pos3, 100),
              (particle_system_burst, "psys_ladder_straw_8m", pos3, 100),
            (else_try),
              (eq, ":scene_prop_kind", "spr_siege_ladder_move_10m"),
              (init_position, pos2),
              (position_set_z, pos2, 500),
              (position_transform_position_to_parent, pos3, pos1, pos2),
              (particle_system_burst, "psys_ladder_dust_10m", pos3, 100),
              (particle_system_burst, "psys_ladder_straw_10m", pos3, 100),
            (else_try),
              (eq, ":scene_prop_kind", "spr_siege_ladder_move_12m"),
              (init_position, pos2),
              (position_set_z, pos2, 600),
              (position_transform_position_to_parent, pos3, pos1, pos2),
              (particle_system_burst, "psys_ladder_dust_12m", pos3, 100),
              (particle_system_burst, "psys_ladder_straw_12m", pos3, 100),
            (else_try),
              (eq, ":scene_prop_kind", "spr_siege_ladder_move_14m"),
              (init_position, pos2),
              (position_set_z, pos2, 700),
              (position_transform_position_to_parent, pos3, pos1, pos2),
              (particle_system_burst, "psys_ladder_dust_14m", pos3, 100),
              (particle_system_burst, "psys_ladder_straw_14m", pos3, 100),
            (try_end),

            (scene_prop_set_slot, ":instance_id", scene_prop_smoke_effect_done, 1),
          (try_end),
        (try_end),
      (try_end),
      ]),

  #script_money_management_after_agent_death
  # INPUT: arg1 = killer_agent_no, arg2 = dead_agent_no
  # OUTPUT: none
  ("money_management_after_agent_death",
   [
     (store_script_param, ":killer_agent_no", 1),
     (store_script_param, ":dead_agent_no", 2),

     (try_begin),
       (multiplayer_is_server),
       (ge, ":killer_agent_no", 0),
       (ge, ":dead_agent_no", 0),
       (agent_is_human, ":dead_agent_no"), #if dead agent is not horse
       (agent_is_human, ":killer_agent_no"), #if killer agent is not horse
       (agent_get_team, ":killer_agent_team", ":killer_agent_no"),
       (agent_get_team, ":dead_agent_team", ":dead_agent_no"),
     
       (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_deathmatch),
       (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_duel),
       (neq, ":killer_agent_team", ":dead_agent_team"), #if these agents are enemies

       (neq, ":dead_agent_no", ":killer_agent_no"), #if agents are different, do not remove it is needed because in deathmatch mod, self killing passes here because of this or next.
     
       (assign, ":dead_agent_equipment_value", 0),
       (try_begin),
         (neg|agent_is_non_player, ":dead_agent_no"), 
         (agent_get_player_id, ":dead_player_no", ":dead_agent_no"),
         (player_get_slot, ":dead_agent_equipment_value", ":dead_player_no", slot_player_total_equipment_value),             
       (try_end),

       (assign, ":one_spawn_per_round_game_type", 0),

       (try_begin), 
##         (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_battle),
##         (eq, "$g_multiplayer_game_type", multiplayer_game_type_destroy),
         (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_captain_battle),
         (eq, "$g_multiplayer_game_type", multiplayer_game_type_battle),
         (assign, ":one_spawn_per_round_game_type", 1),            
       (try_end),
         
       (try_begin),
         #if this agent is dead agent then get share from total loot. (20% of total equipment value)                
         (agent_get_player_id,":player_no",":dead_agent_no"),
         (gt,":player_no",-1),
         (player_is_active,":player_no"),
         
         (this_or_next|eq, ":one_spawn_per_round_game_type", 0),
         (this_or_next|player_slot_eq, ":player_no", slot_player_spawned_this_round, 0),
         (player_slot_eq, ":player_no", slot_player_spawned_this_round, 1),
         
         (player_get_gold, ":player_gold", ":player_no"),

         #dead agent loot share (32%-48%-64%, norm : 48%)
         (store_mul, ":share_of_dead_agent", ":dead_agent_equipment_value", multi_dead_agent_loot_percentage_share),
         (val_div, ":share_of_dead_agent", 100),
         (val_mul, ":share_of_dead_agent", "$g_multiplayer_battle_earnings_multiplier"),
         (val_div, ":share_of_dead_agent", 100),
         (try_begin),
           (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_deathmatch), #(4/3x) share if current mod is deathmatch
           (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_duel), #(4/3x) share if current mod is duel
           (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_captain_team_deathmatch), #(4/3x) share if current mod is capture the flag
           (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_captain_coop), #(4/3x) share if current mod is coop
           (             eq, "$g_multiplayer_game_type", multiplayer_game_type_team_deathmatch), #(4/3x) share if current mod is headquarters
           (val_mul, ":share_of_dead_agent", 4),
           (val_div, ":share_of_dead_agent", 3),
           (val_add, ":player_gold", ":share_of_dead_agent"), 
         (else_try),
##           (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_battle), #(2/3x) share if current mod is battle 
##           (eq, "$g_multiplayer_game_type", multiplayer_game_type_destroy), #(2/3x) share if current mod is fight and destroy
           (eq, "$g_multiplayer_game_type", multiplayer_game_type_battle), #(2/3x) share if current mod is battle
           (val_mul, ":share_of_dead_agent", 2),
           (val_div, ":share_of_dead_agent", 3),
           (val_add, ":player_gold", ":share_of_dead_agent"),
         (else_try),
           (eq, "$g_multiplayer_game_type", multiplayer_game_type_captain_battle), #(5/3x) share if current mod is battle
           (val_mul, ":share_of_dead_agent", 5),
           (val_div, ":share_of_dead_agent", 3),
           (val_add, ":player_gold", ":share_of_dead_agent"),
         (else_try),
           (val_add, ":player_gold", ":share_of_dead_agent"), #(3/3x) share if current mod is siege
         (try_end),
		 (player_set_gold, ":player_no", ":player_gold", multi_max_gold_that_can_be_stored),
       (try_end),
       
       (try_begin),         
         (agent_get_player_id,":player_no",":killer_agent_no"),
         (gt,":player_no",-1),
         (player_is_active,":player_no"),
         
         (this_or_next|eq, ":one_spawn_per_round_game_type", 0),
         (this_or_next|player_slot_eq, ":player_no", slot_player_spawned_this_round, 0),
         (player_slot_eq, ":player_no", slot_player_spawned_this_round, 1),
         
         (player_get_gold, ":player_gold", ":player_no"),           

         #killer agent standart money (100-150-200, norm : 150)
         (assign, ":killer_agent_standard_money_addition", multi_killer_agent_standard_money_add),
         (val_mul, ":killer_agent_standard_money_addition", "$g_multiplayer_battle_earnings_multiplier"),
         (val_div, ":killer_agent_standard_money_addition", 100),
         (try_begin),
           (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_deathmatch), #(4/3x) share if current mod is deathmatch
           (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_duel), #(4/3x) share if current mod is duel
           (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_captain_team_deathmatch), #(4/3x) share if current mod is capture the flag
           (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_captain_coop), #(4/3x) share if current mod is coop
           (eq, "$g_multiplayer_game_type", multiplayer_game_type_team_deathmatch), #(4/3x) share if current mod is headquarters
           (val_mul, ":killer_agent_standard_money_addition", 4),
           (val_div, ":killer_agent_standard_money_addition", 3),
		   (assign, reg7, ":player_gold"),
           (val_add, ":player_gold", ":killer_agent_standard_money_addition"), 
		   (assign, reg7, ":player_gold"),
         (else_try),
##           (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_battle), #(2/3x) share if current mod is battle 
##           (eq, "$g_multiplayer_game_type", multiplayer_game_type_destroy), #(2/3x) share if current mod is fight and destroy
           (eq, "$g_multiplayer_game_type", multiplayer_game_type_battle), #(2/3x) share if current mod is battle 
           (val_mul, ":killer_agent_standard_money_addition", 2),
           (val_div, ":killer_agent_standard_money_addition", 3),
           (val_add, ":player_gold", ":killer_agent_standard_money_addition"),
         (else_try),
           (eq, "$g_multiplayer_game_type", multiplayer_game_type_captain_battle), #(5/3x) share if current mod is captain battle 
           (val_mul, ":killer_agent_standard_money_addition", 5),
           (val_div, ":killer_agent_standard_money_addition", 3),
           (val_add, ":player_gold", ":killer_agent_standard_money_addition"),
         (else_try),
           (val_add, ":player_gold", ":killer_agent_standard_money_addition"), #(3/3x) share if current mod is siege
         (try_end),

         #killer agent loot share (8%-12%-16%, norm : 12%)
         (store_mul, ":share_of_killer_agent", ":dead_agent_equipment_value", multi_killer_agent_loot_percentage_share),
         (val_div, ":share_of_killer_agent", 100),
         (val_mul, ":share_of_killer_agent", "$g_multiplayer_battle_earnings_multiplier"),
         (val_div, ":share_of_killer_agent", 100),
         (try_begin),
           (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_deathmatch), #(4/3x) share if current mod is deathmatch
           (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_duel), #(4/3x) share if current mod is duel
           (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_captain_team_deathmatch), #(4/3x) share if current mod is team_deathmatch
           (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_captain_coop), #(4/3x) share if current mod is coop
           (eq, "$g_multiplayer_game_type", multiplayer_game_type_team_deathmatch), #(4/3x) share if current mod is headquarters
           (val_mul, ":share_of_killer_agent", 4),
           (val_div, ":share_of_killer_agent", 3),
		   (assign, reg7, ":player_gold"),
           (val_add, ":player_gold", ":share_of_killer_agent"), 
		   (assign, reg7, ":player_gold"),
         (else_try),
##           (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_battle), #(2/3x) share if current mod is battle 
##           (eq, "$g_multiplayer_game_type", multiplayer_game_type_destroy), #(2/3x) share if current mod is fight and destroy
           (eq, "$g_multiplayer_game_type", multiplayer_game_type_battle), #(2/3x) share if current mod is battle 
           (val_mul, ":share_of_killer_agent", 2),
           (val_div, ":share_of_killer_agent", 3),
           (val_add, ":player_gold", ":share_of_killer_agent"),
         (else_try),
           (eq, "$g_multiplayer_game_type", multiplayer_game_type_captain_battle), #(5/3x) share if current mod is captain battle 
           (val_mul, ":share_of_killer_agent", 5),
           (val_div, ":share_of_killer_agent", 3),
           (val_add, ":player_gold", ":share_of_killer_agent"),
         (else_try),
           (val_add, ":player_gold", ":share_of_killer_agent"), #(3/3x) share if current mod is deathmatch
         (try_end),
		 
		 # killing an agent always increases player gold with a constant value
		 (try_begin),
		   (eq, "$g_multiplayer_game_type", multiplayer_game_type_captain_coop),
		   (player_get_gold, ":player_gold", ":player_no"),
		   (store_mul, ":share_of_killer_agent", "$g_multiplayer_ccoop_wave_no", 20),
		   (val_sub, ":share_of_killer_agent", 20),
		   (val_add, ":share_of_killer_agent", multi_killer_captain_coop_add),
		   (val_mul, ":share_of_killer_agent", "$g_multiplayer_battle_earnings_multiplier"),
		   (val_div, ":share_of_killer_agent", 100),
           (val_add, ":player_gold", ":share_of_killer_agent"),
		 (try_end),
		   
		 (player_set_gold, ":player_no", ":player_gold", multi_max_gold_that_can_be_stored),
	   (else_try),
         (agent_get_player_id, ":player_no", ":killer_agent_no"),
         (eq, ":player_no", -1), #if killer agent is a bot
		 (eq, "$g_multiplayer_is_game_type_captain", 1),

         (agent_get_group, ":agent_group", ":killer_agent_no"),
         (player_is_active, ":agent_group"),

		 (player_get_gold, ":player_gold", ":agent_group"),
		 (try_begin),
		   (eq, "$g_multiplayer_game_type", multiplayer_game_type_captain_coop),
		   (store_mul, ":share_of_killer_agent", "$g_multiplayer_ccoop_wave_no", 20),
		   (val_sub, ":share_of_killer_agent", 20),
		   (val_add, ":share_of_killer_agent", multi_killer_captain_coop_add),
		   (val_mul, ":share_of_killer_agent", "$g_multiplayer_battle_earnings_multiplier"),
 		   (val_div, ":share_of_killer_agent", 100),
          (val_add, ":player_gold", ":share_of_killer_agent"),
	     (else_try),
		   (val_add, ":player_gold", multi_killer_captain_add),
	     (try_end),
		 (player_set_gold, ":agent_group", ":player_gold", multi_max_gold_that_can_be_stored),
       (try_end),
     (try_end),
     #(below lines added new at 25.11.09 after Armagan decided new money system)
     (try_begin),
       (multiplayer_is_server),
       (neq, "$g_multiplayer_game_type", multiplayer_game_type_battle),
       (neq, "$g_multiplayer_game_type", multiplayer_game_type_captain_battle),
##       (neq, "$g_multiplayer_game_type", multiplayer_game_type_destroy),

       (ge, ":dead_agent_no", 0),
       (agent_is_human, ":dead_agent_no"), #if dead agent is not horse
       (agent_get_player_id, ":dead_agent_player_id", ":dead_agent_no"),
       (ge, ":dead_agent_player_id", 0),
     
       (player_get_gold, ":player_gold", ":dead_agent_player_id"),
       (try_begin),
         (store_mul, ":minimum_gold", "$g_multiplayer_initial_gold_multiplier", 10),
	     # decrement alive squad's cost from the initial player gold
	     (try_begin),
		   (call_script, "script_cf_multiplayer_can_buy_squad"),
		   (multiplayer_get_my_player, ":my_player_no"),
		   (call_script, "script_mp_get_player_alive_squad_cost", ":my_player_no"),
		   (assign, ":player_alive_squad_cost", reg0),
		   (val_sub, ":minimum_gold", ":player_alive_squad_cost"),
	     (try_end),
	     (val_max, ":minimum_gold", 0),
         (lt, ":player_gold", ":minimum_gold"),
         (assign, ":player_gold", ":minimum_gold"),
       (try_end),
	   (player_set_gold, ":dead_agent_player_id", ":player_gold"),
     (try_end),
     #new money system addition end          
     #OiM addition for money system
     (try_begin),
       (multiplayer_is_server),
       #we add gold to player if bot kill enemy
       #multi_killer_captain_add
       (eq, "$g_multiplayer_is_game_type_captain", 1),
       #(store_script_param, ":killer_agent_no", 1),
       #(store_script_param, ":dead_agent_no", 2),
       (ge, ":killer_agent_no", 0),
       (ge, ":dead_agent_no", 0),
       (agent_is_human, ":killer_agent_no"),
       (agent_is_non_player, ":killer_agent_no"),
       (agent_get_group, ":agent_group", ":killer_agent_no"), # get the controlling player of this bot
       (agent_get_team, ":killer_team", ":killer_agent_no"), 
       (agent_get_team, ":dead_team", ":dead_agent_no"), 
       (neq, ":killer_team", ":dead_team"), 
       (player_is_active, ":agent_group"),
       (player_get_gold, ":player_gold", ":agent_group"),
	   (try_begin),
		 (neq, "$g_multiplayer_game_type", multiplayer_game_type_captain_coop),
		 (val_add, ":player_gold", multi_killer_captain_add),
	   (try_end),
	   (player_set_gold, ":agent_group", ":player_gold", multi_max_gold_that_can_be_stored),
     (try_end), 
     #OiM addition end
   ]),


	 
  #script_initialize_all_scene_prop_slots
  # INPUT: arg1 = scene_prop_no
  # OUTPUT: none
  ("initialize_all_scene_prop_slots",
   [
     (call_script, "script_initialize_scene_prop_slots", "spr_siege_ladder_move_6m"),
     (call_script, "script_initialize_scene_prop_slots", "spr_siege_ladder_move_8m"),
     (call_script, "script_initialize_scene_prop_slots", "spr_siege_ladder_move_10m"),
     (call_script, "script_initialize_scene_prop_slots", "spr_siege_ladder_move_12m"),
     (call_script, "script_initialize_scene_prop_slots", "spr_siege_ladder_move_14m"),
     (call_script, "script_initialize_scene_prop_slots", "spr_castle_e_sally_door_a"),
     (call_script, "script_initialize_scene_prop_slots", "spr_castle_f_sally_door_a"),
     (call_script, "script_initialize_scene_prop_slots", "spr_earth_sally_gate_left"),
     (call_script, "script_initialize_scene_prop_slots", "spr_earth_sally_gate_right"),
     (call_script, "script_initialize_scene_prop_slots", "spr_viking_keep_destroy_sally_door_left"),
     (call_script, "script_initialize_scene_prop_slots", "spr_viking_keep_destroy_sally_door_right"),
     (call_script, "script_initialize_scene_prop_slots", "spr_castle_f_door_a"),
     (call_script, "script_initialize_scene_prop_slots", "spr_belfry_a"),
     (call_script, "script_initialize_scene_prop_slots", "spr_belfry_b"),
     (call_script, "script_initialize_scene_prop_slots", "spr_winch_b"),
    ]),

  #script_initialize_scene_prop_slots
  # INPUT: arg1 = scene_prop_no
  # OUTPUT: none
  ("initialize_scene_prop_slots",
   [
     (store_script_param, ":scene_prop_no", 1),

     (scene_prop_get_num_instances, ":num_instances_of_scene_prop", ":scene_prop_no"),     
     (try_for_range, ":cur_instance", 0, ":num_instances_of_scene_prop"),
       (scene_prop_get_instance, ":cur_instance_id", ":scene_prop_no", ":cur_instance"),
       (try_for_range, ":cur_slot", 0, scene_prop_slots_end),
         (scene_prop_set_slot, ":cur_instance_id", ":cur_slot", 0),
       (try_end),
     (try_end),
     ]),
  
  #script_use_item
  # INPUT: arg1 = agent_id, arg2 = instance_id
  # OUTPUT: none
  ("use_item",
   [
     (store_script_param, ":instance_id", 1),
     (store_script_param, ":user_id", 2),

     (try_begin),
       (game_in_multiplayer_mode),
       (prop_instance_get_scene_prop_kind, ":scene_prop_id", ":instance_id"),
       (eq, ":scene_prop_id", "spr_winch_b"),
                      
       (multiplayer_get_my_player, ":my_player_no"),

       (this_or_next|gt, ":my_player_no", 0),
       (neg|multiplayer_is_dedicated_server),

       (ge, ":my_player_no", 0),
       (player_get_agent_id, ":my_agent_id", ":my_player_no"),
       (ge, ":my_agent_id", 0),
       (agent_is_active, ":my_agent_id"),
       (agent_get_team, ":my_team_no", ":my_agent_id"),
       (eq, ":my_team_no", 0),
                             
       (scene_prop_get_slot, ":opened_or_closed", ":instance_id", scene_prop_open_or_close_slot),
       (ge, ":user_id", 0),
       (agent_is_active, ":user_id"),
       (agent_get_player_id, ":user_player", ":user_id"),
       (str_store_player_username, s7, ":user_player"),
            
       (try_begin),
         (eq, ":opened_or_closed", 0),
         (display_message, "@{s7} opened the gate"),
       (else_try),  
         (display_message, "@{s7} closed the gate"),
       (try_end),
     (try_end),  

     (prop_instance_get_scene_prop_kind, ":scene_prop_id", ":instance_id"),
     
     (try_begin),
       (this_or_next|eq, ":scene_prop_id", "spr_winch_b"),
       (eq, ":scene_prop_id", "spr_winch"),
       (assign, ":effected_object", "spr_portcullis"),
     (else_try),
       (this_or_next|eq, ":scene_prop_id", "spr_door_destructible"),
       (this_or_next|eq, ":scene_prop_id", "spr_castle_f_door_b"),
       (this_or_next|eq, ":scene_prop_id", "spr_castle_e_sally_door_a"),
       (this_or_next|eq, ":scene_prop_id", "spr_castle_f_sally_door_a"),
       (this_or_next|eq, ":scene_prop_id", "spr_earth_sally_gate_left"),
       (this_or_next|eq, ":scene_prop_id", "spr_earth_sally_gate_right"),
       (this_or_next|eq, ":scene_prop_id", "spr_viking_keep_destroy_sally_door_left"),
       (this_or_next|eq, ":scene_prop_id", "spr_viking_keep_destroy_sally_door_right"),
       (this_or_next|eq, ":scene_prop_id", "spr_castle_f_door_a"),
       (this_or_next|eq, ":scene_prop_id", "spr_siege_ladder_move_6m"),
       (this_or_next|eq, ":scene_prop_id", "spr_siege_ladder_move_8m"),
       (this_or_next|eq, ":scene_prop_id", "spr_siege_ladder_move_10m"),
       (this_or_next|eq, ":scene_prop_id", "spr_siege_ladder_move_12m"),
       (eq, ":scene_prop_id", "spr_siege_ladder_move_14m"),
       (assign, ":effected_object", ":scene_prop_id"),
     (try_end),

     (assign, ":smallest_dist", -1),
     (prop_instance_get_position, pos0, ":instance_id"),
     (scene_prop_get_num_instances, ":num_instances_of_effected_object", ":effected_object"),     
     (try_for_range, ":cur_instance", 0, ":num_instances_of_effected_object"),
       (scene_prop_get_instance, ":cur_instance_id", ":effected_object", ":cur_instance"),
       (prop_instance_get_position, pos1, ":cur_instance_id"),
       (get_sq_distance_between_positions, ":dist", pos0, pos1),
       (this_or_next|eq, ":smallest_dist", -1),
       (lt, ":dist", ":smallest_dist"),
       (assign, ":smallest_dist", ":dist"),
       (assign, ":effected_object_instance_id", ":cur_instance_id"),
     (try_end),

     (try_begin),
       (ge, ":instance_id", 0),
       (ge, ":smallest_dist", 0),

       (try_begin),     
         (eq, ":effected_object", "spr_portcullis"),
         (scene_prop_get_slot, ":opened_or_closed", ":instance_id", scene_prop_open_or_close_slot),

         (try_begin),
           (eq, ":opened_or_closed", 0), #open gate
     
           (scene_prop_enable_after_time, ":instance_id", 400), #4 seconds
           (try_begin),
             (this_or_next|multiplayer_is_server),
             (neg|game_in_multiplayer_mode),
             (prop_instance_get_position, pos0, ":effected_object_instance_id"),
             (position_move_z, pos0, 375),
             (prop_instance_animate_to_position, ":effected_object_instance_id", pos0, 400),
           (try_end),
           (scene_prop_set_slot, ":instance_id", scene_prop_open_or_close_slot, 1),

           (try_begin),
             (eq, ":scene_prop_id", "spr_winch_b"),
             (this_or_next|multiplayer_is_server),
             (neg|game_in_multiplayer_mode),
             (prop_instance_get_position, pos1, ":instance_id"),
             (prop_instance_rotate_to_position, ":instance_id", pos1, 400, 72000),
           (try_end),
         (else_try), #close gate     
           (scene_prop_enable_after_time, ":instance_id", 400), #4 seconds
           (try_begin),
             (this_or_next|multiplayer_is_server),
             (neg|game_in_multiplayer_mode),
             (prop_instance_get_position, pos0, ":effected_object_instance_id"),
             (position_move_z, pos0, -375),
             (prop_instance_animate_to_position, ":effected_object_instance_id", pos0, 400),
           (try_end),
           (scene_prop_set_slot, ":instance_id", scene_prop_open_or_close_slot, 0),

           (try_begin),
             (eq, ":scene_prop_id", "spr_winch_b"),
             (this_or_next|multiplayer_is_server),
             (neg|game_in_multiplayer_mode),
             (prop_instance_get_position, pos1, ":instance_id"),
             (prop_instance_rotate_to_position, ":instance_id", pos1, 400, -72000),
           (try_end),
         (try_end),
       (else_try),
         (this_or_next|eq, ":effected_object", "spr_siege_ladder_move_6m"),
         (this_or_next|eq, ":effected_object", "spr_siege_ladder_move_8m"),
         (this_or_next|eq, ":effected_object", "spr_siege_ladder_move_10m"),
         (this_or_next|eq, ":effected_object", "spr_siege_ladder_move_12m"),
         (eq, ":effected_object", "spr_siege_ladder_move_14m"),

         (try_begin),
           (eq, ":effected_object", "spr_siege_ladder_move_6m"),
           (assign, ":animation_time_drop", 120),
           (assign, ":animation_time_elevate", 240),
         (else_try),
           (eq, ":effected_object", "spr_siege_ladder_move_8m"),
           (assign, ":animation_time_drop", 140),
           (assign, ":animation_time_elevate", 280),
         (else_try),
           (eq, ":effected_object", "spr_siege_ladder_move_10m"),
           (assign, ":animation_time_drop", 160),
           (assign, ":animation_time_elevate", 320),
         (else_try),
           (eq, ":effected_object", "spr_siege_ladder_move_12m"),
           (assign, ":animation_time_drop", 190),
           (assign, ":animation_time_elevate", 360),
         (else_try),
           (eq, ":effected_object", "spr_siege_ladder_move_14m"),
           (assign, ":animation_time_drop", 230),
           (assign, ":animation_time_elevate", 400),
         (try_end),
     
         (scene_prop_get_slot, ":opened_or_closed", ":instance_id", scene_prop_open_or_close_slot),

         (try_begin),
           (scene_prop_enable_after_time, ":effected_object_instance_id", ":animation_time_elevate"), #3 seconds in average
           (eq, ":opened_or_closed", 0), #ladder at ground           
           (prop_instance_get_starting_position, pos0, ":effected_object_instance_id"),
           (prop_instance_enable_physics, ":effected_object_instance_id", 0),
           (prop_instance_animate_to_position, ":effected_object_instance_id", pos0, 300),
           (scene_prop_set_slot, ":effected_object_instance_id", scene_prop_open_or_close_slot, 1), 
         (else_try), #ladder at wall
           (scene_prop_enable_after_time, ":effected_object_instance_id", ":animation_time_drop"), #1.5 seconds in average
           (prop_instance_get_position, pos0, ":instance_id"),

           (assign, ":smallest_dist", -1),
           (try_for_range, ":entry_point_no", multi_entry_points_for_usable_items_start, multi_entry_points_for_usable_items_end),
             (entry_point_get_position, pos1, ":entry_point_no"),
             (get_sq_distance_between_positions, ":dist", pos0, pos1),
             (this_or_next|eq, ":smallest_dist", -1),
             (lt, ":dist", ":smallest_dist"),
             (assign, ":smallest_dist", ":dist"),
             (assign, ":nearest_entry_point", ":entry_point_no"),
           (try_end),

           (try_begin),
             (ge, ":smallest_dist", 0),
             (lt, ":smallest_dist", 22500), #max 15m distance
             (entry_point_get_position, pos1, ":nearest_entry_point"),
             (position_rotate_x, pos1, -90),
             (scene_prop_set_slot, ":effected_object_instance_id", scene_prop_smoke_effect_done, 0),
             (prop_instance_enable_physics, ":effected_object_instance_id", 0),
             (prop_instance_animate_to_position, ":effected_object_instance_id", pos1, 130),
           (try_end),

           (scene_prop_set_slot, ":effected_object_instance_id", scene_prop_open_or_close_slot, 0),
         (try_end),
       (else_try),
         (this_or_next|eq, ":effected_object", "spr_door_destructible"),
         (this_or_next|eq, ":effected_object", "spr_castle_f_door_b"),
         (this_or_next|eq, ":scene_prop_id", "spr_castle_e_sally_door_a"),     
         (this_or_next|eq, ":scene_prop_id", "spr_castle_f_sally_door_a"),     
         (this_or_next|eq, ":scene_prop_id", "spr_earth_sally_gate_left"),     
         (this_or_next|eq, ":scene_prop_id", "spr_earth_sally_gate_right"),     
         (this_or_next|eq, ":scene_prop_id", "spr_viking_keep_destroy_sally_door_left"),     
         (this_or_next|eq, ":scene_prop_id", "spr_viking_keep_destroy_sally_door_right"),     
         (eq, ":scene_prop_id", "spr_castle_f_door_a"),
     
         (assign, ":effected_object_instance_id", ":instance_id"),
         (scene_prop_get_slot, ":opened_or_closed", ":effected_object_instance_id", scene_prop_open_or_close_slot),

         (try_begin),
           (eq, ":opened_or_closed", 0),

           (prop_instance_get_starting_position, pos0, ":effected_object_instance_id"),

           (scene_prop_enable_after_time, ":effected_object_instance_id", 100),

           (try_begin),
             (neg|eq, ":scene_prop_id", "spr_viking_keep_destroy_sally_door_left"),
             (neg|eq, ":scene_prop_id", "spr_earth_sally_gate_left"),
             
             (position_rotate_z, pos0, -85),
           (else_try),  
             (position_rotate_z, pos0, 85),
           (try_end),
           
           (prop_instance_animate_to_position, ":effected_object_instance_id", pos0, 100),
          
           (scene_prop_set_slot, ":effected_object_instance_id", scene_prop_open_or_close_slot, 1),
         (else_try),          
           (prop_instance_get_starting_position, pos0, ":effected_object_instance_id"),

           (scene_prop_enable_after_time, ":effected_object_instance_id", 100),

           (prop_instance_animate_to_position, ":effected_object_instance_id", pos0, 100),

           (scene_prop_set_slot, ":effected_object_instance_id", scene_prop_open_or_close_slot, 0),
         (try_end),
       (try_end),
     (try_end),
     ]),

  #script_determine_team_flags
  # INPUT: none
  # OUTPUT: none
  ("determine_team_flags",
   [
     (store_script_param, ":team_no", 1),

     (try_begin),
       (eq, "$g_multiplayer_game_type", multiplayer_game_type_capture_the_flag),
       
       (try_begin),
         (eq, ":team_no", 0),
     
         (team_get_faction, ":team_faction_no", 0),
         (try_begin),
           (eq, ":team_faction_no", "fac_kingdom_1"),   
           (assign, "$team_1_flag_scene_prop", "spr_ctf_flag_kingdom_4"),
         (else_try),
           (eq, ":team_faction_no", "fac_kingdom_2"),
           (assign, "$team_1_flag_scene_prop", "spr_ctf_flag_kingdom_1"),
         (else_try),
           (eq, ":team_faction_no", "fac_kingdom_3"), 
           (assign, "$team_1_flag_scene_prop", "spr_ctf_flag_kingdom_3"),
         (else_try),
           (eq, ":team_faction_no", "fac_kingdom_4"),
           (assign, "$team_1_flag_scene_prop", "spr_ctf_flag_kingdom_2"),
         (else_try),
           (eq, ":team_faction_no", "fac_kingdom_5"),
           (assign, "$team_1_flag_scene_prop", "spr_ctf_flag_kingdom_5"),
         (try_end),
       (else_try),
         (team_get_faction, ":team_faction_no", 1),
         (try_begin),    
           (eq, ":team_faction_no", "fac_kingdom_1"),   
           (assign, "$team_2_flag_scene_prop", "spr_ctf_flag_kingdom_4"),
         (else_try),
           (eq, ":team_faction_no", "fac_kingdom_2"),
           (assign, "$team_2_flag_scene_prop", "spr_ctf_flag_kingdom_1"),
         (else_try),
           (eq, ":team_faction_no", "fac_kingdom_3"),
           (assign, "$team_2_flag_scene_prop", "spr_ctf_flag_kingdom_3"),
         (else_try),
           (eq, ":team_faction_no", "fac_kingdom_4"),
           (assign, "$team_2_flag_scene_prop", "spr_ctf_flag_kingdom_2"),
         (else_try),
           (eq, ":team_faction_no", "fac_kingdom_5"),
           (assign, "$team_2_flag_scene_prop", "spr_ctf_flag_kingdom_5"),
         (try_end),  
       
         (try_begin),       
           (eq, "$team_1_flag_scene_prop", "$team_2_flag_scene_prop"),
           (assign, "$team_2_flag_scene_prop", "spr_ctf_flag_kingdom_7"),
         (try_end),
       (try_end),
     (else_try),  
       (try_begin),
       (eq, ":team_no", 0),
     
       (team_get_faction, ":team_faction_no", 0),
       (try_begin),
         (eq, ":team_faction_no", "fac_kingdom_1"),   
         (assign, "$team_1_flag_scene_prop", "spr_headquarters_flag_nord"),
       (else_try),
         (eq, ":team_faction_no", "fac_kingdom_2"),
         (assign, "$team_1_flag_scene_prop", "spr_headquarters_flag_swadian"),
       (else_try),
         (eq, ":team_faction_no", "fac_kingdom_3"),
         (assign, "$team_1_flag_scene_prop", "spr_headquarters_flag_khergit"),
       (else_try),
         (eq, ":team_faction_no", "fac_kingdom_4"),
         (assign, "$team_1_flag_scene_prop", "spr_headquarters_flag_vaegir"),
       (else_try),
         (eq, ":team_faction_no", "fac_kingdom_5"),
         (assign, "$team_1_flag_scene_prop", "spr_headquarters_flag_rhodok"),
       (try_end),
     (else_try),
       (team_get_faction, ":team_faction_no", 1),
       (try_begin),
         (eq, ":team_faction_no", "fac_kingdom_1"),   
         (assign, "$team_2_flag_scene_prop", "spr_headquarters_flag_nord"),
       (else_try),
         (eq, ":team_faction_no", "fac_kingdom_2"),
         (assign, "$team_2_flag_scene_prop", "spr_headquarters_flag_swadian"),
       (else_try),
         (eq, ":team_faction_no", "fac_kingdom_3"),
         (assign, "$team_2_flag_scene_prop", "spr_headquarters_flag_khergit"),
       (else_try),
         (eq, ":team_faction_no", "fac_kingdom_4"),
         (assign, "$team_2_flag_scene_prop", "spr_headquarters_flag_vaegir"),
       (else_try),
         (eq, ":team_faction_no", "fac_kingdom_5"),
         (assign, "$team_2_flag_scene_prop", "spr_headquarters_flag_rhodok"),
       (try_end),     
     (try_end),
   ]),
   

  #script_calculate_flag_move_time
  # INPUT: arg1 = number_of_total_agents_around_flag, arg2 = dist_between_flag_and_its_pole
  # OUTPUT: reg0 = flag move time
  ("calculate_flag_move_time",
   [
     (store_script_param, ":number_of_total_agents_around_flag", 1),
     (store_script_param, ":dist_between_flag_and_its_target", 2),

     (try_begin), #(if no one is around flag it again moves to its current owner situation but 5 times slower than normal)
       (eq, ":number_of_total_agents_around_flag", 0),
       (store_mul, reg0, ":dist_between_flag_and_its_target", 2500),#5.00 * 1.00 * (500 stable) = 2000 
     (else_try),
       (eq, ":number_of_total_agents_around_flag", 1),
       (store_mul, reg0, ":dist_between_flag_and_its_target", 500), #1.00 * (500 stable) = 500
     (else_try),
       (eq, ":number_of_total_agents_around_flag", 2),
       (store_mul, reg0, ":dist_between_flag_and_its_target", 300), #0.60(0.60) * (500 stable) = 300
     (else_try),
       (eq, ":number_of_total_agents_around_flag", 3),
       (store_mul, reg0, ":dist_between_flag_and_its_target", 195), #0.39(0.60 * 0.65) * (500 stable) = 195
     (else_try),
       (eq, ":number_of_total_agents_around_flag", 4),
       (store_mul, reg0, ":dist_between_flag_and_its_target", 137), #0.273(0.60 * 0.65 * 0.70) * (500 stable) = 136.5 >rounding> 137
     (else_try),
       (eq, ":number_of_total_agents_around_flag", 5),
       (store_mul, reg0, ":dist_between_flag_and_its_target", 102), #0.20475(0.60 * 0.65 * 0.70 * 0.75) * (500 stable) = 102.375 >rounding> 102
     (else_try),
       (eq, ":number_of_total_agents_around_flag", 6),
       (store_mul, reg0, ":dist_between_flag_and_its_target", 82),  #0.1638(0.60 * 0.65 * 0.70 * 0.75 * 0.80) * (500 stable) = 81.9 >rounding> 82
     (else_try),
       (eq, ":number_of_total_agents_around_flag", 7),
       (store_mul, reg0, ":dist_between_flag_and_its_target", 66),  #0.13104(0.60 * 0.65 * 0.70 * 0.75 * 0.80 * 0.85) * (500 stable) = 65.52 >rounding> 66
     (else_try),
       (eq, ":number_of_total_agents_around_flag", 8),
       (store_mul, reg0, ":dist_between_flag_and_its_target", 59),  #0.117936(0.60 * 0.65 * 0.70 * 0.75 * 0.80 * 0.85 * 0.90) * (500 stable) = 58.968 >rounding> 59
     (else_try),
       (store_mul, reg0, ":dist_between_flag_and_its_target", 56),  #0.1120392(0.60 * 0.65 * 0.70 * 0.75 * 0.80 * 0.85 * 0.90 * 0.95) * (500 stable) = 56.0196 >rounding> 56
     (try_end), 

     (assign, ":number_of_players", 0),
     (get_max_players, ":num_players"),                               
     (try_for_range, ":cur_player", 0, ":num_players"),
       (player_is_active, ":cur_player"),
       (val_add, ":number_of_players", 1),
     (try_end),

     (try_begin),
       (lt, ":number_of_players", 10),
       (val_mul, reg0, 50),
     (else_try),
       (lt, ":number_of_players", 35),
       (store_sub, ":number_of_players_multipication", 35, ":number_of_players"),
       (val_mul, ":number_of_players_multipication", 2),
       (store_sub, ":number_of_players_multipication", 100, ":number_of_players_multipication"),
       (val_mul, reg0, ":number_of_players_multipication"),
     (else_try),
       (val_mul, reg0, 100),
     (try_end),

     (try_begin),
       (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_siege),
       (eq, "$g_multiplayer_game_type", multiplayer_game_type_captain_siege),
       (val_mul, reg0, 2),
     (try_end),

     (val_div, reg0, 10000), #100x for number of players around flag, 100x for number of players in game
     ]),

  #script_move_death_mode_flags_down
  # INPUT: none
  # OUTPUT: none
  ("move_death_mode_flags_down",
   [
     (try_begin),
       (scene_prop_get_instance, ":pole_1_id", "spr_headquarters_pole_code_only", 0),
       (prop_instance_get_position, pos0, ":pole_1_id"),
       (position_move_z, pos0, -2000), 
       (prop_instance_set_position, ":pole_1_id", pos0),
     (try_end),

     (try_begin),
       (scene_prop_get_instance, ":pole_2_id", "spr_headquarters_pole_code_only", 1),
       (prop_instance_get_position, pos1, ":pole_2_id"),
       (position_move_z, pos1, -2000), 
       (prop_instance_set_position, ":pole_2_id", pos1),
     (try_end),
    
     (try_begin),
       (scene_prop_get_instance, ":pole_1_id", "spr_headquarters_pole_code_only", 0),
       (prop_instance_get_position, pos0, ":pole_1_id"),
       (scene_prop_get_instance, ":flag_1_id", "$team_1_flag_scene_prop", 0),
       (prop_instance_stop_animating, ":flag_1_id"),
       (position_move_z, pos0, multi_headquarters_flag_initial_height),
       (prop_instance_set_position, ":flag_1_id", pos0),
     (try_end),

     (try_begin),
       (scene_prop_get_instance, ":pole_2_id", "spr_headquarters_pole_code_only", 1),
       (prop_instance_get_position, pos1, ":pole_2_id"),
       (scene_prop_get_instance, ":flag_2_id", "$team_2_flag_scene_prop", 0),
       (prop_instance_stop_animating, ":flag_2_id"),
       (position_move_z, pos1, multi_headquarters_flag_initial_height),
       (prop_instance_set_position, ":flag_2_id", pos1),
     (try_end),
   ]),

  #script_move_flag
  # INPUT: arg1 = shown_flag_id, arg2 = move time in seconds, pos0 = target position
  # OUTPUT: none
  ("move_flag",
   [
     (store_script_param, ":shown_flag_id", 1),
     (store_script_param, ":shown_flag_move_time", 2),

     (try_begin),
       (multiplayer_is_server), #added after auto-animating
     
       (try_begin),
         (eq, ":shown_flag_move_time", 0), #stop
         (prop_instance_stop_animating, ":shown_flag_id"),
       (else_try),
         (prop_instance_animate_to_position, ":shown_flag_id", pos0, ":shown_flag_move_time"),
       (try_end),
     (try_end),
   ]),

  #script_move_headquarters_flags
  # INPUT: arg1 = current_owner, arg2 = number_of_agents_around_flag_team_1, arg3 = number_of_agents_around_flag_team_2
  # OUTPUT: none
  ("move_headquarters_flags",
   [
     (store_script_param, ":flag_no", 1),
     (store_script_param, ":number_of_agents_around_flag_team_1", 2),
     (store_script_param, ":number_of_agents_around_flag_team_2", 3),

     (store_add, ":cur_flag_slot", multi_data_flag_owner_begin, ":flag_no"),
     (troop_get_slot, ":current_owner", "trp_multiplayer_data", ":cur_flag_slot"),

     (scene_prop_get_num_instances, ":num_instances", "spr_headquarters_flag_gray_code_only"),
     (try_begin),
       (assign, ":visibility", 0),
       (lt, ":flag_no", ":num_instances"),
       (scene_prop_get_instance, ":flag_id", "spr_headquarters_flag_gray_code_only", ":flag_no"),
       (scene_prop_get_visibility, ":visibility", ":flag_id"),
     (try_end),

     (try_begin),
       (eq, ":visibility", 1),
       (assign, ":shown_flag", 0),
       (assign, ":shown_flag_id", ":flag_id"),
     (else_try),
       (scene_prop_get_num_instances, ":num_instances", "$team_1_flag_scene_prop"),
       (try_begin),
         (assign, ":visibility", 0),
         (lt, ":flag_no", ":num_instances"),
         (scene_prop_get_instance, ":flag_id", "$team_1_flag_scene_prop", ":flag_no"),
         (scene_prop_get_visibility, ":visibility", ":flag_id"),
       (try_end),

       #(scene_prop_get_instance, ":flag_id", "$team_1_flag_scene_prop", ":flag_no"),
       #(scene_prop_get_visibility, ":visibility", ":flag_id"),       
       (try_begin),
         (eq, ":visibility", 1),
         (assign, ":shown_flag", 1),
         (assign, ":shown_flag_id", ":flag_id"),
       (else_try),
         (scene_prop_get_num_instances, ":num_instances", "$team_2_flag_scene_prop"),
         (try_begin),
           (assign, ":visibility", 0),
           (lt, ":flag_no", ":num_instances"),
           (scene_prop_get_instance, ":flag_id", "$team_2_flag_scene_prop", ":flag_no"),
           (scene_prop_get_visibility, ":visibility", ":flag_id"),
         (try_end),

         #(scene_prop_get_instance, ":flag_id", "$team_2_flag_scene_prop", ":flag_no"),
         #(scene_prop_get_visibility, ":visibility", ":flag_id"),              
         (try_begin),
           (eq, ":visibility", 1),
           (assign, ":shown_flag", 2),
           (assign, ":shown_flag_id", ":flag_id"),
         (try_end),
       (try_end),
     (try_end),

     (try_begin),
       (scene_prop_get_instance, ":pole_id", "spr_headquarters_pole_code_only", ":flag_no"),
     (try_end),

     (try_begin),       
       (eq, ":shown_flag", ":current_owner"), #situation 1 : (current owner is equal shown flag)
       (try_begin),
         (ge, ":number_of_agents_around_flag_team_1", 1),
         (ge, ":number_of_agents_around_flag_team_2", 1),         
         (assign, ":flag_movement", 0), #0:stop
       (else_try),  
         (eq, ":number_of_agents_around_flag_team_1", 0),
         (eq, ":number_of_agents_around_flag_team_2", 0),
         (assign, ":flag_movement", 1), #1:rise (slow)
       (else_try),
         (try_begin),
           (ge, ":number_of_agents_around_flag_team_1", 1),
           (eq, ":number_of_agents_around_flag_team_2", 0),
           (eq, ":current_owner", 1),
           (assign, ":flag_movement", 1), #1:rise (fast)
         (else_try),
           (eq, ":number_of_agents_around_flag_team_1", 0),
           (ge, ":number_of_agents_around_flag_team_2", 1),
           (eq, ":current_owner", 2),
           (assign, ":flag_movement", 1), #1:rise (fast)
         (else_try),
           (assign, ":flag_movement", -1), #-1:drop (fast)
         (try_end),
       (try_end),
     (else_try), #situation 2 : (current owner is different than shown flag)
       (try_begin),
         (ge, ":number_of_agents_around_flag_team_1", 1),
         (ge, ":number_of_agents_around_flag_team_2", 1),
         (assign, ":flag_movement", 0), #0:stop
       (else_try),  
         (eq, ":number_of_agents_around_flag_team_1", 0),
         (eq, ":number_of_agents_around_flag_team_2", 0),
         (assign, ":flag_movement", -1), #-1:drop (slow)
       (else_try),
         (try_begin),
           (ge, ":number_of_agents_around_flag_team_1", 1),
           (eq, ":number_of_agents_around_flag_team_2", 0),
           (try_begin),
             (eq, ":shown_flag", 1),
             (assign, ":flag_movement", 1), #1:rise (fast)
           (else_try),
             (neq, ":current_owner", 1),
             (assign, ":flag_movement", -1), #-1:drop (fast)
           (try_end),
         (else_try),
           (eq, ":number_of_agents_around_flag_team_1", 0),
           (ge, ":number_of_agents_around_flag_team_2", 1),
           (try_begin),
             (eq, ":shown_flag", 2),
             (assign, ":flag_movement", 1), #1:rise (fast)
           (else_try),
             (neq, ":current_owner", 2),
             (assign, ":flag_movement", -1), #-1:drop (fast)
           (try_end),
         (try_end),
       (try_end),
     (try_end),

     (store_add, ":number_of_total_agents_around_flag", ":number_of_agents_around_flag_team_1", ":number_of_agents_around_flag_team_2"),

     (try_begin),
       (eq, ":flag_movement", 0),
       (assign, reg0, 0),
     (else_try),
       (eq, ":flag_movement", 1),
       (prop_instance_get_position, pos1, ":shown_flag_id"),
       (prop_instance_get_position, pos0, ":pole_id"),
       (position_move_z, pos0, multi_headquarters_pole_height),
       (get_distance_between_positions, ":dist_between_flag_and_its_target", pos0, pos1),
       (call_script, "script_calculate_flag_move_time", ":number_of_total_agents_around_flag", ":dist_between_flag_and_its_target"),
     (else_try),  
       (eq, ":flag_movement", -1),
       (prop_instance_get_position, pos1, ":shown_flag_id"),
       (prop_instance_get_position, pos0, ":pole_id"),
       (get_distance_between_positions, ":dist_between_flag_and_its_target", pos0, pos1),
       (call_script, "script_calculate_flag_move_time", ":number_of_total_agents_around_flag", ":dist_between_flag_and_its_target"),
     (try_end),

     (call_script, "script_move_flag", ":shown_flag_id", reg0), #pos0 : target position
     ]),

  #script_set_num_agents_around_flag
  # INPUT: arg1 = flag_no, arg2 = owner_code
  # OUTPUT: none
  ("set_num_agents_around_flag",
   [
     (store_script_param, ":flag_no", 1),
     (store_script_param, ":current_owner_code", 2),

     (store_div, ":number_of_agents_around_flag_team_1", ":current_owner_code", 100),
     (store_mod, ":number_of_agents_around_flag_team_2", ":current_owner_code", 100),

     (store_add, ":cur_flag_owner_counts_slot", multi_data_flag_players_around_begin, ":flag_no"),
     (troop_set_slot, "trp_multiplayer_data", ":cur_flag_owner_counts_slot", ":current_owner_code"),

     (call_script, "script_move_headquarters_flags", ":flag_no", ":number_of_agents_around_flag_team_1", ":number_of_agents_around_flag_team_2"),
  ]),
  
  #script_change_flag_owner
  # INPUT: arg1 = flag_no, arg2 = owner_code
  # OUTPUT: none
  ("change_flag_owner",
   [
     (store_script_param, ":flag_no", 1),
     (store_script_param, ":owner_code", 2),

     (try_begin),
       (lt, ":owner_code", 0),
       (val_add, ":owner_code", 1),
       (val_mul, ":owner_code", -1),
     (try_end),
  
     (store_div, ":owner_team_no", ":owner_code", 100),
     (store_mod, ":shown_flag_no", ":owner_code", 100),
  
     (store_add, ":cur_flag_slot", multi_data_flag_owner_begin, ":flag_no"),
     (troop_get_slot, ":older_owner_team_no", "trp_multiplayer_data", ":cur_flag_slot"),

     (store_add, ":cur_flag_slot", multi_data_flag_owner_begin, ":flag_no"),
     (troop_set_slot, "trp_multiplayer_data", ":cur_flag_slot", ":owner_team_no"),

     #senchronizing flag positions
     (try_begin),
       #(this_or_next|eq, ":initial_flags", 0), #moved after auto-animating
       (multiplayer_is_server),

       (scene_prop_get_instance, ":pole_id", "spr_headquarters_pole_code_only", ":flag_no"),
       (try_begin),
         (eq, ":owner_team_no", 0), #if new owner team is 0 then flags are at bottom
         (neq, ":older_owner_team_no", -1), #clients
         (assign, ":continue", 1),
         (try_begin),
           (multiplayer_is_server),
           (eq, "$g_placing_initial_flags", 1),
           (assign, ":continue", 0),
         (try_end),
         (eq, ":continue", 1),
         (prop_instance_get_position, pos0, ":pole_id"),
         (position_move_z, pos0, multi_headquarters_distance_to_change_flag),      
       (else_try),
         (prop_instance_get_position, pos0, ":pole_id"), #if new owner team is not 0 then flags are at top
         (position_move_z, pos0, multi_headquarters_pole_height),
       (try_end),
  
       (scene_prop_get_instance, ":flag_id", "$team_1_flag_scene_prop", ":flag_no"),
         (prop_instance_stop_animating, ":flag_id"),
       (prop_instance_set_position, ":flag_id", pos0),
  
       (scene_prop_get_instance, ":flag_id", "$team_2_flag_scene_prop", ":flag_no"),
         (prop_instance_stop_animating, ":flag_id"),
       (prop_instance_set_position, ":flag_id", pos0),
  
       (scene_prop_get_instance, ":flag_id", "spr_headquarters_flag_gray_code_only", ":flag_no"),
         (prop_instance_stop_animating, ":flag_id"),
       (prop_instance_set_position, ":flag_id", pos0),          
     (try_end),

     #setting visibilities of flags
     (try_begin), 
       (eq, ":shown_flag_no", 0),
       (scene_prop_get_instance, ":flag_id", "$team_1_flag_scene_prop", ":flag_no"),
       (scene_prop_set_visibility, ":flag_id", 0),
       (scene_prop_get_instance, ":flag_id", "$team_2_flag_scene_prop", ":flag_no"),
       (scene_prop_set_visibility, ":flag_id", 0),
       (scene_prop_get_instance, ":flag_id", "spr_headquarters_flag_gray_code_only", ":flag_no"),
       (scene_prop_set_visibility, ":flag_id", 1),
     (else_try),
       (eq, ":shown_flag_no", 1),
       (scene_prop_get_instance, ":flag_id", "$team_1_flag_scene_prop", ":flag_no"),
       (scene_prop_set_visibility, ":flag_id", 1),
       (scene_prop_get_instance, ":flag_id", "$team_2_flag_scene_prop", ":flag_no"),
       (scene_prop_set_visibility, ":flag_id", 0),
       (scene_prop_get_instance, ":flag_id", "spr_headquarters_flag_gray_code_only", ":flag_no"),
       (scene_prop_set_visibility, ":flag_id", 0),
     (else_try),
       (eq, ":shown_flag_no", 2),
       (scene_prop_get_instance, ":flag_id", "$team_1_flag_scene_prop", ":flag_no"),
       (scene_prop_set_visibility, ":flag_id", 0),
       (scene_prop_get_instance, ":flag_id", "$team_2_flag_scene_prop", ":flag_no"),
       (scene_prop_set_visibility, ":flag_id", 1),
       (scene_prop_get_instance, ":flag_id", "spr_headquarters_flag_gray_code_only", ":flag_no"),
       (scene_prop_set_visibility, ":flag_id", 0),
     (try_end),

     #other
     (store_add, ":cur_flag_players_around_slot", multi_data_flag_players_around_begin, ":flag_no"),
     (troop_get_slot, ":players_around_code", "trp_multiplayer_data", ":cur_flag_players_around_slot"),
 
     (store_div, ":number_of_agents_around_flag_team_1", ":players_around_code", 100),
     (store_mod, ":number_of_agents_around_flag_team_2", ":players_around_code", 100),
  
     (call_script, "script_move_headquarters_flags", ":flag_no", ":number_of_agents_around_flag_team_1", ":number_of_agents_around_flag_team_2"),
   ]),

  #script_move_object_to_nearest_entry_point
  # INPUT: none
  # OUTPUT: none
  ("move_object_to_nearest_entry_point",
   [
     (store_script_param, ":scene_prop_no", 1),

     (scene_prop_get_num_instances, ":num_instances", ":scene_prop_no"),

     (try_for_range, ":instance_no", 0, ":num_instances"),
       (scene_prop_get_instance, ":instance_id", ":scene_prop_no", ":instance_no"),
       (prop_instance_get_position, pos0, ":instance_id"),

       (assign, ":smallest_dist", -1),
       (try_for_range, ":entry_point_no", multi_entry_points_for_usable_items_start, multi_entry_points_for_usable_items_end),
         (entry_point_get_position, pos1, ":entry_point_no"),
         (get_sq_distance_between_positions, ":dist", pos0, pos1),
         (this_or_next|eq, ":smallest_dist", -1),
         (lt, ":dist", ":smallest_dist"),
         (assign, ":smallest_dist", ":dist"),
         (assign, ":nearest_entry_point", ":entry_point_no"),
       (try_end),

       (try_begin),
         (ge, ":smallest_dist", 0),
         (lt, ":smallest_dist", 22500), #max 15m distance
         (entry_point_get_position, pos1, ":nearest_entry_point"),
         (position_rotate_x, pos1, -90),
         (prop_instance_animate_to_position, ":instance_id", pos1, 1),
       (try_end),
     (try_end),
   ]),  


  #script_multiplayer_server_on_agent_spawn_common
  # INPUT: arg1 = agent_no
  # OUTPUT: none
  ("multiplayer_server_on_agent_spawn_common",
   [
     (store_script_param, ":agent_no", 1),
     (agent_set_slot, ":agent_no", slot_agent_in_duel_with, -1),
     (try_begin),
       (agent_is_non_player, ":agent_no"),
       (assign, "$g_multiplayer_ready_for_spawning_agent", 1),
	 (else_try),
	   # if player is spawning and can have squad
	   (call_script, "script_cf_multiplayer_can_buy_squad"),
	   # order squad to follow the player
	   (agent_get_player_id, ":player_team_no", ":agent_no"),
	   (set_show_messages, 0),
	   (team_give_order, ":player_team_no", grc_everyone, mordr_follow),
	   (set_show_messages, 1),
     (try_end),
     ]),

  #script_multiplayer_server_player_joined_common
  # INPUT: arg1 = player_no
  # OUTPUT: none
  ("multiplayer_server_player_joined_common",
   [
     (store_script_param, ":player_no", 1),
     (try_begin),
       (this_or_next|player_is_active, ":player_no"),
       (eq, ":player_no", 0),
       (call_script, "script_multiplayer_init_player_slots", ":player_no"),
       (store_mission_timer_a, ":player_join_time"),
       (player_set_slot, ":player_no", slot_player_join_time, ":player_join_time"),
       (player_set_slot, ":player_no", slot_player_first_spawn, 1),
       #fight and destroy only
       (player_set_slot, ":player_no", slot_player_damage_given_to_target_1, 0),
       (player_set_slot, ":player_no", slot_player_damage_given_to_target_2, 0),
       #fight and destroy only end
       (try_begin),
         (multiplayer_is_server),
         (assign, ":initial_gold", multi_initial_gold_value),
         (val_mul, ":initial_gold", "$g_multiplayer_initial_gold_multiplier"),
         (val_div, ":initial_gold", 100),
         (player_set_gold, ":player_no", ":initial_gold"),
         (call_script, "script_multiplayer_send_initial_information", ":player_no"),
       (try_end),
     (try_end),
     ]),

  #script_multiplayer_server_before_mission_start_common
  # INPUT: none
  # OUTPUT: none
  ("multiplayer_server_before_mission_start_common",
   [
   
		(display_debug_message, "@{!}multiplayer_server_before_mission_start_common"),
   
     (try_begin),
       (scene_allows_mounted_units),
       (assign, "$g_horses_are_avaliable", 1),
     (else_try),
       (assign, "$g_horses_are_avaliable", 0),
     (try_end),
     (scene_set_day_time, 15),
     (assign, "$g_multiplayer_mission_end_screen", 0),

     (get_max_players, ":num_players"),
     (try_for_range, ":player_no", 0, ":num_players"),
       (player_is_active, ":player_no"),
       (call_script, "script_multiplayer_init_player_slots", ":player_no"),
       (assign, ":initial_gold", multi_initial_gold_value),
       (val_mul, ":initial_gold", "$g_multiplayer_initial_gold_multiplier"),
       (val_div, ":initial_gold", 100),
       (player_set_gold, ":player_no", ":initial_gold"),
       (player_set_slot, ":player_no", slot_player_first_spawn, 1), #not required in siege, bt, fd
     (try_end),
	 
	 (call_script, "script_multiplayer_set_g_multiplayer_is_game_type_captain"),
     ]),

  #script_multiplayer_server_on_agent_killed_or_wounded_common
  # INPUT: arg1 = dead_agent_no, arg2 = killer_agent_no
  # OUTPUT: none
  ("multiplayer_server_on_agent_killed_or_wounded_common",
   [
     (store_script_param, ":dead_agent_no", 1),
     (store_script_param, ":killer_agent_no", 2),

     (call_script, "script_multiplayer_event_agent_killed_or_wounded", ":dead_agent_no", ":killer_agent_no"),
     #adding 1 score points to agent which kills enemy agent at server
     (try_begin),
       (multiplayer_is_server),
       (try_begin), #killing myself because of some reason (friend hit, fall, team change)
         (lt, ":killer_agent_no", 0),
         (ge, ":dead_agent_no", 0),
         (neg|agent_is_non_player, ":dead_agent_no"),
         (agent_get_player_id, ":dead_agent_player_id", ":dead_agent_no"),
         (player_is_active, ":dead_agent_player_id"),
         (player_get_score, ":dead_agent_player_score", ":dead_agent_player_id"),
         (val_add, ":dead_agent_player_score", -1),
         (player_set_score, ":dead_agent_player_id", ":dead_agent_player_score"),
       (else_try), #killing teammate
         (ge, ":killer_agent_no", 0),
         (ge, ":dead_agent_no", 0),
         (agent_get_team, ":killer_team_no", ":killer_agent_no"),
         (agent_get_team, ":dead_team_no", ":dead_agent_no"),
         (eq, ":killer_team_no", ":dead_team_no"),
         (neg|agent_is_non_player, ":killer_agent_no"),
         (agent_get_player_id, ":killer_agent_player_id", ":killer_agent_no"),
         (player_is_active, ":killer_agent_player_id"),
         (player_get_score, ":killer_agent_player_score", ":killer_agent_player_id"),
         (val_add, ":killer_agent_player_score", -1),
         (player_set_score, ":killer_agent_player_id", ":killer_agent_player_score"),
         #(player_get_kill_count, ":killer_agent_player_kill_count", ":killer_agent_player_id"),
         #(val_add, ":killer_agent_player_kill_count", -2),
         #(player_set_kill_count, ":killer_agent_player_id", ":killer_agent_player_kill_count"),
       (else_try), #killing enemy
         (ge, ":killer_agent_no", 0),
         (ge, ":dead_agent_no", 0),
         (agent_is_human, ":dead_agent_no"),
         (agent_is_human, ":killer_agent_no"),
         (try_begin),
           (eq, "$g_multiplayer_game_type", multiplayer_game_type_battle),
           (try_begin),
             (eq, "$g_battle_death_mode_started", 1),
             (neq, ":dead_agent_no", ":killer_agent_no"),
             (call_script, "script_calculate_new_death_waiting_time_at_death_mod"),
           (try_end),
         (try_end),
         (try_begin),
           (eq, "$g_multiplayer_game_type", multiplayer_game_type_captain_battle),
           (try_begin),
             (eq, "$g_battle_death_mode_started", 1),
             (neq, ":dead_agent_no", ":killer_agent_no"),
             (call_script, "script_calculate_new_death_waiting_time_at_death_mod"),
           (try_end),
         (try_end),
         (try_begin),
##           (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_battle),
##           (eq, "$g_multiplayer_game_type", multiplayer_game_type_destroy),
           (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_battle),
           (eq, "$g_multiplayer_game_type", multiplayer_game_type_captain_battle),
           (agent_get_player_id, ":dead_player_no", ":dead_agent_no"),
           (try_begin),
             (ge, ":dead_player_no", 0),
             (player_is_active, ":dead_player_no"),
             (neg|agent_is_non_player, ":dead_agent_no"),         
             (try_for_agents, ":cur_agent"),
               (agent_is_non_player, ":cur_agent"),
               (agent_is_human, ":cur_agent"),
               (agent_is_alive, ":cur_agent"),
               (agent_get_group, ":agent_group", ":cur_agent"),
               (try_begin),
                 (eq, ":dead_player_no", ":agent_group"),
                 (agent_set_group, ":cur_agent", -1),                 
               (try_end),
             (try_end),
           (try_end),
         (try_end),
         (neg|agent_is_non_player, ":killer_agent_no"),
         (agent_get_player_id, ":killer_agent_player_id", ":killer_agent_no"),
         (player_is_active, ":killer_agent_player_id"),
         (player_get_score, ":killer_agent_player_score", ":killer_agent_player_id"),
         (agent_get_team, ":killer_agent_team", ":killer_agent_no"),
         (agent_get_team, ":dead_agent_team", ":dead_agent_no"),
         (try_begin),
           (neq, ":killer_agent_team", ":dead_agent_team"),
           (val_add, ":killer_agent_player_score", 1),
         (else_try),
           (val_add, ":killer_agent_player_score", -1),
         (try_end),
         (player_set_score, ":killer_agent_player_id", ":killer_agent_player_score"),
       (try_end),
     (try_end),
	 
	 (try_begin),
	   # if its captain mode and player is dead
	   (eq, "$g_multiplayer_is_game_type_captain", 1),
	   (ge, ":dead_agent_no", 0),
	   (neg|agent_is_non_player, ":dead_agent_no"),
	   # then reset his squad's orders
	   (agent_get_team, ":dead_team_no", ":dead_agent_no"),
	   (agent_get_player_id, ":dead_player_no", ":dead_agent_no"),
	   (player_is_active, ":dead_player_no"),
	   (set_show_messages, 0),
	   (team_give_order, ":dead_player_no", grc_everyone, mordr_charge),
	   (team_give_order, ":dead_player_no", grc_everyone, mordr_fire_at_will),
	   (team_give_order, ":dead_player_no", grc_everyone, mordr_use_any_weapon),
	   (team_give_order, ":dead_player_no", grc_everyone, mordr_form_2_row),
	   (set_show_messages, 1),
	 (try_end),

     (call_script, "script_add_kill_death_counts", ":killer_agent_no", ":dead_agent_no"),
     #money management
     (call_script, "script_money_management_after_agent_death", ":killer_agent_no", ":dead_agent_no"),
     ]),

	 
  #script_multiplayer_close_gate_if_it_is_open
  # INPUT: none
  # OUTPUT: none
  ("multiplayer_close_gate_if_it_is_open",
   [
     (scene_prop_get_num_instances, ":num_instances_of_scene_prop", "spr_winch_b"),
     (try_for_range, ":cur_prop_instance", 0, ":num_instances_of_scene_prop"),
       (scene_prop_get_instance, ":prop_instance_id", "spr_winch_b", ":cur_prop_instance"),
       (scene_prop_slot_eq, ":prop_instance_id", scene_prop_open_or_close_slot, 1),
       (scene_prop_get_instance, ":effected_object_instance_id", "spr_portcullis", ":cur_prop_instance"),
       (prop_instance_get_starting_position, pos0, ":effected_object_instance_id"),      
       (prop_instance_animate_to_position, ":effected_object_instance_id", pos0, 1),
     (try_end),
   ]),  

  #script_multiplayer_move_moveable_objects_initial_positions
  # INPUT: none
  # OUTPUT: none
  ("multiplayer_move_moveable_objects_initial_positions",
   [
     (call_script, "script_move_object_to_nearest_entry_point", "spr_siege_ladder_move_6m"),
     (call_script, "script_move_object_to_nearest_entry_point", "spr_siege_ladder_move_8m"),
     (call_script, "script_move_object_to_nearest_entry_point", "spr_siege_ladder_move_10m"),
     (call_script, "script_move_object_to_nearest_entry_point", "spr_siege_ladder_move_12m"),
     (call_script, "script_move_object_to_nearest_entry_point", "spr_siege_ladder_move_14m"),
   ]),

  #script_move_belfries_to_their_first_entry_point
  # INPUT: none
  # OUTPUT: none
  ("move_belfries_to_their_first_entry_point",
   [
    (store_script_param, ":belfry_body_scene_prop", 1),
     
    (set_fixed_point_multiplier, 100),    
    (scene_prop_get_num_instances, ":num_belfries", ":belfry_body_scene_prop"),
    
    (try_for_range, ":belfry_no", 0, ":num_belfries"),
      #belfry 
      (scene_prop_get_instance, ":belfry_scene_prop_id", ":belfry_body_scene_prop", ":belfry_no"),
      (prop_instance_get_position, pos0, ":belfry_scene_prop_id"),

      (try_begin),
        (eq, ":belfry_body_scene_prop", "spr_belfry_a"),
        #belfry platform_a
        (scene_prop_get_instance, ":belfry_platform_a_scene_prop_id", "spr_belfry_platform_a", ":belfry_no"),
        #belfry platform_b
        (scene_prop_get_instance, ":belfry_platform_b_scene_prop_id", "spr_belfry_platform_b", ":belfry_no"),
      (else_try),
        #belfry platform_a
        (scene_prop_get_instance, ":belfry_platform_a_scene_prop_id", "spr_belfry_b_platform_a", ":belfry_no"),
      (try_end),
    
      #belfry wheel_1
      (store_mul, ":wheel_no", ":belfry_no", 3),
      (try_begin),
        (eq, ":belfry_body_scene_prop", "spr_belfry_b"),
        (scene_prop_get_num_instances, ":number_of_belfry_a", "spr_belfry_a"),    
        (store_mul, ":number_of_belfry_a_wheels", ":number_of_belfry_a", 3),
        (val_add, ":wheel_no", ":number_of_belfry_a_wheels"),
      (try_end),    
      (scene_prop_get_instance, ":belfry_wheel_1_scene_prop_id", "spr_belfry_wheel", ":wheel_no"),
      #belfry wheel_2
      (val_add, ":wheel_no", 1),
      (scene_prop_get_instance, ":belfry_wheel_2_scene_prop_id", "spr_belfry_wheel", ":wheel_no"),
      #belfry wheel_3
      (val_add, ":wheel_no", 1),
      (scene_prop_get_instance, ":belfry_wheel_3_scene_prop_id", "spr_belfry_wheel", ":wheel_no"),

      (store_add, ":belfry_first_entry_point_id", 11, ":belfry_no"), #belfry entry points are 110..119 and 120..129 and 130..139
      (try_begin),
        (eq, ":belfry_body_scene_prop", "spr_belfry_b"),
        (scene_prop_get_num_instances, ":number_of_belfry_a", "spr_belfry_a"),
        (val_add, ":belfry_first_entry_point_id", ":number_of_belfry_a"),
      (try_end),    
      (val_mul, ":belfry_first_entry_point_id", 10),
      (entry_point_get_position, pos1, ":belfry_first_entry_point_id"),

      #this code block is taken from module_mission_templates.py (multiplayer_server_check_belfry_movement)
      #up down rotation of belfry's next entry point
      (init_position, pos9),
      (position_set_y, pos9, -500), #go 5.0 meters back
      (position_set_x, pos9, -300), #go 3.0 meters left
      (position_transform_position_to_parent, pos10, pos1, pos9), 
      (position_get_distance_to_terrain, ":height_to_terrain_1", pos10), #learn distance between 5 meters back of entry point(pos10) and ground level at left part of belfry

      (init_position, pos9),
      (position_set_y, pos9, -500), #go 5.0 meters back
      (position_set_x, pos9, 300), #go 3.0 meters right
      (position_transform_position_to_parent, pos10, pos1, pos9), 
      (position_get_distance_to_terrain, ":height_to_terrain_2", pos10), #learn distance between 5 meters back of entry point(pos10) and ground level at right part of belfry

      (store_add, ":height_to_terrain", ":height_to_terrain_1", ":height_to_terrain_2"),
      (val_mul, ":height_to_terrain", 100), #because of fixed point multiplier

      (store_div, ":rotate_angle_of_next_entry_point", ":height_to_terrain", 24), #if there is 1 meters of distance (100cm) then next target position will rotate by 2 degrees. #ac sonra
      (init_position, pos20),    
      (position_rotate_x_floating, pos20, ":rotate_angle_of_next_entry_point"),
      (position_transform_position_to_parent, pos23, pos1, pos20),

      #right left rotation of belfry's next entry point
      (init_position, pos9),
      (position_set_x, pos9, -300), #go 3.0 meters left
      (position_transform_position_to_parent, pos10, pos1, pos9), #applying 3.0 meters in -x to position of next entry point target, final result is in pos10
      (position_get_distance_to_terrain, ":height_to_terrain_at_left", pos10), #learn distance between 3.0 meters left of entry point(pos10) and ground level
      (init_position, pos9),
      (position_set_x, pos9, 300), #go 3.0 meters left
      (position_transform_position_to_parent, pos10, pos1, pos9), #applying 3.0 meters in x to position of next entry point target, final result is in pos10
      (position_get_distance_to_terrain, ":height_to_terrain_at_right", pos10), #learn distance between 3.0 meters right of entry point(pos10) and ground level
      (store_sub, ":height_to_terrain_1", ":height_to_terrain_at_left", ":height_to_terrain_at_right"),

      (init_position, pos9),
      (position_set_x, pos9, -300), #go 3.0 meters left
      (position_set_y, pos9, -500), #go 5.0 meters forward
      (position_transform_position_to_parent, pos10, pos1, pos9), #applying 3.0 meters in -x to position of next entry point target, final result is in pos10
      (position_get_distance_to_terrain, ":height_to_terrain_at_left", pos10), #learn distance between 3.0 meters left of entry point(pos10) and ground level
      (init_position, pos9),
      (position_set_x, pos9, 300), #go 3.0 meters left
      (position_set_y, pos9, -500), #go 5.0 meters forward
      (position_transform_position_to_parent, pos10, pos1, pos9), #applying 3.0 meters in x to position of next entry point target, final result is in pos10
      (position_get_distance_to_terrain, ":height_to_terrain_at_right", pos10), #learn distance between 3.0 meters right of entry point(pos10) and ground level
      (store_sub, ":height_to_terrain_2", ":height_to_terrain_at_left", ":height_to_terrain_at_right"),

      (store_add, ":height_to_terrain", ":height_to_terrain_1", ":height_to_terrain_2"),    
      (val_mul, ":height_to_terrain", 100), #100 is because of fixed_point_multiplier
      (store_div, ":rotate_angle_of_next_entry_point", ":height_to_terrain", 24), #if there is 1 meters of distance (100cm) then next target position will rotate by 25 degrees. 
      (val_mul, ":rotate_angle_of_next_entry_point", -1),

      (init_position, pos20),
      (position_rotate_y_floating, pos20, ":rotate_angle_of_next_entry_point"),
      (position_transform_position_to_parent, pos22, pos23, pos20),

      (copy_position, pos1, pos22),
      #end of code block

      #belfry 
      (prop_instance_stop_animating, ":belfry_scene_prop_id"),
      (prop_instance_set_position, ":belfry_scene_prop_id", pos1),
    
      #belfry platforms
      (try_begin),
        (eq, ":belfry_body_scene_prop", "spr_belfry_a"),

        #belfry platform_a
        (prop_instance_get_position, pos6, ":belfry_platform_a_scene_prop_id"),
        (position_transform_position_to_local, pos7, pos0, pos6),
        (position_transform_position_to_parent, pos8, pos1, pos7),
        (try_begin),
          (neg|scene_prop_slot_eq, ":belfry_scene_prop_id", scene_prop_belfry_platform_moved, 0),
     
          (init_position, pos20),
          (position_rotate_x, pos20, 90),
          (position_transform_position_to_parent, pos8, pos8, pos20),
        (try_end),
        (prop_instance_stop_animating, ":belfry_platform_a_scene_prop_id"),
        (prop_instance_set_position, ":belfry_platform_a_scene_prop_id", pos8),    
        #belfry platform_b
        (prop_instance_get_position, pos6, ":belfry_platform_b_scene_prop_id"),
        (position_transform_position_to_local, pos7, pos0, pos6),
        (position_transform_position_to_parent, pos8, pos1, pos7),
        (prop_instance_stop_animating, ":belfry_platform_b_scene_prop_id"),
        (prop_instance_set_position, ":belfry_platform_b_scene_prop_id", pos8),
      (else_try),
        #belfry platform_a
        (prop_instance_get_position, pos6, ":belfry_platform_a_scene_prop_id"),
        (position_transform_position_to_local, pos7, pos0, pos6),
        (position_transform_position_to_parent, pos8, pos1, pos7),
        (try_begin),
          (neg|scene_prop_slot_eq, ":belfry_scene_prop_id", scene_prop_belfry_platform_moved, 0),
     
          (init_position, pos20),
          (position_rotate_x, pos20, 50),
          (position_transform_position_to_parent, pos8, pos8, pos20),
        (try_end),
        (prop_instance_stop_animating, ":belfry_platform_a_scene_prop_id"),
        (prop_instance_set_position, ":belfry_platform_a_scene_prop_id", pos8),    
      (try_end),
    
      #belfry wheel_1
      (store_mul, ":wheel_no", ":belfry_no", 3),
      (try_begin),
        (eq, ":belfry_body_scene_prop", "spr_belfry_b"),
        (scene_prop_get_num_instances, ":number_of_belfry_a", "spr_belfry_a"),    
        (store_mul, ":number_of_belfry_a_wheels", ":number_of_belfry_a", 3),
        (val_add, ":wheel_no", ":number_of_belfry_a_wheels"),
      (try_end),
      (prop_instance_get_position, pos6, ":belfry_wheel_1_scene_prop_id"),
      (position_transform_position_to_local, pos7, pos0, pos6),
      (position_transform_position_to_parent, pos8, pos1, pos7),
      (prop_instance_stop_animating, ":belfry_wheel_1_scene_prop_id"),
      (prop_instance_set_position, ":belfry_wheel_1_scene_prop_id", pos8),
      #belfry wheel_2
      (prop_instance_get_position, pos6, ":belfry_wheel_2_scene_prop_id"),
      (position_transform_position_to_local, pos7, pos0, pos6),
      (position_transform_position_to_parent, pos8, pos1, pos7),
      (prop_instance_stop_animating, ":belfry_wheel_2_scene_prop_id"),
      (prop_instance_set_position, ":belfry_wheel_2_scene_prop_id", pos8),
      #belfry wheel_3
      (prop_instance_get_position, pos6, ":belfry_wheel_3_scene_prop_id"),
      (position_transform_position_to_local, pos7, pos0, pos6),
      (position_transform_position_to_parent, pos8, pos1, pos7),
      (prop_instance_stop_animating, ":belfry_wheel_3_scene_prop_id"),
      (prop_instance_set_position, ":belfry_wheel_3_scene_prop_id", pos8),
    (try_end),
    ]),

  #script_team_set_score
  # INPUT: arg1 = team_no, arg2 = score
  # OUTPUT: none
  ("team_set_score",
   [
     (store_script_param, ":team_no", 1),
     (store_script_param, ":score", 2),
     
     (team_set_score, ":team_no", ":score"),
   ]),

  #script_player_set_score
  # INPUT: arg1 = player_no, arg2 = score
  # OUTPUT: none
  ("player_set_score",
   [
     (store_script_param, ":player_no", 1),
     (store_script_param, ":score", 2),
     
     (player_set_score, ":player_no", ":score"),
   ]),

  #script_player_set_kill_count
  # INPUT: arg1 = player_no, arg2 = score
  # OUTPUT: none
  ("player_set_kill_count",
   [
     (store_script_param, ":player_no", 1),
     (store_script_param, ":score", 2),
     
     (player_set_kill_count, ":player_no", ":score"),
   ]),

  #script_player_set_death_count
  # INPUT: arg1 = player_no, arg2 = score
  # OUTPUT: none
  ("player_set_death_count",
   [
     (store_script_param, ":player_no", 1),
     (store_script_param, ":score", 2),
     
     (player_set_death_count, ":player_no", ":score"),
   ]),

  #script_set_attached_scene_prop
  # INPUT: arg1 = agent_id, arg2 = flag_id
  # OUTPUT: none
  ("set_attached_scene_prop",
   [
     (store_script_param, ":agent_id", 1),
     (store_script_param, ":flag_id", 2),

     (try_begin), #if current mod is capture the flag and attached scene prop is flag then change flag situation of flag owner team.
       (scene_prop_get_instance, ":red_flag_id", "spr_tutorial_flag_red", 0),
       (scene_prop_get_instance, ":blue_flag_id", "spr_tutorial_flag_blue", 0),
       (assign, ":flag_owner_team", -1),
       (try_begin),
         (ge, ":red_flag_id", 0),
         (eq, ":flag_id", ":red_flag_id"),
         (assign, ":flag_owner_team", 0),
       (else_try),
         (ge, ":blue_flag_id", 0),
         (eq, ":flag_id", ":blue_flag_id"),
         (assign, ":flag_owner_team", 1),
       (try_end),
       (ge, ":flag_owner_team", 0),
       (team_set_slot, ":flag_owner_team", slot_team_flag_situation, 1), #1-stolen flag
     (try_end),
        
     (agent_set_attached_scene_prop, ":agent_id", ":flag_id"),
     (agent_set_attached_scene_prop_x, ":agent_id", 20),
     (agent_set_attached_scene_prop_z, ":agent_id", 50),
   ]),  

  #script_set_team_flag_situation
  # INPUT: arg1 = team_no, arg2 = score
  # OUTPUT: none
  ("set_team_flag_situation",
   [
     (store_script_param, ":team_no", 1),
     (store_script_param, ":flag_situation", 2),

     (team_set_slot, ":team_no", slot_team_flag_situation, ":flag_situation"),
   ]),

  #script_start_death_mode
  # INPUT: none
  # OUTPUT: none
  ("start_death_mode",
   [
     (assign, "$g_multiplayer_message_type", multiplayer_message_type_start_death_mode),
     (start_presentation, "prsnt_multiplayer_message_1"),
   ]),

  #script_calculate_new_death_waiting_time_at_death_mod
  # INPUT: none
  # OUTPUT: none
  ("calculate_new_death_waiting_time_at_death_mod",
   [
     (assign, ":num_living_players", 0), #count number of living players to find out death wait time
     (try_begin),
       (try_for_agents, ":agent_no"),
         (agent_is_human, ":agent_no"),
         (agent_is_alive, ":agent_no"),
         (val_add, ":num_living_players", 1),
       (try_end),
     (try_end),

     (val_add, ":num_living_players", multiplayer_battle_formula_value_a),
     (set_fixed_point_multiplier, 100),
     (store_mul, ":num_living_players", ":num_living_players", 100),
     (store_sqrt, ":sqrt_num_living_players", ":num_living_players"),
     (store_div, "$g_battle_waiting_seconds", multiplayer_battle_formula_value_b, ":sqrt_num_living_players"),
     (store_mission_timer_a, "$g_death_mode_part_1_start_time"),
   ]),
  
  #script_calculate_number_of_targets_destroyed
  # INPUT: none
  # OUTPUT: none

  ("calculate_number_of_targets_destroyed",
   [
    # (assign, "$g_number_of_targets_destroyed", 0),
    # (scene_prop_get_num_instances, ":num_instances_of_scene_prop", "spr_catapult_destructible"),
    # (try_for_range, ":cur_instance", 0, ":num_instances_of_scene_prop"),
    #   (scene_prop_get_instance, ":cur_instance_id", "spr_catapult_destructible", ":cur_instance"),
    #   (prop_instance_get_starting_position, pos0, ":cur_instance_id"),
    #   (prop_instance_get_position, pos1, ":cur_instance_id"),
    #   (get_sq_distance_between_positions_in_meters, ":dist", pos0, pos1),
    #   (gt, ":dist", 2), #this can be 0 or 1 too.
    #   (val_add, "$g_number_of_targets_destroyed", 1),
    # (try_end),    
#
    # (scene_prop_get_num_instances, ":num_instances_of_scene_prop", "spr_trebuchet_destructible"),     
    # (try_for_range, ":cur_instance", 0, ":num_instances_of_scene_prop"),
    #   (scene_prop_get_instance, ":cur_instance_id", "spr_trebuchet_destructible", ":cur_instance"),
    #   (prop_instance_get_starting_position, pos0, ":cur_instance_id"),
    #   (prop_instance_get_position, pos1, ":cur_instance_id"),
    #   (get_sq_distance_between_positions_in_meters, ":dist", pos0, pos1),
    #   (gt, ":dist", 2), #this can be 0 or 1 too.
    #   (val_add, "$g_number_of_targets_destroyed", 1),
    # (try_end),    
     ]),

  #script_initialize_objects
  # INPUT: none
  # OUTPUT: none
  ("initialize_objects",
   [
     (assign, ":number_of_players", 0),
     (get_max_players, ":num_players"),
     (try_for_range, ":player_no", 0, ":num_players"),
       (player_is_active, ":player_no"),
       (val_add, ":number_of_players", 1),
     (try_end),

     #1 player = (Sqrt(1) - 1) * 200 + 1200 = 1200, 1800 (minimum)
     #4 player = (Sqrt(4) - 1) * 200 + 1200 = 1400, 2100
     #9 player = (Sqrt(9) - 1) * 200 + 1200 = 1600, 2400
     #16 player = (Sqrt(16) - 1) * 200 + 1200 = 1800, 2700 (general used)
     #25 player = (Sqrt(25) - 1) * 200 + 1200 = 2000, 3000 (average)
     #36 player = (Sqrt(36) - 1) * 200 + 1200 = 2200, 3300
     #49 player = (Sqrt(49) - 1) * 200 + 1200 = 2400, 3600
     #64 player = (Sqrt(49) - 1) * 200 + 1200 = 2600, 3900

     (set_fixed_point_multiplier, 100),
     (val_mul, ":number_of_players", 100),
     (store_sqrt, ":number_of_players", ":number_of_players"),
     (val_sub, ":number_of_players", 100),
     (val_max, ":number_of_players", 0),
     (store_mul, ":effect_of_number_of_players", ":number_of_players", 2),
     (store_add, ":health_catapult", multi_minimum_target_health, ":effect_of_number_of_players"),     
     (store_mul, ":health_trebuchet", ":health_catapult", 15), #trebuchet's health is 1.5x of catapult's     
     (val_div, ":health_trebuchet", 10),
     (store_mul, ":health_sally_door", ":health_catapult", 18), #sally door's health is 1.8x of catapult's     
     (val_div, ":health_sally_door", 10),
     (store_mul, ":health_sally_door_double", ":health_sally_door", 2),

     (assign, "$g_number_of_targets_destroyed", 0),
     
     (scene_prop_get_num_instances, ":num_instances_of_scene_prop", "spr_catapult_destructible"),
     (try_for_range, ":cur_instance", 0, ":num_instances_of_scene_prop"),
       (scene_prop_get_instance, ":cur_instance_id", "spr_catapult_destructible", ":cur_instance"),     
       (prop_instance_get_starting_position, pos0, ":cur_instance_id"),
       (prop_instance_stop_animating, ":cur_instance_id"),
       (prop_instance_set_position, ":cur_instance_id", pos0),
       (prop_instance_enable_physics, ":cur_instance_id", 1),
       (scene_prop_set_hit_points, ":cur_instance_id", ":health_catapult"),
     (try_end),    

     (scene_prop_get_num_instances, ":num_instances_of_scene_prop", "spr_trebuchet_destructible"),     
     (try_for_range, ":cur_instance", 0, ":num_instances_of_scene_prop"),
       (scene_prop_get_instance, ":cur_instance_id", "spr_trebuchet_destructible", ":cur_instance"),
       (prop_instance_get_starting_position, pos0, ":cur_instance_id"),
       (prop_instance_stop_animating, ":cur_instance_id"),
       (prop_instance_set_position, ":cur_instance_id", pos0),
       (prop_instance_enable_physics, ":cur_instance_id", 1),
       (scene_prop_set_hit_points, ":cur_instance_id", ":health_trebuchet"),
     (try_end),

     (scene_prop_get_num_instances, ":num_instances_of_scene_prop", "spr_castle_e_sally_door_a"),     
     (try_for_range, ":cur_instance", 0, ":num_instances_of_scene_prop"),
       (scene_prop_get_instance, ":cur_instance_id", "spr_castle_e_sally_door_a", ":cur_instance"),
       (prop_instance_get_starting_position, pos0, ":cur_instance_id"),
       (prop_instance_stop_animating, ":cur_instance_id"),
       (prop_instance_set_position, ":cur_instance_id", pos0),
       (prop_instance_enable_physics, ":cur_instance_id", 1),
       (scene_prop_set_hit_points, ":cur_instance_id", ":health_sally_door"),
     (try_end),
     
     (scene_prop_get_num_instances, ":num_instances_of_scene_prop", "spr_castle_f_sally_door_a"),     
     (try_for_range, ":cur_instance", 0, ":num_instances_of_scene_prop"),
       (scene_prop_get_instance, ":cur_instance_id", "spr_castle_f_sally_door_a", ":cur_instance"),
       (prop_instance_get_starting_position, pos0, ":cur_instance_id"),
       (prop_instance_stop_animating, ":cur_instance_id"),
       (prop_instance_set_position, ":cur_instance_id", pos0),
       (prop_instance_enable_physics, ":cur_instance_id", 1),
       (scene_prop_set_hit_points, ":cur_instance_id", ":health_sally_door"),
     (try_end),

     (scene_prop_get_num_instances, ":num_instances_of_scene_prop", "spr_earth_sally_gate_left"),     
     (try_for_range, ":cur_instance", 0, ":num_instances_of_scene_prop"),
       (scene_prop_get_instance, ":cur_instance_id", "spr_earth_sally_gate_left", ":cur_instance"),
       (prop_instance_get_starting_position, pos0, ":cur_instance_id"),
       (prop_instance_stop_animating, ":cur_instance_id"),
       (prop_instance_set_position, ":cur_instance_id", pos0),
       (prop_instance_enable_physics, ":cur_instance_id", 1),
       (scene_prop_set_hit_points, ":cur_instance_id", ":health_sally_door_double"),
     (try_end),

     (scene_prop_get_num_instances, ":num_instances_of_scene_prop", "spr_earth_sally_gate_right"),     
     (try_for_range, ":cur_instance", 0, ":num_instances_of_scene_prop"),
       (scene_prop_get_instance, ":cur_instance_id", "spr_earth_sally_gate_right", ":cur_instance"),
       (prop_instance_get_starting_position, pos0, ":cur_instance_id"),
       (prop_instance_stop_animating, ":cur_instance_id"),
       (prop_instance_set_position, ":cur_instance_id", pos0),
       (prop_instance_enable_physics, ":cur_instance_id", 1),
       (scene_prop_set_hit_points, ":cur_instance_id", ":health_sally_door_double"),
     (try_end),

     (scene_prop_get_num_instances, ":num_instances_of_scene_prop", "spr_viking_keep_destroy_sally_door_left"),     
     (try_for_range, ":cur_instance", 0, ":num_instances_of_scene_prop"),
       (scene_prop_get_instance, ":cur_instance_id", "spr_viking_keep_destroy_sally_door_left", ":cur_instance"),
       (prop_instance_get_starting_position, pos0, ":cur_instance_id"),
       (prop_instance_stop_animating, ":cur_instance_id"),
       (prop_instance_set_position, ":cur_instance_id", pos0),
       (prop_instance_enable_physics, ":cur_instance_id", 1),
       (scene_prop_set_hit_points, ":cur_instance_id", ":health_sally_door"),
     (try_end),     

     (scene_prop_get_num_instances, ":num_instances_of_scene_prop", "spr_viking_keep_destroy_sally_door_right"),     
     (try_for_range, ":cur_instance", 0, ":num_instances_of_scene_prop"),
       (scene_prop_get_instance, ":cur_instance_id", "spr_viking_keep_destroy_sally_door_right", ":cur_instance"),
       (prop_instance_get_starting_position, pos0, ":cur_instance_id"),
       (prop_instance_stop_animating, ":cur_instance_id"),
       (prop_instance_set_position, ":cur_instance_id", pos0),
       (prop_instance_enable_physics, ":cur_instance_id", 1),
       (scene_prop_set_hit_points, ":cur_instance_id", ":health_sally_door"),
     (try_end),     

     (store_div, ":health_sally_door_div_3", ":health_sally_door", 3),

     (scene_prop_get_num_instances, ":num_instances_of_scene_prop", "spr_castle_f_door_a"),     
     (try_for_range, ":cur_instance", 0, ":num_instances_of_scene_prop"),
       (scene_prop_get_instance, ":cur_instance_id", "spr_castle_f_door_a", ":cur_instance"),
       (prop_instance_get_starting_position, pos0, ":cur_instance_id"),
       (prop_instance_stop_animating, ":cur_instance_id"),
       (prop_instance_set_position, ":cur_instance_id", pos0),
       (prop_instance_enable_physics, ":cur_instance_id", 1),
       (scene_prop_set_hit_points, ":cur_instance_id", ":health_sally_door_div_3"),
     (try_end),     

     (scene_prop_get_num_instances, ":num_instances_of_scene_prop", "spr_castle_f_door_b"),     
     (try_for_range, ":cur_instance", 0, ":num_instances_of_scene_prop"),
       (scene_prop_get_instance, ":cur_instance_id", "spr_castle_f_door_b", ":cur_instance"),
       (prop_instance_get_starting_position, pos0, ":cur_instance_id"),
       (prop_instance_stop_animating, ":cur_instance_id"),
       (prop_instance_set_position, ":cur_instance_id", pos0),
       (prop_instance_enable_physics, ":cur_instance_id", 1),
       (scene_prop_set_hit_points, ":cur_instance_id", ":health_sally_door_div_3"),
     (try_end),     
     ]),
  
  #script_initialize_objects_clients
  # INPUT: none
  # OUTPUT: none
  ("initialize_objects_clients",
   [
     (assign, ":number_of_players", 0),
     (get_max_players, ":num_players"),
     (try_for_range, ":player_no", 0, ":num_players"),
       (player_is_active, ":player_no"),
       (val_add, ":number_of_players", 1),
     (try_end),

     #1 player = (Sqrt(1) - 1) * 200 + 1200 = 1200, 1800 (minimum)
     #4 player = (Sqrt(4) - 1) * 200 + 1200 = 1400, 2100
     #9 player = (Sqrt(9) - 1) * 200 + 1200 = 1600, 2400
     #16 player = (Sqrt(16) - 1) * 200 + 1200 = 1800, 2700 (general used)
     #25 player = (Sqrt(25) - 1) * 200 + 1200 = 2000, 3000 (average)
     #36 player = (Sqrt(36) - 1) * 200 + 1200 = 2200, 3300
     #49 player = (Sqrt(49) - 1) * 200 + 1200 = 2400, 3600
     #64 player = (Sqrt(49) - 1) * 200 + 1200 = 2600, 3900

     (set_fixed_point_multiplier, 100),
     (val_mul, ":number_of_players", 100),
     (store_sqrt, ":number_of_players", ":number_of_players"),
     (val_sub, ":number_of_players", 100),
     (val_max, ":number_of_players", 0),
     (store_mul, ":effect_of_number_of_players", ":number_of_players", 2),
     (store_add, ":health_catapult", multi_minimum_target_health, ":effect_of_number_of_players"),     
     (store_mul, ":health_trebuchet", ":health_catapult", 15), #trebuchet's health is 1.5x of catapult's
     (val_div, ":health_trebuchet", 10),
     (store_mul, ":health_sally_door", ":health_catapult", 18), #trebuchet's health is 1.8x of trebuchet's
     (val_div, ":health_sally_door", 10),
     (store_mul, ":health_sally_door_double", ":health_sally_door", 2),

     (assign, "$g_number_of_targets_destroyed", 0),
     
     (scene_prop_get_num_instances, ":num_instances_of_scene_prop", "spr_catapult_destructible"),
     (try_for_range, ":cur_instance", 0, ":num_instances_of_scene_prop"),
       (scene_prop_get_instance, ":cur_instance_id", "spr_catapult_destructible", ":cur_instance"),     
       (prop_instance_enable_physics, ":cur_instance_id", 1),
       (scene_prop_set_hit_points, ":cur_instance_id", ":health_catapult"),
     (try_end),    

     (scene_prop_get_num_instances, ":num_instances_of_scene_prop", "spr_trebuchet_destructible"),     
     (try_for_range, ":cur_instance", 0, ":num_instances_of_scene_prop"),
       (scene_prop_get_instance, ":cur_instance_id", "spr_trebuchet_destructible", ":cur_instance"),
       (prop_instance_enable_physics, ":cur_instance_id", 1),
       (scene_prop_set_hit_points, ":cur_instance_id", ":health_trebuchet"),
     (try_end),

     (scene_prop_get_num_instances, ":num_instances_of_scene_prop", "spr_castle_e_sally_door_a"),     
     (try_for_range, ":cur_instance", 0, ":num_instances_of_scene_prop"),
       (scene_prop_get_instance, ":cur_instance_id", "spr_castle_e_sally_door_a", ":cur_instance"),
       (prop_instance_enable_physics, ":cur_instance_id", 1),
       (scene_prop_set_hit_points, ":cur_instance_id", ":health_sally_door"),
     (try_end),
     
     (scene_prop_get_num_instances, ":num_instances_of_scene_prop", "spr_castle_f_sally_door_a"),     
     (try_for_range, ":cur_instance", 0, ":num_instances_of_scene_prop"),
       (scene_prop_get_instance, ":cur_instance_id", "spr_castle_f_sally_door_a", ":cur_instance"),
       (prop_instance_enable_physics, ":cur_instance_id", 1),
       (scene_prop_set_hit_points, ":cur_instance_id", ":health_sally_door"),
     (try_end),

     (scene_prop_get_num_instances, ":num_instances_of_scene_prop", "spr_earth_sally_gate_left"),     
     (try_for_range, ":cur_instance", 0, ":num_instances_of_scene_prop"),
       (scene_prop_get_instance, ":cur_instance_id", "spr_earth_sally_gate_left", ":cur_instance"),
       (prop_instance_enable_physics, ":cur_instance_id", 1),
       (scene_prop_set_hit_points, ":cur_instance_id", ":health_sally_door_double"),
     (try_end),

     (scene_prop_get_num_instances, ":num_instances_of_scene_prop", "spr_earth_sally_gate_right"),     
     (try_for_range, ":cur_instance", 0, ":num_instances_of_scene_prop"),
       (scene_prop_get_instance, ":cur_instance_id", "spr_earth_sally_gate_right", ":cur_instance"),
       (prop_instance_enable_physics, ":cur_instance_id", 1),
       (scene_prop_set_hit_points, ":cur_instance_id", ":health_sally_door_double"),
     (try_end),

     (scene_prop_get_num_instances, ":num_instances_of_scene_prop", "spr_viking_keep_destroy_sally_door_left"),     
     (try_for_range, ":cur_instance", 0, ":num_instances_of_scene_prop"),
       (scene_prop_get_instance, ":cur_instance_id", "spr_viking_keep_destroy_sally_door_left", ":cur_instance"),
       (prop_instance_enable_physics, ":cur_instance_id", 1),
       (scene_prop_set_hit_points, ":cur_instance_id", ":health_sally_door"),
     (try_end),             

     (scene_prop_get_num_instances, ":num_instances_of_scene_prop", "spr_viking_keep_destroy_sally_door_right"),     
     (try_for_range, ":cur_instance", 0, ":num_instances_of_scene_prop"),
       (scene_prop_get_instance, ":cur_instance_id", "spr_viking_keep_destroy_sally_door_right", ":cur_instance"),
       (prop_instance_enable_physics, ":cur_instance_id", 1),
       (scene_prop_set_hit_points, ":cur_instance_id", ":health_sally_door"),
     (try_end),             

     (store_div, ":health_sally_door_div_3", ":health_sally_door", 3),

     (scene_prop_get_num_instances, ":num_instances_of_scene_prop", "spr_castle_f_door_a"),     
     (try_for_range, ":cur_instance", 0, ":num_instances_of_scene_prop"),
       (scene_prop_get_instance, ":cur_instance_id", "spr_castle_f_door_a", ":cur_instance"),
       (prop_instance_enable_physics, ":cur_instance_id", 1),
       (scene_prop_set_hit_points, ":cur_instance_id", ":health_sally_door_div_3"),
     (try_end),     

     (scene_prop_get_num_instances, ":num_instances_of_scene_prop", "spr_castle_f_door_b"),     
     (try_for_range, ":cur_instance", 0, ":num_instances_of_scene_prop"),
       (scene_prop_get_instance, ":cur_instance_id", "spr_castle_f_door_b", ":cur_instance"),
       (prop_instance_enable_physics, ":cur_instance_id", 1),
       (scene_prop_set_hit_points, ":cur_instance_id", ":health_sally_door_div_3"),
     (try_end),     
     ]),

  #script_show_multiplayer_message
  # INPUT: arg1 = multiplayer_message_type
  # OUTPUT: none
  ("show_multiplayer_message",
   [
    (store_script_param, ":multiplayer_message_type", 1),
    (store_script_param, ":value", 2),

    (assign, "$g_multiplayer_message_type", ":multiplayer_message_type"),

    (try_begin),
      (eq, ":multiplayer_message_type", multiplayer_message_type_round_result_in_battle_mode),
      (assign, "$g_multiplayer_message_value_1", ":value"),
      (start_presentation, "prsnt_multiplayer_message_1"),
      
      (try_begin), #end of round in clients
        (neg|multiplayer_is_server),
        (assign, "$g_battle_death_mode_started", 0),
      (try_end),  
    (else_try),
      (eq, ":multiplayer_message_type", multiplayer_message_type_auto_team_balance_done),
      (assign, "$g_multiplayer_message_value_1", ":value"),
      (start_presentation, "prsnt_multiplayer_message_2"),
      (assign, "$g_team_balance_next_round", 0), 
    (else_try),
      (eq, ":multiplayer_message_type", multiplayer_message_type_auto_team_balance_next),
      (assign, "$g_team_balance_next_round", 1),
      (call_script, "script_warn_player_about_auto_team_balance"),
    (else_try),
      (eq, ":multiplayer_message_type", multiplayer_message_type_auto_team_balance_no_need),
      (assign, "$g_team_balance_next_round", 0),
    (else_try),
      (eq, ":multiplayer_message_type", multiplayer_message_type_capture_the_flag_score),
      (assign, "$g_multiplayer_message_value_1", ":value"),
      (start_presentation, "prsnt_multiplayer_message_1"),
    (else_try),
      (eq, ":multiplayer_message_type", multiplayer_message_type_flag_returned_home),
      (assign, "$g_multiplayer_message_value_1", ":value"),    
      (start_presentation, "prsnt_multiplayer_message_1"),
    (else_try),
      (eq, ":multiplayer_message_type", multiplayer_message_type_capture_the_flag_stole),
      (assign, "$g_multiplayer_message_value_1", ":value"),
      (start_presentation, "prsnt_multiplayer_message_1"),
    (else_try),
      (eq, ":multiplayer_message_type", multiplayer_message_type_poll_result),
      (assign, "$g_multiplayer_message_value_3", ":value"),
      (start_presentation, "prsnt_multiplayer_message_3"),
    (else_try),
      (eq, ":multiplayer_message_type", multiplayer_message_type_flag_neutralized),      
      (assign, "$g_multiplayer_message_value_1", ":value"),
      (start_presentation, "prsnt_multiplayer_message_1"),
    (else_try),
      (eq, ":multiplayer_message_type", multiplayer_message_type_flag_captured),
      (assign, "$g_multiplayer_message_value_1", ":value"),
      (start_presentation, "prsnt_multiplayer_message_1"),
    (else_try),
      (eq, ":multiplayer_message_type", multiplayer_message_type_flag_is_pulling),
      (assign, "$g_multiplayer_message_value_1", ":value"),
      (start_presentation, "prsnt_multiplayer_message_1"),
    (else_try),
      (eq, ":multiplayer_message_type", multiplayer_message_type_round_draw),
      (start_presentation, "prsnt_multiplayer_message_1"),
    (else_try),
      (eq, ":multiplayer_message_type", multiplayer_message_type_target_destroyed),
    
      (try_begin), #destroy score (condition : a target destroyed)
        (eq, "$g_defender_team", 0),
        (assign, ":attacker_team_no", 1),
      (else_try),
        (assign, ":attacker_team_no", 0),
      (try_end),
       
      (team_get_score, ":team_score", ":attacker_team_no"),
      (val_add, ":team_score", 1),
      (call_script, "script_team_set_score", ":attacker_team_no", ":team_score"), #destroy score end

      (assign, "$g_multiplayer_message_value_1", ":value"),
      (start_presentation, "prsnt_multiplayer_message_1"),
    (else_try),
      (eq, ":multiplayer_message_type", multiplayer_message_type_defenders_saved_n_targets),      
      (assign, "$g_multiplayer_message_value_1", ":value"),
      (start_presentation, "prsnt_multiplayer_message_1"),
    (else_try),
      (eq, ":multiplayer_message_type", multiplayer_message_type_attackers_won_the_round),
      (try_begin),
        (eq, "$g_defender_team", 0),
        (assign, "$g_multiplayer_message_value_1", 1),
      (else_try),
        (assign, "$g_multiplayer_message_value_1", 0),
      (try_end),
      (start_presentation, "prsnt_multiplayer_message_1"),
    (try_end),
    ]),

  #script_get_headquarters_scores
  # INPUT: none
  # OUTPUT: reg0 = team_1_num_flags, reg1 = team_2_num_flags
  ("get_headquarters_scores",
   [
     (assign, ":team_1_num_flags", 0),
     (assign, ":team_2_num_flags", 0),
     (try_for_range, ":flag_no", 0, "$g_number_of_flags"),
       (store_add, ":cur_flag_owner_slot", multi_data_flag_owner_begin, ":flag_no"),
       (troop_get_slot, ":cur_flag_owner", "trp_multiplayer_data", ":cur_flag_owner_slot"),
       (neq, ":cur_flag_owner", 0),
       (try_begin),
         (eq, ":cur_flag_owner", 1),
         (val_add, ":team_1_num_flags", 1),
       (else_try),
         (val_add, ":team_2_num_flags", 1),
       (try_end),
     (try_end),
     (assign, reg0, ":team_1_num_flags"),
     (assign, reg1, ":team_2_num_flags"),
     ]),


  #script_draw_this_round
  # INPUT: arg1 = value
  ("draw_this_round",
   [
    (store_script_param, ":value", 1),
    (try_begin),
      (eq, ":value", -9), #destroy mod round end
      (assign, "$g_round_ended", 1),
      (store_mission_timer_a, "$g_round_finish_time"),
      #(assign, "$g_multiplayer_message_value_1", -1),
      #(assign, "$g_multiplayer_message_type", multiplayer_message_type_round_draw),
      #(start_presentation, "prsnt_multiplayer_message_1"),
    (else_try),
      (eq, ":value", -1), #draw
      (assign, "$g_round_ended", 1),
      (store_mission_timer_a, "$g_round_finish_time"),
      (assign, "$g_multiplayer_message_value_1", -1),
      (assign, "$g_multiplayer_message_type", multiplayer_message_type_round_draw),
      (start_presentation, "prsnt_multiplayer_message_1"),
    (else_try), 
      (eq, ":value", 0), #defender wins
      (assign, "$g_round_ended", 1),
      (store_mission_timer_a, "$g_round_finish_time"),
        
      (team_get_faction, ":faction_of_winner_team", 0),
      (team_get_score, ":team_1_score", 0),
      (val_add, ":team_1_score", 1),
      (team_set_score, 0, ":team_1_score"),
      (assign, "$g_winner_team", 0),
      (str_store_faction_name, s1, ":faction_of_winner_team"),

      (assign, "$g_multiplayer_message_value_1", ":value"),
      (try_begin),
        (neq, "$g_multiplayer_game_type", multiplayer_game_type_battle),    
        (neq, "$g_multiplayer_game_type", multiplayer_game_type_captain_battle),    
##        (neq, "$g_multiplayer_game_type", multiplayer_game_type_destroy),
        (assign, "$g_multiplayer_message_type", multiplayer_message_type_round_result_in_siege_mode),
      (else_try),
        (assign, "$g_multiplayer_message_type", multiplayer_message_type_round_result_in_battle_mode),
      (try_end),
      (start_presentation, "prsnt_multiplayer_message_1"),
    (else_try), 
      (eq, ":value", 1), #attacker wins
      (assign, "$g_round_ended", 1),
      (store_mission_timer_a, "$g_round_finish_time"),
  
      (team_get_faction, ":faction_of_winner_team", 1),
      (team_get_score, ":team_2_score", 1),
      (val_add, ":team_2_score", 1),
      (team_set_score, 1, ":team_2_score"),
      (assign, "$g_winner_team", 1),
      (str_store_faction_name, s1, ":faction_of_winner_team"),

      (assign, "$g_multiplayer_message_value_1", ":value"),
      (try_begin),
        (neq, "$g_multiplayer_game_type", multiplayer_game_type_battle),    
        (neq, "$g_multiplayer_game_type", multiplayer_game_type_captain_battle),    
##        (neq, "$g_multiplayer_game_type", multiplayer_game_type_destroy),
        (assign, "$g_multiplayer_message_type", multiplayer_message_type_round_result_in_siege_mode),
      (else_try),
        (assign, "$g_multiplayer_message_type", multiplayer_message_type_round_result_in_battle_mode),
      (try_end),
      (start_presentation, "prsnt_multiplayer_message_1"),
    (try_end),
    ]),   

  #script_find_most_suitable_bot_to_control
  # INPUT: arg1 = value
  ("find_most_suitable_bot_to_control",
   [
      (set_fixed_point_multiplier, 100),
      (store_script_param, ":player_no", 1),
      (player_get_team_no, ":player_team", ":player_no"),

      (player_get_slot, ":x_coor", ":player_no", slot_player_death_pos_x),
      (player_get_slot, ":y_coor", ":player_no", slot_player_death_pos_y),
      (player_get_slot, ":z_coor", ":player_no", slot_player_death_pos_z),

      (init_position, pos0),
      (position_set_x, pos0, ":x_coor"),
      (position_set_y, pos0, ":y_coor"),
      (position_set_z, pos0, ":z_coor"),

      (assign, ":most_suitable_bot", -1),
      (assign, ":max_bot_score", -1),

      (try_for_agents, ":cur_agent"),
        (agent_is_alive, ":cur_agent"),
        (agent_is_human, ":cur_agent"),
        (agent_is_non_player, ":cur_agent"),
        (agent_get_team ,":cur_team", ":cur_agent"),
        (eq, ":cur_team", ":player_team"),
        (agent_get_position, pos1, ":cur_agent"),

        #getting score for distance of agent to death point (0..3000)
        (get_distance_between_positions_in_meters, ":dist", pos0, pos1),

        (try_begin),
          (lt, ":dist", 500),
          (store_sub, ":bot_score", 500, ":dist"),
        (else_try),
          (assign, ":bot_score", 0),
        (try_end),
        (val_mul, ":bot_score", 6),

        #getting score for distance of agent to enemy & friend agents (0..300 x agents)
        (try_for_agents, ":cur_agent_2"),
          (agent_is_alive, ":cur_agent_2"),
          (agent_is_human, ":cur_agent_2"),
          (neq, ":cur_agent", ":cur_agent_2"),      
          (agent_get_team ,":cur_team_2", ":cur_agent_2"),
          (try_begin),
            (neq, ":cur_team_2", ":player_team"),
            (agent_get_position, pos1, ":cur_agent_2"),
            (get_distance_between_positions, ":dist_2", pos0, pos1),
            (try_begin),
              (lt, ":dist_2", 300),
              (assign, ":enemy_near_score", ":dist_2"),
            (else_try),
              (assign, ":enemy_near_score", 300),
            (try_end),
            (val_add, ":bot_score", ":enemy_near_score"),
          (else_try),
            (agent_get_position, pos1, ":cur_agent_2"),
            (get_distance_between_positions, ":dist_2", pos0, pos1),
            (try_begin),
              (lt, ":dist_2", 300),
              (assign, ":friend_near_score", 300, ":dist_2"),
            (else_try),
              (assign, ":friend_near_score", 0),
            (try_end),
            (val_add, ":bot_score", ":friend_near_score"),
          (try_end),
        (try_end),

        #getting score for health (0..200)
        (store_agent_hit_points, ":agent_hit_points", ":cur_agent"),
        (val_mul, ":agent_hit_points", 2),
        (val_add, ":bot_score", ":agent_hit_points"),

        (ge, ":bot_score", ":max_bot_score"),
        (assign, ":max_bot_score", ":bot_score"),
        (assign, ":most_suitable_bot", ":cur_agent"),
      (try_end),

      (assign, reg0, ":most_suitable_bot"),
    ]),   
   
  #script_game_receive_url_response
  #response format should be like this:
  #  [a number or a string]|[another number or a string]|[yet another number or a string] ...
  # here is an example response:
  # 12|Player|100|another string|142|323542|34454|yet another string
  # INPUT: arg1 = num_integers, arg2 = num_strings
  # reg0, reg1, reg2, ... up to 128 registers contain the integer values
  # s0, s1, s2, ... up to 128 strings contain the string values
  ("game_receive_url_response",
    [
      #here is an example usage
##      (store_script_param, ":num_integers", 1),
##      (store_script_param, ":num_strings", 2),
##      (try_begin),
##        (gt, ":num_integers", 4),
##        (display_message, "@{reg0}, {reg1}, {reg2}, {reg3}, {reg4}"),
##      (try_end),
##      (try_begin),
##        (gt, ":num_strings", 4),
##        (display_message, "@{s0}, {s1}, {s2}, {s3}, {s4}"),
##      (try_end),
      ]),
      
  ("game_get_cheat_mode",
  [
    (assign, reg0, "$cheat_mode"),
  ]),    
  
  #script_game_receive_network_message
  # This script is called from the game engine when a new network message is received.
  # INPUT: arg1 = player_no, arg2 = event_type, arg3 = value, arg4 = value_2, arg5 = value_3, arg6 = value_4
  ("game_receive_network_message",
    [
      (store_script_param, ":player_no", 1),
      (store_script_param, ":event_type", 2),	  	
	  
      (try_begin),
        ###############
        #SERVER EVENTS#
        ###############
        (eq, ":event_type", multiplayer_event_set_item_selection),
        (store_script_param, ":slot_no", 3),
        (store_script_param, ":value", 4),
		
		
        (try_begin),
          #valid slot check
          (is_between, ":slot_no", slot_player_selected_item_indices_begin, slot_player_selected_item_indices_end),
          #valid item check
          (assign, ":valid_item", 0),
          (try_begin),
            (le, ":value", 0),
			(assign, ":value", -1),
            (assign, ":valid_item", 1),
          (else_try),
            (gt, ":value", 0),
            (player_get_troop_id, ":player_troop_no", ":player_no"),
            (is_between, ":player_troop_no", multiplayer_troops_begin, multiplayer_troops_end),
            (store_sub, ":troop_index", ":player_troop_no", multiplayer_troops_begin),
            (val_add, ":troop_index", slot_item_multiplayer_availability_linked_list_begin),
            (item_get_slot, ":prev_next_item_ids", ":value", ":troop_index"),
            (gt, ":prev_next_item_ids", 0), #0 if the item is not valid for the multiplayer mode
            (assign, ":valid_item", 1),
          (try_begin),
            (neq, "$g_horses_are_avaliable", 1),
              (item_get_slot, ":item_class", ":value", slot_item_multiplayer_item_class),
              (is_between, ":item_class", multi_item_class_type_horses_begin, multi_item_class_type_horses_end),
            (assign, ":valid_item", 0),
          (try_end),
            (try_begin),
              (eq, "$g_multiplayer_disallow_ranged_weapons", 1),
              (item_get_slot, ":item_class", ":value", slot_item_multiplayer_item_class),
              (is_between, ":item_class", multi_item_class_type_ranged_weapons_begin, multi_item_class_type_ranged_weapons_end),
              (assign, ":valid_item", 0),
            (try_end),
            (try_begin),
              (eq, "$g_multiplayer_disallow_granades", 1),
              (eq, ":value", "itm_m_granata_small"), #new option
              (assign, ":valid_item", 0),
            (try_end),
          (try_end),
          (eq, ":valid_item", 1),
          #condition checks are done
          (player_set_slot, ":player_no", ":slot_no", ":value"),
        (try_end),
      (else_try),
        (eq, ":event_type", multiplayer_event_set_bot_selection),
		(store_script_param, ":slot_no", 3),
        (store_script_param, ":value", 4),
        (try_begin),
          #condition check
          (is_between, ":slot_no", slot_player_bot_type_1_wanted, slot_player_bot_type_4_wanted + 1),
          (is_between, ":value", 0, 2),
		  #condition checks are done
		  (try_begin), 
			(eq, "$g_multiplayer_is_game_type_captain", 0),
			(player_set_slot, ":player_no", ":slot_no", ":value"),
		  (else_try), 	
			(try_for_range, ":i_slot", slot_player_bot_type_1_wanted, slot_player_bot_type_4_wanted + 1),
				(player_set_slot, ":player_no", ":i_slot", 0),
			(try_end), 
			(player_set_slot, ":player_no", ":slot_no", ":value"),
		  (try_end), 
        (try_end),
      (else_try),
        (eq, ":event_type", multiplayer_event_change_team_no),
        (store_script_param, ":value", 3),
		(assign, reg0, ":value"),
		#(display_debug_message, "@{!}multiplayer_event_change_team_no is received with team_no: {reg0}"),
        (try_begin),
          #validity check
          (player_get_team_no, ":player_team", ":player_no"),
          (neq, ":player_team", ":value"),

          #condition checks are done
          (try_begin),
            #check if available
            (call_script, "script_cf_multiplayer_team_is_available", ":player_no", ":value"),
            #reset troop_id to -1
 		    (call_script, "script_cf_multiplayer_event_team_change", ":player_no"), 
			(call_script, "script_mp_set_player_team_no", ":player_no", ":value", 0),
            (try_begin),
              (neq, ":value", multi_team_spectator),
              (neq, ":value", multi_team_unassigned),
      
              (store_mission_timer_a, ":player_last_team_select_time"),         
              (player_set_slot, ":player_no", slot_player_last_team_select_time, ":player_last_team_select_time"),
			  #(display_debug_message, "@{!}multiplayer_event_change_team_no is accepted"),
              (multiplayer_send_message_to_player, ":player_no", multiplayer_event_return_confirmation),
            (try_end),
          (else_try),
			#(display_debug_message, "@{!}multiplayer_event_change_team_no is rejected"),
            #reject request
            (multiplayer_send_message_to_player, ":player_no", multiplayer_event_return_rejection),
          (try_end),
		(else_try), # team is the same, confirm the change. servers use this for themselves.
		  #(display_debug_message, "@{!}multiplayer_event_change_team_no is accepted because it is already the same."),
		  (multiplayer_send_message_to_player, ":player_no", multiplayer_event_return_confirmation),
        (try_end),
      (else_try),
        (eq, ":event_type", multiplayer_event_change_troop_id),
        (store_script_param, ":value", 3),
        #troop-faction validity check
        (try_begin),
          (eq, ":value", -1),
		  (call_script, "script_mp_set_player_troop_id", ":player_no", -1, 0),
        (else_try),
          (is_between, ":value", multiplayer_troops_begin, multiplayer_troops_end),
          (player_get_team_no, ":player_team", ":player_no"),
          (is_between, ":player_team", 0, multi_team_spectator),
          (team_get_faction, ":team_faction", ":player_team"),
          (store_troop_faction, ":new_troop_faction", ":value"),
          (eq, ":new_troop_faction", ":team_faction"),
		  (call_script, "script_mp_set_player_troop_id", ":player_no", ":value", 0),
        (try_end),
      (else_try),
        (eq, ":event_type", multiplayer_event_admin_start_map),
        (store_script_param, ":value", 3),
        (store_script_param, ":value_2", 4),
        (try_begin),
          #validity check
          (player_is_admin, ":player_no"),
          (this_or_next|is_between, ":value", multiplayer_scenes_begin, multiplayer_scenes_end),
		  (is_between, ":value", multiplayer_new_scenes_begin, multiplayer_new_scenes_end),
          (is_between, ":value_2", 0, multiplayer_num_game_types),
          (server_get_changing_game_type_allowed, "$g_multiplayer_changing_game_type_allowed"),
          (this_or_next|eq, "$g_multiplayer_changing_game_type_allowed", 1),
          (eq, "$g_multiplayer_game_type", ":value_2"),
          (call_script, "script_multiplayer_fill_map_game_types", ":value_2"),
          (assign, ":num_maps", reg0),
          (assign, ":is_valid", 0),
          (store_add, ":end_cond", multi_data_maps_for_game_type_begin, ":num_maps"),
          (try_for_range, ":i_map", multi_data_maps_for_game_type_begin, ":end_cond"),
            (troop_slot_eq, "trp_multiplayer_data", ":i_map", ":value"),
            (assign, ":is_valid", 1),
            (assign, ":end_cond", 0),
          (try_end),
          (eq, ":is_valid", 1),
          #condition checks are done
          (assign, "$g_multiplayer_game_type", ":value_2"),
		  (call_script, "script_multiplayer_set_g_multiplayer_is_game_type_captain"),
          (assign, "$g_multiplayer_selected_map", ":value"),
          (team_set_faction, 0, "$g_multiplayer_next_team_1_faction"),
          (team_set_faction, 1, "$g_multiplayer_next_team_2_faction"),
		  (try_begin),
		    (eq, "$g_multiplayer_game_type", multiplayer_game_type_captain_coop),
			(assign, "$g_multiplayer_squad_size", 6), #squad size is constant for coop
		  (try_end),
          (call_script, "script_game_multiplayer_get_game_type_mission_template", "$g_multiplayer_game_type"),
          (start_multiplayer_mission, reg0, "$g_multiplayer_selected_map", 1),
        (try_end),
      (else_try),
        (eq, ":event_type", multiplayer_event_admin_set_max_num_players),
        (store_script_param, ":value", 3),
        (try_begin),
          #validity check
          (player_is_admin, ":player_no"),
          (is_between, ":value", 2, 65),
          #condition checks are done
          (server_set_max_num_players, ":value"),      
        (try_end),
      (else_try),
        (eq, ":event_type", multiplayer_event_admin_set_num_bots_in_team),
        (store_script_param, ":value", 3),
        (store_script_param, ":value_2", 4),
        (try_begin),
          #validity check
          (player_is_admin, ":player_no"),
          (is_between, ":value", 1, 3),
          (is_between, ":value_2", 0, "$g_multiplayer_max_num_bots"),
          #condition checks are done
          (try_begin),
            (eq, ":value", 1),
            (assign, "$g_multiplayer_num_bots_team_1", ":value_2"),
          (else_try),
            (assign, "$g_multiplayer_num_bots_team_2", ":value_2"),
          (try_end),
          (get_max_players, ":num_players"),                               
          (try_for_range, ":cur_player", 1, ":num_players"),
            (player_is_active, ":cur_player"),
            (multiplayer_send_2_int_to_player, ":cur_player", multiplayer_event_return_num_bots_in_team, ":value", ":value_2"),
          (try_end),            
        (try_end),
      (else_try),
        (eq, ":event_type", multiplayer_event_admin_set_anti_cheat),
        (store_script_param, ":value", 3),
        (try_begin),
          #validity check
          (player_is_admin, ":player_no"),
          (is_between, ":value", 0, 2),
          #condition checks are done
          (server_set_anti_cheat, ":value"),
        (try_end),
      (else_try),
        (eq, ":event_type", multiplayer_event_admin_set_friendly_fire),
        (store_script_param, ":value", 3),
        (try_begin),
          #validity check
          (player_is_admin, ":player_no"),
          (is_between, ":value", 0, 2),
          #condition checks are done
          (server_set_friendly_fire, ":value"),
        (try_end),
      (else_try),
        (eq, ":event_type", multiplayer_event_admin_set_melee_friendly_fire),
        (store_script_param, ":value", 3),
        (try_begin),
          #validity check
          (player_is_admin, ":player_no"),
          (is_between, ":value", 0, 2),
          #condition checks are done
          (server_set_melee_friendly_fire, ":value"),
        (try_end),
      (else_try),
        (eq, ":event_type", multiplayer_event_admin_set_friendly_fire_damage_self_ratio),
        (store_script_param, ":value", 3),
        (try_begin),
          #validity check
          (player_is_admin, ":player_no"),
          (is_between, ":value", 0, 101),
          #condition checks are done
          (server_set_friendly_fire_damage_self_ratio, ":value"),
        (try_end),
      (else_try),
        (eq, ":event_type", multiplayer_event_admin_set_friendly_fire_damage_friend_ratio),
        (store_script_param, ":value", 3),
        (try_begin),
          #validity check
          (player_is_admin, ":player_no"),
          (is_between, ":value", 0, 101),
          #condition checks are done
          (server_set_friendly_fire_damage_friend_ratio, ":value"),
        (try_end),
      (else_try),
        (eq, ":event_type", multiplayer_event_admin_set_ghost_mode),
        (store_script_param, ":value", 3),
        (try_begin),
          #validity check
          (player_is_admin, ":player_no"),
          (is_between, ":value", 0, 4),
          #condition checks are done
          (server_set_ghost_mode, ":value"),
        (try_end),
      (else_try),
        (eq, ":event_type", multiplayer_event_admin_set_control_block_dir),
        (store_script_param, ":value", 3),
        (try_begin),
          #validity check
          (player_is_admin, ":player_no"),
          (is_between, ":value", 0, 2),
          #condition checks are done
          (server_set_control_block_dir, ":value"),
        (try_end),
      (else_try),
        (eq, ":event_type", multiplayer_event_admin_set_combat_speed),
        (store_script_param, ":value", 3),
        (try_begin),
          #validity check
          (player_is_admin, ":player_no"),
          (is_between, ":value", 0, 5),
          #condition checks are done
          (server_set_combat_speed, ":value"),
        (try_end),
      (else_try),
        (eq, ":event_type", multiplayer_event_admin_set_respawn_count),
        (store_script_param, ":value", 3),
        #validity check
        (player_is_admin, ":player_no"),
        (is_between, ":value", 0, 6),
        #condition checks are done       
        (assign, "$g_multiplayer_number_of_respawn_count", ":value"),
        (get_max_players, ":num_players"),
        (try_for_range, ":cur_player", 1, ":num_players"),
          (player_is_active, ":cur_player"),
          (multiplayer_send_int_to_player, ":cur_player", multiplayer_event_return_respawn_count, ":value"),
        (try_end),                  
      (else_try),
        (eq, ":event_type", multiplayer_event_admin_set_add_to_servers_list),
        (store_script_param, ":value", 3),
        (try_begin),
          #validity check
          (player_is_admin, ":player_no"),
          #condition checks are done
          (server_set_add_to_game_servers_list, ":value"),
        (try_end),
      (else_try),
        (eq, ":event_type", multiplayer_event_admin_set_respawn_period), 
        (store_script_param, ":value", 3),
        (try_begin),
          #validity check
          (player_is_admin, ":player_no"),
          (is_between, ":value", 3, 31),
          #condition checks are done
          (assign, "$g_multiplayer_respawn_period", ":value"),
          (get_max_players, ":num_players"),
          (try_for_range, ":cur_player", 1, ":num_players"),
            (player_is_active, ":cur_player"),
            (multiplayer_send_int_to_player, ":cur_player", multiplayer_event_return_respawn_period, ":value"),
          (try_end),            
        (try_end),
      (else_try),
        (eq, ":event_type", multiplayer_event_admin_set_game_max_minutes),
        (store_script_param, ":value", 3),
        (try_begin),
          #validity check
          (player_is_admin, ":player_no"),
          (is_between, ":value", 5, 121),
          #condition checks are done
          (assign, "$g_multiplayer_game_max_minutes", ":value"),
        (try_end),
      (else_try),
        (eq, ":event_type", multiplayer_event_admin_set_round_max_seconds),
        (store_script_param, ":value", 3),
        (try_begin),
          #validity check
          (player_is_admin, ":player_no"),
          (is_between, ":value", 60, 901),
          #condition checks are done
          (assign, "$g_multiplayer_round_max_seconds", ":value"),
          (get_max_players, ":num_players"),
          (try_for_range, ":cur_player", 1, ":num_players"),
            (player_is_active, ":cur_player"),
            (multiplayer_send_int_to_player, ":cur_player", multiplayer_event_return_round_max_seconds, ":value"),
          (try_end),            
        (try_end),
      (else_try),
        (eq, ":event_type", multiplayer_event_admin_set_player_respawn_as_bot),
        (store_script_param, ":value", 3),
        (try_begin),
          #validity check
          (player_is_admin, ":player_no"),
          (is_between, ":value", 0, 2),
          #condition checks are done
          (assign, "$g_multiplayer_player_respawn_as_bot", ":value"),
          (get_max_players, ":num_players"),
          (try_for_range, ":cur_player", 1, ":num_players"),
            (player_is_active, ":cur_player"),
            (multiplayer_send_int_to_player, ":cur_player", multiplayer_event_return_player_respawn_as_bot, ":value"),
          (try_end),            
        (try_end),
      (else_try),
        (eq, ":event_type", multiplayer_event_admin_set_game_max_points),
        (store_script_param, ":value", 3),
        (try_begin),
          #validity check
          (player_is_admin, ":player_no"),
          (is_between, ":value", 3, 1001),
          #condition checks are done
          (assign, "$g_multiplayer_game_max_points", ":value"),
        (try_end),
      (else_try),
        (eq, ":event_type", multiplayer_event_admin_set_point_gained_from_flags),
        (store_script_param, ":value", 3),
        (try_begin),
          #validity check
          (player_is_admin, ":player_no"),
          (is_between, ":value", 25, 401),
          #condition checks are done
          (assign, "$g_multiplayer_point_gained_from_flags", ":value"),
        (try_end),
      (else_try),
        (eq, ":event_type", multiplayer_event_admin_set_point_gained_from_capturing_flag),
        (store_script_param, ":value", 3),
        (try_begin),
          #validity check
          (player_is_admin, ":player_no"),
          (is_between, ":value", 0, 11),
          #condition checks are done
          (assign, "$g_multiplayer_point_gained_from_capturing_flag", ":value"),
        (try_end),
      (else_try),
        (eq, ":event_type", multiplayer_event_admin_set_initial_gold_multiplier),
        (store_script_param, ":value", 3),
        (try_begin),
          #validity check
          (player_is_admin, ":player_no"),
          (is_between, ":value", 0, 1001),
          #condition checks are done
          (assign, "$g_multiplayer_initial_gold_multiplier", ":value"),
        (try_end),
      (else_try),
        (eq, ":event_type", multiplayer_event_admin_set_battle_earnings_multiplier),
        (store_script_param, ":value", 3),
        (try_begin),
          #validity check
          (player_is_admin, ":player_no"),
          (is_between, ":value", 0, 1001),
          #condition checks are done
          (assign, "$g_multiplayer_battle_earnings_multiplier", ":value"),
        (try_end),
      (else_try),
        (eq, ":event_type", multiplayer_event_admin_set_round_earnings_multiplier),
        (store_script_param, ":value", 3),
        (try_begin),
          #validity check
          (player_is_admin, ":player_no"),
          (is_between, ":value", 0, 1001),
          #condition checks are done
          (assign, "$g_multiplayer_round_earnings_multiplier", ":value"),
        (try_end),
      (else_try),
        (eq, ":event_type", multiplayer_event_admin_set_server_name),
        (try_begin),
          #validity check
          (player_is_admin, ":player_no"),
          (server_get_renaming_server_allowed, "$g_multiplayer_renaming_server_allowed"),
          (eq, "$g_multiplayer_renaming_server_allowed", 1),
          #condition checks are done
          (server_set_name, s0), #validity is checked inside this function
        (try_end),
      (else_try),
        (eq, ":event_type", multiplayer_event_admin_set_game_password),
        (try_begin),
          #validity check
          (player_is_admin, ":player_no"),
          #condition checks are done
          (server_set_password, s0), #validity is checked inside this function
        (try_end),
      (else_try),
        (eq, ":event_type", multiplayer_event_admin_set_welcome_message),
        (try_begin),
          #validity check
          (player_is_admin, ":player_no"),
          #condition checks are done
          (server_set_welcome_message, s0), #validity is checked inside this function
        (try_end),
      (else_try),
        (eq, ":event_type", multiplayer_event_admin_set_team_faction),
        (store_script_param, ":value", 3),
        (store_script_param, ":value_2", 4),
        (try_begin),
          #validity check
          (player_is_admin, ":player_no"),
          (is_between, ":value", 1, 3),
          (is_between, ":value_2", npc_kingdoms_begin, npc_kingdoms_end),
##          (assign, ":is_valid", 0),
##          (try_begin),
##            (eq, ":value", 1),
##            (neq, ":value_2", "$g_multiplayer_next_team_2_faction"),
##            (assign, ":is_valid", 1),
##          (else_try),
##            (neq, ":value_2", "$g_multiplayer_next_team_1_faction"),
##            (assign, ":is_valid", 1),
##          (try_end),
##          (eq, ":is_valid", 1),
          #condition checks are done
          (try_begin),
            (eq, ":value", 1),
            (assign, "$g_multiplayer_next_team_1_faction", ":value_2"),
          (else_try),
            (assign, "$g_multiplayer_next_team_2_faction", ":value_2"),
          (try_end),
        (try_end),
      (else_try),
        (eq, ":event_type", multiplayer_event_open_game_rules),
        (try_begin),
          #no validity check
          (server_get_max_num_players, ":max_num_players"),
          (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_max_num_players, ":max_num_players"),
          (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_next_team_faction, 1, "$g_multiplayer_next_team_1_faction"),
          (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_next_team_faction, 2, "$g_multiplayer_next_team_2_faction"),
          (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_num_bots_in_team, 1, "$g_multiplayer_num_bots_team_1"),
          (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_num_bots_in_team, 2, "$g_multiplayer_num_bots_team_2"),
          (server_get_anti_cheat, ":server_anti_cheat"),
          (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_anti_cheat, ":server_anti_cheat"),
          (server_get_friendly_fire, ":server_friendly_fire"),
          (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_friendly_fire, ":server_friendly_fire"),
          (server_get_melee_friendly_fire, ":server_melee_friendly_fire"),
          (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_melee_friendly_fire, ":server_melee_friendly_fire"),
          (server_get_friendly_fire_damage_self_ratio, ":friendly_fire_damage_self_ratio"),
          (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_friendly_fire_damage_self_ratio, ":friendly_fire_damage_self_ratio"),
          (server_get_friendly_fire_damage_friend_ratio, ":friendly_fire_damage_friend_ratio"),
          (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_friendly_fire_damage_friend_ratio, ":friendly_fire_damage_friend_ratio"),
          (server_get_ghost_mode, ":server_ghost_mode"),
          (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_ghost_mode, ":server_ghost_mode"),
          (server_get_control_block_dir, ":server_control_block_dir"),
          (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_control_block_dir, ":server_control_block_dir"),
          (server_get_combat_speed, ":server_combat_speed"),
          (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_combat_speed, ":server_combat_speed"),
          (server_get_add_to_game_servers_list, ":server_add_to_servers_list"),
          (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_add_to_servers_list, ":server_add_to_servers_list"),
          (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_respawn_period, "$g_multiplayer_respawn_period"),
          (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_game_max_minutes, "$g_multiplayer_game_max_minutes"),
          (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_round_max_seconds, "$g_multiplayer_round_max_seconds"),
          (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_player_respawn_as_bot, "$g_multiplayer_player_respawn_as_bot"),
          (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_game_max_points, "$g_multiplayer_game_max_points"),
          (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_point_gained_from_flags, "$g_multiplayer_point_gained_from_flags"),
          (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_point_gained_from_capturing_flag, "$g_multiplayer_point_gained_from_capturing_flag"),
          (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_initial_gold_multiplier, "$g_multiplayer_initial_gold_multiplier"),
          (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_battle_earnings_multiplier, "$g_multiplayer_battle_earnings_multiplier"),
          (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_round_earnings_multiplier, "$g_multiplayer_round_earnings_multiplier"),
          (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_valid_vote_ratio, "$g_multiplayer_valid_vote_ratio"),
          (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_max_num_bots, "$g_multiplayer_max_num_bots"),
          (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_squad_size, "$g_multiplayer_squad_size"),
		  (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_team_ratio, "$g_multiplayer_team_ratio"),	
		  (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_enable_cbf_squad_ratio, "$g_multiplayer_cbf_enable_squad_ratio"),			  
          (str_store_server_name, s0),
          (multiplayer_send_string_to_player, ":player_no", multiplayer_event_return_server_name, s0),
          (multiplayer_send_message_to_player, ":player_no", multiplayer_event_return_open_game_rules),
        (try_end),
      (else_try),
        (eq, ":event_type", multiplayer_event_open_admin_panel),
        (try_begin),
          #validity check
          (player_is_admin, ":player_no"),
          #condition checks are done
          (server_get_renaming_server_allowed, "$g_multiplayer_renaming_server_allowed"),
          (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_renaming_server_allowed, "$g_multiplayer_renaming_server_allowed"),
          (server_get_changing_game_type_allowed, "$g_multiplayer_changing_game_type_allowed"),
          (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_changing_game_type_allowed, "$g_multiplayer_changing_game_type_allowed"),
          (server_get_max_num_players, ":max_num_players"),
          (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_max_num_players, ":max_num_players"),
          (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_next_team_faction, 1, "$g_multiplayer_next_team_1_faction"),
          (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_next_team_faction, 2, "$g_multiplayer_next_team_2_faction"),
          (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_num_bots_in_team, 1, "$g_multiplayer_num_bots_team_1"),
          (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_num_bots_in_team, 2, "$g_multiplayer_num_bots_team_2"),
          (server_get_anti_cheat, ":server_anti_cheat"),
          (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_anti_cheat, ":server_anti_cheat"),
          (server_get_friendly_fire, ":server_friendly_fire"),
          (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_friendly_fire, ":server_friendly_fire"),
          (server_get_melee_friendly_fire, ":server_melee_friendly_fire"),
          (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_melee_friendly_fire, ":server_melee_friendly_fire"),
          (server_get_friendly_fire_damage_self_ratio, ":friendly_fire_damage_self_ratio"),
          (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_friendly_fire_damage_self_ratio, ":friendly_fire_damage_self_ratio"),
          (server_get_friendly_fire_damage_friend_ratio, ":friendly_fire_damage_friend_ratio"),
          (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_friendly_fire_damage_friend_ratio, ":friendly_fire_damage_friend_ratio"),
          (server_get_ghost_mode, ":server_ghost_mode"),
          (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_ghost_mode, ":server_ghost_mode"),
          (server_get_control_block_dir, ":server_control_block_dir"),
          (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_control_block_dir, ":server_control_block_dir"),
          (server_get_combat_speed, ":server_combat_speed"),
          (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_combat_speed, ":server_combat_speed"),
          (server_get_add_to_game_servers_list, ":server_add_to_servers_list"),
          (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_add_to_servers_list, ":server_add_to_servers_list"),
          (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_respawn_period, "$g_multiplayer_respawn_period"),
          (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_game_max_minutes, "$g_multiplayer_game_max_minutes"),
          (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_round_max_seconds, "$g_multiplayer_round_max_seconds"),
          (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_player_respawn_as_bot, "$g_multiplayer_player_respawn_as_bot"),
          (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_game_max_points, "$g_multiplayer_game_max_points"),
          (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_point_gained_from_flags, "$g_multiplayer_point_gained_from_flags"),
          (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_point_gained_from_capturing_flag, "$g_multiplayer_point_gained_from_capturing_flag"),
          (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_initial_gold_multiplier, "$g_multiplayer_initial_gold_multiplier"),
          (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_battle_earnings_multiplier, "$g_multiplayer_battle_earnings_multiplier"),
          (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_round_earnings_multiplier, "$g_multiplayer_round_earnings_multiplier"),
          (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_valid_vote_ratio, "$g_multiplayer_valid_vote_ratio"),
          (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_max_num_bots, "$g_multiplayer_max_num_bots"),
          (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_squad_size, "$g_multiplayer_squad_size"),
		  (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_team_ratio, "$g_multiplayer_team_ratio"),
		  (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_enable_cbf_squad_ratio, "$g_multiplayer_cbf_enable_squad_ratio"),
          (str_store_server_name, s0),
          (multiplayer_send_string_to_player, ":player_no", multiplayer_event_return_server_name, s0),
          (str_store_server_password, s0),
          (multiplayer_send_string_to_player, ":player_no", multiplayer_event_return_game_password, s0),
        (try_end),
      (else_try),
        (eq, ":event_type", multiplayer_event_start_new_poll),
        (try_begin),
          (store_script_param, ":value", 3),
          (store_script_param, ":value_2", 4),
           #validity check
          (eq, "$g_multiplayer_poll_running", 0),
          (store_mission_timer_a, ":mission_timer"),
          (player_get_slot, ":poll_disable_time", ":player_no", slot_player_poll_disabled_until_time),
          (ge, ":mission_timer", ":poll_disable_time"),
          (assign, ":continue", 0),
          (try_begin),
            (eq, ":value", 1), # kicking a player
            (try_begin),
              (eq, "$g_multiplayer_kick_voteable", 1),
              (player_is_active, ":value_2"),
              (assign, ":continue", 1),
            (try_end),
          (else_try),
            (eq, ":value", 2), # banning a player
            (try_begin),
              (eq, "$g_multiplayer_ban_voteable", 1),
              (player_is_active, ":value_2"),
              (save_ban_info_of_player, ":value_2"),
              (assign, ":continue", 1),
            (try_end),
          (else_try), # vote for map
            (eq, ":value", 0),
            (try_begin),
              (eq, "$g_multiplayer_maps_voteable", 1),
              (call_script, "script_multiplayer_fill_map_game_types", "$g_multiplayer_game_type"),
              (assign, ":num_maps", reg0),
              (try_for_range, ":i_map", 0, ":num_maps"),
                (store_add, ":map_slot", ":i_map", multi_data_maps_for_game_type_begin),
                (troop_slot_eq, "trp_multiplayer_data", ":map_slot", ":value_2"),
                (assign, ":continue", 1),
                (assign, ":num_maps", 0), #break
              (try_end),
            (try_end),
          (else_try),
            (eq, ":value", 3), #vote for map and factions
            (try_begin),
              (eq, "$g_multiplayer_factions_voteable", 1),
              (store_script_param, ":value_3", 5),
              (store_script_param, ":value_4", 6),
              (call_script, "script_multiplayer_fill_map_game_types", "$g_multiplayer_game_type"),
              (assign, ":num_maps", reg0),
              (try_for_range, ":i_map", 0, ":num_maps"),
                (store_add, ":map_slot", ":i_map", multi_data_maps_for_game_type_begin),
                (troop_slot_eq, "trp_multiplayer_data", ":map_slot", ":value_2"),
                (assign, ":continue", 1),
                (assign, ":num_maps", 0), #break
              (try_end),
              (try_begin),
                (eq, ":continue", 1),
                (this_or_next|neg|is_between, ":value_3", npc_kingdoms_begin, npc_kingdoms_end),
                (this_or_next|neg|is_between, ":value_4", npc_kingdoms_begin, npc_kingdoms_end),
                (eq, ":value_3", ":value_4"),
                (assign, ":continue", 0),
              (try_end),
            (try_end),
          (else_try),
            (eq, ":value", 4), #vote for number of bots
            (store_script_param, ":value_3", 5),
            (store_add, ":upper_limit", "$g_multiplayer_num_bots_voteable", 1),
            (is_between, ":value_2", 0, ":upper_limit"),
            (is_between, ":value_3", 0, ":upper_limit"),
            (assign, ":continue", 1),
          (try_end),
          (eq, ":continue", 1),
          #condition checks are done
          (str_store_player_username, s0, ":player_no"),
          (try_begin),
            (eq, ":value", 1), #kicking a player
            (str_store_player_username, s1, ":value_2"),
            (server_add_message_to_log, "str_poll_kick_player_s1_by_s0"),
          (else_try),
            (eq, ":value", 2), #banning a player
            (str_store_player_username, s1, ":value_2"),
            (server_add_message_to_log, "str_poll_ban_player_s1_by_s0"),
          (else_try),
            (eq, ":value", 0), #vote for map
			(try_begin),
			  (is_between, ":value_2", multiplayer_scenes_begin, multiplayer_scenes_end),
              (store_sub, ":string_index", ":value_2", multiplayer_scenes_begin),
              (val_add, ":string_index", multiplayer_scene_names_begin),
			(else_try),
              (store_sub, ":string_index", ":value_2", multiplayer_new_scenes_begin),
              (val_add, ":string_index", multiplayer_new_scene_names_begin),
			(try_end),
            (str_store_string, s1, ":string_index"),
            (server_add_message_to_log, "str_poll_change_map_to_s1_by_s0"),
          (else_try),
            (eq, ":value", 3), #vote for map and factions
            (try_begin),
			  (is_between, ":value_2", multiplayer_scenes_begin, multiplayer_scenes_end),
              (store_sub, ":string_index", ":value_2", multiplayer_scenes_begin),
              (val_add, ":string_index", multiplayer_scene_names_begin),
			(else_try),
              (store_sub, ":string_index", ":value_2", multiplayer_new_scenes_begin),
              (val_add, ":string_index", multiplayer_new_scene_names_begin),
			(try_end),
            (str_store_string, s1, ":string_index"),
            (str_store_faction_name, s2, ":value_3"),
            (str_store_faction_name, s3, ":value_4"),
            (server_add_message_to_log, "str_poll_change_map_to_s1_and_factions_to_s2_and_s3_by_s0"),
          (else_try),
            (eq, ":value", 4), #vote for number of bots
            (assign, reg0, ":value_2"),
            (assign, reg1, ":value_3"),
            (server_add_message_to_log, "str_poll_change_number_of_bots_to_reg0_and_reg1_by_s0"),
          (try_end),
          (assign, "$g_multiplayer_poll_running", 1),
          (assign, "$g_multiplayer_poll_ended", 0),
          (assign, "$g_multiplayer_poll_num_sent", 0),
          (assign, "$g_multiplayer_poll_yes_count", 0),
          (assign, "$g_multiplayer_poll_no_count", 0),
          (assign, "$g_multiplayer_poll_to_show", ":value"),
          (assign, "$g_multiplayer_poll_value_to_show", ":value_2"),
          (try_begin),
            (eq, ":value", 3),
            (assign, "$g_multiplayer_poll_value_2_to_show", ":value_3"),
            (assign, "$g_multiplayer_poll_value_3_to_show", ":value_4"),
          (else_try),
            (eq, ":value", 4),
            (assign, "$g_multiplayer_poll_value_2_to_show", ":value_3"),
            (assign, "$g_multiplayer_poll_value_3_to_show", -1),
          (else_try),
            (assign, "$g_multiplayer_poll_value_2_to_show", -1),
            (assign, "$g_multiplayer_poll_value_3_to_show", -1),
          (try_end),
          (store_add, ":poll_disable_until", ":mission_timer", multiplayer_poll_disable_period),
          (player_set_slot, ":player_no", slot_player_poll_disabled_until_time, ":poll_disable_until"),
          (store_add, "$g_multiplayer_poll_end_time", ":mission_timer", 60),
          (get_max_players, ":num_players"),
          (try_for_range, ":cur_player", 0, ":num_players"),
            (player_is_active, ":cur_player"),
            (player_set_slot, ":cur_player", slot_player_can_answer_poll, 1),
            (val_add, "$g_multiplayer_poll_num_sent", 1),
            (multiplayer_send_4_int_to_player, ":cur_player", multiplayer_event_ask_for_poll, "$g_multiplayer_poll_to_show", "$g_multiplayer_poll_value_to_show", "$g_multiplayer_poll_value_2_to_show", "$g_multiplayer_poll_value_3_to_show"),
          (try_end),
        (try_end),
      (else_try),
        (eq, ":event_type", multiplayer_event_answer_to_poll),
        (try_begin),
          (store_script_param, ":value", 3),
          #validity check
          (eq, "$g_multiplayer_poll_running", 1),
          (is_between, ":value", 0, 2),
          (player_slot_eq, ":player_no", slot_player_can_answer_poll, 1),
          #condition checks are done
          (player_set_slot, ":player_no", slot_player_can_answer_poll, 0),
          (try_begin),
            (eq, ":value", 0),
            (val_add, "$g_multiplayer_poll_no_count", 1),
          (else_try),
            (eq, ":value", 1),
            (val_add, "$g_multiplayer_poll_yes_count", 1),
          (try_end),
        (try_end),
      (else_try),
        (eq, ":event_type", multiplayer_event_admin_kick_player),
        (try_begin),
          (store_script_param, ":value", 3),
          #validity check
          (player_is_admin, ":player_no"),
          (player_is_active, ":value"),
          #condition checks are done
          (kick_player, ":value"),
        (try_end),
      (else_try),
        (eq, ":event_type", multiplayer_event_admin_ban_player),
        (try_begin),
          (store_script_param, ":value", 3),
          #validity check
          (player_is_admin, ":player_no"),
          (player_is_active, ":value"),
          #condition checks are done
          (ban_player, ":value", 0, ":player_no"),
        (try_end),
      (else_try),
        (eq, ":event_type", multiplayer_event_admin_set_valid_vote_ratio),
        (try_begin),
          (store_script_param, ":value", 3),
          #validity check
          (player_is_admin, ":player_no"),
          (is_between, ":value", 50, 101),
          #condition checks are done
          (assign, "$g_multiplayer_valid_vote_ratio", ":value"),
        (try_end),
      (else_try),
        (eq, ":event_type", multiplayer_event_admin_set_auto_team_balance_limit),
        (try_begin),
          (store_script_param, ":value", 3),
          #validity check
          (player_is_admin, ":player_no"),
          (this_or_next|is_between, ":value", 2, 7),
          (eq, ":value", 1000),
          #condition checks are done
          (assign, "$g_multiplayer_auto_team_balance_limit", ":value"),
          (get_max_players, ":num_players"),
          (try_for_range, ":cur_player", 1, ":num_players"),
            (player_is_active, ":cur_player"),
            (multiplayer_send_int_to_player, ":cur_player", multiplayer_event_return_auto_team_balance_limit, ":value"),
          (try_end),
        (try_end),
      (else_try),
        (eq, ":event_type", multiplayer_event_admin_set_num_bots_voteable),
        (try_begin),
          (store_script_param, ":value", 3),
          #validity check
          (player_is_admin, ":player_no"),
          (is_between, ":value", 0, 51),
          (is_between, ":value", "$g_multiplayer_max_num_bots"),
          #condition checks are done
          (assign, "$g_multiplayer_num_bots_voteable", ":value"),
          (get_max_players, ":num_players"),
          (try_for_range, ":cur_player", 1, ":num_players"),
            (player_is_active, ":cur_player"),
            (multiplayer_send_int_to_player, ":cur_player", multiplayer_event_return_num_bots_voteable, ":value"),
          (try_end),
        (try_end),
      (else_try),
        (eq, ":event_type", multiplayer_event_admin_set_factions_voteable),
        (try_begin),
          (store_script_param, ":value", 3),
          #validity check
          (player_is_admin, ":player_no"),
          (is_between, ":value", 0, 2),
          #condition checks are done
          (assign, "$g_multiplayer_factions_voteable", ":value"),
          (get_max_players, ":num_players"),
          (try_for_range, ":cur_player", 1, ":num_players"),
            (player_is_active, ":cur_player"),
            (multiplayer_send_int_to_player, ":cur_player", multiplayer_event_return_factions_voteable, ":value"),
          (try_end),
        (try_end),
      (else_try),
        (eq, ":event_type", multiplayer_event_admin_set_maps_voteable),
        (try_begin),
          (store_script_param, ":value", 3),
          #validity check
          (player_is_admin, ":player_no"),
          (is_between, ":value", 0, 2),
          #condition checks are done
          (assign, "$g_multiplayer_maps_voteable", ":value"),
          (get_max_players, ":num_players"),
          (try_for_range, ":cur_player", 1, ":num_players"),
            (player_is_active, ":cur_player"),
            (multiplayer_send_int_to_player, ":cur_player", multiplayer_event_return_maps_voteable, ":value"),
          (try_end),
        (try_end),
      (else_try),
        (eq, ":event_type", multiplayer_event_admin_set_kick_voteable),
        (try_begin),
          (store_script_param, ":value", 3),
          #validity check
          (player_is_admin, ":player_no"),
          (is_between, ":value", 0, 2),
          #condition checks are done
          (assign, "$g_multiplayer_kick_voteable", ":value"),
          (get_max_players, ":num_players"),
          (try_for_range, ":cur_player", 1, ":num_players"),
            (player_is_active, ":cur_player"),
            (multiplayer_send_int_to_player, ":cur_player", multiplayer_event_return_kick_voteable, ":value"),
          (try_end),
        (try_end),
      (else_try),
        (eq, ":event_type", multiplayer_event_admin_set_ban_voteable),
        (try_begin),
          (store_script_param, ":value", 3),
          #validity check
          (player_is_admin, ":player_no"),
          (is_between, ":value", 0, 2),
          #condition checks are done
          (assign, "$g_multiplayer_ban_voteable", ":value"),
          (get_max_players, ":num_players"),
          (try_for_range, ":cur_player", 1, ":num_players"),
            (player_is_active, ":cur_player"),
            (multiplayer_send_int_to_player, ":cur_player", multiplayer_event_return_ban_voteable, ":value"),
          (try_end),
        (try_end),
      (else_try),
        (eq, ":event_type", multiplayer_event_admin_set_allow_player_banners),
        (try_begin),
          (store_script_param, ":value", 3),
          #validity check
          (player_is_admin, ":player_no"),
          (is_between, ":value", 0, 2),
          #condition checks are done
          (assign, "$g_multiplayer_allow_player_banners", ":value"),
        (try_end),
      (else_try),
        (eq, ":event_type", multiplayer_event_admin_set_force_default_armor),
        (try_begin),
          (store_script_param, ":value", 3),
          #validity check
          (player_is_admin, ":player_no"),
          (is_between, ":value", 0, 2),
          #condition checks are done
          (assign, "$g_multiplayer_force_default_armor", ":value"),
        (try_end),
      (else_try),
        (eq, ":event_type", multiplayer_event_offer_duel),
        (try_begin),
          (store_script_param, ":value", 3),
          #validity check
          (eq, "$g_multiplayer_game_type", multiplayer_game_type_duel),
          (agent_is_active, ":value"),
          (agent_is_alive, ":value"),
          (agent_is_human, ":value"),
          (player_get_agent_id, ":player_agent_no", ":player_no"),
          (agent_is_active, ":player_agent_no"),
          (agent_is_alive, ":player_agent_no"),
          (agent_get_position, pos0, ":player_agent_no"),
          (agent_get_position, pos1, ":value"),
          (get_sq_distance_between_positions_in_meters, ":agent_dist_sq", pos0, pos1),
          (le, ":agent_dist_sq", 49),
          #allow duelists to receive new offers
          (this_or_next|agent_check_offer_from_agent, ":player_agent_no", ":value"),
          (agent_slot_eq, ":player_agent_no", slot_agent_in_duel_with, -1),
          (neg|agent_slot_eq, ":player_agent_no", slot_agent_in_duel_with, ":value"), #don't allow spamming duel offers during countdown
          #condition checks are done
          (try_begin),
            #accepting a duel
            (agent_check_offer_from_agent, ":player_agent_no", ":value"),
            (call_script, "script_multiplayer_accept_duel", ":player_agent_no", ":value"),
          (else_try),
            #sending a duel request
            (assign, ":display_notification", 1),
            (try_begin),
              (agent_check_offer_from_agent, ":value", ":player_agent_no"),
              (assign, ":display_notification", 0),
            (try_end),
            (agent_add_offer_with_timeout, ":value", ":player_agent_no", 10000), #10 second timeout
            (agent_get_player_id, ":value_player", ":value"),
            (try_begin),
              (player_is_active, ":value_player"), #might be AI
              (try_begin),
                (eq, ":display_notification", 1),
                (multiplayer_send_int_to_player, ":value_player", multiplayer_event_show_duel_request, ":player_agent_no"),
              (try_end),
            (else_try),
              (call_script, "script_multiplayer_accept_duel", ":value", ":player_agent_no"),
            (try_end),
          (try_end),
        (try_end),
      (else_try),
        (eq, ":event_type", multiplayer_event_admin_set_disallow_ranged_weapons),
        (try_begin),
          (store_script_param, ":value", 3),
          #validity check
          (player_is_admin, ":player_no"),
          (is_between, ":value", 0, 2),
          #condition checks are done
          (assign, "$g_multiplayer_disallow_ranged_weapons", ":value"),
        (try_end),
      (else_try),
        (eq, ":event_type", multiplayer_event_admin_set_disallow_granades),
        (try_begin),
          (store_script_param, ":value", 3),
          #validity check
          (player_is_admin, ":player_no"),
          (is_between, ":value", 0, 2),
          #condition checks are done
          (assign, "$g_multiplayer_disallow_granades", ":value"),
		  (get_max_players, ":num_players"),
		  (try_for_range, ":cur_player", 1, ":num_players"),
            (player_is_active, ":cur_player"),
            (multiplayer_send_int_to_player, ":cur_player", multiplayer_event_return_disallow_granades, ":value"),
          (try_end),
        (try_end),
	  (else_try),
	    # MCA  new events			
			(eq, ":event_type", multiplayer_event_other_events),
			(store_script_param, ":value", 3),			
			(try_begin),
				(eq, ":value", multiplayer_event_other_admin_set_team_ratio),
				(try_begin),
					(store_script_param, ":value_2", 4),
					#validity check
					(player_is_admin, ":player_no"),
					(is_between, ":value_2", 1, 26), 
					(assign, "$g_multiplayer_team_ratio", ":value_2"),
					(get_max_players, ":num_players"),
					(try_for_range, ":cur_player", 1, ":num_players"),
						(player_is_active, ":cur_player"),
						(multiplayer_send_int_to_player, ":cur_player", multiplayer_event_return_team_ratio, ":value_2"),
					(try_end),
				(try_end),
			(else_try),
				(eq, ":value", multiplayer_event_other_admin_enable_cbf_squad_ratio),
				(try_begin),
					(store_script_param, ":value_2", 4),
					#validity check
					(player_is_admin, ":player_no"),					
					(assign, "$g_multiplayer_cbf_enable_squad_ratio", ":value_2"),
					(assign, reg0, "$g_multiplayer_cbf_enable_squad_ratio"),
					(server_get_max_num_players, ":max_num_players"),
					(try_for_range, ":cur_player", 1, ":max_num_players"),
						(player_is_active, ":cur_player"),
						(multiplayer_send_int_to_player, ":cur_player", multiplayer_event_return_cbf_squad_ratio, ":value_2"),
					(try_end),
				(try_end),
			(else_try), 
				(eq, ":value", multiplayer_event_other_admin_set_squad_size),
				(try_begin),				
					(store_script_param, ":squad_size", 4),
					
					#validity check
					(player_is_admin, ":player_no"),
					(neq, "$g_multiplayer_game_type", multiplayer_game_type_captain_coop), # squad size is fixed for coop
					(is_between, ":squad_size", 0, 26),
					(assign, "$g_multiplayer_squad_size", ":squad_size"),
					(get_max_players, ":num_max_players"),
					(try_for_range, ":cur_player", 1, ":num_max_players"),
						(player_is_active, ":cur_player"),
						(multiplayer_send_int_to_player, ":cur_player", multiplayer_event_return_squad_size, ":squad_size"),
					(try_end),
				(try_end),
			(else_try), 
				(eq, ":value", multiplayer_event_other_event_set_bot_purchase),
				(store_script_param, ":bot_slot", 4),
				(store_script_param, ":new_count", 5),
				(try_begin),
					(eq, "$g_multiplayer_is_game_type_captain", 1),
					(ge, ":new_count", 0),
					(player_get_team_no, ":player_team", ":player_no"),
					(team_get_faction, ":faction_no", ":player_team"),
					(store_sub, ":selected_troop_index", ":bot_slot", slot_player_captain_bot_data_begin),
					(call_script, "script_mp_get_troop_with_squad_index_for_player", ":player_no", ":selected_troop_index"),
					(assign, ":selected_troop", reg0),
					(this_or_next|is_between, ":selected_troop", captain_multiplayer_troops_begin, captain_multiplayer_troops_end),
					(is_between, ":selected_troop", captain_multiplayer_new_troops_begin, captain_multiplayer_new_troops_end),
					(store_troop_faction, ":trp_faction", ":selected_troop"),
					(eq, ":trp_faction", ":faction_no"), # unnecessary check, but do it anyways
					(call_script, "script_multiplayer_get_requested_squad_count", ":player_no"),
					(assign, ":requested_squad_count", reg0),
					(player_get_slot, ":old_value", ":player_no", ":bot_slot"),
					(val_sub, ":requested_squad_count", ":old_value"),
					(val_add, ":requested_squad_count", ":new_count"),
					(assign, ":continue", 0),
					(try_begin),
						(eq, "$g_multiplayer_game_type", multiplayer_game_type_captain_battle),
						(le, ":requested_squad_count", "$g_multiplayer_squad_size_calc"),
						(assign, ":continue", 1),
					(else_try),
						(le, ":requested_squad_count", "$g_multiplayer_squad_size"),
						(assign, ":continue", 1),
					(try_end),
					
					(eq, ":continue", 1),
					(player_set_slot, ":player_no", ":bot_slot", ":new_count"),
				(try_end),
			
			######## WAVE Mode Events
			(else_try),
				(this_or_next|eq, ":value", multiplayer_event_other_event_ccoop_count_down_visible),
				(eq, ":value", multiplayer_event_other_event_ccoop_count_down_invisible),
				(store_script_param, "$g_multiplayer_ccoop_enemy_respawn_secs", 4),								
				(store_script_param, "$g_multiplayer_ccoop_wave_no", 5),
				
				#
				#(assign, reg0, "$g_multiplayer_ccoop_enemy_respawn_secs"),
				#(assign, reg1, "$g_multiplayer_ccoop_wave_no"),
				#(try_begin),
				#  (eq, ":value", multiplayer_event_other_event_ccoop_count_down_visible),
				#  (display_debug_message, "@{!}multiplayer_event_other_event_ccoop_count_down_visible"),
				#(else_try),
				#  (display_debug_message, "@{!}AAAAAAAAAmultiplayer_event_other_event_ccoop_count_down_invisible"),
				#(try_end),
				#(assign, reg1, "$g_multiplayer_ccoop_wave_no"),
				#(display_debug_message, "@{!}ONEMLI SANIYE:{reg0} DALGA:{reg1}"),
				#
				
				(assign, "$g_multiplayer_ccoop_enable_count_down", 1),
				
				(try_begin),
					(eq, ":value", multiplayer_event_other_event_ccoop_count_down_visible),
					(assign, ":show_presentation", 1),
				(else_try),
					(eq, ":value", multiplayer_event_other_event_ccoop_count_down_invisible),
					(assign, ":show_presentation", 0),
				(try_end),
				
				(try_begin),
					(gt, ":show_presentation", 0),
					(store_mission_timer_a, "$g_multiplayer_ccoop_next_wave_start_time"),
					(val_add, "$g_multiplayer_ccoop_next_wave_start_time", "$g_multiplayer_ccoop_enemy_respawn_secs"),
					(start_presentation, "prsnt_multiplayer_ccoop_next_wave_time_counter"),
				(try_end),	
				
			(else_try),
				(eq, ":value", multiplayer_event_other_event_unequip_item),		
				(store_script_param, ":player_agent", 4),
				(store_script_param, ":agent_item", 5),
				(store_script_param, ":item_slot", 6),				
				(agent_unequip_item, ":player_agent", ":agent_item", ":item_slot"),
			(else_try),
				(eq, ":value", multiplayer_event_other_event_equip_item),		
				(store_script_param, ":player_agent", 4),
				(store_script_param, ":item_id", 5),				
				(agent_equip_item, ":player_agent", ":item_id"),
			#(else_try),
			#	(eq, ":value", multiplayer_event_other_event_ccoop_map_change),		
			#	(store_script_param, ":map_change_time", 4),
			#	
			#	(store_mission_timer_a, "$g_multiplayer_ccoop_next_wave_start_time"),
			#	(val_add, "$g_multiplayer_ccoop_next_wave_start_time", ":map_change_time"),
			#	(start_presentation, "prsnt_multiplayer_ccoop_change_map_time_counter"),
			(else_try),
				(eq, ":value", multiplayer_event_other_spawn_prison_cart),
				(store_script_param, "$g_prison_cart_point", 4),
				(store_script_param, ":door_hit_points", 5),
				
			#	(set_fixed_point_multiplier, 100),

			#	# set prison cart position
			#	(scene_prop_get_instance, ":prison_cart", "spr_prison_cart", 0),			
			#	(entry_point_get_position, pos1, "$g_prison_cart_point"),
			#	(position_move_y, pos1, -400), #4m back
			#	(prop_instance_set_position, ":prison_cart", pos1),
            #
			#	# place left door
			#	(scene_prop_get_instance, ":prison_cart_door_left", "spr_prison_cart_door_left", 0),
			#	(init_position, pos2),		
			#	(position_set_x, pos2, 84, 0),
			#	(position_set_y, pos2, -314, 0), 
			#	(position_set_z, pos2, 121, 0), 
			#	(position_transform_position_to_parent, pos3, pos1, pos2),
			#	(prop_instance_set_position, ":prison_cart_door_left", pos3),
			#	(scene_prop_set_hit_points, ":prison_cart_door_left", 300),
			#	
			#	# place right door
			#	(scene_prop_get_instance, ":prison_cart_door_right", "spr_prison_cart_door_right", 0),			
			#	(init_position, pos2),
			#	(position_set_x, pos2, -84, 0), 
			#	(position_set_y, pos2, -315, 0), 
			#	(position_set_z, pos2, 123, 0),
			#	(position_transform_position_to_parent, pos3, pos1, pos2),
			#	(prop_instance_set_position, ":prison_cart_door_right", pos3),
			#	(scene_prop_set_hit_points, ":prison_cart_door_right", 300),
				
				(call_script, "script_multiplayer_ccoop_set_prison_cart_visibility", 1),
				(scene_prop_get_instance, ":prison_cart_door_right", "spr_prison_cart_door_right", 0),
				(scene_prop_set_hit_points, ":prison_cart_door_right", ":door_hit_points"),
				(scene_prop_get_instance, ":prison_cart_door_left", "spr_prison_cart_door_left", 0),
				(scene_prop_set_hit_points, ":prison_cart_door_left", ":door_hit_points"),
				
				# display prison cart hint message to alive players
				(try_begin),
					(get_player_agent_no, ":player_agent"),
					(ge, ":player_agent", 0),
					(display_message, "str_prison_cart_hint"),
				(try_end),
				
				(start_presentation, "prsnt_multiplayer_ccoop_next_wave_time_counter"), # to display ask for help to respawn hint
				
			(else_try),			
				(eq, ":value", multiplayer_event_other_destroy_prison_cart),
								
				(call_script, "script_multiplayer_ccoop_set_prison_cart_visibility", 0),
				
				# animate doors
				(scene_prop_get_instance, ":prison_cart_door_left", "spr_prison_cart_door_left", 0),
				(scene_prop_get_instance, ":prison_cart_door_right", "spr_prison_cart_door_right", 0),
				
				(store_random_in_range, ":left_angle", 35, 80),
				(store_random_in_range, ":right_angle", -80, -35),
				(store_random_in_range, ":left_time", 100, 350),
				(store_random_in_range, ":right_time", 100, 350),
				
				(prop_instance_get_position, pos1, ":prison_cart_door_left"),
				(position_rotate_z, pos1, ":left_angle", 1),
				(prop_instance_animate_to_position, ":prison_cart_door_left", pos1, ":left_time"),
				
				(prop_instance_get_position, pos1, ":prison_cart_door_right"),
				(position_rotate_z, pos1, ":right_angle", 1),
				(prop_instance_animate_to_position, ":prison_cart_door_right", pos1, ":right_time"),
			(else_try),
				(eq, ":value", multiplayer_event_other_event_ccoop_update_spawn_data_1),
				(store_script_param, ":data1", 4),
				(store_script_param, ":data2", 5),
				(store_script_param, ":data3", 6),
				
				(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin, ":data1"),
				(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 1, ":data2"),
				(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 2, ":data3"),
			(else_try),
				(eq, ":value", multiplayer_event_other_event_ccoop_update_spawn_data_2),
				(store_script_param, ":data1", 4),
				(store_script_param, ":data2", 5),
				(store_script_param, ":data3", 6),
				
				(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 3, ":data1"),
				(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 4, ":data2"),
				(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 5, ":data3"),
			(else_try),
				(eq, ":value", multiplayer_event_other_event_ccoop_update_spawn_data_3),
				(store_script_param, ":data1", 4),
				(store_script_param, ":data2", 5),
				(store_script_param, ":data3", 6),
				
				(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 6, ":data1"),
				(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 7, ":data2"),
				(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 8, ":data3"),
			
			(else_try),
				(eq, ":value", multiplayer_event_other_event_ccoop_update_spawn_data_4),
				(store_script_param, ":data1", 4),
				(store_script_param, ":data2", 5),
				(store_script_param, ":data3", 6),
				
				(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 9, ":data1"),
				(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 10, ":data2"),
				(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 11, ":data3"),
			(else_try),
				(eq, ":value", multiplayer_event_other_event_ccoop_update_spawn_data_5),
				(store_script_param, ":data1", 4),
				(store_script_param, ":data2", 5),
				(store_script_param, ":data3", 6),
				
				(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 12, ":data1"),
				(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 13, ":data2"),
				(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 14, ":data3"),
			(else_try),
				(eq, ":value", multiplayer_event_other_event_ccoop_update_spawn_data_6),
				(store_script_param, ":data1", 4),				
				
				(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 15, ":data1"),

				(start_presentation, "prsnt_multiplayer_flag_projection_display_ccoop_wave"),
			(else_try),
				(eq, ":value", multiplayer_event_other_event_set_squad_size_calc),
				(store_script_param, "$g_multiplayer_squad_size_calc", 4),				
			(try_end),
			
      (else_try),
        ###############
        #CLIENT EVENTS#
        ###############
        (neg|multiplayer_is_dedicated_server),
        (try_begin),      
          (eq, ":event_type", multiplayer_event_return_renaming_server_allowed),
          (store_script_param, ":value", 3),
          (assign, "$g_multiplayer_renaming_server_allowed", ":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_changing_game_type_allowed),
          (store_script_param, ":value", 3),
          (assign, "$g_multiplayer_changing_game_type_allowed", ":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_max_num_players),
          (store_script_param, ":value", 3),
          (server_set_max_num_players, ":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_next_team_faction),
          (store_script_param, ":value", 3),
          (store_script_param, ":value_2", 4),
          (try_begin),
            (eq, ":value", 1),
            (assign, "$g_multiplayer_next_team_1_faction", ":value_2"),
          (else_try),
            (assign, "$g_multiplayer_next_team_2_faction", ":value_2"),
          (try_end),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_num_bots_in_team),
          (store_script_param, ":value", 3),
          (store_script_param, ":value_2", 4),
          (try_begin),
            (eq, ":value", 1),
            (assign, "$g_multiplayer_num_bots_team_1", ":value_2"),
          (else_try),
            (assign, "$g_multiplayer_num_bots_team_2", ":value_2"),
          (try_end),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_anti_cheat),
          (store_script_param, ":value", 3),
          (server_set_anti_cheat, ":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_friendly_fire),
          (store_script_param, ":value", 3),
          (server_set_friendly_fire, ":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_melee_friendly_fire),
          (store_script_param, ":value", 3),
          (server_set_melee_friendly_fire, ":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_friendly_fire_damage_self_ratio),
          (store_script_param, ":value", 3),
          (server_set_friendly_fire_damage_self_ratio, ":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_friendly_fire_damage_friend_ratio),
          (store_script_param, ":value", 3),
          (server_set_friendly_fire_damage_friend_ratio, ":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_ghost_mode),
          (store_script_param, ":value", 3),
          (server_set_ghost_mode, ":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_control_block_dir),
          (store_script_param, ":value", 3),
          (server_set_control_block_dir, ":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_add_to_servers_list),
          (store_script_param, ":value", 3),
          (server_set_add_to_game_servers_list, ":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_respawn_period),
          (store_script_param, ":value", 3),
          (assign, "$g_multiplayer_respawn_period", ":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_game_max_minutes),
          (store_script_param, ":value", 3),
          (assign, "$g_multiplayer_game_max_minutes", ":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_round_max_seconds),
          (store_script_param, ":value", 3),
          (assign, "$g_multiplayer_round_max_seconds", ":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_player_respawn_as_bot),
          (store_script_param, ":value", 3),
          (assign, "$g_multiplayer_player_respawn_as_bot", ":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_game_max_points),
          (store_script_param, ":value", 3),
          (assign, "$g_multiplayer_game_max_points", ":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_point_gained_from_flags),
          (store_script_param, ":value", 3),
          (assign, "$g_multiplayer_point_gained_from_flags", ":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_point_gained_from_capturing_flag),
          (store_script_param, ":value", 3),
          (assign, "$g_multiplayer_point_gained_from_capturing_flag", ":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_initial_gold_multiplier),
          (store_script_param, ":value", 3),
          (assign, "$g_multiplayer_initial_gold_multiplier", ":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_battle_earnings_multiplier),
          (store_script_param, ":value", 3),
          (assign, "$g_multiplayer_battle_earnings_multiplier", ":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_round_earnings_multiplier),
          (store_script_param, ":value", 3),
          (assign, "$g_multiplayer_round_earnings_multiplier", ":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_respawn_count),
          (store_script_param, ":value", 3),
          (assign, "$g_multiplayer_number_of_respawn_count", ":value"),          
        (else_try),
          (eq, ":event_type", multiplayer_event_return_server_name),
          (server_set_name, s0),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_game_password),
          (server_set_password, s0),
          #this is the last option in admin panel, so start the presentation
          (start_presentation, "prsnt_game_multiplayer_admin_panel"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_open_game_rules),
          #this is the last message for game rules, so start the presentation
          (assign, "$g_multiplayer_show_server_rules", 1),
          (start_presentation, "prsnt_multiplayer_welcome_message"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_game_type),
          (store_script_param, ":value", 3),
          (assign, "$g_multiplayer_game_type", ":value"),
		  (call_script, "script_multiplayer_set_g_multiplayer_is_game_type_captain"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_valid_vote_ratio),
          (store_script_param, ":value", 3),
          (assign, "$g_multiplayer_valid_vote_ratio", ":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_max_num_bots),
          (store_script_param, ":value", 3),
          (assign, "$g_multiplayer_max_num_bots", ":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_server_mission_timer_while_player_joined),
          (store_script_param, ":value", 3),
          (assign, "$server_mission_timer_while_player_joined", ":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_auto_team_balance_limit),
          (store_script_param, ":value", 3),
          (assign, "$g_multiplayer_auto_team_balance_limit", ":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_num_bots_voteable),
          (store_script_param, ":value", 3),
          (assign, "$g_multiplayer_num_bots_voteable", ":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_factions_voteable),
          (store_script_param, ":value", 3),
          (assign, "$g_multiplayer_factions_voteable", ":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_maps_voteable),
          (store_script_param, ":value", 3),
          (assign, "$g_multiplayer_maps_voteable", ":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_kick_voteable),
          (store_script_param, ":value", 3),
          (assign, "$g_multiplayer_kick_voteable", ":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_ban_voteable),
          (store_script_param, ":value", 3),
          (assign, "$g_multiplayer_ban_voteable", ":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_allow_player_banners),
          (store_script_param, ":value", 3),
          (assign, "$g_multiplayer_allow_player_banners", ":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_force_default_armor),
          (store_script_param, ":value", 3),
          (assign, "$g_multiplayer_force_default_armor", ":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_disallow_ranged_weapons),
          (store_script_param, ":value", 3),
          (assign, "$g_multiplayer_disallow_ranged_weapons", ":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_disallow_granades),
          (store_script_param, ":value", 3),
          (assign, "$g_multiplayer_disallow_granades", ":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_confirmation),
          (assign, "$g_confirmation_result", 1),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_rejection),
          (assign, "$g_confirmation_result", -1),
        (else_try),
          (eq, ":event_type", multiplayer_event_show_multiplayer_message),
          (store_script_param, ":value", 3),
          (store_script_param, ":value_2", 4),
          (call_script, "script_show_multiplayer_message", ":value", ":value_2"),
        (else_try),
          (eq, ":event_type", multiplayer_event_draw_this_round),
          (store_script_param, ":value", 3),          
          (call_script, "script_draw_this_round", ":value"),
        (else_try),
          (eq, ":event_type", multiplayer_event_set_attached_scene_prop),
          (store_script_param, ":value", 3),
          (store_script_param, ":value_2", 4),
          (call_script, "script_set_attached_scene_prop", ":value", ":value_2"), 
          (try_begin),
            (eq, "$g_multiplayer_game_type", multiplayer_game_type_capture_the_flag),
            (try_begin),
              (neq, ":value_2", -1),
              (agent_set_horse_speed_factor, ":value", 75),
            (else_try),
              (agent_set_horse_speed_factor, ":value", 100),
            (try_end),              
          (try_end),  
        (else_try),
          (eq, ":event_type", multiplayer_event_set_team_flag_situation),
          (store_script_param, ":value", 3),
          (store_script_param, ":value_2", 4),
          (call_script, "script_set_team_flag_situation", ":value", ":value_2"),
        (else_try),
          (eq, ":event_type", multiplayer_event_set_team_score),
          (store_script_param, ":value", 3),
          (store_script_param, ":value_2", 4),
          (call_script, "script_team_set_score", ":value", ":value_2"),
        (else_try),
          (eq, ":event_type", multiplayer_event_set_player_score_kill_death), 
          (store_script_param, ":value", 3),
          (store_script_param, ":value_2", 4),
          (store_script_param, ":value_3", 5),
          (store_script_param, ":value_4", 6),
          (call_script, "script_player_set_score", ":value", ":value_2"),
          (call_script, "script_player_set_kill_count", ":value", ":value_3"),
          (call_script, "script_player_set_death_count", ":value", ":value_4"),
        (else_try),
          (eq, ":event_type", multiplayer_event_set_num_agents_around_flag),
          (store_script_param, ":flag_no", 3),
          (store_script_param, ":current_owner_code", 4),
          (call_script, "script_set_num_agents_around_flag", ":flag_no", ":current_owner_code"),
        (else_try),
          (eq, ":event_type", multiplayer_event_ask_for_poll),
          (store_script_param, ":value", 3),
          (store_script_param, ":value_2", 4),
          (store_script_param, ":value_3", 5),
          (store_script_param, ":value_4", 6),
          (assign, ":continue_to_poll", 0),
          (try_begin),
            (this_or_next|eq, ":value", 1),
            (eq, ":value", 2),
            (player_is_active, ":value_2"), #might go offline before here
            (assign, ":continue_to_poll", 1),
          (else_try),
            (assign, ":continue_to_poll", 1),
          (try_end),
          (try_begin),
            (eq, ":continue_to_poll", 1),
            (assign, "$g_multiplayer_poll_to_show", ":value"),
            (assign, "$g_multiplayer_poll_value_to_show", ":value_2"),
            (assign, "$g_multiplayer_poll_value_2_to_show", ":value_3"),
            (assign, "$g_multiplayer_poll_value_3_to_show", ":value_4"),
            (store_mission_timer_a, ":mission_timer"),
            (store_add, "$g_multiplayer_poll_client_end_time", ":mission_timer", 60),
            (start_presentation, "prsnt_multiplayer_poll"),
          (try_end),
        (else_try),
          (eq, ":event_type", multiplayer_event_change_flag_owner),
          (store_script_param, ":flag_no", 3),
          (store_script_param, ":owner_code", 4),
          (call_script, "script_change_flag_owner", ":flag_no", ":owner_code"),
        (else_try),
          (eq, ":event_type", multiplayer_event_use_item),
          (store_script_param, ":value", 3),
          (store_script_param, ":value_2", 4),
          (call_script, "script_use_item", ":value", ":value_2"),
        (else_try),
          (eq, ":event_type", multiplayer_event_set_scene_prop_open_or_close),
          (store_script_param, ":instance_id", 3),       
        
          (scene_prop_set_slot, ":instance_id", scene_prop_open_or_close_slot, 1),

          (prop_instance_get_scene_prop_kind, ":scene_prop_id", ":instance_id"),

          (try_begin),
            (eq, ":scene_prop_id", "spr_winch_b"),
            (assign, ":effected_object", "spr_portcullis"),
          (else_try),
            (this_or_next|eq, ":scene_prop_id", "spr_castle_e_sally_door_a"),
            (this_or_next|eq, ":scene_prop_id", "spr_castle_f_sally_door_a"),     
            (this_or_next|eq, ":scene_prop_id", "spr_earth_sally_gate_left"),     
            (this_or_next|eq, ":scene_prop_id", "spr_earth_sally_gate_right"),     
            (this_or_next|eq, ":scene_prop_id", "spr_viking_keep_destroy_sally_door_left"),                             
            (this_or_next|eq, ":scene_prop_id", "spr_viking_keep_destroy_sally_door_right"),                             
            (this_or_next|eq, ":scene_prop_id", "spr_castle_f_door_a"),
            (this_or_next|eq, ":scene_prop_id", "spr_door_destructible"),
            (this_or_next|eq, ":scene_prop_id", "spr_castle_f_door_b"),
            (this_or_next|eq, ":scene_prop_id", "spr_siege_ladder_move_6m"),
            (this_or_next|eq, ":scene_prop_id", "spr_siege_ladder_move_8m"),
            (this_or_next|eq, ":scene_prop_id", "spr_siege_ladder_move_10m"),
            (this_or_next|eq, ":scene_prop_id", "spr_siege_ladder_move_12m"),
            (eq, ":scene_prop_id", "spr_siege_ladder_move_14m"),
            (assign, ":effected_object", ":scene_prop_id"),
          (try_end),

          (try_begin),
            (eq, ":effected_object", "spr_portcullis"),

            (assign, ":smallest_dist", -1),
            (prop_instance_get_position, pos0, ":instance_id"),
            (scene_prop_get_num_instances, ":num_instances_of_effected_object", ":effected_object"),     
            (try_for_range, ":cur_instance", 0, ":num_instances_of_effected_object"),
              (scene_prop_get_instance, ":cur_instance_id", ":effected_object", ":cur_instance"),
              (prop_instance_get_position, pos1, ":cur_instance_id"),
              (get_sq_distance_between_positions, ":dist", pos0, pos1),
              (this_or_next|eq, ":smallest_dist", -1),
              (lt, ":dist", ":smallest_dist"),
              (assign, ":smallest_dist", ":dist"),
              (assign, ":effected_object_instance_id", ":cur_instance_id"),
            (try_end),

            (ge, ":smallest_dist", 0),
            (prop_instance_is_animating, ":is_animating", ":effected_object_instance_id"),
            (eq, ":is_animating", 0),

            (prop_instance_get_starting_position, pos0, ":effected_object_instance_id"),      
            (position_move_z, pos0, 375),
            (prop_instance_animate_to_position, ":effected_object_instance_id", pos0, 1),
          (else_try),
            (this_or_next|eq, ":scene_prop_id", "spr_castle_e_sally_door_a"),
            (this_or_next|eq, ":scene_prop_id", "spr_castle_f_sally_door_a"),     
            (this_or_next|eq, ":scene_prop_id", "spr_earth_sally_gate_left"),     
            (this_or_next|eq, ":scene_prop_id", "spr_earth_sally_gate_right"),     
            (this_or_next|eq, ":scene_prop_id", "spr_viking_keep_destroy_sally_door_left"),     
            (this_or_next|eq, ":scene_prop_id", "spr_viking_keep_destroy_sally_door_right"),     
            (this_or_next|eq, ":scene_prop_id", "spr_castle_f_door_a"),
            (this_or_next|eq, ":scene_prop_id", "spr_door_destructible"),
            (eq, ":scene_prop_id", "spr_castle_f_door_b"),
            (assign, ":effected_object_instance_id", ":instance_id"),  
            (prop_instance_get_starting_position, pos0, ":effected_object_instance_id"),
            (position_rotate_z, pos0, -80),
            (prop_instance_animate_to_position, ":effected_object_instance_id", pos0, 1),
          (else_try),
            (assign, ":effected_object_instance_id", ":instance_id"),
            (prop_instance_is_animating, ":is_animating", ":effected_object_instance_id"),
            (eq, ":is_animating", 0),
            (prop_instance_get_starting_position, pos0, ":effected_object_instance_id"),      
            (prop_instance_animate_to_position, ":effected_object_instance_id", pos0, 1),          
          (try_end),
        (else_try),
          (eq, ":event_type", multiplayer_event_set_round_start_time),
          (store_script_param, ":value", 3),

          (try_begin),
            (neq, ":value", -9999),
            (assign, "$g_round_start_time", ":value"),
          (else_try),
            (store_mission_timer_a, "$g_round_start_time"),

            #if round start time is assigning to current time (so new round is starting) then also initialize moveable object slots too.
            (call_script, "script_initialize_scene_prop_slots", "spr_siege_ladder_move_6m"),
            (call_script, "script_initialize_scene_prop_slots", "spr_siege_ladder_move_8m"),
            (call_script, "script_initialize_scene_prop_slots", "spr_siege_ladder_move_10m"),
            (call_script, "script_initialize_scene_prop_slots", "spr_siege_ladder_move_12m"),
            (call_script, "script_initialize_scene_prop_slots", "spr_siege_ladder_move_14m"),
            (call_script, "script_initialize_scene_prop_slots", "spr_winch_b"),         
			
			(call_script, "script_mp_calculate_auto_squad_size"),
          (try_end),
        (else_try),
          (eq, ":event_type", multiplayer_event_force_start_team_selection),
          (try_begin),
            (is_presentation_active, "prsnt_multiplayer_item_select"),
            (assign, "$g_close_equipment_selection", 1),
          (try_end),
          (start_presentation, "prsnt_multiplayer_troop_select"),
        (else_try),     
          (eq, ":event_type", multiplayer_event_start_death_mode),
          (assign, "$g_battle_death_mode_started", 2),
          (start_presentation, "prsnt_multiplayer_flag_projection_display_bt"),
          (call_script, "script_start_death_mode"),
        (else_try),
          (eq, ":event_type", multiplayer_event_return_player_respawn_spent),
          (store_script_param, ":value", 3),
          (try_begin),
            (gt, "$g_my_spawn_count", 0),
            (store_add, "$g_my_spawn_count", "$g_my_spawn_count", ":value"),
          (else_try),
            (assign, "$g_my_spawn_count", ":value"),      
          (try_end),
        (else_try),
          (eq, ":event_type", multiplayer_event_show_duel_request),
          (store_script_param, ":value", 3),
          (try_begin),
            (agent_is_active, ":value"),
            (agent_get_player_id, ":value_player_no", ":value"),
            (try_begin),
              (player_is_active, ":value_player_no"),
              (str_store_player_username, s0, ":value_player_no"),
            (else_try),
              (str_store_agent_name, s0, ":value"),
            (try_end),
            (display_message, "str_s0_offers_a_duel_with_you"),
            (try_begin),
              (get_player_agent_no, ":player_agent"),
              (agent_is_active, ":player_agent"),
              (agent_add_offer_with_timeout, ":player_agent", ":value", 10000), #10 second timeout
            (try_end),
          (try_end),
        (else_try),
          (eq, ":event_type", multiplayer_event_start_duel),
          (store_script_param, ":value", 3),
          (store_mission_timer_a, ":mission_timer"),
          (try_begin),
            (agent_is_active, ":value"),
            (get_player_agent_no, ":player_agent"),
            (agent_is_active, ":player_agent"),
            (agent_get_player_id, ":value_player_no", ":value"),
            (try_begin),
              (player_is_active, ":value_player_no"),
              (str_store_player_username, s0, ":value_player_no"),
            (else_try),
              (str_store_agent_name, s0, ":value"),
            (try_end),
            (display_message, "str_a_duel_between_you_and_s0_will_start_in_3_seconds"),
            (assign, "$g_multiplayer_duel_start_time", ":mission_timer"),
            (start_presentation, "prsnt_multiplayer_duel_start_counter"),
            (agent_set_slot, ":player_agent", slot_agent_in_duel_with, ":value"),
            (agent_set_slot, ":value", slot_agent_in_duel_with, ":player_agent"),
            (agent_set_slot, ":player_agent", slot_agent_duel_start_time, ":mission_timer"),
            (agent_set_slot, ":value", slot_agent_duel_start_time, ":mission_timer"),
            (agent_clear_relations_with_agents, ":player_agent"),
            (agent_clear_relations_with_agents, ":value"),
##            (agent_add_relation_with_agent, ":player_agent", ":value", -1),
          (try_end),
        (else_try),
          (eq, ":event_type", multiplayer_event_cancel_duel),
          (store_script_param, ":value", 3),
          (try_begin),
            (agent_is_active, ":value"),
            (agent_get_player_id, ":value_player_no", ":value"),
            (try_begin),
              (player_is_active, ":value_player_no"),
              (str_store_player_username, s0, ":value_player_no"),
            (else_try),
              (str_store_agent_name, s0, ":value"),
            (try_end),
            (display_message, "str_your_duel_with_s0_is_cancelled"),
          (try_end),
          (try_begin),
            (get_player_agent_no, ":player_agent"),
            (agent_is_active, ":player_agent"),
            (agent_set_slot, ":player_agent", slot_agent_in_duel_with, -1),
            (agent_clear_relations_with_agents, ":player_agent"),
          (try_end),
        (else_try),
          (eq, ":event_type", multiplayer_event_show_server_message),
          (display_message, "str_server_s0", 0xFFFF6666),
		#OiM events  
		(else_try), 
		  (eq, ":event_type", multiplayer_event_return_set_bot_selection),
		  (store_script_param, ":slot_no", 3),
		  (store_script_param, ":value", 4),
          (is_between, ":slot_no", slot_player_bot_type_1_wanted, slot_player_bot_type_4_wanted + 1),
          (is_between, ":value", 0, 2),
		  (player_set_slot, ":player_no", ":slot_no", ":value"),
		(else_try), 
          (eq, ":event_type", multiplayer_event_return_squad_size),
          (store_script_param, ":value", 3),
		  (assign, "$g_multiplayer_squad_size", ":value"),		  
		(else_try), 
          (eq, ":event_type", multiplayer_event_return_team_ratio),
          (store_script_param, ":value", 3),
		  (assign, "$g_multiplayer_team_ratio", ":value"),	
		(else_try), 
          (eq, ":event_type", multiplayer_event_return_cbf_squad_ratio),
          (store_script_param, ":value", 3),
		  (assign, "$g_multiplayer_cbf_enable_squad_ratio", ":value"),			  
        (else_try),
          (eq, ":event_type", multiplayer_event_return_sound_at_pos),
          (store_script_param, ":xvalue", 3),
          (store_script_param, ":yvalue", 4),
          (store_script_param, ":zvalue", 5),
          (store_script_param, ":sound_id", 6),
          
          (try_begin),
            (is_between, ":sound_id", 0, "snd_sounds_end"), # Valid sound
            
            (set_fixed_point_multiplier, 100),
            (init_position, pos1),
            (position_set_x, pos1, ":xvalue"),
            (position_set_y, pos1, ":yvalue"),
            (position_set_z, pos1, ":zvalue"),
            
            (play_sound_at_position, ":sound_id", pos1),
          (try_end),
        (try_end),
      (try_end),
     ]), 

  # script_cf_multiplayer_evaluate_poll
  # Input: none
  # Output: none (can fail)
  ("cf_multiplayer_evaluate_poll",
   [
     (assign, ":result", 0),
     (assign, "$g_multiplayer_poll_ended", 1),
     (store_add, ":total_votes", "$g_multiplayer_poll_yes_count", "$g_multiplayer_poll_no_count"),
     (store_sub, ":abstain_votes", "$g_multiplayer_poll_num_sent", ":total_votes"),
     (store_mul, ":nos_from_abstains", 3, ":abstain_votes"),
     (val_div, ":nos_from_abstains", 10), #30% of abstains are counted as no
     (val_add, ":total_votes", ":nos_from_abstains"),
     (val_max, ":total_votes", 1), #if someone votes and only 1-3 abstain occurs?
     (store_mul, ":vote_ratio", 100, "$g_multiplayer_poll_yes_count"),
     (val_div, ":vote_ratio", ":total_votes"),
     (try_begin),
       (ge, ":vote_ratio", "$g_multiplayer_valid_vote_ratio"),
       (assign, ":result", 1),
       (try_begin),
         (eq, "$g_multiplayer_poll_to_show", 1), #kick player
         (try_begin),
           (player_is_active, "$g_multiplayer_poll_value_to_show"),
           (kick_player, "$g_multiplayer_poll_value_to_show"),
         (try_end),
       (else_try),
         (eq, "$g_multiplayer_poll_to_show", 2), #ban player
         (ban_player_using_saved_ban_info), #already loaded at the beginning of the poll
       (else_try),
         (eq, "$g_multiplayer_poll_to_show", 3), #change map with factions
         (team_set_faction, 0, "$g_multiplayer_poll_value_2_to_show"),
         (team_set_faction, 1, "$g_multiplayer_poll_value_3_to_show"),
       (else_try),
         (eq, "$g_multiplayer_poll_to_show", 4), #change number of bots
         (assign, "$g_multiplayer_num_bots_team_1", "$g_multiplayer_poll_value_to_show"),
         (assign, "$g_multiplayer_num_bots_team_2", "$g_multiplayer_poll_value_2_to_show"),
         (get_max_players, ":num_players"),                               
         (try_for_range, ":cur_player", 1, ":num_players"),
           (player_is_active, ":cur_player"),
           (multiplayer_send_2_int_to_player, ":cur_player", multiplayer_event_return_num_bots_in_team, 1, "$g_multiplayer_num_bots_team_1"),
           (multiplayer_send_2_int_to_player, ":cur_player", multiplayer_event_return_num_bots_in_team, 2, "$g_multiplayer_num_bots_team_2"),
         (try_end),
       (try_end),
     (else_try),
       (assign, "$g_multiplayer_poll_running", 0), #end immediately if poll fails. but end after some time if poll succeeds (apply the results first)
     (try_end),
     (get_max_players, ":num_players"),
     #for only server itself-----------------------------------------------------------------------------------------------
     (call_script, "script_show_multiplayer_message", multiplayer_message_type_poll_result, ":result"), #0 is useless here
     #for only server itself-----------------------------------------------------------------------------------------------     
     (try_for_range, ":cur_player", 1, ":num_players"),
       (player_is_active, ":cur_player"),
       (multiplayer_send_2_int_to_player, ":cur_player", multiplayer_event_show_multiplayer_message, multiplayer_message_type_poll_result, ":result"),
     (try_end),
     (eq, ":result", 1),
     ]),

  # script_multiplayer_accept_duel
  # Input: arg1 = agent_no, arg2 = agent_no_offerer
  # Output: none
  ("multiplayer_accept_duel",
   [
     (store_script_param, ":agent_no", 1),
     (store_script_param, ":agent_no_offerer", 2),
     (try_begin),
       (agent_slot_ge, ":agent_no", slot_agent_in_duel_with, 0),
       (agent_get_slot, ":ex_duelist", ":agent_no", slot_agent_in_duel_with),
       (agent_is_active, ":ex_duelist"),
       (agent_clear_relations_with_agents, ":ex_duelist"),
       (agent_set_slot, ":ex_duelist", slot_agent_in_duel_with, -1),
       (agent_get_player_id, ":player_no", ":ex_duelist"),
       (try_begin),
         (player_is_active, ":player_no"), #might be AI
         (multiplayer_send_int_to_player, ":player_no", multiplayer_event_cancel_duel, ":agent_no"),
       (else_try),
         (agent_force_rethink, ":ex_duelist"),
       (try_end),
     (try_end),
     (try_begin),
       (agent_slot_ge, ":agent_no_offerer", slot_agent_in_duel_with, 0),
       (agent_get_slot, ":ex_duelist", ":agent_no_offerer", slot_agent_in_duel_with),
       (agent_is_active, ":ex_duelist"),
       (agent_clear_relations_with_agents, ":ex_duelist"),
       (agent_set_slot, ":ex_duelist", slot_agent_in_duel_with, -1),
       (try_begin),
         (player_is_active, ":player_no"), #might be AI
         (multiplayer_send_int_to_player, ":player_no", multiplayer_event_cancel_duel, ":agent_no_offerer"),
       (else_try),
         (agent_force_rethink, ":ex_duelist"),
       (try_end),
     (try_end),
     (agent_set_slot, ":agent_no", slot_agent_in_duel_with, ":agent_no_offerer"),
     (agent_set_slot, ":agent_no_offerer", slot_agent_in_duel_with, ":agent_no"),
     (agent_clear_relations_with_agents, ":agent_no"),
     (agent_clear_relations_with_agents, ":agent_no_offerer"),
##     (agent_add_relation_with_agent, ":agent_no", ":agent_no_offerer", -1),
##     (agent_add_relation_with_agent, ":agent_no_offerer", ":agent_no", -1),
     (agent_get_player_id, ":player_no", ":agent_no"),
     (store_mission_timer_a, ":mission_timer"),
     (try_begin),
       (player_is_active, ":player_no"), #might be AI
       (multiplayer_send_int_to_player, ":player_no", multiplayer_event_start_duel, ":agent_no_offerer"),
     (else_try),
       (agent_force_rethink, ":agent_no"),
     (try_end),
     (agent_set_slot, ":agent_no", slot_agent_duel_start_time, ":mission_timer"),
     (agent_get_player_id, ":agent_no_offerer_player", ":agent_no_offerer"),
     (try_begin),
       (player_is_active, ":agent_no_offerer_player"), #might be AI
       (multiplayer_send_int_to_player, ":agent_no_offerer_player", multiplayer_event_start_duel, ":agent_no"),
     (else_try),
       (agent_force_rethink, ":agent_no_offerer"),
     (try_end),
     (agent_set_slot, ":agent_no_offerer", slot_agent_duel_start_time, ":mission_timer"),
     ]),

  # script_game_get_multiplayer_server_option_for_mission_template
  # Input: arg1 = mission_template_id, arg2 = option_index
  # Output: trigger_result = 1 for option available, 0 for not available
  #         reg0 = option_value
  ("game_get_multiplayer_server_option_for_mission_template",
   [
     (store_script_param, ":mission_template_id", 1),
     (store_script_param, ":option_index", 2),
     (try_begin),
       (eq, ":option_index", 0),
       (assign, reg0, "$g_multiplayer_team_1_faction"),
       (set_trigger_result, 1),
     (else_try),
	   (try_begin),
		 (eq, ":mission_template_id", "mt_multiplayer_ccoop"),
         (val_add, ":option_index", 1),
       (try_end),
       (eq, ":option_index", 1),
       (assign, reg0, "$g_multiplayer_team_2_faction"),
       (set_trigger_result, 1),
     (else_try),
	   (try_begin),
		 (eq, ":mission_template_id", "mt_multiplayer_ccoop"),
         (val_add, ":option_index", 1),
       (try_end),
       (eq, ":option_index", 2),
       (assign, reg0, "$g_multiplayer_num_bots_team_1"),
       (set_trigger_result, 1),
     (else_try),
	   (try_begin),
		 (eq, ":mission_template_id", "mt_multiplayer_ccoop"),
         (val_add, ":option_index", 1),
       (try_end),
       (eq, ":option_index", 3),
       (assign, reg0, "$g_multiplayer_num_bots_team_2"),
       (set_trigger_result, 1),
     (else_try),
       (eq, ":option_index", 4),
       (server_get_friendly_fire, reg0),
       (set_trigger_result, 1),
     (else_try),
       (eq, ":option_index", 5),
       (server_get_melee_friendly_fire, reg0),
       (set_trigger_result, 1),
     (else_try),
       (eq, ":option_index", 6),
       (server_get_friendly_fire_damage_self_ratio, reg0),
       (set_trigger_result, 1),
     (else_try),
       (eq, ":option_index", 7),
       (server_get_friendly_fire_damage_friend_ratio, reg0),
       (set_trigger_result, 1),
     (else_try),
       (eq, ":option_index", 8),
       (server_get_ghost_mode, reg0),
       (set_trigger_result, 1),
     (else_try),
       (eq, ":option_index", 9),
       (server_get_control_block_dir, reg0),
       (set_trigger_result, 1),
     (else_try),
       (eq, ":option_index", 10),
       (server_get_combat_speed, reg0),
       (set_trigger_result, 1),
     (else_try),
       (try_begin),
         (this_or_next|eq, ":mission_template_id", "mt_multiplayer_hq"),
		 (eq, ":mission_template_id", "mt_multiplayer_ccoop"),
         (val_add, ":option_index", 1), #max game time
       (try_end),
       (eq, ":option_index", 11),
       (assign, reg0, "$g_multiplayer_game_max_minutes"),
       (set_trigger_result, 1),
     (else_try),
       (try_begin),
         (neq, ":mission_template_id", "mt_multiplayer_bt"),
         (neq, ":mission_template_id", "mt_multiplayer_cbt"),
##         (neq, ":mission_template_id", "mt_multiplayer_fd"),
         (neq, ":mission_template_id", "mt_multiplayer_sg"),
         (val_add, ":option_index", 1), #max round time
       (try_end),
       (eq, ":option_index", 12),
       (assign, reg0, "$g_multiplayer_round_max_seconds"),
       (set_trigger_result, 1),
     (else_try),
       (try_begin),
         (neq, ":mission_template_id", "mt_multiplayer_bt"),
         (neq, ":mission_template_id", "mt_multiplayer_cbt"),
##         (neq, ":mission_template_id", "mt_multiplayer_fd"),
         (val_add, ":option_index", 1), #respawn as bot
       (try_end),
       (eq, ":option_index", 13),
       (assign, reg0, "$g_multiplayer_player_respawn_as_bot"),
       (set_trigger_result, 1),
     (else_try),
       (try_begin),
         (neq, ":mission_template_id", "mt_multiplayer_sg"),
         (val_add, ":option_index", 1), #respawn limit
       (try_end),
       (eq, ":option_index", 14),
       (assign, reg0, "$g_multiplayer_number_of_respawn_count"),
       (set_trigger_result, 1),
     (else_try),
	   (try_begin),
         (eq, ":mission_template_id", "mt_multiplayer_ccoop"),
         (val_add, ":option_index", 1),
       (try_end),
       (eq, ":option_index", 15),
       (assign, reg0, "$g_multiplayer_game_max_points"),
       (set_trigger_result, 1),
     (else_try),
       (try_begin),
         (neq, ":mission_template_id", "mt_multiplayer_hq"),
         (val_add, ":option_index", 1), #point gained from flags
       (try_end),
       (eq, ":option_index", 16),
       (assign, reg0, "$g_multiplayer_point_gained_from_flags"),
       (set_trigger_result, 1),
     (else_try),
       (try_begin),
         (neq, ":mission_template_id", "mt_multiplayer_cf"),
         (val_add, ":option_index", 1), #point gained from capturing flag
       (try_end),
       (eq, ":option_index", 17),
       (assign, reg0, "$g_multiplayer_point_gained_from_capturing_flag"),
       (set_trigger_result, 1),
     (else_try),
	   (try_begin),
		 (eq, ":mission_template_id", "mt_multiplayer_ccoop"),
         (val_add, ":option_index", 1),
       (try_end),
       (eq, ":option_index", 18),
       (assign, reg0, "$g_multiplayer_respawn_period"),
       (set_trigger_result, 1),
     (else_try),
       (eq, ":option_index", 19),
       (assign, reg0, "$g_multiplayer_initial_gold_multiplier"),
       (set_trigger_result, 1),
     (else_try),
       (eq, ":option_index", 20),
       (assign, reg0, "$g_multiplayer_battle_earnings_multiplier"),
       (set_trigger_result, 1),
     (else_try),
       (try_begin),
         (neq, ":mission_template_id", "mt_multiplayer_bt"),
##         (neq, ":mission_template_id", "mt_multiplayer_fd"),
         (neq, ":mission_template_id", "mt_multiplayer_sg"),
         (val_add, ":option_index", 1),
       (try_end),
       (eq, ":option_index", 21),
       (assign, reg0, "$g_multiplayer_round_earnings_multiplier"),
       (set_trigger_result, 1),
	 (else_try), 
	   (eq, ":option_index", 22),
       (assign, reg0, "$g_multiplayer_disallow_granades"),	   
	   (set_trigger_result, 1),
	 (else_try), 
	   (try_begin), 
	     (neq, ":mission_template_id", "mt_multiplayer_ctdm"), 
	     (neq, ":mission_template_id", "mt_multiplayer_ccoop"),  
	     (neq, ":mission_template_id", "mt_multiplayer_cbt"),  
	     (neq, ":mission_template_id", "mt_multiplayer_csg"), 
		 (val_add, ":option_index", 1),
	   (try_end), 
	   (eq, ":option_index", 23),
	   (assign, reg0, "$g_multiplayer_squad_size"),
	   (set_trigger_result, 1),
     (try_end),
     ]),

  # script_game_multiplayer_server_option_for_mission_template_to_string
  # Input: arg1 = mission_template_id, arg2 = option_index, arg3 = option_value
  # Output: s0 = option_text
  ("game_multiplayer_server_option_for_mission_template_to_string",
   [
     (store_script_param, ":mission_template_id", 1),
     (store_script_param, ":option_index", 2),
     (store_script_param, ":option_value", 3),
     (str_clear, s0),
     (try_begin),
       (eq, ":option_index", 0),
       (assign, reg1, 1),
       (str_store_string, s0, "str_team_reg1_faction"),
       (str_store_faction_name, s1, ":option_value"),
       (str_store_string, s0, "str_s0_s1"),
     (else_try),
	   (try_begin), 
	     (eq, ":mission_template_id", "mt_multiplayer_ccoop"), 
		 (val_add, ":option_index", 1),
	   (try_end),
       (eq, ":option_index", 1),
       (assign, reg1, 2),
       (str_store_string, s0, "str_team_reg1_faction"),
       (str_store_faction_name, s1, ":option_value"),
       (str_store_string, s0, "str_s0_s1"),
     (else_try),
	   (try_begin), 
	     (eq, ":mission_template_id", "mt_multiplayer_ccoop"), 
		 (val_add, ":option_index", 1),
	   (try_end),
       (eq, ":option_index", 2),
       (assign, reg1, 1),
       (str_store_string, s0, "str_number_of_bots_in_team_reg1"),
       (assign, reg0, ":option_value"),
       (str_store_string, s0, "str_s0_reg0"),
     (else_try),
	   (try_begin), 
	     (eq, ":mission_template_id", "mt_multiplayer_ccoop"), 
		 (val_add, ":option_index", 1),
	   (try_end),
       (eq, ":option_index", 3),
       (assign, reg1, 2),
       (str_store_string, s0, "str_number_of_bots_in_team_reg1"),
       (assign, reg0, ":option_value"),
       (str_store_string, s0, "str_s0_reg0"),
     (else_try),
       (eq, ":option_index", 4),
       (str_store_string, s0, "str_allow_friendly_fire"),
       (try_begin),
         (eq, ":option_value", 0),
         (str_store_string, s1, "str_no_wo_dot"),
       (else_try),
         (str_store_string, s1, "str_yes_wo_dot"),
       (try_end),
       (str_store_string, s0, "str_s0_s1"),
     (else_try),
       (eq, ":option_index", 5),
       (str_store_string, s0, "str_allow_melee_friendly_fire"),
       (try_begin),
         (eq, ":option_value", 0),
         (str_store_string, s1, "str_no_wo_dot"),
       (else_try),
         (str_store_string, s1, "str_yes_wo_dot"),
       (try_end),
       (str_store_string, s0, "str_s0_s1"),
     (else_try),
       (eq, ":option_index", 6),
       (str_store_string, s0, "str_friendly_fire_damage_self_ratio"),
       (assign, reg0, ":option_value"),
       (str_store_string, s0, "str_s0_reg0"),
     (else_try),
       (eq, ":option_index", 7),
       (str_store_string, s0, "str_friendly_fire_damage_friend_ratio"),
       (assign, reg0, ":option_value"),
       (str_store_string, s0, "str_s0_reg0"),
     (else_try),
       (eq, ":option_index", 8),
       (str_store_string, s0, "str_spectator_camera"),
       (try_begin),
         (eq, ":option_value", 0),
         (str_store_string, s1, "str_free"),
       (else_try),
         (eq, ":option_value", 1),
         (str_store_string, s1, "str_stick_to_any_player"),
       (else_try),
         (eq, ":option_value", 2),
         (str_store_string, s1, "str_stick_to_team_members"),
       (else_try),
         (str_store_string, s1, "str_stick_to_team_members_view"),
       (try_end),
       (str_store_string, s0, "str_s0_s1"),
     (else_try),
       (eq, ":option_index", 9),
       (str_store_string, s0, "str_control_block_direction"),
       (try_begin),
         (eq, ":option_value", 0),
         (str_store_string, s1, "str_automatic"),
       (else_try),
         (str_store_string, s1, "str_by_mouse_movement"),
       (try_end),
       (str_store_string, s0, "str_s0_s1"),
     (else_try),
       (eq, ":option_index", 10),
       (str_store_string, s0, "str_combat_speed"),
       (try_begin),
         (eq, ":option_value", 0),
         (str_store_string, s1, "str_combat_speed_0"),
       (else_try),
         (eq, ":option_value", 1),
         (str_store_string, s1, "str_combat_speed_1"),
       (else_try),
         (eq, ":option_value", 2),
         (str_store_string, s1, "str_combat_speed_2"),
       (else_try),
         (eq, ":option_value", 3),
         (str_store_string, s1, "str_combat_speed_3"),
       (else_try),
         (str_store_string, s1, "str_combat_speed_4"),
       (try_end),
       (str_store_string, s0, "str_s0_s1"),
     (else_try),
       (try_begin),
         (this_or_next|eq, ":mission_template_id", "mt_multiplayer_hq"),
		 (eq, ":mission_template_id", "mt_multiplayer_ccoop"),
         (val_add, ":option_index", 1), #max game time
       (try_end),
       (eq, ":option_index", 11),
       (str_store_string, s0, "str_map_time_limit"),
       (assign, reg0, ":option_value"),
       (str_store_string, s0, "str_s0_reg0"),
     (else_try),
       (try_begin),
         (neq, ":mission_template_id", "mt_multiplayer_bt"),
         (neq, ":mission_template_id", "mt_multiplayer_cbt"),
##         (neq, ":mission_template_id", "mt_multiplayer_fd"),
         (neq, ":mission_template_id", "mt_multiplayer_sg"),
         (val_add, ":option_index", 1), #max round time
       (try_end),
       (eq, ":option_index", 12),
       (str_store_string, s0, "str_round_time_limit"),
       (assign, reg0, ":option_value"),
       (str_store_string, s0, "str_s0_reg0"),
     (else_try),
       (try_begin),
         (neq, ":mission_template_id", "mt_multiplayer_bt"),
         (neq, ":mission_template_id", "mt_multiplayer_cbt"),
##         (neq, ":mission_template_id", "mt_multiplayer_fd"),
         (val_add, ":option_index", 1), #respawn as bot
       (try_end),
       (eq, ":option_index", 13),
       (str_store_string, s0, "str_players_take_control_of_a_bot_after_death"),
       (try_begin),
         (eq, ":option_value", 0),
         (str_store_string, s1, "str_no_wo_dot"),
       (else_try),
         (str_store_string, s1, "str_yes_wo_dot"),
       (try_end),
       (str_store_string, s0, "str_s0_s1"),
     (else_try),
       (try_begin),
         (neq, ":mission_template_id", "mt_multiplayer_sg"),
         (val_add, ":option_index", 1), #respawn limit
       (try_end),
       (eq, ":option_index", 14),
       (str_store_string, s0, "str_defender_spawn_count_limit"),
       (try_begin),
         (eq, ":option_value", 0),
         (str_store_string, s1, "str_unlimited"),
       (else_try),
         (assign, reg1, ":option_value"),
         (str_store_string, s1, "str_reg1"),
       (try_end),
       (str_store_string, s0, "str_s0_s1"),
     (else_try),
	   (try_begin), 
	     (eq, ":mission_template_id", "mt_multiplayer_ccoop"), 
		 (val_add, ":option_index", 1),
	   (try_end),
       (eq, ":option_index", 15),
       (str_store_string, s0, "str_team_points_limit"),
       (assign, reg0, ":option_value"),
       (str_store_string, s0, "str_s0_reg0"),
     (else_try),
       (try_begin),
         (neq, ":mission_template_id", "mt_multiplayer_hq"),
         (val_add, ":option_index", 1), #point gained from flags
       (try_end),
       (eq, ":option_index", 16),
       (str_store_string, s0, "str_point_gained_from_flags"),
       (assign, reg0, ":option_value"),
       (str_store_string, s0, "str_s0_reg0"),
     (else_try),
       (try_begin),
         (neq, ":mission_template_id", "mt_multiplayer_cf"),
         (val_add, ":option_index", 1), #point gained from capturing flag
       (try_end),
       (eq, ":option_index", 17),
       (str_store_string, s0, "str_point_gained_from_capturing_flag"),
       (assign, reg0, ":option_value"),
       (str_store_string, s0, "str_s0_reg0"),
     (else_try),
	   (try_begin), 
	     (eq, ":mission_template_id", "mt_multiplayer_ccoop"), 
		 (val_add, ":option_index", 1),
	   (try_end),
       (eq, ":option_index", 18),
       (str_store_string, s0, "str_respawn_period"),
       (assign, reg0, ":option_value"),
       (str_store_string, s0, "str_s0_reg0"),
     (else_try),
       (eq, ":option_index", 19),
       (str_store_string, s0, "str_initial_gold_multiplier"),
       (assign, reg0, ":option_value"),
       (str_store_string, s0, "str_s0_reg0"),
     (else_try),
       (eq, ":option_index", 20),
       (str_store_string, s0, "str_battle_earnings_multiplier"),
       (assign, reg0, ":option_value"),
       (str_store_string, s0, "str_s0_reg0"),
     (else_try),
       (try_begin),
         (neq, ":mission_template_id", "mt_multiplayer_bt"),
##         (neq, ":mission_template_id", "mt_multiplayer_fd"),
         (neq, ":mission_template_id", "mt_multiplayer_sg"),
         (val_add, ":option_index", 1),
       (try_end),
       (eq, ":option_index", 21),
       (str_store_string, s0, "str_round_earnings_multiplier"),
       (assign, reg0, ":option_value"),
       (str_store_string, s0, "str_s0_reg0"),
	 (else_try), 
	   (eq, ":option_index", 22),
	   (try_begin), 
         (eq, ":option_value", 0),
         (str_store_string, s0, "str_granades_are_allowed"),
       (else_try),
         (str_store_string, s0, "str_granades_are_disallowed"),	
	   (try_end), 
	 (else_try), 
	   (try_begin), 
	     (neq, ":mission_template_id", "mt_multiplayer_ccoop"), 
	     (neq, ":mission_template_id", "mt_multiplayer_cbt"), 
	     (neq, ":mission_template_id", "mt_multiplayer_ctdm"), 
	     (neq, ":mission_template_id", "mt_multiplayer_csg"), 
		 (val_add, ":option_index", 1),
	   (try_end), 
	   (eq, ":option_index", 23),
	   (assign, reg0, ":option_value"),
       (str_store_string, s0, "str_s0_reg0"),
	   (str_store_string, s0, "str_squad_size_s0"),
	   (set_trigger_result, 1),
     (try_end),
     ]),

  # script_cf_multiplayer_team_is_available
  # Input: arg1 = player_no, arg2 = team_no
  # Output: none, true or false 
  ("cf_multiplayer_team_is_available",
   [
     (store_script_param, ":player_no", 1),
     (store_script_param, ":team_no", 2),
     (assign, ":continue_change_team", 1),
	 (try_begin),
	   # second faction is always disabled in captain coop
	   (eq, "$g_multiplayer_game_type", multiplayer_game_type_captain_coop),
	   (eq, ":team_no", 1),
	   (assign, ":continue_change_team", 0),
	 (else_try),
	   # first faction is always available in captain coop
	   (eq, "$g_multiplayer_game_type", multiplayer_game_type_captain_coop),
	   (eq, ":team_no", 0),
	   (assign, ":continue_change_team", 1),
     (else_try),
       (neq, "$g_multiplayer_game_type", multiplayer_game_type_deathmatch),
       (neq, "$g_multiplayer_game_type", multiplayer_game_type_duel),
       (is_between, ":team_no", 0, multi_team_spectator),
       (neg|teams_are_enemies, ":team_no", ":team_no"), #checking if it is a deathmatch or not

	   (assign, ":team_1_initial_value", 0),
	   (assign, ":team_2_initial_value", 0),
	   (try_begin),
	     (player_get_team_no, ":player_team", ":player_no"),
	     (eq, ":player_team", 0),
		 (val_sub, ":team_1_initial_value", 1),
	   (else_try),
	     (eq, ":player_team", 1),
		 (val_sub, ":team_2_initial_value", 1),
	   (try_end),
	   
	   (try_begin),
	     (eq, ":team_no", 0),
		 (val_add, ":team_1_initial_value", 1),
	     (call_script, "script_multiplayer_get_balance_dif", ":team_1_initial_value", ":team_2_initial_value"),
		 (try_begin),
	       (gt, reg0, 0), # team 1 auto balance would be activated
		   (assign, ":continue_change_team", 0),
		 (try_end),
	   (else_try),
	     (val_add, ":team_2_initial_value", 1),
	     (call_script, "script_multiplayer_get_balance_dif", ":team_1_initial_value", ":team_2_initial_value"),
		 (try_begin),
	       (lt, reg0, 0), # team 2 auto balance would be activated
		   (assign, ":continue_change_team", 0),
		 (try_end),
	   (try_end),
     (try_end),
     (eq, ":continue_change_team", 1),
     ]),

  # script_find_number_of_agents_constant
  # Input: none
  # Output: reg0 = 100xconstant (100..500)
  ("find_number_of_agents_constant",
   [
     (assign, ":num_dead_or_alive_agents", 0),
     
     (try_for_agents, ":cur_agent"),
       (agent_is_human, ":cur_agent"),
       (val_add, ":num_dead_or_alive_agents", 1),     
     (try_end),

     (try_begin),
       (le, ":num_dead_or_alive_agents", 2), #2
       (assign, reg0, 100),
     (else_try),
       (le, ":num_dead_or_alive_agents", 4), #2+2
       (assign, reg0, 140),
     (else_try),
       (le, ":num_dead_or_alive_agents", 7), #2+2+3
       (assign, reg0, 180),
     (else_try),
       (le, ":num_dead_or_alive_agents", 11), #2+2+3+4
       (assign, reg0, 220),
     (else_try),
       (le, ":num_dead_or_alive_agents", 17), #2+2+3+4+6
       (assign, reg0, 260),
     (else_try),
       (le, ":num_dead_or_alive_agents", 25), #2+2+3+4+6+8
       (assign, reg0, 300),
     (else_try),
       (le, ":num_dead_or_alive_agents", 36), #2+2+3+4+6+8+11
       (assign, reg0, 340),
     (else_try),
       (le, ":num_dead_or_alive_agents", 50), #2+2+3+4+6+8+11+14
       (assign, reg0, 380),
     (else_try),
       (le, ":num_dead_or_alive_agents", 68), #2+2+3+4+6+8+11+14+18
       (assign, reg0, 420),
     (else_try),
       (le, ":num_dead_or_alive_agents", 91), #2+2+3+4+6+8+11+14+18+23
       (assign, reg0, 460),
     (else_try),
       (assign, reg0, 500),
     (try_end),
     ]),

  # script_game_multiplayer_event_duel_offered
  # Input: arg1 = agent_no
  # Output: none
  ("game_multiplayer_event_duel_offered",
   [
     (store_script_param, ":agent_no", 1),
     (get_player_agent_no, ":player_agent_no"),
     (try_begin),
       (agent_is_active, ":player_agent_no"),
       (this_or_next|agent_slot_eq, ":player_agent_no", slot_agent_in_duel_with, -1),
       (agent_check_offer_from_agent, ":player_agent_no", ":agent_no"),
       (neg|agent_slot_eq, ":player_agent_no", slot_agent_in_duel_with, ":agent_no"), #don't allow spamming duel offers during countdown
       (multiplayer_send_int_to_server, multiplayer_event_offer_duel, ":agent_no"),
       (agent_get_player_id, ":player_no", ":agent_no"),
       (try_begin),
         (player_is_active, ":player_no"),
         (str_store_player_username, s0, ":player_no"),
       (else_try),
         (str_store_agent_name, s0, ":agent_no"),
       (try_end),
       (display_message, "str_a_duel_request_is_sent_to_s0"),
     (try_end),
     ]),

  # script_game_get_multiplayer_game_type_enum
  # Input: none
  # Output: reg0:first type, reg1:type count
  ("game_get_multiplayer_game_type_enum",
   [
     (assign, reg0, multiplayer_game_type_deathmatch),
	 (assign, reg1, multiplayer_num_game_types),
	 ]),

  # script_game_multiplayer_get_game_type_mission_template
  # Input: arg1 = game_type
  # Output: mission_template 
  ("game_multiplayer_get_game_type_mission_template",
   [
     (assign, ":selected_mt", -1),
     (store_script_param, ":game_type", 1),
     (try_begin),
       (eq, ":game_type", multiplayer_game_type_deathmatch),
       (assign, ":selected_mt", "mt_multiplayer_dm"),
     (else_try),
       (eq, ":game_type", multiplayer_game_type_team_deathmatch),
       (assign, ":selected_mt", "mt_multiplayer_tdm"),
     (else_try),
       (eq, ":game_type", multiplayer_game_type_battle),
       (assign, ":selected_mt", "mt_multiplayer_bt"),
     (else_try),
       (eq, ":game_type", multiplayer_game_type_captain_battle),
       (assign, ":selected_mt", "mt_multiplayer_cbt"),
##     (else_try),
##       (eq, ":game_type", multiplayer_game_type_destroy),
##       (assign, ":selected_mt", "mt_multiplayer_fd"),
     (else_try),
       (eq, ":game_type", multiplayer_game_type_capture_the_flag),
       (assign, ":selected_mt", "mt_multiplayer_cf"),
     (else_try),
       (eq, ":game_type", multiplayer_game_type_headquarters),
       (assign, ":selected_mt", "mt_multiplayer_hq"),
     (else_try),
       (eq, ":game_type", multiplayer_game_type_siege),
       (assign, ":selected_mt", "mt_multiplayer_sg"),     
     (else_try),
       (eq, ":game_type", multiplayer_game_type_duel),
       (assign, ":selected_mt", "mt_multiplayer_duel"),
	 (else_try),
       (eq, ":game_type", multiplayer_game_type_captain_team_deathmatch),
       (assign, ":selected_mt", "mt_multiplayer_ctdm"),
	 (else_try),
       (eq, ":game_type", multiplayer_game_type_captain_coop),
       (assign, ":selected_mt", "mt_multiplayer_ccoop"),
     (else_try),
       (eq, ":game_type", multiplayer_game_type_captain_siege),
       (assign, ":selected_mt", "mt_multiplayer_csg"),
     (try_end),
     (assign, reg0, ":selected_mt"),
     ]),

  # script_multiplayer_get_mission_template_game_type
  # Input: arg1 = mission_template_no
  # Output: game_type 
  ("multiplayer_get_mission_template_game_type",
   [
     (store_script_param, ":mission_template_no", 1),
     (assign, ":game_type", -1),
     (try_begin),
       (eq, ":mission_template_no", "mt_multiplayer_dm"),
       (assign, ":game_type", multiplayer_game_type_deathmatch),
     (else_try),
       (eq, ":mission_template_no", "mt_multiplayer_tdm"),
       (assign, ":game_type", multiplayer_game_type_team_deathmatch),
     (else_try),
       (eq, ":mission_template_no", "mt_multiplayer_bt"),
       (assign, ":game_type", multiplayer_game_type_battle),
     (else_try),
       (eq, ":mission_template_no", "mt_multiplayer_cbt"),
       (assign, ":game_type", multiplayer_game_type_captain_battle),
##     (else_try),
##       (eq, ":mission_template_no", "mt_multiplayer_fd"),
##       (assign, ":game_type", multiplayer_game_type_destroy),
     (else_try),
       (eq, ":mission_template_no", "mt_multiplayer_cf"),
       (assign, ":game_type", multiplayer_game_type_capture_the_flag),
     (else_try),
       (eq, ":mission_template_no", "mt_multiplayer_hq"),
       (assign, ":game_type", multiplayer_game_type_headquarters),
     (else_try),
       (eq, ":mission_template_no", "mt_multiplayer_sg"),
       (assign, ":game_type", multiplayer_game_type_siege),     
     (else_try),
       (eq, ":mission_template_no", "mt_multiplayer_duel"),
       (assign, ":game_type", multiplayer_game_type_duel),
	 (else_try),
       (eq, ":mission_template_no", "mt_multiplayer_ctdm"),
       (assign, ":game_type", multiplayer_game_type_captain_team_deathmatch),
	 (else_try),
       (eq, ":mission_template_no", "mt_multiplayer_ccoop"),
       (assign, ":game_type", multiplayer_game_type_captain_coop),
	 (else_try),
       (eq, ":mission_template_no", "mt_multiplayer_csg"),
       (assign, ":game_type", multiplayer_game_type_captain_siege),	   
     (try_end),
     (assign, reg0, ":game_type"),
     ]),


  # script_multiplayer_fill_available_factions_combo_button
  # Input: arg1 = overlay_id, arg2 = selected_faction_no, arg3 = opposite_team_selected_faction_no
  # Output: none 
  ("multiplayer_fill_available_factions_combo_button",
   [
     (store_script_param, ":overlay_id", 1),
     (store_script_param, ":selected_faction_no", 2),
##     (store_script_param, ":opposite_team_selected_faction_no", 3),
##     (try_for_range, ":cur_faction", "fac_kingdom_1", "fac_kingdoms_end"),
##       (try_begin),
##         (eq, ":opposite_team_selected_faction_no", ":cur_faction"),
##         (try_begin),
##           (gt, ":selected_faction_no", ":opposite_team_selected_faction_no"),
##           (val_sub, ":selected_faction_no", 1),
##         (try_end),
##       (else_try),
##         (str_store_faction_name, s0, ":cur_faction"),
##         (overlay_add_item, ":overlay_id", s0),
##       (try_end),
##     (try_end),
##     (val_sub, ":selected_faction_no", "fac_kingdom_1"),
##     (overlay_set_val, ":overlay_id", ":selected_faction_no"),
     (try_for_range, ":cur_faction", npc_kingdoms_begin, npc_kingdoms_end),
       (str_store_faction_name, s0, ":cur_faction"),
       (overlay_add_item, ":overlay_id", s0),
     (try_end),
     (val_sub, ":selected_faction_no", "fac_kingdom_1"),
     (overlay_set_val, ":overlay_id", ":selected_faction_no"),
     ]),
  

  # script_multiplayer_get_troop_class
  # Input: arg1 = troop_no
  # Output: reg0: troop_class 
  ("multiplayer_get_troop_class",
   [
     (store_script_param_1, ":troop_no"),
     (assign, ":troop_class", multi_troop_class_other),
     (try_begin),
       (this_or_next|eq, ":troop_no", "trp_vaegir_archer_multiplayer"),
       #(this_or_next|eq, ":troop_no", "trp_sarranid_archer_multiplayer"),
       (eq, ":troop_no", "trp_nord_archer_multiplayer"),
       (assign, ":troop_class", multi_troop_class_archer),
     (else_try),
       (this_or_next|eq, ":troop_no", "trp_swadian_man_at_arms_multiplayer"),
       (this_or_next|eq, ":troop_no", "trp_nord_scout_multiplayer"),
       (this_or_next|eq, ":troop_no", "trp_rhodok_horseman_multiplayer"),
       #(this_or_next|eq, ":troop_no", "trp_sarranid_mamluke_multiplayer"),
       (eq, ":troop_no", "trp_vaegir_horseman_multiplayer"),
       (assign, ":troop_class", multi_troop_class_cavalry),
     (else_try),
       (eq, ":troop_no", "trp_khergit_veteran_horse_archer_multiplayer"),
       (assign, ":troop_class", multi_troop_class_mounted_archer),
#     (else_try),
#       (eq, ":troop_no", "trp_swadian_mounted_crossbowman_multiplayer"),
#       (assign, ":troop_class", multi_troop_class_mounted_crossbowman),
     (else_try),
       (this_or_next|eq, ":troop_no", "trp_swadian_crossbowman_multiplayer"),
       (eq, ":troop_no", "trp_rhodok_veteran_crossbowman_multiplayer"),
       (assign, ":troop_class", multi_troop_class_crossbowman),
     (else_try),
       (this_or_next|eq, ":troop_no", "trp_swadian_infantry_multiplayer"),
       #(this_or_next|eq, ":troop_no", "trp_sarranid_footman_multiplayer"),
       (eq, ":troop_no", "trp_nord_veteran_multiplayer"),
       (assign, ":troop_class", multi_troop_class_infantry),
     (else_try),
       (eq, ":troop_no", "trp_vaegir_spearman_multiplayer"),
       (assign, ":troop_class", multi_troop_class_spearman),
     (try_end),
     (assign, reg0, ":troop_class"),
     ]),

  #script_multiplayer_clear_player_selected_items
  # Input: arg1 = player_no
  # Output: none
  ("multiplayer_clear_player_selected_items",
   [
     (store_script_param, ":player_no", 1),
     (try_for_range, ":slot_no", slot_player_selected_item_indices_begin, slot_player_selected_item_indices_end),
       (player_set_slot, ":player_no", ":slot_no", -1),
     (try_end),
     ]),
  

  #script_multiplayer_init_player_slots
  # Input: arg1 = player_no
  # Output: none
  ("multiplayer_init_player_slots",
   [
     (store_script_param, ":player_no", 1),
     (call_script, "script_multiplayer_clear_player_selected_items", ":player_no"),
     (player_set_slot, ":player_no", slot_player_spawned_this_round, 0),
     (player_set_slot, ":player_no", slot_player_last_rounds_used_item_earnings, 0),
     (player_set_slot, ":player_no", slot_player_poll_disabled_until_time, 0),

	 
     (player_set_slot, ":player_no", slot_player_bot_type_1_wanted, 0),
     (player_set_slot, ":player_no", slot_player_bot_type_2_wanted, 0),
     (player_set_slot, ":player_no", slot_player_bot_type_3_wanted, 0),
     (player_set_slot, ":player_no", slot_player_bot_type_4_wanted, 0),
     ]),

  #script_multiplayer_initialize_belfry_wheel_rotations
  # Input: none
  # Output: none
  ("multiplayer_initialize_belfry_wheel_rotations",
   [
##    (scene_prop_get_num_instances, ":num_belfries", "spr_belfry_a"),
##    (try_for_range, ":belfry_no", 0, ":num_belfries"),
##      (store_mul, ":wheel_no", ":belfry_no", 3),
##      (scene_prop_get_instance, ":belfry_wheel_1_scene_prop_id", "spr_belfry_wheel", ":wheel_no"),
##      (prop_instance_initialize_rotation_angles, ":belfry_wheel_1_scene_prop_id"),
##      #belfry wheel_2
##      (val_add, ":wheel_no", 1),
##      (scene_prop_get_instance, ":belfry_wheel_2_scene_prop_id", "spr_belfry_wheel", ":wheel_no"),
##      (prop_instance_initialize_rotation_angles, ":belfry_wheel_2_scene_prop_id"),
##      #belfry wheel_3
##      (val_add, ":wheel_no", 1),
##      (scene_prop_get_instance, ":belfry_wheel_3_scene_prop_id", "spr_belfry_wheel", ":wheel_no"),
##      (prop_instance_initialize_rotation_angles, ":belfry_wheel_3_scene_prop_id"),   
##    (try_end),
##
##    (scene_prop_get_num_instances, ":num_belfries_a", "spr_belfry_a"),
##
##    (scene_prop_get_num_instances, ":num_belfries", "spr_belfry_b"),
##    (try_for_range, ":belfry_no", 0, ":num_belfries"),
##      (store_add, ":wheel_no_plus_num_belfries_a", ":wheel_no", ":num_belfries_a"),
##      (store_mul, ":wheel_no_plus_num_belfries_a", ":belfry_no", 3),
##      (scene_prop_get_instance, ":belfry_wheel_1_scene_prop_id", "spr_belfry_wheel", ":wheel_no_plus_num_belfries_a"),
##      (prop_instance_initialize_rotation_angles, ":belfry_wheel_1_scene_prop_id"),
##      #belfry wheel_2
##      (val_add, ":wheel_no_plus_num_belfries_a", 1),
##      (scene_prop_get_instance, ":belfry_wheel_2_scene_prop_id", "spr_belfry_wheel", ":wheel_no_plus_num_belfries_a"),
##      (prop_instance_initialize_rotation_angles, ":belfry_wheel_2_scene_prop_id"),
##      #belfry wheel_3
##      (val_add, ":wheel_no_plus_num_belfries_a", 1),
##      (scene_prop_get_instance, ":belfry_wheel_3_scene_prop_id", "spr_belfry_wheel", ":wheel_no_plus_num_belfries_a"),
##      (prop_instance_initialize_rotation_angles, ":belfry_wheel_3_scene_prop_id"),   
##    (try_end),

      (scene_prop_get_num_instances, ":num_wheel", "spr_belfry_wheel"),
      (try_for_range, ":wheel_no", 0, ":num_wheel"),
        (scene_prop_get_instance, ":wheel_id", "spr_belfry_wheel", ":wheel_no"),
        (prop_instance_initialize_rotation_angles, ":wheel_id"),   
      (try_end),

      (scene_prop_get_num_instances, ":num_winch", "spr_winch"),
      (try_for_range, ":winch_no", 0, ":num_winch"),
        (scene_prop_get_instance, ":winch_id", "spr_winch", ":winch_no"),
        (prop_instance_initialize_rotation_angles, ":winch_id"),   
      (try_end),

      (scene_prop_get_num_instances, ":num_winch_b", "spr_winch_b"),
      (try_for_range, ":winch_b_no", 0, ":num_winch_b"),
        (scene_prop_get_instance, ":winch_b_id", "spr_winch_b", ":winch_b_no"),
        (prop_instance_initialize_rotation_angles, ":winch_b_id"),   
      (try_end),
     ]),

  #script_send_open_close_information_of_object
  # Input: arg1 = mission_object_id
  # Output: none
  ("send_open_close_information_of_object",
   [
     (store_script_param, ":player_no", 1),
     (store_script_param, ":scene_prop_no", 2),
     
     (scene_prop_get_num_instances, ":num_instances", ":scene_prop_no"),

     (try_for_range, ":instance_no", 0, ":num_instances"),
       (scene_prop_get_instance, ":instance_id", ":scene_prop_no", ":instance_no"),
       (scene_prop_get_slot, ":opened_or_closed", ":instance_id", scene_prop_open_or_close_slot),
       (try_begin),
         (eq, ":opened_or_closed", 1),
         (multiplayer_send_int_to_player, ":player_no", multiplayer_event_set_scene_prop_open_or_close, ":instance_id"),
       (try_end),
     (try_end),
     ]),

  #script_multiplayer_send_initial_information
  # Input: arg1 = player_no
  # Output: none
  ("multiplayer_send_initial_information",
   [
     (store_script_param, ":player_no", 1),

	 (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_num_bots_in_team, 1, "$g_multiplayer_num_bots_team_1"),
     (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_return_num_bots_in_team, 2, "$g_multiplayer_num_bots_team_2"),
     (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_auto_team_balance_limit, "$g_multiplayer_auto_team_balance_limit"),
     (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_num_bots_voteable, "$g_multiplayer_num_bots_voteable"),
     (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_factions_voteable, "$g_multiplayer_factions_voteable"),
     (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_maps_voteable, "$g_multiplayer_maps_voteable"),
     (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_kick_voteable, "$g_multiplayer_kick_voteable"),
     (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_ban_voteable, "$g_multiplayer_ban_voteable"),
     (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_allow_player_banners, "$g_multiplayer_allow_player_banners"),
     (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_force_default_armor, "$g_multiplayer_force_default_armor"),
     (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_disallow_ranged_weapons, "$g_multiplayer_disallow_ranged_weapons"),
     (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_disallow_granades, "$g_multiplayer_disallow_granades"),
     (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_respawn_period, "$g_multiplayer_respawn_period"),
     (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_round_max_seconds, "$g_multiplayer_round_max_seconds"),
     (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_game_type, "$g_multiplayer_game_type"),
     (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_player_respawn_as_bot, "$g_multiplayer_player_respawn_as_bot"),
	 (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_squad_size, "$g_multiplayer_squad_size"),
	 (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_team_ratio, "$g_multiplayer_team_ratio"),
	 (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_cbf_squad_ratio, "$g_multiplayer_cbf_enable_squad_ratio"),
	 
     (store_mission_timer_a, ":mission_timer"),
     (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_server_mission_timer_while_player_joined, ":mission_timer"),

     (try_begin),
       (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_siege),
       (             eq, "$g_multiplayer_game_type", multiplayer_game_type_captain_siege),
       (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_respawn_count, "$g_multiplayer_number_of_respawn_count"),
     (try_end),

     (try_for_agents, ":cur_agent"), #send if any agent is carrying any scene object
       (agent_is_human, ":cur_agent"),
       (agent_get_attached_scene_prop, ":attached_scene_prop", ":cur_agent"),
       (ge, ":attached_scene_prop", 0),
       (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_attached_scene_prop, ":cur_agent", ":attached_scene_prop"),
     (try_end),

     (call_script, "script_send_open_close_information_of_object", ":player_no", "spr_siege_ladder_move_6m"),
     (call_script, "script_send_open_close_information_of_object", ":player_no", "spr_siege_ladder_move_8m"),
     (call_script, "script_send_open_close_information_of_object", ":player_no", "spr_siege_ladder_move_10m"),
     (call_script, "script_send_open_close_information_of_object", ":player_no", "spr_siege_ladder_move_12m"),
     (call_script, "script_send_open_close_information_of_object", ":player_no", "spr_siege_ladder_move_14m"),
     (call_script, "script_send_open_close_information_of_object", ":player_no", "spr_winch_b"),
     (call_script, "script_send_open_close_information_of_object", ":player_no", "spr_castle_e_sally_door_a"),
     (call_script, "script_send_open_close_information_of_object", ":player_no", "spr_castle_f_sally_door_a"),
     (call_script, "script_send_open_close_information_of_object", ":player_no", "spr_earth_sally_gate_left"),
     (call_script, "script_send_open_close_information_of_object", ":player_no", "spr_earth_sally_gate_right"),
     (call_script, "script_send_open_close_information_of_object", ":player_no", "spr_viking_keep_destroy_sally_door_left"),     
     (call_script, "script_send_open_close_information_of_object", ":player_no", "spr_viking_keep_destroy_sally_door_right"),     
     (call_script, "script_send_open_close_information_of_object", ":player_no", "spr_castle_f_door_a"),
     (call_script, "script_send_open_close_information_of_object", ":player_no", "spr_door_destructible"),
     (call_script, "script_send_open_close_information_of_object", ":player_no", "spr_castle_f_door_b"),

     (try_begin),
       (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_battle),
       (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_captain_battle),
##       (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_destroy),
       (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_captain_siege),
       (eq, "$g_multiplayer_game_type", multiplayer_game_type_siege),

       (store_mission_timer_a, ":current_time"),
       (val_sub, ":current_time", "$g_round_start_time"),
       (val_mul, ":current_time", -1),

       (multiplayer_send_int_to_player, ":player_no", multiplayer_event_set_round_start_time, ":current_time"),
     (else_try),
       (eq, "$g_multiplayer_game_type", multiplayer_game_type_capture_the_flag),
       #if game type is capture the flag send current flag situations to each player.
       (team_get_slot, ":flag_situation_team_1", 0, slot_team_flag_situation),
       (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_team_flag_situation, 0, ":flag_situation_team_1"),
       (team_get_slot, ":flag_situation_team_2", 1, slot_team_flag_situation),
       (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_team_flag_situation, 1, ":flag_situation_team_2"),
     (else_try),
       (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_headquarters),
       (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_captain_siege),
       (eq, "$g_multiplayer_game_type", multiplayer_game_type_siege),
       #if game type is headquarters send number of agents placed around each pole's around to player.
       (try_for_range, ":flag_no", 0, "$g_number_of_flags"),
         (assign, ":number_of_agents_around_flag_team_1", 0),
         (assign, ":number_of_agents_around_flag_team_2", 0),

         (scene_prop_get_instance, ":pole_id", "spr_headquarters_pole_code_only", ":flag_no"), 
         (prop_instance_get_position, pos0, ":pole_id"), #pos0 holds pole position. 

         (try_for_agents, ":cur_agent"),
           (agent_is_human, ":cur_agent"),
           (agent_is_alive, ":cur_agent"),
           (neg|agent_is_non_player, ":cur_agent"),
           (agent_get_team, ":cur_agent_team", ":cur_agent"),
           (agent_get_position, pos1, ":cur_agent"), #pos1 holds agent's position.
           (get_sq_distance_between_positions, ":squared_dist", pos0, pos1),
           (get_sq_distance_between_position_heights, ":squared_height_dist", pos0, pos1),
           (val_add, ":squared_dist", ":squared_height_dist"),
           (lt, ":squared_dist", multi_headquarters_max_distance_sq_to_raise_flags),
           (try_begin),
             (eq, ":cur_agent_team", 0),
             (val_add, ":number_of_agents_around_flag_team_1", 1),
           (else_try),
             (eq, ":cur_agent_team", 1),
             (val_add, ":number_of_agents_around_flag_team_2", 1),
           (try_end),
         (try_end),

         (store_mul, ":current_owner_code", ":number_of_agents_around_flag_team_1", 100),
         (val_add, ":current_owner_code", ":number_of_agents_around_flag_team_2"),        
         (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_num_agents_around_flag, ":flag_no", ":current_owner_code"),
       (try_end),

       #if game type is headquarters send owners of each pole to player.
       (assign, "$g_placing_initial_flags", 1),
       (try_for_range, ":cur_flag", 0, "$g_number_of_flags"),
         (store_add, ":cur_flag_slot", multi_data_flag_owner_begin, ":cur_flag"),
         (troop_get_slot, ":cur_flag_owner", "trp_multiplayer_data", ":cur_flag_slot"),
         (store_mul, ":cur_flag_owner_code", ":cur_flag_owner", 100),
         (val_add, ":cur_flag_owner_code", ":cur_flag_owner"),
         (val_add, ":cur_flag_owner_code", 1),
         (val_mul, ":cur_flag_owner_code", -1),
         (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_change_flag_owner, ":cur_flag", ":cur_flag_owner_code"),
       (try_end),
       (assign, "$g_placing_initial_flags", 0),
     (try_end),

     #(multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_day_time, "$g_round_day_time"),
    ]),

  #script_multiplayer_remove_headquarters_flags
  # Input: none
  # Output: none
  ("multiplayer_remove_headquarters_flags",
   [
     (store_add, ":end_cond", "spr_headquarters_flag_gray", 1),
     (try_for_range, ":headquarters_flag_no", "spr_headquarters_flag_red", ":end_cond"),
       (replace_scene_props, ":headquarters_flag_no", "spr_empty"),
     (try_end),
     ]),

  #script_multiplayer_remove_destroy_mod_targets
  # Input: none
  # Output: none
  ("multiplayer_remove_destroy_mod_targets",
   [
       (replace_scene_props, "spr_catapult_destructible", "spr_empty"),
       (replace_scene_props, "spr_trebuchet_destructible", "spr_empty"),
     ]),
  
  #script_multiplayer_init_mission_variables
  ("multiplayer_init_mission_variables",
   [
     (assign, "$g_multiplayer_team_1_first_spawn", 1),
     (assign, "$g_multiplayer_team_2_first_spawn", 1),
     (assign, "$g_multiplayer_poll_running", 0),
##     (assign, "$g_multiplayer_show_poll_when_suitable", 0),
     (assign, "$g_waiting_for_confirmation_to_terminate", 0),
     (assign, "$g_confirmation_result", 0),
     (assign, "$g_team_balance_next_round", 0),
     (team_get_faction, "$g_multiplayer_team_1_faction", 0),
     (team_get_faction, "$g_multiplayer_team_2_faction", 1),
     (assign, "$g_multiplayer_next_team_1_faction", "$g_multiplayer_team_1_faction"),
     (assign, "$g_multiplayer_next_team_2_faction", "$g_multiplayer_team_2_faction"),

     (assign, "$g_multiplayer_bot_type_1_wanted", 0),
     (assign, "$g_multiplayer_bot_type_2_wanted", 0),
     (assign, "$g_multiplayer_bot_type_3_wanted", 0),
     (assign, "$g_multiplayer_bot_type_4_wanted", 0),

     (call_script, "script_music_set_situation_with_culture", mtf_sit_multiplayer_fight),
     ]),

  #script_multiplayer_event_mission_end
  # Input: none
  # Output: none
  ("multiplayer_event_mission_end",
   [

     ]),
  

  #script_multiplayer_event_agent_killed_or_wounded
  # Input: arg1 = dead_agent_no, arg2 = killer_agent_no
  # Output: none
  ("multiplayer_event_agent_killed_or_wounded",
   [
     (store_script_param, ":dead_agent_no", 1),
     (store_script_param, ":unused", 2),
     
	 (try_begin), 
		(multiplayer_is_server),
		(call_script, "script_multiplayer_event_agent_killed_or_wounded_ex", ":dead_agent_no"), 
	 (try_end), 
	 
     (multiplayer_get_my_player, ":my_player_no"),
     (try_begin),
	   #MCA: ccoop do not show respawn timer
	   (neq, "$g_multiplayer_game_type", multiplayer_game_type_captain_coop),
	   (neq, "$g_multiplayer_game_type", multiplayer_game_type_captain_battle),
       (player_get_agent_id, ":my_player_agent", ":my_player_no"),
       (neq, ":my_player_agent",-1),
       (eq, ":my_player_agent", ":dead_agent_no"),
       (store_mission_timer_a, "$g_multiplayer_respawn_start_time"),
     (try_end),
     
     (try_begin),
		#MCA: ccoop do not show respawn timer
	   (neq, "$g_multiplayer_game_type", multiplayer_game_type_captain_coop),
	   (neq, "$g_multiplayer_game_type", multiplayer_game_type_captain_battle),
       (is_between, ":my_player_no", 0, multiplayer_max_possible_player_id),
       (player_get_agent_id, ":player_agent", ":my_player_no"),
       (eq, ":dead_agent_no", ":player_agent"),
     
       (assign, ":show_respawn_counter", 0),
       (try_begin),
         #TODO: add other game types with no respawns here
         (neq, "$g_multiplayer_game_type", multiplayer_game_type_battle),
         (neq, "$g_multiplayer_game_type", multiplayer_game_type_captain_battle),
##         (neq, "$g_multiplayer_game_type", multiplayer_game_type_destroy),
         (assign, ":show_respawn_counter", 1),
       (else_try),         
         (eq, "$g_multiplayer_player_respawn_as_bot", 1),
         (player_get_team_no, ":my_player_team", ":my_player_no"),
         (assign, ":is_found", 0),
         (try_for_agents, ":cur_agent"),
           (eq, ":is_found", 0),
           (agent_is_alive, ":cur_agent"),
           (agent_is_human, ":cur_agent"),
           (agent_is_non_player, ":cur_agent"),
           (agent_get_team ,":cur_team", ":cur_agent"),
           (eq, ":cur_team", ":my_player_team"),
           (assign, ":is_found", 1),
         (try_end),
         (eq, ":is_found", 1),
         (assign, ":show_respawn_counter", 1),
       (try_end),
       
       (try_begin),
         #(player_get_slot, ":spawn_count", ":player_no", slot_player_spawn_count),
         (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_captain_siege),
         (             eq, "$g_multiplayer_game_type", multiplayer_game_type_siege),
         (gt, "$g_multiplayer_number_of_respawn_count", 0),         
     
         (ge, "$g_my_spawn_count", "$g_multiplayer_number_of_respawn_count"),
     
         (multiplayer_get_my_player, ":my_player_no"),
         (player_get_team_no, ":my_player_team", ":my_player_no"),

         (this_or_next|eq, ":my_player_team", 0),
         (ge, "$g_my_spawn_count", 999),
    
         (assign, "$g_show_no_more_respawns_remained", 1),
       (else_try),
         (assign, "$g_show_no_more_respawns_remained", 0),
       (try_end),

       (eq, ":show_respawn_counter", 1),             

       (start_presentation, "prsnt_multiplayer_respawn_time_counter"),
     (try_end),
     ]),
     
  #script_multiplayer_get_item_value_for_troop
  # Input: arg1 = item_no, arg2 = troop_no
  # Output: reg0: item_value
  ("multiplayer_get_item_value_for_troop",
   [
     (store_script_param, ":item_no", 1),
     (store_script_param, ":troop_no", 2),
     (try_begin),
       (call_script, "script_cf_multiplayer_is_item_default_for_troop", ":item_no", ":troop_no"),
       (assign, ":item_value", 0),
     (else_try),
       (store_item_value, ":item_value", ":item_no"),
       (store_troop_faction, ":faction_no", ":troop_no"),
       (store_sub, ":faction_slot", ":faction_no", npc_kingdoms_begin),
       (val_add, ":faction_slot", slot_item_multiplayer_faction_price_multipliers_begin),
       (item_get_slot, ":price_multiplier", ":item_no", ":faction_slot"),
       (val_mul, ":item_value", ":price_multiplier"),
       (val_div, ":item_value", 100),
     (try_end),
     (assign, reg0, ":item_value"),
     ]),

  #script_multiplayer_get_previous_item_for_item_and_troop
  # Input: arg1 = item_no, arg2 = troop_no
  # Output: reg0: previous_item_no (-1 if it is the root item, 0 if the item is invalid) 
  ("multiplayer_get_previous_item_for_item_and_troop",
   [
     (store_script_param, ":item_no", 1),
     (store_script_param, ":troop_no", 2),
     (item_get_slot, ":item_class", ":item_no", slot_item_multiplayer_item_class),
     (call_script, "script_multiplayer_get_item_value_for_troop", ":item_no", ":troop_no"),
     (assign, ":item_value", reg0),
     (store_sub, ":troop_index", ":troop_no", multiplayer_troops_begin),
     (val_add, ":troop_index", slot_item_multiplayer_availability_linked_list_begin),
     (assign, ":max_item_no", -1),
     (assign, ":max_item_value", -1),
     (try_for_range, ":i_item", all_items_begin, all_items_end),
       (item_slot_eq, ":i_item", slot_item_multiplayer_item_class, ":item_class"),
       (item_slot_ge, ":i_item", ":troop_index", 1),
       (call_script, "script_multiplayer_get_item_value_for_troop", ":i_item", ":troop_no"),
       (assign, ":i_item_value", reg0),
       (try_begin),
         (eq, ":i_item_value", 0),
         (eq, ":max_item_value", 0),
         #choose between 2 default items
         (store_item_value, ":i_item_real_value", ":i_item"),
         (store_item_value, ":max_item_real_value", ":max_item_no"),
         (try_begin),
           (gt, ":i_item_real_value", ":max_item_real_value"),
           (assign, ":max_item_value", ":i_item_value"),
           (assign, ":max_item_no", ":i_item"),
         (try_end),
       (else_try),
         (gt, ":i_item_value", ":max_item_value"),
         (lt, ":i_item_value", ":item_value"),
         (assign, ":max_item_value", ":i_item_value"),
         (assign, ":max_item_no", ":i_item"),
       (try_end),
     (try_end),
     (try_begin),
       (eq, ":max_item_no", -1),
       (assign, ":item_upper_class", -1),
       (try_begin),
         (is_between, ":item_class", multi_item_class_type_melee_weapons_begin, multi_item_class_type_melee_weapons_end),
         (assign, ":item_upper_class", 0),
       (else_try),
         (is_between, ":item_class", multi_item_class_type_shields_begin, multi_item_class_type_shields_end),
         (assign, ":item_upper_class", 1),
       (else_try),
         (eq, ":item_class", multi_item_class_type_bow),
         (assign, ":item_upper_class", 2),
       (else_try),
         (eq, ":item_class", multi_item_class_type_crossbow),
         (assign, ":item_upper_class", 3),
       (else_try),
         (eq, ":item_class", multi_item_class_type_arrow),
         (assign, ":item_upper_class", 4),
       (else_try),
         (eq, ":item_class", multi_item_class_type_bolt),
         (assign, ":item_upper_class", 5),
       (else_try),
         (eq, ":item_class", multi_item_class_type_throwing),
         (assign, ":item_upper_class", 6),
       (else_try),
         (is_between, ":item_class", multi_item_class_type_heads_begin, multi_item_class_type_heads_end),
         (assign, ":item_upper_class", 7),
       (else_try),
         (is_between, ":item_class", multi_item_class_type_bodies_begin, multi_item_class_type_bodies_end),
         (assign, ":item_upper_class", 8),
       (else_try),
         (is_between, ":item_class", multi_item_class_type_feet_begin, multi_item_class_type_feet_end),
         (assign, ":item_upper_class", 9),
       (else_try),
         (is_between, ":item_class", multi_item_class_type_gloves_begin, multi_item_class_type_gloves_end),
         (assign, ":item_upper_class", 10),
       (else_try),
         (is_between, ":item_class", multi_item_class_type_horses_begin, multi_item_class_type_horses_end),
         (assign, ":item_upper_class", 11),
       (try_end),
       (neq, ":item_upper_class", 0),
       #search for the default item for non-weapon classes (only 1 slot is easy to fill)
       (assign, ":end_cond", all_items_end),
       (try_for_range, ":i_item", all_items_begin, ":end_cond"),
         (item_slot_ge, ":i_item", ":troop_index", 1),
         (item_get_slot, ":i_item_class", ":i_item", slot_item_multiplayer_item_class),
         (try_begin),
           (is_between, ":i_item_class", multi_item_class_type_melee_weapons_begin, multi_item_class_type_melee_weapons_end),
           (assign, ":i_item_upper_class", 0),
         (else_try),
           (is_between, ":i_item_class", multi_item_class_type_shields_begin, multi_item_class_type_shields_end),
           (assign, ":i_item_upper_class", 1),
         (else_try),
           (eq, ":i_item_class", multi_item_class_type_bow),
           (assign, ":i_item_upper_class", 2),
         (else_try),
           (eq, ":i_item_class", multi_item_class_type_crossbow),
           (assign, ":i_item_upper_class", 3),
         (else_try),
           (eq, ":i_item_class", multi_item_class_type_arrow),
           (assign, ":i_item_upper_class", 4),
         (else_try),
           (eq, ":i_item_class", multi_item_class_type_bolt),
           (assign, ":i_item_upper_class", 5),
         (else_try),
           (eq, ":i_item_class", multi_item_class_type_throwing),
           (assign, ":i_item_upper_class", 6),
         (else_try),
           (is_between, ":i_item_class", multi_item_class_type_heads_begin, multi_item_class_type_heads_end),
           (assign, ":i_item_upper_class", 7),
         (else_try),
           (is_between, ":i_item_class", multi_item_class_type_bodies_begin, multi_item_class_type_bodies_end),
           (assign, ":i_item_upper_class", 8),
         (else_try),
           (is_between, ":i_item_class", multi_item_class_type_feet_begin, multi_item_class_type_feet_end),
           (assign, ":i_item_upper_class", 9),
         (else_try),
           (is_between, ":i_item_class", multi_item_class_type_gloves_begin, multi_item_class_type_gloves_end),
           (assign, ":i_item_upper_class", 10),
         (else_try),
           (is_between, ":i_item_class", multi_item_class_type_horses_begin, multi_item_class_type_horses_end),
           (assign, ":i_item_upper_class", 11),
         (try_end),
         (eq, ":i_item_upper_class", ":item_upper_class"),
         (call_script, "script_cf_multiplayer_is_item_default_for_troop", ":i_item", ":troop_no"),
         (assign, ":max_item_no", ":i_item"),
         (assign, ":end_cond", 0), #break
       (try_end),
     (try_end),
     (assign, reg0, ":max_item_no"),
     ]),

  #script_cf_multiplayer_is_item_default_for_troop
  # Input: arg1 = item_no, arg2 = troop_no
  # Output: reg0: total_cost
  ("cf_multiplayer_is_item_default_for_troop",
   [
     (store_script_param, ":item_no", 1),
     (store_script_param, ":troop_no", 2),
     (assign, ":default_item", 0),
     (try_begin),
       (neg|is_between, ":item_no", horses_begin, horses_end),
       (neg|is_between, ":item_no", oim_horses_begin, oim_horses_end),
       (troop_get_inventory_capacity, ":end_cond", ":troop_no"), #troop no can come -1 here error occured at friday
       (try_for_range, ":i_slot", 0, ":end_cond"),
         (troop_get_inventory_slot, ":default_item_id", ":troop_no", ":i_slot"),
         (eq, ":item_no", ":default_item_id"),
         (assign, ":default_item", 1),
         (assign, ":end_cond", 0), #break
       (try_end),
     (try_end),
     (eq, ":default_item", 1),
     ]),
  
  #script_multiplayer_calculate_cur_selected_items_cost
  # Input: arg1 = player_no
  # Output: reg0: total_cost
  ("multiplayer_calculate_cur_selected_items_cost",
   [
     (store_script_param, ":player_no", 1),
     (store_script_param, ":calculation_type", 2), #0 for normal calculation
     (assign, ":total_cost", 0),
     (player_get_troop_id, ":troop_no", ":player_no"),

     (try_begin),
       (eq, ":calculation_type", 0),
       (assign, ":begin_cond", slot_player_cur_selected_item_indices_begin),
       (assign, ":end_cond", slot_player_cur_selected_item_indices_end),
     (else_try),
       (assign, ":begin_cond", slot_player_selected_item_indices_begin),
       (assign, ":end_cond", slot_player_selected_item_indices_end),
     (try_end),
     
     (try_for_range, ":i_item", ":begin_cond", ":end_cond"),
       (player_get_slot, ":item_id", ":player_no", ":i_item"),
       (gt, ":item_id", 0), #might be -1 for horses etc.
       (call_script, "script_multiplayer_get_item_value_for_troop", ":item_id", ":troop_no"),
       (val_add, ":total_cost", reg0),
     (try_end),

	 (val_clamp, ":total_cost", 0, 9999999), 
     (assign, reg0, ":total_cost"),
     ]),

  #script_multiplayer_set_item_available_for_troop
  # Input: arg1 = item_no, arg2 = troop_no
  # Output: none
  ("multiplayer_set_item_available_for_troop",
   [
     (store_script_param, ":item_no", 1),
     (store_script_param, ":troop_no", 2),
     (store_sub, ":item_troop_slot", ":troop_no", multiplayer_troops_begin),
     (val_add, ":item_troop_slot", slot_item_multiplayer_availability_linked_list_begin),
     (item_set_slot, ":item_no", ":item_troop_slot", 1),
     ]),

  #script_multiplayer_send_item_selections
  # Input: none
  # Output: none
  ("multiplayer_send_item_selections",
   [
     (multiplayer_get_my_player, ":my_player_no"),
     (try_for_range, ":i_item", slot_player_selected_item_indices_begin, slot_player_selected_item_indices_end),
       (player_get_slot, ":item_id", ":my_player_no", ":i_item"),
       (multiplayer_send_2_int_to_server, multiplayer_event_set_item_selection, ":i_item", ":item_id"),
     (try_end),
	 
	 
	 (try_begin),
	   (call_script, "script_cf_multiplayer_can_buy_squad"),
	   (try_for_range, ":bot_slot", slot_player_captain_bot_data_begin, slot_player_captain_bot_data_end),
         (player_get_slot, ":bot_amount", ":my_player_no", ":bot_slot"),
         (multiplayer_send_3_int_to_server, multiplayer_event_other_events, multiplayer_event_other_event_set_bot_purchase, ":bot_slot", ":bot_amount"),
       (try_end),
	 (try_end),
     ]),

  #script_multiplayer_set_default_item_selections_for_troop
  # Input: arg1 = player_no, arg2 = troop_no
  # Output: none
  ("multiplayer_set_default_item_selections_for_troop",
   [
     (store_script_param, ":player_no", 1),
	 (store_script_param, ":troop_no", 2),
     (call_script, "script_multiplayer_clear_player_selected_items", ":player_no"),
     (assign, ":cur_weapon_slot", 0),
     (troop_get_inventory_capacity, ":inv_cap", ":troop_no"),
     (try_for_range, ":i_slot", 0, ":inv_cap"),
       (troop_get_inventory_slot, ":item_id", ":troop_no", ":i_slot"),
       (ge, ":item_id", 0),
       (item_get_slot, ":item_class", ":item_id", slot_item_multiplayer_item_class),
       (try_begin),
         (is_between, ":item_class", multi_item_class_type_weapons_begin, multi_item_class_type_weapons_end),
         (this_or_next|eq, "$g_multiplayer_disallow_ranged_weapons", 0),
         (neg|is_between, ":item_class", multi_item_class_type_ranged_weapons_begin, multi_item_class_type_ranged_weapons_end),
         (store_add, ":selected_item_slot", slot_player_selected_item_indices_begin, ":cur_weapon_slot"),
         (player_set_slot, ":player_no", ":selected_item_slot", ":item_id"),
         (val_add, ":cur_weapon_slot", 1),
       (else_try),
         (is_between, ":item_class", multi_item_class_type_heads_begin, multi_item_class_type_heads_end),
         (store_add, ":selected_item_slot", slot_player_selected_item_indices_begin, 4),
         (player_set_slot, ":player_no", ":selected_item_slot", ":item_id"),
       (else_try),
         (is_between, ":item_class", multi_item_class_type_bodies_begin, multi_item_class_type_bodies_end),
         (store_add, ":selected_item_slot", slot_player_selected_item_indices_begin, 5),
         (player_set_slot, ":player_no", ":selected_item_slot", ":item_id"),
       (else_try),
         (is_between, ":item_class", multi_item_class_type_feet_begin, multi_item_class_type_feet_end),
         (store_add, ":selected_item_slot", slot_player_selected_item_indices_begin, 6),
         (player_set_slot, ":player_no", ":selected_item_slot", ":item_id"),
       (else_try),
         (is_between, ":item_class", multi_item_class_type_gloves_begin, multi_item_class_type_gloves_end),
         (store_add, ":selected_item_slot", slot_player_selected_item_indices_begin, 7),
         (player_set_slot, ":player_no", ":selected_item_slot", ":item_id"),
       (else_try),
         (is_between, ":item_class", multi_item_class_type_horses_begin, multi_item_class_type_horses_end),
         (eq, "$g_horses_are_avaliable", 1),
         (store_add, ":selected_item_slot", slot_player_selected_item_indices_begin, 8),
         (player_set_slot, ":player_no", ":selected_item_slot", ":item_id"),
       (try_end),
     (try_end),
     ]),

  #script_multiplayer_display_available_items_for_troop_and_item_classes
  # Input: arg1 = troop_no, arg2 = item_classes_begin, arg3 = item_classes_end, arg4 = pos_x_begin, arg5 = pos_y_begin
  # Output: none
  ("multiplayer_display_available_items_for_troop_and_item_classes",
   [
     (store_script_param, ":troop_no", 1),
     (store_script_param, ":item_classes_begin", 2),
     (store_script_param, ":item_classes_end", 3),
     (store_script_param, ":pos_x_begin", 4),
     (store_script_param, ":pos_y_begin", 5),

     (assign, ":x_adder", 100),
     (try_begin),
       (gt, ":pos_x_begin", 500),
       (assign, ":x_adder", -100),
     (try_end),

     (store_sub, ":item_troop_slot", ":troop_no", multiplayer_troops_begin),
     (val_add, ":item_troop_slot", slot_item_multiplayer_availability_linked_list_begin),

     (try_for_range, ":cur_slot", multi_data_item_button_indices_begin, multi_data_item_button_indices_end),
       (troop_set_slot, "trp_multiplayer_data", ":cur_slot", -1),
     (try_end),

     (assign, ":num_available_items", 0),
     
     (try_for_range, ":item_no", all_items_begin, all_items_end),
       (item_get_slot, ":item_class", ":item_no", slot_item_multiplayer_item_class),
       (is_between, ":item_class", ":item_classes_begin", ":item_classes_end"),
       (this_or_next|eq, "$g_multiplayer_disallow_ranged_weapons", 0),
       (neg|is_between, ":item_class", multi_item_class_type_ranged_weapons_begin, multi_item_class_type_ranged_weapons_end),
       (item_slot_ge, ":item_no", ":item_troop_slot", 1),
	   (this_or_next|eq, "$g_multiplayer_disallow_granades", 0),
	   (neq, ":item_no", "itm_m_granata_small"),
       (store_add, ":cur_slot_index", ":num_available_items", multi_data_item_button_indices_begin),
       #using the result array for item_ids
       (troop_set_slot, "trp_multiplayer_data", ":cur_slot_index", ":item_no"),
       (val_add, ":num_available_items", 1),
     (try_end),

     #sorting
     (store_add, ":item_slots_end", ":num_available_items", multi_data_item_button_indices_begin),
     (store_sub, ":item_slots_end_minus_one", ":item_slots_end", 1),
     (try_for_range, ":cur_slot", multi_data_item_button_indices_begin, ":item_slots_end_minus_one"),
       (store_add, ":cur_slot_2_begin", ":cur_slot", 1),
       (try_for_range, ":cur_slot_2", ":cur_slot_2_begin", ":item_slots_end"),
         (troop_get_slot, ":item_1", "trp_multiplayer_data", ":cur_slot"),
         (troop_get_slot, ":item_2", "trp_multiplayer_data", ":cur_slot_2"),
         (call_script, "script_multiplayer_get_item_value_for_troop", ":item_1", ":troop_no"),
         (assign, ":item_1_point", reg0),
         (call_script, "script_multiplayer_get_item_value_for_troop", ":item_2", ":troop_no"),
         (assign, ":item_2_point", reg0),
         (item_get_slot, ":item_1_class", ":item_1", slot_item_multiplayer_item_class),
         (item_get_slot, ":item_2_class", ":item_2", slot_item_multiplayer_item_class),
         (val_mul, ":item_1_class", 1000000), #assuming maximum item price is 1000000
         (val_mul, ":item_2_class", 1000000), #assuming maximum item price is 1000000
         (val_add, ":item_1_point", ":item_1_class"),
         (val_add, ":item_2_point", ":item_2_class"),
         (lt, ":item_2_point", ":item_1_point"),
         (troop_set_slot, "trp_multiplayer_data", ":cur_slot", ":item_2"),
         (troop_set_slot, "trp_multiplayer_data", ":cur_slot_2", ":item_1"),
       (try_end),
     (try_end),

     (troop_get_slot, ":last_item_no", "trp_multiplayer_data", multi_data_item_button_indices_begin),
     (assign, ":num_item_classes", 0),
     (try_begin),
       (ge, ":last_item_no", 0),
       (item_get_slot, ":last_item_class", ":last_item_no", slot_item_multiplayer_item_class),

       (try_for_range, ":cur_slot", multi_data_item_button_indices_begin, ":item_slots_end"),
         (troop_get_slot, ":item_no", "trp_multiplayer_data", ":cur_slot"),
         (item_get_slot, ":item_class", ":item_no", slot_item_multiplayer_item_class),
         (neq, ":item_class", ":last_item_class"),
         (val_add, ":num_item_classes", 1),
         (assign, ":last_item_class", ":item_class"),
       (try_end),

       (try_begin),
         (store_mul, ":required_y", ":num_item_classes", 100),
         (gt, ":required_y", ":pos_y_begin"),
         (store_sub, ":dif", ":required_y", ":pos_y_begin"),
         (val_div, ":dif", 100),
         (val_add, ":dif", 1),
         (val_mul, ":dif", 100),
         (val_add, ":pos_y_begin", ":dif"),
       (try_end),

       (item_get_slot, ":last_item_class", ":last_item_no", slot_item_multiplayer_item_class),
     (try_end),
     (assign, ":cur_x", ":pos_x_begin"),
     (assign, ":cur_y", ":pos_y_begin"),
     (try_for_range, ":cur_slot", multi_data_item_button_indices_begin, ":item_slots_end"),
       (troop_get_slot, ":item_no", "trp_multiplayer_data", ":cur_slot"),
       (item_get_slot, ":item_class", ":item_no", slot_item_multiplayer_item_class),
       (try_begin),
         (neq, ":item_class", ":last_item_class"),
         (val_sub, ":cur_y", 100),
         (assign, ":cur_x", ":pos_x_begin"),
         (assign, ":last_item_class", ":item_class"),
       (try_end),
	   
	   # create buttons
       (create_image_button_overlay, ":cur_obj", "mesh_mp_inventory_choose", "mesh_mp_inventory_choose"),
       (position_set_x, pos1, 800),
       (position_set_y, pos1, 800),
       (overlay_set_size, ":cur_obj", pos1),
       (position_set_x, pos1, ":cur_x"),
       (position_set_y, pos1, ":cur_y"),
       (overlay_set_position, ":cur_obj", pos1),
       (create_mesh_overlay_with_item_id, reg0, ":item_no"),
       (store_add, ":item_x", ":cur_x", 50),
       (store_add, ":item_y", ":cur_y", 50),
       (position_set_x, pos1, ":item_x"),
       (position_set_y, pos1, ":item_y"),
       (overlay_set_position, reg0, pos1),
       (val_add, ":cur_x", ":x_adder"),
	 (try_end),  
	   
	   # wave information 
	 (assign, ":cur_x", ":pos_x_begin"),
     (assign, ":cur_y", ":pos_y_begin"),
	 (assign, ":counter", 0),
	 (try_for_range, ":cur_slot", multi_data_item_button_indices_begin, ":item_slots_end"),
       (troop_get_slot, ":item_no", "trp_multiplayer_data", ":cur_slot"),
       (item_get_slot, ":item_class", ":item_no", slot_item_multiplayer_item_class),
	   
       (try_begin),
         (neq, ":item_class", ":last_item_class"),
		 (val_add, ":counter", 1),
         (val_sub, ":cur_y", 100),
         (assign, ":cur_x", ":pos_x_begin"),
         (assign, ":last_item_class", ":item_class"),
       (try_end),
	   
	   (try_begin),
		(eq, "$g_multiplayer_game_type", multiplayer_game_type_captain_coop),
		(call_script, "script_multiplayer_get_item_value_for_troop", ":item_no", ":troop_no"),
		(assign, ":item_price", reg0),
		(try_begin),
			(is_between, ":item_price", 0, 301),
			(assign, ":border_wave", 0),
		(else_try),
			(is_between, ":item_price", 301, 551),
			(assign, ":border_wave", 3),
		(else_try),
			(is_between, ":item_price", 351, 701),
			(assign, ":border_wave", 5),
		(else_try),
			(is_between, ":item_price", 701, 1101),
			(assign, ":border_wave", 8),
		(else_try),
			(gt, ":item_price", 1001),
			(assign, ":border_wave", 11),
		(try_end),
		(lt, "$g_multiplayer_ccoop_wave_no", ":border_wave"),
		(gt, ":border_wave", 1),
		# print the result
	    (assign, reg1, ":border_wave"),
	    (assign, ":wave_cur_x", ":cur_x"),
		(assign, ":wave_cur_y", ":cur_y"),
		(val_add, ":wave_cur_x", 42),
		(val_add, ":wave_cur_y", 40),
		(try_begin),
			(ge, ":counter", 1),
			(val_add, ":wave_cur_y", 100),
		(try_end),
		(create_text_overlay, ":wave_text", "str_wave_reg1", tf_center_justify|tf_single_line|tf_with_outline),
		(overlay_set_color, ":wave_text", 0xffff00),
		(position_set_y, pos2, ":wave_cur_y"),
		(position_set_x, pos2, ":wave_cur_x"),
		(overlay_set_additional_render_height, ":wave_text", 10),
		(overlay_set_position, ":wave_text", pos2),
		(position_set_x, pos2, 1400), # set size
		(position_set_y, pos2, 1400),
		(overlay_set_size, ":wave_text", pos2),
	   (try_end),
	   
       (val_add, ":cur_x", ":x_adder"),
     (try_end),
     ]),

	 

  ("multiplayer_fill_map_game_types",
    [
      (store_script_param, ":game_type", 1),
      (try_for_range, ":i_multi", multi_data_maps_for_game_type_begin, multi_data_maps_for_game_type_end),
        (troop_set_slot, "trp_multiplayer_data", ":i_multi", -1),
      (try_end),
      (assign, ":num_maps", 0),
      (try_begin),
        (this_or_next|eq, ":game_type", multiplayer_game_type_deathmatch),
        (this_or_next|eq, ":game_type", multiplayer_game_type_duel),
        (this_or_next|eq, ":game_type", multiplayer_game_type_team_deathmatch),
		(this_or_next|eq, ":game_type", multiplayer_game_type_battle),
		(this_or_next|eq, ":game_type", multiplayer_game_type_captain_battle),
		(this_or_next|eq, ":game_type", multiplayer_game_type_captain_coop),
        (             eq, ":game_type", multiplayer_game_type_captain_team_deathmatch),
		(troop_set_slot, "trp_multiplayer_data", multi_data_maps_for_game_type_begin, "scn_mp_old_castle"),
		(troop_set_slot, "trp_multiplayer_data", multi_data_maps_for_game_type_begin + 1, "scn_mp_arena"),
		(troop_set_slot, "trp_multiplayer_data", multi_data_maps_for_game_type_begin + 2, "scn_mp_swamp_delta"),
		(troop_set_slot, "trp_multiplayer_data", multi_data_maps_for_game_type_begin + 3, "scn_mp_polya"),
		(troop_set_slot, "trp_multiplayer_data", multi_data_maps_for_game_type_begin + 4, "scn_mp_hillroad"),
		(troop_set_slot, "trp_multiplayer_data", multi_data_maps_for_game_type_begin + 5, "scn_mp_hutor"),
		(troop_set_slot, "trp_multiplayer_data", multi_data_maps_for_game_type_begin + 6, "scn_mp_marketplace"),
		(troop_set_slot, "trp_multiplayer_data", multi_data_maps_for_game_type_begin + 7, "scn_mp_forest_edge"),
		(troop_set_slot, "trp_multiplayer_data", multi_data_maps_for_game_type_begin + 8, "scn_mp_forest_road"),
		(troop_set_slot, "trp_multiplayer_data", multi_data_maps_for_game_type_begin + 9, "scn_mp_river_village"),
		(troop_set_slot, "trp_multiplayer_data", multi_data_maps_for_game_type_begin + 10, "scn_mp_new_1"),
		(troop_set_slot, "trp_multiplayer_data", multi_data_maps_for_game_type_begin + 11, "scn_mp_new_2"),
		(troop_set_slot, "trp_multiplayer_data", multi_data_maps_for_game_type_begin + 12, "scn_mp_new_3"),
        (troop_set_slot, "trp_multiplayer_data", multi_data_maps_for_game_type_begin + 13, "scn_random_multi_plain_medium"),
        (troop_set_slot, "trp_multiplayer_data", multi_data_maps_for_game_type_begin + 14, "scn_random_multi_plain_large"),
        (troop_set_slot, "trp_multiplayer_data", multi_data_maps_for_game_type_begin + 15, "scn_random_multi_steppe_medium"),
        (troop_set_slot, "trp_multiplayer_data", multi_data_maps_for_game_type_begin + 16, "scn_random_multi_steppe_large"),
        (assign, ":num_maps", 17),
      (else_try),
        (eq, ":game_type", multiplayer_game_type_capture_the_flag),
		(troop_set_slot, "trp_multiplayer_data", multi_data_maps_for_game_type_begin, "scn_mp_old_castle"),
		(troop_set_slot, "trp_multiplayer_data", multi_data_maps_for_game_type_begin + 1, "scn_mp_arena"),
		(troop_set_slot, "trp_multiplayer_data", multi_data_maps_for_game_type_begin + 2, "scn_mp_swamp_delta"),
		(troop_set_slot, "trp_multiplayer_data", multi_data_maps_for_game_type_begin + 3, "scn_mp_polya"),
		(troop_set_slot, "trp_multiplayer_data", multi_data_maps_for_game_type_begin + 4, "scn_mp_hillroad"),
		(troop_set_slot, "trp_multiplayer_data", multi_data_maps_for_game_type_begin + 5, "scn_mp_hutor"),
		(troop_set_slot, "trp_multiplayer_data", multi_data_maps_for_game_type_begin + 6, "scn_mp_marketplace"),
		(troop_set_slot, "trp_multiplayer_data", multi_data_maps_for_game_type_begin + 7, "scn_mp_forest_edge"),
        (troop_set_slot, "trp_multiplayer_data", multi_data_maps_for_game_type_begin + 8, "scn_mp_forest_road"),
		(troop_set_slot, "trp_multiplayer_data", multi_data_maps_for_game_type_begin + 9, "scn_mp_river_village"),
		(troop_set_slot, "trp_multiplayer_data", multi_data_maps_for_game_type_begin + 10, "scn_mp_new_2"),
		(troop_set_slot, "trp_multiplayer_data", multi_data_maps_for_game_type_begin + 11, "scn_mp_new_3"),
        (assign, ":num_maps", 12),
      (else_try),
        (eq, ":game_type", multiplayer_game_type_headquarters),
		(troop_set_slot, "trp_multiplayer_data", multi_data_maps_for_game_type_begin, "scn_mp_old_castle"),
		(troop_set_slot, "trp_multiplayer_data", multi_data_maps_for_game_type_begin + 1, "scn_mp_arena"),
		(troop_set_slot, "trp_multiplayer_data", multi_data_maps_for_game_type_begin + 2, "scn_mp_swamp_delta"),
		(troop_set_slot, "trp_multiplayer_data", multi_data_maps_for_game_type_begin + 3, "scn_mp_polya"),
		(troop_set_slot, "trp_multiplayer_data", multi_data_maps_for_game_type_begin + 4, "scn_mp_hillroad"),
		(troop_set_slot, "trp_multiplayer_data", multi_data_maps_for_game_type_begin + 5, "scn_mp_hutor"),
		(troop_set_slot, "trp_multiplayer_data", multi_data_maps_for_game_type_begin + 6, "scn_mp_marketplace"),
		(troop_set_slot, "trp_multiplayer_data", multi_data_maps_for_game_type_begin + 7, "scn_mp_forest_edge"),
        (troop_set_slot, "trp_multiplayer_data", multi_data_maps_for_game_type_begin + 8, "scn_mp_forest_road"),
		(troop_set_slot, "trp_multiplayer_data", multi_data_maps_for_game_type_begin + 9, "scn_mp_river_village"),
		(troop_set_slot, "trp_multiplayer_data", multi_data_maps_for_game_type_begin + 10, "scn_mp_new_3"),
        (assign, ":num_maps", 11),
      (else_try),
        (this_or_next|eq, ":game_type", multiplayer_game_type_captain_siege),
        (eq, ":game_type", multiplayer_game_type_siege),
        (troop_set_slot, "trp_multiplayer_data", multi_data_maps_for_game_type_begin, "scn_mp_nomad_camp"),
	    (troop_set_slot, "trp_multiplayer_data", multi_data_maps_for_game_type_begin + 1, "scn_mp_swed_zamok"),
	    (troop_set_slot, "trp_multiplayer_data", multi_data_maps_for_game_type_begin + 2, "scn_mp_novgorod_fortress"),
	    (troop_set_slot, "trp_multiplayer_data", multi_data_maps_for_game_type_begin + 3, "scn_mp_rus_fortress"),
	    (troop_set_slot, "trp_multiplayer_data", multi_data_maps_for_game_type_begin + 4, "scn_mp_mosk_monastyr"),
        (assign, ":num_maps", 5),
      (try_end),
      (assign, reg0, ":num_maps"),
      ]),


  
  # script_multiplayer_count_players_bots
  # Input: none
  # Output: none
  ("multiplayer_count_players_bots",
    [
      (get_max_players, ":num_players"),
      (try_for_range, ":cur_player", 0, ":num_players"),
        (player_is_active, ":cur_player"),
        (player_set_slot, ":cur_player", slot_player_last_bot_count, 0),
      (try_end),

      (try_for_agents, ":cur_agent"),
        (agent_is_human, ":cur_agent"),
        (agent_is_alive, ":cur_agent"),
        (agent_get_player_id, ":agent_player", ":cur_agent"),
        (lt, ":agent_player", 0), #not a player
        (agent_get_group, ":agent_group", ":cur_agent"),
        (player_is_active, ":agent_group"),
        (player_get_slot, ":bot_count", ":agent_group", slot_player_last_bot_count),
        (val_add, ":bot_count", 1),
        (player_set_slot, ":agent_group", slot_player_last_bot_count, ":bot_count"),
      (try_end),
      ]),

  # script_multiplayer_find_player_leader_for_bot
  # Input: arg1 = team_no
  # Output: reg0 = player_no
  ("multiplayer_find_player_leader_for_bot",
    [
      (store_script_param, ":team_no", 1),
      (store_script_param, ":look_only_actives", 2),

      (team_get_faction, ":team_faction", ":team_no"),
      (assign, ":num_ai_troops", 0),
      (try_for_range, ":cur_ai_troop", multiplayer_ai_troops_begin, multiplayer_ai_troops_end),
        (store_troop_faction, ":ai_troop_faction", ":cur_ai_troop"),
        (eq, ":ai_troop_faction", ":team_faction"),
        (val_add, ":num_ai_troops", 1),
      (try_end),

      (call_script, "script_multiplayer_count_players_bots"),

      (assign, ":team_player_count", 0),

      (get_max_players, ":num_players"),
      (try_for_range, ":cur_player", 0, ":num_players"),
        (assign, ":continue", 0),
        (player_is_active, ":cur_player"),          
        (try_begin),
          (eq, ":look_only_actives", 0),
          (assign, ":continue", 1),
        (else_try),
          (neq, ":look_only_actives", 0),
          (player_get_agent_id, ":cur_agent", ":cur_player"),
          (ge, ":cur_agent", 0),
          (agent_is_alive, ":cur_agent"),
          (assign, ":continue", 1),
        (try_end),

        (eq, ":continue", 1),
      
        (player_get_team_no, ":player_team", ":cur_player"),
        (eq, ":team_no", ":player_team"),
        (val_add, ":team_player_count", 1),
      (try_end),
      (assign, ":result_leader", -1),
      (try_begin),      
        (gt, ":team_player_count", 0),
        (assign, ":total_bot_count", "$g_multiplayer_num_bots_team_1"),
        (try_begin),
          (eq, ":team_no", 1),
          (assign, ":total_bot_count", "$g_multiplayer_num_bots_team_2"),
        (try_end),
        (store_div, ":num_bots_for_each_player", ":total_bot_count", ":team_player_count"),
        (store_mul, ":check_remainder", ":num_bots_for_each_player", ":team_player_count"),
        (try_begin),
          (lt, ":check_remainder", ":total_bot_count"),
          (val_add, ":num_bots_for_each_player", 1),
        (try_end),
      
        (assign, ":total_bot_req", 0),
        (try_for_range, ":cur_player", 0, ":num_players"),
          (player_is_active, ":cur_player"),

          (player_get_agent_id, ":cur_agent", ":cur_player"),
          (ge, ":cur_agent", 0),
          (agent_is_alive, ":cur_agent"),
      
          (player_get_team_no, ":player_team", ":cur_player"),
          (eq, ":team_no", ":player_team"),
          (assign, ":ai_wanted", 0),
          (store_add, ":end_cond", slot_player_bot_type_1_wanted, ":num_ai_troops"),
          (try_for_range, ":bot_type_wanted_slot", slot_player_bot_type_1_wanted, ":end_cond"),
            (player_slot_ge, ":cur_player", ":bot_type_wanted_slot", 1),
            (assign, ":ai_wanted", 1),
            (assign, ":end_cond", 0), #break
          (try_end),
          (eq, ":ai_wanted", 1),
          (player_get_slot, ":player_bot_count", ":cur_player", slot_player_last_bot_count),
          (lt, ":player_bot_count", ":num_bots_for_each_player"),
          (val_add, ":total_bot_req", ":num_bots_for_each_player"),
          (val_sub, ":total_bot_req", ":player_bot_count"),
        (try_end),
        (gt, ":total_bot_req", 0),
      
        (store_random_in_range, ":random_bot", 0, ":total_bot_req"),
        (try_for_range, ":cur_player", 0, ":num_players"),
          (player_is_active, ":cur_player"),

          (player_get_agent_id, ":cur_agent", ":cur_player"),
          (ge, ":cur_agent", 0),
          (agent_is_alive, ":cur_agent"),

          (player_get_team_no, ":player_team", ":cur_player"),
          (eq, ":team_no", ":player_team"),
          (assign, ":ai_wanted", 0),
          (store_add, ":end_cond", slot_player_bot_type_1_wanted, ":num_ai_troops"),
          (try_for_range, ":bot_type_wanted_slot", slot_player_bot_type_1_wanted, ":end_cond"),
            (player_slot_ge, ":cur_player", ":bot_type_wanted_slot", 1),
            (assign, ":ai_wanted", 1),
            (assign, ":end_cond", 0), #break
          (try_end),
          (eq, ":ai_wanted", 1),
          (player_get_slot, ":player_bot_count", ":cur_player", slot_player_last_bot_count),
          (lt, ":player_bot_count", ":num_bots_for_each_player"),
          (val_sub, ":random_bot", ":num_bots_for_each_player"),
          (val_add, ":random_bot", ":player_bot_count"),
          (lt, ":random_bot", 0),
          (assign, ":result_leader", ":cur_player"),
          (assign, ":num_players", 0), #break
        (try_end),
      (try_end),
      (assign, reg0, ":result_leader"),
      ]),


  # script_multiplayer_find_bot_troop_and_group_for_spawn
  # Input: arg1 = team_no
  # Output: reg0 = troop_id, reg1 = group_id
  ("multiplayer_find_bot_troop_and_group_for_spawn",
    [
      (store_script_param, ":team_no", 1),
      (store_script_param, ":look_only_actives", 2),

      (call_script, "script_multiplayer_find_player_leader_for_bot", ":team_no", ":look_only_actives"),
      (assign, ":leader_player", reg0),

      (assign, ":available_troops_in_faction", 0),
      (assign, ":available_troops_to_spawn", 0),
      (team_get_faction, ":team_faction_no", ":team_no"),

      (try_for_range, ":troop_no", multiplayer_ai_troops_begin, multiplayer_ai_troops_end),
        (store_troop_faction, ":troop_faction", ":troop_no"),
        (eq, ":troop_faction", ":team_faction_no"),
        (store_add, ":wanted_slot", slot_player_bot_type_1_wanted, ":available_troops_in_faction"),
        (val_add, ":available_troops_in_faction", 1),
        (try_begin),
          (this_or_next|lt, ":leader_player", 0),
          (player_slot_ge, ":leader_player", ":wanted_slot", 1),
          (val_add, ":available_troops_to_spawn", 1),
        (try_end),
      (try_end),

      (assign, ":available_troops_in_faction", 0),

      (store_random_in_range, ":random_troop_index", 0, ":available_troops_to_spawn"),
      (assign, ":end_cond", multiplayer_ai_troops_end),
      (try_for_range, ":troop_no", multiplayer_ai_troops_begin, ":end_cond"),
        (store_troop_faction, ":troop_faction", ":troop_no"),
        (eq, ":troop_faction", ":team_faction_no"),
        (store_add, ":wanted_slot", slot_player_bot_type_1_wanted, ":available_troops_in_faction"),
        (val_add, ":available_troops_in_faction", 1),
        (this_or_next|lt, ":leader_player", 0),
        (player_slot_ge, ":leader_player", ":wanted_slot", 1),
        (val_sub, ":random_troop_index", 1),
        (lt, ":random_troop_index", 0),
        (assign, ":end_cond", 0),
        (assign, ":selected_troop", ":troop_no"),
      (try_end),
      (assign, reg0, ":selected_troop"),
      (assign, reg1, ":leader_player"),
      ]),	

  # script_multiplayer_change_leader_of_bot
  # Input: arg1 = agent_no
  # Output: none
  ("multiplayer_change_leader_of_bot",
    [
      (store_script_param, ":agent_no", 1),
      (agent_get_team, ":team_no", ":agent_no"),
      (call_script, "script_multiplayer_find_player_leader_for_bot", ":team_no", 1),
      (assign, ":leader_player", reg0),
      (agent_set_group, ":agent_no", ":leader_player"),
      ]),

  ("multiplayer_find_spawn_point",
  [
     (store_script_param, ":team_no", 1),
     (store_script_param, ":examine_all_spawn_points", 2), #0-dm, 1-tdm, 2-cf, 3-hq, 4-sg
     (store_script_param, ":is_horseman", 3), #0:no, 1:yes, -1:do not care
     
     (set_fixed_point_multiplier, 100),
                   
     (assign, ":flags", 0),
     
     (try_begin),
       (eq, ":examine_all_spawn_points", 1),
       (val_or, ":flags", spf_examine_all_spawn_points),
     (try_end),
     
     (try_begin),
       (eq, ":is_horseman", 1),
       (val_or, ":flags", spf_is_horseman),
     (try_end),

     (try_begin),
       (eq, "$g_multiplayer_game_type", multiplayer_game_type_deathmatch),
       (eq, "$g_multiplayer_game_type", multiplayer_game_type_duel),
       (val_or, ":flags", spf_all_teams_are_enemy),
       (val_or, ":flags", spf_try_to_spawn_close_to_at_least_one_enemy),
     (else_try),
       (eq, "$g_multiplayer_game_type", multiplayer_game_type_team_deathmatch),
       (val_or, ":flags", spf_try_to_spawn_close_to_at_least_one_enemy),       
     (else_try),
       (eq, "$g_multiplayer_game_type", multiplayer_game_type_siege),
	   (eq, ":is_horseman", 0), 
       (val_or, ":flags", spf_team_1_spawn_far_from_entry_66), #team 1 agents will not spawn 70 meters around of entry 0
       (val_or, ":flags", spf_team_0_walkers_spawn_at_high_points),
       (val_or, ":flags", spf_team_0_spawn_near_entry_66),       
       (val_or, ":flags", spf_care_agent_to_agent_distances_less),
     (else_try),
       (eq, "$g_multiplayer_game_type", multiplayer_game_type_siege),
       (val_or, ":flags", spf_team_1_spawn_far_from_entry_66), #team 1 agents will not spawn 70 meters around of entry 0
       (val_or, ":flags", spf_team_0_spawn_near_entry_66),       
       (val_or, ":flags", spf_care_agent_to_agent_distances_less),
     (else_try),
       (eq, "$g_multiplayer_game_type", multiplayer_game_type_capture_the_flag),
       (val_or, ":flags", spf_team_1_spawn_far_from_entry_0), #team 1 agents will not spawn 70 meters around of entry 0
       (val_or, ":flags", spf_team_0_spawn_far_from_entry_32), #team 0 agents will not spawn 70 meters around of entry 32
       (val_or, ":flags", spf_try_to_spawn_close_to_at_least_one_enemy),       
     (else_try),       
       (eq, "$g_multiplayer_game_type", multiplayer_game_type_headquarters),                     
       (assign, ":assigned_flag_count", 0),
       
       (store_sub, ":maximum_moved_flag_distance", multi_headquarters_pole_height, 50), #900 - 50 = 850
       (store_mul, ":maximum_moved_flag_distance_sq", ":maximum_moved_flag_distance", ":maximum_moved_flag_distance"),
       (val_div, ":maximum_moved_flag_distance_sq", 100), #dividing 100, because fixed point multiplier is 100 and it is included twice, look above line.
       
       (try_for_range, ":flag_no", 0, "$g_number_of_flags"),
         (store_add, ":cur_flag_owner_slot", multi_data_flag_owner_begin, ":flag_no"),
         (troop_get_slot, ":cur_flag_owner", "trp_multiplayer_data", ":cur_flag_owner_slot"),         
         
         (scene_prop_get_instance, ":pole_id", "spr_headquarters_pole_code_only", ":flag_no"),
         (prop_instance_get_position, pos0, ":pole_id"),
         
         (try_begin),
           (eq, ":cur_flag_owner", 1),
           (scene_prop_get_instance, ":flag_of_team_1", "$team_1_flag_scene_prop", ":flag_no"),                      
                      
           (prop_instance_get_position, pos1, ":flag_of_team_1"),
           (get_sq_distance_between_positions, ":flag_height_sq", pos0, pos1),           
           (ge, ":flag_height_sq", ":maximum_moved_flag_distance_sq"),
           
           (set_spawn_effector_scene_prop_id, ":assigned_flag_count", ":flag_of_team_1"),
           (val_add, ":assigned_flag_count", 1),
         (else_try),
           (eq, ":cur_flag_owner", 2),
           (scene_prop_get_instance, ":flag_of_team_2", "$team_2_flag_scene_prop", ":flag_no"),
           
           (prop_instance_get_position, pos1, ":flag_of_team_2"),
           (get_sq_distance_between_positions, ":flag_height_sq", pos0, pos1),           
           (ge, ":flag_height_sq", ":maximum_moved_flag_distance_sq"),

           (set_spawn_effector_scene_prop_id, ":assigned_flag_count", ":flag_of_team_2"),
           (val_add, ":assigned_flag_count", 1),
         (try_end),
       (try_end),
       (set_spawn_effector_scene_prop_id, ":assigned_flag_count", -1),
     (try_end),     
	 
     (multiplayer_find_spawn_point, reg0, ":team_no", ":flags"),
  ]),
      
  # script_multiplayer_find_spawn_point_2
  # Input: arg1 = team_no, arg2 = examine_all_spawn_points, arg3 = is_horseman
  # Output: reg0 = entry_point_no
  ("multiplayer_find_spawn_point_2",
   [
     ]),
  
  #script_multiplayer_buy_agent_equipment
  # Input: arg1 = player_no
  # Output: none
  ("multiplayer_buy_agent_equipment",
   [
     (store_script_param, ":player_no", 1),
     (player_get_troop_id, ":player_troop", ":player_no"),
     (player_get_gold, ":player_gold", ":player_no"),
     (player_get_slot, ":added_gold", ":player_no", slot_player_last_rounds_used_item_earnings),
     (player_set_slot, ":player_no", slot_player_last_rounds_used_item_earnings, 0),
     (val_add, ":player_gold", ":added_gold"),
     (assign, ":armor_bought", 0),
     
     #moving original values to temp slots
     (try_for_range, ":i_item", slot_player_selected_item_indices_begin, slot_player_selected_item_indices_end),
       (player_get_slot, ":selected_item_index", ":player_no", ":i_item"),
       (store_sub, ":i_cur_selected_item", ":i_item", slot_player_selected_item_indices_begin),
       (try_begin),
         (player_item_slot_is_picked_up, ":player_no", ":i_cur_selected_item"),
         (assign, ":selected_item_index", -1),
       (try_end),
       (val_add, ":i_cur_selected_item", slot_player_cur_selected_item_indices_begin),
       (player_set_slot, ":player_no", ":i_cur_selected_item", ":selected_item_index"),
     (try_end),
     (assign, ":end_cond", 1000),
     (try_for_range, ":unused", 0, ":end_cond"),
       (call_script, "script_multiplayer_calculate_cur_selected_items_cost", ":player_no", 0),
       (assign, ":total_cost", reg0),
       (try_begin),
         (gt, ":total_cost", ":player_gold"),
         #downgrade one of the selected items
         #first normalize the prices
         #then prioritize some of the weapon classes for specific troop classes
         (call_script, "script_multiplayer_get_troop_class", ":player_troop"),
         (assign, ":player_troop_class", reg0),

         (assign, ":max_cost_value", 0),
         (assign, ":max_cost_value_index", -1),
         (try_for_range, ":i_item", slot_player_cur_selected_item_indices_begin, slot_player_cur_selected_item_indices_end),
           (player_get_slot, ":item_id", ":player_no", ":i_item"),
           (ge, ":item_id", 0), #might be -1 for horses etc.
           (call_script, "script_multiplayer_get_item_value_for_troop", ":item_id", ":player_troop"),
           (assign, ":item_value", reg0),
           (store_sub, ":item_type", ":i_item", slot_player_cur_selected_item_indices_begin),
           (try_begin), #items
             (this_or_next|eq, ":item_type", 0),
             (this_or_next|eq, ":item_type", 1),
             (this_or_next|eq, ":item_type", 2),
             (eq, ":item_type", 3),
             (val_mul, ":item_value", 5),
           (else_try), #head
             (eq, ":item_type", 4),
             (val_mul, ":item_value", 4),
           (else_try), #body
             (eq, ":item_type", 5),
             (val_mul, ":item_value", 2),
           (else_try), #foot
             (eq, ":item_type", 6),
             (val_mul, ":item_value", 8),
           (else_try), #gloves
             (eq, ":item_type", 7),
             (val_mul, ":item_value", 8),
           (else_try), #horse
             #base value (most expensive)
           (try_end),
           (item_get_slot, ":item_class", ":item_id", slot_item_multiplayer_item_class),
           (try_begin),
             (eq, ":player_troop_class", multi_troop_class_infantry),
             (this_or_next|eq, ":item_class", multi_item_class_type_sword),
             (this_or_next|eq, ":item_class", multi_item_class_type_axe),
             (this_or_next|eq, ":item_class", multi_item_class_type_blunt),
             (this_or_next|eq, ":item_class", multi_item_class_type_war_picks),
             (this_or_next|eq, ":item_class", multi_item_class_type_two_handed_sword),
             (this_or_next|eq, ":item_class", multi_item_class_type_small_shield),
             (eq, ":item_class", multi_item_class_type_two_handed_axe),
             (val_div, ":item_value", 2),
           (else_try),
             (eq, ":player_troop_class", multi_troop_class_spearman),
             (this_or_next|eq, ":item_class", multi_item_class_type_spear),
             (eq, ":item_class", multi_item_class_type_large_shield),
             (val_div, ":item_value", 2),
           (else_try),
             (eq, ":player_troop_class", multi_troop_class_cavalry),
             (this_or_next|eq, ":item_class", multi_item_class_type_lance),
             (this_or_next|eq, ":item_class", multi_item_class_type_sword),
             (eq, ":item_class", multi_item_class_type_horse),
             (val_div, ":item_value", 2),
           (else_try),
             (eq, ":player_troop_class", multi_troop_class_archer),
             (this_or_next|eq, ":item_class", multi_item_class_type_bow),
             (eq, ":item_class", multi_item_class_type_arrow),
             (val_div, ":item_value", 2),
           (else_try),
             (eq, ":player_troop_class", multi_troop_class_crossbowman),
             (this_or_next|eq, ":item_class", multi_item_class_type_crossbow),
             (eq, ":item_class", multi_item_class_type_bolt),
             (val_div, ":item_value", 2),
           (else_try),
             (eq, ":player_troop_class", multi_troop_class_mounted_archer),
             (this_or_next|eq, ":item_class", multi_item_class_type_bow),
             (this_or_next|eq, ":item_class", multi_item_class_type_arrow),
             (eq, ":item_class", multi_item_class_type_horse),
             (val_div, ":item_value", 2),
           (else_try),
             (eq, ":player_troop_class", multi_troop_class_mounted_crossbowman),
             (this_or_next|eq, ":item_class", multi_item_class_type_crossbow),
             (this_or_next|eq, ":item_class", multi_item_class_type_bolt),
             (eq, ":item_class", multi_item_class_type_horse),
             (val_div, ":item_value", 2),
           (try_end),
   
           (try_begin),
             (gt, ":item_value", ":max_cost_value"),
             (assign, ":max_cost_value", ":item_value"),
             (assign, ":max_cost_value_index", ":i_item"),
           (try_end),
         (try_end),

         #max_cost_value and max_cost_value_index will definitely be valid
         #unless no items are left (therefore some items must cost 0 gold)
         (player_get_slot, ":item_id", ":player_no", ":max_cost_value_index"),
         (call_script, "script_multiplayer_get_previous_item_for_item_and_troop", ":item_id", ":player_troop"),
         (assign, ":item_id", reg0),
         (player_set_slot, ":player_no", ":max_cost_value_index", ":item_id"),
       (else_try),
         (assign, ":end_cond", 0),
         (val_sub, ":player_gold", ":total_cost"),
         (player_set_gold, ":player_no", ":player_gold", multi_max_gold_that_can_be_stored),
         (try_for_range, ":i_item", slot_player_cur_selected_item_indices_begin, slot_player_cur_selected_item_indices_end),
           (player_get_slot, ":item_id", ":player_no", ":i_item"),
           #checking if different class default item replace is needed for weapons
           (try_begin),
             (ge, ":item_id", 0),
             #then do nothing
           (else_try),
             (store_sub, ":base_index_slot", ":i_item", slot_player_cur_selected_item_indices_begin),
             (store_add, ":selected_item_index_slot", ":base_index_slot", slot_player_selected_item_indices_begin),
             (player_get_slot, ":selected_item_index", ":player_no", ":selected_item_index_slot"),
             (this_or_next|eq, ":selected_item_index", -1),
             (player_item_slot_is_picked_up, ":player_no", ":base_index_slot"),
             #then do nothing
           (else_try),
             #an item class without a default value is -1, then find a default weapon
             (item_get_slot, ":item_class", ":selected_item_index", slot_item_multiplayer_item_class),
             (is_between, ":item_class", multi_item_class_type_weapons_begin, multi_item_class_type_weapons_end),
             (assign, ":dc_replaced_item", -1),
             (try_for_range, ":i_dc_item_class", multi_item_class_type_melee_weapons_begin, multi_item_class_type_melee_weapons_end),
               (lt, ":dc_replaced_item", 0),
               (assign, ":dc_item_class_used", 0),
               (try_for_range, ":i_dc_item", slot_player_cur_selected_item_indices_begin, slot_player_cur_selected_item_indices_end),
                 (player_get_slot, ":dc_cur_item", ":player_no", ":i_dc_item"),
                 (ge, ":dc_cur_item", 0),
                 (item_get_slot, ":dc_item_class", ":dc_cur_item", slot_item_multiplayer_item_class),
                 (eq, ":dc_item_class", ":i_dc_item_class"),
                 (assign, ":dc_item_class_used", 1),
               (try_end),
               (eq, ":dc_item_class_used", 0),
               (assign, ":dc_end_cond", all_items_end),
               (try_for_range, ":i_dc_new_item", all_items_begin, ":dc_end_cond"),
                 (item_slot_eq, ":i_dc_new_item", slot_item_multiplayer_item_class, ":i_dc_item_class"),
                 (call_script, "script_cf_multiplayer_is_item_default_for_troop", ":i_dc_new_item", ":player_troop"),
                 (assign, ":dc_end_cond", 0), #break
                 (assign, ":dc_replaced_item", ":i_dc_new_item"),
               (try_end),
             (try_end),
             (ge, ":dc_replaced_item", 0),
             (player_set_slot, ":player_no", ":i_item", ":dc_replaced_item"),
             (assign, ":item_id", ":dc_replaced_item"),
           (try_end),

           #finally, add the item to agent
           (try_begin),
             (ge, ":item_id", 0), #might be -1 for horses etc.
             (store_sub, ":item_slot", ":i_item", slot_player_cur_selected_item_indices_begin),
             (player_add_spawn_item, ":player_no", ":item_slot", ":item_id"),
             (try_begin),
               (eq, ":item_slot", ek_body), #ek_body is the slot for armor
               (assign, ":armor_bought", 1),
             (try_end),
           (try_end),
         (try_end),

         (player_set_slot, ":player_no", slot_player_total_equipment_value, ":total_cost"),     
       (try_end),
     (try_end),
     (try_begin),
       (eq, ":armor_bought", 0),
       (eq, "$g_multiplayer_force_default_armor", 1),
       (assign, ":end_cond", all_items_end),
       (try_for_range, ":i_new_item", all_items_begin, ":end_cond"),
         (this_or_next|item_slot_eq, ":i_new_item", slot_item_multiplayer_item_class, multi_item_class_type_light_armor),
         (this_or_next|item_slot_eq, ":i_new_item", slot_item_multiplayer_item_class, multi_item_class_type_medium_armor),
         (item_slot_eq, ":i_new_item", slot_item_multiplayer_item_class, multi_item_class_type_heavy_armor),
         (call_script, "script_cf_multiplayer_is_item_default_for_troop", ":i_new_item", ":player_troop"),
         (assign, ":end_cond", 0), #break
         (player_add_spawn_item, ":player_no", ek_body, ":i_new_item"), #ek_body is the slot for armor
       (try_end),
     (try_end),
     ]),

  
  # script_party_get_ideal_size @used for NPC parties.
  # Input: arg1 = party_no
  # Output: reg0: ideal size 
  ("party_get_ideal_size",
    [
      (store_script_param_1, ":party_no"),
      (assign, ":limit", 30),
      (try_begin),
        (party_slot_eq, ":party_no", slot_party_type, spt_kingdom_hero_party),
        (party_stack_get_troop_id, ":party_leader", ":party_no", 0),
        (store_faction_of_party, ":faction_id", ":party_no"),
        (assign, ":limit", 10),

        (store_skill_level, ":skill", "skl_leadership", ":party_leader"),
        (store_attribute_level, ":charisma", ":party_leader", ca_charisma),
		(store_mul, ":charisma_mul_2", ":charisma", 2),
        (val_mul, ":skill", 5),
        (val_add, ":limit", ":skill"),
        (val_add, ":limit", ":charisma_mul_2"),

        (troop_get_slot, ":troop_renown", ":party_leader", slot_troop_renown),
        (store_div, ":renown_bonus", ":troop_renown", 25),
        (val_add, ":limit", ":renown_bonus"),

        (try_begin),
          (faction_slot_eq, ":faction_id", slot_faction_leader, ":party_leader"),
          (val_add, ":limit", 100),
        (try_end),
      (try_end),
      (store_character_level, ":level", "trp_player"), #increase limits a little bit as the game progresses.
      (store_add, ":level_factor", 90, ":level"),
      (val_mul, ":limit", ":level_factor"),
      (val_div, ":limit", 90),
	  #OiM code for potop story line
	  (try_begin),
		(check_quest_active,"qst_oim_potop_main"),
		(neg|check_quest_failed,"qst_oim_potop_main"),
		(quest_slot_ge, "qst_oim_potop_main", slot_quest_current_state, 3),
		(try_begin), 
			(eq, ":faction_id", "fac_kingdom_1"),
			(val_add, ":limit", -20),
		(else_try),
			(eq, ":faction_id", "fac_kingdom_4"),		
			(val_add, ":limit", 20),
		(try_end),
	  (try_end), 
	  (try_begin), 
		(lt, ":limit", 1), 
		(val_add, ":limit", 1),
	  (try_end), 
      (assign, reg0, ":limit"),
  ]),


  #script_game_get_party_prisoner_limit:
  # This script is called from the game engine when the prisoner limit is needed for a party.
  # INPUT: arg1 = party_no
  # OUTPUT: reg0 = prisoner_limit
  ("game_get_party_prisoner_limit",
    [
#      (store_script_param_1, ":party_no"),
      (assign, ":troop_no", "trp_player"),

      (assign, ":limit", 0),
      (store_skill_level, ":skill", "skl_prisoner_management", ":troop_no"),
      (store_mul, ":limit", ":skill", 10),
      (assign, reg0, ":limit"),
      (set_trigger_result, reg0),
  ]),

  #script_game_get_item_extra_text:
  # This script is called from the game engine when an item's properties are displayed.
  # INPUT: arg1 = item_no, arg2 = extra_text_id (this can be between 0-7 (7 included)), arg3 = item_modifier
  # OUTPUT: result_string = item extra text, trigger_result = text color (0 for default)
  ("game_get_item_extra_text",
    [
      (store_script_param, ":item_no", 1),
      (store_script_param, ":extra_text_id", 2),
      (store_script_param, ":item_modifier", 3),
      (try_begin),
        (is_between, ":item_no", food_begin, food_end),
        (try_begin),
          (eq, ":extra_text_id", 0),
          (assign, ":continue", 1),
          (try_begin),
            (this_or_next|eq, ":item_no", "itm_cattle_meat"),
            (this_or_next|eq, ":item_no", "itm_pork"),
				(eq, ":item_no", "itm_chicken"),
				
            (eq, ":item_modifier", imod_rotten),
            (assign, ":continue", 0),
          (try_end),
          (eq, ":continue", 1),
          (item_get_slot, ":food_bonus", ":item_no", slot_item_food_bonus),
          (assign, reg1, ":food_bonus"),
          (set_result_string, "@+{reg1} to party morale"),
          (set_trigger_result, 0x4488FF),
        (try_end),
      (else_try),
        (is_between, ":item_no", readable_books_begin, readable_books_end),
        (try_begin),
          (eq, ":extra_text_id", 0),
          (item_get_slot, reg1, ":item_no", slot_item_intelligence_requirement),
          (set_result_string, "@Requires {reg1} intelligence to read"),
          (set_trigger_result, 0xFFEEDD),
        (else_try),
          (eq, ":extra_text_id", 1),
          (item_get_slot, ":progress", ":item_no", slot_item_book_reading_progress),
          (val_div, ":progress", 10),
          (assign, reg1, ":progress"),
          (set_result_string, "@Reading Progress: {reg1}%"),
          (set_trigger_result, 0xFFEEDD),
        (try_end),
      (else_try),
        (is_between, ":item_no", reference_books_begin, reference_books_end),
        (try_begin),
          (eq, ":extra_text_id", 0),
          (try_begin),
            (eq, ":item_no", "itm_book_wound_treatment_reference"),
            (str_store_string, s1, "@wound treament"),
          (else_try),
            (eq, ":item_no", "itm_book_training_reference"),
            (str_store_string, s1, "@trainer"),
          (else_try),
            (eq, ":item_no", "itm_book_surgery_reference"),
            (str_store_string, s1, "@surgery"),
          (try_end),
          (set_result_string, "@+1 to {s1} while in inventory"),
          (set_trigger_result, 0xFFEEDD),
        (try_end),
	  (else_try), 
		(this_or_next|eq, ":item_no", "itm_black_hetman"), 
		(             eq, ":item_no", "itm_shapka_monomaha"), 
		(eq, ":extra_text_id", 0),
		(str_store_string, s2, "str_pernach_army_bonus"),
		(set_result_string, "@{s2}"),
		(set_trigger_result, 0xFFEEDD),
	  (else_try), 
		(is_between, ":item_no", granades_begin, granades_end),
		(try_begin), 
		   (eq, ":extra_text_id", 0),
		   (try_begin), 
		     (eq, ":item_no", "itm_granata"),
		     (assign, reg1, 7), 
			 (assign, reg2, 2), 
		   (else_try), 	 
		     (eq, ":item_no", "itm_granata_medium"),
		     (assign, reg1, 5), 
			 (assign, reg2, 2), 
		   (else_try), 	 
		     (eq, ":item_no", "itm_granata_small"),
		     (assign, reg1, 3), 
			 (assign, reg2, 2), 
		   (try_end), 	

           (set_result_string, "@Base damage radius: {reg1}, critical radius: {reg2}"),
           (set_trigger_result, 0xFFEEDD),
		(try_end),
      (try_end),
  ]),

  #script_game_on_disembark:
  # This script is called from the game engine when the player reaches the shore with a ship.
  # INPUT: pos0 = disembark position
  # OUTPUT: none
  ("game_on_disembark",
   [(jump_to_menu, "mnu_disembark"),
  ]),


  #script_game_context_menu_get_buttons:
  # This script is called from the game engine when the player clicks the right mouse button over a party on the map.
  # INPUT: arg1 = party_no
  # OUTPUT: none, fills the menu buttons
  ("game_context_menu_get_buttons",
   [
     (store_script_param, ":party_no", 1),
    (try_begin),
      (neq, ":party_no", "p_main_party"),
      (context_menu_add_item, "@Move here", cmenu_move),
    (try_end),
        
    (try_begin),
      (is_between, ":party_no", centers_begin, centers_end),
      (context_menu_add_item, "@View notes", 1),
    (else_try),
      (party_get_num_companion_stacks, ":num_stacks", ":party_no"),
      (gt, ":num_stacks", 0),
      (party_stack_get_troop_id, ":troop_no", ":party_no", 0),
      (is_between, ":troop_no", kingdom_heroes_begin, kingdom_heroes_end),
      (context_menu_add_item, "@View notes", 2),
    (try_end),
    
     (try_begin),
       (neq, ":party_no", "p_main_party"),       
       (store_faction_of_party, ":party_faction", ":party_no"),
                     
       (this_or_next|eq, ":party_faction", "$players_kingdom"),
       (this_or_next|eq, ":party_faction", "fac_player_supporters_faction"),
	   
       (party_slot_eq, ":party_no", slot_party_type, spt_kingdom_caravan),	   
       
       (neg|is_between, ":party_no", centers_begin, centers_end),
       
       (context_menu_add_item, "str_accompany", cmenu_follow), 
     (try_end),    
  ]),

  #script_game_event_context_menu_button_clicked:
  # This script is called from the game engine when the player clicks on a button at the right mouse menu.
  # INPUT: arg1 = party_no, arg2 = button_value
  # OUTPUT: none
  ("game_event_context_menu_button_clicked",
   [(store_script_param, ":party_no", 1),
    (store_script_param, ":button_value", 2),
    (try_begin),
      (eq, ":button_value", 1),
      (change_screen_notes, 3, ":party_no"),
    (else_try),
      (eq, ":button_value", 2),
      (party_stack_get_troop_id, ":troop_no", ":party_no", 0),
      (change_screen_notes, 1, ":troop_no"),
    (try_end),
  ]),

  #script_game_get_skill_modifier_for_troop
  # This script is called from the game engine when a skill's modifiers are needed
  # INPUT: arg1 = troop_no, arg2 = skill_no
  # OUTPUT: trigger_result = modifier_value
  ("game_get_skill_modifier_for_troop",
   [(store_script_param, ":troop_no", 1),
    (store_script_param, ":skill_no", 2),
    (assign, ":modifier_value", 0),
    (try_begin),
      (eq, ":skill_no", "skl_wound_treatment"),
      (call_script, "script_get_troop_item_amount", ":troop_no", "itm_book_wound_treatment_reference"),
      (gt, reg0, 0),
      (val_add, ":modifier_value", 1),
    (else_try),
      (eq, ":skill_no", "skl_trainer"),
      (call_script, "script_get_troop_item_amount", ":troop_no", "itm_book_training_reference"),
      (gt, reg0, 0),
      (val_add, ":modifier_value", 1),
    (else_try),
      (eq, ":skill_no", "skl_surgery"),
      (call_script, "script_get_troop_item_amount", ":troop_no", "itm_book_surgery_reference"),
      (gt, reg0, 0),
      (val_add, ":modifier_value", 1),
    (try_end),
    (set_trigger_result, ":modifier_value"),
    ]),

# Note to modders: Uncomment these if you'd like to use the following.
  
##  #script_game_check_party_sees_party
##  # This script is called from the game engine when a party is inside the range of another party
##  # INPUT: arg1 = party_no_seer, arg2 = party_no_seen
##  # OUTPUT: trigger_result = true or false (1 = true, 0 = false)
##  ("game_check_party_sees_party",
##   [
##     (store_script_param, ":party_no_seer", 1),
##     (store_script_param, ":party_no_seen", 2),
##     (set_trigger_result, 1),
##    ]),
##
#script_game_get_party_speed_multiplier
# This script is called from the game engine when a skill's modifiers are needed
# INPUT: arg1 = party_no
# OUTPUT: trigger_result = multiplier (scaled by 100, meaning that giving 100 as the trigger result does not change the party speed)
("game_get_party_speed_multiplier",
[
	(store_script_param, ":party_no", 1),
	(party_get_template_id, ":template_no", ":party_no"), 
	(try_begin), 
		(eq, "$g_wagenburg_is_on", 1),
		(eq, ":party_no", "p_main_party"), 
		(set_trigger_result, 60),
	#(else_try), 
	#	(eq, ":party_no", "p_main_party"), 
	#	(check_quest_active, "qst_oim_deliver_caravan"),
	#	(neg|quest_slot_eq, "qst_oim_deliver_caravan", slot_quest_target_party, -1),  
	#	(set_trigger_result, 60),
	(else_try), 
		(this_or_next|eq, ":template_no", "pt_forager_party"),
		(this_or_next|eq, ":template_no", "pt_scout_party"),
		(             eq, ":template_no", "pt_patrol_party"),
		(set_trigger_result, 75),
	(else_try),                                   
		(set_trigger_result, 100),
	(try_end),	
]),
  

  # script_npc_get_troop_wage
  # This script is called from module system to calculate troop wages for npc parties.
  # Input:
  # param1: troop_id
  # Output: reg0: weekly wage
  
  ("npc_get_troop_wage",
    [
      (store_script_param_1, ":troop_id"),
      (assign,":wage", 0),
      (try_begin),
        (troop_is_hero, ":troop_id"),
      (else_try),
        (store_character_level, ":wage", ":troop_id"),
        (val_mul, ":wage", ":wage"),
        (val_add, ":wage", 50),
        (val_div, ":wage", 30),
        (troop_is_mounted, ":troop_id"),
        (val_mul, ":wage", 5),
        (val_div, ":wage", 4),
      (try_end),
      (assign, reg0, ":wage"),
  ]),

  #script_setup_talk_info
  # INPUT: $g_talk_troop, $g_talk_troop_relation
  ("setup_talk_info",
    [
      (talk_info_set_relation_bar, "$g_talk_troop_relation"),
      (str_store_troop_name, s61, "$g_talk_troop"),
      (str_store_string, s61, "@{!} {s61}"),
      (assign, reg1, "$g_talk_troop_relation"),
      (str_store_string, s62, "str_relation_reg1"),
      (talk_info_set_line, 0, s61),
      (talk_info_set_line, 1, s62),
      (call_script, "script_describe_relation_to_s63", "$g_talk_troop_relation"),
      (talk_info_set_line, 3, s63),
  ]),

#NPC companion changes begin
  #script_setup_talk_info_companions
  ("setup_talk_info_companions",
    [
      (call_script, "script_npc_morale", "$g_talk_troop"),
      (assign, ":troop_morale", reg0),

      (talk_info_set_relation_bar, ":troop_morale"),

      (str_store_troop_name, s61, "$g_talk_troop"),
      (str_store_string, s61, "@{!} {s61}"),
      (assign, reg1, ":troop_morale"),
      (str_store_string, s62, "str_morale_reg1"),
      (talk_info_set_line, 0, s61),
      (talk_info_set_line, 1, s62),
      (talk_info_set_line, 3, s63),
  ]),
#NPC companion changes end

  #script_update_party_creation_random_limits
  # INPUT: none
  ("update_party_creation_random_limits",
    [
      (store_character_level, ":player_level", "trp_player"),
      (store_mul, ":upper_limit", ":player_level", 3),

	  (options_get_campaign_ai, ":ai"),
	  (try_begin), 
		(eq, ":ai", 0), 
        (val_add, ":upper_limit", 25),
      (else_try),
	    (eq, ":ai", 1), 
	    (val_add, ":upper_limit", 15),
      (else_try),
	    (val_add, ":upper_limit", 5),
      (try_end),

      (val_min, ":upper_limit", 100),
      (set_party_creation_random_limits, 0, ":upper_limit"),
      (assign, reg0, ":upper_limit"),
  ]),

  #script_set_trade_route_between_centers
  # INPUT:
  # param1: center_no_1
  # param1: center_no_2
  ("set_trade_route_between_centers",
    [(store_script_param, ":center_no_1", 1),
     (store_script_param, ":center_no_2", 2),
     (assign, ":center_1_added", 0),
     (assign, ":center_2_added", 0),
     (try_for_range, ":cur_slot", slot_town_trade_routes_begin, slot_town_trade_routes_end),
       (try_begin),
         (eq, ":center_1_added", 0),
         (party_slot_eq, ":center_no_1", ":cur_slot", 0),
         (party_set_slot, ":center_no_1", ":cur_slot", ":center_no_2"),
         (assign, ":center_1_added", 1),
       (try_end),
       (try_begin),
         (eq, ":center_2_added", 0),
         (party_slot_eq, ":center_no_2", ":cur_slot", 0),
         (party_set_slot, ":center_no_2", ":cur_slot", ":center_no_1"),
         (assign, ":center_2_added", 1),
       (try_end),
     (try_end),
     (try_begin),
       (eq, ":center_1_added", 0),
       (str_store_party_name, s1, ":center_no_1"),
       (display_message, "@{!}DEBUG -- ERROR: More than 15 trade routes are given for {s1}."),
     (try_end),
     (try_begin),
       (eq, ":center_2_added", 0),
       (str_store_party_name, s1, ":center_no_2"),
       (display_message, "@{!}DEBUG -- ERROR: More than 15 trade routes are given for {s1}."),
     (try_end),
     ]),

  #script_center_change_trade_good_production
  # INPUT:
  # param1: center_no
  # param2: item_id
  # param3: production_rate (should be between -100 (for net consumption) and 100 (for net production)
  # param4: randomness (between 0-100)
  ("center_change_trade_good_production",
    [
      (store_script_param, ":center_no", 1),
      (store_script_param, ":item_no", 2),
	  (assign, ":item_def", ":item_no"),
      (store_script_param, ":production_rate", 3),
      (store_script_param, ":randomness", 4),
      (store_random_in_range, ":random_num", 0, ":randomness"),
      (store_random_in_range, ":random_sign", 0, 2),
      (try_begin),
        (eq, ":random_sign", 0),
        (val_add, ":production_rate", ":random_num"),
      (else_try),
        (val_sub, ":production_rate", ":random_num"),
      (try_end),
      (val_sub, ":item_no", trade_goods_begin),
      (val_add, ":item_no", slot_town_trade_good_productions_begin),

      (party_get_slot, ":old_production_rate", ":center_no", ":item_no"),
	  (assign, reg4, ":old_production_rate"),
      (val_add, ":production_rate", ":old_production_rate"),
      (party_set_slot, ":center_no", ":item_no", ":production_rate"),
	  (assign, reg5, ":production_rate"),

	  (str_store_party_name, s1, ":center_no"),
	  (str_store_item_name, s2, ":item_def"),
	  #(display_message, "@OZANDEBUG:{s1}-{s2} moved from {reg4} to {reg5}"),
  ]),

  ("average_trade_good_prices", #Called from start
    [
  ]),


  
  #script_average_trade_good_productions
  # INPUT: none (called only from game start?)
  #This is currently deprecated, as I was going to try to fine-tune production
  ("average_trade_good_productions",
    [
  ]),
  
  #script_normalize_trade_good_productions 
  #Adjusts productions according to the amount of the item produced
  # INPUT: none
  # This currently deprecated, as I was going to try to fine-tune productions
  ("normalize_trade_good_productions",
    [
  ]),
  
  #script_update_trade_good_prices
  # INPUT: none
  ("update_trade_good_prices",
    [
      (try_for_range, ":center_no", centers_begin, centers_end),
        (call_script, "script_update_trade_good_price_for_party", ":center_no"),
      (try_end),

      (try_for_range, ":cur_good", trade_goods_begin, trade_goods_end),
	    (assign, ":total_price", 0),
		(assign, ":total_constants", 0),

	    (try_for_range, ":center_no", centers_begin, centers_end),
          (store_sub, ":cur_good_price_slot", ":cur_good", trade_goods_begin),
          (val_add, ":cur_good_price_slot", slot_town_trade_good_prices_begin),
          (party_get_slot, ":cur_price", ":center_no", ":cur_good_price_slot"),

		  (try_begin),
		    (is_between, ":center_no", towns_begin, towns_end),
			(assign, ":constant", 5),
          (else_try),
		    (assign, ":constant", 1),
		  (try_end),

		  (val_mul, ":cur_price", ":constant"),

		  (val_add, ":total_price", ":cur_price"),
		  (val_add, ":total_constants", ":constant"),
		(try_end),

		(try_for_range, ":center_no", centers_begin, centers_end),
          #(this_or_next|is_between, ":center_no", towns_begin, towns_end),
          #(is_between, ":center_no", villages_begin, villages_end),

          (store_sub, ":cur_good_price_slot", ":cur_good", trade_goods_begin),
          (val_add, ":cur_good_price_slot", slot_town_trade_good_prices_begin),
          (party_get_slot, ":cur_price", ":center_no", ":cur_good_price_slot"),

		  (val_mul, ":cur_price", 1000),
		  (val_mul, ":cur_price", ":total_constants"),
		  (val_div, ":cur_price", ":total_price"),		  

		  (val_clamp, ":cur_price", minimum_price_factor, maximum_price_factor),
		  (party_set_slot, ":center_no", ":cur_good_price_slot", ":cur_price"),
		(try_end),
      (try_end),
  ]),

  #script_update_trade_good_price_for_party
  # INPUT: arg1 = party_no
  #Called once every 72 hours
  ("update_trade_good_price_for_party",
    [
      (store_script_param, ":center_no", 1),
      (try_for_range, ":cur_good", trade_goods_begin, trade_goods_end),
        (store_sub, ":cur_good_price_slot", ":cur_good", trade_goods_begin),
        (val_add, ":cur_good_price_slot", slot_town_trade_good_prices_begin),
		(party_get_slot, ":cur_price", ":center_no", ":cur_good_price_slot"),
		
        (store_sub, ":item_production_slot_no", ":cur_good", trade_goods_begin),
        (val_add, ":item_production_slot_no", slot_town_trade_good_productions_begin),
        (party_get_slot, ":production", ":center_no", ":item_production_slot_no"),
		

		#(str_store_party_name, s1, ":center_no"),
		#(str_store_item_name, s2, ":cur_good"),
		#(assign, reg0, ":cur_price"),
		#(assign, reg1, ":production"),
		#(display_log_message, "@OZANDEBUG:(b){s1} - {s2}, production: {reg1}, price: {reg0}"),


		#Change averages production x 2(1+random(2)) (was 4, random(8)) for excess demand
        (try_begin),
		  #supply is greater than demand
          (gt, ":production", 0), 
		  (store_mul, ":change_factor", ":production", 1), #price will be decreased by his factor
		  (store_random_in_range, ":random_change", 0, ":change_factor"),
		  (val_add, ":random_change", ":change_factor"),
		  (try_begin),
		    (neg|is_between, ":center_no", castles_begin, castles_end),
		    (val_add, ":random_change", ":change_factor"),
          (try_end),

		  #simulation starts
          (store_sub, ":final_price", ":cur_price", ":random_change"),
		  (val_clamp, ":final_price", minimum_price_factor, maximum_price_factor),		  		  		  
		  (try_begin), #Excess of supply decelerates over time, as low price reduces output
		    #if expected final price is 100 then it will multiply random_change by 0.308x ((100+300)/(1300) = 400/1300).
			(lt, ":final_price", 1000),
			(store_add, ":final_price_plus_300", ":final_price", 300),
			(val_mul, ":random_change", ":final_price_plus_300"),
			(val_div, ":random_change", 1300),
          (try_end),
          (val_sub, ":cur_price", ":random_change"),
        (else_try),
          (lt, ":production", 0), 
		  (store_sub, ":change_factor", 0, ":production"), #price will be increased by his factor
		  (val_mul, ":change_factor", 1), 
		  (store_random_in_range, ":random_change", 0, ":change_factor"),
		  (val_add, ":random_change", ":change_factor"),
		  (try_begin),
		    (neg|is_between, ":center_no", castles_begin, castles_end),
		    (val_add, ":random_change", ":change_factor"),
          (try_end),
          (val_add, ":cur_price", ":random_change"),
        (try_end),
			
        #Move price towards average by 3%...
		#Equilibrium is 33 cycles, or 100 days
		#Change per cycle is Production x 4
		#Thus, max differential = -5 x 4 x 33 = -660 for -5
		(try_begin),
		  (is_between, ":center_no", villages_begin, villages_end),
          (store_sub, ":price_difference", ":cur_price", average_price_factor),
          (val_mul, ":price_difference", 95), #5% for villages
          (val_div, ":price_difference", 100),
          (store_add, ":new_price", average_price_factor, ":price_difference"),
        (else_try),
          (store_sub, ":price_difference", ":cur_price", average_price_factor),
          (val_mul, ":price_difference", 97), #3% for towns
          (val_div, ":price_difference", 100),
          (store_add, ":new_price", average_price_factor, ":price_difference"),
        (try_end),
		
		#Price of manufactured goods drift towards primary raw material 
		(try_begin),
			(item_get_slot, ":raw_material", ":cur_good", slot_item_primary_raw_material),
            (neq, ":raw_material", 0),
	        (store_sub, ":raw_material_price_slot", ":raw_material", trade_goods_begin),
	        (val_add, ":raw_material_price_slot", slot_town_trade_good_prices_begin),

			(party_get_slot, ":total_raw_material_price", ":center_no", ":raw_material_price_slot"),
			(val_mul, ":total_raw_material_price", 3),
            (assign, ":number_of_centers", 3),

			(try_for_range, ":village_no", villages_begin, villages_end),
			  (party_slot_eq, ":village_no", slot_village_bound_center, ":center_no"),
			  (party_get_slot, ":raw_material_price", ":village_no", ":raw_material_price_slot"),
			  (val_add, ":total_raw_material_price", ":raw_material_price"),
			  (val_add, ":number_of_centers", 1),
            (try_end),

			(store_div, ":average_raw_material_price", ":total_raw_material_price", ":number_of_centers"),					

			(gt, ":average_raw_material_price", ":new_price"),
			(store_sub, ":raw_material_boost", ":average_raw_material_price", ":new_price"),
			(val_div, ":raw_material_boost", 10), 
			(val_add, ":new_price", ":raw_material_boost"),			
		(try_end),
		
        (val_clamp, ":new_price", minimum_price_factor, maximum_price_factor),

			#(str_store_party_name, s1, ":center_no"),
			#(str_store_item_name, s2, ":cur_good"),
			#(assign, reg0, ":new_price"),
			#(assign, reg1, ":production"),
			#(display_log_message, "@OZANDEBUG:(a){s1} - {s2}, production: {reg1}, price: {reg0}"),

        (party_set_slot, ":center_no", ":cur_good_price_slot", ":new_price"),
      (try_end),
  ]),

  #script_update_trade_good_prices
  # INPUT: none
  #("update_trade_good_prices",
  #  [
  #    (try_for_range, ":center_no", centers_begin, centers_end),
  #      ##(this_or_next|is_between, ":center_no", towns_begin, towns_end),
  #      ##(is_between, ":center_no", villages_begin, villages_end),
  #      (call_script, "script_update_trade_good_price_for_party", ":center_no"),
  #    (try_end),
  #]),

  #script_update_trade_good_price_for_party
  # INPUT: arg1 = party_no
  #("update_trade_good_price_for_party",
  #  [
  #    (store_script_param, ":center_no", 1),
  #    (try_for_range, ":cur_good", trade_goods_begin, trade_goods_end),
  #      (store_sub, ":cur_good_slot", ":cur_good", trade_goods_begin),
  #      (val_add, ":cur_good_slot", slot_town_trade_good_productions_begin),
  #      (store_sub, ":cur_good_price_slot", ":cur_good", trade_goods_begin),
  #      (val_add, ":cur_good_price_slot", slot_town_trade_good_prices_begin),
  #      (party_get_slot, ":production", ":center_no", ":cur_good_slot"),
	#	(party_get_slot, ":cur_price", ":center_no", ":cur_good_price_slot"),	
#		(str_store_party_name, s1, ":center_no"),
#		(str_store_item_name, s2, ":cur_good"),
#		(assign, reg0, ":cur_price"),
#		(assign, reg1, ":production"),
#		(display_log_message, "@(b){s1} - {s2}, production: {reg1}, price: {reg0}"),
#        (try_begin),
#          (lt, ":production", 0), #demand is greater than supply
#          (store_mul, ":change_factor", ":production", -3), #price will be increased by his factor
#        (else_try),
#          (store_mul, ":change_factor", ":production", 3), #price will be decreased by this factor
#		  (try_end),
#		  (store_random_in_range, ":random_change", 0, ":change_factor"),
#        (try_begin),
#          (lt, ":production", 0), #demand is greater than supply
#          (val_add, ":cur_price", ":random_change"),
#        (else_try),
#          (val_sub, ":cur_price", ":random_change"),
#        (try_end),
#        #Move price towards average by 2%...
#        (store_sub, ":price_difference", ":cur_price", average_price_factor),
#        (val_mul, ":price_difference", 97),
#        (val_div, ":price_difference", 100),
#        (store_add, ":new_price", average_price_factor, ":price_difference"),
#        (val_clamp, ":new_price", minimum_price_factor, maximum_price_factor),
#		(str_store_party_name, s1, ":center_no"),
#		(str_store_item_name, s2, ":cur_good"),
#		(assign, reg0, ":new_price"),
#		(assign, reg1, ":production"),
#		(display_log_message, "@OZANDEBUG:(a){s1} - {s2}, production: {reg1}, price: {reg0}"),
#        (party_set_slot, ":center_no", ":cur_good_price_slot", ":new_price"),
#      (try_end),
#  ]),  
  
  #script_do_merchant_town_trade
  # INPUT: arg1 = party_no (of the merchant), arg2 = center_no
  ("do_merchant_town_trade",
    [
      (store_script_param_1, ":party_no"),
      (store_script_param_2, ":center_no"),
      (call_script, "script_do_party_center_trade", ":party_no", ":center_no", 8), #change prices by 20% (lowered to 10)

      (assign, ":total_change", reg0),
      #Adding the earnings to the wealth (maximum changed price is the earning)
      (val_div, ":total_change", 2),
      (str_store_party_name, s1, ":party_no"),
      (str_store_party_name, s2, ":center_no"),
      (assign, reg1, ":total_change"),

      #Adding tax revenue to the center
      (party_get_slot, ":accumulated_tariffs", ":center_no", slot_center_accumulated_tariffs),
      (party_get_slot, ":prosperity", ":center_no", slot_town_prosperity),
      (store_add, ":tax_gain", ":prosperity", 10),
      (val_mul, ":tax_gain", ":total_change"),
      (val_div, ":tax_gain", 2200), #(10 + prosperity) / 110 * 5% of the merchant's revenue.
      (val_add, ":accumulated_tariffs", ":tax_gain"),
      (party_set_slot, ":center_no", slot_center_accumulated_tariffs, ":accumulated_tariffs"),
	  	  
      #Adding 1 to center prosperity
	  (try_begin),
        (store_random_in_range, ":rand", 0, 100),
        (lt, ":rand", 15), #was 35		
        (call_script, "script_change_center_prosperity", ":center_no", 1),
      (try_end),      
  ]),
  
  #script_party_calculate_regular_strength:
  # INPUT:
  # param1: Party-id
  ("party_calculate_regular_strength",
    [
      (store_script_param_1, ":party"), #Party_id
      
      (assign, reg(0),0),
      (party_get_num_companion_stacks, ":num_stacks",":party"),
      (try_for_range, ":i_stack", 0, ":num_stacks"),
        (party_stack_get_troop_id, ":stack_troop", ":party", ":i_stack"),
        (neg|troop_is_hero, ":stack_troop"),
        (store_character_level, ":stack_strength", ":stack_troop"),
        (val_add, ":stack_strength", 12),
        (val_mul, ":stack_strength", ":stack_strength"),
        (val_div, ":stack_strength", 100),
        (party_stack_get_size, ":stack_size",":party",":i_stack"),
        (party_stack_get_num_wounded, ":num_wounded",":party",":i_stack"),
        (val_sub, ":stack_size", ":num_wounded"),
        (val_mul, ":stack_strength", ":stack_size"),
        (val_add,reg(0), ":stack_strength"),
      (try_end),
  ]),
  
  
  
  
  #script_party_calculate_strength:
  # INPUT: arg1 = party_id, arg2 = exclude leader
  # OUTPUT: reg0 = strength
  
  ("party_calculate_strength",
    [
      (store_script_param_1, ":party"), #Party_id
      (store_script_param_2, ":exclude_leader"), #Party_id
      
      (assign, reg0,0),
      (party_get_num_companion_stacks, ":num_stacks", ":party"),
      (assign, ":first_stack", 0),
      (try_begin),
        (neq, ":exclude_leader", 0),
        (assign, ":first_stack", 1),
      (try_end),
      (try_for_range, ":i_stack", ":first_stack", ":num_stacks"),
        (party_stack_get_troop_id, ":stack_troop",":party", ":i_stack"),
        (store_character_level, ":stack_strength", ":stack_troop"),
        (val_add, ":stack_strength", 12),
        (val_mul, ":stack_strength", ":stack_strength"),
        (val_div, ":stack_strength", 100),
        (try_begin),
          (neg|troop_is_hero, ":stack_troop"),
          (party_stack_get_size, ":stack_size",":party",":i_stack"),
          (party_stack_get_num_wounded, ":num_wounded",":party",":i_stack"),
          (val_sub, ":stack_size", ":num_wounded"),
          (val_mul, ":stack_strength", ":stack_size"),
        (else_try),
          (troop_is_wounded, ":stack_troop"), #hero...
          (assign,":stack_strength",0),
        (try_end),
        (val_add, reg0, ":stack_strength"),
      (try_end),
      (party_set_slot, ":party", slot_party_cached_strength, reg0),
  ]),


  #script_loot_player_items:
  # INPUT: arg1 = enemy_party_no
  # Output: none
  ("loot_player_items",
    [
      (store_script_param, ":enemy_party_no", 1),
      
      (troop_get_inventory_capacity, ":inv_cap", "trp_player"),
      (try_for_range, ":i_slot", 0, ":inv_cap"),
        (troop_get_inventory_slot, ":item_id", "trp_player", ":i_slot"),
        (ge, ":item_id", 0),
        (troop_get_inventory_slot_modifier, ":item_modifier", "trp_player", ":i_slot"),
        (try_begin),
          (is_between, ":item_id", trade_goods_begin, trade_goods_end),
          (assign, ":randomness", 20),
        (else_try),
          (is_between, ":item_id", horses_begin, horses_end),
          (assign, ":randomness", 15),
        (else_try),
          (this_or_next|is_between, ":item_id", weapons_begin, weapons_end),
          (is_between, ":item_id", ranged_weapons_begin, ranged_weapons_end),
          (assign, ":randomness", 5),
        (else_try),
          (this_or_next|is_between, ":item_id", armors_begin, armors_end),
          (is_between, ":item_id", shields_begin, shields_end),
          (assign, ":randomness", 5),
        (try_end),
        (store_random_in_range, ":random_no", 0, 100),
        (lt, ":random_no", ":randomness"),
        (troop_remove_item, "trp_player", ":item_id"),

        (try_begin),
          (gt, ":enemy_party_no", 0),
          (party_get_slot, ":cur_loot_slot", ":enemy_party_no", slot_party_next_looted_item_slot),
          (val_add, ":cur_loot_slot", slot_party_looted_item_1),
          (party_set_slot, ":enemy_party_no", ":cur_loot_slot", ":item_id"),
          (val_sub, ":cur_loot_slot", slot_party_looted_item_1),
          (val_add, ":cur_loot_slot", slot_party_looted_item_1_modifier),
          (party_set_slot, ":enemy_party_no", ":cur_loot_slot", ":item_modifier"),
          (val_sub, ":cur_loot_slot", slot_party_looted_item_1_modifier),
          (val_add, ":cur_loot_slot", 1),
          (val_mod, ":cur_loot_slot", num_party_loot_slots),
          (party_set_slot, ":enemy_party_no", slot_party_next_looted_item_slot, ":cur_loot_slot"),
        (try_end),
      (try_end),
      (store_troop_gold, ":cur_gold", "trp_player"),
      (store_div, ":max_lost", ":cur_gold", 4),
      (store_div, ":min_lost", ":cur_gold", 10),
      (store_random_in_range, ":lost_gold", ":min_lost", ":max_lost"),	  
      (troop_remove_gold, "trp_player", ":lost_gold"),
      ]),

  
  #script_party_calculate_loot:
  # INPUT:
  # param1: Party-id
  # Returns num looted items in reg(0)
  
  ("party_calculate_loot",
    [
      (store_script_param_1, ":enemy_party"), #Enemy Party_id
            
      (call_script, "script_calculate_main_party_shares"),
      (assign, ":num_player_party_shares", reg0),
      #(assign, ":num_ally_shares", reg1),
      #(store_add, ":num_shares",  ":num_player_party_shares", ":num_ally_shares"),
      
      #Calculate player loot probability
      #(assign, ":loot_probability", 100),
      #(val_mul, ":loot_probability", 10),
      #(val_div, ":loot_probability", ":num_shares"),
      
      (try_for_range, ":i_loot", 0, num_party_loot_slots),
        (store_add, ":cur_loot_slot", ":i_loot", slot_party_looted_item_1),
        (party_get_slot, ":item_no", "$g_enemy_party", ":cur_loot_slot"),
        (gt, ":item_no", 0),
        (party_set_slot, "$g_enemy_party", ":cur_loot_slot", 0),
        (val_sub, ":cur_loot_slot", slot_party_looted_item_1),
        (val_add, ":cur_loot_slot", slot_party_looted_item_1_modifier),
        (party_get_slot, ":item_modifier", "$g_enemy_party", ":cur_loot_slot"),
        (troop_add_item, "trp_temp_troop", ":item_no", ":item_modifier"),
      (try_end),
      (party_set_slot, "$g_enemy_party", slot_party_next_looted_item_slot, 0),
      
      (assign, ":num_looted_items",0),
      (try_begin),
        (this_or_next|party_slot_eq, "$g_enemy_party", slot_party_type, spt_kingdom_caravan),
        (party_slot_eq, "$g_enemy_party", slot_party_type, spt_village_farmer),
        (store_mul, ":plunder_amount", player_loot_share, 30),
        (val_mul, ":plunder_amount", "$g_strength_contribution_of_player"),
        (val_div, ":plunder_amount", 100),
        (val_div, ":plunder_amount", ":num_player_party_shares"),
        (try_begin),
          (party_slot_eq, "$g_enemy_party", slot_party_type, spt_kingdom_caravan),
          (reset_item_probabilities, 100),
          (assign, ":range_min", trade_goods_begin),
          (assign, ":range_max", trade_goods_end),
        (else_try),
          (val_div, ":plunder_amount", 5),
          (reset_item_probabilities, 1),
          (assign, ":range_min", food_begin),
          (assign, ":range_max", food_end),
        (try_end),
        (store_sub, ":item_to_price_slot", slot_town_trade_good_prices_begin, trade_goods_begin),
        (try_for_range, ":cur_goods", ":range_min", ":range_max"),
          (store_add, ":cur_price_slot", ":cur_goods", ":item_to_price_slot"),
          (party_get_slot, ":cur_price", "$g_enemy_party", ":cur_price_slot"),
          (assign, ":cur_probability", 100),
          (val_mul, ":cur_probability", average_price_factor),
          (val_div, ":cur_probability", ":cur_price"),
          (val_mul, ":cur_probability", average_price_factor),
          (val_div, ":cur_probability", ":cur_price"),
          (val_mul, ":cur_probability", average_price_factor),
          (val_div, ":cur_probability", ":cur_price"),
          (assign, reg0, ":cur_probability"),
          (set_item_probability_in_merchandise, ":cur_goods", ":cur_probability"),
        (try_end),
        (troop_add_merchandise, "trp_temp_troop", itp_type_goods, ":plunder_amount"),
        (val_add, ":num_looted_items", ":plunder_amount"),
      (try_end),
      
      #Now loot the defeated party
      (store_mul, ":loot_probability", player_loot_share, 3),
      (val_mul, ":loot_probability", "$g_strength_contribution_of_player"),
      (party_get_skill_level, ":player_party_looting", "p_main_party", "skl_looting"),
      (val_add, ":player_party_looting", 10),
      (val_mul, ":loot_probability", ":player_party_looting"),
      (val_div, ":loot_probability", 10),
      (val_div, ":loot_probability", ":num_player_party_shares"),

      (party_get_num_companion_stacks, ":num_stacks",":enemy_party"),
      (try_for_range, ":i_stack", 0, ":num_stacks"),
        (party_stack_get_troop_id, ":stack_troop",":enemy_party",":i_stack"),
        (neg|troop_is_hero, ":stack_troop"),
        (party_stack_get_size, ":stack_size",":enemy_party",":i_stack"),
        (try_for_range, ":unused", 0, ":stack_size"),
          (troop_loot_troop, "trp_temp_troop", ":stack_troop", ":loot_probability"),
        (try_end),
      (try_end),

      #(troop_get_inventory_capacity, ":inv_cap", "trp_temp_troop"),
      #(try_for_range, ":i_slot", 0, ":inv_cap"),
      #  (troop_get_inventory_slot, ":item_id", "trp_temp_troop", ":i_slot"),
      #  (is_between, ":item_id", horses_begin, horses_end),
      #  (troop_set_inventory_slot, "trp_temp_troop", ":i_slot", -1),
      #(try_end),

      (troop_get_inventory_capacity, ":inv_cap", "trp_temp_troop"),
      (try_for_range, ":i_slot", 0, ":inv_cap"),
        (troop_get_inventory_slot, ":item_id", "trp_temp_troop", ":i_slot"),
        (ge, ":item_id", 0),
        (val_add, ":num_looted_items", 1),
      (try_end),
	  
	  (call_script, "script_remove_all_items", "trp_temp_troop", "itm_speshitsa"), 
	  (call_script, "script_remove_all_items", "trp_temp_troop", "itm_nichego"), 
	  (call_script, "script_remove_all_items", "trp_temp_troop", "itm_parik"), 

      (assign, reg0, ":num_looted_items"),
  ]),
  
  #script_calculate_main_party_shares:
  # INPUT:
  # Returns number of player party shares in reg0
  
  ("calculate_main_party_shares",
    [
      (assign, ":num_player_party_shares", player_loot_share),
      # Add shares for player's party
      (party_get_num_companion_stacks, ":num_stacks", "p_main_party"),
      (try_for_range, ":i_stack", 1, ":num_stacks"),
        (party_stack_get_troop_id, ":stack_troop", "p_main_party", ":i_stack"),
        (try_begin),
          (neg|troop_is_hero, ":stack_troop"),
          (party_stack_get_size, ":stack_size","p_main_party",":i_stack"),
          (val_add, ":num_player_party_shares", ":stack_size"),
        (else_try),
          (val_add, ":num_player_party_shares", hero_loot_share),
        (try_end),
      (try_end),
      
      (assign, reg0, ":num_player_party_shares"),
  ]),
  
  #script_party_give_xp_and_gold:
  # INPUT:
  # param1: destroyed Party-id
  # calculates and gives player paty's share of gold and xp.
  
  ("party_give_xp_and_gold",
    [
      (store_script_param_1, ":enemy_party"), #Party_id
      
      (call_script, "script_calculate_main_party_shares"),
      (assign, ":num_player_party_shares", reg0),
      
      #      (assign, ":num_ally_shares", reg1),
      #     (store_add, ":num_total_shares",  ":num_player_party_shares", ":num_ally_shares"),
      
      (assign, ":total_gain", 0),
      (party_get_num_companion_stacks, ":num_stacks",":enemy_party"),
      (try_for_range, ":i_stack", 0, ":num_stacks"),
        (party_stack_get_troop_id,     ":stack_troop",":enemy_party",":i_stack"),
        (neg|troop_is_hero, ":stack_troop"),
        (party_stack_get_size, ":stack_size",":enemy_party",":i_stack"),
        (store_character_level, ":level", ":stack_troop"),
        (store_add, ":gain", ":level", 10),
        (val_mul, ":gain", ":gain"),
        (val_div, ":gain", 10),
        (store_mul, ":stack_gain", ":gain", ":stack_size"),
        (val_add, ":total_gain", ":stack_gain"),
      (try_end),

      (val_mul, ":total_gain", "$g_strength_contribution_of_player"),
      (val_div, ":total_gain", 100),

      (val_min, ":total_gain", 40000), #eliminate negative results
            
      
      #(store_mul, ":player_party_xp_gain", ":total_gain", ":num_player_party_shares"),
      #(val_div, ":player_party_xp_gain", ":num_total_shares"),
      
      (assign, ":player_party_xp_gain", ":total_gain"),
      
      (store_random_in_range, ":r", 50, 100),
      (val_mul, ":player_party_xp_gain", ":r"),
      (val_div, ":player_party_xp_gain", 100),
      
      (party_add_xp, "p_main_party", ":player_party_xp_gain"),
      
      (store_mul, ":player_gold_gain", ":total_gain", player_loot_share),
      (val_min, ":player_gold_gain", 60000), #eliminate negative results
      (store_random_in_range, ":r", 50, 100),
      (val_mul, ":player_gold_gain", ":r"),
      (val_div, ":player_gold_gain", 100),
      (val_div, ":player_gold_gain", ":num_player_party_shares"),
      
      #add gold now
      (party_get_num_companion_stacks, ":num_stacks","p_main_party"),
      (try_for_range, ":i_stack", 0, ":num_stacks"),
        (party_stack_get_troop_id, ":stack_troop","p_main_party",":i_stack"),
        (try_begin),
          (troop_is_hero, ":stack_troop"),
          (call_script, "script_troop_add_gold", ":stack_troop", ":player_gold_gain"),
        (try_end),
      (try_end),

      #Add morale  
      (assign, ":morale_gain", ":total_gain"),
      (val_div, ":morale_gain", ":num_player_party_shares"),
      (call_script, "script_change_player_party_morale", ":morale_gain"),
  ]),
  
  
  #script_setup_troop_meeting:
  # INPUT:
  # param1: troop_id with which meeting will be made.
  # param2: troop_dna (optional)
  
  ("setup_troop_meeting",
    [
      (store_script_param_1, ":meeting_troop"),
      (store_script_param_2, ":troop_dna"),
      (call_script, "script_get_meeting_scene"), (assign, ":meeting_scene", reg0),
      (modify_visitors_at_site,":meeting_scene"),(reset_visitors),
      (set_visitor,0,"trp_player"),
	  (try_begin),
		(gt, ":troop_dna", -1),
        (set_visitor,17,":meeting_troop",":troop_dna"),
	  (else_try),
        (set_visitor,17,":meeting_troop"),
	  (try_end),	
      (set_jump_mission,"mt_conversation_encounter"),
      (jump_to_scene,":meeting_scene"),
      (change_screen_map_conversation, ":meeting_troop"),
  ]),
  
  #script_setup_party_meeting:
  # INPUT:
  # param1: Party-id with which meeting will be made.
  
  ("setup_party_meeting",
    [
      (store_script_param_1, ":meeting_party"),
      (try_begin),
        (lt, "$g_encountered_party_relation", 0), #hostile
#        (call_script, "script_music_set_situation_with_culture", mtf_sit_encounter_hostile),
      (try_end),
      (call_script, "script_get_meeting_scene"), (assign, ":meeting_scene", reg0),
      (modify_visitors_at_site,":meeting_scene"),(reset_visitors),
      (set_visitor,0,"trp_player"),
      (party_stack_get_troop_id, ":meeting_troop",":meeting_party",0),
      (party_stack_get_troop_dna,":troop_dna",":meeting_party",0),
      (set_visitor,17,":meeting_troop",":troop_dna"),
      (set_jump_mission,"mt_conversation_encounter"),
      (jump_to_scene,":meeting_scene"),
      (change_screen_map_conversation, ":meeting_troop"),
  ]),
  
  #script_get_meeting_scene:
  # INPUT: none
  # OUTPUT: reg0 contain suitable scene_no
  
  ("get_meeting_scene",
    [
      (party_get_current_terrain, ":terrain_type", "p_main_party"),
      (assign, ":scene_to_use", "scn_random_scene"),
      (try_begin),
        (eq, ":terrain_type", rt_steppe),
        (assign, ":scene_to_use", "scn_meeting_scene_steppe"),
      (else_try),
        (eq, ":terrain_type", rt_plain),
        (assign, ":scene_to_use", "scn_meeting_scene_plain"),
      (else_try),
        (eq, ":terrain_type", rt_snow),
        (assign, ":scene_to_use", "scn_meeting_scene_snow"),
      (else_try),
        (eq, ":terrain_type", rt_desert),
        (assign, ":scene_to_use", "scn_meeting_scene_desert"),
      (else_try),
        (eq, ":terrain_type", rt_steppe_forest),
        (assign, ":scene_to_use", "scn_meeting_scene_steppe"),
      (else_try),
        (eq, ":terrain_type", rt_forest),
        (assign, ":scene_to_use", "scn_meeting_scene_plain"),
      (else_try),
        (eq, ":terrain_type", rt_snow_forest),
        (assign, ":scene_to_use", "scn_meeting_scene_snow"),
      (else_try),
        (eq, ":terrain_type", rt_desert_forest),
        (assign, ":scene_to_use", "scn_meeting_scene_desert"),
      (else_try),
        (assign, ":scene_to_use", "scn_meeting_scene_plain"),
      (try_end),
      (assign, reg0, ":scene_to_use"),
  ]),

  
  #script_party_remove_all_companions:
  # INPUT:
  # param1: Party-id from which  companions will be removed.
  # "$g_move_heroes" : controls if heroes will also be removed.
  
  ("party_remove_all_companions",
    [
      (store_script_param_1, ":party"), #Source Party_id
      (party_get_num_companion_stacks, ":num_companion_stacks",":party"),
      (try_for_range_backwards, ":stack_no", 0, ":num_companion_stacks"),
        (party_stack_get_troop_id, ":stack_troop",":party",":stack_no"),
          (this_or_next|neg|troop_is_hero, ":stack_troop"),
          (eq, "$g_move_heroes", 1),
        (party_stack_get_size,  ":stack_size",":party",":stack_no"),
          (party_remove_members, ":party", ":stack_troop", ":stack_size"),
        (try_end),
  ]),
  
  #script_party_remove_all_prisoners:
  # INPUT:
  # param1: Party-id from which  prisoners will be removed.
  # "$g_move_heroes" : controls if heroes will also be removed.
  
  ("party_remove_all_prisoners",
    [
      (store_script_param_1, ":party"), #Source Party_id
      (party_get_num_prisoner_stacks, ":num_prisoner_stacks",":party"),
      (try_for_range_backwards, ":stack_no", 0, ":num_prisoner_stacks"),
        (party_prisoner_stack_get_troop_id, ":stack_troop",":party",":stack_no"),
        (this_or_next|neg|troop_is_hero, ":stack_troop"),
        (eq, "$g_move_heroes", 1),
        (party_prisoner_stack_get_size, ":stack_size",":party",":stack_no"),
        (party_remove_prisoners, ":party", ":stack_troop", ":stack_size"),
      (try_end),
  ]),
  
  #script_party_add_party_companions:
  # INPUT:
  # param1: Party-id to add the second part
  # param2: Party-id which will be added to the first one.
  # "$g_move_heroes" : controls if heroes will also be added.
  
  ("party_add_party_companions",
    [
      (store_script_param_1, ":target_party"), #Target Party_id
      (store_script_param_2, ":source_party"), #Source Party_id
      (party_get_num_companion_stacks, ":num_stacks",":source_party"),
      (try_for_range, ":stack_no", 0, ":num_stacks"),
        (party_stack_get_troop_id, ":stack_troop",":source_party",":stack_no"),
        (this_or_next|neg|troop_is_hero, ":stack_troop"),
        (eq, "$g_move_heroes", 1),
        (party_stack_get_size, ":stack_size",":source_party",":stack_no"),
        (party_add_members, ":target_party", ":stack_troop", ":stack_size"),
        (party_stack_get_num_wounded, ":num_wounded", ":source_party", ":stack_no"),
        (party_wound_members, ":target_party", ":stack_troop", ":num_wounded"),
      (try_end),
  ]),
  
  #script_party_add_party_prisoners:
  # INPUT:
  # param1: Party-id to add the second party
  # param2: Party-id which will be added to the first one.
  # "$g_move_heroes" : controls if heroes will also be added.
  
  ("party_add_party_prisoners",
    [
      (store_script_param_1, ":target_party"), #Target Party_id
      (store_script_param_2, ":source_party"), #Source Party_id
      (party_get_num_prisoner_stacks, ":num_stacks",":source_party"),
      (try_for_range, ":stack_no", 0, ":num_stacks"),
        (party_prisoner_stack_get_troop_id, ":stack_troop",":source_party",":stack_no"),
        (this_or_next|neg|troop_is_hero, ":stack_troop"),
        (eq, "$g_move_heroes", 1),
        (party_prisoner_stack_get_size, ":stack_size",":source_party",":stack_no"),
        (party_add_members, ":target_party", ":stack_troop", ":stack_size"),
      (try_end),
  ]),
  
  #script_party_prisoners_add_party_companions:
  # INPUT:
  # param1: Party-id to add the second part
  # param2: Party-id which will be added to the first one.
  # "$g_move_heroes" : controls if heroes will also be added.
  
  ("party_prisoners_add_party_companions",
    [
      (store_script_param_1, ":target_party"), #Target Party_id
      (store_script_param_2, ":source_party"), #Source Party_id
      (party_get_num_companion_stacks, ":num_stacks",":source_party"),
      (try_for_range, ":stack_no", 0, ":num_stacks"),
        (party_stack_get_troop_id, ":stack_troop",":source_party",":stack_no"),
        (this_or_next|neg|troop_is_hero, ":stack_troop"),
        (eq, "$g_move_heroes", 1),
        (party_stack_get_size, ":stack_size",":source_party",":stack_no"),
        (party_add_prisoners, ":target_party", ":stack_troop", ":stack_size"),
      (try_end),
  ]),
  
  #script_party_prisoners_add_party_prisoners:
  # INPUT:
  # param1: Party-id to add the second part
  # param2: Party-id which will be added to the first one.
  # "$g_move_heroes" : controls if heroes will also be added.
  
  ("party_prisoners_add_party_prisoners",
    [
      (store_script_param_1, ":target_party"), #Target Party_id
      (store_script_param_2, ":source_party"), #Source Party_id
      (party_get_num_prisoner_stacks, ":num_stacks",":source_party"),
      (try_for_range, ":stack_no", 0, ":num_stacks"),
        (party_prisoner_stack_get_troop_id, ":stack_troop",":source_party",":stack_no"),
        (this_or_next|neg|troop_is_hero, ":stack_troop"),
        (eq, "$g_move_heroes", 1),
        (party_prisoner_stack_get_size, ":stack_size",":source_party",":stack_no"),
        (party_add_prisoners, ":target_party", ":stack_troop", ":stack_size"),
      (try_end),
  ]),
  
  # script_party_add_party:
  # INPUT:
  # param1: Party-id to add the second part
  # param2: Party-id which will be added to the first one.
  # "$g_move_heroes" : controls if heroes will also be added.
  
  ("party_add_party",
    [
      (store_script_param_1, ":target_party"), #Target Party_id
      (store_script_param_2, ":source_party"), #Source Party_id
      (call_script, "script_party_add_party_companions",          ":target_party", ":source_party"),
      (call_script, "script_party_prisoners_add_party_prisoners", ":target_party", ":source_party"),
  ]),
  
  
  #script_party_copy:
  # INPUT:
  # param1: Party-id to copy the second party
  # param2: Party-id which will be copied to the first one.
  
  ("party_copy",
    [
      (assign, "$g_move_heroes", 1),
      (store_script_param_1, ":target_party"), #Target Party_id
      (store_script_param_2, ":source_party"), #Source Party_id
      (party_clear, ":target_party"),
      (call_script, "script_party_add_party", ":target_party", ":source_party"),
  ]),
  
  
  #script_clear_party_group:
  # INPUT:
  # param1: Party-id of the root of the group.
  # This script will clear the root party and all parties attached to it recursively.
  
  ("clear_party_group",
    [
      (store_script_param_1, ":root_party"),
      (party_clear, ":root_party"),
      (party_get_num_attached_parties, ":num_attached_parties", ":root_party"),
      (try_for_range, ":attached_party_rank", 0, ":num_attached_parties"),
        (party_get_attached_party_with_rank, ":attached_party", ":root_party", ":attached_party_rank"),
        (call_script, "script_clear_party_group", ":attached_party"),
      (try_end),
  ]),
  

  #script_party_add_wounded_members_as_prisoners:
  # INPUT:
  # param1: Party-id to add the second party
  # param2: Party-id which will be added to the first one.
  # "$g_move_heroes" : controls if heroes will also be added.
  
  ("party_add_wounded_members_as_prisoners",
    [
      (store_script_param_1, ":target_party"), #Target Party_id
      (store_script_param_2, ":source_party"), #Source Party_id
      (party_get_num_companion_stacks, ":num_stacks", ":source_party"),
      (try_for_range, ":stack_no", 0, ":num_stacks"),
        (party_stack_get_num_wounded, ":num_wounded", ":source_party", ":stack_no"),
        (ge, ":num_wounded", 1),
        (party_stack_get_troop_id, ":stack_troop", ":source_party", ":stack_no"),
        (this_or_next|neg|troop_is_hero, ":stack_troop"),
        (eq, "$g_move_heroes", 1),
        #(party_prisoner_stack_get_size, ":stack_size",":source_party",":stack_no"),
        (party_add_prisoners, ":target_party", ":stack_troop", ":num_wounded"),
      (try_end),
  ]),


  #script_get_nonempty_party_in_group:
  # INPUT:
  # param1: Party-id of the root of the group.
  # OUTPUT: reg0: nonempy party-id
  
  ("get_nonempty_party_in_group",
    [
      (store_script_param_1, ":party_no"),
      (party_get_num_companion_stacks, ":num_companion_stacks", ":party_no"),
      (try_begin),
        (gt, ":num_companion_stacks", 0),
        (assign, reg0, ":party_no"),
      (else_try),
        (assign, reg0, -1),
        
        (party_get_num_attached_parties, ":num_attached_parties", ":party_no"),
        (try_for_range, ":attached_party_rank", 0, ":num_attached_parties"),
          (lt, reg0, 0),
          (party_get_attached_party_with_rank, ":attached_party", ":party_no", ":attached_party_rank"),
          (call_script, "script_get_nonempty_party_in_group", ":attached_party"),
        (try_end),
      (try_end),
  ]),
  
  #script_collect_prisoners_from_empty_parties:
  # INPUT:
  # param1: Party-id of the root of the group.
  # param2: Party to collect prisoners in.
  # make sure collection party is cleared before calling this.
  
  ("collect_prisoners_from_empty_parties",
    [
      (store_script_param_1, ":party_no"),
      (store_script_param_2, ":collection_party"),
      
      (party_get_num_companions, ":num_companions", ":party_no"),
      (try_begin),
        (eq, ":num_companions", 0), #party is empty (has no companions). Collect its prisoners.
        (party_get_num_prisoner_stacks, ":num_stacks",":party_no"),
        (try_for_range, ":stack_no", 0, ":num_stacks"),
          (party_prisoner_stack_get_troop_id, ":stack_troop", ":party_no", ":stack_no"),
          (troop_is_hero, ":stack_troop"),
          (party_add_members, ":collection_party", ":stack_troop", 1),
        (try_end),
      (try_end),
      (party_get_num_attached_parties, ":num_attached_parties", ":party_no"),
      (try_for_range, ":attached_party_rank", 0, ":num_attached_parties"),
        (party_get_attached_party_with_rank, ":attached_party", ":party_no", ":attached_party_rank"),
        (call_script, "script_collect_prisoners_from_empty_parties", ":attached_party", ":collection_party"),
      (try_end),
  ]),
      
  #script_change_party_morale:
  # INPUT: party_no, morale_gained
  # OUTPUT: none

  ("change_party_morale",
   [
  ]),

  #script_count_casualties_and_adjust_morale:
  # INPUT: none
  # OUTPUT: none

  ("count_casualties_and_adjust_morale",
   [     
  ]),
  
  #script_print_casualties_to_s0:
  # INPUT:
  # param1: Party_id, param2: 0 = use new line, 1 = use comma  
  #OUTPUT:
  # string register 0.  
  ("print_casualties_to_s0",
    [(store_script_param, ":party_no", 1),
     (store_script_param, ":use_comma", 2),
     (str_clear, s0),
     (assign, ":total_reported", 0),
     (assign, ":total_wounded", 0),
     (assign, ":total_killed", 0),
     (assign, ":total_routed", 0),
     (party_get_num_companion_stacks, ":num_stacks",":party_no"),
     (try_for_range, ":i_stack", 0, ":num_stacks"),
       (party_stack_get_troop_id, ":stack_troop_id", ":party_no", ":i_stack"),
       (party_stack_get_size, ":stack_size", ":party_no", ":i_stack"),
       (party_stack_get_num_wounded, ":num_wounded", ":party_no", ":i_stack"),
       #get number of routed agent numbers
       (try_begin),
         (this_or_next|eq, ":party_no", "p_main_party"),
         (eq, ":party_no", "p_player_casualties"),     
         (troop_get_slot, ":num_routed", ":stack_troop_id", slot_troop_player_routed_agents),
         (troop_set_slot, ":stack_troop_id", slot_troop_player_routed_agents, 0),
       (else_try),
         (party_get_attached_to, ":attached_to", ":party_no"),
         (this_or_next|eq, ":party_no", "p_ally_casualties"),     
         (ge, ":attached_to", 0), 
         (this_or_next|eq, ":party_no", "p_ally_casualties"),     
         (eq, ":attached_to", "p_main_party"),
         (troop_get_slot, ":num_routed", ":stack_troop_id", slot_troop_ally_routed_agents),
         (troop_set_slot, ":stack_troop_id", slot_troop_ally_routed_agents, 0),
       (else_try),
         (troop_get_slot, ":num_routed", ":stack_troop_id", slot_troop_enemy_routed_agents),
         (troop_set_slot, ":stack_troop_id", slot_troop_enemy_routed_agents, 0),
       (try_end),                
       (store_sub, ":num_killed", ":stack_size", ":num_wounded"),
       (val_sub, ":num_killed", ":num_routed"),
       (val_add, ":total_killed", ":num_killed"),
       (val_add, ":total_wounded", ":num_wounded"),
       (val_add, ":total_routed", ":num_routed"),     
       (try_begin),
         (this_or_next|gt, ":num_killed", 0),
         (this_or_next|gt, ":num_wounded", 0),
         (gt, ":num_routed", 0),     
         (store_add, reg3, ":num_killed", ":num_wounded"),
         (store_add, reg3, reg3, ":num_routed"),
         (str_store_troop_name_by_count, s1, ":stack_troop_id", reg3),
         (try_begin),
           (troop_is_hero, ":stack_troop_id"),
           (assign, reg3, 0),
         (try_end),
         (try_begin), #there are people who killed, wounded and routed.
           (gt, ":num_killed", 0),
           (gt, ":num_wounded", 0),
           (gt, ":num_routed", 0),
           (assign, reg4, ":num_killed"),
           (assign, reg5, ":num_wounded"),
           (assign, reg6, ":num_routed"),
           (str_store_string, s2, "str_reg4_killed_reg5_wounded_reg6_routed"),
         (else_try), #there are people who killed and routed.
           (gt, ":num_killed", 0),
           (gt, ":num_routed", 0),
           (assign, reg4, ":num_killed"),
           (assign, reg5, ":num_routed"),
           (str_store_string, s2, "str_reg4_killed_reg5_routed"),     
         (else_try), #there are people who killed and wounded.
           (gt, ":num_killed", 0),
           (gt, ":num_wounded", 0),
           (assign, reg4, ":num_killed"),
           (assign, reg5, ":num_wounded"),
           (str_store_string, s2, "str_reg4_killed_reg5_wounded"),     
         (else_try), #there are people who wounded and routed.
           (gt, ":num_wounded", 0),
           (gt, ":num_routed", 0),
           (assign, reg4, ":num_wounded"),
           (assign, reg5, ":num_routed"),
           (str_store_string, s2, "str_reg4_wounded_reg5_routed"),
         (else_try), #there are people who only killed.
           (gt, ":num_killed", 0),
           (assign, reg1, ":num_killed"),
           (str_store_string, s3, "@killed"),
           (str_store_string, s2, "str_reg1_blank_s3"),
         (else_try), #there are people who only wounded.
           (gt, ":num_wounded", 0),
           (assign, reg1, ":num_wounded"),
           (str_store_string, s3, "@wounded"),
           (str_store_string, s2, "str_reg1_blank_s3"),
         (else_try), #there are people who only routed.
           (assign, reg1, ":num_routed"),
           (str_store_string, s3, "str_routed"),
           (str_store_string, s2, "str_reg1_blank_s3"),
         (try_end),
         (try_begin),
           (eq, ":use_comma", 1),
           (try_begin),
             (eq, ":total_reported", 0),
             (str_store_string, s0, "@{!}{reg3?{reg3}:} {s1} ({s2})"),
           (else_try),
             (str_store_string, s0, "@{!}{s0}, {reg3?{reg3}:} {s1} ({s2})"),
           (try_end),
         (else_try),
           (str_store_string, s0, "@{!}{s0}^{reg3?{reg3}:} {s1} ({s2})"),
         (try_end),
         (val_add, ":total_reported", 1),
       (try_end),
     (try_end),
     (try_begin),
       (this_or_next|gt, ":total_killed", 0),
       (this_or_next|gt, ":total_wounded", 0),
       (gt, ":total_routed", 0),
       (store_add, ":total_agents", ":total_killed", ":total_wounded"),
       (val_add, ":total_agents", ":total_routed"),
       (assign, reg3, ":total_agents"),
       (try_begin),
         (gt, ":total_killed", 0),
         (gt, ":total_wounded", 0),
         (gt, ":total_routed", 0),
         (assign, reg4, ":total_killed"),
         (assign, reg5, ":total_wounded"),
         (assign, reg6, ":total_routed"),
         (str_store_string, s2, "str_reg4_killed_reg5_wounded_reg6_routed"),
       (else_try),
         (gt, ":total_killed", 0),
         (gt, ":total_routed", 0),
         (assign, reg4, ":total_killed"),
         (assign, reg5, ":total_routed"),
         (str_store_string, s2, "str_reg4_killed_reg5_routed"),
       (else_try),
         (gt, ":total_killed", 0),
         (gt, ":total_wounded", 0),
         (assign, reg4, ":total_killed"),
         (assign, reg5, ":total_wounded"),
         (str_store_string, s2, "str_reg4_killed_reg5_wounded"),
       (else_try),
         (gt, ":total_wounded", 0),
         (gt, ":total_routed", 0),
         (assign, reg4, ":total_wounded"),
         (assign, reg5, ":total_routed"),
         (str_store_string, s2, "str_reg4_wounded_reg5_routed"),
       (else_try),
         (gt, ":total_killed", 0),
         (str_store_string, s2, "@killed"),
       (else_try),
         (gt, ":total_wounded", 0),
         (str_store_string, s2, "@wounded"),
       (else_try),
         (str_store_string, s2, "str_routed"),
       (else_try),
       (try_end),
       (str_store_string, s0, "@{s0}^TOTAL: {reg3} ({s2})"),
     (else_try),
       (try_begin),
         (eq, ":use_comma", 1),
         (str_store_string, s0, "@None"),
       (else_try),
         (str_store_string, s0, "@^None"),
       (try_end),
     (try_end),
  ]),

  #script_write_fit_party_members_to_stack_selection
  # INPUT:
  # param1: party_no, exclude_leader
  #OUTPUT:
  # trp_stack_selection_amounts slots (slot 0 = number of stacks, 1 = number of men fit, 2..n = stack sizes (fit))
  # trp_stack_selection_ids slots (2..n = stack troops)
  ("write_fit_party_members_to_stack_selection",
   [
     (store_script_param, ":party_no", 1),
     (store_script_param, ":exclude_leader", 2),
     (party_get_num_companion_stacks, ":num_stacks", ":party_no"),
     (assign, ":slot_index", 2),
     (assign, ":total_fit", 0),
     (try_for_range, ":stack_index", 0, ":num_stacks"),
       (party_stack_get_troop_id, ":stack_troop", ":party_no", ":stack_index"),
       (assign, ":num_fit", 0),
       (try_begin),
         (troop_is_hero, ":stack_troop"),
         (try_begin),
           (neg|troop_is_wounded, ":stack_troop"),
           (this_or_next|eq, ":exclude_leader", 0),
           (neq, ":stack_index", 0),
           (assign, ":num_fit",1),
         (try_end),
       (else_try),
         (party_stack_get_size, ":num_fit", ":party_no", ":stack_index"),
         (party_stack_get_num_wounded, ":num_wounded", ":party_no", ":stack_index"),
         (val_sub, ":num_fit", ":num_wounded"),
       (try_end),
       (try_begin),
         (gt, ":num_fit", 0),
         (troop_set_slot, "trp_stack_selection_amounts", ":slot_index", ":num_fit"),
         (troop_set_slot, "trp_stack_selection_ids", ":slot_index", ":stack_troop"),
         (val_add, ":slot_index", 1),
       (try_end),
       (val_add, ":total_fit", ":num_fit"),
     (try_end),
     (val_sub, ":slot_index", 2),
     (troop_set_slot, "trp_stack_selection_amounts", 0, ":slot_index"),
     (troop_set_slot, "trp_stack_selection_amounts", 1, ":total_fit"),
    ]),

  #script_remove_fit_party_member_from_stack_selection
  # INPUT:
  # param1: slot_index
  #OUTPUT:
  # reg0 = troop_no
  # trp_stack_selection_amounts slots (slot 0 = number of stacks, 1 = number of men fit, 2..n = stack sizes (fit))
  # trp_stack_selection_ids slots (2..n = stack troops)
  ("remove_fit_party_member_from_stack_selection",
   [
     (store_script_param, ":slot_index", 1),
     (val_add, ":slot_index", 2),
     (troop_get_slot, ":amount", "trp_stack_selection_amounts", ":slot_index"),
     (troop_get_slot, ":troop_no", "trp_stack_selection_ids", ":slot_index"),
     (val_sub, ":amount", 1),
     (troop_set_slot, "trp_stack_selection_amounts", ":slot_index", ":amount"),
     (troop_get_slot, ":total_amount", "trp_stack_selection_amounts", 1),
     (val_sub, ":total_amount", 1),
     (troop_set_slot, "trp_stack_selection_amounts", 1, ":total_amount"),
     (try_begin),
       (le, ":amount", 0),
       (troop_get_slot, ":num_slots", "trp_stack_selection_amounts", 0),
       (store_add, ":end_cond", ":num_slots", 2),
       (store_add, ":begin_cond", ":slot_index", 1),
       (try_for_range, ":index", ":begin_cond", ":end_cond"),
         (store_sub, ":prev_index", ":index", 1),
         (troop_get_slot, ":value", "trp_stack_selection_amounts", ":index"),
         (troop_set_slot, "trp_stack_selection_amounts", ":prev_index", ":value"),
         (troop_get_slot, ":value", "trp_stack_selection_ids", ":index"),
         (troop_set_slot, "trp_stack_selection_ids", ":prev_index", ":value"),
       (try_end),
       (val_sub, ":num_slots", 1),
       (troop_set_slot, "trp_stack_selection_amounts", 0, ":num_slots"),
     (try_end),
     (assign, reg0, ":troop_no"),
    ]),

  #script_remove_random_fit_party_member_from_stack_selection
  # INPUT:
  # none
  #OUTPUT:
  # reg0 = troop_no
  # trp_stack_selection_amounts slots (slot 0 = number of stacks, 1 = number of men fit, 2..n = stack sizes (fit))
  # trp_stack_selection_ids slots (2..n = stack troops)
  ("remove_random_fit_party_member_from_stack_selection",
   [
     (troop_get_slot, ":total_amount", "trp_stack_selection_amounts", 1),
     (store_random_in_range, ":random_troop", 0, ":total_amount"),
     (troop_get_slot, ":num_slots", "trp_stack_selection_amounts", 0),
     (store_add, ":end_cond", ":num_slots", 2),
     (try_for_range, ":index", 2, ":end_cond"),
       (troop_get_slot, ":amount", "trp_stack_selection_amounts", ":index"),
       (val_sub, ":random_troop", ":amount"),
       (lt, ":random_troop", 0),
       (assign, ":end_cond", 0),
       (store_sub, ":slot_index", ":index", 2),
     (try_end),
     (call_script, "script_remove_fit_party_member_from_stack_selection", ":slot_index"),
    ]),

  
  #script_add_routed_party
  #INPUT: none
  #OUTPUT: none
  ("add_routed_party",
   [                
     (party_get_num_companion_stacks, ":num_stacks", "p_routed_enemies"), #question, I changed (total_enemy_casualties) with (p_routed_enemies) because this is not prisoner in p_routed_enemies party.        
     (assign, ":num_regulars", 0),
     (assign, ":deleted_stacks", 0),
     (try_for_range, ":stack_no", 0, ":num_stacks"),
       (store_sub, ":difference", ":num_stacks", ":stack_no"),
       (ge, ":difference", ":deleted_stacks"),
       (store_sub, ":stack_no_minus_deleted", ":stack_no", ":deleted_stacks"),
       (party_stack_get_troop_id, ":stack_troop", "p_routed_enemies", ":stack_no_minus_deleted"), 
       (try_begin),
         (troop_is_hero, ":stack_troop"),
         (party_stack_get_size, ":stack_size", "p_routed_enemies", ":stack_no_minus_deleted"),
         (party_remove_members, "p_routed_enemies", ":stack_troop", 1),
         #(troop_set_slot, ":stack_troop", slot_troop_leaded_party, -1),  #I erased this because it causes duplicate lords to occur in map
     
         (try_begin), 
           (le, ":stack_size", 1),
           (val_add, ":deleted_stacks", 1), #if deleted hero is the only one in his troop, now we have one less stacks
         (try_end),
       (else_try),
         (val_add, ":num_regulars", 1),
       (try_end),
     (try_end),

     #add new party to map if there is at least one routed agent. (new party name : routed_party, template : routed_warriors)
     (try_begin),
       (ge, ":num_regulars", 1),
     
       (set_spawn_radius, 2),
       (spawn_around_party, "p_main_party", "pt_routed_warriors"),
       (assign, ":routed_party", reg0),
     
       (party_set_slot, ":routed_party", slot_party_commander_party, -1), #we need this because 0 is player's party!

       (assign, ":max_routed_agents", 0),
       (assign, ":routed_party_faction", "fac_neutral"),
       (try_for_range, ":cur_faction", fac_kingdom_1, fac_kingdoms_end),
         (faction_get_slot, ":num_routed_agents_in_this_faction", ":cur_faction", slot_faction_num_routed_agents),
         (gt, ":num_routed_agents_in_this_faction", ":max_routed_agents"),
         (assign, ":max_routed_agents", ":num_routed_agents_in_this_faction"),
         (assign, ":routed_party_faction", ":cur_faction"),
       (try_end),
       
       (party_set_faction, ":routed_party", ":routed_party_faction"),
	   
       (party_set_ai_behavior, ":routed_party", ai_bhvr_travel_to_party),

       (assign, ":minimum_distance", 1000000),
       (try_for_parties, ":party_no"),
         (party_is_active, ":party_no"),
         (party_get_slot, ":cur_party_type", ":party_no", slot_party_type),
         (this_or_next|eq, ":cur_party_type", spt_town),
         (eq, ":cur_party_type", spt_castle),
         (store_faction_of_party, ":cur_faction", ":party_no"),
         (this_or_next|eq, ":routed_party_faction", "fac_neutral"),
         (eq, ":cur_faction", ":routed_party_faction"),
         (party_get_position, pos1, ":party_no"),
         (store_distance_to_party_from_party, ":dist", ":party_no", "p_main_party"),
         (try_begin),
           (lt, ":dist", ":minimum_distance"),
           (assign, ":minimum_distance", ":dist"),
           (assign, ":nearest_ally_city", ":party_no"),
         (try_end),
       (try_end),     

       (party_get_position, pos1, "p_main_party"), #store position information of main party in pos1
       (party_get_position, pos2, ":nearest_ally_city"), #store position information of target city in pos2

       (assign, ":minimum_distance", 1000000),
       (try_for_range, ":unused", 0, 10),
         (map_get_random_position_around_position, pos3, pos1, 2), #store position of found random position (possible placing position for new routed party) around battle position in pos3
         (get_distance_between_positions, ":dist", pos2, pos3), #store distance between found position and target city in ":dist".
         (try_begin),
           (lt, ":dist", ":minimum_distance"),
           (assign, ":minimum_distance", ":dist"),
           (copy_position, pos63, pos3), 
         (try_end),
       (try_end),
     
       (party_set_position, ":routed_party", pos63),

       (party_set_ai_object, ":routed_party", ":nearest_ally_city"),
       (party_set_flags, ":routed_party", pf_default_behavior, 1),

       #adding party members of p_routed_enemies to routed_party
       (party_clear, ":routed_party"),
       (party_get_num_companion_stacks, ":num_stacks", "p_routed_enemies"), #question, I changed (total_enemy_casualties) with (p_routed_enemies) because this is not prisoner in p_routed_enemies party.
       (try_for_range, ":stack_no", 0, ":num_stacks"),
         (party_stack_get_troop_id, ":stack_troop", "p_routed_enemies", ":stack_no"), 
         (try_begin),
           (neg|troop_is_hero, ":stack_troop"), #do not add routed heroes to (new created) routed party for now.

           (party_stack_get_size, ":stack_size", "p_routed_enemies", ":stack_no"),
           (party_add_members, ":routed_party", ":stack_troop", ":stack_size"),
         (try_end),
       (try_end),
     (try_end),
    ]), #ozan


  #script_cf_training_ground_sub_routine_1_for_melee_details
  # INPUT:
  # value
  #OUTPUT:
  # none
  ("cf_training_ground_sub_routine_1_for_melee_details",
   [
     (store_script_param, ":value", 1),
     (ge, "$temp_3", ":value"),
     (val_add, ":value", 1),
     (troop_get_slot, ":troop_id", "trp_stack_selection_ids", ":value"),
     (str_store_troop_name, s0, ":troop_id"),
     ]),

  #script_training_ground_sub_routine_2_for_melee_details
  # INPUT:
  # value
  #OUTPUT:
  # none
  ("training_ground_sub_routine_2_for_melee_details",
   [
     (store_script_param, ":value", 1),
     (val_sub, ":value", 1),
     (try_begin),
       (lt, ":value", 0),
       (call_script, "script_remove_random_fit_party_member_from_stack_selection"),
     (else_try),
       (call_script, "script_remove_fit_party_member_from_stack_selection", ":value"),
     (try_end),
     (assign, ":troop_id", reg0),
     (store_sub, ":slot_index", "$temp_2", 1),
     (troop_set_slot, "trp_temp_array_a", ":slot_index", ":troop_id"),
     (try_begin),
       (eq, "$temp", "$temp_2"),
       (call_script, "script_start_training_at_training_ground", -1, "$temp"),
     (else_try),
       (val_add, "$temp_2", 1),
       (jump_to_menu, "mnu_training_ground_selection_details_melee_2"),
     (try_end),
     ]),

  #script_cf_training_ground_sub_routine_for_training_result
  # INPUT:
  # arg1: troop_id, arg2: stack_no, arg3: troop_count, arg4: xp_ratio_to_add
  #OUTPUT:
  # none
  ("cf_training_ground_sub_routine_for_training_result",
   [
     (store_script_param, ":troop_id", 1),
     (store_script_param, ":stack_no", 2),
     (store_script_param, ":amount", 3),
     (store_script_param, ":xp_ratio_to_add", 4),

     (store_character_level, ":level", ":troop_id"),
     (store_add, ":level_added", ":level", 5),
     (store_mul, ":min_hardness", ":level_added", 3),
     (val_min, ":min_hardness", 100),
     (store_sub, ":hardness_dif", ":min_hardness", "$g_training_ground_training_hardness"),
     (val_max, ":hardness_dif", 0),
     (store_sub, ":hardness_dif", 100, ":hardness_dif"),
     (val_mul, ":hardness_dif", ":hardness_dif"),
     (val_div, ":hardness_dif", 10), # value over 1000
##     (assign, reg0, ":hardness_dif"),
##     (display_message, "@Hardness difference: {reg0}/1000"),
     (store_mul, ":xp_ratio_to_add_for_stack", ":xp_ratio_to_add", ":hardness_dif"),
     (val_div, ":xp_ratio_to_add_for_stack", 1000),
     (try_begin),
       (eq, ":troop_id", "trp_player"),
       (val_mul, ":xp_ratio_to_add_for_stack", 1),
     (else_try),
       (try_begin),
         (eq, "$g_mt_mode", ctm_melee),
         (try_begin),
           (this_or_next|troop_is_guarantee_ranged, ":troop_id"),
           (troop_is_guarantee_horse, ":troop_id"),
           (val_div, ":xp_ratio_to_add_for_stack", 4),
         (try_end),
       (else_try),
         (eq, "$g_mt_mode", ctm_mounted),
         (try_begin),
           (neg|troop_is_guarantee_horse, ":troop_id"),
           (assign, ":xp_ratio_to_add_for_stack", 0),
         (try_end),
       (else_try),
         (neg|troop_is_guarantee_ranged, ":troop_id"),
         (assign, ":xp_ratio_to_add_for_stack", 0),
       (try_end),
     (try_end),
     (val_add,  ":level", 1),
     (store_mul, ":xp_to_add", 100, ":level"),
     (val_mul, ":xp_to_add", ":amount"),
     (val_div, ":xp_to_add", 20),
     (val_mul, ":xp_to_add", ":xp_ratio_to_add_for_stack"),
     (val_div, ":xp_to_add", 1000),
     (store_mul, ":max_xp_to_add", ":xp_to_add", 3),
     (val_div, ":max_xp_to_add", 2),
     (store_div, ":min_xp_to_add", ":xp_to_add", 2),
     (store_random_in_range, ":random_xp_to_add", ":min_xp_to_add", ":max_xp_to_add"),
     (gt, ":random_xp_to_add", 0),
     (try_begin),
       (troop_is_hero, ":troop_id"),
       (add_xp_to_troop, ":random_xp_to_add", ":troop_id"),
       (store_div, ":proficiency_to_add", ":random_xp_to_add", 50),
       (try_begin),
         (gt, ":proficiency_to_add", 0),
         (troop_raise_proficiency, ":troop_id", "$g_training_ground_used_weapon_proficiency", ":proficiency_to_add"),
       (try_end),
     (else_try),
       (party_add_xp_to_stack, "p_main_party", ":stack_no", ":random_xp_to_add"),
     (try_end),
     (assign, reg0, ":random_xp_to_add"),
     ]),


##  #script_cf_print_troop_name_with_stack_index_to_s0
##  # INPUT:
##  # param1: stack_index
##  
##  #OUTPUT:
##  # string register 0.
##  ("cf_print_troop_name_with_stack_index_to_s0",
##   [
##     (store_script_param_1, ":stack_index"),
##     (party_get_num_companion_stacks, ":num_stacks", "p_main_party"),
##     (lt, ":stack_index", ":num_stacks"),
##     (party_stack_get_troop_id, ":stack_troop", "p_main_party", ":stack_index"),
##     (str_store_troop_name, s0, ":stack_troop"),
##    ]),

  #script_print_troop_owned_centers_in_numbers_to_s0
  # INPUT:
  # param1: troop_no
  #OUTPUT:
  # string register 0.
  ("print_troop_owned_centers_in_numbers_to_s0",
   [
     (store_script_param_1, ":troop_no"),
     (str_store_string, s0, "@nothing"),
     (assign, ":owned_towns", 0),
     (assign, ":owned_castles", 0),
     (assign, ":owned_villages", 0),
     (try_for_range_backwards, ":cur_center", centers_begin, centers_end),
       (party_slot_eq, ":cur_center", slot_town_lord, ":troop_no"),
       (try_begin),
         (party_slot_eq, ":cur_center", slot_party_type, spt_town),
         (val_add, ":owned_towns", 1),
       (else_try),
         (party_slot_eq, ":cur_center", slot_party_type, spt_castle),
         (val_add, ":owned_castles", 1),
       (else_try),
         (val_add, ":owned_villages", 1),
       (try_end),
     (try_end),
     (assign, ":num_types", 0),
     (try_begin),
       (gt, ":owned_villages", 0),
       (assign, reg0, ":owned_villages"),
       (store_sub, reg1, reg0, 1),
       (str_store_string, s0, "@{reg0} village{reg1?s:}"),
       (val_add, ":num_types", 1),
     (try_end),
     (try_begin),
       (gt, ":owned_castles", 0),
       (assign, reg0, ":owned_castles"),
       (store_sub, reg1, reg0, 1),
       (try_begin),
         (eq, ":num_types", 0),
         (str_store_string, s0, "@{reg0} castle{reg1?s:}"),
       (else_try),
         (str_store_string, s0, "@{reg0} castle{reg1?s:} and {s0}"),
       (try_end),
       (val_add, ":num_types", 1),
     (try_end),
     (try_begin),
       (gt, ":owned_towns", 0),
       (assign, reg0, ":owned_towns"),
       (store_sub, reg1, reg0, 1),
       (try_begin),
         (eq, ":num_types", 0),
         (str_store_string, s0, "@{reg0} town{reg1?s:}"),
       (else_try),
         (eq, ":num_types", 1),
         (str_store_string, s0, "@{reg0} town{reg1?s:} and {s0}"),
       (else_try),
         (str_store_string, s0, "@{reg0} town{reg1?s:}, {s0}"),
       (try_end),
     (try_end),
     (store_add, reg0, ":owned_villages", ":owned_castles"),
     (val_add, reg0, ":owned_towns"),
     ]),

  #script_get_random_melee_training_weapon
  # INPUT: none
  # OUTPUT: reg0 = weapon_1, reg1 = weapon_2
  ("get_random_melee_training_weapon",
   [
     (assign, ":weapon_1", -1),
     (assign, ":weapon_2", -1),
     (store_random_in_range, ":random_no", 0, 3),
     (try_begin),
       (eq, ":random_no", 0),
       (assign, ":weapon_1", "itm_practice_staff"),
     (else_try),
       (eq, ":random_no", 1),
       (assign, ":weapon_1", "itm_practice_sword"),
       (assign, ":weapon_2", "itm_practice_shield"),
     (else_try),
       (assign, ":weapon_1", "itm_heavy_practice_sword"),
     (try_end),
     (assign, reg0, ":weapon_1"),
     (assign, reg1, ":weapon_2"),
     ]),

  #script_start_training_at_training_ground
  # INPUT:
  # param1: training_weapon_type, param2: training_param
  ("start_training_at_training_ground",
   [
     (val_add, "$g_training_ground_training_count", 1),
     (store_script_param, ":mission_weapon_type", 1),
     (store_script_param, ":training_param", 2),
     (assign, ":training_default_weapon_1", -1),
     (assign, ":training_default_weapon_2", -1),
     (assign, ":training_default_weapon_3", -1),
     (assign, "$scene_num_total_gourds_destroyed", 0),
     (try_begin),
       (eq, ":mission_weapon_type", itp_type_bow),
       (assign, "$g_training_ground_used_weapon_proficiency", wpt_archery),
       (assign, ":training_default_weapon_1", "itm_practice_bow"),
       (try_begin),
         (eq, "$g_mt_mode", ctm_mounted),
         (assign, ":training_default_weapon_2", "itm_practice_arrows_100_amount"),
       (else_try),
         (assign, ":training_default_weapon_2", "itm_practice_arrows_10_amount"),
       (try_end),
     (else_try),
       (eq, ":mission_weapon_type", itp_type_crossbow),
         (try_begin),
		 (eq, "$g_flag", 1),
			(assign, "$g_training_ground_used_weapon_proficiency", wpt_crossbow),
			(assign, ":training_default_weapon_1", "itm_good_musket"),
			(assign, ":training_default_weapon_2", "itm_practice_bolts_9_amount"),
		 
		 (else_try),
       (assign, "$g_training_ground_used_weapon_proficiency", wpt_crossbow),
       (assign, ":training_default_weapon_1", "itm_practice_crossbow"),
       (assign, ":training_default_weapon_2", "itm_practice_bolts_9_amount"),
		 (try_end),
     (else_try),
       (eq, ":mission_weapon_type", itp_type_thrown),
       (assign, "$g_training_ground_used_weapon_proficiency", wpt_throwing),
       (try_begin),
         (eq, "$g_mt_mode", ctm_mounted),
         (assign, ":training_default_weapon_2", "itm_practice_throwing_daggers_100_amount"),
       (else_try),
         (assign, ":training_default_weapon_2", "itm_practice_throwing_daggers"),
       (try_end),
     (else_try),
       (eq, ":mission_weapon_type", itp_type_one_handed_wpn),
       (assign, "$g_training_ground_used_weapon_proficiency", wpt_one_handed_weapon),
       (assign, ":training_default_weapon_1", "itm_practice_sword"),
     (else_try),
       (eq, ":mission_weapon_type", itp_type_polearm),
       (assign, "$g_training_ground_used_weapon_proficiency", wpt_polearm),
       (assign, ":training_default_weapon_1", "itm_practice_lance"),
     (else_try),
       #weapon_type comes as -1 when melee training is selected
       (assign, "$g_training_ground_used_weapon_proficiency", wpt_one_handed_weapon),
       (call_script, "script_get_random_melee_training_weapon"),
       (assign, ":training_default_weapon_1", reg0),
       (assign, ":training_default_weapon_2", reg1),
     (try_end),
     
##     (assign, "$g_training_ground_training_troop_stack_index", ":stack_index"),
     (try_begin),
       (eq, "$g_mt_mode", ctm_mounted),
       (assign, ":training_default_weapon_3", "itm_practice_horse"),
       (store_add, "$g_training_ground_training_scene", "scn_training_ground_horse_track_1", "$g_encountered_party"),
       (val_sub, "$g_training_ground_training_scene", training_grounds_begin),
     (else_try),
       (store_add, "$g_training_ground_training_scene", "scn_training_ground_ranged_melee_1", "$g_encountered_party"),
       (val_sub, "$g_training_ground_training_scene", training_grounds_begin),
     (try_end),

     (modify_visitors_at_site, "$g_training_ground_training_scene"),
     (reset_visitors),
     (set_visitor, 0, "trp_player"),

     (assign, ":selected_weapon", -1),
     (try_for_range, ":cur_slot", 0, 4),#equipment slots
       (troop_get_inventory_slot, ":cur_item", "trp_player", ":cur_slot"),
       (ge, ":cur_item", 0),
       (item_get_type, ":item_type", ":cur_item"),
       (try_begin),
         (eq, ":item_type", ":mission_weapon_type"),
         (eq, ":selected_weapon", -1),
         (assign, ":selected_weapon", ":cur_item"),
       (try_end),
     (try_end),
     (mission_tpl_entry_clear_override_items, "mt_training_ground_training", 0),
     (mission_tpl_entry_add_override_item, "mt_training_ground_training", 0, "itm_practice_boots"),
     (try_begin),
       (ge, ":training_default_weapon_1", 0),
       (try_begin),
         (ge, ":selected_weapon", 0),
         (mission_tpl_entry_add_override_item, "mt_training_ground_training", 0, ":selected_weapon"),
       (else_try),
         (mission_tpl_entry_add_override_item, "mt_training_ground_training", 0, ":training_default_weapon_1"),
       (try_end),
     (try_end),
     (try_begin),
       (ge, ":training_default_weapon_2", 0),
       (mission_tpl_entry_add_override_item, "mt_training_ground_training", 0, ":training_default_weapon_2"),
     (try_end),
     (try_begin),
       (ge, ":training_default_weapon_3", 0),
       (mission_tpl_entry_add_override_item, "mt_training_ground_training", 0, ":training_default_weapon_3"),
     (try_end),

     (assign, ":cur_visitor_point", 5),
     (troop_get_slot, ":num_fit", "trp_stack_selection_amounts", 1),
     (store_add, ":end_cond", 5, ":num_fit"),
     (val_min, ":end_cond", 13),
     (try_for_range, ":cur_visitor_point", 5, ":end_cond"),
       (call_script, "script_remove_random_fit_party_member_from_stack_selection"),
       (set_visitor, ":cur_visitor_point", reg0),
       (val_add, ":cur_visitor_point", 1),
     (try_end),
     (try_begin),
       (eq, "$g_mt_mode", ctm_melee),
       (assign, ":total_difficulty", 0),
       (try_for_range, ":i", 0, ":training_param"),
         (troop_get_slot, ":cur_troop", "trp_temp_array_a", ":i"),
         (store_add, ":cur_entry_point", ":i", 1),
         (set_visitor, ":cur_entry_point", ":cur_troop"),
         (mission_tpl_entry_clear_override_items, "mt_training_ground_training", ":cur_entry_point"),
         (mission_tpl_entry_add_override_item, "mt_training_ground_training", ":cur_entry_point", "itm_practice_boots"),
         (call_script, "script_get_random_melee_training_weapon"),
         (mission_tpl_entry_add_override_item, "mt_training_ground_training", ":cur_entry_point", reg0),
         (try_begin),
           (ge, reg1, 0),
           (mission_tpl_entry_add_override_item, "mt_training_ground_training", ":cur_entry_point", reg1),
         (try_end),
         (store_character_level, ":cur_troop_level", ":cur_troop"),
         (val_add, ":cur_troop_level", 10),
         (val_mul, ":cur_troop_level", ":cur_troop_level"),
         (val_add, ":total_difficulty", ":cur_troop_level"),
       (try_end),

       (assign, "$g_training_ground_training_num_enemies", ":training_param"),
       (assign, "$g_training_ground_training_hardness",  ":total_difficulty"),
       (store_add, ":number_multiplier", "$g_training_ground_training_num_enemies", 4),
       (val_mul, "$g_training_ground_training_hardness", ":number_multiplier"),
       (val_div, "$g_training_ground_training_hardness", 2400),
       (str_store_string, s0, "@Your opponents are ready for the fight."),
     (else_try),
       (eq, "$g_mt_mode", ctm_mounted),
       (try_begin),
         (eq, ":mission_weapon_type", itp_type_bow),
         (assign, "$g_training_ground_training_hardness", 350),
         (assign, "$g_training_ground_training_num_gourds_to_destroy", 30),
       (else_try),
         (eq, ":mission_weapon_type", itp_type_thrown),
         (assign, "$g_training_ground_training_hardness", 400),
         (assign, "$g_training_ground_training_num_gourds_to_destroy", 30),
       (else_try),
         (eq, ":mission_weapon_type", itp_type_one_handed_wpn),
         (assign, "$g_training_ground_training_hardness", 200),
         (assign, "$g_training_ground_training_num_gourds_to_destroy", 45),
       (else_try),
         (eq, ":mission_weapon_type", itp_type_polearm),
         (assign, "$g_training_ground_training_hardness", 280),
         (assign, "$g_training_ground_training_num_gourds_to_destroy", 35),
       (try_end),
       (str_store_string, s0, "@Try to destroy as many targets as you can. You have two and a half minutes to clear the track."),
     (else_try),
       (eq, "$g_mt_mode", ctm_ranged),
       (store_mul, "$g_training_ground_ranged_distance", ":training_param", 100),
       (assign, ":hardness_modifier", ":training_param"),
       (val_mul, ":hardness_modifier", ":hardness_modifier"),
       (try_begin),
         (eq, ":mission_weapon_type", itp_type_bow),
         (val_mul, ":hardness_modifier", 3),
         (val_div, ":hardness_modifier", 2),
       (else_try),
         (eq, ":mission_weapon_type", itp_type_thrown),
         (val_mul, ":hardness_modifier", 5),
         (val_div, ":hardness_modifier", 2),
         (val_mul, ":hardness_modifier", ":training_param"),
         (val_div, ":hardness_modifier", 2),
       (try_end),
       (store_mul, "$g_training_ground_training_hardness", 100, ":hardness_modifier"),
       (val_div, "$g_training_ground_training_hardness", 6000),
       (str_store_string, s0, "@Stay behind the line on the ground and shoot the targets. Try not to waste any shots."),
     (try_end),
     (jump_to_menu, "mnu_training_ground_description"),
     ]),
  
  
#OiM hack

   ("oim_start_training_at_training_ground",
   [
     (val_add, "$g_training_ground_training_count", 1),
     (store_script_param, ":mission_weapon_type", 1),
     (store_script_param, ":training_param", 2),
     #(assign, ":training_default_weapon_1", -1),
     #(assign, ":training_default_weapon_2", -1),
     #(assign, ":training_default_weapon_3", -1),
     #(assign, "$scene_num_total_gourds_destroyed", 0),
     #(try_begin),
     #  (eq, ":mission_weapon_type", itp_type_bow),
     #  (assign, "$g_training_ground_used_weapon_proficiency", wpt_archery),
     #  (assign, ":training_default_weapon_1", "itm_practice_bow"),
     #  (try_begin),
     #    (eq, "$g_mt_mode", ctm_mounted),
     #    (assign, ":training_default_weapon_2", "itm_practice_arrows_100_amount"),
     #  (else_try),
     #    (assign, ":training_default_weapon_2", "itm_practice_arrows_10_amount"),
     #  (try_end),
     #(else_try),
     #  (eq, ":mission_weapon_type", itp_type_crossbow),
     #  (assign, "$g_training_ground_used_weapon_proficiency", wpt_crossbow),
     #  (assign, ":training_default_weapon_1", "itm_practice_crossbow"),
     #  (assign, ":training_default_weapon_2", "itm_practice_bolts_9_amount"),
     #(else_try),
     #  (eq, ":mission_weapon_type", itp_type_thrown),
     #  (assign, "$g_training_ground_used_weapon_proficiency", wpt_throwing),
     #  (try_begin),
     #    (eq, "$g_mt_mode", ctm_mounted),
     #    (assign, ":training_default_weapon_2", "itm_practice_throwing_daggers_100_amount"),
     #  (else_try),
     #    (assign, ":training_default_weapon_2", "itm_practice_throwing_daggers"),
     #  (try_end),
     #(else_try),
     #  (eq, ":mission_weapon_type", itp_type_one_handed_wpn),
     #  (assign, "$g_training_ground_used_weapon_proficiency", wpt_one_handed_weapon),
     #  (assign, ":training_default_weapon_1", "itm_practice_sword"),
     #(else_try),
     #  (eq, ":mission_weapon_type", itp_type_polearm),
     #  (assign, "$g_training_ground_used_weapon_proficiency", wpt_polearm),
     #  (assign, ":training_default_weapon_1", "itm_practice_lance"),
     #(else_try),
     #  #weapon_type comes as -1 when melee training is selected
     #  (assign, "$g_training_ground_used_weapon_proficiency", wpt_one_handed_weapon),
     #  (call_script, "script_get_random_melee_training_weapon"),
     #  (assign, ":training_default_weapon_1", reg0),
     #  (assign, ":training_default_weapon_2", reg1),
     #(try_end),
     
##     (assign, "$g_training_ground_training_troop_stack_index", ":stack_index"),
     #(try_begin),
     #  (eq, "$g_mt_mode", ctm_mounted),
     #  (assign, ":training_default_weapon_3", "itm_practice_horse"),
#    #   (store_add, "$g_training_ground_training_scene", "scn_training_ground_horse_track_1", "$g_encountered_party"),
#    #   (val_sub, "$g_training_ground_training_scene", training_grounds_begin),
     #(else_try),
#    #   (store_add, "$g_training_ground_training_scene", "scn_training_ground_ranged_melee_1", "$g_encountered_party"),
#    #   (val_sub, "$g_training_ground_training_scene", training_grounds_begin),
     #(try_end),

     (modify_visitors_at_site, "$g_training_ground_training_scene"),
     (reset_visitors),
     (set_visitor, 0, "trp_player"),

     (assign, ":selected_weapon", -1),
     (try_for_range, ":cur_slot", 0, 4),#equipment slots
       (troop_get_inventory_slot, ":cur_item", "trp_player", ":cur_slot"),
       (ge, ":cur_item", 0),
       (item_get_type, ":item_type", ":cur_item"),
       (try_begin),
         (eq, ":item_type", ":mission_weapon_type"),
         (eq, ":selected_weapon", -1),
         (assign, ":selected_weapon", ":cur_item"),
       (try_end),
     (try_end),
     #(mission_tpl_entry_clear_override_items, "mt_oim_training_ground_training", 0),
     #(mission_tpl_entry_add_override_item, "mt_oim_training_ground_training", 0, "itm_practice_boots"),
     #(try_begin),
     #  (ge, ":training_default_weapon_1", 0),
     #  (try_begin),
     #    (ge, ":selected_weapon", 0),
     #    (mission_tpl_entry_add_override_item, "mt_oim_training_ground_training", 0, ":selected_weapon"),
     #  (else_try),
     #    (mission_tpl_entry_add_override_item, "mt_oim_training_ground_training", 0, ":training_default_weapon_1"),
     #  (try_end),
     #(try_end),
     #(try_begin),
     #  (ge, ":training_default_weapon_2", 0),
     #  (mission_tpl_entry_add_override_item, "mt_oim_training_ground_training", 0, ":training_default_weapon_2"),
     #(try_end),
     #(try_begin),
     #  (ge, ":training_default_weapon_3", 0),
     #  (mission_tpl_entry_add_override_item, "mt_oim_training_ground_training", 0, ":training_default_weapon_3"),
     #(try_end),

     (assign, ":cur_visitor_point", 5),
     (troop_get_slot, ":num_fit", "trp_stack_selection_amounts", 1),
     (store_add, ":end_cond", 5, ":num_fit"),
     (val_min, ":end_cond", 13),
     (try_for_range, ":cur_visitor_point", 5, ":end_cond"),
       (call_script, "script_remove_random_fit_party_member_from_stack_selection"),
       (set_visitor, ":cur_visitor_point", reg0),
       (val_add, ":cur_visitor_point", 1),
     (try_end),
     (try_begin),
       (eq, "$g_mt_mode", ctm_melee),
       (assign, ":total_difficulty", 0),
       (try_for_range, ":i", 0, ":training_param"),
         (troop_get_slot, ":cur_troop", "trp_temp_array_a", ":i"),
         (store_add, ":cur_entry_point", ":i", 1),
         (set_visitor, ":cur_entry_point", ":cur_troop"),
         #(mission_tpl_entry_clear_override_items, "mt_oim_training_ground_training", ":cur_entry_point"),
         #(mission_tpl_entry_add_override_item, "mt_oim_training_ground_training", ":cur_entry_point", "itm_practice_boots"),
         #(call_script, "script_get_random_melee_training_weapon"),
         ##(mission_tpl_entry_add_override_item, "mt_oim_training_ground_training", ":cur_entry_point", reg0),
         #(try_begin),
         #  (ge, reg1, 0),
         #  (mission_tpl_entry_add_override_item, "mt_oim_training_ground_training", ":cur_entry_point", reg1),
         #(try_end),
         (store_character_level, ":cur_troop_level", ":cur_troop"),
         (val_add, ":cur_troop_level", 10),
         (val_mul, ":cur_troop_level", ":cur_troop_level"),
         (val_add, ":total_difficulty", ":cur_troop_level"),
       (try_end),

       (assign, "$g_training_ground_training_num_enemies", ":training_param"),
       (assign, "$g_training_ground_training_hardness",  ":total_difficulty"),
       (store_add, ":number_multiplier", "$g_training_ground_training_num_enemies", 4),
       (val_mul, "$g_training_ground_training_hardness", ":number_multiplier"),
       (val_div, "$g_training_ground_training_hardness", 2400),
       (str_store_string, s0, "@Your opponents are ready for the fight."),
     (else_try),
       (eq, "$g_mt_mode", ctm_mounted),
       (try_begin),
         (eq, ":mission_weapon_type", itp_type_bow),
         (assign, "$g_training_ground_training_hardness", 350),
         (assign, "$g_training_ground_training_num_gourds_to_destroy", 30),
       (else_try),
         (eq, ":mission_weapon_type", itp_type_thrown),
         (assign, "$g_training_ground_training_hardness", 400),
         (assign, "$g_training_ground_training_num_gourds_to_destroy", 30),
       (else_try),
         (eq, ":mission_weapon_type", itp_type_one_handed_wpn),
         (assign, "$g_training_ground_training_hardness", 200),
         (assign, "$g_training_ground_training_num_gourds_to_destroy", 45),
       (else_try),
         (eq, ":mission_weapon_type", itp_type_polearm),
         (assign, "$g_training_ground_training_hardness", 280),
         (assign, "$g_training_ground_training_num_gourds_to_destroy", 35),
       (try_end),
       (str_store_string, s0, "@Try to destroy as many targets as you can. You have two and a half minutes to clear the track."),
     (else_try),
       (eq, "$g_mt_mode", ctm_ranged),
       (store_mul, "$g_training_ground_ranged_distance", ":training_param", 100),
       (assign, ":hardness_modifier", ":training_param"),
       (val_mul, ":hardness_modifier", ":hardness_modifier"),
       (try_begin),
         (eq, ":mission_weapon_type", itp_type_bow),
         (val_mul, ":hardness_modifier", 3),
         (val_div, ":hardness_modifier", 2),
       (else_try),
         (eq, ":mission_weapon_type", itp_type_thrown),
         (val_mul, ":hardness_modifier", 5),
         (val_div, ":hardness_modifier", 2),
         (val_mul, ":hardness_modifier", ":training_param"),
         (val_div, ":hardness_modifier", 2),
       (try_end),
       (store_mul, "$g_training_ground_training_hardness", 100, ":hardness_modifier"),
       (val_div, "$g_training_ground_training_hardness", 6000),
       (str_store_string, s0, "@Stay behind the line on the ground and shoot the targets. Try not to waste any shots."),
     (try_end),
     (jump_to_menu, "mnu_oim_training_ground_description"),
     ]), 


 
  #script_print_party_to_s0:
  # INPUT:
  # param1: Party-id
  
  #OUTPUT:
  # string register 0.
  
  ##  ("print_party_to_s0",
  ##    [
  ##      (store_script_param_1, ":party"), #Party_id
  ##      (party_get_num_companion_stacks, ":num_stacks",":party"),
  ##      (str_store_string, s50, "str_none"),
  ##      (try_for_range, ":i_stack", 0, ":num_stacks"),
  ##        (party_stack_get_troop_id,     ":stack_troop",":party",":i_stack"),
  ##        (party_stack_get_size,         ":stack_size",":party",":i_stack"),
  ##        (str_store_troop_name_by_count, s61, ":stack_troop", ":stack_size"),
  ##        (try_begin),
  ##          (troop_is_hero, ":stack_troop"),
  ##          (str_store_string_reg, s51, s61),
  ##        (else_try),
  ##          (assign, reg60, ":stack_size"),
  ##          (str_store_string, s63, "str_reg60_s61"),
  ##        (try_end),
  ##        (try_begin),
  ##          (eq, ":i_stack", 0),
  ##          (str_store_string_reg, s50, s51),
  ##        (else_try),
  ##          (str_store_string, s50, "str_s50_comma_s51"),
  ##        (try_end),
  ##      (try_end),
  ##      (str_store_string_reg, s0, s50),
  ##  ]),
  

  
  #script_party_count_fit_regulars:
  # Returns the number of unwounded regular companions in a party
  # INPUT:
  # param1: Party-id
  
  ("party_count_fit_regulars",
    [
      (store_script_param_1, ":party"), #Party_id
      (party_get_num_companion_stacks, ":num_stacks", ":party"),
      (assign, reg0, 0),
      (try_for_range, ":i_stack", 0, ":num_stacks"),
        (party_stack_get_troop_id, ":stack_troop", ":party", ":i_stack"),
        (neg|troop_is_hero, ":stack_troop"),
        (party_stack_get_size, ":stack_size",":party",":i_stack"),
        (party_stack_get_num_wounded, ":num_wounded",":party",":i_stack"),
        (val_sub, ":stack_size", ":num_wounded"),
        (val_add, reg0, ":stack_size"),
      (try_end),
  ]),
  
  
  #script_party_count_fit_for_battle:
  # Returns the number of unwounded companions in a party
  # INPUT:
  # param1: Party-id
  # OUTPUT: reg0 = result
  ("party_count_fit_for_battle",
    [
      (store_script_param_1, ":party"), #Party_id
      (party_get_num_companion_stacks, ":num_stacks",":party"),
      (assign, reg0, 0),
      (try_for_range, ":i_stack", 0, ":num_stacks"),
        (party_stack_get_troop_id, ":stack_troop",":party",":i_stack"),
        (assign, ":num_fit",0),
        (try_begin),
          (troop_is_hero, ":stack_troop"),
          (try_begin),
            (neg|troop_is_wounded, ":stack_troop"),
            (assign, ":num_fit", 1),
          (try_end),
        (else_try),
          (party_stack_get_size, ":num_fit",":party",":i_stack"),
          (party_stack_get_num_wounded, ":num_wounded",":party",":i_stack"),
          (val_sub, ":num_fit", ":num_wounded"),
        (try_end),
        (val_add, reg0, ":num_fit"),
      (try_end),
  ]),


  #script_party_count_members_with_full_health
  # Returns the number of unwounded regulars, and heroes other than player with 100% hitpoints in a party
  # INPUT:
  # param1: Party-id
  # OUTPUT: reg0 = result
  ("party_count_members_with_full_health",
    [
      (store_script_param_1, ":party"), #Party_id
      (party_get_num_companion_stacks, ":num_stacks",":party"),
      (assign, reg0, 0),
      (try_for_range, ":i_stack", 0, ":num_stacks"),
        (party_stack_get_troop_id, ":stack_troop",":party",":i_stack"),
        (assign, ":num_fit",0),
        (try_begin),
          (troop_is_hero, ":stack_troop"),
          (neq, ":stack_troop", "trp_player"),
          (store_troop_health, ":troop_hp", ":stack_troop"),
          (try_begin),
            (ge, ":troop_hp", 80),
            (assign, ":num_fit",1),
          (try_end),
        (else_try),
          (party_stack_get_size, ":num_fit",":party",":i_stack"),
          (party_stack_get_num_wounded, ":num_wounded",":party",":i_stack"),
          (val_sub, ":num_fit", ":num_wounded"),
          (val_max, ":num_fit", 0),
        (try_end),
        (val_add, reg0, ":num_fit"),
      (try_end),
  ]),

 
  ##  ("get_fit_stack_with_rank",
  ##    [
  ##      (store_script_param_1, ":party"), #Party_id
  ##      (store_script_param_2, ":rank"), #Rank
  ##      (party_get_num_companion_stacks, ":num_stacks",":party"),
  ##      (assign, reg0, -1),
  ##      (assign, ":num_total", 0),
  ##      (try_for_range, ":i_stack", 0, ":num_stacks"),
  ##        (eq, reg(0), -1), #continue only if we haven't found the result yet.
  ##        (party_stack_get_troop_id,     ":stack_troop",":party",":i_stack"),
  ##        (assign, ":num_fit",0),
  ##        (try_begin),
  ##          (troop_is_hero, ":stack_troop"),
  ##          (store_troop_health, ":troop_hp", ":stack_troop"),
  ##          (try_begin),
  ##            (ge,  ":troop_hp", 20),
  ##            (assign, ":num_fit",1),
  ##          (try_end),
  ##        (else_try),
  ##          (party_stack_get_size,         ":num_fit",":party",":i_stack"),
  ##          (party_stack_get_num_wounded, ":num_wounded",":party",":i_stack"),
  ##          (val_sub, ":num_fit", ":num_wounded"),
  ##        (try_end),
  ##        (val_add, ":num_total", ":num_fit"),
  ##        (try_begin),
  ##          (lt, ":rank", ":num_total"),
  ##          (assign, reg(0), ":i_stack"),
  ##        (try_end),
  ##      (try_end),
  ##  ]),
  
  #script_get_stack_with_rank:
  # Returns the stack no, containing unwounded regular companions with rank rank.
  # INPUT:
  # param1: Party-id
  # param2: rank
  
  ("get_stack_with_rank",
    [
  ]),
  
  #script_inflict_casualties_to_party:
  # INPUT:
  # param1: Party-id
  # param2: number of rounds
  
  #OUTPUT:
  # This script doesn't return a value but populates the parties p_temp_wounded and p_temp_killed with the wounded and killed.
  #Example:
  #  (script_inflict_casualties_to_party, "_p_main_party" ,50),
  #  Simulate 50 rounds of casualties to main_party.
  
  ("inflict_casualties_to_party",
    [
   ]),
  
  
  #script_move_members_with_ratio:
  # INPUT:
  # param1: Source Party-id
  # param2: Target Party-id
  # pin_number = ratio of members to move, multiplied by 1000  
  #OUTPUT:
  # This script doesn't return a value but moves some of the members of source party to target party according to the given ratio.
  ("move_members_with_ratio",
    [
      (store_script_param_1, ":source_party"), #Source Party_id
      (store_script_param_2, ":target_party"), #Target Party_id
      (party_get_num_prisoner_stacks, ":num_stacks",":source_party"),
      (try_for_range_backwards, ":stack_no", 0, ":num_stacks"),
        (party_prisoner_stack_get_troop_id,     ":stack_troop",":source_party",":stack_no"),
        (party_prisoner_stack_get_size,    ":stack_size",":source_party",":stack_no"),
        (store_mul, ":number_to_move",":stack_size","$pin_number"),
        (val_div, ":number_to_move", 1000),
        (party_remove_prisoners, ":source_party", ":stack_troop", ":number_to_move"),
        (assign, ":number_moved", reg0),
        (party_add_prisoners, ":target_party", ":stack_troop", ":number_moved"),
      (try_end),
      (party_get_num_companion_stacks, ":num_stacks",":source_party"),
      (try_for_range_backwards, ":stack_no", 0, ":num_stacks"),
        (party_stack_get_troop_id,     ":stack_troop",":source_party",":stack_no"),
        (party_stack_get_size,    ":stack_size",":source_party",":stack_no"),
        (store_mul, ":number_to_move",":stack_size","$pin_number"),
        (val_div, ":number_to_move", 1000),
        (party_remove_members, ":source_party", ":stack_troop", ":number_to_move"),
        (assign, ":number_moved", reg0),
        (party_add_members, ":target_party", ":stack_troop", ":number_moved"),
      (try_end),
  ]),
  
  
  # script_count_parties_of_faction_and_party_type:
  # counts number of active parties with a template and faction.
  # Input: arg1 = faction_no, arg2 = party_type
  # Output: reg0 = count
  
  ("count_parties_of_faction_and_party_type",
    [
      (store_script_param_1, ":faction_no"),
      (store_script_param_2, ":party_type"),
      (assign, ":count", 0),
      (try_for_parties, ":party_no"),
        (party_is_active, ":party_no"),
        (party_get_slot, ":cur_party_type", ":party_no", slot_party_type),
        (store_faction_of_party, ":cur_faction", ":party_no"),
        (eq, ":cur_party_type", ":party_type"),
        (eq, ":cur_faction", ":faction_no"),
        (val_add, ":count", 1),
      (try_end),
	  (assign, reg0,  ":count"),
  ]),

# script_faction_get_number_of_armies
# Input: arg1 = faction_no
# Output: reg0 = number_of_armies
  ("faction_get_number_of_armies",
   [
      (store_script_param_1, ":faction_no"),
      (assign, ":num_armies", 0),
      (try_for_range, ":troop_no", kingdom_heroes_begin, kingdom_heroes_end),
    	(store_troop_faction, ":hero_faction_no", ":troop_no"),
        (eq, ":hero_faction_no", ":faction_no"),
        (troop_get_slot, ":hero_party", ":troop_no", slot_troop_leaded_party),
        (ge, ":hero_party", 0),
        (party_is_active, ":hero_party"),
        (call_script, "script_party_count_fit_regulars", ":hero_party"),
        (assign, ":party_size", reg0),
        (call_script, "script_party_get_ideal_size", ":hero_party"),
        (assign, ":ideal_size", reg0),
        (val_mul, ":ideal_size", 60),
        (val_div, ":ideal_size", 100),
        (gt, ":party_size", ":ideal_size"),
        (val_add, ":num_armies", 1),
      (try_end),
      (assign, reg0, ":num_armies"),
    ]),  
  

# script_faction_recalculate_strength
# Input: arg1 = faction_no
# Output: reg0 = strength
  ("faction_recalculate_strength",
   [
      (store_script_param_1, ":faction_no"),

      (call_script, "script_faction_get_number_of_armies", ":faction_no"),
      (assign, ":num_armies", reg0),
      (assign, ":num_castles", 0),
      (assign, ":num_towns", 0),

      (try_for_range, ":center_no", centers_begin, centers_end),
        (store_faction_of_party, ":center_faction", ":center_no"),
        (eq, ":center_faction", ":faction_no"),
        (try_begin),
          (party_slot_eq, ":center_no", slot_party_type, spt_castle),
          (val_add, ":num_castles", 1),
        (else_try),
          (party_slot_eq, ":center_no", slot_party_type, spt_town),
          (val_add, ":num_towns", 1),
        (try_end),
      (try_end),

      (faction_set_slot, ":faction_no", slot_faction_num_armies, ":num_armies"),
      (faction_set_slot, ":faction_no", slot_faction_num_castles, ":num_castles"),
      (faction_set_slot, ":faction_no", slot_faction_num_towns, ":num_towns"),

    ]),  
  
  #script_select_random_town:
  # This script selects a random town in range [towns_begin, towns_end)
  # INPUTS:
  # none
  
  #OUTPUT:
  # reg0: id of the selected random town
##  ("select_random_town",
##    [
##      (assign, ":num_towns", towns_end),
##      (val_sub,":num_towns", towns_begin),
##      (store_random, ":random_town", ":num_towns"),
##      (val_add,":random_town", towns_begin),
##      (assign, reg0, ":random_town"),
##  ]),
  
#  ("select_random_spawn_point",
#    [
#      (assign, reg(20), spawn_points_end),
#      (val_sub,reg(20), spawn_points_begin),
#      (store_random, reg(21), reg(20)),
#      (val_add,reg(21), spawn_points_begin),
#      (assign, "$pout_town", reg(21)),
# ]),
  
  #script_cf_select_random_town_with_faction:
  # This script selects a random town in range [towns_begin, towns_end)
  # such that faction of the town is equal to given_faction
  # INPUT:
  # arg1 = faction_no
  
  #OUTPUT:
  # This script may return false if there is no matching town.
  # reg0 = town_no
  ("cf_select_random_town_with_faction",
    [
      (store_script_param_1, ":faction_no"),
      (assign, ":result", -1),
      # First count num matching spawn points
      (assign, ":no_towns", 0),
      (try_for_range,":cur_town", towns_begin, towns_end),
        (store_faction_of_party, ":cur_faction", ":cur_town"),
        (eq, ":cur_faction", ":faction_no"),
        (val_add, ":no_towns", 1),
      (try_end),
      (gt, ":no_towns", 0), #Fail if there are no towns
      (store_random_in_range, ":random_town", 0, ":no_towns"),
      (assign, ":no_towns", 0),
      (try_for_range,":cur_town", towns_begin, towns_end),
        (eq, ":result", -1),
        (store_faction_of_party, ":cur_faction", ":cur_town"),
        (eq, ":cur_faction", ":faction_no"),
        (val_add, ":no_towns", 1),
        (gt, ":no_towns", ":random_town"),
        (assign, ":result", ":cur_town"),
      (try_end),
      (assign, reg0, ":result"),
  ]),

  #script_cf_select_random_village_with_faction:
  # This script selects a random village in range [villages_begin, villages_end)
  # such that faction of the village is equal to given_faction
  # INPUT:
  # arg1 = faction_no
  
  #OUTPUT:
  # This script may return false if there is no matching village.
  # reg0 = village_no
  ("cf_select_random_village_with_faction",
    [
      (store_script_param_1, ":faction_no"),
      (assign, ":result", -1),
      # First count num matching spawn points
      (assign, ":no_villages", 0),
      (try_for_range,":cur_village", villages_begin, villages_end),
        (store_faction_of_party, ":cur_faction", ":cur_village"),
        (eq, ":cur_faction", ":faction_no"),
        (val_add, ":no_villages", 1),
      (try_end),
      (gt, ":no_villages", 0), #Fail if there are no villages
      (store_random_in_range, ":random_village", 0, ":no_villages"),
      (assign, ":no_villages", 0),
      (try_for_range,":cur_village", villages_begin, villages_end),
        (eq, ":result", -1),
        (store_faction_of_party, ":cur_faction", ":cur_village"),
        (eq, ":cur_faction", ":faction_no"),
        (val_add, ":no_villages", 1),
        (gt, ":no_villages", ":random_village"),
        (assign, ":result", ":cur_village"),
      (try_end),
      (assign, reg0, ":result"),
  ]),
  
  
  #script_cf_select_random_walled_center_with_faction:
  # This script selects a random center in range [centers_begin, centers_end)
  # such that faction of the town is equal to given_faction
  # INPUT:
  # arg1 = faction_no
  # arg2 = preferred_center_no
  
  #OUTPUT:
  # This script may return false if there is no matching town.
  # reg0 = town_no (Can fail)
  ("cf_select_random_walled_center_with_faction",
    [
      (store_script_param, ":faction_no", 1),
      (store_script_param, ":preferred_center_no", 2),
      (assign, ":result", -1),
      # First count num matching spawn points
      (assign, ":no_centers", 0),
      (try_for_range,":cur_center", walled_centers_begin, walled_centers_end),
        (store_faction_of_party, ":cur_faction", ":cur_center"),
        (eq, ":cur_faction", ":faction_no"),
        (val_add, ":no_centers", 1),
        (eq, ":cur_center", ":preferred_center_no"),
        (val_add, ":no_centers", 99),
      (try_end),
      (gt, ":no_centers", 0), #Fail if there are no centers
      (store_random_in_range, ":random_center", 0, ":no_centers"),
      (try_for_range,":cur_center", walled_centers_begin, walled_centers_end),
        (eq, ":result", -1),
        (store_faction_of_party, ":cur_faction", ":cur_center"),
        (eq, ":cur_faction", ":faction_no"),
        (val_sub, ":random_center", 1),
        (try_begin),
          (eq, ":cur_center", ":preferred_center_no"),
          (val_sub, ":random_center", 99),
        (try_end),
        (lt, ":random_center", 0),
        (assign, ":result", ":cur_center"),
      (try_end),
      (assign, reg0, ":result"),
  ]),


  #script_cf_select_random_walled_center_with_faction_and_owner_priority_no_siege:
  # INPUT:
  # arg1 = faction_no
  # arg2 = owner_troop_no
  #OUTPUT:
  # This script may return false if there is no matching town.
  # reg0 = center_no (Can fail)
  ("cf_select_random_walled_center_with_faction_and_owner_priority_no_siege",
    [
      (store_script_param, ":faction_no", 1),
      (store_script_param, ":troop_no", 2),
      (assign, ":result", -1),
      (assign, ":no_centers", 0),
      (try_for_range,":cur_center", walled_centers_begin, walled_centers_end),
        (store_faction_of_party, ":cur_faction", ":cur_center"),
        (eq, ":cur_faction", ":faction_no"),
        (party_slot_eq, ":cur_center", slot_center_is_besieged_by, -1),
        (val_add, ":no_centers", 1),
        (party_slot_eq, ":cur_center", slot_town_lord, ":troop_no"),
        (val_add, ":no_centers", 1000),
      (try_end),
      (gt, ":no_centers", 0), #Fail if there are no centers
      (store_random_in_range, ":random_center", 0, ":no_centers"),
      (try_for_range,":cur_center", walled_centers_begin, walled_centers_end),
        (eq, ":result", -1),
        (store_faction_of_party, ":cur_faction", ":cur_center"),
        (eq, ":cur_faction", ":faction_no"),
        (party_slot_eq, ":cur_center", slot_center_is_besieged_by, -1),
        (val_sub, ":random_center", 1),
        (try_begin),
          (party_slot_eq, ":cur_center", slot_town_lord, ":troop_no"),
          (val_sub, ":random_center", 1000),
        (try_end),
        (lt, ":random_center", 0),
        (assign, ":result", ":cur_center"),
      (try_end),
      (assign, reg0, ":result"),
  ]),


  #script_cf_select_random_walled_center_with_faction_and_less_strength_priority:
  # This script selects a random center in range [centers_begin, centers_end)
  # such that faction of the town is equal to given_faction
  # INPUT:
  # arg1 = faction_no
  # arg2 = preferred_center_no
  
  #OUTPUT:
  # This script may return false if there is no matching town.
  # reg0 = town_no (Can fail)
  ("cf_select_random_walled_center_with_faction_and_less_strength_priority",
    [
      (store_script_param, ":faction_no", 1),
      (store_script_param, ":preferred_center_no", 2),
      (assign, ":result", -1),
      # First count num matching spawn points
      (assign, ":no_centers", 0),
      (try_for_range, ":cur_center", walled_centers_begin, walled_centers_end),
        (store_faction_of_party, ":cur_faction", ":cur_center"),
        (eq, ":cur_faction", ":faction_no"),
        (party_slot_eq, ":cur_center", slot_center_is_besieged_by, -1),
        (val_add, ":no_centers", 1),
        (try_begin),
          (eq, ":cur_center", ":preferred_center_no"),
          (val_add, ":no_centers", 99),
        (try_end),
##        (call_script, "script_party_calculate_regular_strength", ":cur_center"),
##        (assign, ":strength", reg0),
##        (lt, ":strength", 80),
##        (store_sub, ":strength", 100, ":strength"),
##        (val_div, ":strength", 20),
##        (val_add, ":no_centers", ":strength"),
      (try_end),
      (gt, ":no_centers", 0), #Fail if there are no centers
      (store_random_in_range, ":random_center", 0, ":no_centers"),
      (try_for_range, ":cur_center", walled_centers_begin, walled_centers_end),
        (eq, ":result", -1),
        (store_faction_of_party, ":cur_faction", ":cur_center"),
        (eq, ":cur_faction", ":faction_no"),
        (party_slot_eq, ":cur_center", slot_center_is_besieged_by, -1),
        (val_sub, ":random_center", 1),
        (try_begin),
          (eq, ":cur_center", ":preferred_center_no"),
          (val_sub, ":random_center", 99),
        (try_end),
##        (try_begin),
##          (call_script, "script_party_calculate_regular_strength", ":cur_center"),
##          (assign, ":strength", reg0),
##          (lt, ":strength", 80),
##          (store_sub, ":strength", 100, ":strength"),
##          (val_div, ":strength", 20),
##          (val_sub, ":random_center", ":strength"),
##        (try_end),
        (lt, ":random_center", 0),
        (assign, ":result", ":cur_center"),
      (try_end),
      (assign, reg0, ":result"),
  ]),

  
  #script_cf_select_random_town_at_peace_with_faction:
  # This script selects a random town in range [towns_begin, towns_end)
  # such that faction of the town is friendly to given_faction
  # INPUT:
  # arg1 = faction_no
  
  #OUTPUT:
  # This script may return false if there is no matching town.
  # reg0 = town_no
  ("cf_select_random_town_at_peace_with_faction",
    [
      (store_script_param_1, ":faction_no"),
      (assign, ":result", -1),
      # First count num matching towns
      (assign, ":no_towns", 0),
      (try_for_range,":cur_town", towns_begin, towns_end),
        (store_faction_of_party, ":cur_faction", ":cur_town"),
        (store_relation,":reln", ":cur_faction", ":faction_no"),
        (ge, ":reln", 0),
        (val_add, ":no_towns", 1),
      (try_end),
      (gt, ":no_towns", 0), #Fail if there are no towns
      (store_random_in_range, ":random_town", 0, ":no_towns"),
      (assign, ":no_towns", 0),
      (try_for_range,":cur_town", towns_begin, towns_end),
        (eq, ":result", -1),
        (store_faction_of_party, ":cur_faction", ":cur_town"),
        (store_relation,":reln", ":cur_faction", ":faction_no"),
        (ge, ":reln", 0),
        (val_add, ":no_towns", 1),
        (gt, ":no_towns", ":random_town"),
        (assign, ":result", ":cur_town"),
      (try_end),
      (assign, reg0, ":result"),
  ]),
  
  #script_cf_select_random_town_at_peace_with_faction_in_trade_route
  # INPUT:
  # arg1 = town_no
  # arg2 = faction_no
  
  #OUTPUT:
  # This script may return false if there is no matching town.
  # reg0 = town_no
  ("cf_select_random_town_at_peace_with_faction_in_trade_route",
    [
      (store_script_param, ":town_no", 1),
      (store_script_param, ":faction_no", 2),
      (assign, ":result", -1),
      (assign, ":no_towns", 0),
      (try_for_range, ":cur_slot", slot_town_trade_routes_begin, slot_town_trade_routes_end),
        (party_get_slot, ":cur_town", ":town_no", ":cur_slot"),
        (gt, ":cur_town", 0),
        (store_faction_of_party, ":cur_faction", ":cur_town"),
        (store_relation, ":reln", ":cur_faction", ":faction_no"),
        (ge, ":reln", 0),
        (val_add, ":no_towns", 1),
      (try_end),
      (gt, ":no_towns", 0), #Fail if there are no towns
      (store_random_in_range, ":random_town", 0, ":no_towns"),
      (try_for_range, ":cur_slot", slot_town_trade_routes_begin, slot_town_trade_routes_end),
        (eq, ":result", -1),
        (party_get_slot, ":cur_town", ":town_no", ":cur_slot"),
        (gt, ":cur_town", 0),
        (store_faction_of_party, ":cur_faction", ":cur_town"),
        (store_relation, ":reln", ":cur_faction", ":faction_no"),
        (ge, ":reln", 0),
        (val_sub, ":random_town", 1),
        (lt, ":random_town", 0),
        (assign, ":result", ":cur_town"),
      (try_end),
      (assign, reg0, ":result"),
  ]),

  
    
	#the following is a very simple adjustment - it measures the difference in prices between two towns
	#all goods are weighted equally except for luxuries
	#it does not take into account the prices of the goods, nor cargo capacity
	#to do that properly, a merchant would have to virtually fill his baggage, slot by slot, for each town
	#i also found that one needed to introduce demand inelasticity -- prices should vary a lot for grain,  relatively little for iron
	
  ("cf_select_most_profitable_town_at_peace_with_faction_in_trade_route",
    [
  ]),

  
  ##  ("cf_select_faction_spawn_point",
  ##    [
  ##      # First count num matching spawn points
  ##      (assign, reg(24), 0),
  ##      (try_for_range,reg(25), spawn_points_begin, spawn_points_end),
  ##        (store_faction_of_party, reg(23), reg(25)),
  ##        (eq, reg(23), "$pin_faction"),
  ##        (val_add, reg(24), 1),
  ##      (try_end,0),
  ##      # reg4 now holds num towns of this faction.
  ##      (gt, reg(24), 0), #Fail if there are no towns
  ##      (store_random, reg(26), reg(24)),
  ##
  ##      (assign, reg(24), 0), # reg24 = num points of this faction.
  ##      (try_for_range,reg(25), spawn_points_begin, spawn_points_end),
  ##        (store_faction_of_party, reg(23), reg(25)),
  ##        (eq, reg(23), "$pin_faction"),
  ##        (try_begin,0),
  ##          (eq, reg(24), reg(26)),
  ##          (assign, "$pout_town", reg(25)), # result is this town
  ##        (try_end,0),
  ##        (val_add, reg(24), 1),
  ##      (try_end,0),
  ##  ]),
  
  
  #script_spawn_party_at_random_town:
  # This script selects a random town in range [towns_begin, towns_end)
  # such that faction of the town is equal to given_faction
  # and spawns a new party there.
  # INPUT:
  # $pin_faction: given_faction
  # $pin_party_template: given_party_template
  
  #OUTPUT:
  # This script may return false if party cannot be spawned.
  # $pout_party: id of the spawned party
  ##  ("spawn_party_at_random_town",
  ##    [
  ##      (call_script,"script_select_random_spawn_point"),
  ##      (set_spawn_radius,1),
  ##      (spawn_around_party,"$pout_town","$pin_party_template"),
  ##      (assign, "$pout_party", reg(0)),
  ##  ]),
  
  #script_cf_spawn_party_at_faction_town:
  # This script selects a random town in range [towns_begin, towns_end)
  # such that faction of the town is equal to given_faction
  # and spawns a new party there.
  # INPUT:
  # $pin_faction: given_faction
  # $pin_party_template: given_party_template
  
  #OUTPUT:
  # This script may return false if party cannot be spawned.
  # $pout_party: id of the spawned party
  ##  ("cf_spawn_party_at_faction_town",
  ##    [
  ##      (call_script,"script_cf_select_faction_spawn_point"),
  ##      (set_spawn_radius,1),
  ##      (spawn_around_party,"$pout_town","$pin_party_template"),
  ##      (assign, "$pout_party", reg(0)),
  ##  ]),
  
  #script_spawn_party_at_random_town_if_below_limit:
  # This script checks if number of parties
  # of specified template is less than limit,
  # If so, it selects a random town in range [towns_begin, towns_end)
  # and spawns a new party there.
  # INPUT:
  # $pin_party_template: given_party_template
  # $pin_limit: limit value
  
  #OUTPUT:
  # $pout_party: id of the spawned party
  # $pout_town: id of the selected faction town
  # Note:
  # This script may return false if number of parties
  # of specified template is greater or equal to limit,
  # or if party cannot be spawned.
##  ("cf_spawn_party_at_random_town_if_below_limit",
##    [
##      (store_num_parties_of_template, reg(22), "$pin_party_template"),
##      (lt,reg(22),"$pin_limit"), #check if we are below limit.
##      (call_script,"script_select_random_spawn_point"),
##      (set_spawn_radius,1),
##      (spawn_around_party,"$pout_town","$pin_party_template"),
##      (assign, "$pout_party", reg(0)),
##  ]),
  
  ##  #script_spawn_party_at_faction_town_if_below_limit:
  ##  # This script checks if number of parties
  ##  # of specified template is less than limit,
  ##  # If so, it selects a random town in range [towns_begin, towns_end)
  ##  # such that faction of the town is equal to given_faction
  ##  # and spawns a new party there.
  ##  # INPUT:
  ##  # $pin_faction: given_faction
  ##  # $pin_party_template: given_party_template
  ##  # $pin_limit: limit value
  ##
  ##  #OUTPUT:
  ##  # $pout_party: id of the spawned party
  ##  # $pout_town: id of the selected faction town
  ##  # Note:
  ##  # This script may return false if number of parties
  ##  # of specified template is greater or equal to limit,
  ##  # or if party cannot be spawned.
  ##  ("cf_spawn_party_at_faction_town_if_below_limit",
  ##    [
  ##      (store_num_parties_of_template, reg(22), "$pin_party_template"),
  ##      (lt,reg(22),"$pin_limit"), #check if we are below limit.
  ##      (call_script,"script_cf_select_faction_spawn_point"),
  ##      (set_spawn_radius,1),
  ##      (spawn_around_party,"$pout_town","$pin_party_template"),
  ##      (assign, "$pout_party", reg(0)),
  ##  ]),
  
  # script_shuffle_troop_slots:
  # Shuffles a range of slots of a given troop.
  # Used for exploiting a troop as an array.
  # Input: arg1 = troop_no, arg2 = slot_begin, arg3 = slot_end
  ("shuffle_troop_slots",
    [
      (store_script_param, ":troop_no", 1),
      (store_script_param, ":slots_begin", 2),
      (store_script_param, ":slots_end", 3),
      (try_for_range, ":cur_slot_no", ":slots_begin", ":slots_end"),
        (store_random_in_range, ":random_slot_no", ":slots_begin", ":slots_end"), #reg(58) = random slot. Now exchange slots reg(57) and reg(58)
        (troop_get_slot, ":cur_slot_value", ":troop_no", ":cur_slot_no"), #temporarily store the value in slot reg(57) in reg(59)
        (troop_get_slot, ":random_slot_value", ":troop_no", ":random_slot_no"), #temporarily store the value in slot reg(58) in reg(60)
        (troop_set_slot, ":troop_no", ":cur_slot_no", ":random_slot_value"), # Now exchange the two...
        (troop_set_slot, ":troop_no", ":random_slot_no", ":cur_slot_value"),
      (try_end),
  ]),
  
  
  # script_get_quest - combines old get_random_quest with new get_dynamic_quest
  
  # Input: arg1 = troop_no (of the troop in conversation), arg2 = min_importance (of the quest)
  # Output: reg0 = quest_no (the slots of the quest will be filled after calling this script)
  ("get_random_quest",
    [            
      (store_script_param_1, ":giver_troop"),
      
      (store_character_level, ":player_level", "trp_player"),
      (store_troop_faction, ":giver_faction_no", ":giver_troop"),
      
      (troop_get_slot, ":giver_party_no", ":giver_troop", slot_troop_leaded_party),
      (troop_get_slot, ":giver_reputation", ":giver_troop", slot_lord_reputation_type),
      
      (assign, ":giver_center_no", -1),
      (try_begin),
        (gt, ":giver_party_no", 0),
        (party_get_attached_to, ":giver_center_no", ":giver_party_no"),
      (else_try),
        (is_between, "$g_encountered_party", centers_begin, centers_end),
        (assign, ":giver_center_no", "$g_encountered_party"),
      (try_end),
      
      (try_begin),
        (troop_slot_eq, ":giver_troop", slot_troop_occupation, slto_kingdom_hero),
        (try_begin),
          (ge, "$g_talk_troop_faction_relation", 0),
          (assign, ":quests_begin", lord_quests_begin),
          (assign, ":quests_end", lord_quests_end),
        (else_try),
          (assign, ":quests_begin", enemy_lord_quests_begin),
          (assign, ":quests_end", enemy_lord_quests_end),
        (try_end),
      (else_try),	    
        (is_between, ":giver_troop", village_elders_begin, village_elders_end),
        (assign, ":quests_begin", village_elder_quests_begin),
        (assign, ":quests_end", village_elder_quests_end),
      (else_try),
        (this_or_next|is_between,":giver_troop",mayors_begin,mayors_end),
		(is_between,":giver_troop",castle_mayors_begin,castle_mayors_end),
        (assign, ":quests_begin", mayor_quests_begin),
        (assign, ":quests_end", mayor_quests_end),
      (else_try),
        (assign, ":quests_begin", lady_quests_begin),
        (assign, ":quests_end", lady_quests_end),
      (try_end),
      
	  (assign, ":result", -1),

	  (assign, ":total_prosperty", 0),
	  (assign, ":total_centers", 0),
	  (try_for_range, ":village_no", villages_begin, villages_end),
	    (party_get_slot, ":prosperity", ":village_no", slot_town_prosperity),
		(val_add, ":total_prosperty", ":prosperity"),
		(val_add, ":total_centers", 1),
      (try_end),
	  (store_div, ":average_village_prosperity_plus_5", ":total_prosperty", ":total_centers"),
	  (val_add, ":average_village_prosperity_plus_5", 5),	  
	  
	  (try_for_range, ":unused", 0, 20), #Repeat trial twenty times 
	    (eq, ":result", -1),
	    (assign, ":quest_target_troop", -1),
	    (assign, ":quest_target_center", -1),
	    (assign, ":quest_target_faction", -1),
	    (assign, ":quest_object_faction", -1),
	    (assign, ":quest_object_troop", -1),
	    (assign, ":quest_object_center", -1),
	    (assign, ":quest_target_party", -1),
	    (assign, ":quest_target_party_template", -1),
	    (assign, ":quest_target_amount", -1),
	    (assign, ":quest_target_dna", -1),
	    (assign, ":quest_target_item", -1),
	    (assign, ":quest_importance", 1),
	    (assign, ":quest_xp_reward", 0),
	    (assign, ":quest_gold_reward", 0),
	    (assign, ":quest_convince_value", 0),
	    (assign, ":quest_expiration_days", 0),
	    (assign, ":quest_dont_give_again_period", 0),
		
        (try_begin),
          (eq, ":quests_begin", village_elder_quests_begin),          

		  (store_sub, ":number_of_village_elder_quests", village_elder_quests_end, village_elder_quests_begin),
		  (store_add, ":number_of_village_elder_quests_plus_2", ":number_of_village_elder_quests", 2),
		  (store_random_in_range, ":random_number", 0, ":number_of_village_elder_quests_plus_2"),

		  (try_begin),
		    (le, ":random_number", 1),
		    (assign, ":quests_begin", "qst_oim_hunt_down_thieves"),
		    (store_add, ":quests_begin_plus_2", ":quests_begin", 2),
		    (assign, ":quests_end", ":quests_begin_plus_2"),
          (else_try),
            (assign, ":quests_begin", village_elder_quests_begin),
            (assign, ":quests_end", village_elder_quests_end),
		  (try_end),
        (try_end),

		(store_random_in_range, ":quest_no", ":quests_begin", ":quests_end"), 		

	    (neg|check_quest_active,":quest_no"),

	    (neg|quest_slot_ge, ":quest_no", slot_quest_dont_give_again_remaining_days, 1),

	        (try_begin),
	          # Village Elder quests
	          (eq, ":quest_no", "qst_deliver_grain"),
	          (try_begin),
	            (is_between, ":giver_center_no", villages_begin, villages_end),
	            #The quest giver is the village elder
	            (call_script, "script_get_troop_item_amount", ":giver_troop", "itm_grain"),
	            (eq, reg0, 0),
	            (neg|party_slot_ge, ":giver_center_no", slot_town_prosperity, 40),
	            (assign, ":quest_target_center", ":giver_center_no"),
	            (store_random_in_range, ":quest_target_amount", 4, 8),
	            (assign, ":quest_expiration_days", 30),
	            (assign, ":quest_dont_give_again_period", 20),
	            (assign, ":result", ":quest_no"),
	          (try_end),
	        (else_try),
	          (eq, ":quest_no", "qst_deliver_cattle"),
	          (try_begin),
	            (is_between, ":giver_center_no", villages_begin, villages_end),
	            #The quest giver is the village elder
	            (party_get_slot, ":num_cattle", ":giver_center_no", slot_village_number_of_cattle),
	            (lt, ":num_cattle", 50),
	            (assign, ":quest_target_center", ":giver_center_no"),
	            (store_random_in_range, ":quest_target_amount", 5, 10),
	            (assign, ":quest_expiration_days", 30),
                (assign, ":quest_dont_give_again_period", 40),
	            (assign, ":result", ":quest_no"),
	          (try_end),
	        (else_try),
	          (eq, ":quest_no", "qst_train_peasants_against_bandits"),
	          (try_begin),
	            (is_between, ":giver_center_no", villages_begin, villages_end),
	            #The quest giver is the village elder
	            (store_skill_level, ":player_trainer", "skl_trainer", "trp_player"),
	            (gt, ":player_trainer", 0),
	            (store_random_in_range, ":quest_target_amount", 5, 8),
	            (assign, ":quest_target_center", ":giver_center_no"),
	            (assign, ":quest_expiration_days", 20),
	            (assign, ":quest_dont_give_again_period", 40),
	            (assign, ":result", ":quest_no"),
	          (try_end),
	        (else_try),
	          (eq, ":quest_no", "qst_oim_hunt_down_thieves"),			  			  
	          (try_begin),
	            (is_between, ":giver_center_no", villages_begin, villages_end),
				(eq, "$town_nighttime", 0),
				(party_get_slot, ":prosperity", ":giver_center_no", slot_town_prosperity),
				(assign, reg7, ":prosperity"),
				(assign, reg8, ":average_village_prosperity_plus_5"),
				(ge, ":prosperity", ":average_village_prosperity_plus_5"),
	            #The quest giver is the village elder
	            (assign, ":quest_target_center", ":giver_center_no"),	            
	            (assign, ":quest_expiration_days", 7),
                (assign, ":quest_dont_give_again_period", 40),
	            (assign, ":result", ":quest_no"),
	          (try_end),
	        (else_try),
	          (eq, ":quest_no", "qst_oim_get_feast_supplies"),			  			  
	          (try_begin),
	            (is_between, ":giver_center_no", villages_begin, villages_end),
				(this_or_next|eq, ":giver_center_no", "p_village_5"),
				(this_or_next|eq, ":giver_center_no", "p_village_36"),
				(this_or_next|eq, ":giver_center_no", "p_village_69"),
				(this_or_next|eq, ":giver_center_no", "p_village_87"),
				(this_or_next|eq, ":giver_center_no", "p_village_39"),
				(this_or_next|eq, ":giver_center_no", "p_village_1"),
				(this_or_next|eq, ":giver_center_no", "p_village_33"),
				(this_or_next|eq, ":giver_center_no", "p_village_38"),
				(this_or_next|eq, ":giver_center_no", "p_village_82"),
				(this_or_next|eq, ":giver_center_no", "p_village_81"),
				(this_or_next|eq, ":giver_center_no", "p_village_77"),
				(this_or_next|eq, ":giver_center_no", "p_village_30"),
				(this_or_next|eq, ":giver_center_no", "p_village_29"),
				(this_or_next|eq, ":giver_center_no", "p_village_61"),
				(this_or_next|eq, ":giver_center_no", "p_village_31"),
				(this_or_next|eq, ":giver_center_no", "p_village_51"),
				(this_or_next|eq, ":giver_center_no", "p_village_8"),
				(this_or_next|eq, ":giver_center_no", "p_village_80"),
				(this_or_next|eq, ":giver_center_no", "p_village_35"),
				(this_or_next|eq, ":giver_center_no", "p_village_56"),
				(eq, ":giver_center_no", "p_village_72"),
				
				(store_current_hours, ":num_hours"),
				
				(store_div, ":num_days", ":num_hours", 24),
				(store_add, ":cur_day", ":num_days", 23),
				(assign, ":cur_month", 3),
				(assign, ":cur_year", 1655),
				(assign, ":try_range", 99999),
				(try_for_range, ":unused", 0, ":try_range"),
				  (try_begin),
				    (this_or_next|eq, ":cur_month", 1),
					(this_or_next|eq, ":cur_month", 3),
					(this_or_next|eq, ":cur_month", 5),
					(this_or_next|eq, ":cur_month", 7),
					(this_or_next|eq, ":cur_month", 8),
					(this_or_next|eq, ":cur_month", 10),
					(eq, ":cur_month", 12),
					(assign, ":month_day_limit", 31),
				  (else_try),
				    (this_or_next|eq, ":cur_month", 4),
					(this_or_next|eq, ":cur_month", 6),
					(this_or_next|eq, ":cur_month", 9),
					(eq, ":cur_month", 11),
					(assign, ":month_day_limit", 30),
				  (else_try),
				    (try_begin),
					  (store_div, ":cur_year_div_4", ":cur_year", 4),
					  (val_mul, ":cur_year_div_4", 4),
					  (eq, ":cur_year_div_4", ":cur_year"),
					  (assign, ":month_day_limit", 29),
					(else_try),
					  (assign, ":month_day_limit", 28),
					(try_end),
				  (try_end),
				  (try_begin),
				    (gt, ":cur_day", ":month_day_limit"),
					(val_sub, ":cur_day", ":month_day_limit"),
					(val_add, ":cur_month", 1),
					(try_begin),
					  (gt, ":cur_month", 12),
					  (val_sub, ":cur_month", 12),
					  (val_add, ":cur_year", 1),
					(try_end),
			      (else_try),
				    (assign, ":try_range", 0),
				  (try_end),
				(try_end),

	            (is_between, ":cur_month", 6, 9), #summer months

	            #The quest giver is the village elder
	            (assign, ":quest_target_center", ":giver_center_no"),	            
	            (assign, ":quest_expiration_days", 30),
                (assign, ":quest_dont_give_again_period", 40),
	            (assign, ":result", ":quest_no"),
	          (try_end),
	        (else_try),
	          # Mayor quests
	          (eq, ":quest_no", "qst_escort_merchant_caravan"),
	          (is_between, ":giver_center_no", centers_begin, centers_end),
	          (store_random_party_in_range, ":quest_target_center", towns_begin, towns_end),
	          (store_distance_to_party_from_party, ":dist", ":giver_center_no",":quest_target_center"),
	          (assign, ":quest_gold_reward", ":dist"),
	          (val_add, ":quest_gold_reward", 25),
	          (val_mul, ":quest_gold_reward", 25),
	          (val_div, ":quest_gold_reward", 20),
	          (store_random_in_range, ":quest_target_amount", 6, 12),
	          (assign, "$escort_merchant_caravan_mode", 0),
	          (assign, ":result", ":quest_no"),
	        (else_try),
	          (eq, ":quest_no", "qst_deliver_wine"),
	          (is_between, ":giver_center_no", centers_begin, centers_end),
	          (store_random_party_in_range, ":quest_target_center", towns_begin, towns_end),
	          (store_random_in_range, ":random_no", 0, 2),
	          (try_begin),
	            (eq, ":random_no", 0),
	            (assign, ":quest_target_item", "itm_wine"),
	          (else_try),
	            (assign, ":quest_target_item", "itm_ale"),
	          (try_end),
	          (store_random_in_range, ":quest_target_amount", 6, 12),
	          (store_distance_to_party_from_party, ":dist", ":giver_center_no",":quest_target_center"),
	          (assign, ":quest_gold_reward", ":dist"),
	          (val_add, ":quest_gold_reward", 2),
	          (assign, ":multiplier", 5),
	          (val_add, ":multiplier", ":quest_target_amount"),
	          (val_mul, ":quest_gold_reward", ":multiplier"),
	          (val_div, ":quest_gold_reward", 100),
	          (val_mul, ":quest_gold_reward", 10),
	          (store_item_value,"$qst_deliver_wine_debt",":quest_target_item"),
	          (val_mul,"$qst_deliver_wine_debt",":quest_target_amount"),
	          (val_mul,"$qst_deliver_wine_debt", 6),
	          (val_div,"$qst_deliver_wine_debt", 5),
	          (assign, ":quest_expiration_days", 7),
	          (assign, ":quest_dont_give_again_period", 20),
	          (assign, ":result", ":quest_no"),
	        (else_try),
	          (eq, ":quest_no", "qst_troublesome_bandits"),
		  #(eq, 0, 1), 
			  (is_between, ":giver_center_no", centers_begin, centers_end),
	          (store_character_level, ":quest_gold_reward", "trp_player"),
	          (val_add, ":quest_gold_reward", 20),
	          (val_mul, ":quest_gold_reward", 35),
	          (val_div, ":quest_gold_reward",100),
	          (val_mul, ":quest_gold_reward", 10),
	          (assign, ":quest_expiration_days", 30),
	          (assign, ":quest_dont_give_again_period", 30),
	          (assign, ":result", ":quest_no"),
	        (else_try),
	          (eq, ":quest_no", "qst_kidnapped_girl"),
	          (is_between, ":giver_center_no", centers_begin, centers_end),
	          (store_random_in_range, ":quest_target_center", villages_begin, villages_end),
	          (store_character_level, ":quest_target_amount"),
	          (val_add, ":quest_target_amount", 15),
	          (store_distance_to_party_from_party, ":dist", ":giver_center_no", ":quest_target_center"),
	          (val_add, ":dist", 15),
	          (val_mul, ":dist", 2),
	          (val_mul, ":quest_target_amount", ":dist"),
	          (val_div, ":quest_target_amount",100),
	          (val_mul, ":quest_target_amount",10),
	          (assign, ":quest_gold_reward", ":quest_target_amount"),
	          (val_div, ":quest_gold_reward", 40),
	          (val_mul, ":quest_gold_reward", 10),
	          (assign, ":quest_dont_give_again_period", 30),
	          (assign, ":result", ":quest_no"),
	        (else_try),
	          (eq, ":quest_no", "qst_move_cattle_herd"),
	          (is_between, ":giver_center_no", centers_begin, centers_end),
	          (call_script, "script_cf_select_random_town_at_peace_with_faction", ":giver_faction_no"),
	          (neq, ":giver_center_no", reg0),
	          (assign, ":quest_target_center", reg0),
	          (store_distance_to_party_from_party, ":dist",":giver_center_no",":quest_target_center"),
	          (assign, ":quest_gold_reward", ":dist"),
	          (val_add, ":quest_gold_reward", 25),
	          (val_mul, ":quest_gold_reward", 50),
	          (val_div, ":quest_gold_reward", 20),
	          (assign, ":quest_expiration_days", 20),
	          (assign, ":quest_dont_give_again_period", 20),
	          (assign, ":result", ":quest_no"),
	        (else_try),
	          (eq, ":quest_no", "qst_persuade_lords_to_make_peace"),
	          (is_between, ":giver_center_no", centers_begin, centers_end),
	          (store_faction_of_party, ":cur_object_faction", ":giver_center_no"),
	          (call_script, "script_cf_faction_get_random_enemy_faction", ":cur_object_faction"),
	          (assign, ":cur_target_faction", reg0),
	          (call_script, "script_cf_get_random_lord_except_king_with_faction", ":cur_object_faction"),
	          (assign, ":cur_object_troop", reg0),
	          (call_script, "script_cf_get_random_lord_except_king_with_faction", ":cur_target_faction"),
	          (assign, ":quest_target_troop", reg0),
	          (assign, ":quest_object_troop", ":cur_object_troop"),
	          (assign, ":quest_target_faction", ":cur_target_faction"),
	          (assign, ":quest_object_faction", ":cur_object_faction"),
	          (assign, ":quest_gold_reward", 12000),
	          (assign, ":quest_convince_value", 7000),
	          (assign, ":quest_expiration_days", 30),
	          (assign, ":quest_dont_give_again_period", 100),
	          (assign, ":result", ":quest_no"),
	        (else_try),
	          (eq, ":quest_no", "qst_deal_with_looters"),
	          (is_between, ":player_level", 0, 15),
	          (is_between, ":giver_center_no", centers_begin, centers_end),
	          (store_faction_of_party, ":cur_object_faction", ":giver_center_no"),
	          (store_num_parties_destroyed_by_player, ":num_looters_destroyed", "pt_looters"),
	          (party_template_set_slot,"pt_looters",slot_party_template_num_killed,":num_looters_destroyed"),
	          (quest_set_slot,"$random_merchant_quest_no",slot_quest_current_state,0),
	          (quest_set_slot,"$random_merchant_quest_no",slot_quest_target_party_template,"pt_looters"),
	          (assign, ":quest_gold_reward", 500),
	          (assign, ":quest_xp_reward", 500),
	          (assign, ":quest_expiration_days", 20),
	          (assign, ":quest_dont_give_again_period", 30),
	          (assign, ":result", ":quest_no"),
	        (else_try),
	          (eq, ":quest_no", "qst_deal_with_night_bandits"),
	          (is_between, ":player_level", 0, 15),
	          (is_between, ":giver_center_no", centers_begin, centers_end),
	          (party_slot_ge, ":giver_center_no", slot_center_has_bandits, 1),
	          (assign, ":quest_target_center", ":giver_center_no"),
	          (assign, ":quest_expiration_days", 4),
	          (assign, ":quest_dont_give_again_period", 15),
	          (assign, ":result", ":quest_no"),
	        (else_try),
	          # Lady quests
	          (eq, ":quest_no", "qst_rescue_lord_by_replace"),
	          (try_begin),
	            (ge, "$g_talk_troop_faction_relation", 0),
	            (is_between, ":player_level", 5, 25), 
            (troop_get_slot, ":cur_target_troop", ":giver_troop", slot_troop_father),
	            (try_begin),
              (eq, ":cur_target_troop", 0),
              (troop_get_slot, ":cur_target_troop", ":giver_troop", slot_troop_spouse),
	            (try_end),
            #(troop_slot_eq, ":cur_target_troop", slot_troop_is_prisoner, 1),#Skip if the lady's father/husband is not in prison
            (troop_slot_ge, ":cur_target_troop", slot_troop_prisoner_of_party, 0),
            (call_script, "script_search_troop_prisoner_of_party", ":cur_target_troop"),
	            (assign, ":cur_target_center", reg0),	            
            (is_between, ":cur_target_center", towns_begin, towns_end),#Skip if he is not in a town
	            (assign, ":quest_target_center", ":cur_target_center"),
            (assign, ":quest_target_troop", ":cur_target_troop"),
	            (assign, ":quest_expiration_days", 30),
	            (assign, ":quest_dont_give_again_period", 73),
	            (assign, ":result", ":quest_no"),
	          (try_end),
	        (else_try),
	          (eq, ":quest_no", "qst_deliver_message_to_prisoner_lord"),
	          (try_begin),
	            (ge, "$g_talk_troop_faction_relation", 0),
	            (is_between, ":player_level", 5, 25),
	            (troop_get_slot, ":cur_target_troop", ":giver_troop", slot_troop_father),
	            (try_begin),
	              (eq, ":cur_target_troop", 0),
	              (troop_get_slot, ":cur_target_troop", ":giver_troop", slot_troop_spouse),
	            (try_end),
	            #(troop_slot_eq, ":cur_target_troop", slot_troop_is_prisoner, 1),#Skip if the lady's father/husband is not in prison
	            (troop_slot_ge, ":cur_target_troop", slot_troop_prisoner_of_party, 0),
	            (call_script, "script_search_troop_prisoner_of_party", ":cur_target_troop"),
	            (assign, ":cur_target_center", reg0),
	            (is_between, ":cur_target_center", towns_begin, towns_end),#Skip if he is not in a town
	            (assign, ":quest_target_center", ":cur_target_center"),
	            (assign, ":quest_target_troop", ":cur_target_troop"),
	            (assign, ":quest_expiration_days", 30),
	            (assign, ":quest_dont_give_again_period", 30),
	            (assign, ":result", ":quest_no"),
	          (try_end),
	        (else_try),
	          (eq, ":quest_no", "qst_duel_for_lady"),
	          (try_begin),
	            (ge, "$g_talk_troop_faction_relation", 0),
	            (ge, ":player_level", 10),
	            (call_script, "script_cf_troop_get_random_enemy_troop_with_occupation", ":giver_troop", slto_kingdom_hero),#Can fail
	            (assign, ":cur_target_troop", reg0),
	            (neg|troop_slot_eq, ":giver_troop", slot_troop_spouse, ":cur_target_troop"), #must not be in the family
	            (neg|troop_slot_eq, ":giver_troop", slot_troop_father, ":cur_target_troop"),	            
            #(troop_slot_eq, ":cur_target_troop", slot_troop_is_prisoner, 0),
	            (neg|troop_slot_ge, ":cur_target_troop", slot_troop_prisoner_of_party, 0),
	            (troop_slot_ge, ":cur_target_troop", slot_troop_leaded_party, 0),
	            (neg|troop_slot_eq, ":cur_target_troop", slot_lord_reputation_type, lrep_goodnatured),
	            (neg|troop_slot_eq, ":cur_target_troop", slot_lord_reputation_type, lrep_upstanding),
	            (assign, ":quest_target_troop", ":cur_target_troop"),
	            (assign, ":quest_expiration_days", 30),
	            (assign, ":quest_dont_give_again_period", 50),
	            (assign, ":result", ":quest_no"),
	          (try_end),
	          # Enemy Lord Quests
	        (else_try),
	          (eq, ":quest_no", "qst_lend_surgeon"),
	          (try_begin),
	            (eq, "$g_defending_against_siege", 0),#Skip if the center is under siege (because of resting)
	            (neq, ":giver_reputation", lrep_quarrelsome),
	            (neq, ":giver_reputation", lrep_debauched),
	            (assign, ":max_surgery_level", 0),
	            (assign, ":best_surgeon", -1),
	            (party_get_num_companion_stacks, ":num_stacks","p_main_party"),
	            (try_for_range, ":i_stack", 1, ":num_stacks"),
	              (party_stack_get_troop_id, ":stack_troop","p_main_party",":i_stack"),
	              (troop_is_hero, ":stack_troop"),
	              (store_skill_level, ":cur_surgery_skill", skl_surgery, ":stack_troop"),
	              (gt, ":cur_surgery_skill", ":max_surgery_level"),
	              (assign, ":max_surgery_level", ":cur_surgery_skill"),
	              (assign, ":best_surgeon", ":stack_troop"),
	            (try_end),
	            
	            (store_character_level, ":cur_level", "trp_player"),
	            (assign, ":required_skill", 5),
	            (val_div, ":cur_level", 10),
	            (val_add, ":required_skill", ":cur_level"),
	            (ge, ":max_surgery_level", ":required_skill"), #Skip if party skill level is less than the required value
	            
	            (assign, ":quest_object_troop", ":best_surgeon"),
	            (assign, ":quest_importance", 1),
	            (assign, ":quest_xp_reward", 10),
	            (assign, ":quest_gold_reward", 10),
	            (assign, ":quest_dont_give_again_period", 50),
	            (assign, ":result", ":quest_no"),
	          (try_end),
	          # Lord Quests
	        (else_try),
	          (eq, ":quest_no", "qst_meet_spy_in_enemy_town"),
	          (try_begin),
	            (eq, "$players_kingdom", ":giver_faction_no"),
	            (neq, ":giver_reputation", lrep_goodnatured),
	            (call_script, "script_troop_get_player_relation", ":giver_troop"),
	            (assign, ":giver_relation", reg0),
	            (gt, ":giver_relation", 3),
	            (call_script, "script_cf_faction_get_random_enemy_faction", ":giver_faction_no"),
	            (assign, ":enemy_faction", reg0),
	            (store_relation, ":reln", ":enemy_faction", "fac_player_supporters_faction"),
	            (lt, ":reln", 0),
	            (call_script, "script_cf_select_random_town_with_faction", ":enemy_faction"),
	            (assign, ":cur_target_center", reg0),
	            #Just to make sure that there is a free walker
	            (call_script, "script_cf_center_get_free_walker", ":cur_target_center"),
	            (assign, ":quest_target_center", ":cur_target_center"),
	            (store_random_in_range, ":quest_target_amount", secret_signs_begin, secret_signs_end),
	            (assign, ":result", ":quest_no"),
	            (assign, ":quest_gold_reward", 500),
	            (assign, ":quest_expiration_days", 30),
	            (assign, ":quest_dont_give_again_period", 50),
	            (quest_set_slot, "qst_meet_spy_in_enemy_town", slot_quest_gold_reward, 500),
	          (try_end),
	        (else_try),
	          (eq, ":quest_no", "qst_raid_caravan_to_start_war"),
	          (try_begin),
	            (eq, "$players_kingdom", ":giver_faction_no"),
	            (this_or_next|eq, ":giver_reputation", lrep_cunning),
	            (this_or_next|eq, ":giver_reputation", lrep_quarrelsome),
	            (             eq, ":giver_reputation", lrep_debauched),
	            (gt, ":player_level", 10),
	            (neg|faction_slot_eq, ":giver_faction_no", slot_faction_leader, ":giver_troop"),#Can not take the quest from the king
	            (call_script, "script_cf_faction_get_random_friendly_faction", ":giver_faction_no"),#Can fail
	            (assign, ":quest_target_faction", reg0),
	            (store_troop_faction, ":quest_object_faction", ":giver_troop"),
	            (assign, ":quest_target_party_template", "pt_kingdom_caravan_party"),
	            (assign, ":quest_target_amount", 2),
	            (assign, ":result", ":quest_no"),
	            (assign, ":quest_expiration_days", 30),
	            (assign, ":quest_dont_give_again_period", 100),
	          (try_end),
	        (else_try),
	          (eq, ":quest_no", "qst_deliver_message"),
	          (try_begin),
	            (ge, "$g_talk_troop_faction_relation", 0),
	            (lt, ":player_level", 20),
	            (call_script, "script_cf_get_random_lord_in_a_center_with_faction", ":giver_faction_no"),#Can fail
	            (assign, ":cur_target_troop", reg0),
	            (neq, ":cur_target_troop", ":giver_troop"),#Skip himself
	            (call_script, "script_get_troop_attached_party", ":cur_target_troop"),
	            (assign, ":cur_target_center", reg0),#cur_target_center will definitely be a valid center
	            (neq,":giver_center_no", ":cur_target_center"),#Skip current center

	            (assign, ":quest_target_center", ":cur_target_center"),
	            (assign, ":quest_target_troop", ":cur_target_troop"),
	            (assign, ":quest_xp_reward", 30),
	            (assign, ":quest_gold_reward", 40),
	            (assign, ":result", ":quest_no"),
	      
	            (assign, ":quest_expiration_days", 30),
	          (try_end),
	        (else_try),
	          (eq, ":quest_no", "qst_escort_lady"),
	          (try_begin),
	            (ge, "$g_talk_troop_faction_relation", 0),
	            (ge, ":player_level", 10),
            (troop_get_slot, ":cur_object_troop", ":giver_troop", slot_troop_daughter),
	            (store_random_in_range, ":random_no", 0, 2),
	            (try_begin),
	              (this_or_next|eq,  ":cur_object_troop", 0),
	              (eq, ":random_no", 0),
	              (troop_get_slot, ":cur_object_troop_2", ":giver_troop", slot_troop_spouse),
	              (gt, ":cur_object_troop_2", 0),
	              (assign, ":cur_object_troop", ":cur_object_troop_2"),
	            (try_end),
	            (gt, ":cur_object_troop", 0),#Skip lords without a lady
	            (troop_get_type, ":cur_troop_gender", ":cur_object_troop"),
	            (eq, ":cur_troop_gender", 1),#Skip if it is not female
	            (gt, ":giver_center_no", 0),#Skip if lord is outside the center
	            (troop_slot_eq, ":cur_object_troop", slot_troop_cur_center, ":giver_center_no"),#Skip if the lady is not at the same center
	            (call_script, "script_cf_select_random_town_with_faction", ":giver_faction_no"),#Can fail
	            (assign, ":cur_target_center", reg0),
	            (neq, ":cur_target_center", ":giver_center_no"),
	            (hero_can_join),#Skip if player has no available slots

	            (assign, ":quest_object_troop", ":cur_object_troop"),
	            (assign, ":quest_target_center", ":cur_target_center"),
	            (assign, ":quest_expiration_days", 20),
	            (assign, ":quest_dont_give_again_period", 30),
	            (assign, ":result", ":quest_no"),
	          (try_end),
##        (else_try),
##          (eq, ":quest_no", "qst_hunt_down_raiders"),
##          (try_begin),
##            (gt, ":player_level", 10),
##            (faction_slot_eq, ":giver_faction_no", slot_faction_leader, ":giver_troop"),
##            (call_script, "script_cf_select_random_town_with_faction", ":giver_faction_no"),#Can fail
##            (assign, ":cur_object_center", reg0),
##            (neq, ":cur_object_center", ":giver_center_no"),#Skip current center
##            (call_script, "script_get_random_enemy_center", ":giver_party_no"),
##            (assign, ":cur_target_center", reg0),
##            (ge, ":cur_target_center", 0),
##            (store_faction_of_party, ":cur_target_faction", ":cur_target_center"),
##            (is_between,  ":cur_target_faction", kingdoms_begin, kingdoms_end),
##
##            (assign, ":quest_object_center", ":cur_object_center"),
##            (assign, ":quest_target_center", ":cur_target_center"),
##            (assign, ":quest_importance", 1),
##            (assign, ":quest_xp_reward", 1500),
##            (assign, ":quest_gold_reward", 1000),
##            (assign, ":result", ":quest_no"),
##          (try_end),
##        (else_try),
##          (eq, ":quest_no", "qst_bring_back_deserters"),
##          (try_begin),
##            (gt, ":player_level", 5),
##            (faction_get_slot, ":cur_target_party_template", ":giver_faction_no", slot_faction_deserter_party_template),
##            (faction_get_slot, ":cur_target_troop", ":giver_faction_no", slot_faction_deserter_troop),
##            (gt, ":cur_target_party_template", 0),#Skip factions with no deserter party templates
##            (store_num_parties_of_template, ":num_deserters", ":cur_target_party_template"),
##            (ge, ":num_deserters", 2),#Skip if there are less than 2 active deserter parties
##
##            (assign, ":quest_target_troop", ":cur_target_troop"),
##            (assign, ":quest_target_party_template", ":cur_target_party_template"),
##            (assign, ":quest_target_amount", 5),
##            (assign, ":quest_importance", 1),
##            (assign, ":quest_xp_reward", 500),
##            (assign, ":quest_gold_reward", 300),
##            (assign, ":result", ":quest_no"),
##          (try_end),
##        (else_try),
##          (eq, ":quest_no", "qst_deliver_supply_to_center_under_siege"),
##          (try_begin),
##            (gt, ":player_level", 10),
##            (gt, ":giver_center_no", 0),#Skip if lord is outside the center
##            (call_script, "script_cf_get_random_siege_location_with_faction", ":giver_faction_no"),#Can fail
##            (assign, ":quest_target_center", reg0),
##            (assign, ":quest_target_amount", 10),
##            (assign, ":quest_importance", 1),
##            (assign, ":quest_xp_reward", 500),
##            (assign, ":quest_gold_reward", 300),
##            (assign, ":result", ":quest_no"),
##          (try_end),
##        (else_try),
##          (eq, ":quest_no", "qst_rescue_lady_under_siege"),
##          (try_begin),
##            (gt, ":player_level", 15),
##            (troop_get_slot, ":cur_object_troop", ":giver_troop", slot_troop_daughter),
##            (store_random_in_range, ":random_no", 0, 2),
##            (try_begin),
##              (this_or_next|eq,  ":cur_object_troop", 0),
##              (eq, ":random_no", 0),
##              (troop_get_slot, ":cur_object_troop_2", ":giver_troop", slot_troop_spouse),
##              (gt, ":cur_object_troop_2", 0),
##              (assign, ":cur_object_troop", ":cur_object_troop_2"),
##            (try_end),
##            (gt, ":cur_object_troop", 0),#Skip lords without a lady
##            (troop_get_type, ":cur_troop_gender", ":cur_object_troop"),
##            (eq, ":cur_troop_gender", 1),#Skip if lady is not female
##            (troop_get_slot, ":cur_target_center", ":cur_object_troop", slot_troop_cur_center),
##            (is_between, ":cur_target_center", centers_begin, centers_end),#Skip if she is not in a center
##            (neq,":giver_center_no", ":cur_target_center"),#Skip current center
##            (call_script, "script_cf_get_random_siege_location_with_faction", ":giver_faction_no"),#Can fail
##            (assign, ":cur_target_center", reg0),
##            (troop_set_slot, ":cur_object_troop", slot_troop_cur_center, ":cur_target_center"),#Move lady to the siege location
##            (assign, ":quest_object_troop", ":cur_object_troop"),
##            (assign, ":quest_target_center", ":cur_target_center"),
##            (assign, ":quest_target_troop", ":giver_troop"),
##            (assign, ":quest_importance", 1),
##            (assign, ":quest_xp_reward", 200),
##            (assign, ":quest_gold_reward", 750),
##            (assign, ":result", ":quest_no"),
##          (try_end),
##        (else_try),
##          (eq, ":quest_no", "qst_deliver_message_to_lover"),
##          (try_begin),
##            (is_between, ":player_level", 5, 30),
##            (troop_get_slot, ":cur_target_troop", ":giver_troop", slot_troop_lover),
##            (gt, ":cur_target_troop", 0),#Skip lords without a lover
##            (troop_get_slot, ":cur_target_center", ":cur_target_troop", slot_troop_cur_center),
##            (is_between, ":cur_target_center", centers_begin, centers_end),#Skip if she is not in a center
##            (neq,":giver_center_no", ":cur_target_center"),#Skip current center
##            (assign, ":quest_target_troop", ":cur_target_troop"),
##            (assign, ":quest_target_center", ":cur_target_center"),
##            (assign, ":result", ":quest_no"),
##          (try_end),
##        (else_try),
##          (eq, ":quest_no", "qst_bring_reinforcements_to_siege"),
##          (try_begin),
##            (gt, ":player_level", 10),
##            (call_script, "script_cf_get_random_siege_location_with_attacker_faction", ":giver_faction_no"),#Can fail
##            (assign, ":cur_target_center", reg0),
##            (store_random_in_range, ":random_no", 5, 11),
##            (troops_can_join, ":random_no"),#Skip if the player doesn't have enough room
##            (call_script, "script_cf_get_number_of_random_troops_from_party", ":giver_party_no", ":random_no"),#Can fail
##            (assign, ":cur_object_troop", reg0),
##            (party_get_battle_opponent, ":cur_target_party", ":cur_target_center"),
##            (party_get_num_companion_stacks, ":num_stacks", ":cur_target_party"),
##            (gt, ":num_stacks", 0),#Skip if the besieger party has no troops
##            (party_stack_get_troop_id, ":cur_target_troop", ":cur_target_party", 0),
##            (troop_is_hero, ":cur_target_troop"),#Skip if the besieger party has no heroes
##            (neq, ":cur_target_troop", ":giver_troop"),#Skip if the quest giver is the same troop
##            (assign, ":quest_target_troop", ":cur_target_troop"),
##            (assign, ":quest_object_troop", ":cur_object_troop"),
##            (assign, ":quest_target_party", ":cur_target_party"),
##            (assign, ":quest_target_center", ":cur_target_center"),
##            (assign, ":quest_target_amount", ":random_no"),
##            (assign, ":quest_importance", 1),
##            (assign, ":quest_xp_reward", 400),
##            (assign, ":quest_gold_reward", 200),
##            (assign, ":result", ":quest_no"),
##          (try_end),
	        (else_try),
	          (eq, ":quest_no", "qst_deliver_message_to_enemy_lord"),
	          (try_begin),
	            (ge, "$g_talk_troop_faction_relation", 0),
	            (is_between, ":player_level", 5,25),
	            (call_script, "script_cf_get_random_lord_from_another_faction_in_a_center", ":giver_faction_no"),#Can fail
	            (assign, ":cur_target_troop", reg0),
	            (call_script, "script_get_troop_attached_party", ":cur_target_troop"),
	            (assign, ":quest_target_center", reg0),#quest_target_center will definitely be a valid center
	            (assign, ":quest_target_troop", ":cur_target_troop"),
	            (assign, ":quest_importance", 1),
	            (assign, ":quest_xp_reward", 200),
	            (assign, ":quest_gold_reward", 0),
	            (assign, ":result", ":quest_no"),
	            (assign, ":quest_expiration_days", 40),
	          (try_end),
##        (else_try),
##          (eq, ":quest_no", "qst_bring_prisoners_to_enemy"),
##          (try_begin),
##            (gt, ":player_level", 10),
##            (is_between, ":giver_center_no", centers_begin, centers_end),#Skip if the quest giver is not at a center
##            (store_random_in_range, ":random_no", 5, 11),
##            (troops_can_join_as_prisoner, ":random_no"),#Skip if the player doesn't have enough room
##            (call_script, "script_get_random_enemy_town", ":giver_center_no"),
##            (assign, ":cur_target_center", reg0),
##            (ge, ":cur_target_center", 0),#Skip if there are no enemy towns
##            (store_faction_of_party, ":cur_target_faction", ":cur_target_center"),
##            (faction_get_slot, ":cur_object_troop", ":cur_target_faction", slot_faction_tier_5_troop),
##            (assign, ":quest_target_center", ":cur_target_center"),
##            (assign, ":quest_object_troop", ":cur_object_troop"),
##            (assign, ":quest_target_amount", ":random_no"),
##            (assign, ":quest_importance", 1),
##            (assign, ":quest_xp_reward", 300),
##            (assign, ":quest_gold_reward", 200),
##            (assign, ":result", ":quest_no"),
##          (try_end),
	        (else_try),
	          (eq, ":quest_no", "qst_deal_with_bandits_at_lords_village"),
	          (try_begin),
	            (neq, ":giver_reputation", lrep_debauched), 
	            (neq, ":giver_reputation", lrep_quarrelsome), 
	            (ge, "$g_talk_troop_faction_relation", 0),
	            (assign, ":end_cond", villages_end),
	            (assign, ":cur_target_center", -1),
	            (try_for_range, ":cur_village", villages_begin, ":end_cond"),
	              (party_slot_eq, ":cur_village", slot_town_lord, ":giver_troop"),
	              (party_slot_eq, ":cur_village", slot_village_infested_by_bandits, 1),
	              (assign, ":cur_target_center", ":cur_village"),
	              (assign, ":end_cond", 0),
	            (try_end),
	            (ge, ":cur_target_center", 0),
	            (neg|check_quest_active, "qst_eliminate_bandits_infesting_village"),
	            (assign, ":quest_target_center", ":cur_target_center"),
	            (assign, ":result", ":quest_no"),
	            (assign, ":quest_expiration_days", 30),
	          (try_end),
	        (else_try),
	          (eq, ":quest_no", "qst_raise_troops"),
	          (try_begin),
			    (eq, 0, 1),
	            (neq, ":giver_reputation", lrep_martial),
	            (neq, ":giver_faction_no", "fac_player_supporters_faction"), #we need tier_1_troop a valid value
	            (ge, "$g_talk_troop_faction_relation", 0),
	            (store_character_level, ":cur_level", "trp_player"),
	            (gt, ":cur_level", 5),
	            (troop_slot_ge, "trp_player", slot_troop_renown, 100),
	             
	            (store_random_in_range, ":quest_target_amount", 5, 8),
	            (party_get_free_companions_capacity, ":free_capacity", "p_main_party"),
	            (le, ":quest_target_amount", ":free_capacity"),
	            (faction_get_slot, ":quest_object_troop", ":giver_faction_no", slot_faction_tier_1_troop),
	            (store_random_in_range, ":level_up", 20, 40),
	            (val_add, ":level_up", ":cur_level"),
	            (val_div, ":level_up", 10),

	            (store_mul, ":quest_gold_reward", ":quest_target_amount", 10),

	            (assign, ":quest_target_troop", ":quest_object_troop"),
	            (try_for_range, ":unused", 0, ":level_up"),
	              (troop_get_upgrade_troop, ":level_up_troop", ":quest_target_troop", 0),
	              (gt, ":level_up_troop", 0),
	              (assign, ":quest_target_troop", ":level_up_troop"),
	              (val_mul, ":quest_gold_reward", ":quest_gold_reward", 7),
	              (val_div, ":quest_gold_reward", ":quest_gold_reward", 4),
	            (try_end),
	      
##            (try_begin),
##              (ge, ":cur_level", 15),
##              (faction_get_slot, ":cur_target_troop", ":giver_faction_no", slot_faction_tier_5_troop),
##              (assign, ":quest_gold_reward", 300),
##            (else_try),
##              (faction_get_slot, ":cur_target_troop", ":giver_faction_no", slot_faction_tier_4_troop),
##              (assign, ":quest_gold_reward", 150),
##            (try_end),
##            (gt, ":cur_target_troop", 0),
	            (assign, ":quest_xp_reward", ":quest_gold_reward"),
	            (val_mul, ":quest_xp_reward", 3),
	            (val_div, ":quest_xp_reward", 10),
	            (assign, ":result", ":quest_no"),
	            (assign, ":quest_expiration_days", 120),
	            (assign, ":quest_dont_give_again_period", 15),
	          (try_end),
	        (else_try),
	          (eq, ":quest_no", "qst_collect_taxes"),
	          (try_begin),
	            (neq, ":giver_reputation", lrep_goodnatured),
	            (neq, ":giver_reputation", lrep_upstanding),
	            (ge, "$g_talk_troop_faction_relation", 0),
	            (call_script, "script_cf_troop_get_random_leaded_town_or_village_except_center", ":giver_troop", ":giver_center_no"),
	            (assign, ":quest_target_center", reg0),
	            (assign, ":quest_importance", 1),
	            (assign, ":quest_gold_reward", 0),
	            (assign, ":quest_xp_reward", 100),
	            (assign, ":result", ":quest_no"),
	            (assign, ":quest_expiration_days", 50),
	            (assign, ":quest_dont_give_again_period", 20),
	          (try_end),
	        (else_try),
	          (eq, ":quest_no", "qst_hunt_down_fugitive"),
	          (try_begin),
	            (ge, "$g_talk_troop_faction_relation", 0),
	            (call_script, "script_cf_select_random_village_with_faction", ":giver_faction_no"),
	            (assign, ":quest_target_center", reg0),
	            (store_random_in_range, ":quest_target_dna", 0, 1000000),
	            (assign, ":result", ":quest_no"),
	            (assign, ":quest_expiration_days", 30),
	            (assign, ":quest_dont_give_again_period", 30),
	          (try_end),
##        (else_try),
##          (eq, ":quest_no", "qst_capture_messenger"),
##          (try_begin),
##            (call_script, "script_cf_faction_get_random_enemy_faction", ":giver_faction_no"),
##            (assign, ":cur_target_faction", reg0),
##            (faction_get_slot, ":cur_target_troop", ":cur_target_faction", slot_faction_messenger_troop),
##            (gt, ":cur_target_troop", 0),#Checking the validiy of cur_target_troop
##            (store_num_parties_destroyed_by_player, ":quest_target_amount", "pt_messenger_party"),
##
##            (assign, ":quest_target_troop", ":cur_target_troop"),
##            (assign, ":quest_target_party_template", ":cur_target_party_template"),
##            (assign, ":quest_importance", 1),
##            (assign, ":quest_xp_reward", 700),
##            (assign, ":quest_gold_reward", 400),
##            (assign, ":result", ":quest_no"),
##          (try_end),
	        (else_try),
	          (eq, ":quest_no", "qst_kill_local_merchant"),
	          (try_begin),
	            (this_or_next|eq, ":giver_reputation", lrep_quarrelsome),
	            (this_or_next|eq, ":giver_reputation", lrep_cunning),
	            (             eq, ":giver_reputation", lrep_debauched),
	            (neg|faction_slot_eq, ":giver_faction_no", slot_faction_leader, ":giver_troop"),#Can not take the quest from the king
	            (ge, "$g_talk_troop_faction_relation", 0),
	            (gt, ":player_level", 5),
	            (is_between, ":giver_center_no", towns_begin, towns_end),
	            (assign, ":quest_importance", 1),
	            (assign, ":quest_xp_reward", 300),
	            (assign, ":quest_gold_reward", 1000),
	            (assign, ":result", ":quest_no"),
	            (assign, ":quest_expiration_days", 10),
	            (assign, ":quest_dont_give_again_period", 30),
	          (try_end),
	        (else_try),
	          (eq, ":quest_no", "qst_bring_back_runaway_serfs"),
	          (try_begin),
	            (neq, ":giver_reputation", lrep_goodnatured),
	            (neq, ":giver_reputation", lrep_upstanding),
	            (ge, "$g_talk_troop_faction_relation", 0),
	            (ge, ":player_level", 5),
	            (gt, ":giver_center_no", 0),#Skip if lord is outside the center
	            (eq, "$g_defending_against_siege", 0),#Skip if the center is under siege (because of resting)
	      
	            (assign, ":cur_object_center", -1),
	            (try_for_range, ":cur_village", villages_begin, villages_end),
	              (party_slot_eq, ":cur_village", slot_town_lord, ":giver_troop"),
	              (store_distance_to_party_from_party, ":dist", ":cur_village", ":giver_center_no"),
	              (lt, ":dist", 25),
	              (assign, ":cur_object_center", ":cur_village"),
	            (try_end),
	            (ge, ":cur_object_center", 0),#Skip if the quest giver is not the owner of any villages around the center
	            (call_script, "script_cf_select_random_town_with_faction", ":giver_faction_no"),
	            (assign, ":cur_target_center", reg0),
	            (neq, ":cur_target_center", ":giver_center_no"),#Skip current center
	            (store_distance_to_party_from_party, ":dist", ":cur_target_center", ":giver_center_no"),
	            (ge, ":dist", 20),
	            (assign, ":quest_target_party_template", "pt_runaway_serfs"),
	            (assign, ":quest_object_center", ":cur_object_center"),
	            (assign, ":quest_target_center", ":cur_target_center"),
	            (assign, ":quest_importance", 1),
	            (assign, ":quest_xp_reward", 200),
	            (assign, ":quest_gold_reward", 150),
	            (assign, ":result", ":quest_no"),
	            (assign, ":quest_expiration_days", 30),
	            (assign, ":quest_dont_give_again_period", 20),
	            (assign, "$qst_bring_back_runaway_serfs_num_parties_returned", 0),
	            (assign, "$qst_bring_back_runaway_serfs_num_parties_fleed", 0),
	          (try_end),
	        (else_try),
	          (eq, ":quest_no", "qst_follow_spy"),
	          (try_begin),
	            (ge, "$g_talk_troop_faction_relation", 0),
	            (neq, ":giver_reputation", lrep_goodnatured),
	            (party_get_skill_level, ":tracking_skill", "p_main_party", "skl_tracking"),
	            (ge, ":tracking_skill", 2),
	            (ge, ":player_level", 10),
	            (eq, "$g_defending_against_siege", 0), #Skip if the center is under siege (because of resting)
	            (gt, ":giver_party_no", 0), #Skip if the quest giver doesn't have a party
	            (gt, ":giver_center_no", 0), #skip if the quest giver is not in a center
	            (party_slot_eq, "$g_encountered_party", slot_party_type, spt_town), #skip if we are not in a town.
	            (party_get_position, pos2, "p_main_party"),
	            (assign, ":min_distance", 99999),
	            (try_for_range, ":unused_2", 0, 10),
	              (call_script, "script_cf_get_random_enemy_center", ":giver_party_no"),
	              (assign, ":random_object_center", reg0),
	              (party_get_position, pos3, ":random_object_center"),
	              (map_get_random_position_around_position, pos4, pos3, 6),
	              (get_distance_between_positions, ":cur_distance", pos2, pos4),
	              (lt, ":cur_distance", ":min_distance"),
	              (assign, ":min_distance", ":cur_distance"),
	              (assign, ":cur_object_center", ":random_object_center"),
	              (copy_position, pos63, pos4), #Do not change pos63 until quest is accepted
	            (try_end),
	            (gt, ":cur_object_center", 0), #Skip if there are no enemy centers

	            (assign, ":quest_object_center", ":cur_object_center"),
	            (assign, ":quest_dont_give_again_period", 50),
	            (assign, ":result", ":quest_no"),
	            (assign, "$qst_follow_spy_run_away", 0),
	            (assign, "$qst_follow_spy_meeting_state", 0),
	            (assign, "$qst_follow_spy_meeting_counter", 0),
	            (assign, "$qst_follow_spy_spy_back_in_town", 0),
	            (assign, "$qst_follow_spy_partner_back_in_town", 0),
	            (assign, "$qst_follow_spy_no_active_parties", 0),
	          (try_end),
	        (else_try),
	          (eq, ":quest_no", "qst_capture_enemy_hero"),
	          (try_begin),
	            (eq, "$players_kingdom", ":giver_faction_no"),
	            (neg|faction_slot_eq, "$players_kingdom", slot_faction_marshall, "trp_player"),
	            (ge, ":player_level", 15),
	            (call_script, "script_cf_faction_get_random_enemy_faction", ":giver_faction_no"),#Can fail
	            (assign, ":quest_target_faction", reg0),
	            (assign, ":quest_expiration_days", 30),
	            (assign, ":quest_dont_give_again_period", 80),
	            (assign, ":quest_gold_reward", 2000),
	            (assign, ":result", ":quest_no"),
	          (try_end),
	        (else_try),
	          (eq, ":quest_no", "qst_lend_companion"),
	          (try_begin),
	            (ge, "$g_talk_troop_faction_relation", 0),
	            (assign, ":total_heroes", 0),
	            (party_get_num_companion_stacks, ":num_stacks", "p_main_party"),
	            (try_for_range, ":i_stack", 0, ":num_stacks"),
	              (party_stack_get_troop_id, ":stack_troop","p_main_party",":i_stack"),
	              (troop_is_hero, ":stack_troop"),
	              (is_between, ":stack_troop", companions_begin, companions_end),
	              (store_character_level, ":stack_level", ":stack_troop"),
	              (ge, ":stack_level", 15),
	              (assign, ":is_quest_hero", 0),
	              (try_for_range, ":i_quest", 0, all_quests_end),
	                (check_quest_active, ":i_quest"),
	                (this_or_next|quest_slot_eq, ":i_quest", slot_quest_target_troop, ":stack_troop"),
	                (quest_slot_eq, ":i_quest", slot_quest_object_troop, ":stack_troop"),
	                (assign, ":is_quest_hero", 1),
	              (try_end),
	              (eq, ":is_quest_hero", 0),
	              (val_add, ":total_heroes", 1),
	            (try_end),
	            (gt, ":total_heroes", 0),#Skip if party has no eligible heroes
	            (store_random_in_range, ":random_hero", 0, ":total_heroes"),
	            (assign, ":total_heroes", 0),
	            (assign, ":cur_target_troop", -1),
	            (try_for_range, ":i_stack", 0, ":num_stacks"),
	              (eq, ":cur_target_troop", -1),
	              (party_stack_get_troop_id, ":stack_troop","p_main_party",":i_stack"),
	              (troop_is_hero, ":stack_troop"),
	              (neq, ":stack_troop", "trp_player"),
	              (store_character_level, ":stack_level", ":stack_troop"),
	              (ge, ":stack_level", 15),
	              (assign, ":is_quest_hero", 0),
	              (try_for_range, ":i_quest", 0, all_quests_end),
	                (check_quest_active, ":i_quest"),
	                (this_or_next|quest_slot_eq, ":i_quest", slot_quest_target_troop, ":stack_troop"),
	                (quest_slot_eq, ":i_quest", slot_quest_object_troop, ":stack_troop"),
	                (assign, ":is_quest_hero", 1),
	              (try_end),
	              (eq, ":is_quest_hero", 0),
	              (val_add, ":total_heroes", 1),
	              (gt, ":total_heroes", ":random_hero"),
	              (assign, ":cur_target_troop", ":stack_troop"),
	            (try_end),
	            (assign, ":quest_target_troop", ":cur_target_troop"),
	            (store_current_day, ":quest_target_amount"),
	            (val_add, ":quest_target_amount", 8),

	            (assign, ":quest_importance", 1),
	            (assign, ":quest_xp_reward", 300),
	            (assign, ":quest_gold_reward", 400),
	            (assign, ":result", ":quest_no"),
	            (assign, ":quest_dont_give_again_period", 30),
	          (try_end),
	        (else_try),
	          (eq, ":quest_no", "qst_collect_debt"),
	          (try_begin),
	            (ge, "$g_talk_troop_faction_relation", 0),
	          # Find a vassal (within the same kingdom?) 
	            (call_script, "script_cf_get_random_lord_in_a_center_with_faction", ":giver_faction_no"),#Can fail
	            (assign, ":quest_target_troop", reg0),
	            (neq, ":quest_target_troop", ":giver_troop"),#Skip himself
	            (call_script, "script_get_troop_attached_party", ":quest_target_troop"),
	            (assign, ":quest_target_center", reg0),#cur_target_center will definitely be a valid center
	            (neq,":giver_center_no", ":quest_target_center"),#Skip current center

	            (assign, ":quest_xp_reward", 30),
	            (assign, ":quest_gold_reward", 40),
	            (assign, ":result", ":quest_no"),
	            (store_random_in_range, ":quest_target_amount", 6, 9),
	            (val_mul, ":quest_target_amount", 500),
	            (store_div, ":quest_convince_value", ":quest_target_amount", 5),
	            (assign, ":quest_expiration_days", 90),
	            (assign, ":quest_dont_give_again_period", 20),
	          (try_end),
##        (else_try),
##          (eq, ":quest_no", "qst_capture_conspirators"),
##          (try_begin),
##            (eq, 1,0), #TODO: disable this for now
##            (ge, ":player_level", 10),
##            (is_between, ":giver_center_no", towns_begin, towns_end),#Skip if quest giver's center is not a town
##            (party_slot_eq, ":giver_center_no", slot_town_lord, ":giver_troop"),#Skip if the current center is not ruled by the quest giver
##            (call_script, "script_cf_get_random_kingdom_hero", ":giver_faction_no"),#Can fail
##
##            (assign, ":quest_target_troop", reg0),
##            (assign, ":quest_target_center", ":giver_center_no"),
##            (assign, ":quest_importance", 1),
##            (assign, ":quest_xp_reward", 10),
##            (assign, ":quest_gold_reward", 10),
##            (assign, ":result", ":quest_no"),
##            (store_character_level, ":cur_level"),
##            (val_div, ":cur_level", 5),
##            (val_max, ":cur_level", 3),
##            (store_add, ":max_parties", 4, ":cur_level"),
##            (store_random_in_range, "$qst_capture_conspirators_num_parties_to_spawn", 4, ":max_parties"),
##            (assign, "$qst_capture_conspirators_num_troops_to_capture", 0),
##            (assign, "$qst_capture_conspirators_num_parties_spawned", 0),
##            (assign, "$qst_capture_conspirators_leave_meeting_counter", 0),
##            (assign, "$qst_capture_conspirators_party_1", 0),
##            (assign, "$qst_capture_conspirators_party_2", 0),
##            (assign, "$qst_capture_conspirators_party_3", 0),
##            (assign, "$qst_capture_conspirators_party_4", 0),
##            (assign, "$qst_capture_conspirators_party_5", 0),
##            (assign, "$qst_capture_conspirators_party_6", 0),
##            (assign, "$qst_capture_conspirators_party_7", 0),
##          (try_end),
##        (else_try),
##          (eq, ":quest_no", "qst_defend_nobles_against_peasants"),
##          (try_begin),
##            (eq, 1,0), #TODO: disable this for now
##            (ge, ":player_level", 10),
##            (is_between, ":giver_center_no", towns_begin, towns_end),#Skip if quest giver's center is not a town
##            (party_slot_eq, ":giver_center_no", slot_town_lord, ":giver_troop"),#Skip if the current center is not ruled by the quest giver
##
##            (assign, ":quest_target_center", ":giver_center_no"),
##            (assign, ":quest_importance", 1),
##            (assign, ":quest_xp_reward", 10),
##            (assign, ":quest_gold_reward", 10),
##            (assign, ":result", ":quest_no"),
##            (store_character_level, ":cur_level"),
##            (val_div, ":cur_level", 5),
##            (val_max, ":cur_level", 4),
##            (store_add, ":max_parties", 4, ":cur_level"),
##            (store_random_in_range, "$qst_defend_nobles_against_peasants_num_peasant_parties_to_spawn", 4, ":cur_level"),
##            (store_random_in_range, "$qst_defend_nobles_against_peasants_num_noble_parties_to_spawn", 4, ":cur_level"),
##            (assign, "$qst_defend_nobles_against_peasants_num_nobles_to_save", 0),
##            (assign, "$qst_defend_nobles_against_peasants_num_nobles_saved", 0),
##            (assign, "$qst_defend_nobles_against_peasants_peasant_party_1", 0),
##            (assign, "$qst_defend_nobles_against_peasants_peasant_party_2", 0),
##            (assign, "$qst_defend_nobles_against_peasants_peasant_party_3", 0),
##            (assign, "$qst_defend_nobles_against_peasants_peasant_party_4", 0),
##            (assign, "$qst_defend_nobles_against_peasants_peasant_party_5", 0),
##            (assign, "$qst_defend_nobles_against_peasants_peasant_party_6", 0),
##            (assign, "$qst_defend_nobles_against_peasants_peasant_party_7", 0),
##            (assign, "$qst_defend_nobles_against_peasants_peasant_party_8", 0),
##            (assign, "$qst_defend_nobles_against_peasants_noble_party_1", 0),
##            (assign, "$qst_defend_nobles_against_peasants_noble_party_2", 0),
##            (assign, "$qst_defend_nobles_against_peasants_noble_party_3", 0),
##            (assign, "$qst_defend_nobles_against_peasants_noble_party_4", 0),
##            (assign, "$qst_defend_nobles_against_peasants_noble_party_5", 0),
##            (assign, "$qst_defend_nobles_against_peasants_noble_party_6", 0),
##            (assign, "$qst_defend_nobles_against_peasants_noble_party_7", 0),
##            (assign, "$qst_defend_nobles_against_peasants_noble_party_8", 0),
##          (try_end),
	        (else_try),
	          (eq, ":quest_no", "qst_incriminate_loyal_commander"),
	          (try_begin),
	            (neq, ":giver_reputation", lrep_upstanding),
	            (neq, ":giver_reputation", lrep_goodnatured),
	            (eq, "$players_kingdom", ":giver_faction_no"),
	            (ge, ":player_level", 10),
	            (faction_slot_eq, ":giver_faction_no", slot_faction_leader, ":giver_troop"),
	            (assign, ":try_times", 1),
	            (assign, ":found", 0),
	            (try_for_range, ":unused", 0, ":try_times"),
	              (call_script, "script_cf_faction_get_random_enemy_faction", ":giver_faction_no"),#Can fail
	              (assign, ":cur_target_faction", reg0),

	              (faction_get_slot, ":cur_target_troop", ":cur_target_faction", slot_faction_leader),
	              (assign, ":num_centerless_heroes", 0),
				  (try_for_range, ":cur_kingdom_hero", kingdom_heroes_begin, kingdom_heroes_end),
	                (troop_slot_eq, ":cur_kingdom_hero", slot_troop_occupation, slto_kingdom_hero),
	                #(troop_slot_eq, ":cur_kingdom_hero", slot_troop_is_prisoner, 0),
	                (neg|troop_slot_ge, ":cur_kingdom_hero", slot_troop_prisoner_of_party, 0),
	                (neq, ":cur_target_troop", ":cur_kingdom_hero"),
	                (store_troop_faction, ":cur_kingdom_hero_faction", ":cur_kingdom_hero"),
	                (eq, ":cur_target_faction", ":cur_kingdom_hero_faction"),
##                (call_script, "script_get_number_of_hero_centers", ":cur_kingdom_hero"),
##                (eq, reg0, 0),
	                (val_add, ":num_centerless_heroes", 1),
	              (try_end),
	              (gt, ":num_centerless_heroes", 0),
	              (assign, ":cur_object_troop", -1),
	              (store_random_in_range, ":random_kingdom_hero", 0, ":num_centerless_heroes"),
              (try_for_range, ":cur_kingdom_hero", kingdom_heroes_begin, kingdom_heroes_end),
	                (eq, ":cur_object_troop", -1),
	                (troop_slot_eq, ":cur_kingdom_hero", slot_troop_occupation, slto_kingdom_hero),
	                (neq, ":cur_target_troop", ":cur_kingdom_hero"),
	                (store_troop_faction, ":cur_kingdom_hero_faction", ":cur_kingdom_hero"),
	                (eq, ":cur_target_faction", ":cur_kingdom_hero_faction"),
##                (call_script, "script_get_number_of_hero_centers", ":cur_kingdom_hero"),
##                (eq, reg0, 0),
	                (val_sub, ":random_kingdom_hero", 1),
	                (lt, ":random_kingdom_hero", 0),
	                (assign, ":cur_object_troop", ":cur_kingdom_hero"),
	              (try_end),

	              (assign, ":cur_target_center", -1),
	              (call_script, "script_get_troop_attached_party", ":cur_target_troop"),
	              (is_between, reg0, towns_begin, towns_end),
	              (party_slot_eq, reg0, slot_town_lord, ":cur_target_troop"),
	              (assign, ":cur_target_center", reg0),

	              (assign, ":try_times", -1),#Exit the second loop
	              (assign, ":found", 1),
	            (try_end),
	            (eq, ":found", 1),

	            (assign, "$incriminate_quest_sacrificed_troop", 0),

	            (party_get_num_companion_stacks, ":num_stacks", "p_main_party"),
	            (try_for_range, ":i_stack", 1, ":num_stacks"),
	              (eq ,"$incriminate_quest_sacrificed_troop", 0),
	              (party_stack_get_troop_id, ":stack_troop","p_main_party",":i_stack"),
	              (neg|troop_is_hero, ":stack_troop"),
	              (store_character_level, ":stack_troop_level", ":stack_troop"),
	              (ge, ":stack_troop_level", 25),
	              (assign, "$incriminate_quest_sacrificed_troop", ":stack_troop"),
	            (try_end),
	            (gt, "$incriminate_quest_sacrificed_troop", 0),

	            (assign, ":quest_target_troop", ":cur_target_troop"),
	            (assign, ":quest_object_troop", ":cur_object_troop"),
	            (assign, ":quest_target_center", ":cur_target_center"),
	            (assign, ":quest_target_faction", ":cur_target_faction"),

	            (assign, ":quest_importance", 1),
	            (assign, ":quest_xp_reward", 700),
	            (assign, ":quest_gold_reward", 1000),
	            (assign, ":result", ":quest_no"),
	            (assign, ":quest_expiration_days", 30),
	            (assign, ":quest_dont_give_again_period", 180),
	          (try_end),
	        (else_try),
	          (eq, ":quest_no", "qst_capture_prisoners"),
	          (try_begin),
	            (eq, "$players_kingdom", ":giver_faction_no"),
	            (call_script, "script_cf_faction_get_random_enemy_faction", ":giver_faction_no"),#Can fail
	            (assign, ":cur_target_faction", reg0),

				(store_random_in_range, ":random_value", 2, 6),
				(try_begin),
				  (eq, ":random_value", 2),
				  (assign, ":random_tier_no", slot_faction_tier_2_troop),
				(else_try),
				  (eq, ":random_value", 3),
				  (assign, ":random_tier_no", slot_faction_tier_3_troop),
				(else_try),
				  (eq, ":random_value", 4),
				  (assign, ":random_tier_no", slot_faction_tier_4_troop),
				(else_try),
				  (assign, ":random_tier_no", slot_faction_tier_5_troop),
				(try_end),

	            (faction_get_slot, ":cur_target_troop", ":cur_target_faction", ":random_tier_no"),
	            (gt, ":cur_target_troop", 0),
	            (store_random_in_range, ":quest_target_amount", 3, 7),
	            (assign, ":quest_target_troop", ":cur_target_troop"),
	            (assign, ":quest_target_faction", ":cur_target_faction"),
	            (assign, ":quest_importance", 1),
	            (store_character_level, ":quest_gold_reward", ":cur_target_troop"),
	            (val_add, ":quest_gold_reward", 5),
	            (val_mul, ":quest_gold_reward", ":quest_gold_reward"),
	            (val_div, ":quest_gold_reward", 5),
	            (val_mul, ":quest_gold_reward", ":quest_target_amount"),
	            (assign, ":quest_xp_reward", ":quest_gold_reward"),
	            (assign, ":result", ":quest_no"),
	            (assign, ":quest_expiration_days", 90),
	            (assign, ":quest_dont_give_again_period", 20),
	          (try_end),
	        (try_end),
		(try_end),	
      (try_begin),
        (neq, ":result", -1),
        
        (try_begin),
          (party_is_active, ":quest_target_center"),
          (store_faction_of_party, ":quest_target_faction", ":quest_target_center"),
        (try_end),
        
        (quest_set_slot, ":result", slot_quest_target_troop, ":quest_target_troop"),
        (quest_set_slot, ":result", slot_quest_target_center, ":quest_target_center"),
        (quest_set_slot, ":result", slot_quest_object_troop, ":quest_object_troop"),
        (quest_set_slot, ":result", slot_quest_target_faction, ":quest_target_faction"),
        (quest_set_slot, ":result", slot_quest_object_faction, ":quest_object_faction"),
        (quest_set_slot, ":result", slot_quest_object_center, ":quest_object_center"),
        (quest_set_slot, ":result", slot_quest_target_party, ":quest_target_party"),
        (quest_set_slot, ":result", slot_quest_target_party_template, ":quest_target_party_template"),
        (quest_set_slot, ":result", slot_quest_target_amount, ":quest_target_amount"),
        (quest_set_slot, ":result", slot_quest_importance, ":quest_importance"),
        (quest_set_slot, ":result", slot_quest_xp_reward, ":quest_xp_reward"),
        (quest_set_slot, ":result", slot_quest_gold_reward, ":quest_gold_reward"),
        (quest_set_slot, ":result", slot_quest_convince_value, ":quest_convince_value"),
        (quest_set_slot, ":result", slot_quest_expiration_days, ":quest_expiration_days"),
        (quest_set_slot, ":result", slot_quest_dont_give_again_period, ":quest_dont_give_again_period"),
        (quest_set_slot, ":result", slot_quest_current_state, 0),
        (quest_set_slot, ":result", slot_quest_giver_troop, ":giver_troop"),
        (quest_set_slot, ":result", slot_quest_giver_center, ":giver_center_no"),
        (quest_set_slot, ":result", slot_quest_target_dna, ":quest_target_dna"),
        (quest_set_slot, ":result", slot_quest_target_item, ":quest_target_item"),
      (try_end),
      
      (assign, reg0, ":result"),
  ]),
  
  
  
  
  # script_cf_get_random_enemy_center_within_range
  # Input: arg1 = party_no, arg2 = range (in kms)
  # Output: reg0 = center_no
  ("cf_get_random_enemy_center_within_range",
    [
      (store_script_param, ":party_no", 1),
      (store_script_param, ":range", 2),

      (assign, ":num_centers", 0),
      (store_faction_of_party, ":faction_no", ":party_no"),
      (try_for_range, ":cur_center", centers_begin, centers_end),
        (store_faction_of_party, ":cur_faction", ":cur_center"),
        (store_relation, ":cur_relation", ":faction_no", ":cur_faction"),
        (lt, ":cur_relation", 0),
        (store_distance_to_party_from_party, ":dist", ":party_no", ":cur_center"),
        (le, ":dist", ":range"),
        (val_add, ":num_centers", 1),
      (try_end),
      (gt, ":num_centers", 0),
      (store_random_in_range, ":random_center", 0, ":num_centers"),
      (assign, ":end_cond", centers_end),
      (try_for_range, ":cur_center", centers_begin, ":end_cond"),
        (store_faction_of_party, ":cur_faction", ":cur_center"),
        (store_relation, ":cur_relation", ":faction_no", ":cur_faction"),
        (lt, ":cur_relation", 0),
        (store_distance_to_party_from_party, ":dist", ":party_no", ":cur_center"),
        (le, ":dist", ":range"),
        (val_sub, ":random_center", 1),
        (lt, ":random_center", 0),
        (assign, ":result", ":cur_center"),
        (assign, ":end_cond", 0),#break
      (try_end),
      (assign, reg0, ":result"),
  ]),
  
  # script_cf_faction_get_random_enemy_faction
  # Input: arg1 = faction_no
  # Output: reg0 = faction_no (Can fail)
  ("cf_faction_get_random_enemy_faction",
    [
      (store_script_param_1, ":faction_no"),
      
      (assign, ":result", -1),
      (assign, ":count_factions", 0),
      (try_for_range, ":cur_faction", kingdoms_begin, kingdoms_end),
        (faction_slot_eq, ":cur_faction", slot_faction_state, sfs_active),
        (store_relation, ":cur_relation", ":faction_no", ":cur_faction"),
        (le, ":cur_relation", -1),
        (val_add, ":count_factions", 1),
      (try_end),
      (store_random_in_range,":random_faction",0,":count_factions"),
      (assign, ":count_factions", 0),
      (try_for_range, ":cur_faction", kingdoms_begin, kingdoms_end),
        (eq, ":result", -1),
        (faction_slot_eq, ":cur_faction", slot_faction_state, sfs_active),
        (store_relation, ":cur_relation", ":faction_no", ":cur_faction"),
        (le, ":cur_relation", -1),
        (val_add, ":count_factions", 1),
        (gt, ":count_factions", ":random_faction"),
        (assign, ":result", ":cur_faction"),
      (try_end),
      
      (neq, ":result", -1),
      (assign, reg0, ":result"),
  ]),

  # script_cf_faction_get_random_friendly_faction
  # Input: arg1 = faction_no
  # Output: reg0 = faction_no (Can fail)
  ("cf_faction_get_random_friendly_faction",
    [
      (store_script_param_1, ":faction_no"),
      
      (assign, ":result", -1),
      (assign, ":count_factions", 0),
      (try_for_range, ":cur_faction", kingdoms_begin, kingdoms_end),
        (faction_slot_eq, ":cur_faction", slot_faction_state, sfs_active),
        (neq, ":cur_faction", ":faction_no"),
        (store_relation, ":cur_relation", ":faction_no", ":cur_faction"),
        (ge, ":cur_relation", 0),
        (val_add, ":count_factions", 1),
      (try_end),
      (store_random_in_range,":random_faction",0,":count_factions"),
      (assign, ":count_factions", 0),
      (try_for_range, ":cur_faction", kingdoms_begin, kingdoms_end),
        (eq, ":result", -1),
        (faction_slot_eq, ":cur_faction", slot_faction_state, sfs_active),
        (neq, ":cur_faction", ":faction_no"),
        (store_relation, ":cur_relation", ":faction_no", ":cur_faction"),
        (ge, ":cur_relation", 0),
        (val_add, ":count_factions", 1),
        (gt, ":count_factions", ":random_faction"),
        (assign, ":result", ":cur_faction"),
      (try_end),
      
      (neq, ":result", -1),
      (assign, reg0, ":result"),
  ]),  
  
  # script_cf_troop_get_random_enemy_troop_with_occupation
  # Input: arg1 = troop_no,
  # Output: reg0 = enemy_troop_no (Can fail)
  ("cf_troop_get_random_enemy_troop_with_occupation",
    [
      (store_script_param_1, ":troop_no"),
      (store_script_param_2, ":occupation"),
      
      (assign, ":result", -1),
      (assign, ":count_enemies", 0),
      (try_for_range, ":cur_slot", slot_troop_enemies_begin, slot_troop_enemies_end),
        (troop_get_slot, ":cur_enemy", ":troop_no", ":cur_slot"),
        (gt, ":cur_enemy", 0),
        (troop_slot_eq, ":cur_enemy", slot_troop_occupation, ":occupation"),
        (val_add, ":count_enemies", 1),
      (try_end),
      (store_random_in_range,":random_enemy",0,":count_enemies"),
      (assign, ":count_enemies", 0),
      (try_for_range, ":cur_slot", slot_troop_enemies_begin, slot_troop_enemies_end),
        (eq, ":result", -1),
        (troop_get_slot, ":cur_enemy", ":troop_no", ":cur_slot"),
        (gt, ":cur_enemy", 0),
        (troop_slot_eq, ":cur_enemy", slot_troop_occupation, ":occupation"),
        (val_add, ":count_enemies", 1),
        (gt, ":count_enemies", ":random_enemy"),
        (assign, ":result", ":cur_enemy"),
      (try_end),
      
      (neq, ":result", -1),
      (assign, reg0, ":result"),
  ]),
  
  
##  # script_cf_troop_get_random_enemy_troop_as_a_town_lord
##  # Input: arg1 = troop_no
##  # Output: reg0 = enemy_troop_no (Can fail)
##  ("cf_troop_get_random_enemy_troop_as_a_town_lord",
##    [
##      (store_script_param_1, ":troop_no"),
##      
##      (assign, ":result", -1),
##      (assign, ":count_enemies", 0),
##      (try_for_range, ":cur_slot", slot_troop_enemies_begin, slot_troop_enemies_end),
##        (troop_get_slot, ":cur_enemy", ":troop_no", ":cur_slot"),
##        (gt, ":cur_enemy", 0),
##        (troop_slot_eq, ":cur_enemy", slot_troop_occupation, slto_kingdom_hero),
##        (call_script, "script_get_number_of_hero_centers", ":cur_enemy"),
##        (gt, reg0, 0),
##        (val_add, ":count_enemies", 1),
##      (try_end),
##      (store_random_in_range,":random_enemy",0,":count_enemies"),
##      (assign, ":count_enemies", 0),
##      (try_for_range, ":cur_slot", slot_troop_enemies_begin, slot_troop_enemies_end),
##        (eq, ":result", -1),
##        (troop_get_slot, ":cur_enemy", ":troop_no", ":cur_slot"),
##        (gt, ":cur_enemy", 0),
##        (troop_slot_eq, ":cur_enemy", slot_troop_occupation, slto_kingdom_hero),
##        (call_script, "script_get_number_of_hero_centers", ":cur_enemy"),
##        (gt, reg0, 0),
##        (val_add, ":count_enemies", 1),
##        (gt, ":count_enemies", ":random_enemy"),
##        (assign, ":result", ":cur_enemy"),
##      (try_end),
##      (neq, ":result", -1),
##      (assign, reg0, ":result"),
##  ]),
  
  
  ##  # script_cf_get_random_enemy_with_valid_slot
  ##  # Input: arg1 = faction_no, arg2 = slot_no
  ##  # Output: reg0 = faction_no (Can fail)
  ##  ("cf_get_random_enemy_with_valid_slot",
  ##    [
  ##      (store_script_param_1, ":faction_no"),
  ##      (store_script_param_2, ":slot_no"),
  ##
  ##      (assign, ":result", -1),
  ##      (assign, ":count_factions", 0),
  ##      (try_for_range, ":cur_faction", kingdoms_begin, kingdoms_end),
  ##        (store_relation, ":cur_relation", ":faction_no", ":cur_faction"),
  ##        (le, ":cur_relation", -10),
  ##        (faction_get_slot, ":cur_value", ":cur_faction", ":slot_no"),
  ##        (gt, ":cur_value", 0),#Checking validity
  ##        (val_add, ":count_factions", 1),
  ##      (try_end),
  ##      (store_random_in_range,":random_faction",0,":count_factions"),
  ##      (assign, ":count_factions", 0),
  ##      (try_for_range, ":cur_faction", kingdoms_begin, kingdoms_end),
  ##        (eq, ":result", -1),
  ##        (store_relation, ":cur_relation", ":faction_no", ":cur_faction"),
  ##        (le, ":cur_relation", -10),
  ##        (faction_get_slot, ":cur_value", ":cur_faction", ":slot_no"),
  ##        (gt, ":cur_value", 0),#Checking validity
  ##        (val_add, ":count_factions", 1),
  ##        (gt, ":count_factions", ":random_faction"),
  ##        (assign, ":result", ":cur_faction"),
  ##      (try_end),
  ##
  ##      (neq, ":result", -1),
  ##      (assign, reg0, ":result"),
  ##  ]),
  
    
  # script_cf_get_random_kingdom_hero
  # Input: arg1 = faction_no
  # Output: reg0 = troop_no (Can fail)
  ("cf_get_random_kingdom_hero",
    [
  ]),
  
  
  # script_cf_get_random_kingdom_hero_as_lover
  # Input: arg1 = troop_no (of the lady)
  # Output: reg0 = troop_no (of the hero) (Can fail)
  ("cf_get_random_kingdom_hero_as_lover",
    [
      #      (store_script_param_1, ":cur_lady"),
      

      #      (troop_get_slot, ":cur_father", ":cur_lady", slot_troop_father),
      #      (troop_get_slot, ":fathers_rank", ":cur_father", slot_troop_kingdom_rank),
      (assign, ":result", -1),
      (assign, ":count_heroes", 0),
      (try_for_range, ":troop_no", kingdom_heroes_begin, kingdom_heroes_end),
        (troop_slot_eq, ":troop_no", slot_troop_lover, 0),
        (troop_slot_eq, ":troop_no", slot_troop_spouse, 0),
        #        (troop_get_slot, ":cur_rank", ":troop_no", slot_troop_kingdom_rank),
        #        (lt, ":cur_rank", ":fathers_rank"), # Only heroes with lower ranks may be the lovers of the daughters
        (val_add, ":count_heroes", 1),
      (try_end),
      (store_random_in_range,":random_hero",0,":count_heroes"),
      (assign, ":count_heroes", 0),
      (try_for_range, ":troop_no", kingdom_heroes_begin, kingdom_heroes_end),
        (eq, ":result", -1),
        (troop_slot_eq, ":troop_no", slot_troop_lover, 0),
        (troop_slot_eq, ":troop_no", slot_troop_spouse, 0),
        #        (troop_get_slot, ":cur_rank", ":troop_no", slot_troop_kingdom_rank),
        #        (lt, ":cur_rank", ":fathers_rank"), # Only heroes with lower ranks may be the lovers of the daughters
        (val_add, ":count_heroes", 1),
        (gt, ":count_heroes", ":random_hero"),
        (assign, ":result", ":troop_no"),
      (try_end),
      (neq, ":result", -1),
      (assign, reg0, ":result"),
  ]),
  
  
##  # script_cf_get_random_siege_location_with_faction
##  # Input: arg1 = faction_no
##  # Output: reg0 = center_no, Can Fail!
##  ("cf_get_random_siege_location_with_faction",
##    [
##      (store_script_param_1, ":faction_no"),
##      (assign, ":result", -1),
##      (assign, ":count_sieges", 0),
##      (try_for_range, ":center_no", walled_centers_begin, walled_centers_end),
##        (party_get_battle_opponent, ":besieger_party", ":center_no"),
##        (gt, ":besieger_party", 0),
##        (store_faction_of_party, ":cur_faction_no", ":center_no"),
##        (eq, ":cur_faction_no", ":faction_no"),
##        (val_add, ":count_sieges", 1),
##      (try_end),
##      (store_random_in_range,":random_center",0,":count_sieges"),
##      (assign, ":count_sieges", 0),
##      (try_for_range, ":center_no", walled_centers_begin, walled_centers_end),
##        (eq, ":result", -1),
##        (party_get_battle_opponent, ":besieger_party", ":center_no"),
##        (gt, ":besieger_party", 0),
##        (store_faction_of_party, ":cur_faction_no", ":center_no"),
##        (eq, ":cur_faction_no", ":faction_no"),
##        (val_add, ":count_sieges", 1),
##        (gt, ":count_sieges", ":random_center"),
##        (assign, ":result", ":center_no"),
##      (try_end),
##      (neq, ":result", -1),
##      (assign, reg0, ":result"),
##  ]),
  
##  # script_cf_get_random_siege_location_with_attacker_faction
##  # Input: arg1 = faction_no
##  # Output: reg0 = center_no, Can Fail!
##  ("cf_get_random_siege_location_with_attacker_faction",
##    [
##      (store_script_param_1, ":faction_no"),
##      (assign, ":result", -1),
##      (assign, ":count_sieges", 0),
##      (try_for_range, ":center_no", walled_centers_begin, walled_centers_end),
##        (party_get_battle_opponent, ":besieger_party", ":center_no"),
##        (gt, ":besieger_party", 0),
##        (store_faction_of_party, ":cur_faction_no", ":besieger_party"),
##        (eq, ":cur_faction_no", ":faction_no"),
##        (val_add, ":count_sieges", 1),
##      (try_end),
##      (store_random_in_range,":random_center",0,":count_sieges"),
##      (assign, ":count_sieges", 0),
##      (try_for_range, ":center_no", walled_centers_begin, walled_centers_end),
##        (eq, ":result", -1),
##        (party_get_battle_opponent, ":besieger_party", ":center_no"),
##        (gt, ":besieger_party", 0),
##        (store_faction_of_party, ":cur_faction_no", ":besieger_party"),
##        (eq, ":cur_faction_no", ":faction_no"),
##        (val_add, ":count_sieges", 1),
##        (gt, ":count_sieges", ":random_center"),
##        (assign, ":result", ":center_no"),
##      (try_end),
##      (neq, ":result", -1),
##      (assign, reg0, ":result"),
##  ]),
  
  
  
##  # script_cf_get_number_of_random_troops_from_party
##  # Input: arg1 = party_no, arg2 = number of troops to remove
##  # Output: reg0 = troop_no, Can fail if there are no slots having the required number of units!
##  ("cf_get_number_of_random_troops_from_party",
##    [
##      (store_script_param_1, ":party_no"),
##      (store_script_param_2, ":no_to_remove"),
##      
##      (assign, ":result", -1),
##      (assign, ":count_stacks", 0),
##      
##      (party_get_num_companion_stacks, ":num_stacks",":party_no"),
##      (try_for_range, ":i_stack", 0, ":num_stacks"),
##        (party_stack_get_size, ":stack_size",":party_no",":i_stack"),
##        (party_stack_get_num_wounded, ":num_wounded",":party_no",":i_stack"),
##        (val_sub, ":stack_size", ":num_wounded"),
##        (ge, ":stack_size", ":no_to_remove"),
##        (party_stack_get_troop_id, ":stack_troop",":party_no",":i_stack"),
##        (neg|troop_is_hero, ":stack_troop"),
##        (val_add, ":count_stacks", 1),
##      (try_end),
##      (store_random_in_range,":random_stack",0,":count_stacks"),
##      (assign, ":count_stacks", 0),
##      (try_for_range, ":i_stack", 0, ":num_stacks"),
##        (eq, ":result", -1),
##        (party_stack_get_size, ":stack_size",":party_no",":i_stack"),
##        (party_stack_get_num_wounded, ":num_wounded",":party_no",":i_stack"),
##        (val_sub, ":stack_size", ":num_wounded"),
##        (ge, ":stack_size", ":no_to_remove"),
##        (party_stack_get_troop_id, ":stack_troop",":party_no",":i_stack"),
##        (neg|troop_is_hero, ":stack_troop"),
##        (val_add, ":count_stacks", 1),
##        (gt, ":count_stacks", ":random_stack"),
##        (assign, ":result", ":stack_troop"),
##      (try_end),
##      
##      (neq, ":result", -1),
##      (assign, reg0, ":result"),
##  ]),
  
  
  
  
  # script_cf_get_random_lord_in_a_center_with_faction
  # Input: arg1 = faction_no
  # Output: reg0 = troop_no, Can Fail!
  ("cf_get_random_lord_in_a_center_with_faction",
    [
      (store_script_param_1, ":faction_no"),
      (assign, ":result", -1),
      (assign, ":count_lords", 0),
      (try_for_range, ":lord_no", heroes_begin, heroes_end),
        (store_troop_faction, ":lord_faction_no", ":lord_no"),
        (eq, ":faction_no", ":lord_faction_no"),
        (troop_slot_eq, ":lord_no", slot_troop_occupation, slto_kingdom_hero),
        #(troop_slot_eq, ":lord_no", slot_troop_is_prisoner, 0),
        (neg|troop_slot_ge, ":lord_no", slot_troop_prisoner_of_party, 0),
        (troop_get_slot, ":lord_party", ":lord_no", slot_troop_leaded_party),
        (ge, ":lord_party", 0),
        (party_get_attached_to, ":lord_attachment", ":lord_party"),
        (is_between, ":lord_attachment", centers_begin, centers_end), #is troop in a center?
        (val_add, ":count_lords", 1),
      (try_end),
      (store_random_in_range, ":random_lord", 0, ":count_lords"),
      (assign, ":count_lords", 0),
      (try_for_range, ":lord_no", heroes_begin, heroes_end),
        (eq, ":result", -1),
        (store_troop_faction, ":lord_faction_no", ":lord_no"),
        (eq, ":faction_no", ":lord_faction_no"),
        (troop_slot_eq, ":lord_no", slot_troop_occupation, slto_kingdom_hero),
        #(troop_slot_eq, ":lord_no", slot_troop_is_prisoner, 0),
        (neg|troop_slot_ge, ":lord_no", slot_troop_prisoner_of_party, 0),
        (troop_get_slot, ":lord_party", ":lord_no", slot_troop_leaded_party),
        (ge, ":lord_party", 0),
        (party_get_attached_to, ":lord_attachment", ":lord_party"),
        (is_between, ":lord_attachment", centers_begin, centers_end), #is troop in a center?
        (val_add, ":count_lords", 1),
        (lt, ":random_lord", ":count_lords"),
        (assign, ":result", ":lord_no"),
      (try_end),
      (neq, ":result", -1),
      (assign, reg0, ":result"),
  ]),

  # script_cf_get_random_lord_except_king_with_faction
  # Input: arg1 = faction_no
  # Output: reg0 = troop_no, Can Fail!
  ("cf_get_random_lord_except_king_with_faction",
    [
      (store_script_param_1, ":faction_no"),
      (assign, ":result", -1),
      (assign, ":count_lords", 0),
      (try_for_range, ":lord_no", heroes_begin, heroes_end),
        (store_troop_faction, ":lord_faction_no", ":lord_no"),
        (eq, ":faction_no", ":lord_faction_no"),
        (neg|faction_slot_eq, ":faction_no", slot_faction_leader, ":lord_no"),
        (troop_slot_eq, ":lord_no", slot_troop_occupation, slto_kingdom_hero),
        #(troop_slot_eq, ":lord_no", slot_troop_is_prisoner, 0),
        (neg|troop_slot_ge, ":lord_no", slot_troop_prisoner_of_party, 0),
        (troop_get_slot, ":lord_party", ":lord_no", slot_troop_leaded_party),
        (ge, ":lord_party", 0),
        (val_add, ":count_lords", 1),
      (try_end),
      (store_random_in_range, ":random_lord", 0, ":count_lords"),
      (assign, ":count_lords", 0),
      (try_for_range, ":lord_no", heroes_begin, heroes_end),
        (eq, ":result", -1),
        (store_troop_faction, ":lord_faction_no", ":lord_no"),
        (eq, ":faction_no", ":lord_faction_no"),
        (neg|faction_slot_eq, ":faction_no", slot_faction_leader, ":lord_no"),
        (troop_slot_eq, ":lord_no", slot_troop_occupation, slto_kingdom_hero),
        #(troop_slot_eq, ":lord_no", slot_troop_is_prisoner, 0),
        (neg|troop_slot_ge, ":lord_no", slot_troop_prisoner_of_party, 0),
        (troop_get_slot, ":lord_party", ":lord_no", slot_troop_leaded_party),
        (ge, ":lord_party", 0),
        (val_add, ":count_lords", 1),
        (lt, ":random_lord", ":count_lords"),
        (assign, ":result", ":lord_no"),
      (try_end),
      (neq, ":result", -1),
      (assign, reg0, ":result"),
  ]),
  
  
  # script_cf_get_random_lord_from_another_faction_in_a_center
  # Input: arg1 = faction_no
  # Output: reg0 = troop_no, Can Fail!
  ("cf_get_random_lord_from_another_faction_in_a_center",
    [
      (store_script_param_1, ":faction_no"),
      (assign, ":result", -1),
      (assign, ":count_lords", 0),
      (try_for_range, ":lord_no", heroes_begin, heroes_end),
        (store_troop_faction, ":lord_faction_no", ":lord_no"),
        (neq, ":lord_faction_no", ":faction_no"),
        (store_relation, ":our_relation", ":lord_faction_no", "fac_player_supporters_faction"),
        (store_relation, ":lord_relation", ":lord_faction_no", ":faction_no"),
        (lt, ":lord_relation", 0),
        (ge, ":our_relation", 0),
        (troop_slot_eq, ":lord_no", slot_troop_occupation, slto_kingdom_hero),
        #(troop_slot_eq, ":lord_no", slot_troop_is_prisoner, 0),
        (neg|troop_slot_ge, ":lord_no", slot_troop_prisoner_of_party, 0),
        (troop_get_slot, ":lord_party", ":lord_no", slot_troop_leaded_party),
        (ge, ":lord_party", 0),
        (party_get_attached_to, ":lord_attachment", ":lord_party"),
        (is_between, ":lord_attachment", centers_begin, centers_end), #is troop in a center?
        (val_add, ":count_lords", 1),
      (try_end),
      (store_random_in_range, ":random_lord", 0, ":count_lords"),
      (assign, ":count_lords", 0),
      (try_for_range, ":lord_no", heroes_begin, heroes_end),
        (eq, ":result", -1),
        (store_troop_faction, ":lord_faction_no", ":lord_no"),
        (neq, ":lord_faction_no", ":faction_no"),
        (store_relation, ":our_relation", ":lord_faction_no", "fac_player_supporters_faction"),
        (store_relation, ":lord_relation", ":lord_faction_no", ":faction_no"),
        (lt, ":lord_relation", 0),
        (ge, ":our_relation", 0),
        (troop_slot_eq, ":lord_no", slot_troop_occupation, slto_kingdom_hero),
        #(troop_slot_eq, ":lord_no", slot_troop_is_prisoner, 0),
        (neg|troop_slot_ge, ":lord_no", slot_troop_prisoner_of_party, 0),
        (troop_get_slot, ":lord_party", ":lord_no", slot_troop_leaded_party),
        (ge, ":lord_party", 0),
        (party_get_attached_to, ":lord_attachment", ":lord_party"),
        (is_between, ":lord_attachment", centers_begin, centers_end), #is troop in a center?
        (val_add, ":count_lords", 1),
        (lt, ":random_lord", ":count_lords"),
        (assign, ":result", ":lord_no"),
      (try_end),
      (neq, ":result", -1),
      (assign, reg0, ":result"),
  ]),
  
  # script_get_closest_walled_center
  # Input: arg1 = party_no
  # Output: reg0 = center_no (closest)
  ("get_closest_walled_center",
    [
      (store_script_param_1, ":party_no"),
      (assign, ":min_distance", 9999999),
      (assign, reg0, -1),
      (try_for_range, ":center_no", walled_centers_begin, walled_centers_end),
        (store_distance_to_party_from_party, ":party_distance", ":party_no", ":center_no"),
        (lt, ":party_distance", ":min_distance"),
        (assign, ":min_distance", ":party_distance"),
        (assign, reg0, ":center_no"),
      (try_end),
  ]),  
  
  # script_get_closest_center
  # Input: arg1 = party_no
  # Output: reg0 = center_no (closest)
  ("get_closest_center",
    [
      (store_script_param_1, ":party_no"),
      (assign, ":min_distance", 9999999),
      (assign, reg0, -1),
      (try_for_range, ":center_no", centers_begin, centers_end),
        (store_distance_to_party_from_party, ":party_distance", ":party_no", ":center_no"),
        (lt, ":party_distance", ":min_distance"),
        (assign, ":min_distance", ":party_distance"),
        (assign, reg0, ":center_no"),
      (try_end),
  ]),
  
    
  # script_get_closest_center_of_faction
  # Input: arg1 = party_no, arg2 = kingdom_no
  # Output: reg0 = center_no (closest)
  ("get_closest_center_of_faction",
    [
  ]),
  
  # script_get_closest_walled_center_of_faction
  # Input: arg1 = party_no, arg2 = kingdom_no
  # Output: reg0 = center_no (closest)
  ("get_closest_walled_center_of_faction",
    [
      (store_script_param_1, ":party_no"),
      (store_script_param_2, ":kingdom_no"),
      (assign, ":min_distance", 99999),
      (assign, ":result", -1),
      (try_for_range, ":center_no", walled_centers_begin, walled_centers_end),
        (store_faction_of_party, ":faction_no", ":center_no"),
        (eq, ":faction_no", ":kingdom_no"),
        (store_distance_to_party_from_party, ":party_distance", ":party_no", ":center_no"),
        (lt, ":party_distance", ":min_distance"),
        (assign, ":min_distance", ":party_distance"),
        (assign, ":result", ":center_no"),
      (try_end),
      (assign, reg0, ":result"),
  ]),
  
  
  # script_get_closest_town_of_faction
  # Input: arg1 = party_no, arg2 = kingdom_no
  # Output: reg0 = center_no (closest)
  ("get_closest_town_of_faction",
    [
      (store_script_param_1, ":party_no"),
      (store_script_param_2, ":kingdom_no"),
      (assign, ":min_distance", 9999999),
      (assign, ":result", -1),
      (try_for_range, ":center_no", walled_centers_begin, walled_centers_end),
        (store_faction_of_party, ":faction_no", ":center_no"),
        (eq, ":faction_no", ":kingdom_no"),
        (party_slot_eq, ":center_no", slot_party_type, spt_town),
        (store_distance_to_party_from_party, ":party_distance", ":party_no", ":center_no"),
        (lt, ":party_distance", ":min_distance"),
        (assign, ":min_distance", ":party_distance"),
        (assign, ":result", ":center_no"),
      (try_end),
      (assign, reg0, ":result"),
  ]),

  
  # script_let_nearby_parties_join_current_battle
  # Input: arg1 = besiege_mode, arg2 = dont_add_friends_other_than_accompanying
  # Output: none
  ("let_nearby_parties_join_current_battle",
    [
      (store_script_param, ":besiege_mode", 1),
      (store_script_param, ":dont_add_friends_other_than_accompanying", 2),
              
      (store_character_level, ":player_level", "trp_player"),      
      (try_for_parties, ":party_no"),
        (party_is_active, ":party_no"),
        (party_get_battle_opponent, ":opponent",":party_no"),
        (lt, ":opponent", 0), #party is not itself involved in a battle
        (party_get_attached_to, ":attached_to",":party_no"),
        (lt, ":attached_to", 0), #party is not attached to another party
        (get_party_ai_behavior, ":behavior", ":party_no"),
        (neq, ":behavior", ai_bhvr_in_town),

        (party_stack_get_troop_id, ":stack_troop", ":party_no", 0),  
        (try_begin),
          (neg|is_between, ":stack_troop", "trp_looter", "trp_black_khergit_horseman"),

          (assign, ":join_distance", 5), #day/not bandit
          (try_begin),
            (is_currently_night),
            (assign, ":join_distance", 3), #nigh/not bandit
          (try_end),    
        (else_try),  
          (assign, ":join_distance", 3), #day/bandit
          (try_begin),
            (is_currently_night),
            (assign, ":join_distance", 2), #night/bandit
          (try_end),    
        (try_end),          

		#Quest bandits do not join battle
		(this_or_next|neg|check_quest_active, "qst_troublesome_bandits"),
			(neg|quest_slot_eq, "qst_troublesome_bandits", slot_quest_target_party, ":party_no"),
			
			
      
        (store_distance_to_party_from_party, ":distance", ":party_no", "p_main_party"),
        (lt, ":distance", ":join_distance"),

        (store_faction_of_party, ":faction_no", ":party_no"),
        (store_faction_of_party, ":enemy_faction", "$g_enemy_party"),
        (try_begin),
          (eq, ":faction_no", "fac_player_supporters_faction"),
          (assign, ":reln_with_player", 100),
        (else_try),
          (store_relation, ":reln_with_player", ":faction_no", "fac_player_supporters_faction"),
        (try_end),
        (try_begin),
          (eq, ":faction_no", ":enemy_faction"),
          (assign, ":reln_with_enemy", 100),
        (else_try),
          (store_relation, ":reln_with_enemy", ":faction_no", ":enemy_faction"),
        (try_end),

        (assign, ":enemy_side", 1),
        (try_begin),
          (neq, "$g_enemy_party", "$g_encountered_party"),
          (assign, ":enemy_side", 2),
        (try_end),

        (try_begin),
			(party_slot_eq, ":party_no", slot_party_ai_state, spai_accompanying_army),
        (try_begin),
				(party_slot_eq, ":party_no", slot_party_ai_object, "p_main_party"),
				(assign, ":follow_flag", 1),
			(else_try),
				(party_slot_eq, ":party_no", slot_party_ai_object, "$g_encountered_party"),
				(assign, ":follow_flag", 2),
			(try_end),
		(try_end),
				
        (try_begin),
		  (eq, ":follow_flag", 1),
		  (party_quick_attach_to_current_battle, ":party_no", 0), #attach as friend
          (str_store_party_name, s1, ":party_no"),
          (display_message, "str_s1_joined_battle_friend"),
		 (else_try),
		  (eq, ":follow_flag", 2),
		  (party_quick_attach_to_current_battle, ":party_no", ":enemy_side"), #attach as enemy
          (str_store_party_name, s1, ":party_no"),
          (display_message, "str_s1_joined_battle_enemy"),
		 (else_try),
          (eq, ":besiege_mode", 0),
          (lt, ":reln_with_player", 0),
          (gt, ":reln_with_enemy", 0),
          (party_get_slot, ":party_type", ":party_no"),
          
          (assign, ":enemy_is_bandit_party_and_level_is_greater_than_6", 0),
          (try_begin),
            (party_stack_get_troop_id, ":stack_troop", ":party_no", 0),
            (is_between, ":stack_troop", "trp_looter", "trp_black_khergit_horseman"),                    
            (gt, ":player_level", 6),
            (assign, ":enemy_is_bandit_party_and_level_is_greater_than_6", 1),
          (try_end),  

          (this_or_next|eq, ":party_type", spt_kingdom_hero_party),
          (eq, ":enemy_is_bandit_party_and_level_is_greater_than_6", 1),

          (get_party_ai_behavior, ":ai_bhvr", ":party_no"),
          (neq, ":ai_bhvr", ai_bhvr_avoid_party),
          (party_quick_attach_to_current_battle, ":party_no", ":enemy_side"), #attach as enemy
          (str_store_party_name, s1, ":party_no"),
          (display_message, "str_s1_joined_battle_enemy"),
        (else_try),
          (try_begin),
            (party_slot_eq, ":party_no", slot_party_ai_state, spai_accompanying_army),
            (party_slot_eq, ":party_no", slot_party_ai_object, "trp_player"),
            (assign, ":party_is_accompanying_player", 1),
          (else_try),  
            (assign, ":party_is_accompanying_player", 0),
          (try_end),
          
          (this_or_next|eq, ":dont_add_friends_other_than_accompanying", 0),
          (eq, ":party_is_accompanying_player", 1),
          (gt, ":reln_with_player", 0),
          (lt, ":reln_with_enemy", 0),
          
          (assign, ":following_player", 0),
          (try_begin),
            (party_slot_eq, ":party_no", slot_party_ai_state, spai_accompanying_army),            
            (party_slot_eq, ":party_no", slot_party_ai_object, "p_main_party"),
            (assign, ":following_player", 1),
          (try_end),             

          (assign, ":do_join", 1),
          (try_begin),
            (eq, ":besiege_mode", 1),
            (eq, ":following_player", 0),                        
            (assign, ":do_join", 0),
            (eq, ":faction_no", "$players_kingdom"),
            (faction_slot_eq, "$players_kingdom", slot_faction_marshall, "trp_player"),
            (assign, ":do_join", 1),
          (try_end),
          (eq, ":do_join", 1),
          
          (party_get_slot, ":party_type", ":party_no"),
          (eq, ":party_type", spt_kingdom_hero_party),
          (party_stack_get_troop_id, ":leader", ":party_no", 0),
   #       (troop_get_slot, ":player_relation", ":leader", slot_troop_player_relation),
          (call_script, "script_troop_get_player_relation", ":leader"),
          (assign, ":player_relation", reg0),
          
          (assign, ":join_even_you_do_not_like_player", 0),
          (try_begin),
            (faction_slot_eq, "$players_kingdom", slot_faction_marshall, "trp_player"), #new added, if player is marshal and if he is accompanying then join battle even lord do not like player
            (eq, ":following_player", 1),
            (assign, ":join_even_you_do_not_like_player", 1),
          (try_end),              
          
          (this_or_next|ge, ":player_relation", 0),          
          (eq, ":join_even_you_do_not_like_player", 1),
          
          (party_quick_attach_to_current_battle, ":party_no", 0), #attach as friend
          (str_store_party_name, s1, ":party_no"),
          (display_message, "str_s1_joined_battle_friend"),
        (try_end),
      (try_end),
  ]),
    
  # script_party_wound_all_members_aux
  # Input: arg1 = party_no
  ("party_wound_all_members_aux",
    [
      (store_script_param_1, ":party_no"),
      
      (party_get_num_companion_stacks, ":num_stacks",":party_no"),
      (try_for_range, ":i_stack", 0, ":num_stacks"),
        (party_stack_get_troop_id, ":stack_troop",":party_no",":i_stack"),
        (try_begin),
          (neg|troop_is_hero, ":stack_troop"),
          (party_stack_get_size, ":stack_size",":party_no",":i_stack"),
          (party_wound_members, ":party_no", ":stack_troop", ":stack_size"),
        (else_try),
          (troop_set_health, ":stack_troop", 0),
        (try_end),
      (try_end),
      (party_get_num_attached_parties, ":num_attached_parties", ":party_no"),
      (try_for_range, ":attached_party_rank", 0, ":num_attached_parties"),
        (party_get_attached_party_with_rank, ":attached_party", ":party_no", ":attached_party_rank"),
        (call_script, "script_party_wound_all_members_aux", ":attached_party"),
      (try_end),
  ]),
  
  # script_party_wound_all_members
  # Input: arg1 = party_no
  ("party_wound_all_members",
    [
      (store_script_param_1, ":party_no"),
      
      (call_script, "script_party_wound_all_members_aux", ":party_no"),
  ]),
  
  
  
  # script_calculate_battle_advantage
  # Output: reg0 = battle advantage
  ("calculate_battle_advantage",
    [
      (call_script, "script_party_count_fit_for_battle", "p_collective_friends"),
      (assign, ":friend_count", reg(0)),
      
      (party_get_skill_level, ":player_party_tactics",  "p_main_party", skl_tactics),
      (party_get_skill_level, ":ally_party_tactics",  "p_collective_friends", skl_tactics),
      (val_max, ":player_party_tactics", ":ally_party_tactics"),
     
      (call_script, "script_party_count_fit_for_battle", "p_collective_enemy"),
      (assign, ":enemy_count", reg(0)),
      
      (party_get_skill_level, ":enemy_party_tactics",  "p_collective_enemy", skl_tactics),
      
      (val_add, ":friend_count", 1),
      (val_add, ":enemy_count", 1),
      
      (try_begin),
        (ge, ":friend_count", ":enemy_count"),
        (val_mul, ":friend_count", 100),
        (store_div, ":ratio", ":friend_count", ":enemy_count"),
        (store_sub, ":raw_advantage", ":ratio", 100),
      (else_try),
        (val_mul, ":enemy_count", 100),
        (store_div, ":ratio", ":enemy_count", ":friend_count"),
        (store_sub, ":raw_advantage", 100, ":ratio"),
      (try_end),
      (val_mul, ":raw_advantage", 2),
      
      (val_mul, ":player_party_tactics", 30),
      (val_mul, ":enemy_party_tactics", 30),
      (val_add, ":raw_advantage", ":player_party_tactics"),
      (val_sub, ":raw_advantage", ":enemy_party_tactics"),
      (val_div, ":raw_advantage", 100),
      
      
      (assign, reg0, ":raw_advantage"),
      (display_message, "@Battle Advantage = {reg0}.", 0xFFFFFFFF),
  ]),
  
  
  # script_cf_check_enemies_nearby
  # Input: none
  # Output: none, fails when enemies are nearby
  ("cf_check_enemies_nearby",
    [
      (get_player_agent_no, ":player_agent"),
      (agent_is_alive, ":player_agent"),
      (agent_get_position, pos1, ":player_agent"),
      (assign, ":result", 0),
      (set_fixed_point_multiplier, 100),
      (try_for_agents,":cur_agent"),
        (neq, ":cur_agent", ":player_agent"),
        (agent_is_alive, ":cur_agent"),
        (agent_is_human, ":cur_agent"),
        (neg|agent_is_ally, ":cur_agent"),
        (agent_get_position, pos2, ":cur_agent"),
        (get_distance_between_positions, ":cur_distance", pos1, pos2),
        (le, ":cur_distance", 1500), #15 meters
        (assign, ":result", 1),
      (try_end),
      (eq, ":result", 0),
  ]),
  
  # script_get_heroes_attached_to_center_aux
  # For internal use only
  ("get_heroes_attached_to_center_aux",
    [
      (store_script_param_1, ":center_no"),
      (store_script_param_2, ":party_no_to_collect_heroes"),
      (party_get_num_companion_stacks, ":num_stacks",":center_no"),
      (try_for_range, ":i_stack", 0, ":num_stacks"),
        (party_stack_get_troop_id, ":stack_troop",":center_no",":i_stack"),
        (troop_is_hero, ":stack_troop"),
        (party_add_members, ":party_no_to_collect_heroes", ":stack_troop", 1),
      (try_end),
      (party_get_num_attached_parties, ":num_attached_parties", ":center_no"),
      (try_for_range, ":attached_party_rank", 0, ":num_attached_parties"),
        (party_get_attached_party_with_rank, ":attached_party", ":center_no", ":attached_party_rank"),
        (call_script, "script_get_heroes_attached_to_center_aux", ":attached_party", ":party_no_to_collect_heroes"),
      (try_end),
  ]),
  
  # script_get_heroes_attached_to_center
  # Input: arg1 = center_no, arg2 = party_no_to_collect_heroes
  # Output: none, adds heroes to the party_no_to_collect_heroes party
  ("get_heroes_attached_to_center",
    [
      (store_script_param_1, ":center_no"),
      (store_script_param_2, ":party_no_to_collect_heroes"),
      (party_clear, ":party_no_to_collect_heroes"),
      (call_script, "script_get_heroes_attached_to_center_aux", ":center_no", ":party_no_to_collect_heroes"),

#rebellion changes begin -Arma
     (try_for_range, ":pretender", pretenders_begin, pretenders_end),
        (neq, ":pretender", "$supported_pretender"),
        (troop_slot_eq, ":pretender", slot_troop_cur_center, ":center_no"),
        (party_add_members, ":party_no_to_collect_heroes", ":pretender", 1),
     (try_end),

#     (try_for_range, ":rebel_faction", rebel_factions_begin, rebel_factions_end),
#        (faction_slot_eq, ":rebel_faction", slot_faction_state, sfs_inactive_rebellion),
#        (faction_slot_eq, ":rebel_faction", slot_faction_inactive_leader_location, ":center_no"),
#        (faction_get_slot, ":pretender", ":rebel_faction", slot_faction_leader),
#        (party_add_members, ":party_no_to_collect_heroes", ":pretender", 1),
#     (try_end),
#rebellion changes end


  ]),
  
  
  # script_get_heroes_attached_to_center_as_prisoner_aux
  # For internal use only
  ("get_heroes_attached_to_center_as_prisoner_aux",
    [
      (store_script_param_1, ":center_no"),
      (store_script_param_2, ":party_no_to_collect_heroes"),
      (party_get_num_prisoner_stacks, ":num_stacks",":center_no"),
      (try_for_range, ":i_stack", 0, ":num_stacks"),
        (party_prisoner_stack_get_troop_id, ":stack_troop",":center_no",":i_stack"),
        (troop_is_hero, ":stack_troop"),
        (party_add_members, ":party_no_to_collect_heroes", ":stack_troop", 1),
      (try_end),
      (party_get_num_attached_parties, ":num_attached_parties", ":center_no"),
      (try_for_range, ":attached_party_rank", 0, ":num_attached_parties"),
        (party_get_attached_party_with_rank, ":attached_party", ":center_no", ":attached_party_rank"),
        (call_script, "script_get_heroes_attached_to_center_as_prisoner_aux", ":attached_party", ":party_no_to_collect_heroes"),
      (try_end),
  ]),
  
  
  # script_get_heroes_attached_to_center_as_prisoner
  # Input: arg1 = center_no, arg2 = party_no_to_collect_heroes
  # Output: none, adds heroes to the party_no_to_collect_heroes party
  ("get_heroes_attached_to_center_as_prisoner",
    [
      (store_script_param_1, ":center_no"),
      (store_script_param_2, ":party_no_to_collect_heroes"),
      (party_clear, ":party_no_to_collect_heroes"),
      (call_script, "script_get_heroes_attached_to_center_as_prisoner_aux", ":center_no", ":party_no_to_collect_heroes"),
  ]),
  
##  
##  # script_cf_get_party_leader
##  # Input: arg1 = party_no
##  # Output: reg0 = troop_no of the leader (Can fail)
##  ("cf_get_party_leader",
##    [
##      (store_script_param_1, ":party_no"),
##      
##      (party_get_num_companion_stacks, ":num_stacks",":party_no"),
##      (gt, ":num_stacks", 0),
##      (party_stack_get_troop_id, ":stack_troop", ":party_no", 0),
##      (troop_is_hero, ":stack_troop"),
##      (assign, reg0, ":stack_troop"),
##  ]),
  
  # script_give_center_to_faction
  # Input: arg1 = center_no, arg2 = faction
  ("give_center_to_faction",
    [
      (store_script_param_1, ":center_no"),
      (store_script_param_2, ":faction_no"),

 	  #ms system fix
	  (call_script, "script_ms_remove_elemnts_in_construct", ":center_no"), 
	  #ms system fix end

	  (store_faction_of_party, ":ex_faction", ":center_no"), 
      (try_begin),
        (check_quest_active, "qst_join_siege_with_army"),
        (quest_slot_eq, "qst_join_siege_with_army", slot_quest_target_center, ":center_no"),
        (call_script, "script_abort_quest", "qst_join_siege_with_army", 0),
        #Reactivating follow army quest
        (faction_get_slot, ":faction_marshall", "$players_kingdom", slot_faction_marshall),
        (str_store_troop_name_link, s9, ":faction_marshall"),
        (setup_quest_text, "qst_follow_army"),
        (str_store_string, s2, "@{s9} wants you to resume following his army until further notice."),
        (call_script, "script_start_quest", "qst_follow_army", ":faction_marshall"),
        (assign, "$g_player_follow_army_warnings", 0),
      (try_end),
	  
	  
		(try_begin), 
			(check_quest_active, "qst_rebel_against_kingdom"), 
			(check_quest_active, "qst_oim_getman_main"), 
			(quest_slot_eq, "qst_oim_getman_main", slot_quest_target_center, ":center_no"),
			(eq, "$supported_pretender", "trp_kingdom_1_pretender"), #check if it Janush and it's main quest
			#code now we close the quest and cancel all what is done
			(assign, "$g_main_quest_active", 2), #do not start any new global quests
			
			(try_begin),
				(check_quest_active, "qst_oim_getman_defend_villages"),
				(call_script, "script_cancel_quest", "qst_oim_getman_defend_villages"),
			(end_try),	
			(try_begin),
				(check_quest_active, "qst_oim_getman_main"),
				(call_script, "script_cancel_quest", "qst_oim_getman_main"),
			(end_try),	
			(try_begin),
				(check_quest_active, "qst_oim_getman_kozaks_service"),
				(call_script, "script_cancel_quest", "qst_oim_getman_kozaks_service"),
			(end_try),	
			(try_begin),
				(check_quest_active, "qst_oim_getman_za_radzivilla"),
				(call_script, "script_cancel_quest", "qst_oim_getman_za_radzivilla"),
			(end_try),	
			(try_begin),
				(check_quest_active, "qst_oim_getman_radzivill_rebelion"),
				(call_script, "script_cancel_quest", "qst_oim_getman_radzivill_rebelion"),
			(end_try),	
			(try_begin),
				(check_quest_active, "qst_oim_getman_radzivill_capture_city"),
				(call_script, "script_cancel_quest", "qst_oim_getman_radzivill_capture_city"),
			(end_try),	
			(try_begin),
				(check_quest_active, "qst_oim_getman_kiev_capture"),
				(call_script, "script_cancel_quest", "qst_oim_getman_kiev_capture"),
			(end_try),	
			(try_begin),
				(check_quest_active, "qst_oim_getman_kiev_burgomistr"),
				(call_script, "script_cancel_quest", "qst_oim_getman_kiev_burgomistr"),
			(end_try),	
			(try_begin),
				(check_quest_active, "qst_oim_getman_kiev_burgomistr_gold"),
				(call_script, "script_cancel_quest", "qst_oim_getman_kiev_burgomistr_gold"),
			(end_try),	
			(try_begin),
				(check_quest_active, "qst_oim_getman_ask_add_info"),
				(call_script, "script_cancel_quest", "qst_oim_getman_ask_add_info"),
			(end_try),	
			(try_begin),
				(check_quest_active, "qst_oim_getman_capture_tatarin"),
				(call_script, "script_cancel_quest", "qst_oim_getman_capture_tatarin"),
			(end_try),	
			(try_begin),
				(check_quest_active, "qst_oim_getman_tampliers_archives"),
				(call_script, "script_cancel_quest", "qst_oim_getman_tampliers_archives"),
			(end_try),	
			(try_begin),
				(check_quest_active, "qst_oim_getman_nesviz_grobnica_radzivilov"),
				(call_script, "script_cancel_quest", "qst_oim_getman_nesviz_grobnica_radzivilov"),
			(end_try),	
			(try_begin),
				(check_quest_active, "qst_oim_getman_nesviz_legend"),
				(call_script, "script_cancel_quest", "qst_oim_getman_nesviz_legend"),
			(end_try),	
			(try_begin),
				(check_quest_active, "qst_oim_getman_tayna_knyaza"),
				(call_script, "script_cancel_quest", "qst_oim_getman_tayna_knyaza"),
			(end_try),	
			(try_begin),
				(check_quest_active, "qst_oim_getman_borat_dlg"),
				(call_script, "script_cancel_quest", "qst_oim_getman_borat_dlg"),
			(end_try),	
			(try_begin),
				(check_quest_active, "qst_oim_getman_voron_book"),
				(call_script, "script_cancel_quest", "qst_oim_getman_voron_book"),
			(end_try),	
			(try_begin),
				(check_quest_active, "qst_oim_getman_voron_translate"),
				(call_script, "script_cancel_quest", "qst_oim_getman_voron_translate"),
			(end_try),	
			(try_begin),
				(check_quest_active, "qst_oim_getman_kozak_legend"),
				(call_script, "script_cancel_quest", "qst_oim_getman_kozak_legend"),
			(end_try),	
			(try_begin),
				(check_quest_active, "qst_oim_getman_barabash"),
				(call_script, "script_cancel_quest", "qst_oim_getman_barabash"),
			(end_try),	
			(try_begin),
				(check_quest_active, "qst_oim_getman_nesvizh_pernach"),
				(call_script, "script_cancel_quest", "qst_oim_getman_nesvizh_pernach"),
			(end_try),	
			(try_begin),
				(check_quest_active, "qst_oim_getman_kill_radzivill"),
				(call_script, "script_cancel_quest", "qst_oim_getman_kill_radzivill"),
			(end_try),	
			
			  (try_for_range, ":quest_no", all_quests_begin, "qst_talk_to_zamoshie_elder"), 
				(quest_slot_eq, ":quest_no", slot_quest_giver_troop, "trp_kingdom_1_pretender"),
				(call_script, "script_cancel_quest", ":quest_no"),
			  (try_end),

			
			#now cancel and stop quest
			
			(troop_get_slot, ":original_faction", "trp_kingdom_1_pretender", slot_troop_original_faction),
			(try_for_range, ":cur_troop", kingdom_heroes_begin, kingdom_heroes_end),
				(neq, "$supported_pretender", ":cur_troop"),
				(store_troop_faction, ":cur_faction", ":cur_troop"),
				(eq, ":cur_faction", "fac_player_supporters_faction"),
				(call_script, "script_change_troop_faction", ":cur_troop", ":original_faction"),
			(try_end),
			(troop_set_faction, "trp_kingdom_1_pretender", "fac_neutral"),
			(faction_set_slot, "fac_player_supporters_faction", slot_faction_leader, "trp_player"),
			(assign, ":has_center", 0),
			(try_for_range, ":cur_center", centers_begin, centers_end),
				(store_faction_of_party, ":cur_faction", ":cur_center"),
				(eq, ":cur_faction", "fac_player_supporters_faction"),
				(assign, ":has_center", 1),
				(neg|party_slot_eq, ":cur_center", slot_town_lord, "trp_player"),
				(call_script, "script_give_center_to_lord", ":cur_center", "trp_player", 0),
			(try_end),
			#(party_remove_members, "p_main_party", "$supported_pretender", 1),
			(faction_set_slot, ":original_faction", slot_faction_has_rebellion_chance, 0),
			(assign, "$supported_pretender", 0),
			(try_begin),
				(eq, ":has_center", 1),
				(faction_set_color, "fac_player_supporters_faction", 0xAAAAAA),
				(else_try),
				(call_script, "script_activate_deactivate_player_faction", -1),
			(try_end),
			(call_script, "script_change_player_honor", -20),
			(call_script, "script_fail_quest", "qst_rebel_against_kingdom"),
			(call_script, "script_end_quest", "qst_rebel_against_kingdom"),			
			
			#told player that all is lost:
			
			(call_script, "script_add_notification_menu", "mnu_notification_simple_str", "str_oim_black_hetman_failed", -1), 
			
		(end_try), 
	  
	  ##
	  
  	  (try_begin),
        (check_quest_active, "qst_oim_getman_radzivill_capture_city"),
        (quest_slot_eq, "qst_oim_getman_radzivill_capture_city", slot_quest_current_state, 0),
		(eq, ":faction_no", "fac_player_supporters_faction"),
		(quest_set_slot, "qst_oim_getman_radzivill_capture_city", slot_quest_current_state, 1),
		(quest_set_slot, "qst_oim_getman_main", slot_quest_target_center, ":center_no"),
	  (try_end),


	  #unsafe code start
	  (try_begin), 
		(check_quest_active, "qst_oim_getman_radzivill_rebelion"), 
		(quest_slot_eq, "qst_oim_getman_radzivill_rebelion", slot_quest_current_state, 0), 
		(eq, ":faction_no", "fac_player_supporters_faction"),
		(eq, "$supported_pretender", "trp_kingdom_1_pretender"),
		(quest_set_slot, "qst_oim_getman_radzivill_capture_city", slot_quest_giver_troop, "$g_talk_troop"), 
		(quest_set_slot, "qst_oim_getman_radzivill_capture_city", slot_quest_current_state, 0),
		(setup_quest_text, "qst_oim_getman_radzivill_capture_city"),
		(str_store_troop_name_link, s3, "$g_talk_troop"), 
		(str_store_string, s2, "@OIM_add  {s3} prosil vas zahvatit gorod dly nego"),
		(call_script, "script_start_quest", "qst_oim_getman_radzivill_capture_city", "$g_talk_troop"),
		(quest_set_slot, "qst_oim_getman_radzivill_rebelion", slot_quest_current_state, 1), 
		(quest_set_slot, "qst_oim_getman_radzivill_capture_city", slot_quest_current_state, 1),
		(quest_set_slot, "qst_oim_getman_main", slot_quest_target_center, ":center_no"),
	  (try_end), 
	  #unsafe code end
	  
	  ##

	  
  	  (try_begin),
		(check_quest_active,"qst_oim_potop_defend_get_back_warshaw"),
		(neg|check_quest_succeeded,"qst_oim_potop_defend_get_back_warshaw"),
		(neg|check_quest_finished,"qst_oim_potop_defend_get_back_warshaw"),
		(eq, ":center_no", "p_town_6"), 
		(eq, ":faction_no", "fac_kingdom_1"),
		(call_script, "script_succeed_quest", "qst_oim_potop_defend_get_back_warshaw"), 
		#(code)
		(try_for_range, ":lord", kingdom_heroes_begin, kingdom_heroes_end), 
			(troop_get_slot, ":party_no", ":lord", slot_troop_leaded_party),
			(ge, ":party_no", 0),
			(party_slot_eq, ":party_no", slot_party_ai_state, spai_accompanying_army),
			(party_slot_eq, ":party_no", slot_party_ai_object, "p_main_party"),
			(party_set_slot, ":party_no", slot_party_commander_party, -1),
			(troop_set_slot, "$g_talk_troop", slot_troop_player_order_state, spai_undefined),
			(troop_set_slot, "$g_talk_troop", slot_troop_player_order_object, -1),
		(try_end), 
	  (try_end),
 	  (try_begin),
		(check_quest_active,"qst_oim_potop_alias"),
 	  	(neg|check_quest_succeeded,"qst_oim_potop_alias"),
 	  	(neg|check_quest_finished,"qst_oim_potop_alias"),
 	  	(eq, ":faction_no", "fac_kingdom_3"), 
		(eq, ":ex_faction", "fac_kingdom_2"), 
 	  	(val_add, "$oim_potop_moscow_cities_count", 1), 
 	  	(try_begin), 
 	  		(ge, "$oim_potop_moscow_cities_count", 2), 
 	  		(call_script, "script_succeed_quest", "qst_oim_potop_alias"), 
 	  	(try_end),	
 	  (try_end), 
	  #(quest_set_slot, "qst_oim_getman_kiev_capture", slot_quest_current_state, 0),
 	  (try_begin),
        (check_quest_active, "qst_oim_getman_kiev_capture"),
        (quest_slot_eq, "qst_oim_getman_kiev_capture", slot_quest_current_state, 0),
		(eq, ":faction_no", "fac_player_supporters_faction"),
		(eq, ":center_no", "p_town_3"),
		(call_script, "script_succeed_quest", "qst_oim_getman_kiev_capture"), 
	  (try_end),

      (store_faction_of_party, ":old_faction", ":center_no"),
      (call_script, "script_give_center_to_faction_aux", ":center_no", ":faction_no"),
      (call_script, "script_update_village_market_towns"),

      (try_for_range, ":cur_faction", kingdoms_begin, kingdoms_end),
        (call_script, "script_faction_recalculate_strength", ":cur_faction"),
      (try_end),
      (assign, "$g_recalculate_ais", 1),

      (call_script, "script_activate_deactivate_player_faction", ":old_faction"),
      (try_begin),
        (eq, ":faction_no", "fac_player_supporters_faction"),
        (faction_slot_eq, "fac_player_supporters_faction", slot_faction_leader, "trp_player"),
        (call_script, "script_give_center_to_lord", ":center_no", "trp_player", 0),
        (try_for_range, ":cur_village", villages_begin, villages_end),
          (store_faction_of_party, ":cur_village_faction", ":cur_village"),
          (eq, ":cur_village_faction", "fac_player_supporters_faction"),
          (neg|party_slot_eq, ":cur_village", slot_town_lord, "trp_player"),
          (call_script, "script_give_center_to_lord", ":cur_village", "trp_player", 0),
        (try_end),
      (try_end),
      ]),
  
  # script_give_center_to_faction_aux
  # Input: arg1 = center_no, arg2 = faction
  ("give_center_to_faction_aux",
    [
      (store_script_param_1, ":center_no"),
      (store_script_param_2, ":faction_no"),

      (store_faction_of_party, ":old_faction", ":center_no"),
      (party_set_slot, ":center_no", slot_center_ex_faction, ":old_faction"),
      (party_set_faction, ":center_no", ":faction_no"),
      (call_script, "script_ms_event_captured", ":center_no"),

      (try_begin),
        (party_slot_eq, ":center_no", slot_party_type, spt_village),
        (party_get_slot, ":farmer_party", ":center_no", slot_village_farmer_party),
        (gt, ":farmer_party", 0),
        (party_is_active, ":farmer_party"),
        (party_set_faction, ":farmer_party", ":faction_no"),
	    (call_script, "script_ms_event_captured", ":farmer_party"),
      (try_end),

      (try_begin),
	    #This bit of seemingly redundant code (the neq condition) is designed to prevent a bug that occurs when a player first conquers a center -- apparently this script is called again AFTER it is handed to a lord
		#Without this line, then the player's dialog selection does not have any affect, because town_lord is set again to stl_unassigned after the player makes his or her choice
	    (neq, ":faction_no", ":old_faction"),
		
        (party_set_slot, ":center_no", slot_center_ex_faction, ":old_faction"),
        (party_get_slot, ":old_town_lord", ":center_no", slot_town_lord),
        (party_set_slot, ":center_no", slot_town_lord, stl_unassigned),
        (party_set_banner_icon, ":center_no", 0),#Removing banner
        (call_script, "script_update_faction_notes", ":old_faction"),
      (try_end),  
      
      (call_script, "script_update_faction_notes", ":faction_no"),
      (call_script, "script_update_center_notes", ":center_no"),
      
      (try_begin),
        (ge, ":old_town_lord", 0),
        (neq, ":faction_no", "fac_player_supporters_faction"),
        (call_script, "script_update_troop_notes", ":old_town_lord"),
      (try_end),

      (try_for_range, ":other_center", centers_begin, centers_end),
        (party_slot_eq, ":other_center", slot_village_bound_center, ":center_no"),
        (call_script, "script_give_center_to_faction_aux", ":other_center", ":faction_no"),
      (try_end),
  ]),
  
  # script_change_troop_faction
  # Input: arg1 = troop_no, arg2 = faction
  ("change_troop_faction",
    [
      (store_script_param_1, ":troop_no"),
      (store_script_param_2, ":faction_no"),
      (try_begin),
        #Reactivating inactive or defeated faction
        (is_between, ":faction_no", kingdoms_begin, kingdoms_end),
        (neg|faction_slot_eq, ":faction_no", slot_faction_state, sfs_active),
        (faction_set_slot, ":faction_no", slot_faction_state, sfs_active),
        (call_script, "script_store_average_center_value_per_faction"),
	  (try_end),
	  
      (troop_set_faction, ":troop_no", ":faction_no"),
      (try_for_range, ":center_no", walled_centers_begin, walled_centers_end),
        (party_slot_eq, ":center_no", slot_town_lord, ":troop_no"),
        (party_set_faction, ":center_no", ":faction_no"),
		(call_script, "script_ms_event_captured", ":center_no"),
        (try_for_range, ":village_no", villages_begin, villages_end),
          (party_slot_eq, ":village_no", slot_village_bound_center, ":center_no"),
          (party_set_faction, ":village_no", ":faction_no"),
		  (call_script, "script_ms_event_captured", ":village_no"),
          (party_get_slot, ":farmer_party_no", ":village_no", slot_village_farmer_party),
          (try_begin),
            (gt, ":farmer_party_no", 0),
            (party_is_active, ":farmer_party_no"),
            (party_set_faction, ":farmer_party_no", ":faction_no"),
	        (call_script, "script_ms_event_captured", ":farmer_party_no"),
          (try_end),
          (try_begin),
            (party_get_slot, ":old_town_lord", ":village_no", slot_town_lord),
            (neq, ":old_town_lord", ":troop_no"),
            (party_set_slot, ":village_no", slot_town_lord, stl_unassigned),
          (try_end),
        (try_end),
      (try_end),
      (try_for_range, ":village_no", villages_begin, villages_end),
        (party_slot_eq, ":village_no", slot_town_lord, ":troop_no"),
        (store_faction_of_party, ":village_faction", ":village_no"),
        (try_begin),
          (neq, ":village_faction", ":faction_no"),
          (party_set_slot, ":village_no", slot_town_lord, stl_unassigned),
        (try_end),
      (try_end),
      (try_begin),
        (troop_get_slot, ":leaded_party", ":troop_no", slot_troop_leaded_party),
        (ge, ":leaded_party", 0),
        (party_set_faction, ":leaded_party", ":faction_no"),
		(call_script, "script_ms_event_captured", ":leaded_party"),
        (party_get_num_prisoner_stacks, ":num_stacks", ":leaded_party"),
        (try_for_range_backwards, ":troop_iterator", 0, ":num_stacks"),
          (party_prisoner_stack_get_troop_id, ":cur_troop_id", ":leaded_party", ":troop_iterator"),
          (store_troop_faction, ":cur_faction", ":cur_troop_id"),
          (troop_is_hero, ":cur_troop_id"),
          (eq, ":cur_faction", ":faction_no"),
          (call_script, "script_remove_troop_from_prison", ":cur_troop_id"),
          (party_remove_prisoners, ":leaded_party", ":cur_troop_id", 1),
        (try_end),
      (try_end),
      (call_script, "script_update_all_notes"),

      (call_script, "script_update_village_market_towns"),
      (assign, "$g_recalculate_ais", 1),
      ]),


  # script_give_center_to_lord
  # Input: arg1 = center_no, arg2 = lord_troop, arg3 = add_garrison_to_center
  ("give_center_to_lord",
    [
      (store_script_param, ":center_no", 1),
      (store_script_param, ":lord_troop_id", 2),
      (store_script_param, ":unused", 3),
	  
	  #ms system fix
	  (call_script, "script_ms_remove_elemnts_in_construct", ":center_no"), 
	  #ms system fix end
	  
      (party_get_slot, ":old_lord_troop_id", ":center_no", slot_town_lord),
		(store_troop_faction, ":lord_troop_faction", ":lord_troop_id"),
	  (try_begin),
        (eq, ":lord_troop_id", "trp_player"),
        (gt, "$players_kingdom", 0),
        (party_set_faction, ":center_no", "$players_kingdom"),
      (else_try),
        (eq, ":lord_troop_id", "trp_player"),
        (le, "$players_kingdom", 0),
        (party_set_faction, ":center_no", "fac_player_supporters_faction"),
      (else_try),
        (party_set_faction, ":center_no", ":lord_troop_faction"),
      (try_end),
      (party_set_slot, ":center_no", slot_town_lord, ":lord_troop_id"),
	  (call_script, "script_ms_event_captured", ":center_no"),
      (try_begin),
        (party_slot_eq, ":center_no", slot_party_type, spt_village),
        (party_get_slot, ":farmer_party_no", ":center_no", slot_village_farmer_party),
        (gt, ":farmer_party_no", 0),
        (party_is_active, ":farmer_party_no"),
        (store_faction_of_party, ":center_faction", ":center_no"),
        (party_set_faction, ":farmer_party_no", ":center_faction"),
		(call_script, "script_ms_event_captured", ":farmer_party_no"),
      (try_end),
    (try_begin),
        (this_or_next|party_slot_eq, ":center_no", slot_party_type, spt_town),
			(party_slot_eq, ":center_no", slot_party_type, spt_castle),
#normal_banner_begin
        (troop_get_slot, ":cur_banner", ":lord_troop_id", slot_troop_banner_scene_prop),
        (gt, ":cur_banner", 0),
        (val_sub, ":cur_banner", banner_scene_props_begin),
        (val_add, ":cur_banner", banner_map_icons_begin),
        (party_set_banner_icon, ":center_no", ":cur_banner"),
# custom_banner_begin
#        (troop_get_slot, ":flag_icon", ":lord_troop_id", slot_troop_custom_banner_map_flag_type),
#        (ge, ":flag_icon", 0),
#        (val_add, ":flag_icon", custom_banner_map_icons_begin),
#        (party_set_banner_icon, ":center_no", ":flag_icon"),
    (try_end),
      (try_begin),
        (eq, ":lord_troop_id", "trp_player"),
        (neq, ":old_lord_troop_id", "trp_player"),
        (party_get_slot, ":center_relation", ":center_no", slot_center_player_relation),
        (is_between, ":center_relation", -4, 5),
        (call_script, "script_change_player_relation_with_center", ":center_no", 15),
        (gt, ":old_lord_troop_id", 0),
		(try_begin), 
			(neg|check_quest_active, "qst_oim_potop_main"),
			(neq, ":old_lord_troop_id", "$g_talk_troop"),
			(call_script, "script_change_player_relation_with_troop", ":old_lord_troop_id", -25),
		(try_end),
      (try_end),
		(call_script, "script_update_troop_notes", ":lord_troop_id"),
    (call_script, "script_update_center_notes", ":center_no"),
    (call_script, "script_update_faction_notes", ":lord_troop_faction"),
    (try_begin),
        (ge, ":old_lord_troop_id", 0),
        (call_script, "script_update_troop_notes", ":old_lord_troop_id"),
        (store_troop_faction, ":old_lord_troop_faction", ":old_lord_troop_id"),
        (call_script, "script_update_faction_notes", ":old_lord_troop_faction"),
    (try_end),
	(try_begin),
        (party_slot_eq, ":center_no", slot_party_type, spt_castle),
        (try_for_range, ":cur_village", villages_begin, villages_end),
			(party_slot_eq, ":cur_village", slot_village_bound_center, ":center_no"),
			(call_script, "script_give_center_to_lord", ":cur_village", ":lord_troop_id", 0),
        (try_end),
    (try_end),
	
  ]),
  
##  # script_give_town_to_besiegers
##  # Input: arg1 = center_no, arg2 = besieger_party
##  ("give_town_to_besiegers",
##    [
##      (store_script_param_1, ":center_no"),
##      (store_script_param_2, ":besieger_party"),
##      (store_faction_of_party, ":besieger_faction", ":besieger_party"),
##      
##      (try_begin),
##        (call_script, "script_cf_get_party_leader", ":besieger_party"),
##        (assign, ":new_leader", reg0),
##      (else_try),
##        (call_script, "script_select_kingdom_hero_for_new_center", ":besieger_faction"),
##        (assign, ":new_leader", reg0),
##      (try_end),
##      
##      (call_script, "script_give_center_to_lord", ":center_no", ":new_leader"),
##      
##      (try_for_parties, ":party_no"),
##        (get_party_ai_object, ":object", ":party_no"),
##        (get_party_ai_behavior, ":behavior", ":party_no"),
##        (eq, ":object", ":center_no"),
##        (this_or_next|eq, ":behavior", ai_bhvr_travel_to_party),
##        (eq, ":behavior", ai_bhvr_attack_party),
##        (party_set_ai_behavior, ":party_no", ai_bhvr_hold),
##        (party_set_slot, ":party_no", slot_party_ai_state, spai_undefined),
##        (party_set_flags, ":party_no", pf_default_behavior, 0),
##      (try_end),
##      
##      #Staying at the center for a while
##      (party_set_ai_behavior, ":besieger_party", ai_bhvr_hold),
##      (party_set_slot, ":besieger_party", slot_party_ai_state, spai_undefined),
##      (party_set_flags, ":besieger_party", pf_default_behavior, 0),
##      
##      (faction_get_slot, ":reinforcement_a", ":besieger_faction", slot_faction_reinforcements_a),
##      (faction_get_slot, ":reinforcement_b", ":besieger_faction", slot_faction_reinforcements_b),
##      (party_add_template, ":center_no", ":reinforcement_a"),
##      (party_add_template, ":center_no", ":reinforcement_b"),
##  ]),
##  
  
  # script_get_number_of_hero_centers
  # Input: arg1 = troop_no
  # Output: reg0 = number of centers that are ruled by the hero
  ("get_number_of_hero_centers",
    [
      (store_script_param_1, ":troop_no"),
      (assign, ":result", 0),
      (try_for_range, ":center_no", centers_begin, centers_end),
        (party_slot_eq, ":center_no", slot_town_lord, ":troop_no"),
        (val_add, ":result", 1),
      (try_end),
      (assign, reg0, ":result"),
  ]),
  
  
  ##  # script_cf_get_new_center_leader_chance_for_troop
  ##  # Input: arg1 = troop_no
  ##  # Output: reg0 = chance of the troop to rule a new center
  ##  ("cf_get_new_center_leader_chance_for_troop",
  ##    [
  ##      (store_script_param_1, ":troop_no"),
  ##      (troop_get_slot, ":troop_rank", ":troop_no", slot_troop_kingdom_rank),
  ##      (try_begin),
  ##        (eq, ":troop_rank", 4),
  ##        (assign, ":troop_chance", 1000),
  ##      (else_try),
  ##        (eq, ":troop_rank", 3),
  ##        (assign, ":troop_chance", 800),
  ##      (else_try),
  ##        (eq, ":troop_rank", 2),
  ##        (assign, ":troop_chance", 400),
  ##      (else_try),
  ##        (eq, ":troop_rank", 1),
  ##        (assign, ":troop_chance", 100),
  ##      (else_try),
  ##        (assign, ":troop_chance", 10),
  ##      (try_end),
  ##
  ##      (call_script, "script_get_number_of_hero_centers", ":troop_no"),
  ##      (assign, ":number_of_hero_centers", reg0),
  ##      (try_begin),
  ##        (gt, ":number_of_hero_centers", 0),
  ##        (val_mul, ":number_of_hero_centers", 2),
  ##        (val_mul, ":number_of_hero_centers", ":number_of_hero_centers"),
  ##        (val_div, ":troop_chance", ":number_of_hero_centers"),
  ##      (try_end),
  ##      (assign, reg0, ":troop_chance"),
  ##      (eq, reg0, 0),
  ##      (assign, reg0, 1),
  ##  ]),
  
  
##  # script_select_kingdom_hero_for_new_center
##  # Input: arg1 = faction_no
##  # Output: reg0 = troop_no as the new leader
##  ("select_kingdom_hero_for_new_center",
##    [
##      (store_script_param_1, ":kingdom"),
##      
##      (assign, ":min_num_centers", -1),
##      (assign, ":min_num_centers_troop", -1),
##      
##      (try_for_range, ":troop_no", kingdom_heroes_begin, kingdom_heroes_end),
##        (troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_hero),
##        (store_troop_faction, ":troop_faction", ":troop_no"),
##        (eq, ":troop_faction", ":kingdom"),
##        (call_script, "script_get_number_of_hero_centers", ":troop_no"),
##        (assign, ":num_centers", reg0),
##        (try_begin),
##          (lt, ":num_centers", ":min_num_centers"),
##          (assign, ":min_num_centers", ":num_centers"),
##          (assign, ":min_num_centers_troop", ":troop_no"),
##        (try_end),
##      (try_end),
##      (assign, reg0, ":min_num_centers_troop"),
##  ]),
  
  
  # script_cf_get_random_enemy_center
  # Input: arg1 = party_no
  # Output: reg0 = center_no
  ("cf_get_random_enemy_center",
    [
      (store_script_param_1, ":party_no"),
      
      (assign, ":result", -1),
      (assign, ":total_enemy_centers", 0),
      (store_faction_of_party, ":party_faction", ":party_no"),
      
      (try_for_range, ":center_no", centers_begin, centers_end),
        (store_faction_of_party, ":center_faction", ":center_no"),
        (store_relation, ":party_relation", ":center_faction", ":party_faction"),
        (lt, ":party_relation", 0),
        (val_add, ":total_enemy_centers", 1),
      (try_end),

      (gt, ":total_enemy_centers", 0),
      (store_random_in_range, ":random_center", 0, ":total_enemy_centers"),
      (assign, ":total_enemy_centers", 0),
      (try_for_range, ":center_no", centers_begin, centers_end),
        (eq, ":result", -1),
        (store_faction_of_party, ":center_faction", ":center_no"),
        (store_relation, ":party_relation", ":center_faction", ":party_faction"),
        (lt, ":party_relation", 0),
        (val_sub, ":random_center", 1),
        (lt, ":random_center", 0),
        (assign, ":result", ":center_no"),
      (try_end),
      (assign, reg0, ":result"),
  ]),
  
  
##  # script_get_random_enemy_town
##  # Input: arg1 = party_no
##  # Output: reg0 = center_no
##  ("get_random_enemy_town",
##    [
##      (store_script_param_1, ":party_no"),
##      
##      (assign, ":result", -1),
##      (assign, ":total_enemy_centers", 0),
##      (store_faction_of_party, ":party_faction", ":party_no"),
##      
##      (try_for_range, ":center_no", towns_begin, towns_end),
##        (store_faction_of_party, ":center_faction", ":center_no"),
##        (neq, ":center_faction", ":party_faction"),
##        (val_add, ":total_enemy_centers", 1),
##      (try_end),
##      
##      (try_begin),
##        (eq, ":total_enemy_centers", 0),
##      (else_try),
##        (store_random_in_range, ":random_center", 0, ":total_enemy_centers"),
##        (assign, ":total_enemy_centers", 0),
##        (try_for_range, ":center_no", towns_begin, towns_end),
##          (eq, ":result", -1),
##          (store_faction_of_party, ":center_faction", ":center_no"),
##          (neq, ":center_faction", ":party_faction"),
##          (store_relation, ":party_relation", ":center_faction", ":party_faction"),
##          (le, ":party_relation", -10),
##          (val_add, ":total_enemy_centers", 1),
##          (lt, ":random_center", ":total_enemy_centers"),
##          (assign, ":result", ":center_no"),
##        (try_end),
##      (try_end),
##      (assign, reg0, ":result"),
##  ]),
       
  
  
  # script_find_travel_location
  # Input: arg1 = center_no
  # Output: reg0 = new_center_no (to travel within the same faction)
  ("find_travel_location",
    [
  ]),
  
  
  # script_get_relation_between_parties
  # Input: arg1 = party_no_1, arg2 = party_no_2
  # Output: reg0 = relation between parties
  ("get_relation_between_parties",
    [
      (store_script_param_1, ":party_no_1"),
      (store_script_param_2, ":party_no_2"),
      
      (store_faction_of_party, ":party_no_1_faction", ":party_no_1"),
      (store_faction_of_party, ":party_no_2_faction", ":party_no_2"),
      (try_begin),
        (eq, ":party_no_1_faction", ":party_no_2_faction"),
        (assign, reg0, 100),
      (else_try),
        (store_relation, ":relation", ":party_no_1_faction", ":party_no_2_faction"),
        (assign, reg0, ":relation"),
      (try_end),
  ]),
  # script_calculate_weekly_party_wage
  # Input: arg1 = party_no
  # Output: reg0 = weekly wage
  ("calculate_weekly_party_wage",
    [
      (store_script_param_1, ":party_no"),
      
      (assign, ":result", 0),
      (party_get_num_companion_stacks, ":num_stacks",":party_no"),
      (try_for_range, ":i_stack", 0, ":num_stacks"),
        (party_stack_get_troop_id, ":stack_troop",":party_no",":i_stack"),
        (party_stack_get_size, ":stack_size",":party_no",":i_stack"),
        (call_script, "script_npc_get_troop_wage", ":stack_troop", ":party_no"),
        (assign, ":cur_wage", reg0),
        (val_mul, ":cur_wage", ":stack_size"),
        (val_add, ":result", ":cur_wage"),
      (try_end),
      (assign, reg0, ":result"),
  ]),

  # script_calculate_player_faction_wage
  # Input: arg1 = party_no
  # Output: reg0 = weekly wage
  ("calculate_player_faction_wage",
    [(assign, ":nongarrison_wages", 0),
     (assign, ":garrison_wages", 0),
     (try_for_parties, ":party_no"),
       (assign, ":garrison_troop", 0),
       (try_begin),
         (this_or_next|party_slot_eq, ":party_no", slot_party_type, spt_town),
         (party_slot_eq, ":party_no", slot_party_type, spt_castle),
         (party_slot_eq, ":party_no", slot_town_lord, "trp_player"),
         (assign, ":garrison_troop", 1),
       (try_end),
       (this_or_next|eq, ":party_no", "p_main_party"),
       (eq, ":garrison_troop", 1),
       (party_get_num_companion_stacks, ":num_stacks",":party_no"),
       (try_for_range, ":i_stack", 0, ":num_stacks"),
         (party_stack_get_troop_id, ":stack_troop",":party_no",":i_stack"),
         (party_stack_get_size, ":stack_size",":party_no",":i_stack"),
         (call_script, "script_game_get_troop_wage", ":stack_troop", ":party_no"),
         (assign, ":cur_wage", reg0),
         (val_mul, ":cur_wage", ":stack_size"),
         (try_begin),
           (eq, ":garrison_troop", 1),
           (val_add, ":garrison_wages", ":cur_wage"),
         (else_try),
           (val_add, ":nongarrison_wages", ":cur_wage"),
         (try_end),
       (try_end),
     (try_end),
     (val_div, ":garrison_wages", 2),#Half payment for garrisons
     (store_sub, ":total_payment", 14, "$g_cur_week_half_daily_wage_payments"), #between 0 and 7
     (val_mul, ":nongarrison_wages", ":total_payment"),
     (val_div, ":nongarrison_wages", 14),
     (store_add, reg0, ":nongarrison_wages", ":garrison_wages"),
    ]),
  
  # script_calculate_hero_weekly_net_income_and_add_to_wealth
  # Input: arg1 = troop_no
  # Output: none
  ("calculate_hero_weekly_net_income_and_add_to_wealth",
    [
      (store_script_param_1, ":troop_no"),
      
      (troop_get_slot, ":party_no", ":troop_no", slot_troop_leaded_party),
      (troop_get_slot, ":cur_wealth", ":troop_no", slot_troop_wealth),
      
      (assign, ":weekly_income", 750), #let every hero receive 750 denars by default
      
      (store_character_level, ":troop_level", ":troop_no"),
      (store_mul, ":level_income", ":troop_level", 10),
      (val_add, ":weekly_income", ":level_income"),
      
      (store_troop_faction,":faction_no", ":troop_no"),
      (try_begin), #check if troop is kingdom leader
        (faction_slot_eq, ":faction_no", slot_faction_leader, ":troop_no"),
        (val_add, ":weekly_income", 1500),
      (try_end),
      
      (assign, ":cur_weekly_wage", 0),
      (try_begin),
        (gt, ":party_no",0),
        (call_script, "script_calculate_weekly_party_wage", ":party_no"),
        (assign, ":cur_weekly_wage", reg0),
      (try_end),
      (val_sub, ":weekly_income", ":cur_weekly_wage"),
      
      (val_add, ":cur_wealth", ":weekly_income"),
      (val_max, ":cur_wealth", 0),
      (troop_set_slot, ":troop_no", slot_troop_wealth, ":cur_wealth"),
  ]),
  
  # script_cf_reinforce_party
  # Input: arg1 = party_no,
  # Output: none
  # Adds reinforcement to party according to its type and faction
  ("cf_reinforce_party",
    [
      (store_script_param_1, ":party_no"),
      
      (store_faction_of_party, ":party_faction", ":party_no"),
      (try_begin),
        (eq, ":party_faction", "fac_player_supporters_faction"),
	  	(assign, ":party_faction", "$supported_pretender_old_faction"),
        (try_end),
        (try_begin),
	  	(neg|is_between, ":party_faction", "fac_kingdom_1", kingdoms_end),
	  	(party_get_slot, ":party_faction", ":party_no", slot_center_original_faction),
      (try_end),
	  
	  (call_script, "script_ms_fill_random_army_template_to_party", ":party_no", ":party_faction", 4), 
  ]),
  
  # script_hire_men_to_kingdom_hero_party
  # Input: arg1 = troop_no (hero of the party)
  # Output: none
  ("hire_men_to_kingdom_hero_party",
    [
  ]),

  # script_get_percentage_with_randomized_round
  # Input: arg1 = value, arg2 = percentage
  # Output: none
  ("get_percentage_with_randomized_round",
    [
      ]),
  
  # script_create_cattle_herd
  # Input: arg1 = center_no, arg2 = amount (0 = default)
  # Output: reg0 = party_no
  ("create_cattle_herd",
    [
      (store_script_param_1, ":center_no"),
      (store_script_param_2, ":amount"),
      
      (assign, ":herd_party", -1),
      (set_spawn_radius,1),

      (spawn_around_party,":center_no", "pt_cattle_herd"),
      (assign, ":herd_party", reg0),
      (party_get_position, pos1, ":center_no"),
      (call_script, "script_map_get_random_position_around_position_within_range", 1, 2),
      (party_set_position, ":herd_party", pos2),

      (party_set_slot, ":herd_party", slot_party_type, spt_cattle_herd),
      #(party_set_slot, ":herd_party", slot_party_ai_state, spai_undefined),
      #(party_set_ai_behavior, ":herd_party", ai_bhvr_hold),
	  
      (party_set_slot, ":herd_party", slot_party_ai_state, spai_undefined),
	  (party_set_ai_behavior, ":herd_party", ai_bhvr_escort_party),
	  (party_set_ai_object, ":herd_party", "p_main_party"),
	  (party_set_flags, ":herd_party", pf_default_behavior, 0),
	  

      (party_set_slot, ":herd_party", slot_party_commander_party, -1), #we need this because 0 is player's party!

      (try_begin),
        (gt, ":amount", 0),
        (party_clear, ":herd_party"),
        (party_add_members, ":herd_party", "trp_cattle", ":amount"),
      (try_end),
       
      (assign, reg0, ":herd_party"),
  ]),

  #script_buy_cattle_from_village
  # Input: arg1 = village_no, arg2 = amount, arg3 = single_cost
  # Output: reg0 = party_no
  ("buy_cattle_from_village",
    [
      (store_script_param, ":village_no", 1),
      (store_script_param, ":amount", 2),
      (store_script_param, ":single_cost", 3),

      #Changing price of the cattle
      (try_for_range, ":unused", 0, ":amount"),
        (call_script, "script_game_event_buy_item", "itm_cattle_meat", 0),
        (call_script, "script_game_event_buy_item", "itm_cattle_meat", 0),
      (try_end),

      (party_get_slot, ":num_cattle", ":village_no", slot_village_number_of_cattle),
      (val_sub, ":num_cattle", ":amount"),
      (party_set_slot, ":village_no", slot_village_number_of_cattle, ":num_cattle"),
      (store_mul, ":cost", ":single_cost", ":amount"),	  
      (troop_remove_gold, "trp_player", ":cost"),

      (assign, ":continue", 1),
      (try_for_parties, ":cur_party"),
        (eq, ":continue", 1),
        (party_slot_eq, ":cur_party", slot_party_type, spt_cattle_herd),
        (store_distance_to_party_from_party, ":dist", ":village_no", ":cur_party"),
        (lt, ":dist", 6),
        (assign, ":subcontinue", 1),
        (try_begin),
          (check_quest_active, "qst_move_cattle_herd"),
          (quest_slot_eq, "qst_move_cattle_herd", slot_quest_target_party, ":cur_party"),
          (assign, ":subcontinue", 0),
        (try_end),
        (eq, ":subcontinue", 1),
        (party_add_members, ":cur_party", "trp_cattle", ":amount"),
        (assign, ":continue", 0),
        (assign, reg0, ":cur_party"),
      (try_end),
      (try_begin),
        (eq, ":continue", 1),
        (call_script, "script_create_cattle_herd", ":village_no", ":amount"),
      (try_end),
  ]),

  #script_kill_cattle_from_herd
  # Input: arg1 = party_no, arg2 = amount
  # Output: none (fills trp_temp_troop's inventory)
  ("kill_cattle_from_herd",
    [
      (store_script_param_1, ":party_no"),
      (store_script_param_2, ":amount"),

      (troop_clear_inventory, "trp_temp_troop"),
      (store_mul, ":meat_amount", ":amount", 2),
      (troop_add_items, "trp_temp_troop", "itm_cattle_meat", ":meat_amount"),

      (troop_get_inventory_capacity, ":inv_size", "trp_temp_troop"),
      (try_for_range, ":i_slot", 0, ":inv_size"),
        (troop_get_inventory_slot, ":item_id", "trp_temp_troop", ":i_slot"),
        (eq, ":item_id", "itm_cattle_meat"),
        (troop_set_inventory_slot_modifier, "trp_temp_troop", ":i_slot", imod_fresh),
      (try_end),

      (party_get_num_companions, ":num_cattle", ":party_no"),
      (try_begin),
        (ge, ":amount", ":num_cattle"),
        (remove_party, ":party_no"),
      (else_try),
        (party_remove_members, ":party_no", "trp_cattle", ":amount"),
      (try_end),
      ]),
  
  # script_create_kingdom_hero_party
  # Input: arg1 = troop_no, arg2 = center_no
  # Output: $pout_party = party_no
  ("create_kingdom_hero_party",
    [
      (store_script_param, ":troop_no", 1),
      (store_script_param, ":center_no", 2),
      (store_script_param, ":flag", 3),
      (store_troop_faction, ":troop_faction_no", ":troop_no"),
      
      (assign, "$pout_party", -1),
      (set_spawn_radius, 0),
      (spawn_around_party, ":center_no", "pt_kingdom_hero_party"),
      (assign, "$pout_party", reg0),
      
      (party_set_faction, "$pout_party", ":troop_faction_no"),
      (party_set_slot, "$pout_party", slot_party_type, spt_kingdom_hero_party),
      (call_script, "script_party_set_ai_state", "$pout_party", spai_undefined, -1),
      (troop_set_slot, ":troop_no", slot_troop_leaded_party, "$pout_party"),
      (party_add_leader, "$pout_party", ":troop_no"),
	  (troop_set_slot, ":troop_no", slot_troop_last_recruting_time, -10),
      (str_store_troop_name, s5, ":troop_no"),
      (party_set_name, "$pout_party", "str_s5_s_party"),
      
      (party_set_slot, "$pout_party", slot_party_commander_party, -1), #we need this because 0 is player's party!

      #Setting the flag icon
      #normal_banner_begin
      (troop_get_slot, ":cur_banner", ":troop_no", slot_troop_banner_scene_prop),
      (try_begin),
        (gt, ":cur_banner", 0),
        (val_sub, ":cur_banner", banner_scene_props_begin),
        (val_add, ":cur_banner", banner_map_icons_begin),
        (party_set_banner_icon, "$pout_party", ":cur_banner"),
      #custom_banner_begin
      #(troop_get_slot, ":flag_icon", ":troop_no", slot_troop_custom_banner_map_flag_type),
      #(try_begin),
      #  (ge, ":flag_icon", 0),
      #  (val_add, ":flag_icon", custom_banner_map_icons_begin),
      #  (party_set_banner_icon, "$pout_party", ":flag_icon"),
      (try_end),

      (try_begin),
        (troop_slot_eq, ":troop_no", slot_troop_spawned_before, 0),
        (troop_set_slot, ":troop_no", slot_troop_spawned_before, 1),
        #(assign, ":num_tries", 20),
        #(try_begin),
        #  (store_troop_faction, ":troop_kingdom", ":troop_no"),
        #  (faction_slot_eq, ":troop_kingdom", slot_faction_leader, ":troop_no"),
        #  (assign, ":num_tries", 50),
        #(try_end),

        #(try_for_range, ":unused", 0, ":num_tries"),
         # (call_script, "script_hire_men_to_kingdom_hero_party", ":troop_no"),
        #(try_end),
        (try_begin),
			(eq, ":flag", 1),
			(call_script, "script_ms_fill_ai_officer_troops"),
        (try_end),
        (store_random_in_range, ":xp_rounds", 2, 6),
        (troop_get_slot, ":renown", ":troop_no", slot_troop_renown),
        (store_div, ":renown_xp_rounds", ":renown", 100),
        (val_add, ":xp_rounds", ":renown_xp_rounds"),
        (try_for_range, ":unused", 0, ":xp_rounds"),
          (call_script, "script_upgrade_hero_party", "$pout_party", 4000),
        (try_end),
      (try_end),
	  #setting up icon
	  (try_begin),
		(eq, ":troop_faction_no", "fac_kingdom_1"), 
		(assign, ":party_icon", "icon_rp_lord"), 
	  (else_try), 	
		(eq, ":troop_faction_no", "fac_kingdom_2"), 
		(assign, ":party_icon", "icon_rus_lord"), 
	  (else_try), 	
		(eq, ":troop_faction_no", "fac_kingdom_3"), 
		(assign, ":party_icon", "icon_tatar_lord"), 
	  (else_try), 	
		(eq, ":troop_faction_no", "fac_kingdom_4"), 
		(assign, ":party_icon", "icon_ewro_lord"), 
	  (else_try), 	
		(assign, ":party_icon", "icon_tatar_lord"), 
	  (try_end), 
	  (try_begin), 
		(party_slot_eq, "$pout_party", slot_party_type, spt_kingdom_hero_party),
		(party_set_icon, "$pout_party", ":party_icon"),	  
	  (try_end),	
  ]),
  
  # script_create_kingdom_party_if_below_limit
  # Input: arg1 = faction_no, arg2 = party_type (variables beginning with spt_)
  # Output: reg0 = party_no
  ("create_kingdom_party_if_below_limit",
    [
      (store_script_param_1, ":faction_no"),
      (store_script_param_2, ":party_type"),

      (call_script, "script_count_parties_of_faction_and_party_type", ":faction_no", ":party_type"),
      (assign, ":party_count", reg0),
      
      (assign, ":party_count_limit", 0),

      (faction_get_slot, ":num_towns", ":faction_no", slot_faction_num_towns),

      (try_begin),
##        (eq, ":party_type", spt_forager),
##        (assign, ":party_count_limit", 1),
##      (else_try),
##        (eq, ":party_type", spt_scout),
##        (assign, ":party_count_limit", 1),
##      (else_try),
##        (eq, ":party_type", spt_patrol),
##        (assign, ":party_count_limit", 1),
##      (else_try),
##        (eq, ":party_type", spt_messenger),
##        (assign, ":party_count_limit", 1),
##      (else_try),
        (eq, ":party_type", spt_kingdom_caravan),
        (try_begin),
          (eq, ":num_towns", 0),
          (assign, ":party_count_limit", 0),
        (else_try),
          (eq, ":num_towns", 1),
          (assign, ":party_count_limit", 1),
        (else_try),
          (eq, ":num_towns", 2),
          (assign, ":party_count_limit", 3),
        (else_try),
          (assign, ":party_count_limit", 6),
        (try_end),
##      (else_try),
##        (eq, ":party_type", spt_prisoner_train),
##        (assign, ":party_count_limit", 1),
      (try_end),
      
      (assign, reg0, -1),
      (try_begin),
        (lt, ":party_count", ":party_count_limit"),
        (call_script,"script_cf_create_kingdom_party", ":faction_no", ":party_type"),
      (try_end),
  ]),
  
  
  # script_cf_create_kingdom_party
  # Input: arg1 = faction_no, arg2 = party_type (variables beginning with spt_)
  # Output: reg0 = party_no
  ("cf_create_kingdom_party",
    [
      (store_script_param_1, ":faction_no"),
      (store_script_param_2, ":party_type"),
      
      (str_store_faction_name, s7, ":faction_no"),
      (assign, ":party_name_str", "str_no_string"),
      
      (faction_get_slot, ":reinforcements_b", ":faction_no", slot_faction_reinforcements_b),
      
      (try_begin),
        (eq, ":party_type", spt_kingdom_caravan),
        (assign, ":party_template", "pt_kingdom_caravan_party"),
      (try_end),
      
      (assign, ":result", -1),
      (try_begin),
        (try_begin),
          (eq, ":party_type", spt_kingdom_caravan),
          (call_script,"script_cf_select_random_town_with_faction", ":faction_no", -1),
          (set_spawn_radius, 0),
        (else_try), #not used at the moment
          (call_script,"script_cf_select_random_walled_center_with_faction", ":faction_no", -1),
          (set_spawn_radius, 1),
        (try_end),
        (assign, ":spawn_center", reg0),
        (is_between, ":spawn_center", centers_begin, centers_end),
        (spawn_around_party,":spawn_center",":party_template"),
        (assign, ":result", reg0),
        (party_set_faction, ":result", ":faction_no"),
        (try_begin),
          (eq, ":party_type", spt_kingdom_caravan),
          (party_set_slot, ":result", slot_party_home_center, ":spawn_center"),
		(try_end),
        (party_set_slot, ":result", slot_party_type, ":party_type"),
        (party_set_slot, ":result", slot_party_ai_state, spai_undefined),
        (try_begin),
          (neq, ":party_name_str", "str_no_string"),
          (party_set_name, ":result", ":party_name_str"),
        (try_end),
        
        (try_begin),
          (eq, ":party_type", spt_kingdom_caravan),
          (party_add_template, ":result", ":reinforcements_b"),
          (party_add_template, ":result", ":reinforcements_b"),		  
          (party_set_ai_behavior,":result",ai_bhvr_travel_to_party),
          (party_set_ai_object,":result",":spawn_center"),
          (party_set_flags, ":result", pf_default_behavior, 1),
          (store_sub, ":item_to_price_slot", slot_town_trade_good_prices_begin, trade_goods_begin),
          (try_for_range, ":cur_goods", trade_goods_begin, trade_goods_end),
            (store_add, ":cur_goods_price_slot", ":cur_goods", ":item_to_price_slot"),
            (party_set_slot, ":result", ":cur_goods_price_slot", average_price_factor),
          (try_end),
        (try_end),
      (try_end),
      (ge, ":result", 0),
      (assign, reg0, ":result"),
  ]),
  
  # script_get_troop_attached_party
  # Input: arg1 = troop_no
  # Output: reg0 = party_no (-1 if troop's party is not attached to a party)
  ("get_troop_attached_party",
    [
      (store_script_param_1, ":troop_no"),
      
      (troop_get_slot, ":party_no", ":troop_no", slot_troop_leaded_party),
      (assign, ":attached_party_no", -1),
      (try_begin),
        (ge, ":party_no", 0),
        (party_get_attached_to, ":attached_party_no", ":party_no"),
      (try_end),
      (assign, reg0, ":attached_party_no"),
  ]),


  # script_center_get_food_consumption
  # Input: arg1 = center_no
  # Output: reg0: food consumption (1 food item counts as 100 units)
  ("center_get_food_consumption",
    [
      (store_script_param_1, ":center_no"),
      (assign, ":food_consumption", 0),
      (try_begin),
        (party_slot_eq, ":center_no", slot_party_type, spt_town),
        (assign, ":food_consumption", 500),
      (else_try),
        (party_slot_eq, ":center_no", slot_party_type, spt_castle),
        (assign, ":food_consumption", 50),
      (try_end),
      (assign, reg0, ":food_consumption"),
  ]),
  
  # script_center_get_food_store_limit
  # Input: arg1 = center_no
  # Output: reg0: food consumption (1 food item counts as 100 units)
  ("center_get_food_store_limit",
    [
      (store_script_param_1, ":center_no"),
      (assign, ":food_store_limit", 0),
      (try_begin),
        (party_slot_eq, ":center_no", slot_party_type, spt_town),
        (assign, ":food_store_limit", 50000),
      (else_try),
        (party_slot_eq, ":center_no", slot_party_type, spt_castle),
        (assign, ":food_store_limit", 1500),
      (try_end),
      (assign, reg0, ":food_store_limit"),
  ]),

  # script_refresh_village_merchant_inventory
  # Input: arg1 = village_no
  # Output: none
  ("refresh_village_merchant_inventory",
    [
      (store_script_param_1, ":village_no"),
      (party_get_slot, ":merchant_troop", ":village_no", slot_town_elder),
      (reset_item_probabilities,0),      	  

	  (party_get_slot, ":bound_center", ":village_no", slot_village_bound_center),

	  (assign, ":total_probability", 0),
      (try_for_range, ":cur_good", trade_goods_begin, trade_goods_end),		
        (store_sub, ":item_production_slot_no", ":cur_good", trade_goods_begin),
        (val_add, ":item_production_slot_no", slot_town_trade_good_productions_begin),
        (party_get_slot, ":cur_probability", ":village_no", ":item_production_slot_no"),

        (party_get_slot, ":bound_center_production", ":bound_center", ":item_production_slot_no"),
		(val_div, ":bound_center_production", 5), #also add 1/5 of bound center production to village's inventory.
		(val_add, ":cur_probability", ":bound_center_production"),

		(val_max, ":cur_probability", 5),	
		(val_mul, ":cur_probability", 4),		
	  
		(val_add, ":total_probability", ":cur_probability"),
      (try_end),
	  
	  (party_get_slot, ":prosperity", ":village_no", slot_town_prosperity),	  	  
	  (store_div, ":prosperity_div_15", ":prosperity", 15), #up to 6
      (store_add, ":number_of_items_in_village", ":prosperity_div_15", 1),

      (try_for_range, ":cur_good", trade_goods_begin, trade_goods_end),
        (store_sub, ":item_production_slot_no", ":cur_good", trade_goods_begin),
        (val_add, ":item_production_slot_no", slot_town_trade_good_productions_begin),
        (party_get_slot, ":cur_probability", ":village_no", ":item_production_slot_no"),

        (party_get_slot, ":bound_center_production", ":bound_center", ":item_production_slot_no"),
		(val_div, ":bound_center_production", 5), #also add 1/5 of bound center production to village's inventory.
		(val_add, ":cur_probability", ":bound_center_production"),

		(val_max, ":cur_probability", 5),	

		(val_mul, ":cur_probability", 4),

        (val_mul, ":cur_probability", ":number_of_items_in_village"),
		(val_mul, ":cur_probability", 100),
		(val_div, ":cur_probability", ":total_probability"),

        (set_item_probability_in_merchandise, ":cur_good", ":cur_probability"),
      (try_end),

	  (troop_clear_inventory, ":merchant_troop"),
      (troop_add_merchandise, ":merchant_troop", itp_type_goods, ":number_of_items_in_village"),
      (troop_ensure_inventory_space, ":merchant_troop", 80),	 	  

	  #Adding some small amount of gold to village (average is 15 (50 / 10 + 10) for 72 hours)
	  (store_div, ":prosperity_div_10_plus_10", ":prosperity", 10),
	  (val_add, ":prosperity_div_10_plus_10", 10),
	  (troop_add_gold, ":merchant_troop", ":prosperity_div_10_plus_10"),

      #Adding 1 prosperity to the village while reducing each (prosperity * 20) gold from the elder
	  #note : if a village have less prosperity it will gain prosperity faster from money it gained.
	  (store_mul, ":prosperity_increase_limit", ":prosperity", 20), 
	  (val_add, ":prosperity_increase_limit", 200), #min 200(prosperity : 0), average 1200(prosperity : 50), max 2200(prosperity : 100)
	  (store_mul, ":prosperity_increase_limit_modified", ":prosperity_increase_limit", 11), #multiply with 1.1
	  (val_div, ":prosperity_increase_limit_modified", 10),
	  (val_add, ":prosperity_increase_limit_modified", 200),
      (store_troop_gold, ":gold",":merchant_troop"),
      (try_begin),
        (gt, ":gold", ":prosperity_increase_limit_modified"),
        (store_div, ":prosperity_added", ":gold", ":prosperity_increase_limit"),
		(val_min, ":prosperity_added", 3), #max 3 prosperity change because of gold in each 72 hours.
        (store_mul, ":gold_removed", ":prosperity_added", ":prosperity_increase_limit"),		
        (troop_remove_gold, ":merchant_troop", ":gold_removed"),		
        (call_script, "script_change_center_prosperity", ":village_no", ":prosperity_added"),
      (try_end),
  ]),

  # script_refresh_village_merchant_inventory
  # Input: arg1 = village_no
  # Output: none
  #("refresh_village_merchant_inventory",
  #  [
  #    (store_script_param_1, ":village_no"),
  #    (party_get_slot, ":merchant_troop", ":village_no", slot_town_elder),
  #    (reset_item_probabilities,0),
  #    (store_sub, ":item_to_price_slot", slot_town_trade_good_prices_begin, trade_goods_begin),
  #    (try_for_range, ":cur_goods", trade_goods_begin, trade_goods_end),
  #      (store_add, ":cur_price_slot", ":cur_goods", ":item_to_price_slot"),
  #      (party_get_slot, ":cur_price", ":village_no", ":cur_price_slot"),
  #      (assign, ":cur_probability", 100),
  #      (val_mul, ":cur_probability", average_price_factor),
  #      (val_div, ":cur_probability", ":cur_price"),
  #      (val_mul, ":cur_probability", average_price_factor),
  #      (val_div, ":cur_probability", ":cur_price"),
  #      (val_mul, ":cur_probability", average_price_factor),
  #      (val_div, ":cur_probability", ":cur_price"),
  #      (val_mul, ":cur_probability", average_price_factor),
  #      (val_div, ":cur_probability", ":cur_price"),
  #      (set_item_probability_in_merchandise, ":cur_goods", ":cur_probability"),
  #    (try_end),
  #    (set_item_probability_in_merchandise, "itm_spice", 0),
  #    (set_item_probability_in_merchandise, "itm_velvet", 0),
  #    (troop_add_merchandise, ":merchant_troop", itp_type_goods, 3),
  #    (troop_ensure_inventory_space, ":merchant_troop", 80),
  #
  #    #Adding 1 prosperity to the village while reducing each 3000 gold from the elder
  #    (store_troop_gold, ":gold",":merchant_troop"),
  #    (try_begin),
  #      (gt, ":gold", 3500),
  #      (store_div, ":prosperity_added", ":gold", 3000),
  #      (store_mul, ":gold_removed", ":prosperity_added", 3000),
  #      (troop_remove_gold, ":merchant_troop", ":gold_removed"),
  #      (call_script, "script_change_center_prosperity", ":village_no", ":prosperity_added"),
  #    (try_end),
  #]),

  # script_refresh_village_defenders
  # Input: arg1 = village_no
  # Output: none
  ("refresh_village_defenders",
    [
      (store_script_param_1, ":village_no"),

      (assign, ":ideal_size", 50),
      (try_begin),
        (party_get_num_companions, ":party_size", ":village_no"),
        (lt, ":party_size", ":ideal_size"),
        ##(party_add_template, ":village_no", "pt_village_defenders"),
		#oim code
		(store_faction_of_party, ":village_faction", ":village_no"),		
		(try_begin), 
			(eq, ":village_faction", "fac_kingdom_1"), 
			(party_add_template, ":village_no", "pt_village_defenders_fac1"),
		(else_try), 	
			(eq, ":village_faction", "fac_kingdom_2"), 
			(party_add_template, ":village_no", "pt_village_defenders_fac2"),
		(else_try), 	
			(eq, ":village_faction", "fac_kingdom_3"), 
			(party_add_template, ":village_no", "pt_village_defenders_fac3"),
		(else_try), 	
			(eq, ":village_faction", "fac_kingdom_3"), 
			(party_add_template, ":village_no", "pt_village_defenders_fac4"),
		(else_try), 		
			(party_add_template, ":village_no", "pt_village_defenders_fac5"),
		(try_end),
      (try_end),
  ]),

  # script_village_set_state
  # Input: arg1 = center_no arg2:new_state
  # Output: reg0: food consumption (1 food item counts as 100 units)
  ("village_set_state",
    [
      (store_script_param_1, ":village_no"),
      (store_script_param_2, ":new_state"),
#      (party_get_slot, ":old_state", ":village_no", slot_village_state),
      (try_begin),
        (eq, ":new_state", 0),
        (party_set_extra_text, ":village_no", "str_empty_string"),
        (party_set_slot, ":village_no", slot_village_raided_by, -1),
      (else_try),
        (eq, ":new_state", svs_being_raided),
		(party_get_slot, ":raider_party", ":village_no", slot_village_raided_by),
		(call_script, "script_ms_before_attack", ":village_no", ":raider_party", 0),
        (party_set_extra_text, ":village_no", "@(Being Raided)"),
      (else_try),
        (eq, ":new_state", svs_looted),
		(assign, ":prosperity_change", -20),
		(store_sub, ":offset", ":village_no", towns_begin),
		(val_add, ":offset", ms_party_has_element_start_slot),
		(try_begin),
			(neg|troop_slot_eq, "trp_village_building_secret_place", ":offset", ms_flag_already_builded),
			(assign, ":prosperity_change", -60),
			(party_set_extra_text, ":village_no", "@(Looted)"),
			(str_store_party_name, s1, ":village_no"),
			#(display_message, "@OZANDEBUG : {s1} lost 60 prosperity"),
        (else_try),
			(str_store_party_name, s1, ":village_no"),
			#(display_message, "@OZANDEBUG : {s1} lost 20 prosperity"),
		(try_end),
		(party_set_slot, ":village_no", slot_village_raided_by, -1),		
        (call_script, "script_change_center_prosperity", ":village_no", ":prosperity_change"),
      (else_try),
        (eq, ":new_state", svs_under_siege),
        (party_set_extra_text, ":village_no", "@(Under Siege)"),
      (try_end),
      (party_set_slot, ":village_no", slot_village_state, ":new_state"),
  ]),


  # script_process_village_raids
  # Input: none
  # Output: none
  # called from triggers every two hours
  ("process_village_raids",
    [
       (try_for_range, ":village_no", villages_begin, villages_end),
         (party_get_slot, ":village_raid_progress", ":village_no", slot_village_raid_progress),
         (try_begin),
           (party_slot_eq, ":village_no", slot_village_state, 0), #village is normal
           (val_sub, ":village_raid_progress", 5),
           (val_max, ":village_raid_progress", 0),
           (party_set_slot, ":village_no", slot_village_raid_progress, ":village_raid_progress"),
           (try_begin),                          
             (try_begin),
               (party_get_icon, ":village_icon", ":village_no"),
               (neq, ":village_icon", "icon_village_a"),
               (party_set_icon, ":village_no", "icon_village_a"),
             (try_end),
             
             (party_slot_ge, ":village_no", slot_village_smoke_added, 1),
             (party_set_slot, ":village_no", slot_village_smoke_added, 0),             
             (party_clear_particle_systems, ":village_no"),
           (try_end),
         (else_try),
           (party_slot_eq, ":village_no", slot_village_state, svs_being_raided), #village is being raided
       # End raid unless there is an enemy party nearby
           (assign, ":raid_ended", 1),
           (party_get_slot, ":raider_party", ":village_no", slot_village_raided_by),
           (try_begin),
             (ge, ":raider_party", 0),
             (party_is_active, ":raider_party"),
             (this_or_next|neq, ":raider_party", "p_main_party"),
             (eq, "$g_player_is_captive", 0),
             (store_distance_to_party_from_party, ":distance", ":village_no", ":raider_party"),
             (lt, ":distance", raid_distance),
             (assign, ":raid_ended", 0),
           (try_end),
           (try_begin),
             (eq, ":raid_ended", 1),
             (call_script, "script_village_set_state",  ":village_no", 0), #clear raid flag
             (party_set_slot, ":village_no", slot_village_smoke_added, 0),
             (party_clear_particle_systems, ":village_no"),
           (else_try),
             (assign, ":raid_progress_increase", 11),
             (party_get_slot, ":looter_party", ":village_no", slot_village_raided_by),
             (try_begin),
               (party_get_skill_level, ":looting_skill", ":looter_party", "skl_looting"),
               (val_add, ":raid_progress_increase", ":looting_skill"),
             (try_end),
             (try_begin),
               (party_slot_eq, ":village_no", slot_center_has_watch_tower, 1),
               (val_mul, ":raid_progress_increase", 75),
               (val_div, ":raid_progress_increase", 100),
             (try_end),
             (val_add, ":village_raid_progress", ":raid_progress_increase"),
             (party_set_slot, ":village_no", slot_village_raid_progress, ":village_raid_progress"),
             (try_begin),
               (ge, ":village_raid_progress", 50),
               (party_slot_eq, ":village_no", slot_village_smoke_added, 0),
               (party_add_particle_system, ":village_no", "psys_map_village_fire"),
               (party_add_particle_system, ":village_no", "psys_map_village_fire_smoke"),
               (party_set_icon, ":village_no", "icon_village_burnt_a"),
               (party_set_slot, ":village_no", slot_village_smoke_added, 1),
             (try_end),
             (try_begin),
               (gt, ":village_raid_progress", 100),
               (str_store_party_name_link, s1, ":village_no"),
               (party_stack_get_troop_id, ":raid_leader", ":looter_party"),
               (ge, ":raid_leader", 0),
               (str_store_party_name, s2, ":looter_party"),
               (display_log_message, "@The village of {s1} has been looted by {s2}."),
               (call_script, "script_village_set_state",  ":village_no", svs_looted),

        (party_add_particle_system, ":village_no", "psys_map_village_fire"), #new
        (party_add_particle_system, ":village_no", "psys_map_village_fire_smoke"), #new
        (party_set_icon, ":village_no", "icon_village_burnt_a"), #new
        (party_set_slot, ":village_no", slot_village_smoke_added, 1), #new
		
        (party_set_slot, ":village_no", slot_village_raid_progress, 100), #was 0
        (party_set_slot, ":village_no", slot_village_recover_progress, 0),

			   (call_script, "script_ms_event_looted", ":village_no"),
               (try_begin),
                 (store_faction_of_party, ":village_faction", ":village_no"),
                 (this_or_next|party_slot_eq, ":village_no", slot_town_lord, "trp_player"),
                 (eq, ":village_faction", "fac_player_supporters_faction"),
                 (call_script, "script_add_notification_menu", "mnu_notification_village_raided", ":village_no", ":raid_leader"),
               (try_end),
               (call_script, "script_add_log_entry", logent_village_raided, ":raid_leader",  ":village_no", -1, -1),
             (try_end),
           (try_end),
         (else_try),
           (party_slot_eq, ":village_no", slot_village_state, svs_looted), #village is looted
           (party_get_slot, ":recover_progress", ":village_no", slot_village_recover_progress),
           (val_add, ":recover_progress", 1),
           (party_set_slot, ":village_no", slot_village_recover_progress, ":recover_progress"), #village looted
           (try_begin),
             (ge, ":recover_progress", 10),
             (party_slot_eq, ":village_no", slot_village_smoke_added, 1),
             (party_clear_particle_systems, ":village_no"),
             (party_add_particle_system, ":village_no", "psys_map_village_looted_smoke"),
             (party_set_slot, ":village_no", slot_village_smoke_added, 2),
           (try_end),
           (try_begin),
             (gt, ":recover_progress", 50),
             (party_slot_eq, ":village_no", slot_village_smoke_added, 2),
             (party_clear_particle_systems, ":village_no"),
             (party_set_slot, ":village_no", slot_village_smoke_added, 3),
             (party_set_icon, ":village_no", "icon_village_deserted_a"),
           (try_end),
           (try_begin),
             (gt, ":recover_progress", 100),
             (call_script, "script_village_set_state",  ":village_no", svs_normal),#village back to normal
             (party_set_slot, ":village_no", slot_village_recover_progress, 0),
             (party_clear_particle_systems, ":village_no"),
             (party_set_slot, ":village_no", slot_village_smoke_added, 0),
             (party_set_icon, ":village_no", "icon_village_a"),
           (try_end),
         (try_end),
       (try_end),
  ]),

 
  # script_process_sieges
  # Input: none
  # Output: none
  #called from triggers
  ("process_sieges",
    [
       (try_for_range, ":center_no", walled_centers_begin, walled_centers_end),
         #Reducing siege hardness every day by 20
         (party_get_slot, ":siege_hardness", ":center_no", slot_center_siege_hardness),
         (val_sub, ":siege_hardness", 20),
         (val_max, ":siege_hardness", 0),
         (party_set_slot, ":center_no", slot_center_siege_hardness, ":siege_hardness"),
       
         (party_get_slot, ":town_food_store", ":center_no", slot_party_food_store),
         (call_script, "script_center_get_food_store_limit", ":center_no"),
         (assign, ":food_store_limit", reg0),
         (try_begin),
           (party_get_slot, ":besieger_party", ":center_no", slot_center_is_besieged_by),
           (ge, ":besieger_party", 0), #town is under siege
       
           #Reduce prosperity of besieged center by -1 with a 33% chance every day.
           #(try_begin),
           #  (store_random_in_range, ":random_no", 0, 3),
           #  (eq, ":random_no", 0),
           #  (call_script, "script_change_center_prosperity", ":center_no", -1),
           #(try_end),

           (store_faction_of_party, ":center_faction", ":center_no"),
        # Lift siege unless there is an enemy party nearby
           (assign, ":siege_lifted", 0),
           (try_begin),
             (try_begin),
               (neg|party_is_active, ":besieger_party"),
               (assign, ":siege_lifted", 1),
             (else_try),
               (store_distance_to_party_from_party, ":besieger_distance", ":center_no", ":besieger_party"),
               (gt, ":besieger_distance", 5),
               (assign, ":siege_lifted", 1),
             (try_end),
             (eq, ":siege_lifted", 1),
             (try_for_range, ":enemy_hero", kingdom_heroes_begin, kingdom_heroes_end),
               (troop_slot_eq, ":enemy_hero", slot_troop_occupation, slto_kingdom_hero),
               (troop_get_slot, ":enemy_party", ":enemy_hero", slot_troop_leaded_party),
               (ge, ":enemy_party", 0),
               (party_is_active, ":enemy_party"),
               (store_faction_of_party, ":party_faction", ":enemy_party"),
               (store_relation, ":reln", ":party_faction", ":center_faction"),
               (lt, ":reln", 0),
               (store_distance_to_party_from_party, ":distance", ":center_no", ":enemy_party"),
               (lt, ":distance", 4),
               (assign, ":besieger_party", ":enemy_party"),
               (party_set_slot, ":center_no", slot_center_is_besieged_by, ":enemy_party"),
               (assign, ":siege_lifted", 0),
             (try_end),
           (try_end),
           (try_begin),
             (eq, ":siege_lifted", 1),
             (call_script, "script_lift_siege", ":center_no", 1),
           (else_try),
             (call_script, "script_center_get_food_consumption", ":center_no"),
             (assign, ":food_consumption", reg0),
             (val_sub, ":town_food_store", ":food_consumption"), # reduce food only under siege???
             (try_begin),
               (le, ":town_food_store", 0), #town is starving
               (store_random_in_range, ":r", 0, 100),
               (lt, ":r", 10), 
               (call_script, "script_party_wound_all_members", ":center_no"), # town falls with 10% chance if starving
             (try_end),
           (try_end),
         (else_try),
           #town is not under siege...
           (val_add, ":town_food_store", 30), #add 30 food (significant for castles only.
         (try_end),

         (val_min, ":town_food_store", ":food_store_limit"),
         (val_max, ":town_food_store", 0),
         (party_set_slot, ":center_no", slot_party_food_store, ":town_food_store"),
       (try_end),
  ]),

  # script_lift_siege
  # Input: arg1 = center_no, arg2 = display_message
  # Output: none
  #called from triggers
  ("lift_siege",
    [
      (store_script_param, ":center_no", 1),
      (store_script_param, ":display_message", 2),
      (party_set_slot, ":center_no", slot_center_is_besieged_by, -1), #clear siege
      (call_script, "script_village_set_state",  ":center_no", 0), #clear siege flag
      (try_begin),
        (eq, ":center_no", "$g_player_besiege_town"),
        (assign, "$g_siege_method", 0), #remove siege progress
      (try_end),
      (try_begin),
        (eq, ":display_message", 1),
        (str_store_party_name_link, s3, ":center_no"),
        (display_message, "@{s3} is no longer under siege."),
      (try_end),
      ]),


  # script_process_alarms
  # Input: none
  # Output: none
  #called from triggers
  ("process_alarms",
    [(try_for_range, ":center_no", centers_begin, centers_end),
       (party_set_slot, ":center_no", slot_center_last_spotted_enemy, -1),
      (try_end),
     (assign, ":spotting_range", 2),
        (try_begin),
          (is_currently_night),
       (assign, ":spotting_range", 1),
        (try_end),
        (try_begin),
          (party_slot_eq, ":center_no", slot_center_has_watch_tower, 1),
          (val_mul, ":spotting_range", 2),
        (try_end),
        (try_for_parties, ":party_no"),
       (party_slot_eq, ":party_no", slot_party_type, spt_kingdom_hero_party),
       (neg|party_is_in_any_town, ":party_no"),
          (store_faction_of_party, ":party_faction", ":party_no"),
       (try_for_range, ":center_no", centers_begin, centers_end),
            (store_distance_to_party_from_party, ":distance", ":party_no", ":center_no"),
            (le, ":distance", ":spotting_range"),
         (store_faction_of_party, ":center_faction", ":center_no"),
		    (store_relation, ":reln", ":center_faction", ":party_faction"),
            (lt, ":reln", 0),
	            (party_set_slot, ":center_no", slot_center_last_spotted_enemy, ":party_no"),
			(try_end),
          (try_end),
      (try_for_range, ":center_no", centers_begin, centers_end),
		(store_faction_of_party, ":center_faction", ":center_no"),
		(this_or_next|party_slot_eq, ":center_no", slot_town_lord, "trp_player"),
		(eq, ":center_faction", "$players_kingdom"),
		(party_get_slot, ":enemy_party", ":center_no", slot_center_last_spotted_enemy),
		(ge, ":enemy_party", 0),
		(store_distance_to_party_from_party, ":dist", "p_main_party", ":center_no"),
		(assign, ":has_messenger", 0),
		(try_begin),
		  (this_or_next|party_slot_eq, ":center_no", slot_town_lord, "trp_player"),
		  (eq, ":center_faction", "fac_player_supporters_faction"),
		  (party_slot_eq, ":center_no", slot_center_has_messenger_post, 1),
		  (assign, ":has_messenger", 1),
		(try_end),
		(this_or_next|lt, ":dist", 30),
			(eq, ":has_messenger", 1),
		(str_store_party_name_link, s1, ":center_no"),
       (display_message, "@Enemies spotted near {s1}."),
      (try_end),
     ]),

  
  # script_party_set_ai_state
  # Input: arg1 = party_no, arg2 = new_ai_state, arg3 = action_object (if necessary)
  # Output: none (Can fail)
  ("party_set_ai_state",
    [
      (store_script_param, ":party_no", 1),
      (store_script_param, ":new_ai_state", 2),
      (store_script_param, ":new_ai_object", 3),
      
      (party_get_slot, ":old_ai_state", ":party_no", slot_party_ai_state),
      (party_get_slot, ":old_ai_object", ":party_no", slot_party_ai_object),
      (party_get_attached_to, ":attached_to_party", ":party_no"),
      (assign, ":party_is_in_town", 0),
      (try_begin),
        (is_between, ":attached_to_party", centers_begin, centers_end),
        (assign, ":party_is_in_town", ":attached_to_party"),
      (try_end),
          
	    (party_set_slot, ":party_no", slot_party_follow_me, 0),
	    
	    (try_begin),
	      (eq, ":old_ai_state", ":new_ai_state"),
	      (eq, ":old_ai_object", ":new_ai_object"),
          #do nothing. Nothing is changed.
        (else_try),
          (try_begin),
          (eq, ":new_ai_state", spai_accompanying_army),
            (party_set_ai_behavior, ":party_no", ai_bhvr_escort_party),
            (party_set_ai_object, ":party_no", ":new_ai_object"),
            (party_set_flags, ":party_no", pf_default_behavior, 0),
            (try_begin),
              (gt, ":party_is_in_town", 0),
              (party_detach, ":party_no"),
            (try_end),
          (else_try),
            (eq, ":new_ai_state", spai_besieging_center),
            (party_get_position, pos1, ":new_ai_object"),
            (map_get_random_position_around_position, pos2, pos1, 2),
            (party_set_ai_behavior, ":party_no", ai_bhvr_travel_to_point),
            (party_set_ai_target_position, ":party_no", pos2),
            (party_set_ai_object, ":party_no", ":new_ai_object"),
            (party_set_flags, ":party_no", pf_default_behavior, 0),
            (party_set_slot, ":party_no", slot_party_follow_me, 1),
            (party_set_slot, ":party_no", slot_party_ai_substate, 0),
            (try_begin),
              (gt, ":party_is_in_town", 0),
              (neq, ":party_is_in_town", ":new_ai_object"),
              (party_detach, ":party_no"),
            (try_end),
          (else_try),
            (eq, ":new_ai_state", spai_holding_center),			
            (party_set_ai_behavior, ":party_no", ai_bhvr_travel_to_party),
            (party_set_ai_object, ":party_no", ":new_ai_object"),
            (party_set_flags, ":party_no", pf_default_behavior, 0),
            (try_begin),
              (gt, ":party_is_in_town", 0),
              (neq, ":party_is_in_town", ":new_ai_object"),
              (party_detach, ":party_no"),
            (try_end),
          (else_try),
            (eq, ":new_ai_state", spai_patrolling_around_center),
            (party_get_position, pos1, ":new_ai_object"),
            (map_get_random_position_around_position, pos2, pos1, 1),
            (party_set_ai_behavior, ":party_no", ai_bhvr_travel_to_point),
            (party_set_ai_target_position, ":party_no", pos2),
            (party_set_ai_object, ":party_no", ":new_ai_object"),
          (party_set_ai_patrol_radius, ":party_no", 5),
            (party_set_flags, ":party_no", pf_default_behavior, 0),
            (party_set_slot, ":party_no", slot_party_follow_me, 1),
            (party_set_slot, ":party_no", slot_party_ai_substate, 0),
            (try_begin),
              (gt, ":party_is_in_town", 0),
              (party_detach, ":party_no"),
            (try_end),
          (else_try),
            (eq, ":new_ai_state", spai_recruiting_troops),
            ##(party_get_position, pos1, ":new_ai_object"),
            ##(map_get_random_position_around_position, pos2, pos1, 2),
            ##(party_set_ai_behavior, ":party_no", ai_bhvr_travel_to_point),
            ##(party_set_ai_target_position, ":party_no", pos2),
            ##(party_set_ai_object, ":party_no", ":new_ai_object"),
            ##(party_set_flags, ":party_no", pf_default_behavior, 0),
            ##(party_set_slot, ":party_no", slot_party_ai_substate, 0),
            ##(try_begin),
            ##  (gt, ":party_is_in_town", 0),
            ##  (neq, ":party_is_in_town", ":new_ai_object"),
            ##  (party_detach, ":party_no"),
            ##(try_end),			
	        (party_set_ai_behavior, ":party_no", ai_bhvr_travel_to_party), #Suvorov
            (party_set_ai_object, ":party_no", ":new_ai_object"),
	        (party_set_flags, ":party_no", pf_default_behavior, 1),
	        (party_set_slot, ":party_no", slot_party_commander_party, -1),
            (try_begin),
              (gt, ":party_is_in_town", 0),
              (neq, ":party_is_in_town", ":new_ai_object"),
              (party_detach, ":party_no"),
            (try_end),
        (else_try),
            (eq, ":new_ai_state", spai_raiding_around_center),
            (party_get_position, pos1, ":new_ai_object"),
            (map_get_random_position_around_position, pos2, pos1, 1),
            (party_set_ai_behavior, ":party_no", ai_bhvr_patrol_location),
            (party_set_ai_patrol_radius, ":party_no", 10),
            (party_set_ai_target_position, ":party_no", pos2),
            (party_set_ai_object, ":party_no", ":new_ai_object"),
            (party_set_flags, ":party_no", pf_default_behavior, 0),
	        (party_set_slot, ":party_no", slot_party_follow_me, 1),
	        (party_set_slot, ":party_no", slot_party_ai_substate, 0),
	        (try_begin),
	          (gt, ":party_is_in_town", 0),
	          (neq, ":party_is_in_town", ":new_ai_object"),
	          (party_detach, ":party_no"),
	        (try_end),
	      (else_try),
##          (eq, ":new_ai_state", spai_raiding_village),
##          (party_get_position, pos1, ":new_ai_object"),
##          (map_get_random_position_around_position, pos2, pos1, 1),
##          (party_set_ai_behavior, ":party_no", ai_bhvr_travel_to_point),
##          (party_set_ai_target_position, ":party_no", pos2),
##          (party_set_ai_object, ":party_no", ":new_ai_object"),
##          (party_set_flags, ":party_no", pf_default_behavior, 0),
##          (party_set_slot, ":party_no", slot_party_follow_me, 1),
##          (try_begin),
##            (gt, ":party_is_in_town", 0),
##            (neq, ":party_is_in_town", ":new_ai_object"),
##            (party_detach, ":party_no"),
##          (try_end),
##        (else_try),
	        (eq, ":new_ai_state", spai_engaging_army),			
	        (party_set_ai_behavior, ":party_no", ai_bhvr_attack_party),
	        (party_set_ai_object, ":party_no", ":new_ai_object"),
	        (party_set_flags, ":party_no", pf_default_behavior, 0),
	        (try_begin),
	          (gt, ":party_is_in_town", 0),
	          (party_detach, ":party_no"),
	        (try_end),
	      (else_try),
	        (eq, ":new_ai_state", spai_retreating_to_center),			
	        (party_set_ai_behavior, ":party_no", ai_bhvr_travel_to_party),
	        (party_set_ai_object, ":party_no", ":new_ai_object"),
	        (party_set_flags, ":party_no", pf_default_behavior, 1),
	        (party_set_slot, ":party_no", slot_party_commander_party, -1),
	        (try_begin),
	          (gt, ":party_is_in_town", 0),
	          (neq, ":party_is_in_town", ":new_ai_object"),
	          (party_detach, ":party_no"),
	        (try_end),
	      (else_try),
	        (eq, ":new_ai_state", spai_undefined),
	        (party_set_ai_behavior, ":party_no", ai_bhvr_hold),
	        (party_set_flags, ":party_no", pf_default_behavior, 0),
	      (try_end),
      (try_end),

      (party_set_slot, ":party_no", slot_party_ai_state, ":new_ai_state"),
      (party_set_slot, ":party_no", slot_party_ai_object, ":new_ai_object"),
	      
  ]),

  # script_decide_kingdom_party_ais
  # Input: none
  # Output: none
  #called from triggers
  ("decide_kingdom_party_ais",
   [
       (try_for_range, ":faction_no", kingdoms_begin, kingdoms_end),
         (faction_slot_eq, ":faction_no", slot_faction_state, sfs_active),
         (neq, ":faction_no", "fac_player_supporters_faction"),
         (faction_get_slot, ":faction_ai_state", ":faction_no", slot_faction_ai_state),
         (neq, ":faction_ai_state", sfai_default),
         (faction_get_slot, ":faction_ai_object", ":faction_no", slot_faction_ai_object),
         (faction_get_slot, ":faction_marshall", ":faction_no", slot_faction_marshall),
         (gt, ":faction_marshall", 0),
         (neq, ":faction_marshall", "trp_player"),
         (troop_get_slot, ":faction_marshall_party", ":faction_marshall", slot_troop_leaded_party),
         (gt, ":faction_marshall_party", 0),
	      (try_begin),
           (eq, ":faction_ai_state", sfai_gathering_army),
           (call_script, "script_party_set_ai_state", ":faction_marshall_party", spai_undefined, -1),
           (party_set_ai_initiative, ":faction_marshall_party", 100),
         (else_try),
           (eq, ":faction_ai_state", sfai_attacking_center),
           (call_script, "script_party_set_ai_state", ":faction_marshall_party", spai_besieging_center, ":faction_ai_object"),
           (party_set_ai_initiative, ":faction_marshall_party", 50),
	      (else_try),
           (eq, ":faction_ai_state", sfai_raiding_village),
           (call_script, "script_party_set_ai_state", ":faction_marshall_party", spai_raiding_around_center, ":faction_ai_object"),
           (party_set_ai_initiative, ":faction_marshall_party", 50),
         (else_try),
           (eq, ":faction_ai_state", sfai_attacking_enemies_around_center),
           (call_script, "script_party_set_ai_state", ":faction_marshall_party", spai_patrolling_around_center, ":faction_ai_object"),
           (party_set_ai_initiative, ":faction_marshall_party", 50),
         (else_try),
           (eq, ":faction_ai_state", sfai_attacking_enemy_army),
           (call_script, "script_party_set_ai_state", ":faction_marshall_party", spai_engaging_army, ":faction_ai_object"),
           (party_set_ai_initiative, ":faction_marshall_party", 50),
         (try_end),
         (party_set_slot, ":faction_marshall_party", slot_party_commander_party, -1),
       (try_end),

       (try_for_range, ":troop_no", kingdom_heroes_begin, kingdom_heroes_end),
         (try_begin),
           (store_troop_faction, ":troop_faction", ":troop_no"),
           (neg|faction_slot_eq, ":troop_faction", slot_faction_marshall, ":troop_no"),
           (troop_get_slot, ":troop_party", ":troop_no", slot_troop_leaded_party),
           (gt, ":troop_party", 0),
           (party_is_active, ":troop_party"),
           (party_set_ai_initiative, ":troop_party", 100),
         (try_end),
         (call_script, "script_calculate_troop_ai", ":troop_no"),
	      (try_end),
	      
       (try_for_range, ":troop_no", kingdom_heroes_begin, kingdom_heroes_end),
         (call_script, "script_calculate_troop_ai_under_command", ":troop_no"),
	  (try_end),
  ]),

  # script_party_decide_next_ai_state_under_command
  # Input: arg1 = party_no
  # Output: none
  #called from triggers
  ("party_decide_next_ai_state_under_command",
    [
      (store_script_param_1, ":party_no"),
      (party_get_slot, ":commander_party", ":party_no", slot_party_commander_party),
	  (try_begin),
        (party_is_active, ":commander_party"),
        (party_get_slot, ":commander_ai_state", ":commander_party", slot_party_ai_state),
        (party_get_slot, ":commander_ai_object", ":commander_party", slot_party_ai_object),
        (store_faction_of_party, ":faction_no", ":party_no"),
	  
        (store_distance_to_party_from_party, ":distance_to_commander", ":party_no", ":commander_party"),
        (try_begin),
          (gt, ":distance_to_commander", 5),
          (call_script, "script_party_set_ai_state", ":party_no", spai_accompanying_army, ":commander_party"),
        (else_try),
	    (try_begin),
            (eq, ":commander_party", "p_main_party"),
            (call_script, "script_party_set_ai_state", ":party_no", spai_accompanying_army, "p_main_party"),
	    (else_try),
            (eq, ":commander_ai_state", spai_besieging_center),
            (store_distance_to_party_from_party, ":distance_to_object", ":party_no", ":commander_ai_object"),
            (le, ":distance_to_object", 5),
            (call_script, "script_party_set_ai_state", ":party_no", spai_besieging_center, ":commander_ai_object"),
          (else_try),
            #find current center
            (party_get_attached_to, ":cur_center_no", ":commander_party"),
            (assign, ":handled", 0),
            (try_begin),
              (lt, ":cur_center_no", 0),
              (party_get_cur_town, ":cur_center_no", ":commander_party"),
            (try_end),
            (try_begin),
              (eq, ":commander_ai_state", spai_holding_center),
              (call_script, "script_party_set_ai_state", ":party_no", spai_holding_center, ":commander_ai_object"),
              (assign, ":handled", 1),
	    (else_try),
              (eq, ":commander_ai_state", spai_undefined),
              (is_between, ":cur_center_no", centers_begin, centers_end),
              (call_script, "script_party_set_ai_state", ":party_no", spai_holding_center, ":cur_center_no"),
              (assign, ":handled", 1),
            (try_end),
            (eq, ":handled", 1),
	    (else_try),
            (faction_get_slot, ":faction_marshall", ":faction_no", slot_faction_marshall),
            (ge, ":faction_marshall", 0),
            (troop_slot_eq, ":faction_marshall", slot_troop_leaded_party, ":commander_party"),
            (call_script, "script_party_set_ai_state", ":party_no", spai_accompanying_army, ":commander_party"),
	    (else_try),
            (this_or_next|eq, ":commander_ai_state", spai_patrolling_around_center),
            (this_or_next|eq, ":commander_ai_state", spai_raiding_around_center),
            (eq, ":commander_ai_state", spai_engaging_army),
            (call_script, "script_party_set_ai_state", ":party_no", spai_accompanying_army, ":commander_party"),
	    (else_try),
            #Commander doesn't need accompany. Cancel
            (call_script, "script_party_set_ai_state", ":party_no", spai_undefined, -1),
            (party_set_slot, ":party_no", slot_party_commander_party, -1),
          (try_end),
	    (try_end),	  
	  (try_end),  
  ]),

  # script_kingdom_hero_decide_next_ai_state_follow_or_not
  # Input: arg1 = troop_no
  # Output: none
  #called from triggers
  ("kingdom_hero_decide_next_ai_state_follow_or_not",
    [
      (store_script_param_1, ":troop_no"),
      (troop_get_slot, ":party_no", ":troop_no", slot_troop_leaded_party),
	
      (try_begin),
        (party_get_slot, ":old_ai_state", ":party_no", slot_party_ai_state),
	
        (assign, ":cancel", 0),
        (try_begin), #if we are retreating to a center keep retreating
          (eq, ":old_ai_state", spai_retreating_to_center),
          (neg|party_is_in_any_town, ":party_no"),
          (assign, ":cancel", 1),
        (try_end),
        (eq, ":cancel", 0),

        (party_get_slot, ":our_strength", ":party_no", slot_party_cached_strength),
        (store_div, ":min_strength_behind", ":our_strength", 2),
	
        (assign, ":under_siege", 0),
        #find current center
        (party_get_attached_to, ":cur_center_no", ":party_no"),
        (try_begin),
          (lt, ":cur_center_no", 0),
          (party_get_cur_town, ":cur_center_no", ":party_no"),
        (try_end),
        (try_begin),
          (neg|is_between, ":cur_center_no", centers_begin, centers_end),
          (assign, ":cur_center_no", -1),
          (assign, ":cur_center_nearby_strength", 0),
          (store_sub, ":cur_center_left_strength", 1000000),#must be higher than our strength
        (else_try),
          (party_get_slot, ":cur_center_nearby_strength", ":cur_center_no", slot_party_nearby_friend_strength),
          (store_sub, ":cur_center_left_strength", ":cur_center_nearby_strength", ":our_strength"),
          (party_get_slot, ":besieger_party", ":cur_center_no", slot_center_is_besieged_by),
          (gt, ":besieger_party", 0),
          (party_is_active, ":besieger_party"),
          (assign, ":under_siege", 1),
        (try_end),
	
        (store_troop_faction, ":faction_no", ":troop_no"),
        (faction_get_slot, ":faction_ai_state",  ":faction_no", slot_faction_ai_state),
  
        (party_get_slot, ":commander_party", ":party_no", slot_party_commander_party),
        (try_begin),
          (ge, ":commander_party", 0),
          (try_begin),
            (party_is_active, ":commander_party"),
            (try_begin),
              (store_faction_of_party, ":commander_faction", ":commander_party"),
              (neq, ":faction_no", ":commander_faction"),
              (assign, ":continue", 0),
              (try_begin),
                (neq, ":commander_party", "p_main_party"),
                (assign, ":continue", 1),
              (else_try),
                (neq, "$players_kingdom", ":faction_no"),
                (assign, ":continue", 1),
              (try_end),
              (eq, ":continue", 1),
              (assign, ":commander_party", -1),
            (try_end),
          (else_try),
            (assign, ":commander_party", -1),
          (try_end),
        (try_end),
	
        (faction_get_slot, ":num_towns", ":faction_no", slot_faction_num_towns),
        (store_mul, ":faction_center_value", ":num_towns", 2),
        (faction_get_slot, ":num_castles", ":faction_no", slot_faction_num_castles),
        (val_add, ":faction_center_value", ":num_castles"),
        (val_mul, ":faction_center_value", 10),
        (val_max, ":faction_center_value", 5),
  
        (troop_get_slot, ":readiness", ":troop_no", slot_troop_readiness_to_join_army),
  
        (assign, ":chance_to_follow_other_party", 0),
        (assign, ":target_to_follow_other_party", -1),
   
        (try_begin), #follow other party
          (eq, ":under_siege", 0),
          (ge, ":cur_center_left_strength", ":min_strength_behind"),
          (assign, ":continue", 0),
          (try_begin),
            (ge, ":commander_party", 0),
            (gt, "$party_relative_strength", 30),
            (assign, ":continue", 1),
          (else_try),
            (gt, "$party_relative_strength", 50),
            (lt, "$ratio_of_prisoners", 50),
            (assign, ":continue", 1),
          (try_end),
          (eq, ":continue", 1),
          (try_begin),
            (eq, ":faction_no", "fac_player_supporters_faction"),
            (neg|troop_slot_eq, ":troop_no", slot_troop_player_order_state, spai_undefined),
            (assign, ":continue", 0),
          (try_end),
          (eq, ":continue", 1),
          (faction_get_slot, ":faction_marshall", ":faction_no", slot_faction_marshall),
          (ge, ":faction_marshall", 0),
          #(troop_slot_eq, ":faction_marshall", slot_troop_is_prisoner, 0),
          (neg|troop_slot_ge, ":faction_marshall", slot_troop_prisoner_of_party, 0),
          (troop_get_slot, ":faction_marshall_party", ":faction_marshall", slot_troop_leaded_party),
          (neq, ":faction_marshall", ":troop_no"),
          (ge, ":faction_marshall_party", 0),
          (try_begin),
            (eq, ":faction_ai_state", sfai_gathering_army),
            (assign, ":old_target_to_follow_other_party", -1),
            (try_begin),
              (ge, ":commander_party", 0),
              (assign, ":old_target_to_follow_other_party", ":commander_party"),
            (try_end),
   
            (assign, ":continue", 0),
            (try_begin),
              (ge, ":readiness", 60),
              (assign, ":continue", 1),
            (else_try),
              (ge, ":readiness", 10),
              (eq, ":old_target_to_follow_other_party", ":faction_marshall_party"),
              (assign, ":continue", 1),
            (try_end),
   
    (try_begin),
              (eq, ":continue", 1),
              (store_distance_to_party_from_party, ":dist", ":faction_marshall_party", ":party_no"),
              (store_sub, ":chance", 120, ":dist"),
  ##            (val_mul, ":chance", 3),
  ##            (val_div, ":chance", 2),
              (val_min, ":chance", 100),
              (val_max, ":chance", 20),
              (store_sub, ":faction_advantage_effect", "$g_average_center_value_per_faction", ":faction_center_value"),
              (val_mul, ":faction_advantage_effect", 2),
              (val_add, ":chance", ":faction_advantage_effect"),
              (val_max, ":chance", 10),

              (assign, ":target_to_follow_other_party", ":faction_marshall_party"),
              (assign, ":chance_to_follow_other_party", ":chance"),
		(try_begin),
                (eq, ":old_target_to_follow_other_party", ":target_to_follow_other_party"),
                (val_mul, ":chance_to_follow_other_party", 1000),
              (try_end),
            (try_end),
          (else_try),
            (this_or_next|eq, ":faction_ai_state", sfai_attacking_center),
            (this_or_next|eq, ":faction_ai_state", sfai_raiding_village),
            (this_or_next|eq, ":faction_ai_state", sfai_attacking_enemies_around_center),
            (eq, ":faction_ai_state", sfai_attacking_enemy_army),
            (eq, ":commander_party", ":faction_marshall_party"),
            (ge, ":readiness", 10),
            (assign, ":target_to_follow_other_party", ":faction_marshall_party"),
            (assign, ":chance_to_follow_other_party", 100000),
		(try_end),
    (try_end),
        (try_begin), #follow other party with initiative
          (le, ":chance_to_follow_other_party", 0),
          (eq, ":under_siege", 0),
          (ge, ":cur_center_left_strength", ":min_strength_behind"),
          (assign, ":continue", 0),
          (try_begin),
            (ge, ":commander_party", 0),
            (gt, "$party_relative_strength", 40),
            (assign, ":continue", 1),
          (else_try),
            (gt, "$party_relative_strength", 75),
            (lt, "$ratio_of_prisoners", 50),
            (assign, ":continue", 1),
          (try_end),
          (eq, ":continue", 1),
    (try_begin),
            (eq, ":faction_no", "fac_player_supporters_faction"),
            (neg|troop_slot_eq, ":troop_no", slot_troop_player_order_state, spai_undefined),
            (neg|troop_slot_eq, ":troop_no", slot_troop_player_order_state, spai_accompanying_army),
            (assign, ":continue", 0),
          (try_end),
          (eq, ":continue", 1),
          (neg|faction_slot_eq, ":faction_no", slot_faction_leader, ":troop_no"),
		
          (assign, ":old_target_to_follow_other_party", -1),
		(try_begin),
            (ge, ":commander_party", 0),
            (assign, ":old_target_to_follow_other_party", ":commander_party"),
          (try_end),
			
          (troop_get_slot, ":hero_renown", ":troop_no", slot_troop_renown),

          (assign, ":num_available_to_follow", 0),
          (try_begin),
            (eq, "p_main_party", ":old_target_to_follow_other_party"),
            (val_add, ":num_available_to_follow", 1),
            (eq, "p_main_party", ":old_target_to_follow_other_party"),
            (val_add, ":num_available_to_follow", 999),
          (try_end),
          (try_for_range, ":other_hero", kingdom_heroes_begin, kingdom_heroes_end),
            (neq, ":other_hero", ":troop_no"),
            (store_troop_faction, ":troop_faction", ":other_hero"),
            (eq, ":troop_faction", ":faction_no"),
            (troop_get_slot, ":other_party", ":other_hero", slot_troop_leaded_party),
            (ge, ":other_party", 0),
            (troop_get_slot, ":other_hero_renown", ":other_hero", slot_troop_renown),
            (lt, ":hero_renown", ":other_hero_renown"),
            (neg|party_slot_ge, ":other_party", slot_party_commander_party, 0), #other party is not under command itself.
            (store_distance_to_party_from_party, ":dist", ":other_party", ":party_no"),
            (lt, ":dist", 25),
            (party_slot_eq, ":other_party", slot_party_follow_me, 1),
            (val_add, ":num_available_to_follow", 1),
            (eq, ":other_party", ":old_target_to_follow_other_party"),
            (val_add, ":num_available_to_follow", 999),
          (try_end),
          (gt, ":num_available_to_follow", 0),
          (store_random_in_range, ":random_party_to_follow", 0, ":num_available_to_follow"),
          (try_begin),
            (eq, "p_main_party", ":old_target_to_follow_other_party"),
            (val_sub, ":random_party_to_follow", 1),
            (try_begin),
              (eq, "p_main_party", ":old_target_to_follow_other_party"),
              (val_sub, ":random_party_to_follow", 999),
            (try_end),
            (lt, ":random_party_to_follow", 0),
            (store_mul, ":chance", 100, "$g_average_center_value_per_faction"),#this value is calculated at the beginning of the game
            (val_div, ":chance", ":faction_center_value"),
            (val_max, ":chance", 10),
            (assign, ":chance_to_follow_other_party", ":chance"),
            (val_mul, ":chance_to_follow_other_party", 2),#trp_player is always the leader
            (assign, ":target_to_follow_other_party", "p_main_party"),
            (eq, ":old_target_to_follow_other_party", ":target_to_follow_other_party"),
            (val_mul, ":chance_to_follow_other_party", 100),
          (try_end),
          (try_for_range, ":other_hero", kingdom_heroes_begin, kingdom_heroes_end),
            (eq, ":target_to_follow_other_party", -1),
            (neq, ":other_hero", ":troop_no"),
            (store_troop_faction, ":troop_faction", ":other_hero"),
            (eq, ":troop_faction", ":faction_no"),
            (troop_get_slot, ":other_party", ":other_hero", slot_troop_leaded_party),
            (ge, ":other_party", 0),
            (troop_get_slot, ":other_hero_renown", ":other_hero", slot_troop_renown),
            (lt, ":hero_renown", ":other_hero_renown"),
            (neg|party_slot_ge, ":other_party", slot_party_commander_party, 0), #other party is not under command itself.
            (store_distance_to_party_from_party, ":dist", ":other_party", ":party_no"),
            (lt, ":dist", 25),
            (party_slot_eq, ":other_party", slot_party_follow_me, 1),
            (val_sub, ":random_party_to_follow", 1),
            (try_begin),
              (eq, ":other_party", ":old_target_to_follow_other_party"),
              (val_sub, ":random_party_to_follow", 999),
            (try_end),
            (lt, ":random_party_to_follow", 0),
            (store_mul, ":chance", 100, "$g_average_center_value_per_faction"),#this value is calculated at the beginning of the game
            (val_div, ":chance", ":faction_center_value"),
            (val_max, ":chance", 10),
            (assign, ":chance_to_follow_other_party", ":chance"),
            (try_begin),
              (faction_slot_eq, ":faction_no", slot_faction_leader, ":other_hero"),
              (val_mul, ":chance_to_follow_other_party", 2),
            (try_end),
            (assign, ":target_to_follow_other_party", ":other_party"),
            (eq, ":old_target_to_follow_other_party", ":target_to_follow_other_party"),
            (val_mul, ":chance_to_follow_other_party", 100),
          (try_end),
		(try_end),
		
        (assign, ":sum_chances", ":chance_to_follow_other_party"),
        (val_add, ":sum_chances", 600),
        (store_random_in_range, ":random_no", 0, ":sum_chances"),
        (try_begin),
          (val_sub, ":random_no", ":chance_to_follow_other_party"),
          (lt, ":random_no", 0),
          (party_set_slot, ":party_no", slot_party_commander_party, ":target_to_follow_other_party"),
        (else_try),
          (party_set_slot, ":party_no", slot_party_commander_party, -1),
		(try_end),
    (try_end),
  ]),
	
	
  # script_kingdom_hero_decide_next_ai_state
  # Input: arg1 = troop_no
  # Output: none
  #called from triggers
  ("kingdom_hero_decide_next_ai_state",
    [
      (store_script_param_1, ":troop_no"),
      (troop_get_slot, ":party_no", ":troop_no", slot_troop_leaded_party),
   
    (try_begin),
        (party_get_slot, ":our_strength", ":party_no", slot_party_cached_strength),
        (store_div, ":min_strength_behind", ":our_strength", 2),
        (party_get_slot, ":our_follower_strength", ":party_no", slot_party_follower_strength),

        (store_troop_faction, ":faction_no", ":troop_no"),
			
        #find current center
        (assign, ":besieger_party", -1),
        (party_get_attached_to, ":cur_center_no", ":party_no"),
        (try_begin),
          (lt, ":cur_center_no", 0),
          (party_get_cur_town, ":cur_center_no", ":party_no"),
		(try_end),   
        (try_begin),
          (neg|is_between, ":cur_center_no", centers_begin, centers_end),
          (assign, ":cur_center_no", -1),
          (assign, ":cur_center_nearby_strength", 0),
          (store_sub, ":cur_center_left_strength", 1000000),#must be higher than our strength
        (else_try),
          (party_get_slot, ":cur_center_nearby_strength", ":cur_center_no", slot_party_nearby_friend_strength),
          (store_sub, ":cur_center_left_strength", ":cur_center_nearby_strength", ":our_strength"),
          (party_get_slot, ":besieger_party", ":cur_center_no", slot_center_is_besieged_by),
          (try_begin),
            (neg|party_is_active, ":besieger_party"),
            (assign, ":besieger_party", -1),
          (try_end),
          (store_faction_of_party, ":cur_center_faction", ":cur_center_no"),
          (store_relation, ":cur_center_relation", ":cur_center_faction", ":faction_no"),
    (try_end),
	
        (party_get_slot, ":old_ai_state", ":party_no", slot_party_ai_state),
        (party_get_slot, ":old_ai_object", ":party_no", slot_party_ai_object),
   
        (assign, ":cancel", 0),
        (try_begin), #if we are retreating to a center keep retreating
          (eq, ":old_ai_state", spai_retreating_to_center),
          (neg|party_is_in_any_town, ":party_no"),
          (assign, ":cancel", 1),
        (try_end),
        (eq, ":cancel", 0),
   
##        (faction_get_slot, ":faction_ai_state",  ":faction_no", slot_faction_ai_state),
##        (faction_get_slot, ":faction_ai_object", ":faction_no", slot_faction_ai_object),
  
        (faction_get_slot, ":num_towns", ":faction_no", slot_faction_num_towns),
        (store_mul, ":faction_center_value", ":num_towns", 2),
        (faction_get_slot, ":num_castles", ":faction_no", slot_faction_num_castles),
        (val_add, ":faction_center_value", ":num_castles"),
        (val_mul, ":faction_center_value", 10),
        (val_max, ":faction_center_value", 5),

        (assign, ":chance_move_to_home_center", 0),
        (assign, ":target_move_to_home_center", -1),
        (assign, ":chance_move_to_other_center", 0),
        (assign, ":target_move_to_other_center", -1),
        (assign, ":chance_besiege_enemy_center", 0),
        (assign, ":target_besiege_enemy_center", -1),
        (assign, ":chance_patrol_around_center", 0),
        (assign, ":target_patrol_around_center", -1),
        (assign, ":chance_raid_around_center", 0),
        (assign, ":target_raid_around_center", -1),
        (assign, ":chance_recruit_troops", 0),
        (assign, ":target_recruit_troops", -1),

        (try_begin),#Moving to home center
          (eq, ":besieger_party", -1),
          (assign, ":old_target_move_to_home_center", -1),
          (try_begin),
            (eq, ":old_ai_state", spai_holding_center),
            (assign, ":old_target_move_to_home_center", ":old_ai_object"),
          (try_end),
          (try_begin),
            (is_between, ":cur_center_no", centers_begin, centers_end), #already in our center
            (party_slot_eq,  ":cur_center_no", slot_town_lord, ":troop_no"),
            (assign, ":target_move_to_home_center", ":cur_center_no"),
            (assign, ":chance_move_to_home_center", 100),
          (try_end),
          (try_begin),
            (eq, ":target_move_to_home_center", -1),
            (this_or_next|gt, "$party_relative_strength", 20),#stay inside if strength is too low
            (eq, ":cur_center_no", -1),
            (ge, ":cur_center_left_strength", ":min_strength_behind"),#stay inside if center strength is too low
            (call_script, "script_cf_troop_get_random_leaded_walled_center_with_less_strength_priority", ":troop_no", ":old_target_move_to_home_center"),#Can fail
            (assign, ":target_move_to_home_center", reg0),
            (assign, ":chance_move_to_home_center", 50),
            (try_begin),
              (eq, ":old_target_move_to_home_center", ":target_move_to_home_center"),
              (val_mul, ":chance_move_to_home_center", 100),
            (try_end),
          (try_end),
        (try_end),
        (try_begin),#Moving to other center
          (try_begin),
            (ge, ":besieger_party", 0),
            (ge, ":cur_center_relation", 0),
            (assign, ":chance_move_to_other_center", 50000),
            (assign, ":target_move_to_other_center", ":cur_center_no"),
          (else_try),
            (assign, ":old_target_move_to_other_center", -1),
            (try_begin),
              (eq, ":old_ai_state", spai_holding_center),
              (assign, ":old_target_move_to_other_center", ":old_ai_object"),
            (try_end),
##      (try_begin),
##              (party_slot_eq, ":party_no", slot_party_ai_state, spai_holding_center),
##              (party_get_slot, ":target_move_to_other_center", ":party_no", slot_party_ai_object),
##        (try_begin),
##                (call_script, "script_party_calculate_regular_strength", ":target_move_to_other_center"),
##                (assign, ":strength", reg0),
##                (le, ":strength", 10),
##                (assign, ":chance_move_to_other_center", 500),
##          (else_try),
##                (assign, ":chance_move_to_other_center", 30),
##            (try_end),
##            (try_end),
            (try_begin),
              (eq, ":target_move_to_other_center", -1),
              (try_begin),
                (this_or_next|le, "$party_relative_strength", 20),#stay inside if strength is too low
                (lt, ":cur_center_left_strength", ":min_strength_behind"),#stay inside if center strength is too low
                (is_between, ":cur_center_no", centers_begin, centers_end),
                (ge, ":cur_center_relation", 0),
                (assign, ":chance_move_to_other_center", 500),
                (assign, ":target_move_to_other_center", ":cur_center_no"),
              (else_try),
                (call_script, "script_cf_select_random_walled_center_with_faction_and_less_strength_priority", ":faction_no", ":old_target_move_to_other_center"),
                (assign, ":target_move_to_other_center", reg0),
                (assign, ":chance_move_to_other_center", 10),
                (party_get_slot, ":lord_of_center", ":target_move_to_other_center", slot_town_lord),
                (try_begin),
                  (call_script, "script_cf_troop_check_troop_is_enemy", ":troop_no", ":lord_of_center"),
                  (assign, ":chance_move_to_other_center", 1),
                (try_end),
                (try_begin),
                  (eq, ":old_target_move_to_other_center", ":target_move_to_other_center"),
                  (val_mul, ":chance_move_to_other_center", 1000),
                (try_end),
              (try_end),
            (try_end),
          (try_end),
        (try_end),
        (try_begin),
          (lt, "$party_relative_strength", 50),
          (store_sub, ":factor", 100, "$party_relative_strength"),
          (try_begin),
            (gt, ":chance_move_to_home_center", 0),
            (val_mul, ":chance_move_to_home_center", 200),
            (val_div, ":chance_move_to_home_center", ":factor"),
          (else_try),
            (val_mul, ":chance_move_to_other_center", 200),
            (val_div, ":chance_move_to_other_center", ":factor"),
          (try_end),
        (try_end),
        (try_begin),
          (gt,  "$ratio_of_prisoners", 50),
          (try_begin),
            (gt, ":chance_move_to_home_center", 0),
            (val_mul, ":chance_move_to_home_center", 2),
          (else_try),
            (val_mul, ":chance_move_to_other_center", 2),
          (try_end),
        (try_end),
        (try_begin), #Recruiting troops
          (eq, ":besieger_party", -1),
          (ge, ":cur_center_left_strength", ":min_strength_behind"),#stay inside if center strength is too low
          (assign, ":old_target_recruit_troops", -1),
          (try_begin),
            (eq, ":old_ai_state", spai_recruiting_troops),
            (assign, ":old_target_recruit_troops", ":old_ai_object"),
          (try_end),
		  
         ## (troop_get_slot, ":original_faction", ":troop_no", slot_troop_original_faction),
         ## (faction_get_slot, ":original_faction_culture", ":original_faction", slot_faction_culture),
         ## (assign, ":num_villages", 0),
         ## (try_for_range, ":village_no", villages_begin, villages_end),
         ##   (store_faction_of_party, ":village_faction_no", ":village_no"),
         ##   (store_relation, ":reln", ":village_faction_no", ":faction_no"),
         ##   (this_or_next|ge, ":reln", 0),
         ##   (party_slot_eq, ":village_no", slot_center_culture, ":original_faction_culture"),
         ##   (assign, ":faction_factor", 1),
         ##   (try_begin),
         ##     (eq, ":village_faction_no", ":faction_no"),
         ##     (assign, ":faction_factor", 20),
         ##   (try_end),
         ##   (assign, ":amount_factor", 1),
         ##   (party_get_slot, ":volunteer_amount", ":village_no", slot_center_npc_volunteer_troop_amount),
         ##   (try_begin),
         ##     (gt, ":volunteer_amount", 0),
         ##     (val_add, ":volunteer_amount", 5),
         ##     (val_add, ":amount_factor", ":volunteer_amount"),
         ##   (try_end),
         ##   (store_distance_to_party_from_party, ":dist", ":village_no", ":party_no"),
         ##   (store_sub, ":dist_factor", 100, ":dist"),
         ##   (val_max, ":dist_factor", 10),
         ##   (assign, ":raid_factor", 100),
         ##   (try_begin),
         ##     (party_slot_eq, ":village_no", slot_village_state, svs_being_raided),
         ##     (assign, ":raid_factor", 1),
         ##   (try_end),
         ##   (store_mul, ":village_point", ":faction_factor", ":dist_factor"),
         ##   (val_mul, ":village_point", ":raid_factor"),
         ##   (val_mul, ":village_point", ":amount_factor"),
         ##   (try_begin),
         ##     (eq, ":village_no", ":old_target_recruit_troops"),
         ##     (val_mul, ":village_point", 100),
         ##   (try_end),
         ##   (val_add, ":num_villages", ":village_point"),
         ## (try_end),
         ## (gt, ":num_villages", 0),
         ## (store_random_in_range, ":random_village_no", 0, ":num_villages"),
         ## (try_for_range, ":village_no", villages_begin, villages_end),
         ##   (eq, ":target_recruit_troops", -1),
         ##   (store_faction_of_party, ":village_faction_no", ":village_no"),
         ##   (store_relation, ":reln", ":village_faction_no", ":faction_no"),
         ##   (this_or_next|ge, ":reln", 0),
         ##   (party_slot_eq, ":village_no", slot_center_culture, ":original_faction_culture"),
         ##   (assign, ":faction_factor", 1),
         ##   (try_begin),
         ##     (eq, ":village_faction_no", ":faction_no"),
         ##     (assign, ":faction_factor", 20),
         ##   (try_end),
         ##   (assign, ":amount_factor", 1),
         ##   (party_get_slot, ":volunteer_amount", ":village_no", slot_center_npc_volunteer_troop_amount),
         ##   (try_begin),
         ##     (gt, ":volunteer_amount", 0),
         ##     (val_add, ":volunteer_amount", 5),
         ##     (val_add, ":amount_factor", ":volunteer_amount"),
         ##   (try_end),
         ##   (store_distance_to_party_from_party, ":dist", ":village_no", ":party_no"),
         ##   (store_sub, ":dist_factor", 100, ":dist"),
         ##   (val_max, ":dist_factor", 10),
         ##   (assign, ":raid_factor", 100),
         ##   (try_begin),
         ##     (party_slot_eq, ":village_no", slot_village_state, svs_being_raided),
         ##     (assign, ":raid_factor", 1),
         ##   (try_end),
         ##   (store_mul, ":village_point", ":faction_factor", ":dist_factor"),
         ##   (val_mul, ":village_point", ":raid_factor"),
         ##   (val_mul, ":village_point", ":amount_factor"),
         ##   (try_begin),
         ##     (eq, ":village_no", ":old_target_recruit_troops"),
         ##     (val_mul, ":village_point", 100),
         ##   (try_end),
         ##   (val_sub, ":random_village_no", ":village_point"),
         ##   (lt, ":random_village_no", 0),
            (call_script, "script_cf_select_random_walled_center_with_faction_and_owner_priority_no_siege", ":faction_no", ":troop_no"),
			(assign, ":center_no", reg0), 
			(gt, ":center_no", 0),
			(assign, ":target_recruit_troops", ":center_no"),
            (assign, ":chance_recruit_troops", 3),
            (try_begin),
              (eq, ":old_target_recruit_troops", ":target_recruit_troops"),
              (val_mul, ":chance_recruit_troops", 1000),
            (try_end),
          #(try_end),
        (try_end),
        (try_begin), #raid villages
          (eq, ":besieger_party", -1),
          (ge, ":cur_center_left_strength", ":min_strength_behind"),#stay inside if center strength is too low
          (gt, "$party_relative_strength", 75),
          (lt,  "$ratio_of_prisoners", 50),
          (assign, ":old_target_raid_around_center", -1),
          (try_begin),
            (eq, ":old_ai_state", spai_raiding_around_center),
            (assign, ":old_target_raid_around_center", ":old_ai_object"),
          (try_end),
          (assign, ":num_villages", 0),
          (try_for_range, ":enemy_village_no", villages_begin, villages_end),
            (call_script, "script_get_center_faction_relation_including_player", ":enemy_village_no", ":faction_no"),
            (lt, reg0, 0),
            (assign, ":raided_by_self", 0),
            (try_begin),
              (party_slot_eq, ":enemy_village_no", slot_village_state, svs_being_raided),
              (party_slot_eq, ":enemy_village_no", slot_village_raided_by, ":party_no"),
              (assign, ":raided_by_self", 1),
            (try_end),
            (this_or_next|party_slot_eq, ":enemy_village_no", slot_village_state, 0), #village is not already raided
            (eq, ":raided_by_self", 1),
            (store_distance_to_party_from_party, ":dist", ":enemy_village_no", ":party_no"),
            (store_sub, ":dist_factor", 75, ":dist"),
            (val_max, ":dist_factor", 3),
            (val_add, ":num_villages", ":dist_factor"),
            (eq, ":enemy_village_no", ":old_target_raid_around_center"),
            (val_add, ":num_villages", 10000),
          (try_end),
          (gt, ":num_villages", 0),
          (store_random_in_range, ":random_village_no", 0, ":num_villages"),
          (try_for_range, ":enemy_village_no", villages_begin, villages_end),
            (eq, ":target_raid_around_center", -1),
            (call_script, "script_get_center_faction_relation_including_player", ":enemy_village_no", ":faction_no"),
            (lt, reg0, 0),
            (assign, ":raided_by_self", 0),
            (try_begin),
              (party_slot_eq, ":enemy_village_no", slot_village_state, svs_being_raided),
              (party_slot_eq, ":enemy_village_no", slot_village_raided_by, ":party_no"),
              (assign, ":raided_by_self", 1),
            (try_end),
            (this_or_next|party_slot_eq, ":enemy_village_no", slot_village_state, 0), #village is not already raided
            (eq, ":raided_by_self", 1),
            (store_distance_to_party_from_party, ":dist", ":enemy_village_no", ":party_no"),
            (store_sub, ":dist_factor", 75, ":dist"),
            (val_max, ":dist_factor", 3),
            (val_sub, ":random_village_no", ":dist_factor"),
            (try_begin),
              (eq, ":enemy_village_no", ":old_target_raid_around_center"),
              (val_sub, ":random_village_no", 10000),
            (try_end),
            (lt, ":random_village_no", 0),
            (assign, ":target_raid_around_center", ":enemy_village_no"),
            (assign, ":chance_raid_around_center", 30),
            (try_begin),
              (eq, ":old_target_raid_around_center", ":target_raid_around_center"),
              (val_mul, ":chance_raid_around_center", 100),
            (try_end),
          (try_end),
        (try_end),
        (try_begin), #besiege center
          (eq, ":besieger_party", -1),
          (ge, ":cur_center_left_strength", ":min_strength_behind"),#stay inside if center strength is too low
          (assign, ":continue", 0),
          (try_begin),
            (eq, ":old_ai_state", spai_besieging_center),
            (gt, "$party_relative_strength", 30),
            (assign, ":continue", 1),
          (else_try),
            (gt, "$party_relative_strength", 75),
            (lt, "$ratio_of_prisoners", 50),
            (assign, ":continue", 1),
          (try_end),
          (eq, ":continue", 1),

          (assign, ":our_estimated_str", ":our_follower_strength"),
          (val_add, ":our_estimated_str", ":our_strength"),

          (assign, ":old_target_besiege_enemy_center", -1),
          (try_begin),
            (eq, ":old_ai_state", spai_besieging_center),
            (assign, ":old_target_besiege_enemy_center", ":old_ai_object"),
          (try_end),

          (assign, ":best_besiege_center", -1),
          (assign, ":best_besiege_center_score", 0),
          (try_for_range, ":enemy_walled_center", walled_centers_begin, walled_centers_end),
            (party_get_slot, ":other_besieger_party", ":enemy_walled_center", slot_center_is_besieged_by),
            (assign, ":besieger_own_faction", 0),
            (try_begin),
              (ge, ":other_besieger_party", 0),
              (party_is_active, ":other_besieger_party"),
              (store_faction_of_party, ":besieger_faction", ":other_besieger_party"),
              (eq, ":besieger_faction", ":faction_no"),
              (assign, ":besieger_own_faction", 1),
            (try_end),
            (this_or_next|eq, ":other_besieger_party", -1),
            (eq, ":besieger_own_faction", 1),
            (call_script, "script_get_center_faction_relation_including_player", ":enemy_walled_center", ":faction_no"),
            (assign, ":reln", reg0),
            (lt, ":reln", 0),
            (val_mul, ":reln", -1),
            (val_add, ":reln", 50),
            (store_distance_to_party_from_party, ":dist", ":enemy_walled_center", ":party_no"),
            (store_sub, ":dist_factor", 75, ":dist"),
            (val_max, ":dist_factor", 3),
            (party_get_slot, ":center_str", ":enemy_walled_center", slot_party_cached_strength),
            (party_get_slot, ":center_near_str", ":enemy_walled_center", slot_party_nearby_friend_strength),
            (val_add, ":center_str", ":center_near_str"),

            (store_mul, ":relative_center_str", ":center_str", 100),
            (val_div, ":relative_center_str", ":our_estimated_str"),
            (store_sub, ":center_score", 1000, ":relative_center_str"),
            (val_max, ":center_score", 1),

            (val_mul, ":center_score", ":reln"),
            (val_mul, ":center_score", ":dist_factor"),
            
            (try_begin),
              (party_slot_eq, ":enemy_walled_center", slot_town_lord, "trp_player"),
              (call_script, "script_troop_get_player_relation", ":troop_no"),
              (assign, ":player_relation", reg0),
              #(troop_get_slot, ":player_relation", ":troop_no", slot_troop_player_relation),
              (lt, ":player_relation", 0),
              (store_sub, ":multiplier", 50, ":player_relation"),
              (val_mul, ":center_score", ":multiplier"),
              (val_div, ":center_score", 50),
            (try_end),

            (try_begin),
              (eq, ":enemy_walled_center", ":old_target_besiege_enemy_center"),
              (val_mul, ":center_score", 100),
            (try_end),
            (try_begin),
              (gt, ":center_score", ":best_besiege_center_score"),
              (assign, ":best_besiege_center_score", ":center_score"),
              (assign, ":best_besiege_center", ":enemy_walled_center"),
            (try_end),
          (try_end),
      
          (ge, ":best_besiege_center", 0),
          (assign, ":chance_besiege_enemy_center", 20),
          (assign, ":target_besiege_enemy_center", ":best_besiege_center"),
          (try_begin),
            (eq, ":old_target_besiege_enemy_center", ":target_besiege_enemy_center"),
            (val_mul, ":chance_besiege_enemy_center", 100),
          (try_end),
        (try_end),
        (try_begin), #patrol alarmed center.
          (eq, ":besieger_party", -1),
          (ge, ":cur_center_left_strength", ":min_strength_behind"),#stay inside if center strength is too low
          (ge, "$party_relative_strength", 60),
          (try_begin),
            (party_slot_eq, ":party_no", slot_party_ai_state, spai_patrolling_around_center),
            (party_get_slot, ":target_patrol_around_center", ":party_no", slot_party_ai_object),
          (try_end),

          (assign, ":old_target_patrol_around_center", -1),
          (try_begin),
            (eq, ":old_ai_state", spai_patrolling_around_center),
            (assign, ":old_target_patrol_around_center", ":old_ai_object"),
          (try_end),

          (assign, ":best_patrol_score", 0),
          (assign, ":best_patrol_target", -1),
          (try_for_range, ":center_no", centers_begin, centers_end), #find closest center that has spotted enemies.
            (store_faction_of_party, ":center_faction", ":center_no"),
            (eq, ":center_faction", ":faction_no"),
            (store_distance_to_party_from_party, ":distance", ":party_no", ":center_no"),
            (store_sub, ":this_center_score", 100, ":distance"),
            (val_max, ":this_center_score", 1),
            (try_begin),
              (party_slot_ge, ":center_no", slot_center_last_spotted_enemy, 0),
              (val_mul, ":this_center_score", 100),
            (try_end),
            (try_begin),
              (party_slot_eq, ":center_no", slot_town_lord, ":troop_no"),
              (val_mul, ":this_center_score", 2),
            (try_end),
            (try_begin),
              (eq, ":center_no", ":old_target_patrol_around_center"),
              (val_mul, ":this_center_score", 1000),
            (try_end),
            (try_begin),
              (gt, ":this_center_score", ":best_patrol_score"),
              (assign, ":best_patrol_score", ":this_center_score"),
              (assign, ":best_patrol_target", ":center_no"),
            (try_end),
          (try_end),
          (try_begin),
            (gt, ":best_patrol_score", 0),
            (assign, ":target_patrol_around_center", ":best_patrol_target"),
          (try_end),
          (try_begin),
             (is_between, ":target_patrol_around_center", centers_begin, centers_end),
             (assign, ":chance_patrol_around_center", 80),
          (try_end),
          (try_begin),
            (troop_slot_ge, ":troop_no", slot_troop_change_to_faction, 1),
            (val_mul, ":chance_patrol_around_center", 10),
          (try_end),
          (try_begin),
             (eq, ":old_target_patrol_around_center", ":target_patrol_around_center"),
             (val_mul, ":chance_patrol_around_center", 100),
          (try_end),
        (try_end),

##        (try_begin), #cancel actions
##          (party_get_slot, ":ai_state", ":party_no", slot_party_ai_state),
##          (party_get_slot, ":ai_object", ":party_no", slot_party_ai_object),
##          (neq, ":ai_state", spai_undefined),
##          (assign, ":cancel_cur_action", 0),
##        (try_begin),
##            (eq, ":ai_state", spai_patrolling_around_center),
##            (neg|party_slot_ge, ":ai_object", slot_center_last_spotted_enemy, 0),
##            (store_random_in_range, ":rand", 0, 100),
##            (lt, ":rand", 25),
##            (assign, ":cancel_cur_action", 1),
##        (else_try),
##            (this_or_next|eq, ":ai_state", spai_besieging_center),
##            (eq, ":ai_state", spai_raiding_around_center),
##            (store_faction_of_party, ":ai_object_faction", ":ai_object"),
##            (store_relation, ":ai_object_relation", ":ai_object_faction", ":faction_no"),
##            (ge, ":ai_object_relation", 0),
##            (assign, ":cancel_cur_action", 1),
##        (try_end),
##          (eq, ":cancel_cur_action", 0),
##          (assign, ":chance_stay", 100),
##              (try_end),
      
##		(try_begin),
##          (eq, ":siege_going_badly", 1),
##          (assign, ":chance_besiege_enemy_center", 0),
##          (assign, ":chance_stay", 0),
##              (try_end),
##          (try_begin),
##          (eq, ":siege_going_well", 1),
##        (assign, ":chance_move_to_home_center", 0),
##        (assign, ":chance_move_to_other_center", 0),
##          (assign, ":chance_patrol_around_center", 0),
##        (assign, ":chance_besiege_enemy_center", 0),
##          (assign, ":chance_help_besieged_center", 0),
##          (try_end),

        (assign, ":sum_chances", ":chance_move_to_home_center"),
        (val_add, ":sum_chances", ":chance_move_to_other_center"),
        (val_add, ":sum_chances", ":chance_recruit_troops"),
        (val_add, ":sum_chances", ":chance_raid_around_center"),
        (val_add, ":sum_chances", ":chance_besiege_enemy_center"),
        (val_add, ":sum_chances", ":chance_patrol_around_center"),
##        (val_add, ":sum_chances", ":chance_stay"),
        (val_max, ":sum_chances", 1),
        (store_random_in_range, ":random_no", 0, ":sum_chances"),
        (try_begin),
          (val_sub, ":random_no", ":chance_move_to_home_center"),
          (lt, ":random_no", 0),
          (call_script, "script_party_set_ai_state", ":party_no", spai_holding_center, ":target_move_to_home_center"),
          (party_set_flags, ":party_no", pf_default_behavior, 1),
          (party_set_slot, ":party_no", slot_party_commander_party, -1),
        (else_try),
          (val_sub, ":random_no", ":chance_move_to_other_center"),
          (lt, ":random_no", 0),
          (call_script, "script_party_set_ai_state", ":party_no", spai_holding_center, ":target_move_to_other_center"),
          (party_set_slot, ":party_no", slot_party_commander_party, -1),
        (else_try),
          (val_sub, ":random_no", ":chance_recruit_troops"),
          (lt, ":random_no", 0),
          (call_script, "script_party_set_ai_state", ":party_no", spai_recruiting_troops, ":target_recruit_troops"),
          (party_set_slot, ":party_no", slot_party_commander_party, -1),
        (else_try),
          (val_sub, ":random_no", ":chance_raid_around_center"),
          (lt, ":random_no", 0),
          (call_script, "script_party_set_ai_state", ":party_no", spai_raiding_around_center, ":target_raid_around_center"),
          (party_set_slot, ":party_no", slot_party_commander_party, -1),
        (else_try),
          (val_sub, ":random_no", ":chance_besiege_enemy_center"),
          (lt, ":random_no", 0),
          (call_script, "script_party_set_ai_state", ":party_no", spai_besieging_center, ":target_besiege_enemy_center"),
        (else_try),
          (val_sub, ":random_no", ":chance_patrol_around_center"),
          (lt, ":random_no", 0),
          (call_script, "script_party_set_ai_state", ":party_no", spai_patrolling_around_center, ":target_patrol_around_center"),
          (party_set_slot, ":party_no", slot_party_commander_party, -1),
        (else_try),
          (call_script, "script_party_set_ai_state", ":party_no", spai_undefined, -1),
          (party_set_slot, ":party_no", slot_party_commander_party, -1),
        (try_end),
      (try_end),
  ]),
  
  

  # script_process_kingdom_parties_ai
  # This is called more frequently than decide_kingdom_parties_ai
  # Input: none
  # Output: none
  #called from triggers
  ("process_kingdom_parties_ai",
    [
       (try_for_range, ":troop_no", kingdom_heroes_begin, kingdom_heroes_end),
         (troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_hero),
         #(troop_slot_eq, ":troop_no", slot_troop_is_prisoner, 0),
         (neg|troop_slot_ge, ":troop_no", slot_troop_prisoner_of_party, 0),
         (troop_get_slot, ":party_no", ":troop_no", slot_troop_leaded_party),
         (gt, ":party_no", 0),
         (call_script, "script_process_hero_ai", ":troop_no"),
       (try_end),
  ]),
  


  # script_process_hero_ai
  # This is called more frequently than script_decide_kingdom_party_ais
  # Input: none
  # Output: none
  #called from triggers
  ("process_hero_ai",
    [
    (store_script_param_1, ":troop_no"),
    (troop_get_slot, ":party_no", ":troop_no", slot_troop_leaded_party),
        (store_faction_of_party, ":faction_no", ":party_no"),
        (party_get_slot, ":ai_state", ":party_no", slot_party_ai_state),
        (party_get_slot, ":ai_object", ":party_no", slot_party_ai_object),
        (try_begin),
          (eq, ":ai_state", spai_besieging_center),
          (try_begin),
            (party_slot_eq, ":ai_object", slot_center_is_besieged_by, -1),
            (store_distance_to_party_from_party, ":distance", ":party_no", ":ai_object"),
            (lt, ":distance", 3),
            (try_begin),
              (party_slot_ge, ":party_no", slot_party_commander_party, 0),
              (party_get_slot, ":commander_party", ":party_no", slot_party_commander_party),
              (party_set_slot, ":ai_object", slot_center_is_besieged_by, ":commander_party"),
            (else_try),
              (party_set_slot, ":ai_object", slot_center_is_besieged_by, ":party_no"),
            (try_end),
            (store_current_hours, ":cur_hours"),
            (party_set_slot, ":ai_object", slot_center_siege_begin_hours, ":cur_hours"),

            (str_store_party_name_link, s1, ":ai_object"),
            (str_store_troop_name_link, s2, ":troop_no"),
            (str_store_faction_name_link, s3, ":faction_no"),
            (display_log_message, "@{s1} has been besieged by {s2} of {s3}."),
            (try_begin),
              (store_faction_of_party, ":ai_object_faction", ":ai_object"),
              (this_or_next|party_slot_eq, ":ai_object", slot_town_lord, "trp_player"),
              (this_or_next|eq, ":ai_object_faction", "$players_kingdom"),
              (eq, ":ai_object_faction", "fac_player_supporters_faction"),
              (call_script, "script_add_notification_menu", "mnu_notification_center_under_siege", ":ai_object", ":troop_no"),
            (try_end),
			(troop_get_slot, ":attacker_party", ":troop_no", slot_troop_leaded_party),
			(call_script, "script_ms_before_attack", ":ai_object", ":attacker_party", ":troop_no"),
            (call_script, "script_village_set_state", ":ai_object", svs_under_siege),
            (assign, "$g_recalculate_ais", 1),
          (try_end),
        (else_try),
          (eq, ":ai_state", spai_recruiting_troops),
          (try_begin),
            (store_distance_to_party_from_party, ":distance", ":party_no", ":ai_object"),
            (lt, ":distance", 3),
            (store_current_hours, ":cur_hours"),
            (party_get_slot, ":substate", ":party_no", slot_party_ai_substate),
            (val_add, ":substate", 1),
            (party_set_slot, ":party_no", slot_party_ai_substate, ":substate"),
            (try_begin),
              (ge, ":substate", 4),
              (party_set_slot, ":party_no", slot_party_ai_substate, ":cur_hours"),
              (call_script, "script_party_set_ai_state", ":party_no", spai_undefined, -1),
              (party_set_flags, ":party_no", pf_default_behavior, 0),
              (party_set_slot, ":party_no", slot_party_commander_party, -1),
              #(party_get_slot, ":troop_type", ":ai_object", slot_center_npc_volunteer_troop_type),
              #(party_get_slot, ":troop_amount", ":ai_object", slot_center_npc_volunteer_troop_amount),
              (party_set_slot, ":ai_object", slot_center_npc_volunteer_troop_amount, -1),
              #(party_add_members, ":party_no", ":troop_type", ":troop_amount"),
            (try_end),
          (try_end),
        (else_try),
          (eq, ":ai_state", spai_raiding_around_center),
          (party_slot_eq, ":party_no", slot_party_ai_substate, 0),
          (assign, ":selected_village", 0),
          (try_for_range, ":enemy_village_no", villages_begin, villages_end),
            (eq, ":selected_village", 0),
            (store_faction_of_party, ":enemy_village_faction", ":enemy_village_no"),
            (try_begin),
              (party_slot_eq, ":enemy_village_no", slot_town_lord, "trp_player"),
              (store_relation, ":reln", "fac_player_supporters_faction", ":faction_no"),
            (else_try),
              (store_relation, ":reln", ":enemy_village_faction", ":faction_no"),
            (try_end),
            (lt, ":reln", 0),
            (store_distance_to_party_from_party, ":dist", ":enemy_village_no", ":party_no"),
            (lt, ":dist", 15),
            (party_slot_eq, ":enemy_village_no", slot_village_state, 0), #village is not already raided
            #CHANGE STATE TO RAID THIS VILLAGE
            (assign, ":selected_village", ":enemy_village_no"),
          (try_end),
          (try_begin),
            (eq, ":selected_village", 0),
            (is_between, ":ai_object", villages_begin, villages_end),
            (assign, ":selected_village", ":ai_object"),
          (try_end),
          (try_begin),
            (gt, ":selected_village", 0),
            (call_script, "script_party_set_ai_state", ":party_no", spai_raiding_around_center, ":selected_village"),
            (try_begin),
              (faction_slot_eq, ":faction_no", slot_faction_marshall, ":troop_no"),
              (faction_slot_eq, ":faction_no", slot_faction_ai_state, sfai_raiding_village),
              (faction_set_slot, ":faction_no", slot_faction_ai_object, ":selected_village"),
            (try_end),
            (party_get_position, pos1, ":selected_village"),
            (map_get_random_position_around_position, pos2, pos1, 1),
            (party_set_ai_behavior, ":party_no", ai_bhvr_travel_to_point),
            (party_set_ai_target_position, ":party_no", pos2),
            (party_set_ai_object, ":party_no", ":selected_village"),
            (party_set_slot, ":party_no", slot_party_ai_substate, 1),
          (try_end),
        (else_try),
          (eq, ":ai_state", spai_raiding_around_center),#substate is 1
          (try_begin),                                
            (store_distance_to_party_from_party, ":distance", ":party_no", ":ai_object"),
            (lt, ":distance", 2),
            (try_begin),
              (party_slot_eq, ":ai_object", slot_village_state, 0),
              (call_script, "script_village_set_state", ":ai_object", svs_being_raided),
              (party_set_slot, ":ai_object", slot_village_raided_by, ":party_no"),
              (try_begin),
                (store_faction_of_party, ":village_faction", ":ai_object"),
                (this_or_next|party_slot_eq, ":ai_object", slot_town_lord, "trp_player"),
                (eq, ":village_faction", "fac_player_supporters_faction"),
                (store_distance_to_party_from_party, ":dist", "p_main_party", ":ai_object"),
                (this_or_next|lt, ":dist", 30),
                (party_slot_eq, ":ai_object", slot_center_has_messenger_post, 1),
                (call_script, "script_add_notification_menu", "mnu_notification_village_raid_started", ":ai_object", ":troop_no"),
              (try_end),
            (else_try),
              (party_slot_eq, ":ai_object", slot_village_state, svs_being_raided),
            (else_try),
              #if anything other than being_raided leave
              (party_set_slot, ":party_no", slot_party_ai_substate, 0),
            (try_end),
          (try_end),
        (else_try),
          (eq, ":ai_state", spai_retreating_to_center),
          (try_begin),
            (party_get_battle_opponent, ":enemy_party", ":party_no"),
            (ge, ":enemy_party", 0), #we are in a battle! we may be caught in a loop!
            (call_script, "script_party_set_ai_state", ":party_no", spai_undefined, -1),
            (party_set_flags, ":party_no", pf_default_behavior, 0),
            (party_set_slot, ":party_no", slot_party_commander_party, -1),
          (try_end),
        (else_try),
          (eq, ":ai_state", spai_patrolling_around_center),
          (try_begin),
            (party_slot_eq, ":party_no", slot_party_ai_substate, 0),
            (store_distance_to_party_from_party, ":distance", ":party_no", ":ai_object"),
            (lt, ":distance", 3),
            (party_set_slot, ":party_no", slot_party_ai_substate, 1),			
            (party_set_ai_behavior, ":party_no", ai_bhvr_patrol_party),
            (party_set_ai_object, ":party_no", ":ai_object"),
          (try_end),
        (else_try),
          (eq, ":ai_state", spai_holding_center),
          (party_get_attached_to, ":cur_town", ":party_no"),
          # Make the party sortie outside, so that it will drive away any enemies??
          (try_begin),
            (is_between, ":cur_town", walled_centers_begin, walled_centers_end),
            (assign, ":sortie_chance", 50),
            (try_begin),
              (party_get_attached_to, ":cur_town", ":party_no"),
              (party_slot_ge, ":party_no", slot_center_is_besieged_by, 0), #town is under siege
              (assign, ":sortie_chance", 5),
            (try_end),
            (store_random_in_range, ":rand", 0, 100),
            (lt, ":rand", ":sortie_chance"),
            (assign, ":enemies_nearby", 0),
            (call_script, "script_party_calculate_regular_strength", ":party_no"),
            (assign, ":our_strength", reg0),
            (try_for_range, ":enemy_hero", kingdom_heroes_begin, kingdom_heroes_end),
              (store_troop_faction, ":enemy_hero_faction", ":enemy_hero"),
              (store_relation, ":reln", ":enemy_hero_faction", ":faction_no"),
              (lt, ":reln", 0),
              (troop_get_slot, ":enemy_party", ":enemy_hero", slot_troop_leaded_party),
              (gt, ":enemy_party", 0),
              (party_is_active, ":enemy_party"),
              (store_distance_to_party_from_party, ":dist", ":enemy_party", ":party_no"),
              (lt, ":dist", 7),
              (call_script, "script_party_calculate_regular_strength", "p_collective_enemy"),
              (gt, reg0, ":our_strength"),
              (assign, ":enemies_nearby", 1),
            (try_end),
            (eq, ":enemies_nearby", 0),			
            (party_set_ai_behavior, ":party_no", ai_bhvr_travel_to_party),
            (party_set_ai_object, ":party_no", ":ai_object"),
            (party_set_flags, ":party_no", pf_default_behavior, 0),
            (party_detach, ":party_no"),
        (try_end),
      (try_end),	
  ]),
  

  
  # script_select_faction_marshall
  # Input: arg1: faction_no
  # Output: none
  #called from triggers
  ("select_faction_marshall",
   [
     (store_script_param_1, ":faction_no"),
     (faction_get_slot, ":faction_leader", ":faction_no", slot_faction_leader),
     (faction_get_slot, ":old_faction_marshall", ":faction_no", slot_faction_marshall),
     (assign, ":total_renown", 0),
     (try_for_range, ":loop_var", "trp_kingdom_heroes_including_player_begin", kingdom_heroes_end),
       (assign, ":cur_troop", ":loop_var"),
       (assign, ":continue", 0),
       (try_begin),
         (eq, ":loop_var", "trp_kingdom_heroes_including_player_begin"),
         (assign, ":cur_troop", "trp_player"),
         (try_begin),
           (eq, ":faction_no", "$players_kingdom"),
           (assign, ":continue", 1),
         (try_end),
       (else_try),
         (troop_slot_eq, ":cur_troop", slot_troop_occupation, slto_kingdom_hero),
         (store_troop_faction, ":cur_faction", ":cur_troop"),
         (eq, ":cur_faction", ":faction_no"),
         (troop_get_slot, ":cur_party", ":cur_troop", slot_troop_leaded_party),
         (gt, ":cur_party", 0),
         (party_is_active, ":cur_party"),
         (call_script, "script_party_count_fit_for_battle", ":cur_party"),
         (assign, ":party_fit_for_battle", reg0),
         (call_script, "script_party_get_ideal_size", ":cur_party"),
         (assign, ":ideal_size", reg0),
         (store_mul, ":relative_strength", ":party_fit_for_battle", 100),
         (val_div, ":relative_strength", ":ideal_size"),
         (ge, ":relative_strength", 25),
         (assign, ":continue", 1),
       (try_end),
       (eq, ":continue", 1),
       (troop_get_slot, ":renown", ":cur_troop", slot_troop_renown),
       (try_begin),
         (eq, ":cur_troop", "trp_player"),
         (neq, ":old_faction_marshall", "trp_player"),
         (assign, ":renown", 0),
       (try_end),
       (try_begin),
         (eq, ":cur_troop", ":faction_leader"),
         (val_mul, ":renown", 3),
         (val_div, ":renown", 4),
       (try_end),
       (try_begin),
         (eq, ":cur_troop", ":old_faction_marshall"),
         (val_mul, ":renown", 1000),
       (try_end),
       (val_add, ":total_renown", ":renown"),
     (try_end),
     (assign, ":result", -1),
     (try_begin),
       (gt, ":total_renown", 0),
       (store_random_in_range, ":random_renown", 0, ":total_renown"),
       (try_for_range, ":loop_var", "trp_kingdom_heroes_including_player_begin", kingdom_heroes_end),
         (eq, ":result", -1),
         (assign, ":cur_troop", ":loop_var"),
       (assign, ":continue", 0),
       (try_begin),
           (eq, ":loop_var", "trp_kingdom_heroes_including_player_begin"),
           (assign, ":cur_troop", "trp_player"),
           (try_begin),
             (eq, ":faction_no", "$players_kingdom"),
         (assign, ":continue", 1),
           (try_end),
       (else_try),
           (troop_slot_eq, ":cur_troop", slot_troop_occupation, slto_kingdom_hero),
           (store_troop_faction, ":cur_faction", ":cur_troop"),
           (eq, ":cur_faction", ":faction_no"),
           (troop_get_slot, ":cur_party", ":cur_troop", slot_troop_leaded_party),
           (gt, ":cur_party", 0),
           (party_is_active, ":cur_party"),
           (call_script, "script_party_count_fit_for_battle", ":cur_party"),
           (assign, ":party_fit_for_battle", reg0),
           (call_script, "script_party_get_ideal_size", ":cur_party"),
           (assign, ":ideal_size", reg0),
           (store_mul, ":relative_strength", ":party_fit_for_battle", 100),
           (val_div, ":relative_strength", ":ideal_size"),
           (ge, ":relative_strength", 25),
         (assign, ":continue", 1),
       (try_end),
       (eq, ":continue", 1),
         (troop_get_slot, ":renown", ":cur_troop", slot_troop_renown),
         (try_begin),
           (eq, ":cur_troop", "trp_player"),
           (neq, ":old_faction_marshall", "trp_player"),
           (assign, ":renown", 0),
         (try_end),
         (try_begin),
           (eq, ":cur_troop", ":faction_leader"),
           (val_mul, ":renown", 3),
           (val_div, ":renown", 4),
         (try_end),
         (try_begin),
           (eq, ":cur_troop", ":old_faction_marshall"),
           (val_mul, ":renown", 1000),
         (try_end),
         (val_sub, ":random_renown", ":renown"),
         (lt, ":random_renown", 0),
         (assign, ":result", ":cur_troop"),
       (try_end),
     (try_end),
     (try_begin),
       (eq, "$cheat_mode", 1),
       (ge, ":result", 0),
       (str_store_troop_name, s1, ":result"),
       (str_store_faction_name, s2, ":faction_no"),
       (display_message, "@{s1} is chosen as the marshall of {s2}."),
     (try_end),
	 (try_begin),
		(check_quest_active, "qst_oim_potop_marshal_started"),
		(neg|check_quest_succeeded, "qst_oim_potop_marshal_started"), 
		(neg|check_quest_finished,"qst_oim_potop_marshal_started"),
		(quest_slot_eq, "qst_oim_potop_marshal_started", slot_quest_current_state, 0), 
		(assign, ":result", "trp_player"),
		(quest_set_slot, "qst_oim_potop_marshal_started", slot_quest_current_state, 1), 
     (try_end),
	 #OiM code
	 (try_begin), #OiM potop fix if player is a king
		(eq, ":faction_no", "fac_kingdom_1"),
		(eq, ":faction_leader", "trp_player"), 
		(assign, ":result", "trp_player"),
		(assign, "$g_election_date", 1),
	 (try_end), 
	 
	 (try_begin), #OiM potop fix if player won the marshal election 
		(eq, ":faction_no", "fac_kingdom_1"),
		(eq, "$players_kingdom", "fac_kingdom_1"), 
		(check_quest_finished,"qst_oim_potop_marshal_started"),
		(assign, ":result", "trp_player"),
		(assign, "$g_election_date", 1),
	 (try_end), 
	 #OiM player has Black Hetman
	 (call_script, "script_get_inventory_items_count", "itm_black_hetman", "trp_player"), 
	 (assign, ":count1", reg0), 
	 (try_begin), 
		(eq, ":faction_no", "fac_kingdom_5"),
		(eq, "$players_kingdom", "fac_kingdom_5"), 
		(this_or_next|eq, ":count1", 1), 
		(troop_has_item_equipped, "trp_player", "itm_black_hetman"), 
		(assign, ":result", "trp_player"),
		(assign, "$g_election_date", 1),
	 (try_end), 
	 
	 (try_begin), #Hero is the lord of the Moscow
		(eq, ":faction_no", "fac_kingdom_2"),
		(eq, "$players_kingdom", "fac_kingdom_2"), 
		(eq, ":faction_leader", "trp_player"), 
		(neq, "$g_razin_rebellion", 1), 
		(assign, ":result", "trp_player"),
		(assign, "$g_election_date", 1),
	 (try_end), 
	 
	 #OiM code end
	 
     (assign, reg0, ":result"),
   ]),
  
  # script_get_center_faction_relation_including_player
  # Input: arg1: center_no, arg2: target_faction_no
  # Output: reg0: relation
  #called from triggers
  ("get_center_faction_relation_including_player",
   [
     (store_script_param, ":center_no", 1),
     (store_script_param, ":target_faction_no", 2),
     (store_faction_of_party, ":center_faction", ":center_no"),
     (store_relation, ":reln", ":center_faction", ":target_faction_no"),
     (try_begin),
       (party_slot_eq, ":center_no", slot_town_lord, "trp_player"),
       (store_relation, ":reln", "fac_player_supporters_faction", ":target_faction_no"),
     (try_end),
     (assign, reg0, ":reln"),
     ]),
  
  # script_decide_faction_ai
  # Input: arg1: faction_no
  # Output: none
  #called from triggers
  ("decide_faction_ai",
   [
    (store_script_param_1, ":faction_no"),
    (faction_get_slot, ":old_faction_ai_state", ":faction_no", slot_faction_ai_state),
    (faction_get_slot, ":old_faction_ai_object", ":faction_no", slot_faction_ai_object),
       (faction_get_slot, ":old_faction_ai_last_offensive_time", ":faction_no", slot_faction_ai_last_offensive_time),
       (assign, ":faction_marshall_party", -1),
       (assign, ":faction_marshall_army_strength", 1),#0 might cause division by zero problems
       (assign, ":faction_marshall_num_followers", 1),
       (call_script, "script_select_faction_marshall", ":faction_no"),
       (assign, ":faction_marshall", reg0),
       (assign, ":marshall_changed", 0),
	(try_begin),
         (neg|faction_slot_eq, ":faction_no", slot_faction_marshall, ":faction_marshall"),
         (assign, ":marshall_changed", 1),
         (eq, "$players_kingdom", ":faction_no"),
         (str_store_troop_name_link, s1, ":faction_marshall"),
         (str_store_faction_name_link, s2, ":faction_no"),
         (display_message, "@{s1} is the new marshall of {s2}."),
         (call_script, "script_check_and_finish_active_army_quests_for_faction", ":faction_no"),
		 #qst_oim_getman_za_hmelya
		(try_end),
       (faction_set_slot, ":faction_no", slot_faction_marshall, ":faction_marshall"),
		(try_begin),
         (gt, ":faction_marshall", 0),
         (troop_get_slot, ":faction_marshall_party", ":faction_marshall", slot_troop_leaded_party),
         (gt, ":faction_marshall_party", 0),
         (party_get_slot, ":faction_marshall_army_strength", ":faction_marshall_party", slot_party_cached_strength),
         (party_get_slot, ":follower_strength", ":faction_marshall_party", slot_party_follower_strength),
         (val_add, ":faction_marshall_army_strength", ":follower_strength"),
         (try_for_range, ":cur_troop", kingdom_heroes_begin, kingdom_heroes_end),
           (troop_slot_eq, ":cur_troop", slot_troop_occupation, slto_kingdom_hero),
           (troop_get_slot, ":cur_party", ":cur_troop", slot_troop_leaded_party),
           (gt, ":cur_party", 0),
           (party_is_active, ":cur_party"),
           (party_slot_eq, ":cur_party", slot_party_commander_party, ":faction_marshall_party"),
           (val_add, ":faction_marshall_num_followers", 1),
		(try_end),
		(try_end),
		
       (faction_get_slot, ":marshall_num_old_followers", ":faction_no", slot_faction_ai_offensive_max_followers),
       (val_max, ":marshall_num_old_followers", 1),
       (store_mul, ":offensive_rating", ":faction_marshall_num_followers", 100),
       (val_mul, ":offensive_rating", ":faction_marshall_num_followers"),
       (val_div, ":offensive_rating", ":marshall_num_old_followers"),
       (val_div, ":offensive_rating", ":marshall_num_old_followers"),
       (val_min, ":offensive_rating", 100),#Max 100% efficiency
		
       (faction_get_slot, ":num_armies", ":faction_no", slot_faction_num_armies),
       (faction_get_slot, ":num_castles", ":faction_no", slot_faction_num_castles),
       (faction_get_slot, ":num_towns",  ":faction_no", slot_faction_num_towns),
		
       (store_current_hours, ":cur_hours"),
       (store_sub, ":offensive_hours", ":cur_hours", ":old_faction_ai_last_offensive_time"),
		
       (assign, ":num_enemies", 0),
       (try_for_range, ":cur_kingdom", kingdoms_begin, kingdoms_end),
         (faction_slot_eq, ":cur_kingdom", slot_faction_state, sfs_active),
         (store_relation, ":reln", ":cur_kingdom", ":faction_no"),
         (lt, ":reln", 0),
         (val_add, ":num_enemies", 1),
        (try_end),  

       (assign, ":chance_defend", 0),
       (assign, ":chance_gathering_army", 0),
       (assign, ":chance_attacking_center", 0),
       (assign, ":chance_raiding_village", 0),
       (assign, ":chance_attacking_enemy_army", 0),
       (assign, ":chance_attacking_enemies_around_center", 0),
		
       (assign, ":target_attacking_center", -1),
       (assign, ":target_raiding_village", -1),
       (assign, ":target_attacking_enemy_army", -1),
       (assign, ":target_attacking_enemies_around_center", -1),
		
       (try_begin),#Defend
         (eq, ":old_faction_ai_state", sfai_default),
         (assign, ":chance_defend", 100),
       (else_try),
         (eq, ":old_faction_ai_state", sfai_gathering_army),
         (gt, ":offensive_hours", 180),
         (assign, ":chance_defend", 10000),#army can not be gathered, cancel
         #else, keep it as 0
       (else_try),
         (store_div, ":chance_defend", ":offensive_hours", 10),
         (store_mul, ":marshall_change_effect", ":marshall_changed", 300),
         (val_add, ":chance_defend", ":marshall_change_effect"),
		(try_end),		
       (try_begin),#Gathering army
         (eq, ":old_faction_ai_state", sfai_default),
         (gt, ":faction_marshall_party", 0),
		(try_begin),
           #No chance of gathering an army if there are no enemies
           (gt, ":num_enemies", 0),
           (store_mul, ":num_enemies_effect", ":num_enemies", 20),
           (val_add, ":chance_gathering_army", ":num_enemies_effect"),
		
           #Last offensive
           (store_sub, ":last_offensive_effect", ":offensive_hours", 24 * 4),
           (val_min, ":last_offensive_effect", 200),
           (val_add, ":chance_gathering_army", ":last_offensive_effect"),
	
           #Number of walled centers (inversely related)
           (store_mul, ":center_value", ":num_towns", 2),
           (val_add, ":center_value", ":num_castles"),
           (val_mul, ":center_value", 10),
           (val_max, ":center_value", 5),
           (store_sub, ":num_centers_effect", "$g_average_center_value_per_faction", ":center_value"),
           (val_add, ":chance_gathering_army", ":num_centers_effect"),
		
           #Number of armies (inversely related)
           (store_mul, ":num_armies_effect", ":num_armies", 4),
           (store_sub, ":num_armies_effect", 80, ":num_armies_effect"),
           (val_add, ":chance_gathering_army", ":num_armies_effect"),
		
           #Number of walled centers under siege
           (assign, ":num_centers_under_siege", 0),
           (try_for_range, ":cur_center", walled_centers_begin, walled_centers_end),
             (party_slot_ge, ":cur_center", slot_center_is_besieged_by, 0),
             (store_faction_of_party, ":center_faction", ":cur_center"),
             (eq, ":center_faction", ":faction_no"),
             (val_add, ":num_centers_under_siege", 1),
		(try_end),		
           (store_mul, ":num_centers_under_siege_effect", ":num_centers_under_siege", 100),
           (val_add, ":chance_gathering_army", ":num_centers_under_siege_effect"),
         (try_end),
       (else_try),
         (eq, ":old_faction_ai_state", sfai_gathering_army),
         (this_or_next|lt, ":offensive_hours", 60),
         (lt, ":faction_marshall_num_followers", 4),
         (assign, ":chance_gathering_army", 3000),
		(try_end),
       (try_begin),#Attacking center
         (neq, ":old_faction_ai_state", sfai_default),
         (gt, ":faction_marshall_party", 0),
         (assign, ":old_target_attacking_center", -1),
        (try_begin),
           (eq, ":old_faction_ai_state", sfai_attacking_center),
           (assign, ":old_target_attacking_center", ":old_faction_ai_object"),
		(try_end),		
         (assign, ":best_besiege_center", -1),
         (assign, ":best_besiege_center_score", 0),
         (try_for_range, ":enemy_walled_center", walled_centers_begin, walled_centers_end),
           (party_get_slot, ":besieger_party", ":enemy_walled_center", slot_center_is_besieged_by),
           (assign, ":besieger_own_faction", 0),
		(try_begin),
             (ge, ":besieger_party", 0),
             (party_is_active, ":besieger_party"),
             (store_faction_of_party, ":besieger_faction", ":besieger_party"),
             (eq, ":besieger_faction", ":faction_no"),
             (assign, ":besieger_own_faction", 1),
		(try_end),
           (this_or_next|eq, ":besieger_party", -1),
           (eq, ":besieger_own_faction", 1),
           (call_script, "script_get_center_faction_relation_including_player", ":enemy_walled_center", ":faction_no"),
           (assign, ":reln", reg0),
           (lt, ":reln", 0),
           (val_mul, ":reln", -1),
           (val_add, ":reln", 50),
           (store_distance_to_party_from_party, ":dist", ":enemy_walled_center", ":faction_marshall_party"),
           (val_add, ":dist", 20),
           (party_get_slot, ":center_str", ":enemy_walled_center", slot_party_cached_strength),
           (party_get_slot, ":center_near_str", ":enemy_walled_center", slot_party_nearby_friend_strength),
           (val_add, ":center_str", ":center_near_str"),
           (val_add, ":center_str", 1),
           (store_mul, ":center_score", 1000, ":faction_marshall_army_strength"),
           (val_div, ":center_score", ":center_str"),
           (gt, ":center_score", 1500),
           (val_min, ":center_score", 20000),#20 times stronger means an easy victory, distance is more important
	(try_begin), 
             (party_slot_eq, ":enemy_walled_center", slot_town_lord, "trp_player"),
             (call_script, "script_troop_get_player_relation", ":faction_marshall"),
             (assign, ":player_relation", reg0),
             #(troop_get_slot, ":player_relation", ":faction_marshall", slot_troop_player_relation),
             (lt, ":player_relation", 0),
             (store_sub, ":multiplier", 50, ":player_relation"),
             (val_mul, ":center_score", ":multiplier"),
             (val_div, ":center_score", 50),
		(try_end),		
		(try_begin),
             (party_slot_eq, ":enemy_walled_center", slot_center_original_faction, ":faction_no"),
             (val_mul, ":center_score", 2),
		(try_end),
	(try_begin),
             (party_slot_eq, ":enemy_walled_center", slot_center_ex_faction, ":faction_no"),
             (val_mul, ":center_score", 2),
		(try_end),
           (val_mul, ":center_score", ":reln"),
           (val_div, ":center_score", ":dist"),

			(try_begin),
             (eq, ":enemy_walled_center", ":old_target_attacking_center"),
             (val_mul, ":center_score", 100),
			(try_end),
			(try_begin),
             (gt, ":center_score", ":best_besiege_center_score"),
             (assign, ":best_besiege_center_score", ":center_score"),
             (assign, ":best_besiege_center", ":enemy_walled_center"),
			(try_end),
		(try_end),	

         (ge, ":best_besiege_center", 0),
         #Center with equal strength at 30 kms away will have a center_score of 1300 (with -40 reln)
         (store_div, ":chance_attacking_center", ":best_besiege_center_score", 15),
         (val_min, ":chance_attacking_center", 1000),
         (assign, ":target_attacking_center", ":best_besiege_center"),
		(try_begin),
           (eq, ":old_target_attacking_center", ":target_attacking_center"),
           (val_mul, ":chance_attacking_center", 100),
		(try_end),

         (val_mul, ":chance_attacking_center", ":offensive_rating"),
         (val_div, ":chance_attacking_center", 100),
       (try_end),
       (try_begin),#Raiding village
         (neq, ":old_faction_ai_state", sfai_default),
         (gt, ":faction_marshall_party", 0),
         (assign, ":old_target_raiding_village", -1),
		(try_begin),
           (eq, ":old_faction_ai_state", sfai_raiding_village),
           (assign, ":old_target_raiding_village", ":old_faction_ai_object"),
		(try_end),

         (assign, ":num_village_points", 0),
         (try_for_range, ":enemy_village_no", villages_begin, villages_end),
           (call_script, "script_get_center_faction_relation_including_player", ":enemy_village_no", ":faction_no"),
           (lt, reg0, 0),
           (store_distance_to_party_from_party, ":dist", ":enemy_village_no", ":faction_marshall_party"),
           (lt, ":dist", 120),
           (this_or_next|party_slot_eq, ":enemy_village_no", slot_village_state, 0), #village is not already raided
           (party_slot_eq, ":enemy_village_no", slot_village_state, svs_being_raided),
           (store_sub, ":dist_point", 150, ":dist"),
           (val_add, ":num_village_points", ":dist_point"),
           (eq, ":enemy_village_no", ":old_target_raiding_village"),
           (val_add, ":num_village_points", 10000),
         (try_end),
         (gt, ":num_village_points", 0),
         (store_random_in_range, ":random_village_no", 0, ":num_village_points"),
         (try_for_range, ":enemy_village_no", villages_begin, villages_end),
           (eq, ":target_raiding_village", -1),
           (call_script, "script_get_center_faction_relation_including_player", ":enemy_village_no", ":faction_no"),
           (lt, reg0, 0),
           (store_distance_to_party_from_party, ":dist", ":enemy_village_no", ":faction_marshall_party"),
           (lt, ":dist", 120),
           (this_or_next|party_slot_eq, ":enemy_village_no", slot_village_state, 0), #village is not already raided
           (party_slot_eq, ":enemy_village_no", slot_village_state, svs_being_raided),
           (store_sub, ":dist_point", 150, ":dist"),
           (val_sub, ":random_village_no", ":dist_point"),
		(try_begin),
             (eq, ":enemy_village_no", ":old_target_raiding_village"),
             (val_sub, ":random_village_no", 10000),
		(try_end),
           (lt, ":random_village_no", 0),
           (assign, ":target_raiding_village", ":enemy_village_no"),
           (assign, ":chance_raiding_village", 20),
			(try_begin),
             (eq, ":old_target_raiding_village", ":target_raiding_village"),
             (val_mul, ":chance_raiding_village", 100),
			(try_end),
			
           (val_mul, ":chance_raiding_village", ":offensive_rating"),
           (val_div, ":chance_raiding_village", 100),
			(try_end),		
			(try_end),
       (try_begin),#Attacking enemy army
         (neq, ":old_faction_ai_state", sfai_default),
         (gt, ":faction_marshall_party", 0),
         (assign, ":old_target_attacking_enemy_army", -1),
			(try_begin),
           (eq, ":old_faction_ai_state", sfai_attacking_enemy_army),
           (assign, ":old_target_attacking_enemy_army", ":old_faction_ai_object"),
			(try_end),
			
         (assign, ":best_attack_army", -1),
         (assign, ":best_attack_army_score", 0),
         (try_for_range, ":cur_kingdom", kingdoms_begin, kingdoms_end),
           (faction_slot_eq, ":cur_kingdom", slot_faction_state, sfs_active),
           (faction_get_slot, ":cur_kingdom_marshall", ":cur_kingdom", slot_faction_marshall),
           (ge, ":cur_kingdom_marshall", 0),
           (troop_slot_eq, ":cur_kingdom_marshall", slot_troop_occupation, slto_kingdom_hero),
           (troop_get_slot, ":cur_kingdom_marshall_party", ":cur_kingdom_marshall", slot_troop_leaded_party),
           (ge, ":cur_kingdom_marshall_party", 0),
           (party_is_active, ":cur_kingdom_marshall_party"),
           (store_troop_faction, ":cur_kingdom_marshall_faction", ":cur_kingdom_marshall"),
           (store_relation, ":rel", ":cur_kingdom_marshall_faction", ":faction_no"),
           (lt, ":rel", 0),
           (this_or_next|faction_slot_eq, ":cur_kingdom_marshall_faction", slot_faction_ai_state, sfai_attacking_center),
           (faction_slot_eq, ":cur_kingdom_marshall_faction", slot_faction_ai_state, sfai_raiding_village),
           (party_get_slot, ":cur_kingdom_marshall_party_follower_strength", ":cur_kingdom_marshall_party", slot_party_follower_strength),
           (party_get_slot, ":cur_kingdom_marshall_party_strength", ":cur_kingdom_marshall_party", slot_party_cached_strength),
           (val_add, ":cur_kingdom_marshall_party_strength", ":cur_kingdom_marshall_party_follower_strength"),
           (store_mul, ":attack_army_score", ":cur_kingdom_marshall_party_strength", 1000),
           (val_div, ":attack_army_score", ":faction_marshall_army_strength"),
			(try_begin),
             (gt, ":attack_army_score", 850),
             (store_sub, ":attack_army_score", 1700, ":attack_army_score"),
			(try_end),
           (gt, ":attack_army_score", 0),
           (val_mul, ":attack_army_score", 2),
			(try_begin),
             (faction_slot_eq, ":cur_kingdom_marshall_faction", slot_faction_ai_state, sfai_attacking_center),
             (val_mul, ":attack_army_score", 10),
			(else_try),
             (faction_slot_eq, ":cur_kingdom_marshall_faction", slot_faction_ai_state, sfai_raiding_village),
             (val_mul, ":attack_army_score", 3),
           (try_end),
					(try_begin),
             (eq, ":old_target_attacking_enemy_army", ":cur_kingdom_marshall_party"),
             (val_mul, ":attack_army_score", 100),
					(try_end),	
           (store_distance_to_party_from_party, ":dist", ":cur_kingdom_marshall_party", ":faction_marshall_party"),
           (val_add, ":dist", 20),
           (val_div, ":attack_army_score", ":dist"),
           (gt, ":attack_army_score", ":best_attack_army_score"),
           (assign, ":best_attack_army", ":cur_kingdom_marshall_party"),
           (assign, ":best_attack_army_score", ":attack_army_score"),
				(try_end),
         (ge, ":best_attack_army", 0),
         #Army having with equal strength and 30 kms away will have a best_attack_army_score of 28
         (store_mul, ":chance_attacking_enemy_army", ":best_attack_army_score", 2),
         (val_min, ":chance_attacking_enemy_army", 1500),
         (assign, ":target_attacking_enemy_army", ":best_attack_army"),
			(try_begin),
           (eq, ":old_target_attacking_enemy_army", ":target_attacking_enemy_army"),
           (val_mul, ":chance_attacking_enemy_army", 100),
			(try_end),
		
         (val_mul, ":chance_attacking_enemy_army", ":offensive_rating"),
         (val_div, ":chance_attacking_enemy_army", 100),
			(try_end),
       (try_begin),#Attacking enemies around center
         (neq, ":old_faction_ai_state", sfai_default),
         (gt, ":faction_marshall_party", 0),
         (assign, ":old_target_attacking_enemies_around_center", -1),
			(try_begin),
           (eq, ":old_faction_ai_state", sfai_attacking_enemies_around_center),
           (assign, ":old_target_attacking_enemies_around_center", ":old_faction_ai_object"),
			(try_end),
			
         (assign, ":best_attack_army_center", -1),
         (assign, ":best_attack_army_score", 0),
         (try_for_range, ":center_no", centers_begin, centers_end),
           (store_faction_of_party, ":center_faction", ":center_no"),
           (eq, ":center_faction", ":faction_no"),
           (party_get_slot, ":nearby_enemy_strength", ":center_no", slot_party_nearby_enemy_strength),
           (store_mul, ":attack_army_score", ":nearby_enemy_strength", 1000),
           (val_div, ":attack_army_score", ":faction_marshall_army_strength"),
	(try_begin),
             (gt, ":attack_army_score", 850),
             (store_sub, ":attack_army_score", 1700, ":attack_army_score"),
		(try_end),
           (gt, ":attack_army_score", 0),
           (val_mul, ":attack_army_score", 4),
			(try_begin),
             (party_slot_eq, ":center_no", slot_party_type, spt_village),
				(try_begin),
               (party_slot_eq, ":center_no", slot_village_state, svs_being_raided),
               (val_mul, ":attack_army_score", 3),
				(try_end),
			(else_try),
             (try_begin),
               (party_slot_ge, ":center_no", slot_center_is_besieged_by, 0),
               (val_mul, ":attack_army_score", 10),
             (try_end),
			(try_end),
           (try_begin),
             (eq, ":old_target_attacking_enemies_around_center", ":center_no"),
             (val_mul, ":attack_army_score", 100),
		(try_end),
           (store_distance_to_party_from_party, ":dist", ":center_no", ":faction_marshall_party"),
           (val_add, ":dist", 20),
           (val_div, ":attack_army_score", ":dist"),
           (gt, ":attack_army_score", ":best_attack_army_score"),
           (assign, ":best_attack_army_center", ":center_no"),
           (assign, ":best_attack_army_score", ":attack_army_score"),
		(try_end),
         (ge, ":best_attack_army_center", 0),
         #Center having enemies at equal strength and 30 kms away will have a best_attack_army_score of 56
         (store_mul, ":chance_attacking_enemies_around_center", ":best_attack_army_score", 2),
         (val_min, ":chance_attacking_enemies_around_center", 2000),
         (assign, ":target_attacking_enemies_around_center", ":best_attack_army_center"),
		(try_begin),
           (eq, ":old_target_attacking_enemies_around_center", ":target_attacking_enemies_around_center"),
           (val_mul, ":chance_attacking_enemies_around_center", 1000),
		(try_end),
		
         (val_mul, ":chance_attacking_enemies_around_center", ":offensive_rating"),
         (val_div, ":chance_attacking_enemies_around_center", 100),
		
         (try_begin),
           (gt, ":chance_attacking_enemies_around_center", ":chance_attacking_enemy_army"),
           (assign, ":end_cond", kingdoms_end),
           (try_for_range, ":cur_kingdom", kingdoms_begin, ":end_cond"),
             (faction_slot_eq, ":cur_kingdom", slot_faction_state, sfs_active),
             (faction_get_slot, ":cur_kingdom_marshall", ":cur_kingdom", slot_faction_marshall),
             (ge, ":cur_kingdom_marshall", 0),
             (troop_slot_eq, ":cur_kingdom_marshall", slot_troop_occupation, slto_kingdom_hero),
             (troop_get_slot, ":cur_kingdom_marshall_party", ":cur_kingdom_marshall", slot_troop_leaded_party),
             (ge, ":cur_kingdom_marshall_party", 0),
             (party_is_active, ":cur_kingdom_marshall_party"),
             (store_troop_faction, ":cur_kingdom_marshall_faction", ":cur_kingdom_marshall"),
             (store_relation, ":rel", ":cur_kingdom_marshall_faction", ":faction_no"),
             (lt, ":rel", 0),
             (store_distance_to_party_from_party, ":distance", ":cur_kingdom_marshall_party", ":target_attacking_enemies_around_center"),
             (lt, ":distance", 10),
             (assign, ":chance_attacking_enemy_army", ":chance_attacking_enemies_around_center"),
             (assign, ":target_attacking_enemy_army", ":cur_kingdom_marshall_party"),
             (assign, ":chance_attacking_enemies_around_center", 0),
             (assign, ":target_attacking_enemies_around_center", -1),
             (assign, ":end_cond", 0),#break
	(try_end),
    (try_end),	 
    (try_end),
	 
       (assign, ":sum_weights", 0),
       (val_add, ":sum_weights", ":chance_defend"),
       (val_add, ":sum_weights", ":chance_gathering_army"),
       (val_add, ":sum_weights", ":chance_attacking_center"),
       (val_add, ":sum_weights", ":chance_raiding_village"),
       (val_add, ":sum_weights", ":chance_attacking_enemy_army"),
       (val_add, ":sum_weights", ":chance_attacking_enemies_around_center"),
       (store_random_in_range, ":random_no", 0, ":sum_weights"),
       (val_sub, ":random_no", ":chance_defend"),
       (try_begin),
         (lt, ":random_no", 0),
         (faction_set_slot, ":faction_no", slot_faction_ai_state, sfai_default),
         (faction_set_slot, ":faction_no", slot_faction_ai_object, -1),
	(try_begin),
           (neq, ":old_faction_ai_state", sfai_default),
           (call_script, "script_check_and_finish_active_army_quests_for_faction", ":faction_no"),
           (faction_set_slot, ":faction_no", slot_faction_ai_last_offensive_time, ":cur_hours"),
	(try_end),
    (try_begin),
           (eq, "$cheat_mode", 1),
           (str_store_faction_name, s1, ":faction_no"),
           (display_message, "@{s1} decided to do nothing."),
         (try_end),
    (else_try),      
         (val_sub, ":random_no", ":chance_gathering_army"),
         (lt, ":random_no", 0),
         (faction_set_slot, ":faction_no", slot_faction_ai_state, sfai_gathering_army),
         (faction_set_slot, ":faction_no", slot_faction_ai_object, -1),
         (try_begin),
           (neq, ":old_faction_ai_state", sfai_gathering_army),
           (faction_set_slot, ":faction_no", slot_faction_ai_last_offensive_time, ":cur_hours"),
           (faction_set_slot, ":faction_no", slot_faction_ai_offensive_max_followers, 1),
    (try_end),
     (try_begin),
           (eq, "$cheat_mode", 1),
           (str_store_faction_name, s1, ":faction_no"),
           (display_message, "@{s1} decided to gather army."),
         (try_end),
       (else_try),
         (val_sub, ":random_no", ":chance_attacking_center"),
         (lt, ":random_no", 0),
         (faction_set_slot, ":faction_no", slot_faction_ai_state, sfai_attacking_center),
         (faction_set_slot, ":faction_no", slot_faction_ai_object, ":target_attacking_center"),
       (try_begin),
           (gt, ":faction_marshall_num_followers", ":marshall_num_old_followers"),
           (faction_set_slot, ":faction_no", slot_faction_ai_offensive_max_followers, ":faction_marshall_num_followers"),
       (try_end),
       (try_begin),
           (eq, "$cheat_mode", 1),
           (str_store_faction_name, s1, ":faction_no"),
           (str_store_party_name, s2, ":target_attacking_center"),
           (display_message, "@{s1} decided to besiege {s2}."),
       (try_end),
       (else_try),
         (val_sub, ":random_no", ":chance_raiding_village"),
         (lt, ":random_no", 0),
         (faction_set_slot, ":faction_no", slot_faction_ai_state, sfai_raiding_village),
         (faction_set_slot, ":faction_no", slot_faction_ai_object, ":target_raiding_village"),
         (try_begin),
           (gt, ":faction_marshall_num_followers", ":marshall_num_old_followers"),
           (faction_set_slot, ":faction_no", slot_faction_ai_offensive_max_followers, ":faction_marshall_num_followers"),
     (try_end),	
     (try_begin),
           (eq, "$cheat_mode", 1),
           (str_store_faction_name, s1, ":faction_no"),
           (str_store_party_name, s2, ":target_raiding_village"),
           (display_message, "@{s1} decided to raid {s2}."),
       (try_end),
		 (else_try),
         (val_sub, ":random_no", ":chance_attacking_enemy_army"),
         (lt, ":random_no", 0),
         (faction_set_slot, ":faction_no", slot_faction_ai_state, sfai_attacking_enemy_army),
         (faction_set_slot, ":faction_no", slot_faction_ai_object, ":target_attacking_enemy_army"),
       (try_begin),
           (gt, ":faction_marshall_num_followers", ":marshall_num_old_followers"),
           (faction_set_slot, ":faction_no", slot_faction_ai_offensive_max_followers, ":faction_marshall_num_followers"),
       (try_end),
		 (try_begin),
			(eq, "$cheat_mode", 1),
           (str_store_faction_name, s1, ":faction_no"),
           (str_store_party_name, s2, ":target_attacking_enemy_army"),
           (display_message, "@{s1} decided to attack {s2}."),
		 (try_end),
       (else_try),
         (val_sub, ":random_no", ":chance_attacking_enemies_around_center"),
         (lt, ":random_no", 0),
         (faction_set_slot, ":faction_no", slot_faction_ai_state, sfai_attacking_enemies_around_center),
         (faction_set_slot, ":faction_no", slot_faction_ai_object, ":target_attacking_enemies_around_center"),
         (try_begin),
           (gt, ":faction_marshall_num_followers", ":marshall_num_old_followers"),
           (faction_set_slot, ":faction_no", slot_faction_ai_offensive_max_followers, ":faction_marshall_num_followers"),
		     (try_end),
		   (try_begin),
           (eq, "$cheat_mode", 1),
           (str_store_faction_name, s1, ":faction_no"),
           (str_store_party_name, s2, ":target_attacking_enemies_around_center"),
           (display_message, "@{s1} decided to attack enemies around {s2}."),
		   (try_end),
         (try_end),	
    (try_begin),
       (eq, "$players_kingdom", ":faction_no"),
       (neg|faction_slot_eq, ":faction_no", slot_faction_ai_state, sfai_attacking_center),
       (check_quest_active, "qst_join_siege_with_army"),
       (call_script, "script_abort_quest", "qst_join_siege_with_army", 0),
    (try_end),
  ]),

  # script_check_and_finish_active_army_quests_for_faction
  # Input: faction_no
  # Output: none
  ("check_and_finish_active_army_quests_for_faction",
   [
     (store_script_param_1, ":faction_no"),
     (try_begin),
       (eq, "$players_kingdom", ":faction_no"),
       (try_begin),
         (check_quest_active, "qst_report_to_army"),
         (call_script, "script_cancel_quest", "qst_report_to_army"),
       (try_end),
       (assign, ":one_active", 0),
       (try_for_range, ":quest_no", army_quests_begin, army_quests_end),
         (check_quest_active, ":quest_no"),
         (call_script, "script_cancel_quest", ":quest_no"),
         (assign, ":one_active", 1),
       (try_end),
       (try_begin),
         (check_quest_active, "qst_follow_army"),
         (assign, ":one_active", 1),
         (call_script, "script_end_quest", "qst_follow_army"),
       (try_end),
       (eq, ":one_active", 1),
       (faction_get_slot, ":last_offensive_time", ":faction_no", slot_faction_ai_last_offensive_time),
       (store_current_hours, ":cur_hours"),
       (store_sub, ":total_time_served", ":cur_hours", ":last_offensive_time"),
       (store_mul, ":xp_reward", ":total_time_served", 5),
       (val_div, ":xp_reward", 50),
       (val_mul, ":xp_reward", 50),
       (val_add, ":xp_reward", 50),
       (add_xp_as_reward, ":xp_reward"),
     (try_end),
    ]),
  
    # script_troop_get_player_relation
    # Input: arg1 = troop_no
    # Output: reg0 = effective relation (modified by troop reputation, honor, etc.)
    ("troop_get_player_relation",
      [
        (store_script_param_1, ":troop_no"),
        (troop_get_slot, ":reputation", ":troop_no", slot_lord_reputation_type),
        (troop_get_slot, ":effective_relation", ":troop_no", slot_troop_player_relation),
        (assign, ":honor_bonus", 0),
        (try_begin),
          (eq,  ":reputation", lrep_quarrelsome),
          (val_add, ":effective_relation", -3),
        (try_end),
        (try_begin),
          (ge, "$player_honor", 0),
          (try_begin),
            (this_or_next|eq,  ":reputation", lrep_upstanding),
            (             eq,  ":reputation", lrep_goodnatured),
            (store_div, ":honor_bonus", "$player_honor", 3),
          (try_end),
        (try_end),
        (try_begin),
          (lt, "$player_honor", 0),
          (try_begin),
            (this_or_next|eq,  ":reputation", lrep_upstanding),
            (             eq,  ":reputation", lrep_goodnatured),
            (store_div, ":honor_bonus", "$player_honor", 3),
          (else_try),
            (eq,  ":reputation", lrep_martial),
            (store_div, ":honor_bonus", "$player_honor", 5),
          (try_end),
        (try_end),
        (val_add, ":effective_relation", ":honor_bonus"),
        (assign, reg0, ":effective_relation"),
    ]),
  
  # script_change_troop_renown
  # Input: arg1 = troop_no, arg2 = relation difference
  # Output: none
  ("change_troop_renown",
    [
      (store_script_param_1, ":troop_no"),
      (store_script_param_2, ":renown_change"),
      
      (troop_get_slot, ":old_renown", ":troop_no", slot_troop_renown),
      (store_add, ":new_renown", ":old_renown", ":renown_change"),
      (val_max, ":new_renown", 0),
      (troop_set_slot, ":troop_no", slot_troop_renown, ":new_renown"),

      (try_begin),
        (eq, ":troop_no", "trp_player"),
        (str_store_troop_name, s1, ":troop_no"),
        (assign, reg12, ":renown_change"),
        (val_abs, reg12),
        (try_begin),
         (gt, ":renown_change", 0),
         (display_message, "@You gained {reg12} renown."),
        (else_try),
          (lt, ":renown_change", 0),
          (display_message, "@You lose {reg12} renown."),
        (try_end),
      (try_end),
      (call_script, "script_update_troop_notes", ":troop_no"),
  ]),
  
  
  # script_change_player_relation_with_troop
  # Input: arg1 = troop_no, arg2 = relation difference
  # Output: none
  ("change_player_relation_with_troop",
    [
      (store_script_param_1, ":troop_no"),
      (store_script_param_2, ":difference"),

      (try_begin),
        (neq, ":troop_no", "trp_player"),
        (neg|is_between, ":troop_no", soldiers_begin, soldiers_end),
		(neq, ":troop_no", -1),
        (neq, ":difference", 0),
        (call_script, "script_troop_get_player_relation", ":troop_no"),
        (assign, ":old_effective_relation", reg0),
        (troop_get_slot, ":player_relation", ":troop_no", slot_troop_player_relation),
        (val_add, ":player_relation", ":difference"),
        (val_clamp, ":player_relation", -100, 101),
        (try_begin),
          (troop_set_slot, ":troop_no", slot_troop_player_relation, ":player_relation"),
          
          (str_store_troop_name_link, s1, ":troop_no"),
          (call_script, "script_troop_get_player_relation", ":troop_no"),
          (assign, ":new_effective_relation", reg0),
          (neq, ":old_effective_relation", ":new_effective_relation"),
          (assign, reg1, ":old_effective_relation"),
          (assign, reg2, ":new_effective_relation"),
          (try_begin),
            (gt, ":difference", 0),
            (display_message, "str_troop_relation_increased"),
          (else_try),
            (lt, ":difference", 0),
            (display_message, "str_troop_relation_detoriated"),
          (try_end),
          (try_begin),
            (eq, ":troop_no", "$g_talk_troop"),
            (assign, "$g_talk_troop_relation", ":new_effective_relation"),
            (call_script, "script_setup_talk_info"),
          (try_end),
          (call_script, "script_update_troop_notes", ":troop_no"),
        (try_end),
      (try_end),
  ]),

  # script_change_player_relation_with_center
  # Input: arg1 = party_no, arg2 = relation difference
  # Output: none
  ("change_player_relation_with_center",
    [
      (store_script_param_1, ":center_no"),
      (store_script_param_2, ":difference"),
      
      (party_get_slot, ":player_relation", ":center_no", slot_center_player_relation),
      (assign, reg1, ":player_relation"),
      (val_add, ":player_relation", ":difference"),
      (val_clamp, ":player_relation", -100, 100),
      (assign, reg2, ":player_relation"),
      (party_set_slot, ":center_no", slot_center_player_relation, ":player_relation"),
      
      (str_store_party_name_link, s1, ":center_no"),
      (try_begin),
        (gt, ":difference", 0),
        (display_message, "@Your relation with {s1} has improved."),
      (else_try),
        (lt, ":difference", 0),
        (display_message, "@Your relation with {s1} has deteriorated."),
      (try_end),
      (try_begin),
        (party_slot_eq, ":center_no", slot_party_type, spt_village),
        (call_script, "script_update_volunteer_troops_in_village", ":center_no"),
      (try_end),
      
      (try_begin),
        (this_or_next|is_between, "$g_talk_troop", village_elders_begin, village_elders_end),
        (is_between, "$g_talk_troop", mayors_begin, mayors_end),
        (assign, "$g_talk_troop_relation", ":player_relation"),
        (call_script, "script_setup_talk_info"),
      (try_end),
  ]),
  
  
  # script_change_player_relation_with_faction
  # Input: arg1 = faction_no, arg2 = relation difference
  # Output: none
  ("change_player_relation_with_faction",
    [
      (store_script_param_1, ":faction_no"),
      (store_script_param_2, ":difference"),
      
      (store_relation, ":player_relation", ":faction_no", "fac_player_supporters_faction"),
      (assign, reg1, ":player_relation"),
      (val_add, ":player_relation", ":difference"),
      (assign, reg2, ":player_relation"),
      (set_relation, ":faction_no", "fac_player_faction", ":player_relation"),
      (set_relation, ":faction_no", "fac_player_supporters_faction", ":player_relation"),
      
      (str_store_faction_name_link, s1, ":faction_no"),
      (try_begin),
        (gt, ":difference", 0),
        (display_message, "str_faction_relation_increased"),
      (else_try),
        (lt, ":difference", 0),
        (display_message, "str_faction_relation_detoriated"),
      (try_end),
      (call_script, "script_update_all_notes"),
      ]),

  # script_set_player_relation_with_faction
  # Input: arg1 = faction_no, arg2 = relation
  # Output: none
  ("set_player_relation_with_faction",
    [
      (store_script_param_1, ":faction_no"),
      (store_script_param_2, ":relation"),
      
      (store_relation, ":player_relation", ":faction_no", "fac_player_supporters_faction"),
      (store_sub, ":reln_dif", ":relation", ":player_relation"),
      (call_script, "script_change_player_relation_with_faction", ":faction_no", ":reln_dif"),
      ]),

  
  
  # script_change_player_relation_with_faction_ex
  # changes relations with other factions also (according to their relations between each other)
  # Input: arg1 = faction_no, arg2 = relation difference
  # Output: none
  ("change_player_relation_with_faction_ex",
    [
      (store_script_param_1, ":faction_no"),
      (store_script_param_2, ":difference"),
      
      (store_relation, ":player_relation", ":faction_no", "fac_player_supporters_faction"),
      (assign, reg1, ":player_relation"),
      (val_add, ":player_relation", ":difference"),
      (assign, reg2, ":player_relation"),
      (set_relation, ":faction_no", "fac_player_faction", ":player_relation"),
      (set_relation, ":faction_no", "fac_player_supporters_faction", ":player_relation"),
      
      (str_store_faction_name_link, s1, ":faction_no"),
      (try_begin),
        (gt, ":difference", 0),
        (display_message, "str_faction_relation_increased"),
      (else_try),
        (lt, ":difference", 0),
        (display_message, "str_faction_relation_detoriated"),
      (try_end),
      
      (try_for_range, ":other_faction", kingdoms_begin, kingdoms_end),
        (faction_slot_eq, ":other_faction", slot_faction_state, sfs_active),
        (neq, ":faction_no", ":other_faction"),
        (store_relation, ":other_faction_relation", ":faction_no", ":other_faction"),
        (store_relation, ":player_relation", ":other_faction", "fac_player_supporters_faction"),
        (store_mul, ":relation_change", ":difference", ":other_faction_relation"),
        (val_div, ":relation_change", 100),
        (val_add, ":player_relation", ":relation_change"),
        (set_relation, ":other_faction", "fac_player_faction", ":player_relation"),
        (set_relation, ":other_faction", "fac_player_supporters_faction", ":player_relation"),
      (try_end),
      (try_begin),
        (faction_slot_eq, "fac_player_supporters_faction", slot_faction_state, sfs_active),
        (try_for_range, ":kingdom_no", kingdoms_begin, kingdoms_end),
          (faction_slot_eq, ":kingdom_no", slot_faction_state, sfs_active),
          (call_script, "script_update_faction_notes", ":kingdom_no"),
        (try_end),
      (try_end),
  ]),

  # script_cf_get_random_active_faction_except_player_faction_and_faction
  # Input: arg1 = except_faction_no
  # Output: reg0 = random_faction
  ("cf_get_random_active_faction_except_player_faction_and_faction",
    [
      (store_script_param_1, ":except_faction_no"),
      (assign, ":num_factions", 0),
      (try_for_range, ":faction_no", kingdoms_begin, kingdoms_end),
        (neq, ":faction_no", "fac_player_supporters_faction"),
        (neq, ":faction_no", ":except_faction_no"),
        (faction_slot_eq, ":faction_no", slot_faction_state, sfs_active),
        (val_add, ":num_factions", 1),
      (try_end),
      (gt, ":num_factions", 0),
      (assign, ":selected_faction", -1),
      (store_random_in_range, ":random_faction", 0, ":num_factions"),
      (try_for_range, ":faction_no", kingdoms_begin, kingdoms_end),
        (ge, ":random_faction", 0),
        (neq, ":faction_no", "fac_player_supporters_faction"),
        (neq, ":faction_no", ":except_faction_no"),
        (faction_slot_eq, ":faction_no", slot_faction_state, sfs_active),
        (val_sub, ":random_faction", 1),
        (lt, ":random_faction", 0),
        (assign, ":selected_faction", ":faction_no"),
      (try_end),
      (assign, reg0, ":selected_faction"),
  ]),

  # script_make_kingdom_hostile_to_player
  # Input: arg1 = faction_no, arg2 = relation difference
  # Output: none
  ("make_kingdom_hostile_to_player",
    [
      (store_script_param_1, ":kingdom_no"),
      (store_script_param_2, ":difference"),

      (try_begin),
        (lt, ":difference", 0),
        (store_relation, ":player_relation", ":kingdom_no", "fac_player_supporters_faction"),
        (val_min, ":player_relation", 0),
        (val_add, ":player_relation", ":difference"),
        (call_script, "script_set_player_relation_with_faction", ":kingdom_no", ":player_relation"),
      (try_end),
  ]),
  
  # script_change_player_honor
  # Input: arg1 = honor difference
  # Output: none
  ("change_player_honor",
    [
      (store_script_param_1, ":honor_dif"),
      (val_add, "$player_honor", ":honor_dif"),
      (try_begin),
        (gt, ":honor_dif", 0),
        (display_message, "@You gain honour."),
      (else_try),
        (lt, ":honor_dif", 0),
        (display_message, "@You lose honour."),
      (try_end),

##      (val_mul, ":honor_dif", 1000),
##      (assign, ":temp_honor", 0),
##      (assign, ":num_nonlinear_steps", 10),
##      (try_begin),
##        (gt, "$player_honor", 0),
##        (lt, ":honor_dif", 0),
##        (assign, ":num_nonlinear_steps", 0),
##      (else_try),
##        (lt, "$player_honor", 0),
##        (gt, ":honor_dif", 0),
##        (assign, ":num_nonlinear_steps", 3),
##      (try_end),
##      
##      (try_begin),
##        (ge, "$player_honor", 0),
##        (assign, ":temp_honor", "$player_honor"),
##      (else_try),
##        (val_sub, ":temp_honor", "$player_honor"),
##      (try_end),
##      (try_for_range, ":unused",0,":num_nonlinear_steps"),
##        (ge, ":temp_honor", 10000),
##        (val_div, ":temp_honor", 2),
##        (val_div, ":honor_dif", 2),
##      (try_end),
##      (val_add, "$player_honor", ":honor_dif"),
  ]),

  # script_change_player_party_morale
  # Input: arg1 = morale difference
  # Output: none
  ("change_player_party_morale",
    [
      (store_script_param_1, ":morale_dif"),
      (party_get_morale, ":cur_morale", "p_main_party"),
      (val_clamp, ":cur_morale", 0, 100),
            
      (store_add, ":new_morale", ":cur_morale", ":morale_dif"),
      (val_clamp, ":new_morale", 0, 100),

      (party_set_morale, "p_main_party", ":new_morale"),
      (try_begin),
        (lt, ":new_morale", ":cur_morale"),
        (store_sub, reg1, ":cur_morale", ":new_morale"),
        (display_message, "str_party_lost_morale"),
      (else_try),
        (gt, ":new_morale", ":cur_morale"),
        (store_sub, reg1, ":new_morale", ":cur_morale"),
        (display_message, "str_party_gained_morale"),
      (try_end),
  ]),

  # script_cf_player_has_item_without_modifier
  # Input: arg1 = item_id, arg2 = modifier
  # Output: none (can_fail)
  ("cf_player_has_item_without_modifier",
    [
      (store_script_param, ":item_id", 1),
      (store_script_param, ":modifier", 2),
      (player_has_item, ":item_id"),
      #checking if any of the meat is not rotten
      (assign, ":has_without_modifier", 0),
      (troop_get_inventory_capacity, ":inv_size", "trp_player"),
      (try_for_range, ":i_slot", 0, ":inv_size"),
        (troop_get_inventory_slot, ":cur_item", "trp_player", ":i_slot"),
        (eq, ":cur_item", ":item_id"),
        (troop_get_inventory_slot_modifier, ":cur_modifier", "trp_player", ":i_slot"),
        (neq, ":cur_modifier", ":modifier"),
        (assign, ":has_without_modifier", 1),
        (assign, ":inv_size", 0), #break
      (try_end),
      (eq, ":has_without_modifier", 1),
  ]),

  # script_get_player_party_morale_values
  # Output: reg0 = player_party_morale_target
  ("get_player_party_morale_values",
    [
      (party_get_num_companion_stacks, ":num_stacks","p_main_party"),
      (assign, ":num_men", 0),
      (try_for_range, ":i_stack", 1, ":num_stacks"),
        (party_stack_get_troop_id, ":stack_troop","p_main_party",":i_stack"),
        (try_begin),
          (troop_is_hero, ":stack_troop"),
          (val_add, ":num_men", 1), #it was 3 in "Mount&Blade", now it is 1 in Warband
        (else_try),
          (party_stack_get_size, ":stack_size","p_main_party",":i_stack"),
          (val_add, ":num_men", ":stack_size"),
        (try_end),
      (try_end),
      (assign, "$g_player_party_morale_modifier_party_size", ":num_men"),
      (val_div, "$g_player_party_morale_modifier_party_size", 5),
    
      (store_skill_level, ":player_leadership", "skl_leadership", "trp_player"),
      (store_mul, "$g_player_party_morale_modifier_leadership", ":player_leadership", 10),
      (assign, ":new_morale", "$g_player_party_morale_modifier_leadership"),
      (val_sub, ":new_morale", "$g_player_party_morale_modifier_party_size"),
      (val_add, ":new_morale", 50),

      (assign, "$g_player_party_morale_modifier_food", 0),
      (try_for_range, ":cur_edible", food_begin, food_end),
        (call_script, "script_cf_player_has_item_without_modifier", ":cur_edible", imod_rotten),
        (item_get_slot, ":food_bonus", ":cur_edible", slot_item_food_bonus),
        
        (val_mul, ":food_bonus", 3),
        (val_div, ":food_bonus", 2),
        
        (val_add, "$g_player_party_morale_modifier_food", ":food_bonus"),
      (try_end),
      (val_add, ":new_morale", "$g_player_party_morale_modifier_food"),

      (try_begin),
        (eq, "$g_player_party_morale_modifier_food", 0),
        (assign, "$g_player_party_morale_modifier_no_food", 40),
        (val_sub, ":new_morale", "$g_player_party_morale_modifier_no_food"),
      (else_try),
        (assign, "$g_player_party_morale_modifier_no_food", 0),
      (try_end),

      (assign, "$g_player_party_morale_modifier_debt", 0),
      (try_begin),
        (gt, "$g_player_debt_to_party_members", 0),
        (call_script, "script_calculate_player_faction_wage"),
        (assign, ":total_wages", reg0),
        (store_mul, "$g_player_party_morale_modifier_debt", "$g_player_debt_to_party_members", 10),
		(val_max, ":total_wages", 1),
        (val_div, "$g_player_party_morale_modifier_debt", ":total_wages"),
        (val_clamp, "$g_player_party_morale_modifier_debt", 1, 31),
        (val_sub, ":new_morale", "$g_player_party_morale_modifier_debt"),
      (try_end),

      (val_clamp, ":new_morale", 0, 100),
      (assign, reg0, ":new_morale"),
      ]),
  
  # script_diplomacy_start_war_between_kingdoms
  # Input: arg1 = kingdom_1, arg2 = kingdom_2, arg3 = initializing_war_peace_cond
  # Output: none
  ("diplomacy_start_war_between_kingdoms", #sets relations between two kingdoms and their vassals.
    [
      (store_script_param, ":kingdom_a", 1),
      (store_script_param, ":kingdom_b", 2),
      (store_script_param, ":initializing_war_peace_cond", 3),
      
      (store_relation, ":relation", ":kingdom_a", ":kingdom_b"),
      (val_min, ":relation", -10),
      (val_add, ":relation", -30),
      (set_relation, ":kingdom_a", ":kingdom_b", ":relation"),

      (try_begin),
        (eq, "$players_kingdom", ":kingdom_a"),
        (store_relation, ":relation", "fac_player_supporters_faction", ":kingdom_b"),
        (val_min, ":relation", -30),
        (call_script, "script_set_player_relation_with_faction", ":kingdom_b", ":relation"),
      (else_try),
        (eq, "$players_kingdom", ":kingdom_b"),
        (store_relation, ":relation", "fac_player_supporters_faction", ":kingdom_a"),
        (val_min, ":relation", -30),
        (call_script, "script_set_player_relation_with_faction", ":kingdom_a", ":relation"),
      (try_end),

      (try_begin),
        (eq, ":initializing_war_peace_cond", 1),
        (try_begin),
          (store_random_in_range, ":random_no", 0, 2),
          (this_or_next|eq, ":kingdom_a", "fac_player_supporters_faction"),
          (eq, ":random_no", 0),
          (assign, ":local_temp", ":kingdom_a"),
          (assign, ":kingdom_a", ":kingdom_b"),
          (assign, ":kingdom_b", ":local_temp"),
        (try_end),
        (str_store_faction_name_link, s1, ":kingdom_a"),
        (str_store_faction_name_link, s2, ":kingdom_b"),
        (display_log_message, "@{s1} has declared war against {s2}."),

        (call_script, "script_add_notification_menu", "mnu_notification_war_declared", ":kingdom_a", ":kingdom_b"),
		
        (call_script, "script_update_faction_notes", ":kingdom_a"),
        (call_script, "script_update_faction_notes", ":kingdom_b"),
        (assign, "$g_recalculate_ais", 1),
      (try_end),
  ]),

  # script_party_calculate_and_set_nearby_friend_strength
  # Input: party_no
  # Output: none
  ("party_calculate_and_set_nearby_friend_strength",
    [
      (store_script_param, ":party_no", 1),
      (assign, ":follower_strength", 0),
      (assign, ":friend_strength", 0),
      (assign, ":enemy_strength", 0),
      (store_faction_of_party, ":party_faction", ":party_no"),

      (store_add, ":end_cond", kingdom_heroes_end, 1),      
      (try_for_range, ":iteration", kingdom_heroes_begin, ":end_cond"),
        (try_begin),
          (eq, ":iteration", kingdom_heroes_end),
          (assign, ":cur_troop", "trp_player"),
        (else_try),
          (assign, ":cur_troop", ":iteration"),
        (try_end),
        (troop_slot_eq, ":cur_troop", slot_troop_occupation, slto_kingdom_hero),
        (troop_get_slot, ":cur_troop_party", ":cur_troop", slot_troop_leaded_party),
        (ge, ":cur_troop_party", 0),
        (party_is_active, ":cur_troop_party"),
        (neq, ":party_no", ":cur_troop_party"),
        (party_get_slot, ":str", ":cur_troop_party", slot_party_cached_strength),
        (try_begin),
          (party_get_slot, ":commander_party", ":cur_troop_party", slot_party_commander_party),
          (eq, ":commander_party", ":party_no"),
          (val_add, ":follower_strength", ":str"),
        (try_end),
          (store_distance_to_party_from_party, ":distance", ":cur_troop_party", ":party_no"),
            (lt, ":distance", 10),
        (store_troop_faction, ":army_faction", ":cur_troop"),
        (store_relation, ":rel", ":army_faction", ":party_faction"),
          (try_begin),
            (this_or_next|eq, ":army_faction", ":party_faction"),
          (gt, ":rel", 0),
          (val_add, ":friend_strength", ":str"),
          (else_try),
          (lt, ":rel", 0),
          (val_add, ":enemy_strength", ":str"),
          (try_end),
        (try_end),
      (party_set_slot, ":party_no", slot_party_follower_strength, ":follower_strength"),
      (party_set_slot, ":party_no", slot_party_nearby_friend_strength, ":friend_strength"),
      (party_set_slot, ":party_no", slot_party_nearby_enemy_strength, ":enemy_strength"),
      ]),
  
  # script_init_ai_calculation
  # Input: none
  # Output: none
  ("init_ai_calculation",
    [
      (try_for_range, ":cur_troop", heroes_begin, heroes_end),
        (troop_slot_eq, ":cur_troop", slot_troop_occupation, slto_kingdom_hero),
        (troop_get_slot, ":cur_party", ":cur_troop", slot_troop_leaded_party),
        (party_is_active, ":cur_party"),
        (ge, ":cur_party", 0),
        (call_script, "script_party_calculate_strength", ":cur_party", 0), #will update slot_party_cached_strength
      (try_end),
      (call_script, "script_party_calculate_strength", "p_main_party", 0), #will update slot_party_cached_strength
      (try_for_range, ":cur_center", walled_centers_begin, walled_centers_end),
        (call_script, "script_party_calculate_strength", ":cur_center", 0), #will update slot_party_cached_strength
      (try_end),

      (try_for_range, ":cur_center", walled_centers_begin, walled_centers_end),
        (call_script, "script_party_calculate_and_set_nearby_friend_strength", ":cur_center"),
      (try_end),

      (try_for_range, ":cur_troop", heroes_begin, heroes_end),
        (troop_get_slot, ":cur_troop_party", ":cur_troop", slot_troop_leaded_party),
        (gt, ":cur_troop_party", 0),
        (party_is_active, ":cur_troop_party"),
        (call_script, "script_party_calculate_and_set_nearby_friend_strength", ":cur_troop_party"),
      (try_end),
      (call_script, "script_party_calculate_and_set_nearby_friend_strength", "p_main_party"),
      ]),


  # script_recalculate_ais
  # Input: none
  # Output: none
    ("recalculate_ais",
    [
      (call_script, "script_init_ai_calculation"),
      
      (try_for_range, ":faction_no", kingdoms_begin, kingdoms_end),
        (faction_slot_eq, ":faction_no", slot_faction_state, sfs_active),
        (neg|faction_slot_eq, ":faction_no",  slot_faction_marshall, "trp_player"),
        (call_script, "script_decide_faction_ai", ":faction_no"),
      (try_end),
      (call_script, "script_decide_kingdom_party_ais"),
    ]),

  # script_recalculate_ai_for_troop
  # Input: none
  # Output: none
  ("recalculate_ai_for_troop",
    [
      (store_script_param, ":troop_no", 1),
      (call_script, "script_init_ai_calculation"),
      (call_script, "script_calculate_troop_ai", ":troop_no"),
      (call_script, "script_calculate_troop_ai_under_command", ":troop_no"),
      ]),

  # script_calculate_troop_ai
  # Input: troop_no
  # Output: none
  ("calculate_troop_ai",
    [
      (store_script_param, ":troop_no", 1),
      (try_begin),
        (troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_hero),
        #(troop_slot_eq, ":troop_no", slot_troop_is_prisoner, 0),
        (neg|troop_slot_ge, ":troop_no", slot_troop_prisoner_of_party, 0),
        (troop_get_slot, ":party_no", ":troop_no", slot_troop_leaded_party),
        (gt, ":party_no", 0),
        (party_slot_eq, ":party_no", slot_party_following_player, 0),
        (store_faction_of_party, ":faction_no", ":party_no"),
        (assign, ":continue", 1),
        (try_begin),
          (faction_slot_eq, ":faction_no", slot_faction_marshall, ":troop_no"), # do not calculate AI if troop is marshall.
          (neg|faction_slot_eq, ":faction_no", slot_faction_ai_state, sfai_default),
          (assign, ":continue", 0),
        (try_end),
        (eq, ":continue", 1),
        (call_script, "script_party_count_fit_for_battle", ":party_no"),
        (assign, ":party_fit_for_battle", reg0),
        (call_script, "script_party_get_ideal_size", ":party_no"),
        (assign, ":ideal_size", reg0),
        (store_mul, "$party_relative_strength", ":party_fit_for_battle", 100),
        (val_div, "$party_relative_strength", ":ideal_size"),
		(party_get_num_prisoners, ":num_prisoners", ":party_no"),
        (try_begin),
          (faction_slot_eq, ":faction_no", slot_faction_num_towns, 0),
          (faction_slot_eq, ":faction_no", slot_faction_num_castles, 0),
          (assign, "$ratio_of_prisoners", 0), #do not let prisoners have an effect on ai calculation
        (else_try),
		  (gt, ":party_fit_for_battle", 0), 
          (store_div, "$ratio_of_prisoners", ":num_prisoners", ":party_fit_for_battle"),
		(else_try), 
		  (assign, "$ratio_of_prisoners", ":num_prisoners"),
        (try_end),
        (call_script, "script_kingdom_hero_decide_next_ai_state_follow_or_not", ":troop_no"),
        (party_slot_eq, ":party_no", slot_party_commander_party, -1),
        (call_script, "script_kingdom_hero_decide_next_ai_state", ":troop_no"),
      (try_end),
      ]),

  # script_calculate_troop_ai_under_command
  # Input: troop_no
  # Output: none
  ("calculate_troop_ai_under_command",
    [
      (store_script_param, ":troop_no", 1),
      (try_begin),
        (troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_hero),
        #(troop_slot_eq, ":troop_no", slot_troop_is_prisoner, 0),
        (neg|troop_slot_ge, ":troop_no", slot_troop_prisoner_of_party, 0),
        (troop_get_slot, ":party_no", ":troop_no", slot_troop_leaded_party),
        (gt, ":party_no", 0),
        (party_slot_ge, ":party_no", slot_party_commander_party, 0),
        (party_set_ai_initiative, ":party_no", 50),
        (call_script, "script_party_decide_next_ai_state_under_command", ":party_no"),
      (try_end),	
    ]),

  # script_diplomacy_start_peace_between_kingdoms
  # Input: arg1 = kingdom_1, arg2 = kingdom_2, arg3 = initializing_war_peace_cond
  # Output: none
  ("diplomacy_start_peace_between_kingdoms", #sets relations between two kingdoms
    [
      (store_script_param, ":kingdom_a", 1),
      (store_script_param, ":kingdom_b", 2),
      (store_script_param, ":initializing_war_peace_cond", 3),

      (store_relation, ":relation", ":kingdom_a", ":kingdom_b"),
      (val_max, ":relation", 0),
      (set_relation, ":kingdom_a", ":kingdom_b", ":relation"),
      (call_script, "script_exchange_prisoners_between_factions", ":kingdom_a", ":kingdom_b"),

      (try_begin),
        (eq, "$players_kingdom", ":kingdom_a"),
        (store_relation, ":relation", "fac_player_supporters_faction", ":kingdom_b"),
        (val_max, ":relation", 0),
        (call_script, "script_set_player_relation_with_faction", ":kingdom_b", ":relation"),
        (call_script, "script_event_kingdom_make_peace_with_kingdom", ":kingdom_b", "fac_player_supporters_faction"),
      (else_try),
        (eq, "$players_kingdom", ":kingdom_b"),
        (store_relation, ":relation", "fac_player_supporters_faction", ":kingdom_a"),
        (val_max, ":relation", 0),
        (call_script, "script_set_player_relation_with_faction", ":kingdom_a", ":relation"),
        (call_script, "script_event_kingdom_make_peace_with_kingdom", ":kingdom_a", "fac_player_supporters_faction"),
      (try_end),

      (try_begin),
        (eq, ":initializing_war_peace_cond", 1),
        (str_store_faction_name_link, s1, ":kingdom_a"),
        (str_store_faction_name_link, s2, ":kingdom_b"),
        (display_log_message, "@{s1} and {s2} have made peace with each other."),
        (call_script, "script_update_faction_notes", ":kingdom_a"),
        (call_script, "script_update_faction_notes", ":kingdom_b"),

        (call_script, "script_add_notification_menu", "mnu_notification_peace_declared", ":kingdom_a", ":kingdom_b"),
		
        (call_script, "script_event_kingdom_make_peace_with_kingdom", ":kingdom_a", ":kingdom_b"),
        (call_script, "script_event_kingdom_make_peace_with_kingdom", ":kingdom_b", ":kingdom_a"),
        (assign, "$g_recalculate_ais", 1),
	  (try_end),
  ]),

  # script_event_kingdom_make_peace_with_kingdom
  # Input: arg1 = source_kingdom, arg2 = target_kingdom
  # Output: none
  ("event_kingdom_make_peace_with_kingdom",
    [
      (store_script_param_1, ":source_kingdom"),
      (store_script_param_2, ":target_kingdom"),
      (try_begin),
        (check_quest_active, "qst_capture_prisoners"),
        (try_begin),
          (eq, "$players_kingdom", ":source_kingdom"),
          (quest_slot_eq, "qst_capture_prisoners", slot_quest_target_faction, ":target_kingdom"),
          (call_script, "script_cancel_quest", "qst_capture_prisoners"),
        (else_try),
          (eq, "$players_kingdom", ":target_kingdom"),
          (quest_slot_eq, "qst_capture_prisoners", slot_quest_target_faction, ":source_kingdom"),
          (call_script, "script_cancel_quest", "qst_capture_prisoners"),
        (try_end),
      (try_end),
  ]),
	  
  # script_randomly_start_war_peace
  # Input: arg1 = initializing_war_peace_cond (1 = true, 0 = false)
  # Output: none
  ("randomly_start_war_peace",
    [
      (store_script_param_1, ":initializing_war_peace_cond"),
      (assign, ":total_resources", 0),
      (assign, ":total_active_kingdoms", 0),
      (try_for_range, ":cur_kingdom", kingdoms_begin, kingdoms_end),
        (faction_slot_eq, ":cur_kingdom", slot_faction_state, sfs_active),
        (val_add, ":total_active_kingdoms", 1),
        (faction_get_slot, ":num_towns", ":cur_kingdom", slot_faction_num_towns),
        (store_mul, ":kingdom_resources_value", ":num_towns", 2),
        (faction_get_slot, ":num_castles", ":cur_kingdom", slot_faction_num_castles),
        (val_add, ":kingdom_resources_value", ":num_castles"),
        (val_mul, ":kingdom_resources_value", 10),
        (val_max, ":kingdom_resources_value", 1),
        (val_mul, ":kingdom_resources_value", 1000),
        (faction_get_slot, ":num_armies", ":cur_kingdom", slot_faction_num_armies),
        (val_max, ":num_armies", 1),
        (val_div, ":kingdom_resources_value", ":num_armies"),
        (val_add, ":total_resources", ":kingdom_resources_value"),
        (try_end),
      (val_max, ":total_active_kingdoms", 1),
      (store_div, ":average_resources", ":total_resources", ":total_active_kingdoms"),

      (try_for_range, ":cur_kingdom", kingdoms_begin, kingdoms_end),
 ##       (neq, ":cur_kingdom", "fac_player_supporters_faction"),
        (faction_slot_eq, ":cur_kingdom", slot_faction_state, sfs_active),
        (assign, ":num_ongoing_wars", 0),
        (try_for_range, ":other_kingdom", kingdoms_begin, kingdoms_end),
          (faction_slot_eq, ":other_kingdom", slot_faction_state, sfs_active),
          (store_relation, ":other_relation", ":cur_kingdom", ":other_kingdom"),
          (lt, ":other_relation", 0),
          (val_add, ":num_ongoing_wars", 1),
      (try_end),
	  
        (faction_get_slot, ":num_towns", ":cur_kingdom", slot_faction_num_towns),
        (store_mul, ":kingdom_1_resources_value", ":num_towns", 2),
        (faction_get_slot, ":num_castles", ":cur_kingdom", slot_faction_num_castles),
        (val_add, ":kingdom_1_resources_value", ":num_castles"),
        (val_mul, ":kingdom_1_resources_value", 10),
        (val_max, ":kingdom_1_resources_value", 1),
        (val_mul, ":kingdom_1_resources_value", 1000),
        (faction_get_slot, ":num_armies", ":cur_kingdom", slot_faction_num_armies),
        (val_max, ":num_armies", 1),
        (val_div, ":kingdom_1_resources_value", ":num_armies"),
	  
        (store_add, ":start_cond", ":cur_kingdom", 1),
        (try_for_range, ":cur_kingdom_2", ":start_cond", kingdoms_end),
 ##         (neq, ":cur_kingdom", "fac_player_supporters_faction"),
          (faction_slot_eq, ":cur_kingdom_2", slot_faction_state, sfs_active),
	  
          (assign, ":num_ongoing_wars_2", 0),
          (try_for_range, ":other_kingdom", kingdoms_begin, kingdoms_end),
            (faction_slot_eq, ":other_kingdom", slot_faction_state, sfs_active),
            (store_relation, ":other_relation", ":cur_kingdom_2", ":other_kingdom"),
            (lt, ":other_relation", 0),
            (val_add, ":num_ongoing_wars_2", 1),
		(try_end),
		
          (store_add, ":total_ongoing_wars", ":num_ongoing_wars", ":num_ongoing_wars_2"),
	  
          (faction_get_slot, ":num_towns", ":cur_kingdom_2", slot_faction_num_towns),
          (store_mul, ":kingdom_2_resources_value", ":num_towns", 2),
          (faction_get_slot, ":num_castles", ":cur_kingdom_2", slot_faction_num_castles),
          (val_add, ":kingdom_2_resources_value", ":num_castles"),
          (val_mul, ":kingdom_2_resources_value", 10),
          (val_max, ":kingdom_2_resources_value", 1),
          (val_mul, ":kingdom_2_resources_value", 1000),
          (faction_get_slot, ":num_armies", ":cur_kingdom_2", slot_faction_num_armies),
          (val_max, ":num_armies", 1),
          (val_div, ":kingdom_2_resources_value", ":num_armies"),

          (assign, ":max_resources_value", ":kingdom_1_resources_value"),
          (val_max, ":max_resources_value", ":kingdom_2_resources_value"),
          (val_mul, ":max_resources_value", 100),
          (val_div, ":max_resources_value", ":average_resources"),
	  
          (assign, ":cur_king", -1),
	  (try_begin),
            (eq, ":cur_kingdom", "fac_player_supporters_faction"),
            (faction_get_slot, ":cur_king", ":cur_kingdom_2", slot_faction_leader),
            (assign, ":cur_relation", reg0),
            (store_sub, ":relation_effect", 200, ":cur_relation"),
            (val_mul, ":kingdom_1_resources_value", ":relation_effect"),
            (val_div, ":kingdom_1_resources_value", 200),
          (else_try),
            (eq, ":cur_kingdom_2", "fac_player_supporters_faction"),
            (faction_get_slot, ":cur_king", ":cur_kingdom", slot_faction_leader),
	  (try_end),
	  
	(try_begin),
            (ge, ":cur_king", 0),
            (call_script, "script_troop_get_player_relation", ":cur_king"),
            (assign, ":cur_relation", reg0),
            (store_sub, ":relation_effect", 200, ":cur_relation"),
            (val_mul, ":max_resources_value", ":relation_effect"),
            (val_div, ":max_resources_value", 200),
	(try_end),
	
          #max_resources_value is the obtained value that gives us how tempting the kingdom's values are
          #average is 100
          (val_clamp, ":max_resources_value", 20, 500),
          #not letting more than 5 times higher chance of declaring war or peace
			
          (store_random_in_range, ":random_no", 0, 10000),
			(store_relation, ":cur_relation", ":cur_kingdom", ":cur_kingdom_2"),
			(try_begin),
				(lt, ":cur_relation", 0), #AT WAR
            (store_mul, ":chance_to_make_peace", ":total_ongoing_wars", 50),
            (val_mul, ":chance_to_make_peace", 100),
            (val_div, ":chance_to_make_peace", ":max_resources_value"),
            (try_begin),
              #disable random peace for special conditions
              (this_or_next|eq, ":cur_kingdom", "fac_player_supporters_faction"),
              (eq, ":cur_kingdom_2", "fac_player_supporters_faction"),
              (assign, ":continue", 0),
              (try_begin),
                (gt, "$supported_pretender", 0),
                (this_or_next|eq, ":cur_kingdom", "$supported_pretender_old_faction"),
                (eq, ":cur_kingdom_2", "$supported_pretender_old_faction"),
                (assign, ":continue", 1),
              (else_try),
                (is_between, "$players_oath_renounced_against_kingdom", kingdoms_begin, kingdoms_end),
                (this_or_next|eq, ":cur_kingdom", "$players_oath_renounced_against_kingdom"),
                (eq, ":cur_kingdom_2", "$players_oath_renounced_against_kingdom"),
                (assign, ":continue", 1),
              (try_end),
              (eq, ":continue", 1),
              (assign, ":chance_to_make_peace", 0),
            (try_end),
            (try_begin),
              (lt, ":random_no", ":chance_to_make_peace"),
              (assign, ":continue", 1),
				(try_begin),
                (check_quest_active, "qst_persuade_lords_to_make_peace"),
                (quest_get_slot, ":quest_target_faction", "qst_persuade_lords_to_make_peace", slot_quest_target_faction),
                (quest_get_slot, ":quest_object_faction", "qst_persuade_lords_to_make_peace", slot_quest_object_faction),
                (this_or_next|eq, ":cur_kingdom", ":quest_target_faction"),
                (eq, ":cur_kingdom", ":quest_object_faction"),
                (this_or_next|eq, ":cur_kingdom_2", ":quest_target_faction"),
                (eq, ":cur_kingdom_2", ":quest_object_faction"),
                (assign, ":continue", 0), #Do not declare war if the quest is active for the specific kingdoms
				(try_end),
              (eq, ":continue", 1),
	            (try_begin),
                (eq, ":cur_kingdom", "fac_player_supporters_faction"),
                (call_script, "script_add_notification_menu", "mnu_question_peace_offer", ":cur_kingdom_2", 0),
              (else_try),
	                (eq, ":cur_kingdom_2", "fac_player_supporters_faction"),
	                (call_script, "script_add_notification_menu", "mnu_question_peace_offer", ":cur_kingdom", 0),
	            (else_try),
                (call_script, "script_diplomacy_start_peace_between_kingdoms", ":cur_kingdom", ":cur_kingdom_2", ":initializing_war_peace_cond"),
					(try_end),	
	            (try_end),
          (else_try), # AT PEACE
            (assign, ":chance_to_declare_war", 6),
            (val_sub, ":chance_to_declare_war", ":total_ongoing_wars"),
            (val_mul, ":chance_to_declare_war", 50),
            (val_mul, ":chance_to_declare_war", ":max_resources_value"),
            (val_div, ":chance_to_declare_war", 100),
            (try_begin),
              (lt, ":random_no", ":chance_to_declare_war"),
              (assign, ":continue", 1),
				(try_begin),
                (check_quest_active, "qst_raid_caravan_to_start_war"),
                (quest_get_slot, ":quest_target_faction", "qst_raid_caravan_to_start_war", slot_quest_target_faction),
                (quest_get_slot, ":quest_object_faction", "qst_raid_caravan_to_start_war", slot_quest_object_faction),
                (this_or_next|eq, ":cur_kingdom", ":quest_target_faction"),
                (eq, ":cur_kingdom", ":quest_object_faction"),
                (this_or_next|eq, ":cur_kingdom_2", ":quest_target_faction"),
                (eq, ":cur_kingdom_2", ":quest_object_faction"),
                (assign, ":continue", 0), #Do not declare war if the quest is active for the specific kingdoms
				(try_end),	
              (eq, ":continue", 1),
                (call_script, "script_diplomacy_start_war_between_kingdoms", ":cur_kingdom", ":cur_kingdom_2", ":initializing_war_peace_cond"),
				(try_end),
            (try_end),
		(try_end),
	(try_end),	
     ]),
	 
# script_exchange_prisoners_between_factions
# Input: arg1 = faction_no_1, arg2 = faction_no_2
  ("exchange_prisoners_between_factions",
   [
       (store_script_param_1, ":faction_no_1"),
       (store_script_param_2, ":faction_no_2"),
       (assign, ":faction_no_3", -1),
       (assign, ":faction_no_4", -1),
       (try_begin),
         (this_or_next|eq, "$players_kingdom", ":faction_no_1"),
         (eq, "$players_kingdom", ":faction_no_2"),
         (assign, ":faction_no_3", "fac_player_faction"),
         (assign, ":faction_no_4", "fac_player_supporters_faction"),
       (try_end),
	   
       (try_for_parties, ":party_no"),
         (store_faction_of_party, ":party_faction", ":party_no"),
         (this_or_next|eq, ":party_faction", ":faction_no_1"),
         (this_or_next|eq, ":party_faction", ":faction_no_2"),
         (this_or_next|eq, ":party_faction", ":faction_no_3"),
         (eq, ":party_faction", ":faction_no_4"),
         (party_get_num_prisoner_stacks, ":num_stacks", ":party_no"),
         (try_for_range_backwards, ":troop_iterator", 0, ":num_stacks"),
           (party_prisoner_stack_get_troop_id, ":cur_troop_id", ":party_no", ":troop_iterator"),                                 
           (store_troop_faction, ":cur_faction", ":cur_troop_id"),
           (this_or_next|eq, ":cur_faction", ":faction_no_1"),
           (this_or_next|eq, ":cur_faction", ":faction_no_2"),
           (this_or_next|eq, ":cur_faction", ":faction_no_3"),
           (eq, ":cur_faction", ":faction_no_4"),
           (try_begin),
             (troop_is_hero, ":cur_troop_id"),
             (call_script, "script_remove_troop_from_prison", ":cur_troop_id"),
           (try_end),
           (party_prisoner_stack_get_size, ":stack_size", ":party_no", ":troop_iterator"),
           (party_remove_prisoners, ":party_no", ":cur_troop_id", ":stack_size"),
         (try_end),
       (try_end),
    ]),

  # script_add_notification_menu
  # Input: arg1 = menu_no, arg2 = menu_var_1, arg3 = menu_var_2
  # Output: none
  ("add_notification_menu",
    [
        (store_script_param, ":menu_no", 1),
        (store_script_param, ":menu_var_1", 2),
        (store_script_param, ":menu_var_2", 3),
        (assign, ":end_cond", 1),      
        (try_for_range, ":cur_slot", 0, ":end_cond"),
          (try_begin),
            (troop_slot_ge, "trp_notification_menu_types", ":cur_slot", 1),
            (val_add, ":end_cond", 1),
          (else_try),
            (troop_set_slot, "trp_notification_menu_types", ":cur_slot", ":menu_no"),
            (troop_set_slot, "trp_notification_menu_var1", ":cur_slot", ":menu_var_1"),
            (troop_set_slot, "trp_notification_menu_var2", ":cur_slot", ":menu_var_2"),
          (try_end),
        (try_end),
      ]),
  
  # script_finish_quest
  # Input: arg1 = quest_no, arg2 = finish_percentage
  # Output: none
  ("finish_quest",
    [
      (store_script_param_1, ":quest_no"),
      (store_script_param_2, ":finish_percentage"),
      
      (quest_get_slot, ":quest_giver", ":quest_no", slot_quest_giver_troop),
      #(quest_get_slot, ":quest_importance", ":quest_no", slot_quest_importance),
	  (assign, ":quest_importance", 3), # default importance is 3 for all quests
      (quest_get_slot, ":quest_xp_reward", ":quest_no", slot_quest_xp_reward),
      (quest_get_slot, ":quest_gold_reward", ":quest_no", slot_quest_gold_reward),
      
      (try_begin),
        (lt, ":finish_percentage", 100),
        (val_mul, ":quest_xp_reward", ":finish_percentage"),
        (val_div, ":quest_xp_reward", 100),
        (val_mul, ":quest_gold_reward", ":finish_percentage"),
        (val_div, ":quest_gold_reward", 100),
        #Changing the relation factor. Negative relation if less than 75% of the quest is finished.
        #Positive relation if more than 75% of the quest is finished.
        (assign, ":importance_multiplier", ":finish_percentage"),
        (val_sub, ":importance_multiplier", 75),
        (val_mul, ":quest_importance", ":importance_multiplier"),
        (val_div, ":quest_importance", 100),
      (try_end),
      
      (call_script, "script_change_player_relation_with_troop", ":quest_giver", ":quest_importance"),
      (add_xp_as_reward, ":quest_xp_reward"),
      (call_script, "script_troop_add_gold", "trp_player", ":quest_gold_reward"),
      (call_script, "script_end_quest", ":quest_no"),
  ]),
  
  
  # script_get_information_about_troops_position
  # Input: arg1 = troop_no, arg2 = time (0 if present tense, 1 if past tense)
  # Output: s1 = String, reg0 = knows-or-not
  ("get_information_about_troops_position",
    [
      (store_script_param_1, ":troop_no"),
      (store_script_param_2, reg3),
      (troop_get_type, reg4, ":troop_no"),
      (str_store_troop_name, s2, ":troop_no"),
      
      (assign, ":found", 0),
      (troop_get_slot, ":center_no", ":troop_no", slot_troop_cur_center),
      (try_begin),
        (gt, ":center_no", 0),
        (is_between, ":center_no", centers_begin, centers_end),
        (str_store_party_name_link, s3, ":center_no"),
        (str_store_string, s1, "@{s2} {reg3?was:is currently} at {s3}."),
        (assign, ":found", 1),
      (else_try),
        (troop_get_slot, ":party_no", ":troop_no", slot_troop_leaded_party),
        (gt, ":party_no", 0),
        (call_script, "script_get_troop_attached_party", ":troop_no"),
        (assign, ":center_no", reg0),
        (try_begin),
          (is_between, ":center_no", centers_begin, centers_end),
          (str_store_party_name_link, s3, ":center_no"),
          (str_store_string, s1, "@{s2} {reg3?was:is currently} at {s3}."),
          (assign, ":found", 1),
        (else_try),
          (get_party_ai_behavior, ":ai_behavior", ":party_no"),
          (eq, ":ai_behavior", ai_bhvr_travel_to_party),
          (get_party_ai_object, ":ai_object", ":party_no"),
          (is_between, ":ai_object", centers_begin, centers_end),
          (call_script, "script_get_closest_center", ":party_no"),
          (str_store_party_name_link, s4, reg0),
          (str_store_party_name_link, s3, ":ai_object"),
          (str_store_string, s1, "@{s2} {reg3?was:is} travelling to {s3} and {reg4?she:he} {reg3?was:should be} close to {s4}{reg3?: at the moment}."),
          (assign, ":found", 1),
        (else_try),
          (call_script, "script_get_closest_center", ":party_no"),
          (str_store_party_name_link, s3, reg0),
          (str_store_string, s1, "@{s2} {reg3?was:is} in the field and {reg4?she:he} {reg3?was:should be} close to {s3}{reg3?: at the moment}."),
          (assign, ":found", 1),
        (try_end),
      (else_try),
        #(troop_slot_ge, ":troop_no", slot_troop_is_prisoner, 1),
        (troop_slot_ge, ":troop_no", slot_troop_prisoner_of_party, 0),
        (try_for_range, ":center_no", walled_centers_begin, walled_centers_end),
          (party_count_prisoners_of_type, ":num_prisoners", ":center_no", ":troop_no"),
          (gt, ":num_prisoners", 0),
          (assign, ":found", 1),
          (str_store_party_name_link, s3, ":center_no"),
          (str_store_string, s1, "@{s2} {reg3?was:is} being held captive at {s3}."),
        (try_end),
        (try_begin),
          (eq, ":found", 0),
		  (neq, ":troop_no", kingdom_ladies_begin, kingdom_ladies_end),
          (str_store_string, s1, "@{s2} {reg3?was:has been} taken captive by {reg4?her:his} enemies."),
          (assign, ":found", 1),
        (try_end),
      (try_end),
      (try_begin),
        (eq, ":found", 0),
        (str_store_string, s1, "@{reg3?{s2}'s location was unknown:I don't know where {s2} is}."),
      (try_end),
      (assign, reg0, ":found"),
  ]),

  # script_recruit_troop_as_companion
  # Input: arg1 = troop_no,
  # Output: none
  ("recruit_troop_as_companion",
    [
      (store_script_param_1, ":troop_no"),
      (troop_set_slot, ":troop_no", slot_troop_occupation, slto_player_companion),
      (troop_set_slot, ":troop_no", slot_troop_cur_center, -1),
      (troop_set_auto_equip, ":troop_no", 0),
      (party_force_add_members, "p_main_party", ":troop_no", 1),
      (str_store_troop_name, s6, ":troop_no"),
      (display_message, "@{s6} has joined your party"),
  ]),
  

  # script_setup_random_scene
  # Input: arg1 = center_no, arg2 = mission_template_no
  # Output: none
  ("setup_random_scene",
    [
      (party_get_current_terrain, ":terrain_type", "p_main_party"),
      (assign, ":scene_to_use", "scn_random_scene"),
      (try_begin),
        (eq, ":terrain_type", rt_steppe),
        (assign, ":scene_to_use", "scn_random_scene_steppe"),
      (else_try),
        (eq, ":terrain_type", rt_plain),
        (assign, ":scene_to_use", "scn_random_scene_plain"),
      (else_try),
        (eq, ":terrain_type", rt_snow),
        (assign, ":scene_to_use", "scn_random_scene_snow"),
      (else_try),
        (eq, ":terrain_type", rt_desert),
        (assign, ":scene_to_use", "scn_random_scene_desert"),
      (else_try),
        (eq, ":terrain_type", rt_steppe_forest),
        (assign, ":scene_to_use", "scn_random_scene_steppe_forest"),
      (else_try),
        (eq, ":terrain_type", rt_forest),
        (assign, ":scene_to_use", "scn_random_scene_plain_forest"),
      (else_try),
        (eq, ":terrain_type", rt_snow_forest),
        (assign, ":scene_to_use", "scn_random_scene_snow_forest"),
      (else_try),
        (eq, ":terrain_type", rt_desert_forest),
        (assign, ":scene_to_use", "scn_random_scene_desert_forest"),
      (try_end),
      (jump_to_scene,":scene_to_use"),
	  (assign, reg0, ":scene_to_use"),
  ]),

  # script_enter_dungeon
  # Input: arg1 = center_no, arg2 = mission_template_no
  # Output: none
  ("enter_dungeon",
    [
      (store_script_param_1, ":center_no"),
      (store_script_param_2, ":mission_template_no"),
      
      (set_jump_mission,":mission_template_no"),
      (party_get_slot, ":dungeon_scene", ":center_no", slot_town_prison),
      
      (modify_visitors_at_site,":dungeon_scene"),(reset_visitors),
      (assign, ":cur_pos", 16),
      (call_script, "script_get_heroes_attached_to_center_as_prisoner", ":center_no", "p_temp_party"),
      (party_get_num_companion_stacks, ":num_stacks","p_temp_party"),
      (try_for_range, ":i_stack", 0, ":num_stacks"),
        (party_stack_get_troop_id, ":stack_troop","p_temp_party",":i_stack"),
        (lt, ":cur_pos", 32), # spawn up to entry point 32
        (set_visitor, ":cur_pos", ":stack_troop"),
        (val_add,":cur_pos", 1),
      (try_end),
      	 
      (set_jump_entry, 0),
      (jump_to_scene,":dungeon_scene"),
      (scene_set_slot, ":dungeon_scene", slot_scene_visited, 1),
      (change_screen_mission),
  ]),
  
  # script_enter_court
  # Input: arg1 = center_no
  # Output: none
  ("enter_court",
    [
      (store_script_param_1, ":center_no"),
      (call_script, "script_get_heroes_attached_to_center", ":center_no", "p_temp_party"),
      (assign, "$talk_context", tc_court_talk),
	  (set_jump_mission,"mt_visit_town_castle"),
         
      (party_get_slot, ":castle_scene", ":center_no", slot_town_castle),
      (modify_visitors_at_site,":castle_scene"),
      (reset_visitors),
      #Adding guards
      (store_faction_of_party, ":center_faction", ":center_no"),
      (faction_get_slot, ":guard_troop", ":center_faction", slot_faction_guard_troop),
      (try_begin),
        (le, ":guard_troop", 0),
        (assign, ":guard_troop", "trp_swadian_sergeant"),
      (try_end),

      (assign, ":cur_pos", 16),
      (party_get_num_companion_stacks, ":num_stacks","p_temp_party"),
	  (assign, ":radz_visited", 0),
	  (assign, ":moscow_tzar", 0),
	  (assign, ":moscow_pretender", 0),

	  #spawning kingdom lords first
      (try_for_range, ":i_stack", 0, ":num_stacks"),
        (party_stack_get_troop_id, ":stack_troop","p_temp_party",":i_stack"),
        (lt, ":cur_pos", 32), # spawn up to entry point 32
		(neq, ":stack_troop", "trp_player"),
		(this_or_next|faction_slot_eq, "fac_kingdom_1", slot_faction_leader, ":stack_troop"),
		(this_or_next|faction_slot_eq, "fac_kingdom_2", slot_faction_leader, ":stack_troop"),
		(this_or_next|faction_slot_eq, "fac_kingdom_3", slot_faction_leader, ":stack_troop"),
		(this_or_next|faction_slot_eq, "fac_kingdom_4", slot_faction_leader, ":stack_troop"),
		(             faction_slot_eq, "fac_kingdom_5", slot_faction_leader, ":stack_troop"),
        (set_visitor, ":cur_pos", ":stack_troop"),
	  (try_begin),
	  		(check_quest_active, "qst_oim_potop_execute_king"),
			(neg|check_quest_succeeded, "qst_oim_potop_execute_king"), 
			(neg|check_quest_finished,"qst_oim_potop_execute_king"),
			(eq, ":stack_troop", "trp_kingdom_1_lord"),
			(assign, "$g_oim_interrior_fight", 1),
			(set_jump_mission,"mt_oim_simle_fight_interior"),
		(try_end), 
		(try_begin), 
			(eq, ":stack_troop", "trp_kingdom_1_pretender"),
			(assign, ":radz_visited", 1),
		(try_end), 
		(try_begin), 
			(eq, ":stack_troop", "trp_kingdom_2_lord"),
			(assign, ":moscow_tzar", 1),
	  (try_end),
	  (try_begin),
			(eq, ":stack_troop", "trp_kingdom_2_pretender"),
			(assign, ":moscow_pretender", 1),
	  (try_end),
	  
			(val_add,":cur_pos", 1),
		(try_end),
	  
	  
      (try_for_range, ":i_stack", 0, ":num_stacks"),
        (party_stack_get_troop_id, ":stack_troop","p_temp_party",":i_stack"),
        (lt, ":cur_pos", 32), # spawn up to entry point 32
		(neq, ":stack_troop", "trp_player"),
		(neg|faction_slot_eq, "fac_kingdom_1", slot_faction_leader, ":stack_troop"),
		(neg|faction_slot_eq, "fac_kingdom_2", slot_faction_leader, ":stack_troop"),
		(neg|faction_slot_eq, "fac_kingdom_3", slot_faction_leader, ":stack_troop"),
		(neg|faction_slot_eq, "fac_kingdom_4", slot_faction_leader, ":stack_troop"),
		(neg|faction_slot_eq, "fac_kingdom_5", slot_faction_leader, ":stack_troop"),
		(troop_slot_eq, ":stack_troop", slot_troop_occupation, slto_kingdom_hero),
        (set_visitor, ":cur_pos", ":stack_troop"),
		(try_begin), 
	  		(check_quest_active, "qst_oim_potop_execute_king"),
			(neg|check_quest_succeeded, "qst_oim_potop_execute_king"), 
			(neg|check_quest_finished,"qst_oim_potop_execute_king"),
			(eq, ":stack_troop", "trp_kingdom_1_lord"),
			(assign, "$g_oim_interrior_fight", 1),
			(set_jump_mission,"mt_oim_simle_fight_interior"),
      (try_end),
		(try_begin),
			(eq, ":stack_troop", "trp_kingdom_1_pretender"),
			(assign, ":radz_visited", 1),
		(try_end), 
			(try_begin),
			(eq, ":stack_troop", "trp_kingdom_2_lord"),
			(assign, ":moscow_tzar", 1),
			(try_end),
			(try_begin),
			(eq, ":stack_troop", "trp_kingdom_2_pretender"),
			(assign, ":moscow_pretender", 1),
			(try_end),

        (val_add,":cur_pos", 1),
				(try_end),				
				
      (try_for_range, ":cur_troop", heroes_begin, heroes_end),
        (troop_slot_eq, ":cur_troop", slot_troop_occupation, slto_kingdom_lady),
        (troop_slot_eq, ":cur_troop", slot_troop_cur_center, ":center_no"),
		(neg|is_between, ":cur_troop", pretenders_begin, pretenders_end),
        (lt, ":cur_pos", 32), # spawn up to entry point 32
		(neq, ":cur_troop", "trp_knight_1_2_wife"),
		#(neq, ":center_faction", "fac_kingdom_3"),
        (set_visitor, ":cur_pos", ":cur_troop"),
        (val_add,":cur_pos", 1),
			(try_end),
			(try_begin),
		(check_quest_active, "qst_oim_trakay_icon"), 
		(quest_slot_eq, "qst_oim_trakay_icon", slot_quest_current_state, 1),
		(eq, "$g_encountered_party", "p_town_4"), 
		(neq, ":radz_visited", 1),
#		(eq, ":quest_current_state", 1),	  
		(lt, ":cur_pos", 32),
		(set_visitor, ":cur_pos", "trp_kingdom_1_pretender"),
			(try_end),
	  #radzivil
			(try_begin),
		(neq, ":radz_visited", 1),
		(check_quest_active, "qst_rebel_against_kingdom"), 
		(check_quest_active, "qst_oim_getman_main"), 
		(quest_slot_eq, "qst_oim_getman_main", slot_quest_target_center, "$g_encountered_party"),
		(lt, ":cur_pos", 32),
		(set_visitor, ":cur_pos", "trp_kingdom_1_pretender"),
			(try_end),
			(try_begin),
		(eq, ":moscow_tzar", 1), 
		(assign, ":guard_troop", "trp_rinda"),
	  (try_end), 
			(try_begin),
		(check_quest_active, "qst_oim_dmitriy_razin"), 
		(quest_slot_eq, "qst_oim_dmitriy_razin", slot_quest_current_state, 0),
		(eq, "$g_encountered_party", "p_town_11"), 
		(neq, ":moscow_pretender", 1),
#		(eq, ":quest_current_state", 1),	  
		(lt, ":cur_pos", 32),
		(set_visitor, ":cur_pos", "trp_kingdom_2_pretender"),
			(try_end),
		(set_visitor, 6, ":guard_troop"),
		(set_visitor, 7, ":guard_troop"),
      (jump_to_scene,":castle_scene"),
      (scene_set_slot, ":castle_scene", slot_scene_visited, 1),
      (change_screen_mission),
  ]),


  # script_find_high_ground_around_pos1
  # Input: pos1 should hold center_position_no
  #        arg1: team_no
  #        arg2: search_radius (in meters)
  # Output: pos52 contains highest ground within <search_radius> meters of team leader
  # Destroys position registers: pos10, pos11, pos15
  ("find_high_ground_around_pos1",
    [
      (store_script_param, ":team_no", 1),
      (store_script_param, ":search_radius", 2),
      (val_mul, ":search_radius", 100),
      (get_scene_boundaries, pos10,pos11),
      (team_get_leader, ":ai_leader", ":team_no"),
      (agent_get_position, pos1, ":ai_leader"),
      (set_fixed_point_multiplier, 100),
      (position_get_x, ":o_x", pos1),
      (position_get_y, ":o_y", pos1),
      (store_sub, ":min_x", ":o_x", ":search_radius"),
      (store_sub, ":min_y", ":o_y", ":search_radius"),
      (store_add, ":max_x", ":o_x", ":search_radius"),
      (store_add, ":max_y", ":o_y", ":search_radius"),
      (position_get_x, ":scene_min_x", pos10),
      (position_get_x, ":scene_max_x", pos11),
      (position_get_y, ":scene_min_y", pos10),
      (position_get_y, ":scene_max_y", pos11),
      #do not find positions close to borders (20 m)
      (val_add, ":scene_min_x", 2000),
      (val_sub, ":scene_max_x", 2000),
      (val_add, ":scene_min_y", 2000),
      (val_sub, ":scene_max_y", 2000),
      (val_max, ":min_x", ":scene_min_x"),
      (val_max, ":min_y", ":scene_min_y"),
      (val_min, ":max_x", ":scene_max_x"),
      (val_min, ":max_y", ":scene_max_y"),
      
      (store_div, ":min_x_meters", ":min_x", 100),
      (store_div, ":min_y_meters", ":min_y", 100),
      (store_div, ":max_x_meters", ":max_x", 100),
      (store_div, ":max_y_meters", ":max_y", 100),
      
      (assign, ":highest_pos_z", -10000),
      (copy_position, pos52, pos1),
      (init_position, pos15),
      
      (try_for_range, ":i_x", ":min_x_meters", ":max_x_meters"),
        (store_mul, ":i_x_cm", ":i_x", 100),
        (try_for_range, ":i_y", ":min_y_meters", ":max_y_meters"),
          (store_mul, ":i_y_cm", ":i_y", 100),
          (position_set_x, pos15, ":i_x_cm"),
          (position_set_y, pos15, ":i_y_cm"),
          (position_set_z, pos15, 10000),
          (position_set_z_to_ground_level, pos15),
          (position_get_z, ":cur_pos_z", pos15),
          (try_begin),
            (gt, ":cur_pos_z", ":highest_pos_z"),
            (copy_position, pos52, pos15),
            (assign, ":highest_pos_z", ":cur_pos_z"),
          (try_end),
        (try_end),
      (try_end),
  ]),
  
  # script_select_battle_tactic
  # Input: none
  # Output: none
  ("select_battle_tactic",
    [
      (assign, "$ai_team_1_battle_tactic", 0),
      (get_player_agent_no, ":player_agent"),
      (agent_get_team, ":player_team", ":player_agent"),
      (try_begin),
        (num_active_teams_le, 2),
        (try_begin),
          (eq, ":player_team", 0),
          (assign, "$ai_team_1", 1),
        (else_try),
          (assign, "$ai_team_1", 0),
        (try_end),
        (assign, "$ai_team_2", -1),
      (else_try),
        (try_begin),
          (eq, ":player_team", 0),
          (assign, "$ai_team_1", 1),
        (else_try),
          (assign, "$ai_team_1", 0),
        (try_end),
        (store_add, "$ai_team_2", ":player_team", 2),
      (try_end),
      (call_script, "script_select_battle_tactic_aux", "$ai_team_1"),
      (assign, "$ai_team_1_battle_tactic", reg0),
      (try_begin),
        (ge, "$ai_team_2", 0),
        (call_script, "script_select_battle_tactic_aux", "$ai_team_2"),
        (assign, "$ai_team_2_battle_tactic", reg0),
      (try_end),
  ]),

  # script_select_battle_tactic_aux
  # Input: team_no
  # Output: battle_tactic
  ("select_battle_tactic_aux",
    [
      (store_script_param, ":team_no", 1),
      (assign, ":battle_tactic", 0),
      (assign, ":defense_not_an_option", 0),
      (get_player_agent_no, ":player_agent"),
      (agent_get_team, ":player_team", ":player_agent"),
      (try_begin),
        (eq, "$cant_leave_encounter", 1),
        (teams_are_enemies, ":team_no", ":player_team"),
        (assign, ":defense_not_an_option", 1),
      (try_end),
      (call_script, "script_team_get_class_percentages", ":team_no", 0),
      #      (assign, ":ai_perc_infantry", reg0),
      (assign, ":ai_perc_archers",  reg1),
      (assign, ":ai_perc_cavalry",  reg2),
      (call_script, "script_team_get_class_percentages", ":team_no", 1),#enemies of the ai_team
      #      (assign, ":enemy_perc_infantry", reg0),
      #      (assign, ":enemy_perc_archers",  reg1),
      #      (assign, ":enemy_perc_cavalry",  reg2),

      (store_random_in_range, ":rand", 0, 100),      
      (try_begin),
        (this_or_next|lt, ":rand", 20),
        (assign, ":continue", 0),
        (try_begin),
          (teams_are_enemies, ":team_no", ":player_team"),
          (party_slot_eq, "$g_enemy_party", slot_party_type, spt_kingdom_hero_party),
          (assign, ":continue", 1),
        (else_try),
          (neg|teams_are_enemies, ":team_no", ":player_team"),
          (gt, "$g_ally_party", 0),
          (party_slot_eq, "$g_ally_party", slot_party_type, spt_kingdom_hero_party),
          (assign, ":continue", 1),
        (try_end),
        (eq, ":continue", 1),
        (try_begin),
          (eq, ":defense_not_an_option", 0),
          (gt, ":ai_perc_archers", 50),
          (lt, ":ai_perc_cavalry", 35),
          (assign, ":battle_tactic", btactic_hold),
        (else_try),
          (lt, ":rand", 80),
          (assign, ":battle_tactic", btactic_follow_leader),
        (try_end),
      (try_end),
      (assign, reg0, ":battle_tactic"),
  ]),
  
  # script_battle_tactic_init
  # Input: none
  # Output: none
  ("battle_tactic_init",
    [
      (call_script, "script_battle_tactic_init_aux", "$ai_team_1", "$ai_team_1_battle_tactic"),
      (try_begin),
        (ge, "$ai_team_2", 0),
        (call_script, "script_battle_tactic_init_aux", "$ai_team_2", "$ai_team_2_battle_tactic"),
      (try_end),

      (try_for_agents, ":cur_agent"),
        (agent_set_slot, ":cur_agent",  slot_agent_is_running_away, 0), #initially nobody is running away.
      (try_end),
  ]),

  # script_battle_tactic_init_aux
  # Input: team_no, battle_tactic
  # Output: none
  ("battle_tactic_init_aux",
    [
      (store_script_param, ":team_no", 1),
      (store_script_param, ":battle_tactic", 2),
      (team_get_leader, ":ai_leader", ":team_no"),
	  (assign, "$g_fire_at_my_command", 0),
      (try_begin),
        (eq, ":battle_tactic", btactic_hold),
        (agent_get_position, pos1, ":ai_leader"),
        (call_script, "script_find_high_ground_around_pos1", ":team_no", 30),
        (copy_position, pos1, pos52),
        (call_script, "script_find_high_ground_around_pos1", ":team_no", 30), # call again just in case we are not at peak point.
        (copy_position, pos1, pos52),
        (call_script, "script_find_high_ground_around_pos1", ":team_no", 30), # call again just in case we are not at peak point.
        (team_give_order, ":team_no", grc_everyone, mordr_hold),
        (team_set_order_position, ":team_no", grc_everyone, pos52),
        (team_give_order, ":team_no", grc_archers, mordr_advance),
        (team_give_order, ":team_no", grc_archers, mordr_advance),
		(store_random_in_range, "$g_fire_at_my_command", 0, 2),
		(try_begin),
		  (eq, "$g_fire_at_my_command", 1),
		  (team_give_order, ":team_no", grc_everyone, mordr_fire_at_my_command),
		(try_end),
      (else_try),
        (eq, ":battle_tactic", btactic_follow_leader),
        (team_get_leader, ":ai_leader", ":team_no"),
        (ge, ":ai_leader", 0),
        (agent_set_speed_limit, ":ai_leader", 8),
        (agent_get_position, pos60, ":ai_leader"),
        (team_give_order, ":team_no", grc_everyone, mordr_hold),
        (team_set_order_position, ":team_no", grc_everyone, pos60),
      (try_end),
  ]),

  # script_calculate_team_powers
  # Input: none
  # Output: ally_power, enemy_power
  ("calculate_team_powers",
     [
  ]), #ozan

  # script_apply_effect_of_other_people_on_courage_scores
  # Input: none
  # Output: none
  ("apply_effect_of_other_people_on_courage_scores",
    [
      (get_player_agent_no, ":player_agent"),

	  #First multiply fading out courage scores with 0.9x of agents not running away. 
	  (try_for_agents, ":agent_no"),
	    (agent_get_slot, ":is_cur_agent_running_away", ":agent_no", slot_agent_is_running_away),
		(eq, ":is_cur_agent_running_away", 0),
	    (agent_get_slot, ":agent_courage_score_fading_out", ":agent_no", slot_agent_courage_score_fading_out),
		(val_mul, ":agent_courage_score_fading_out", 90), #[TO : cem] you can change 90 here to 80 if you want to fade out that courage additional score faster.
		(val_div, ":agent_courage_score_fading_out", 100),
		(agent_set_slot, ":agent_no", slot_agent_courage_score_fading_out, ":agent_courage_score_fading_out"),
      (try_end),

      (try_for_agents, ":centered_agent_no"),
        (agent_is_human, ":centered_agent_no"),
        (agent_is_alive, ":centered_agent_no"),
        (neq, ":centered_agent_no", ":player_agent"),
        (agent_get_position, pos0, ":centered_agent_no"),
        (try_begin),
          (agent_is_ally, ":centered_agent_no"),
          (assign, ":is_centered_agent_ally", 1),
        (else_try),
          (assign, ":is_centered_agent_ally", 0),
        (try_end),
       
        (try_for_agents, ":agent_no"),
          (agent_is_human, ":agent_no"),
          (agent_is_alive, ":agent_no"),
          (neq, ":centered_agent_no", ":agent_no"),      

          (try_begin),
            (agent_is_ally, ":agent_no"),
            (assign, ":is_agent_ally", 1),
          (else_try),
            (assign, ":is_agent_ally", 0),
          (try_end),

          (eq, ":is_centered_agent_ally", ":is_agent_ally"), #if centered agent and other agent is at same team then continue.
          (agent_get_slot, ":agent_is_running_away_or_not", ":agent_no", slot_agent_is_running_away),

          (try_begin),
            (eq, ":agent_no", ":player_agent"),
            (assign, ":agent_delta_courage_score", 6),
          (else_try),
            (agent_get_troop_id, ":troop_id", ":agent_no"),
            (troop_is_hero, ":troop_id"),
      
            #Hero Agent : if near agent (hero, agent_no) is not running away his positive effect on centered agent (centered_agent_no) fighting at his side is effected by his hit points.
            (try_begin),      
              (neq, ":agent_is_running_away_or_not", 1), #if agent is not running away
              (store_agent_hit_points, ":agent_hit_points", ":agent_no"),
              (try_begin),
                (eq, ":agent_hit_points", 100),
                (assign, ":agent_delta_courage_score", 6),
              (else_try),
                (ge, ":agent_hit_points", 75),
                (assign, ":agent_delta_courage_score", 5),
              (else_try),
                (ge, ":agent_hit_points", 60),
                (assign, ":agent_delta_courage_score", 4),
              (else_try),
                (ge, ":agent_hit_points", 45),
                (assign, ":agent_delta_courage_score", 3),
              (else_try),
                (ge, ":agent_hit_points", 30),
                (assign, ":agent_delta_courage_score", 2),
              (else_try),
                (ge, ":agent_hit_points", 15),
                (assign, ":agent_delta_courage_score", 1),
              (try_end),
            (else_try),
              (assign, ":agent_delta_courage_score", 4),
            (try_end),
          (else_try),
            #Normal Agent : if near agent (agent_no) is not running away his positive effect on centered agent (centered_agent_no) fighting at his side is effected by his hit points.
            (try_begin),      
              (neq, ":agent_is_running_away_or_not", 1), # if agent is not running away
              (store_agent_hit_points, ":agent_hit_points", ":agent_no"),
              (try_begin),
                (eq, ":agent_hit_points", 100),
                (assign, ":agent_delta_courage_score", 4),
              (else_try),
                (ge, ":agent_hit_points", 75),
                (assign, ":agent_delta_courage_score", 3),
              (else_try),
                (ge, ":agent_hit_points", 50),
                (assign, ":agent_delta_courage_score", 2),
              (else_try),
                (ge, ":agent_hit_points", 25),
                (assign, ":agent_delta_courage_score", 1),
              (try_end),
              (try_begin), # to make our warrior run away easier we decrease one, because they have player_agent (+6) advantage.
                (agent_is_ally, ":agent_no"),
                (val_sub, ":agent_delta_courage_score", 1),
              (try_end),
            (else_try),
              (assign, ":agent_delta_courage_score", 2),
            (try_end),
          (try_end),
      
          (try_begin),
            (neq, ":agent_is_running_away_or_not", 1),
            (val_mul, ":agent_delta_courage_score", 1),
            (try_begin), # centered agent not running away cannot take positive courage score from one another agent not running away.
              (agent_get_slot, ":agent_is_running_away_or_not", ":centered_agent_no", slot_agent_is_running_away),
              (eq, ":agent_is_running_away_or_not", 0),
              (val_mul, ":agent_delta_courage_score", 0),
            (try_end),
          (else_try),
            (try_begin), 
              (agent_get_slot, ":agent_is_running_away_or_not", ":agent_no", slot_agent_is_running_away),
              (eq, ":agent_is_running_away_or_not", 0),
              (val_mul, ":agent_delta_courage_score", -2), # running away agent fears not running away agent more.
            (else_try),
              (val_mul, ":agent_delta_courage_score", -1),
            (try_end),
          (try_end),

          (neq, ":agent_delta_courage_score", 0),

          (agent_get_position, pos1, ":agent_no"),
          (get_distance_between_positions, ":dist", pos0, pos1),

          (try_begin),
            (ge, ":agent_delta_courage_score", 0),
            (try_begin),
              (lt, ":dist", 2000), #0-20 meter
              (agent_get_slot, ":agent_courage_score", ":centered_agent_no", slot_agent_courage_score),
              (val_mul, ":agent_delta_courage_score", 50),
              (val_add, ":agent_courage_score", ":agent_delta_courage_score"),
              (agent_set_slot, ":centered_agent_no", slot_agent_courage_score, ":agent_courage_score"),           
            (try_begin),
              (lt, ":dist", 4000), #21-40 meter
              (agent_get_slot, ":agent_courage_score", ":centered_agent_no", slot_agent_courage_score),
              (val_mul, ":agent_delta_courage_score", 40),
              (val_add, ":agent_courage_score", ":agent_delta_courage_score"),
              (agent_set_slot, ":centered_agent_no", slot_agent_courage_score, ":agent_courage_score"),           
            (try_begin),
              (lt, ":dist", 7000), #41-70 meter
              (agent_get_slot, ":agent_courage_score", ":centered_agent_no", slot_agent_courage_score),
              (val_mul, ":agent_delta_courage_score", 30),
              (val_add, ":agent_courage_score", ":agent_delta_courage_score"),
              (agent_set_slot, ":centered_agent_no", slot_agent_courage_score, ":agent_courage_score"),           
            (else_try),
              (lt, ":dist", 11000), #71-110 meter
              (agent_get_slot, ":agent_courage_score", ":centered_agent_no", slot_agent_courage_score),
              (val_mul, ":agent_delta_courage_score", 20),
              (val_add, ":agent_courage_score", ":agent_delta_courage_score"),
              (agent_set_slot, ":centered_agent_no", slot_agent_courage_score, ":agent_courage_score"),           
            (else_try),      
              (lt, ":dist", 16000), # 111-160 meter, assumed that eye can see agents friendly at most 160 meters far while fighting. 
                                    # this is more than below limit (108 meters) because we hear that allies come from further.
              (agent_get_slot, ":agent_courage_score", ":centered_agent_no", slot_agent_courage_score),
              (val_mul, ":agent_delta_courage_score", 10),
              (val_add, ":agent_courage_score", ":agent_delta_courage_score"),
              (agent_set_slot, ":centered_agent_no", slot_agent_courage_score, ":agent_courage_score"),           
            (try_end),      
          (else_try),                                               # negative effect of running agent on other ally agents are lower then positive effects above, to avoid starting  
            (try_begin),                                            # run away of all agents at a moment. I want to see agents running away one by one during battle, not all together.
              (lt, ":dist", 200), #1-2 meter,                       # this would create better game play.
              (agent_get_slot, ":agent_courage_score", ":centered_agent_no", slot_agent_courage_score),
              (val_mul, ":agent_delta_courage_score", 15),
              (val_add, ":agent_courage_score", ":agent_delta_courage_score"),
              (agent_set_slot, ":centered_agent_no", slot_agent_courage_score, ":agent_courage_score"),           
            (else_try),
              (lt, ":dist", 400), #3-4 meter, 
              (agent_get_slot, ":agent_courage_score", ":centered_agent_no", slot_agent_courage_score),
              (val_mul, ":agent_delta_courage_score", 13),
              (val_add, ":agent_courage_score", ":agent_delta_courage_score"),
              (agent_set_slot, ":centered_agent_no", slot_agent_courage_score, ":agent_courage_score"),           
            (else_try),
              (lt, ":dist", 600), #5-6 meter
              (agent_get_slot, ":agent_courage_score", ":centered_agent_no", slot_agent_courage_score),
              (val_mul, ":agent_delta_courage_score", 11),
              (val_add, ":agent_courage_score", ":agent_delta_courage_score"),
              (agent_set_slot, ":centered_agent_no", slot_agent_courage_score, ":agent_courage_score"),           
            (else_try),
              (lt, ":dist", 800), #7-8 meter
              (agent_get_slot, ":agent_courage_score", ":centered_agent_no", slot_agent_courage_score),
              (val_mul, ":agent_delta_courage_score", 9),
              (val_add, ":agent_courage_score", ":agent_delta_courage_score"),
              (agent_set_slot, ":centered_agent_no", slot_agent_courage_score, ":agent_courage_score"),           
            (else_try),
              (lt, ":dist", 1200), #9-12 meters
              (agent_get_slot, ":agent_courage_score", ":centered_agent_no", slot_agent_courage_score),
              (val_mul, ":agent_delta_courage_score", 7),
              (val_add, ":agent_courage_score", ":agent_delta_courage_score"),
              (agent_set_slot, ":centered_agent_no", slot_agent_courage_score, ":agent_courage_score"),           
            (else_try),
              (lt, ":dist", 2400), #13-24 meters
              (agent_get_slot, ":agent_courage_score", ":centered_agent_no", slot_agent_courage_score),
              (val_mul, ":agent_delta_courage_score", 5),
              (val_add, ":agent_courage_score", ":agent_delta_courage_score"),
              (agent_set_slot, ":centered_agent_no", slot_agent_courage_score, ":agent_courage_score"),           
            (else_try),
              (lt, ":dist", 4800), #25-48 meters
              (agent_get_slot, ":agent_courage_score", ":centered_agent_no", slot_agent_courage_score),
              (val_mul, ":agent_delta_courage_score", 3),
              (val_add, ":agent_courage_score", ":agent_delta_courage_score"),
              (agent_set_slot, ":centered_agent_no", slot_agent_courage_score, ":agent_courage_score"),           
            (else_try),
              (lt, ":dist", 9600), #49-98 meters, assumed that eye can see agents running away at most 98 meters far while fighting.
              (agent_get_slot, ":agent_courage_score", ":centered_agent_no", slot_agent_courage_score),
              (val_mul, ":agent_delta_courage_score", 1),
              (val_add, ":agent_courage_score", ":agent_delta_courage_score"),
              (agent_set_slot, ":centered_agent_no", slot_agent_courage_score, ":agent_courage_score"),           
            (try_end),      
          (try_end),
        (try_end),            
      (try_end),
  ]), #ozan

  
  # script_apply_death_effect_on_courage_scores
  # Input: dead agent id, killer agent id
  # Output: none
  ("apply_death_effect_on_courage_scores",
    [
      (store_script_param, ":dead_agent_no", 1),
      (store_script_param, ":killer_agent_no", 2),
      
      (try_begin),
        (agent_is_human, ":dead_agent_no"),

        (try_begin),
          (agent_is_ally, ":dead_agent_no"),
          (assign, ":is_dead_agent_ally", 1),
        (else_try),
          (assign, ":is_dead_agent_ally", 0),
        (try_end),

        (agent_get_position, pos0, ":dead_agent_no"),
        (assign, ":number_of_near_allies_to_dead_agent", 0),

        (try_for_agents, ":agent_no"),
          (agent_is_human, ":agent_no"),
          (agent_is_alive, ":agent_no"),

          (agent_get_position, pos1, ":agent_no"), 
          (get_distance_between_positions, ":dist", pos0, pos1),

          (le, ":dist", 1300), # to count number of allies within 13 meters to dead agent.

          (try_begin),
            (agent_is_ally, ":agent_no"),
            (assign, ":is_agent_ally", 1),
          (else_try),
            (assign, ":is_agent_ally", 0),
          (try_end),

          (try_begin), 
            (eq, ":is_dead_agent_ally", ":is_agent_ally"),
            (val_add, ":number_of_near_allies_to_dead_agent", 1), # (number_of_near_allies_to_dead_agent) is counted because if there are 
          (try_end),                                              # many allies of dead agent around him, negative courage effect become less.
        (try_end),
                
        (try_for_agents, ":agent_no"),
          (agent_is_human, ":agent_no"),
          (agent_is_alive, ":agent_no"),
           
          (try_begin),
            (agent_is_ally, ":agent_no"),
            (assign, ":is_agent_ally", 1),
          (else_try),
            (assign, ":is_agent_ally", 0),
          (try_end),
   
          (try_begin), # each agent is effected by a killed agent positively if he is rival or negatively if he is ally.
            (neq, ":is_dead_agent_ally", ":is_agent_ally"), 
            (assign, ":agent_delta_courage_score", 10),  # if killed agent is agent of rival side, add points to fear score
          (else_try),          
            (assign, ":agent_delta_courage_score", -15), # if killed agent is agent of our side, decrease points from fear score
            (val_add, ":agent_delta_courage_score", ":number_of_near_allies_to_dead_agent"), # ":number_of_near_allies_to_dead_agent" is added because if there are many
            (try_begin),                                                                     # allies of dead agent around him, negative courage effect become less.
              (gt, ":agent_delta_courage_score", -5),
              (assign, ":agent_delta_courage_score", -5),
            (try_end),

            (agent_get_slot, ":dead_agent_was_running_away_or_not", ":dead_agent_no",  slot_agent_is_running_away), #look dead agent was running away or not. 
            (try_begin),
              (eq, ":dead_agent_was_running_away_or_not", 1),      
              (val_div, ":agent_delta_courage_score", 3),  # if killed agent was running away his negative effect on ally courage scores become very less. This added because
            (try_end),                                     # running away agents are easily killed and courage scores become very in a running away group after a time, and
          (try_end),                                       # they do not stop running away althought they pass near a new powerfull ally party.                 
          (agent_get_position, pos1, ":agent_no"), 
          (get_distance_between_positions, ":dist", pos0, pos1),

          (try_begin),
            (eq, ":killer_agent_no", ":agent_no"),
            (agent_get_slot, ":agent_courage_score", ":agent_no", slot_agent_courage_score),
            (val_mul, ":agent_delta_courage_score", 20),
            (val_add, ":agent_courage_score", ":agent_delta_courage_score"),
            (agent_set_slot, ":agent_no", slot_agent_courage_score, ":agent_courage_score"),           
          (try_end),
        
          (try_begin),
            (lt, ":dist", 100), #0-1 meters
            (agent_get_slot, ":agent_courage_score", ":agent_no", slot_agent_courage_score),
            (val_mul, ":agent_delta_courage_score", 150),
            (val_add, ":agent_courage_score", ":agent_delta_courage_score"),
            (agent_set_slot, ":agent_no", slot_agent_courage_score, ":agent_courage_score"),           
          (else_try),
            (lt, ":dist", 200), #2 meters
            (agent_get_slot, ":agent_courage_score", ":agent_no", slot_agent_courage_score),
            (val_mul, ":agent_delta_courage_score", 120),
            (val_add, ":agent_courage_score", ":agent_delta_courage_score"),
            (agent_set_slot, ":agent_no", slot_agent_courage_score, ":agent_courage_score"),           
          (else_try),
            (lt, ":dist", 300), #3 meter
            (agent_get_slot, ":agent_courage_score", ":agent_no", slot_agent_courage_score),
            (val_mul, ":agent_delta_courage_score", 100),
            (val_add, ":agent_courage_score", ":agent_delta_courage_score"),
            (agent_set_slot, ":agent_no", slot_agent_courage_score, ":agent_courage_score"),           
          (else_try),
            (lt, ":dist", 400), #4 meters
            (agent_get_slot, ":agent_courage_score", ":agent_no", slot_agent_courage_score),
            (val_mul, ":agent_delta_courage_score", 90),
            (val_add, ":agent_courage_score", ":agent_delta_courage_score"),
            (agent_set_slot, ":agent_no", slot_agent_courage_score, ":agent_courage_score"),           
          (else_try),
            (lt, ":dist", 600), #5-6 meters
            (agent_get_slot, ":agent_courage_score", ":agent_no", slot_agent_courage_score),
            (val_mul, ":agent_delta_courage_score", 80),
            (val_add, ":agent_courage_score", ":agent_delta_courage_score"),
            (agent_set_slot, ":agent_no", slot_agent_courage_score, ":agent_courage_score"),           
          (else_try),
            (lt, ":dist", 800), #7-8 meters
            (agent_get_slot, ":agent_courage_score", ":agent_no", slot_agent_courage_score),
            (val_mul, ":agent_delta_courage_score", 70),
            (val_add, ":agent_courage_score", ":agent_delta_courage_score"),
            (agent_set_slot, ":agent_no", slot_agent_courage_score, ":agent_courage_score"),           
          (else_try),
            (lt, ":dist", 1000), #9-10 meters
            (agent_get_slot, ":agent_courage_score", ":agent_no", slot_agent_courage_score),
            (val_mul, ":agent_delta_courage_score", 60),
            (val_add, ":agent_courage_score", ":agent_delta_courage_score"),
            (agent_set_slot, ":agent_no", slot_agent_courage_score, ":agent_courage_score"),           
          (else_try),
            (lt, ":dist", 1500), #11-15 meter
            (agent_get_slot, ":agent_courage_score", ":agent_no", slot_agent_courage_score),
            (val_mul, ":agent_delta_courage_score", 50),
            (val_add, ":agent_courage_score", ":agent_delta_courage_score"),
            (agent_set_slot, ":agent_no", slot_agent_courage_score, ":agent_courage_score"),           
          (else_try),
            (lt, ":dist", 2500), #16-25 meters
            (agent_get_slot, ":agent_courage_score", ":agent_no", slot_agent_courage_score),
            (val_mul, ":agent_delta_courage_score", 40),
            (val_add, ":agent_courage_score", ":agent_delta_courage_score"),
            (agent_set_slot, ":agent_no", slot_agent_courage_score, ":agent_courage_score"),           
          (else_try),
            (lt, ":dist", 4000), #26-40 meters
            (agent_get_slot, ":agent_courage_score", ":agent_no", slot_agent_courage_score),
            (val_mul, ":agent_delta_courage_score", 30),
            (val_add, ":agent_courage_score", ":agent_delta_courage_score"),
            (agent_set_slot, ":agent_no", slot_agent_courage_score, ":agent_courage_score"),           
          (else_try),
            (lt, ":dist", 6500), #41-65 meters
            (agent_get_slot, ":agent_courage_score", ":agent_no", slot_agent_courage_score),
            (val_mul, ":agent_delta_courage_score", 20),
            (val_add, ":agent_courage_score", ":agent_delta_courage_score"),
            (agent_set_slot, ":agent_no", slot_agent_courage_score, ":agent_courage_score"),           
          (else_try),
            (lt, ":dist", 10000), #61-100 meters
            (agent_get_slot, ":agent_courage_score", ":agent_no", slot_agent_courage_score),
            (val_mul, ":agent_delta_courage_score", 10),
            (val_add, ":agent_courage_score", ":agent_delta_courage_score"),
            (agent_set_slot, ":agent_no", slot_agent_courage_score, ":agent_courage_score"),           
          (try_end),

		  (try_begin),
		    (lt, ":agent_delta_courage_score", 0),
			(agent_get_slot, ":agent_courage_score_fading_out", ":agent_no", slot_agent_courage_score_fading_out),
			(store_mul, ":agent_delta_courage_score_modified", ":agent_delta_courage_score", 60), #100/100 = 1.00x currently, [TO : cem] you can modify it to find best.
			(val_div, ":agent_delta_courage_score_modified", 100),
			(val_add, ":agent_courage_score_fading_out", ":agent_delta_courage_score_modified"),
			(agent_set_slot, ":agent_no", slot_agent_courage_score_fading_out, ":agent_courage_score_fading_out"),
		  (try_end),
        (try_end),
      (try_end),
      ]), #ozan

  # script_decide_run_away_or_not
  # Input: none
  # Output: none
  ("decide_run_away_or_not",
    [
      (store_script_param, ":cur_agent", 1),
      (store_script_param, ":mission_time", 2),

      (assign, ":force_retreat", 0),
      (agent_get_team, ":agent_team", ":cur_agent"),
      (agent_get_division, ":agent_division", ":cur_agent"),
      (try_begin),
        (lt, ":agent_division", 9), #static classes
        (team_get_movement_order, ":agent_movement_order", ":agent_team", ":agent_division"),
        (eq, ":agent_movement_order", mordr_retreat),
        (assign, ":force_retreat", 1),
      (try_end),

      (agent_get_slot, ":is_cur_agent_running_away", ":cur_agent", slot_agent_is_running_away),
      (try_begin),
        (eq, ":is_cur_agent_running_away", 0),
        (try_begin),
          (eq, ":force_retreat", 1),
          (agent_start_running_away, ":cur_agent"),
          (agent_set_slot, ":cur_agent",  slot_agent_is_running_away, 1),
        (else_try),
          (ge, ":mission_time", 45), #first 45 seconds anyone does not run away whatever happens.
          (agent_get_slot, ":agent_courage_score", ":cur_agent", slot_agent_courage_score),
		  (agent_get_slot, ":agent_courage_score_fading_out", ":cur_agent", slot_agent_courage_score_fading_out), #new
		  (val_add, ":agent_courage_score", ":agent_courage_score_fading_out"), #new
          (store_agent_hit_points, ":agent_hit_points", ":cur_agent"),
          (val_mul, ":agent_hit_points", 4),
          (try_begin),
            (agent_is_ally, ":cur_agent"),
            (val_sub, ":agent_hit_points", 100), #ally agents will be more tend to run away, to make game more funnier/harder
          (try_end),
          (val_mul, ":agent_hit_points", 10),
          (store_sub, ":start_running_away_courage_score_limit", 3500, ":agent_hit_points"), 
          (lt, ":agent_courage_score", ":start_running_away_courage_score_limit"), #if (courage score < 3500 - (agent hit points * 40)) and (agent is not running away) then start running away, average hit points : 50, average running away limit = 1500

          (agent_get_troop_id, ":troop_id", ":cur_agent"), #for now do not let heroes to run away from battle
          (neg|troop_is_hero, ":troop_id"),
                                
          (agent_start_running_away, ":cur_agent"),
          (agent_set_slot, ":cur_agent",  slot_agent_is_running_away, 1),
        (try_end),
      (else_try),
        (neq, ":force_retreat", 1),
        (agent_get_slot, ":agent_courage_score", ":cur_agent",  slot_agent_courage_score),
		(agent_get_slot, ":agent_courage_score_fading_out", ":cur_agent", slot_agent_courage_score_fading_out), #new
        (val_add, ":agent_courage_score", ":agent_courage_score_fading_out"), #new
        (store_agent_hit_points, ":agent_hit_points", ":cur_agent"),      
        (val_mul, ":agent_hit_points", 4),
        (try_begin),
          (agent_is_ally, ":cur_agent"),
          (val_sub, ":agent_hit_points", 100), #ally agents will be more tend to run away, to make game more funnier/harder
        (try_end),
        (val_mul, ":agent_hit_points", 10),
        (store_sub, ":stop_running_away_courage_score_limit", 3700, ":agent_hit_points"), 
        (ge, ":agent_courage_score", ":stop_running_away_courage_score_limit"), #if (courage score > 3700 - agent hit points) and (agent is running away) then stop running away, average hit points : 50, average running away limit = 1700
        (agent_stop_running_away, ":cur_agent"),
        (agent_set_slot, ":cur_agent",  slot_agent_is_running_away, 0),
      (try_end),      
  ]), #ozan

  # script_battle_tactic_apply
  # Input: none
  # Output: none
  ("battle_tactic_apply",
    [
      (call_script, "script_battle_tactic_apply_aux", "$ai_team_1", "$ai_team_1_battle_tactic"),
      (assign, "$ai_team_1_battle_tactic", reg0),
      (try_begin),
        (ge, "$ai_team_2", 0),
        (call_script, "script_battle_tactic_apply_aux", "$ai_team_2", "$ai_team_2_battle_tactic"),
        (assign, "$ai_team_2_battle_tactic", reg0),
      (try_end),
  ]),

  # script_battle_tactic_apply_aux
  # Input: team_no, battle_tactic
  # Output: battle_tactic
  ("battle_tactic_apply_aux",
    [
      (store_script_param, ":team_no", 1),
      (store_script_param, ":battle_tactic", 2),
      (store_mission_timer_a, ":mission_time"),
      (try_begin),
        (eq, ":battle_tactic", btactic_hold),
        (copy_position, pos1, pos52),
        (call_script, "script_get_closest3_distance_of_enemies_at_pos1", ":team_no", 1),
        (assign, ":avg_dist", reg0),
        (assign, ":min_dist", reg1),
        (try_begin),
          (this_or_next|lt, ":min_dist", 1000),
          (lt, ":avg_dist", 4000),
          (assign, ":battle_tactic", 0),
          (team_give_order, ":team_no", grc_everyone, mordr_charge),
		(else_try),
		  (try_begin),
			(eq, "$g_fire_at_my_command", 1),
			(assign, ":fire_now", 0),
			(team_give_order, ":team_no", grc_everyone, mordr_fire_at_my_command),
			
			# order fire if %60 of ranged agents are ready to attack
			(call_script, "script_team_get_attack_readying_ranged_agent_percentage", ":team_no", 0),
			(try_begin),
			  (ge, reg0, 60),
			  (assign, ":fire_now", 1),
			(try_end),
			
			# make sure to order fire at least one in every 30 seconds
			(assign, ":mission_time_temp", ":mission_time"),
			(val_sub, ":mission_time_temp", "$g_last_fire_now_order_time"),
			(try_begin),
			  (ge, ":mission_time_temp", 15),
			  (assign, ":fire_now", 1),
			(try_end),
			
			# execute fire order
			(try_begin),
			  (eq, ":fire_now", 1),
			  (team_give_order, ":team_no", grc_everyone, mordr_all_fire_now),
			  (assign, "$g_last_fire_now_order_time", ":mission_time"),
			(try_end),
			
		  (try_end),
        (try_end),
      (else_try),
        (eq, ":battle_tactic", btactic_follow_leader),
        (team_get_leader, ":ai_leader", ":team_no"),
        (try_begin),
		(ge, ":ai_leader", 0),
          (agent_is_alive, ":ai_leader"),
        (agent_set_speed_limit, ":ai_leader", 9),
        (call_script, "script_team_get_average_position_of_enemies", ":team_no"),
        (copy_position, pos60, pos0),
        (agent_get_position, pos61, ":ai_leader"),
        (position_transform_position_to_local, pos62, pos61, pos60), #pos62 = vector to enemy w.r.t leader
        (position_normalize_origin, ":distance_to_enemy", pos62),
        (convert_from_fixed_point, ":distance_to_enemy"),
        (assign, reg17, ":distance_to_enemy"),
        (position_get_x, ":dir_x", pos62),
        (position_get_y, ":dir_y", pos62),
        (val_mul, ":dir_x", 23),
        (val_mul, ":dir_y", 23), #move 23 meters
        (position_set_x, pos62, ":dir_x"),
        (position_set_y, pos62, ":dir_y"),
      
        (position_transform_position_to_parent, pos63, pos61, pos62), #pos63 is 23m away from leader in the direction of the enemy.
        (position_set_z_to_ground_level, pos63),
      
        (team_give_order, ":team_no", grc_everyone, mordr_hold),
        (team_set_order_position, ":team_no", grc_everyone, pos63),
        (agent_get_position, pos1, ":ai_leader"),
        (try_begin),
          (lt, ":distance_to_enemy", 50),
          (ge, ":mission_time", 30),
          (assign, ":battle_tactic", 0),
          (team_give_order, ":team_no", grc_everyone, mordr_charge),
          (agent_set_speed_limit, ":ai_leader", 60),
        (try_end),
        (else_try),
          (assign, ":battle_tactic", 0),
          (team_give_order, ":team_no", grc_everyone, mordr_charge),
        (try_end),
      (try_end),
      
      (try_begin), # charge everyone after a while
        (neq, ":battle_tactic", 0),
        (ge, ":mission_time", 300),
        (assign, ":battle_tactic", 0),
        (team_give_order, ":team_no", grc_everyone, mordr_charge),
        (team_get_leader, ":ai_leader", ":team_no"),
        (agent_set_speed_limit, ":ai_leader", 60),
      (try_end),
      (assign, reg0, ":battle_tactic"),
  ]),

  
##  # script_siege_defender_tactic_apply
##  # Input: none
##  # Output: none
##  ("siege_defender_tactic_apply",
##    [
##      (try_begin),
##        (eq, "$defender_team", 1),
##        (ge, "$belfry_positioned", 2),
##        
##        (assign, ":enemy_too_weak", 0),
##        (try_begin),
##          (ge, "$attacker_reinforcement_stage", 2),
##          (call_script, "script_calculate_team_strength", "$defender_team"),
##          (assign, ":defender_strength", reg0),
##          (call_script, "script_calculate_team_strength", "$attacker_team"),
##          (assign, ":attacker_strength", reg0),
##          (store_mul, ":attacker_strength_multiplied", ":attacker_strength", 2),
##          (ge, ":defender_strength", ":attacker_strength_multiplied"),
##          (assign, ":enemy_too_weak", 1),
##        (try_end),
##        
##        (try_begin),
##          (eq, ":enemy_too_weak", 1),
##          (neq, "$ai_battle_tactic", btactic_charge),
##          (assign, "$ai_battle_tactic", btactic_charge),
##          (team_give_order, "$defender_team", grc_infantry, mordr_charge),
##        (else_try),
##          (neq, "$ai_battle_tactic", btactic_charge),
##          (neq, "$ai_battle_tactic", btactic_hold),
##          (assign, "$ai_battle_tactic", btactic_hold),
##          (team_give_order, "$defender_team", grc_infantry, mordr_hold),
##          (team_give_order, "$defender_team", grc_heroes, mordr_hold),
##          (entry_point_get_position,pos1,10),
##          (team_set_order_position, "$defender_team", grc_infantry, pos1),
##          (team_set_order_position, "$defender_team", grc_heroes, pos1),
##        (try_end),
##      (try_end),
##  ]),


  # script_team_get_class_percentages
  # Input: arg1: team_no, arg2: try for team's enemies
  # Output: reg0: percentage infantry, reg1: percentage archers, reg2: percentage cavalry
  ("team_get_class_percentages",
    [
      (assign, ":num_infantry", 0),
      (assign, ":num_archers", 0),
      (assign, ":num_cavalry", 0),
      (assign, ":num_total", 0),
      (store_script_param, ":team_no", 1),
      (store_script_param, ":negate", 2),
      (try_for_agents,":cur_agent"),
        (agent_is_alive, ":cur_agent"),
        (agent_is_human, ":cur_agent"),
        (agent_get_team, ":agent_team", ":cur_agent"),
        (assign, ":continue", 0),
        (try_begin),
          (eq, ":negate", 1),
          (teams_are_enemies, ":agent_team", ":team_no"),
          (assign, ":continue", 1),
        (else_try),
          (eq, ":agent_team", ":team_no"),
          (assign, ":continue", 1),
        (try_end),
        (eq, ":continue", 1),
        (val_add, ":num_total", 1),
        (agent_get_class, ":agent_class", ":cur_agent"),
        (try_begin),
          (eq, ":agent_class", grc_infantry),
          (val_add,  ":num_infantry", 1),
        (else_try),
          (eq, ":agent_class", grc_archers),
          (val_add,  ":num_archers", 1),
        (else_try),
          (eq, ":agent_class", grc_cavalry),
          (val_add,  ":num_cavalry", 1),
        (try_end),
      (try_end),
      (try_begin),
        (eq,  ":num_total", 0),
        (assign,  ":num_total", 1),
      (try_end),
      (store_mul, ":perc_infantry",":num_infantry",100),
      (val_div, ":perc_infantry",":num_total"),
      (store_mul, ":perc_archers",":num_archers",100),
      (val_div, ":perc_archers",":num_total"),
      (store_mul, ":perc_cavalry",":num_cavalry",100),
      (val_div, ":perc_cavalry",":num_total"),
      (assign, reg0, ":perc_infantry"),
      (assign, reg1, ":perc_archers"),
      (assign, reg2, ":perc_cavalry"),
  ]),
  
  # script_get_closest3_distance_of_enemies_at_pos1
  # Input: arg1: team_no, pos1
  # Output: reg0: distance in cms.
  ("get_closest3_distance_of_enemies_at_pos1",
    [
      (assign, ":min_distance_1", 100000),
      (assign, ":min_distance_2", 100000),
      (assign, ":min_distance_3", 100000),
      
      (store_script_param, ":team_no", 1),
      (try_for_agents,":cur_agent"),
        (agent_is_alive, ":cur_agent"),
        (agent_is_human, ":cur_agent"),
        (agent_get_team, ":agent_team", ":cur_agent"),
        (teams_are_enemies, ":agent_team", ":team_no"),
       
        (agent_get_position, pos2, ":cur_agent"),
        (get_distance_between_positions,":cur_dist",pos2,pos1),
        (try_begin),
          (lt, ":cur_dist", ":min_distance_1"),
          (assign, ":min_distance_3", ":min_distance_2"),
          (assign, ":min_distance_2", ":min_distance_1"),
          (assign, ":min_distance_1", ":cur_dist"),
        (else_try),
          (lt, ":cur_dist", ":min_distance_2"),
          (assign, ":min_distance_3", ":min_distance_2"),
          (assign, ":min_distance_2", ":cur_dist"),
        (else_try),
          (lt, ":cur_dist", ":min_distance_3"),
          (assign, ":min_distance_3", ":cur_dist"),
        (try_end),
      (try_end),
      
      (assign, ":total_distance", 0),
      (assign, ":total_count", 0),
      (try_begin),
        (lt, ":min_distance_1", 100000),
        (val_add, ":total_distance", ":min_distance_1"),
        (val_add, ":total_count", 1),
      (try_end),
      (try_begin),
        (lt, ":min_distance_2", 100000),
        (val_add, ":total_distance", ":min_distance_2"),
        (val_add, ":total_count", 1),
      (try_end),
      (try_begin),
        (lt, ":min_distance_3", 100000),
        (val_add, ":total_distance", ":min_distance_3"),
        (val_add, ":total_count", 1),
      (try_end),
      (assign, ":average_distance", 100000),
      (try_begin),
        (gt, ":total_count", 0),
        (store_div, ":average_distance", ":total_distance", ":total_count"),
      (try_end),
      (assign, reg0, ":average_distance"),
      (assign, reg1, ":min_distance_1"),
      (assign, reg2, ":min_distance_2"),
      (assign, reg3, ":min_distance_3"),
  ]),

  # script_team_get_average_position_of_enemies
  # Input: arg1: team_no, 
  # Output: pos0: average position.
  ("team_get_average_position_of_enemies",
    [
      (store_script_param_1, ":team_no"),
      (init_position, pos0),
      (assign, ":num_enemies", 0),
      (assign, ":accum_x", 0),
      (assign, ":accum_y", 0),
      (assign, ":accum_z", 0),
      (try_for_agents,":enemy_agent"),
        (agent_is_alive, ":enemy_agent"),
        (agent_is_human, ":enemy_agent"),
        (agent_get_team, ":enemy_team", ":enemy_agent"),
        (teams_are_enemies, ":team_no", ":enemy_team"),
      
        (agent_get_position, pos62, ":enemy_agent"),
      
        (position_get_x, ":x", pos62),
        (position_get_y, ":y", pos62),
        (position_get_z, ":z", pos62),
      
        (val_add, ":accum_x", ":x"),
        (val_add, ":accum_y", ":y"),
        (val_add, ":accum_z", ":z"),
        (val_add, ":num_enemies", 1),
      (try_end),
      
      (try_begin), #to avoid division by zeros at below division part.
        (le, ":num_enemies", 0),
        (assign, ":num_enemies", 1),
      (try_end),
      
      (store_div, ":average_x", ":accum_x", ":num_enemies"),
      (store_div, ":average_y", ":accum_y", ":num_enemies"),
      (store_div, ":average_z", ":accum_z", ":num_enemies"),

      (position_set_x, pos0, ":average_x"),
      (position_set_y, pos0, ":average_y"),
      (position_set_z, pos0, ":average_z"),
      
      (assign, reg0, ":num_enemies"),
  ]),
  
  
  # script_search_troop_prisoner_of_party
  # Input: arg1 = troop_no
  # Output: reg0 = party_no (-1 if troop is not a prisoner.)
  ("search_troop_prisoner_of_party",
    [
      (store_script_param_1, ":troop_no"),
      (assign, ":prisoner_of", -1),
      (try_for_parties, ":party_no"),
        (eq,  ":prisoner_of", -1),
        (this_or_next|eq, ":party_no", "p_main_party"),
        (ge, ":party_no", centers_begin),
        (party_count_prisoners_of_type, ":troop_found", ":party_no", ":troop_no"),
        (gt, ":troop_found", 0),
        (assign, ":prisoner_of", ":party_no"),
      (try_end),
      (assign, reg0, ":prisoner_of"),
  ]),
  
  
##  # script_clear_last_quest
##  # Input: arg1 = troop_no
##  # Output: none
##  ("clear_last_quest",
##    [
##      (store_script_param_1, ":troop_no"),
##      
##      (troop_set_slot, ":troop_no",slot_troop_last_quest, 0),
##      (troop_set_slot, ":troop_no",slot_troop_last_quest_betrayed, 0)
##  ]),
  
  
  
  # script_change_debt_to_troop
  # Input: arg1 = troop_no, arg2 = new debt amount
  # Output: none
  ("change_debt_to_troop",
    [
      (store_script_param_1, ":troop_no"),
      (store_script_param_2, ":new_debt"),
      
      (troop_get_slot, ":cur_debt", ":troop_no", slot_troop_player_debt),
      (assign, reg1, ":cur_debt"),
      (val_add, ":cur_debt", ":new_debt"),
      (assign, reg2, ":cur_debt"),
      (troop_set_slot, ":troop_no", slot_troop_player_debt, ":cur_debt"),
      (str_store_troop_name_link, s1, ":troop_no"),
      (display_message, "@You now owe {reg2} denars to {s1}."),
  ]),
  
  
  
  
  # script_abort_quest
  # Input: arg1 = quest_no, arg2 = apply relation penalty
  # Output: none
  ("abort_quest",
    [
      (store_script_param_1, ":quest_no"),
      (store_script_param_2, ":abort_type"), #0=aborted by event, 1=abort by talking 2=abort by expire

      (assign, ":quest_return_penalty", -1),
      (assign, ":quest_expire_penalty", -2),
      
#      (quest_get_slot, ":quest_object_troop", ":quest_no", slot_quest_object_troop),
      (try_begin),
        (this_or_next|eq, ":quest_no", "qst_deliver_message"),
        (eq, ":quest_no", "qst_deliver_message_to_enemy_lord"),
        (assign, ":quest_return_penalty", -2),
        (assign, ":quest_expire_penalty", -3),
      (else_try),
        (eq, ":quest_no", "qst_kidnapped_girl"),
        (party_remove_members, "p_main_party", "trp_kidnapped_girl", 1),
        (quest_get_slot, ":quest_target_party", "qst_kidnapped_girl", slot_quest_target_party),
        (try_begin),
          (party_is_active, ":quest_target_party"),
          (remove_party, ":quest_target_party"),
        (try_end),
      (else_try),
        (eq, ":quest_no", "qst_escort_lady"),
        (quest_get_slot, ":quest_object_troop", "qst_escort_lady", slot_quest_object_troop),
        (party_remove_members, "p_main_party", ":quest_object_troop", 1),
        (assign, ":quest_return_penalty", -2),
        (assign, ":quest_expire_penalty", -3),
##      (else_try),
##        (eq, ":quest_no", "qst_rescue_lady_under_siege"),
##        (party_remove_members, "p_main_party", ":quest_object_troop", 1),
##      (else_try),
##        (eq, ":quest_no", "qst_deliver_message_to_lover"),
##      (else_try),
##        (eq, ":quest_no", "qst_bring_prisoners_to_enemy"),
##        (try_begin),
##          (check_quest_succeeded, ":quest_no"),
##          (quest_get_slot, ":quest_target_amount", ":quest_no", slot_quest_target_amount),
##          (quest_get_slot, ":quest_object_troop", ":quest_no", slot_quest_object_troop),
##          (quest_get_slot, ":quest_giver_troop", ":quest_no", slot_quest_giver_troop),
##          (call_script, "script_game_get_join_cost", ":quest_object_troop"),
##          (assign, ":reward", reg0),
##          (val_mul, ":reward", ":quest_target_amount"),
##          (val_div, ":reward", 2),
##        (else_try),
##          (quest_get_slot, ":reward", ":quest_no", slot_quest_target_amount),
##        (try_end),
##        (call_script, "script_change_debt_to_troop", ":quest_giver_troop", ":reward"),
##      (else_try),
##        (eq, ":quest_no", "qst_bring_reinforcements_to_siege"),
##        (quest_get_slot, ":quest_target_amount", ":quest_no", slot_quest_target_amount),
##        (quest_get_slot, ":quest_object_troop", ":quest_no", slot_quest_object_troop),
##        (quest_get_slot, ":quest_giver_troop", ":quest_no", slot_quest_giver_troop),
##        (call_script, "script_game_get_join_cost", ":quest_object_troop"),
##        (assign, ":reward", reg0),
##        (val_mul, ":reward", ":quest_target_amount"),
##        (val_mul, ":reward", 2),
##        (call_script, "script_change_debt_to_troop", ":quest_giver_troop", ":reward"),
##      (else_try),
##        (eq, ":quest_no", "qst_deliver_supply_to_center_under_siege"),
##        (quest_get_slot, ":quest_target_amount", ":quest_no", slot_quest_target_amount),
##        (quest_get_slot, ":quest_giver_troop", ":quest_no", slot_quest_giver_troop),
##        (store_item_value, ":reward", "itm_siege_supply"),
##        (val_mul, ":reward", ":quest_target_amount"),
##        (call_script, "script_change_debt_to_troop", ":quest_giver_troop", ":reward"),
      (else_try),
        (eq, ":quest_no", "qst_raise_troops"),
        (quest_get_slot, ":quest_giver_troop", ":quest_no", slot_quest_giver_troop),
        (call_script, "script_change_debt_to_troop", ":quest_giver_troop", 100),
        (assign, ":quest_return_penalty", -4),
        (assign, ":quest_expire_penalty", -5),
      (else_try),
        (eq, ":quest_no", "qst_deal_with_looters"),
        (try_for_parties, ":cur_party_no"),
          (party_get_template_id, ":cur_party_template", ":cur_party_no"),
          (eq, ":cur_party_template", "pt_looters"),
          (party_set_flags, ":cur_party_no", pf_quest_party, 0),
        (try_end),
        (assign, ":quest_return_penalty", -4),
        (assign, ":quest_expire_penalty", -5),
      (else_try),
        (eq, ":quest_no", "qst_deal_with_bandits_at_lords_village"),
        (quest_get_slot, ":quest_giver_troop", ":quest_no", slot_quest_giver_troop),
        (call_script, "script_change_debt_to_troop", ":quest_giver_troop", 200),
        (assign, ":quest_return_penalty", -5),
        (assign, ":quest_expire_penalty", -6),
      (else_try),
        (eq, ":quest_no", "qst_collect_taxes"),
        (quest_get_slot, ":gold_reward", ":quest_no", slot_quest_gold_reward),
        (quest_set_slot, ":quest_no", slot_quest_gold_reward, 0),
        (quest_get_slot, ":quest_giver_troop", ":quest_no", slot_quest_giver_troop),
        (call_script, "script_change_debt_to_troop", ":quest_giver_troop", ":gold_reward"),
        (assign, ":quest_return_penalty", -4),
        (assign, ":quest_expire_penalty", -6),
##      (else_try),
##        (eq, ":quest_no", "qst_capture_messenger"),
##      (else_try),
##        (eq, ":quest_no", "qst_bring_back_deserters"),
      (else_try),
        (eq, ":quest_no", "qst_hunt_down_fugitive"),
        (assign, ":quest_return_penalty", -3),
        (assign, ":quest_expire_penalty", -4),
      (else_try),
        (eq, ":quest_no", "qst_kill_local_merchant"),
      (else_try),
        (eq, ":quest_no", "qst_bring_back_runaway_serfs"),
        (assign, ":quest_return_penalty", -1),
        (assign, ":quest_expire_penalty", -1),
      (else_try),
        (eq, ":quest_no", "qst_lend_companion"),
      (else_try),
        (eq, ":quest_no", "qst_collect_debt"),
        (try_begin),
          (quest_slot_eq, "qst_collect_debt", slot_quest_current_state, 1), #debt collected but not delivered
          (quest_get_slot, ":debt", "qst_collect_debt", slot_quest_target_amount),
          (quest_get_slot, ":quest_giver", "qst_collect_debt", slot_quest_giver_troop),
          (call_script, "script_change_debt_to_troop", ":quest_giver", ":debt"),
          (assign, ":quest_return_penalty", -3),
          (assign, ":quest_expire_penalty", -6),
        (else_try),
          (assign, ":quest_return_penalty", -3),
          (assign, ":quest_expire_penalty", -4),
        (try_end),
      (else_try),
        (eq, ":quest_no", "qst_deal_with_bandits_at_lords_village"),
        (assign, ":quest_return_penalty", -6),
        (assign, ":quest_expire_penalty", -6),
      (else_try),
        (eq, ":quest_no", "qst_raid_caravan_to_start_war"),
        (assign, ":quest_return_penalty", -10),
        (assign, ":quest_expire_penalty", -13),
      (else_try),
        (eq, ":quest_no", "qst_persuade_lords_to_make_peace"),
        (assign, ":quest_return_penalty", -10),
        (assign, ":quest_expire_penalty", -13),
      (else_try),
        (eq, ":quest_no", "qst_deal_with_night_bandits"),
        (assign, ":quest_return_penalty", -1),
        (assign, ":quest_expire_penalty", -1),
      
      (else_try),
        (eq, ":quest_no", "qst_follow_spy"),
        (assign, ":quest_return_penalty", -2),
        (assign, ":quest_expire_penalty", -3),
        (try_begin),
          (party_is_active, "$qst_follow_spy_spy_party"),
          (remove_party, "$qst_follow_spy_spy_party"),
        (try_end),
        (try_begin),
          (party_is_active, "$qst_follow_spy_spy_partners_party"),
          (remove_party, "$qst_follow_spy_spy_partners_party"),
        (try_end),
      (else_try),
        (eq, ":quest_no", "qst_capture_enemy_hero"),
        (assign, ":quest_return_penalty", -3),
        (assign, ":quest_expire_penalty", -4),
##      (else_try),
##        (eq, ":quest_no", "qst_lend_companion"),
##        (quest_get_slot, ":quest_target_troop", "qst_lend_companion", slot_quest_target_troop),
##        (party_add_members, "p_main_party", ":quest_target_troop", 1),
##      (else_try),
##        (eq, ":quest_no", "qst_capture_conspirators"),
##      (else_try),
##        (eq, ":quest_no", "qst_defend_nobles_against_peasants"),
      (else_try),
        (eq, ":quest_no", "qst_incriminate_loyal_commander"),
        (assign, ":quest_return_penalty", -5),
        (assign, ":quest_expire_penalty", -6),
##      (else_try),
##        (eq, ":quest_no", "qst_hunt_down_raiders"),
##      (else_try),
##        (eq, ":quest_no", "qst_capture_prisoners"),
##        #Enemy lord quests
      (else_try),
        (eq, ":quest_no", "qst_lend_surgeon"),

        #Kingdom lady quests
      (else_try),
        (eq, ":quest_no", "qst_rescue_lord_by_replace"),
        (assign, ":quest_return_penalty", -1),
        (assign, ":quest_expire_penalty", -1),
      (else_try),
        (eq, ":quest_no", "qst_deliver_message_to_prisoner_lord"),
        (assign, ":quest_return_penalty", 0),
        (assign, ":quest_expire_penalty", -1),
      (else_try),
        (eq, ":quest_no", "qst_duel_for_lady"),
        (assign, ":quest_return_penalty", -1),
        (assign, ":quest_expire_penalty", -1),
      
      #Kingdom Army quests
      (else_try),
        (eq, ":quest_no", "qst_follow_army"),
        (assign, ":quest_return_penalty", 0), #was -4 
        (assign, ":quest_expire_penalty", 0), #was -5
      (else_try),
        (eq, ":quest_no", "qst_deliver_cattle_to_army"),
        (assign, ":quest_return_penalty", 0),
        (assign, ":quest_expire_penalty", 0),
      (else_try),
        (eq, ":quest_no", "qst_join_siege_with_army"),
        (assign, ":quest_return_penalty", -1),
        (assign, ":quest_expire_penalty", -2),
      (else_try),
        (eq, ":quest_no", "qst_scout_waypoints"),
        (assign, ":quest_return_penalty", 0),
        (assign, ":quest_expire_penalty", 0),
      
      #Village Elder quests
      (else_try),
        (eq, ":quest_no", "qst_deliver_grain"),
        (assign, ":quest_return_penalty", -6),
        (assign, ":quest_expire_penalty", -7),
      (else_try),
        (eq, ":quest_no", "qst_deliver_cattle"),
        (assign, ":quest_return_penalty", -3),
        (assign, ":quest_expire_penalty", -4),
      (else_try),
        (eq, ":quest_no", "qst_train_peasants_against_bandits"),
        (assign, ":quest_return_penalty", -4),
        (assign, ":quest_expire_penalty", -5),

      #Mayor quests
      (else_try),
        (eq, ":quest_no", "qst_deliver_wine"),
        (assign, ":quest_return_penalty", -1),
        (assign, ":quest_expire_penalty", -3),
        (val_add, "$debt_to_merchants_guild", "$qst_deliver_wine_debt"),
      (else_try),
        (eq, ":quest_no", "qst_move_cattle_herd"),
        (assign, ":quest_return_penalty", -1),
        (assign, ":quest_expire_penalty", -3),
      (else_try),
        (eq, ":quest_no", "qst_escort_merchant_caravan"),
        (assign, ":quest_return_penalty", -1),
        (assign, ":quest_expire_penalty", -3),
      (else_try),
        (eq, ":quest_no", "qst_troublesome_bandits"),
        (assign, ":quest_return_penalty", -1),
        (assign, ":quest_expire_penalty", -2),
      #Other quests
      (else_try),
        (eq, ":quest_no", "qst_join_faction"),
        (assign, ":quest_return_penalty", -3),
        (assign, ":quest_expire_penalty", -3),
        (try_begin),
          (call_script, "script_get_number_of_hero_centers", "trp_player"),
          (gt, reg0, 0),
          (call_script, "script_change_player_relation_with_faction", "$g_invite_faction", -10),
        (try_end),
        (assign, "$g_invite_faction", 0),
        (assign, "$g_invite_faction_lord", 0),
        (assign, "$g_invite_offered_center", 0),
      (else_try),
        (eq, ":quest_no", "qst_eliminate_bandits_infesting_village"),
        (assign, ":quest_return_penalty", -3),
        (assign, ":quest_expire_penalty", -3),
	  (try_end),
      (try_begin),
        (gt, ":abort_type", 0),
        (quest_get_slot, ":quest_giver", ":quest_no", slot_quest_giver_troop),
        (assign, ":relation_penalty", ":quest_return_penalty"),
        (try_begin),
          (eq, ":abort_type", 2),
          (assign, ":relation_penalty", ":quest_expire_penalty"),
        (try_end),
        (try_begin),
          (this_or_next|is_between, ":quest_giver", village_elders_begin, village_elders_end),
          (is_between, ":quest_giver", mayors_begin, mayors_end),
          (quest_get_slot, ":quest_giver_center", ":quest_no", slot_quest_giver_center),
          (call_script, "script_change_player_relation_with_center", ":quest_giver_center", ":relation_penalty"),
        (else_try),
          (call_script, "script_change_player_relation_with_troop", ":quest_giver", ":relation_penalty"),
        (try_end),
      (try_end),
      (fail_quest, ":quest_no"),

#NPC companion changes begin
      (try_begin),
        (gt, ":abort_type", 0),
        (call_script, "script_objectionable_action", tmt_honest, "str_fail_quest"),
      (try_end),
#NPC companion changes end
      (call_script, "script_end_quest", ":quest_no"),
  ]),
  
  
##  # script_event_center_captured
##  # Input: arg1 = center_no, arg2 = old_faction_no
##  # Output: none
##  ("event_center_captured",
##    [
##      #      (store_script_param_1, ":center_no"),
##      #       (store_script_param_2, ":old_faction_no"),
##      #       (store_faction_of_party, ":faction_no"),
##      
##      (try_begin),
##        (check_quest_active, "qst_deliver_message"),
##      (try_end),
##      (try_begin),
##        (check_quest_active, "qst_escort_lady"),
##        (quest_slot_eq, "qst_escort_lady", slot_quest_target_center, ":center_no"),
##        (call_script, "script_abort_quest", "qst_escort_lady"),
##      (try_end),
##      (try_begin),
##        (check_quest_active, "qst_rescue_lady_under_siege"),
##        (quest_slot_eq, "qst_rescue_lady_under_siege", slot_quest_target_center, ":center_no"),
##        (quest_slot_eq, "qst_rescue_lady_under_siege", slot_quest_current_state, 0),
##        (call_script, "script_abort_quest", "qst_rescue_lady_under_siege", 1),
##      (try_end),
##      (try_begin),
##        (check_quest_active, "qst_deliver_message_to_lover"),
##      (try_end),
##      (try_begin),
##        (check_quest_active, "qst_deliver_message_to_enemy_lord"),
##      (try_end),
##      (try_begin),
##        (check_quest_active, "qst_bring_prisoners_to_enemy"),
##        (quest_slot_eq, "qst_bring_prisoners_to_enemy", slot_quest_target_center, ":center_no"),
##        (neg|check_quest_succeeded, "qst_bring_prisoners_to_enemy"),
##        (call_script, "script_abort_quest", "qst_bring_prisoners_to_enemy"),
##      (try_end),
##      (try_begin),
##        (check_quest_active, "qst_bring_reinforcements_to_siege"),
##      (try_end),
##      (try_begin),
##        (check_quest_active, "qst_deliver_supply_to_center_under_siege"),
##        (quest_slot_eq, "qst_deliver_supply_to_center_under_siege", slot_quest_target_center, ":center_no"),
##        (call_script, "script_abort_quest", "qst_deliver_supply_to_center_under_siege", 1),
##      (try_end),
##      (try_begin),
##        (check_quest_active, "qst_raise_troops"),
##      (try_end),
##      (try_begin),
##        (check_quest_active, "qst_capture_messenger"),
##      (try_end),
##      (try_begin),
##        (check_quest_active, "qst_bring_back_deserters"),
##      (try_end),
##      (try_begin),
##        (check_quest_active, "qst_kill_local_merchant"),
##      (try_end),
##      (try_begin),
##        (check_quest_active, "qst_bring_back_runaway_serfs"),
##        (quest_slot_eq, "qst_bring_back_runaway_serfs", slot_quest_object_center, ":center_no"),
##        (neg|check_quest_succeeded, "qst_bring_back_runaway_serfs"),
##        (neg|check_quest_failed, "qst_bring_back_runaway_serfs"),
##        (call_script, "script_abort_quest", "qst_bring_back_runaway_serfs"),
##      (try_end),
##      (try_begin),
##        (check_quest_active, "qst_follow_spy"),
##      (try_end),
##      (try_begin),
##        (check_quest_active, "qst_capture_enemy_hero"),
##      (try_end),
##      (try_begin),
##        (check_quest_active, "qst_lend_companion"),
##      (try_end),
##      (try_begin),
##        (check_quest_active, "qst_capture_conspirators"),
##      (try_end),
##      (try_begin),
##        (check_quest_active, "qst_defend_nobles_against_peasants"),
##      (try_end),
##      (try_begin),
##        (check_quest_active, "qst_incriminate_loyal_commander"),
##      (try_end),
##      (try_begin),
##        (check_quest_active, "qst_hunt_down_raiders"),
##      (try_end),
##      (try_begin),
##        (check_quest_active, "qst_capture_prisoners"),
##      (try_end),
##      #Enemy lord quests
##      (try_begin),
##        (check_quest_active, "qst_lend_surgeon"),
##      (try_end),
##      #Kingdom lady quests
##      (try_begin),
##        (check_quest_active, "qst_rescue_lord_by_replace"),
##        (quest_get_slot, ":quest_target_troop", "qst_rescue_lord_by_replace", slot_quest_target_troop),
##        (troop_slot_eq, ":quest_target_troop", slot_troop_is_prisoner, 0),
##        (neg|check_quest_succeeded, "qst_rescue_lord_by_replace"),
##        (call_script, "script_abort_quest", "qst_rescue_lord_by_replace"),
##      (try_end),
##      (try_begin),
##        (check_quest_active, "qst_deliver_message_to_prisoner_lord"),
##      (try_end),
##      (try_begin),
##        (check_quest_active, "qst_duel_for_lady"),
##      (try_end),
##  ]),

  # script_cf_is_quest_troop
  # Input: arg1 = troop_no
  # Output: none (can fail)
  ("cf_is_quest_troop",
    [
      (store_script_param_1, ":troop_no"),
      (assign, ":is_quest_troop", 0),
      (try_for_range, ":cur_quest", all_quests_begin, all_quests_end),
        (check_quest_active, ":cur_quest"),
        (quest_get_slot, ":quest_troop_1", ":cur_quest", slot_quest_target_troop),
        (quest_get_slot, ":quest_troop_2", ":cur_quest", slot_quest_object_troop),
        (quest_get_slot, ":quest_troop_3", ":cur_quest", slot_quest_giver_troop),
        (this_or_next|eq, ":quest_troop_1", ":troop_no"),
        (this_or_next|eq, ":quest_troop_2", ":troop_no"),
        (eq, ":quest_troop_3", ":troop_no"),
        (assign, ":is_quest_troop", 1),
      (try_end),
      (eq, ":is_quest_troop", 1),
  ]),

  
##  # script_calculate_team_strength
##  # Input: arg1 = team_no
##  # Output: strength
##  ("calculate_team_strength",
##    [
##      (store_script_param_1, ":team_no"),
##      (assign, ":total_strength", 0),
##      (try_for_agents, ":cur_agent"),
##        (agent_get_team, ":agent_team", ":cur_agent"),
##        (eq, ":team_no", ":agent_team"),
##        (agent_is_human, ":cur_agent"),
##        (agent_is_alive, ":cur_agent"),
##        
##        (agent_get_troop_id, ":cur_troop", ":cur_agent"),
##        (store_character_level, ":cur_level", ":cur_troop"),
##        (val_add, ":cur_level", 5),
##        (try_begin),
##          (troop_is_hero, ":cur_troop"),
##          (val_add, ":cur_level", 5),
##        (try_end),
##        (val_add, ":total_strength", ":cur_level"),
##      (try_end),
##      (assign, reg0, ":total_strength"),
##  ]),

  # script_check_friendly_kills
  # Input: none
  # Output: none (changes the morale of the player's party)
  ("check_friendly_kills",
    [(get_player_agent_own_troop_kill_count, ":count"),
     (try_begin),
       (neq, "$g_player_current_own_troop_kills", ":count"),
       (val_sub, ":count", "$g_player_current_own_troop_kills"),
       (val_add, "$g_player_current_own_troop_kills", ":count"),
       (val_mul, ":count", -1),
       (call_script, "script_change_player_party_morale", ":count"),
     (try_end),
   ]),

  # script_simulate_retreat
  # Input: arg1 = players_side_damage, arg2 = enemy_side_damage, arg3 = continue_battle s5 = title_string
  # Output: none
  ("simulate_retreat",
    [
      (call_script, "script_music_set_situation_with_culture", mtf_sit_killed),
      (set_show_messages, 0),
      (store_script_param, ":players_side_damage", 1),
      (store_script_param, ":enemy_side_damage", 2),
      (store_script_param, ":continue_battle", 3),

      (assign, ":players_side_strength", 0),
      (assign, ":enemy_side_strength", 0),
      
      (assign, ":do_calculate", 1),
      (try_begin),
        (try_for_agents, ":cur_agent"),
          (agent_is_human, ":cur_agent"),
          (agent_is_alive, ":cur_agent"),
          (agent_set_slot, ":cur_agent", slot_agent_is_alive_before_retreat, 1),#needed for simulation

          (agent_get_troop_id, ":cur_troop", ":cur_agent"),
          (store_character_level, ":cur_level", ":cur_troop"),
          (val_add, ":cur_level", 5),
          (try_begin),
            (troop_is_hero, ":cur_troop"),
            (val_add, ":cur_level", 5),
          (try_end),
          (try_begin),
            (agent_is_ally, ":cur_agent"),
            (val_add, ":players_side_strength", ":cur_level"),
          (else_try),
            (val_add, ":enemy_side_strength", ":cur_level"),
          (try_end),
        (try_end),
        (eq, "$pin_player_fallen", 0),
        (lt, ":enemy_side_strength", ":players_side_strength"),
        (eq, ":continue_battle", 1),
        (assign, ":do_calculate", 0),
      (try_end),
      
      (try_begin),
        (eq, ":do_calculate", 1),
        
        (assign, "$g_last_mission_player_damage", 0),
        (party_clear, "p_temp_party"),
        (party_clear, "p_temp_party_2"),
        (call_script, "script_simulate_battle_with_agents_aux", 0, ":players_side_damage"),
        (call_script, "script_simulate_battle_with_agents_aux", 1, ":enemy_side_damage"),
        
        (assign, ":display_casualties", 0),
        
        (try_begin),
          (gt, "$g_last_mission_player_damage", 0),
          (assign, ":display_casualties", 1),
          (assign, reg1, "$g_last_mission_player_damage"),
          (str_store_string, s12, "str_casualty_display_hp"),
        (else_try),
          (str_clear, s12),
        (try_end),
        
        (call_script, "script_print_casualties_to_s0", "p_temp_party", 1),
        (try_begin),
          (party_get_num_companion_stacks, ":num_stacks", "p_temp_party"),
          (gt, ":num_stacks", 0),
          (assign, ":display_casualties", 1),
        (try_end),
        (str_store_string_reg, s10, s0),
        
        (call_script, "script_print_casualties_to_s0", "p_temp_party_2", 1),
        (try_begin),
          (party_get_num_companion_stacks, ":num_stacks", "p_temp_party_2"),
          (gt, ":num_stacks", 0),
          (assign, ":display_casualties", 1),
        (try_end),
        (str_store_string_reg, s11, s0),
        (try_begin),
          (eq, ":display_casualties", 1),
          (dialog_box,"str_casualty_display", s5),
        (try_end),
      (try_end),
      (set_show_messages, 1),

      #Calculating morale penalty (can be between 0-30)
      (assign, ":ally_casualties", 0),
      (assign, ":enemy_casualties", 0),
      (assign, ":total_allies", 0),
      
      (try_for_agents, ":cur_agent"),
        (agent_is_human, ":cur_agent"),
        (try_begin),
          (agent_is_ally, ":cur_agent"),
          (val_add, ":total_allies", 1),
          (try_begin),
            (neg|agent_is_alive, ":cur_agent"),
            (val_add, ":ally_casualties", 1),
          (try_end),
        (else_try),
          (neg|agent_is_alive, ":cur_agent"),
          (val_add, ":enemy_casualties", 1),
        (try_end),
      (try_end),
      (store_add, ":total_casualties", ":ally_casualties", ":enemy_casualties"),
      (try_begin),
        (gt, ":total_casualties", 0),
        (store_mul, ":morale_adder", ":ally_casualties", 100),
        (val_div, ":morale_adder", ":total_casualties"),
        (val_mul, ":morale_adder", ":ally_casualties"),
        (val_div, ":morale_adder", ":total_allies"),
        (val_mul, ":morale_adder", -30),
        (val_div, ":morale_adder", 100),
        (call_script, "script_change_player_party_morale", ":morale_adder"),
      (try_end),
  ]),

  
  
  # script_simulate_battle_with_agents_aux
  # For internal use only
  # Input: arg1 = attacker_side (0 = ally, 1 = enemy), arg2 = damage amount
  # Output: none
  ("simulate_battle_with_agents_aux",
    [
      (store_script_param_1, ":attacker_side"),
      (store_script_param_2, ":damage"),
      
      (get_player_agent_no, ":player_agent"),
      (try_for_agents, ":cur_agent"),
        (neq, ":player_agent", ":cur_agent"),
        (agent_is_human, ":cur_agent"),
        #do not check agent_is_alive, check slot_agent_is_alive_before_retreat instead, so that dead agents can still hit enemies
        (agent_slot_eq, ":cur_agent", slot_agent_is_alive_before_retreat, 1),
        (try_begin),
          (agent_is_ally, ":cur_agent"),
          (assign, ":cur_agents_side", 0),
        (else_try),
          (assign, ":cur_agents_side", 1),
        (try_end),
        (eq, ":cur_agents_side", ":attacker_side"),
        (agent_get_position, pos2, ":cur_agent"),
        (assign, ":closest_agent", -1),
        (assign, ":min_distance", 100000),
        (try_for_agents, ":cur_agent_2"),
          (agent_is_human, ":cur_agent_2"),
          (agent_is_alive, ":cur_agent_2"),
          (try_begin),
            (agent_is_ally, ":cur_agent_2"),
            (assign, ":cur_agents_side_2", 0),
          (else_try),
            (assign, ":cur_agents_side_2", 1),
          (try_end),
          (this_or_next|neq, ":cur_agent_2", ":player_agent"),
          (eq, "$pin_player_fallen", 0),
          (neq, ":attacker_side", ":cur_agents_side_2"),
          (agent_get_position, pos3, ":cur_agent_2"),
          (get_distance_between_positions, ":cur_distance", pos2, pos3),
          (lt, ":cur_distance", ":min_distance"),
          (assign, ":min_distance", ":cur_distance"),
          (assign, ":closest_agent", ":cur_agent_2"),
        (try_end),
        (ge, ":closest_agent", 0),
        #Fight
        (agent_get_class, ":agent_class", ":cur_agent"), 
        (assign, ":agents_speed", 1),
        (assign, ":agents_additional_hit", 0),
        (try_begin),
          (eq, ":agent_class", grc_archers),
          (assign, ":agents_additional_hit", 2),
        (else_try),
          (eq, ":agent_class", grc_cavalry),
          (assign, ":agents_speed", 2),
        (try_end),
        (agent_get_class, ":agent_class", ":closest_agent"),
        (assign, ":agents_speed_2", 1),
        (try_begin),
          (eq, ":agent_class", grc_cavalry),
          (assign, ":agents_speed_2", 2),
        (try_end),
        (assign, ":agents_hit", 18000),
        (val_add, ":min_distance", 3000),
        (val_div, ":agents_hit", ":min_distance"),
        (val_mul, ":agents_hit", 2),# max 10, min 2 hits within 150 meters
        
        (val_mul, ":agents_hit", ":agents_speed"),
        (val_div, ":agents_hit", ":agents_speed_2"),
        (val_add, ":agents_hit", ":agents_additional_hit"),
        
        (assign, ":cur_damage", ":damage"),
        (agent_get_troop_id, ":closest_troop", ":closest_agent"),
        (agent_get_troop_id, ":cur_troop", ":cur_agent"),
        (store_character_level, ":closest_level", ":closest_troop"),
        (store_character_level, ":cur_level", ":cur_troop"),
        (store_sub, ":level_dif", ":cur_level", ":closest_level"),
        (val_div, ":level_dif", 5),
        (val_add, ":cur_damage", ":level_dif"),
        
        (try_begin),
          (eq, ":closest_agent", ":player_agent"),
          (val_div, ":cur_damage", 2),
          (store_agent_hit_points, ":init_player_hit_points", ":player_agent", 1),
        (try_end),
        
        (try_for_range, ":unused", 0, ":agents_hit"),
          (store_random_in_range, ":random_damage", 0, 100),
          (lt, ":random_damage", ":cur_damage"),
          (agent_deliver_damage_to_agent, ":cur_agent", ":closest_agent"),
        (try_end),
        
        (try_begin),
          (eq, ":closest_agent", ":player_agent"),
          (store_agent_hit_points, ":final_player_hit_points", ":player_agent", 1),
          (store_sub, ":hit_points_difference", ":init_player_hit_points", ":final_player_hit_points"),
          (val_add, "$g_last_mission_player_damage", ":hit_points_difference"),
        (try_end),
        
        (neg|agent_is_alive, ":closest_agent"),
        (try_begin),
          (eq, ":attacker_side", 1),
          (party_add_members, "p_temp_party", ":closest_troop", 1),
          (try_begin),
            (agent_is_wounded, ":closest_agent"),
            (party_wound_members, "p_temp_party", ":closest_troop", 1),
          (try_end),
        (else_try),
          (party_add_members, "p_temp_party_2", ":closest_troop", 1),
          (try_begin),
            (agent_is_wounded, ":closest_agent"),
            (party_wound_members, "p_temp_party_2", ":closest_troop", 1),
          (try_end),
        (try_end),
      (try_end),
  ]),
  
  
  # script_map_get_random_position_around_position_within_range
  # Input: arg1 = minimum_distance in km, arg2 = maximum_distance in km, pos1 = origin position
  # Output: pos2 = result position
  ("map_get_random_position_around_position_within_range",
    [
      (store_script_param_1, ":min_distance"),
      (store_script_param_2, ":max_distance"),
      (val_mul, ":min_distance", 100),
      (assign, ":continue", 1),
      (try_for_range, ":unused", 0, 20),
        (eq, ":continue", 1),
        (map_get_random_position_around_position, pos2, pos1, ":max_distance"),
        (get_distance_between_positions, ":distance", pos2, pos1),
        (ge, ":distance", ":min_distance"),
        (assign, ":continue", 0),
      (try_end),
  ]),
   
  
  # script_get_number_of_unclaimed_centers_by_player
  # Input: none
  # Output: reg0 = number of unclaimed centers, reg1 = last unclaimed center_no
  ("get_number_of_unclaimed_centers_by_player",
    [
  ]),
  
  # script_troop_count_number_of_enemy_troops
  # Input: arg1 = troop_no
  # Output: reg0 = number_of_enemy_troops
  ("troop_count_number_of_enemy_troops",
    [
      (store_script_param_1, ":troop_no"),
      (assign, ":enemy_count", 0),
      (try_for_range, ":i_enemy_slot", slot_troop_enemies_begin, slot_troop_enemies_end),
        (troop_slot_ge, ":troop_no", ":i_enemy_slot", 1),
        (val_add, ":enemy_count", 1),
      (try_end),
      (assign, reg0, ":enemy_count"),
  ]),
  
  
  # script_cf_troop_check_troop_is_enemy
  # Input: arg1 = troop_no, arg2 = checked_troop_no
  # Output: none (Can fail)
  ("cf_troop_check_troop_is_enemy",
    [
      (store_script_param_1, ":troop_no"),
      (store_script_param_2, ":checked_troop_no"),
      (assign, ":result", 0),
      (try_for_range, ":i_enemy_slot", slot_troop_enemies_begin, slot_troop_enemies_end),
        (troop_slot_eq, ":troop_no", ":i_enemy_slot", ":checked_troop_no"),
        (assign, ":result", 1),
      (try_end),
      (eq, ":result", 1),
  ]),
  
  
  # script_troop_get_leaded_center_with_index
  # Input: arg1 = troop_no, arg2 = center index within range between zero and the number of centers that troop owns
  # Output: reg0 = center_no
  ("troop_get_leaded_center_with_index",
    [
      (store_script_param_1, ":troop_no"),
      (store_script_param_2, ":random_center"),
      (assign, ":result", -1),
      (assign, ":center_count", 0),
      (try_for_range, ":center_no", centers_begin, centers_end),
        (eq, ":result", -1),
        (party_slot_eq, ":center_no", slot_town_lord, ":troop_no"),
        (val_add, ":center_count", 1),
        (gt, ":center_count", ":random_center"),
        (assign, ":result", ":center_no"),
      (try_end),
      (assign, reg0, ":result"),
  ]),
  
  # script_cf_troop_get_random_leaded_walled_center_with_less_strength_priority
  # Input: arg1 = troop_no, arg2 = preferred_center_no
  # Output: reg0 = center_no (Can fail)
  ("cf_troop_get_random_leaded_walled_center_with_less_strength_priority",
    [
      (store_script_param, ":troop_no", 1),
      (store_script_param, ":preferred_center_no", 2),

      (assign, ":num_centers", 0),
      (try_for_range, ":center_no", walled_centers_begin, walled_centers_end),
        (party_slot_eq, ":center_no", slot_town_lord, ":troop_no"),
        (party_slot_eq, ":center_no", slot_center_is_besieged_by, -1),
        (val_add, ":num_centers", 1),
        (try_begin),
          (eq, ":center_no", ":preferred_center_no"),
          (val_add, ":num_centers", 99),
        (try_end),
##        (call_script, "script_party_calculate_regular_strength", ":center_no"),
##        (assign, ":strength", reg0),
##        (lt, ":strength", 80),
##        (store_sub, ":strength", 100, ":strength"),
##        (val_div, ":strength", 20),
##        (val_add, ":num_centers", ":strength"),
      (try_end),
      (gt, ":num_centers", 0),
      (store_random_in_range, ":random_center", 0, ":num_centers"),
      (assign, ":result", -1),
      (try_for_range, ":center_no", walled_centers_begin, walled_centers_end),
        (eq, ":result", -1),
        (party_slot_eq, ":center_no", slot_town_lord, ":troop_no"),
        (party_slot_eq, ":center_no", slot_center_is_besieged_by, -1),
        (val_sub, ":random_center", 1),
        (try_begin),
          (eq, ":center_no", ":preferred_center_no"),
          (val_sub, ":random_center", 99),
        (try_end),
##        (try_begin),
##          (call_script, "script_party_calculate_regular_strength", ":center_no"),
##          (assign, ":strength", reg0),
##          (lt, ":strength", 80),
##          (store_sub, ":strength", 100, ":strength"),
##          (val_div, ":strength", 20),
##          (val_sub, ":random_center", ":strength"),
##        (try_end),
        (lt, ":random_center", 0),
        (assign, ":result", ":center_no"),
      (try_end),
      (assign, reg0, ":result"),
  ]),

  # script_cf_troop_get_random_leaded_town_or_village_except_center
  # Input: arg1 = troop_no, arg2 = except_center_no
  # Output: reg0 = center_no (Can fail)
  ("cf_troop_get_random_leaded_town_or_village_except_center",
    [
      (store_script_param_1, ":troop_no"),
      (store_script_param_2, ":except_center_no"),

      (assign, ":num_centers", 0),
      (try_for_range, ":center_no", centers_begin, centers_end),
        (neg|party_slot_eq, ":center_no", slot_party_type, spt_castle),
        (party_slot_eq, ":center_no", slot_town_lord, ":troop_no"),
        (neq, ":center_no", ":except_center_no"),
        (val_add, ":num_centers", 1),
      (try_end),

      (gt, ":num_centers", 0),
      (store_random_in_range, ":random_center", 0, ":num_centers"),
      (assign, ":end_cond", centers_end),
      (try_for_range, ":center_no", centers_begin, ":end_cond"),
        (neg|party_slot_eq, ":center_no", slot_party_type, spt_castle),
        (party_slot_eq, ":center_no", slot_town_lord, ":troop_no"),
        (neq, ":center_no", ":except_center_no"),
        (val_sub, ":random_center", 1),
        (lt, ":random_center", 0),
        (assign, ":target_center", ":center_no"),
        (assign, ":end_cond", 0),
      (try_end),
      (assign, reg0, ":target_center"),
  ]),

  # script_troop_write_owned_centers_to_s2
  # Input: arg1 = troop_no
  # Output: none
  ("troop_write_owned_centers_to_s2",
    [
      (store_script_param_1, ":troop_no"),
      
      (call_script, "script_get_number_of_hero_centers", ":troop_no"),
      (assign, ":no_centers", reg0),
      
      (str_store_troop_name, s5, ":troop_no"),
      
      (try_begin),
        (gt, ":no_centers", 1),
        (try_for_range, ":i_center", 1, ":no_centers"),
          (call_script, "script_troop_get_leaded_center_with_index", ":troop_no", ":i_center"),
          (str_store_party_name_link, s50, reg0),
          (try_begin),
            (eq, ":i_center", 1),
            (call_script, "script_troop_get_leaded_center_with_index", ":troop_no", 0),
            (str_store_party_name_link, s51, reg0),
            (str_store_string, s51, "str_s50_and_s51"),
          (else_try),
            (str_store_string, s51, "str_s50_comma_s51"),
          (try_end),
        (try_end),
        (str_store_string, s2, "str_s5_is_the_ruler_of_s51"),
      (else_try),
        (eq, ":no_centers", 1),
        (call_script, "script_troop_get_leaded_center_with_index", ":troop_no", 0),
        (str_store_party_name_link, s51, reg0),
        (str_store_string, s2, "str_s5_is_the_ruler_of_s51"),
      (else_try),
        (store_troop_faction, ":faction_no", ":troop_no"),
        (str_store_faction_name_link, s6, ":faction_no"),
        (str_store_string, s2, "str_s5_is_a_nobleman_of_s6"),
      (try_end),
  ]),
  
  # script_troop_write_family_relations_to_s1
  # Input: arg1 = troop_no
  # Output: none
  ("troop_write_family_relations_to_s1", 
    [
      (store_script_param_1, ":troop_no"),
      (assign, ":num_family", 0),
      (try_for_range, ":slot_no", slot_troop_family_begin, slot_troop_family_end),
        (troop_slot_ge, ":troop_no", ":slot_no", 1),
        (val_add, ":num_family", 1),
      (try_end),
	
      (troop_get_type, ":gender", ":troop_no"),
	(try_begin),
        (eq, ":gender", 0),
        (str_store_string, s5, "str_he"),
	(else_try),
        (str_store_string, s5, "str_she"),
	(try_end),
	
	(try_begin),
        (gt, ":num_family", 1),
        (try_for_range, ":i_family", 1, ":num_family"),
          (call_script, "script_write_family_relation_as_s3s_s2_to_s4", ":troop_no", ":i_family"),
          (str_store_string_reg, s50, s4),
          (try_begin),
            (eq, ":i_family", 1),
            (call_script, "script_write_family_relation_as_s3s_s2_to_s4", ":troop_no", 0),
            (str_store_string_reg, s51, s4),
            (str_store_string, s51, "str_s50_and_s51"),
	(else_try),
            (str_store_string, s51, "str_s50_comma_s51"),
          (try_end),
	(try_end),
        (str_store_string, s1, "str_s5_is_s51"),
      (else_try),
        (eq, ":num_family", 1),
        (call_script, "script_write_family_relation_as_s3s_s2_to_s4", ":troop_no", 0),
        (str_store_string_reg, s51, s4),
        (str_store_string, s1, "str_s5_is_s51"),
      (else_try),
        (str_store_string, s1, "str_blank_string"),
      (try_end),
  ]),
	
  # script_write_family_relation_as_s3s_s2_to_s4
  # Inputs: arg1 = troop_no, arg2 = family_no (valid slot no after slot_troop_family_begin)
  # Outputs: s50 = s3s_s2 text
		
  ("write_family_relation_as_s3s_s2_to_s4",
    [
      (store_script_param_1, ":troop_no"),
      (store_script_param_2, ":family_no"),
      (troop_get_type, ":gender", ":troop_no"),
      (assign, ":slot_no", slot_troop_family_begin),
      (try_for_range, ":unused", slot_troop_family_begin, slot_troop_family_end),
        (this_or_next|gt, ":family_no", 0),
        (troop_slot_eq, ":troop_no", ":slot_no", 0),
		(try_begin),
          (troop_slot_ge, ":troop_no", ":slot_no", 1),
          (val_sub, ":family_no", 1),
        (try_end),
        (val_add, ":slot_no", 1),
	(try_end),
	(try_begin),
        (eq, ":slot_no", slot_troop_spouse),
        (try_begin),
          (eq, ":gender", 0),
          (str_store_string, s2, "str_husband"),
	(else_try),
          (str_store_string, s2, "str_wife"),
	(try_end),
	(else_try),
        (this_or_next|eq, ":slot_no", slot_troop_son),
        (eq, ":slot_no", slot_troop_daughter),
		(try_begin),
          (eq, ":gender", 0),
          (str_store_string, s2, "str_father"),
		(else_try),	
          (str_store_string, s2, "str_mother"),
		(try_end),
	(else_try),
        (this_or_next|eq, ":slot_no", slot_troop_father),
        (eq, ":slot_no", slot_troop_mother),
		(try_begin),
          (eq, ":gender", 0),
          (str_store_string, s2, "str_son"),
		(else_try),	
          (str_store_string, s2, "str_daughter"),
		(try_end),
	(else_try),
        (eq, ":slot_no", slot_troop_sibling),
		(try_begin),
          (eq, ":gender", 0),
          (str_store_string, s2, "str_brother"),
		(else_try),	
          (str_store_string, s2, "str_sister"),
        (try_end),
		(try_end),
      (troop_get_slot, ":cur_family", ":troop_no", ":slot_no"),
      (str_store_troop_name_link, s3, ":cur_family"),
      (str_store_string, s4, "str_s3s_s2"),
  ]),


  # script_complete_family_relations
  # Inputs: none
  # Outputs: none
		
  ("complete_family_relations",
    [
      #Completing family relations
      (try_for_range, ":troop_id", heroes_begin, heroes_end),
        (troop_get_type, ":troop_gender", ":troop_id"),
        (try_begin),
          (troop_get_slot, ":cur_spouse", ":troop_id", slot_troop_spouse),
          (gt, ":cur_spouse", 0),
          (troop_set_slot, ":cur_spouse", slot_troop_spouse, ":troop_id"),
          #Adding children from troop to new spouse
          (troop_get_slot, ":cur_daughter", ":troop_id", slot_troop_daughter),
          (troop_get_slot, ":cur_son", ":troop_id", slot_troop_son),
          (try_begin),
            (gt, ":cur_daughter", 0),
            (troop_set_slot, ":cur_spouse", slot_troop_daughter, ":cur_daughter"),
          (try_end),
          (try_begin),
            (gt, ":cur_son", 0),
            (troop_set_slot, ":cur_spouse", slot_troop_son, ":cur_son"),
          (try_end),
          #Adding children from new spouse to troop
          (troop_get_slot, ":cur_daughter", ":cur_spouse", slot_troop_daughter),
          (troop_get_slot, ":cur_son", ":cur_spouse", slot_troop_son),
          (try_begin),
            (gt, ":cur_daughter", 0),
            (troop_set_slot, ":troop_id", slot_troop_daughter, ":cur_daughter"),
          (try_end),
          (try_begin),
            (gt, ":cur_son", 0),
            (troop_set_slot, ":troop_id", slot_troop_son, ":cur_son"),
          (try_end),
        (try_end),
        (try_begin),
          (troop_get_slot, ":cur_sibling", ":troop_id", slot_troop_sibling),
          (gt, ":cur_sibling", 0),
          (troop_set_slot, ":cur_sibling", slot_troop_sibling, ":troop_id"),
          #Adding parents from troop to new sibling
          (troop_get_slot, ":cur_mother", ":troop_id", slot_troop_mother),
          (troop_get_slot, ":cur_father", ":troop_id", slot_troop_father),
		(try_begin),
            (gt, ":cur_mother", 0),
            (troop_set_slot, ":cur_sibling", slot_troop_mother, ":cur_mother"),
          (try_end),
          (try_begin),
            (gt, ":cur_father", 0),
            (troop_set_slot, ":cur_sibling", slot_troop_father, ":cur_father"),
          (try_end),
          #Adding parents from new sibling to troop
          (troop_get_slot, ":cur_mother", ":cur_sibling", slot_troop_mother),
          (troop_get_slot, ":cur_father", ":cur_sibling", slot_troop_father),
          (try_begin),
            (gt, ":cur_mother", 0),
            (troop_set_slot, ":troop_id", slot_troop_mother, ":cur_mother"),
          (try_end),
          (try_begin),
            (gt, ":cur_father", 0),
            (troop_set_slot, ":troop_id", slot_troop_father, ":cur_father"),
          (try_end),
        (try_end),
        (try_begin),
          (troop_get_slot, ":cur_child", ":troop_id", slot_troop_son),
          (gt, ":cur_child", 0),
          (try_begin),
            (eq, ":troop_gender", 0),
            (troop_set_slot, ":cur_child", slot_troop_father, ":troop_id"),
		(else_try),	
            (troop_set_slot, ":cur_child", slot_troop_mother, ":troop_id"),
		(try_end),
          #Adding mother/father and sibling from troop to new son
          (troop_get_slot, ":cur_mother_father", ":troop_id", slot_troop_spouse),
          (troop_get_slot, ":cur_sibling", ":troop_id", slot_troop_daughter),
          (try_begin),
            (gt, ":cur_mother_father", 0),
            (try_begin),
              (eq, ":troop_gender", 1),
              (troop_set_slot, ":cur_child", slot_troop_father, ":cur_mother_father"),
	(else_try),
              (troop_set_slot, ":cur_child", slot_troop_mother, ":cur_mother_father"),
            (try_end),
          (try_end),
          (try_begin),
            (gt, ":cur_sibling", 0),
            (troop_set_slot, ":cur_child", slot_troop_sibling, ":cur_sibling"),
          (try_end),
          #Adding son/daughter and spouse from new son to troop
		(try_begin),
            (eq, ":troop_gender", 0),
            (troop_get_slot, ":cur_spouse", ":cur_child", slot_troop_mother),
		(else_try),	
            (troop_get_slot, ":cur_spouse", ":cur_child", slot_troop_father),
          (try_end),
          (troop_get_slot, ":cur_daughter", ":cur_child", slot_troop_sibling),
          (try_begin),
            (gt, ":cur_spouse", 0),
            (troop_set_slot, ":troop_id", slot_troop_spouse, ":cur_spouse"),
          (try_end),
          (try_begin),
            (gt, ":cur_daughter", 0),
            (troop_set_slot, ":troop_id", slot_troop_daughter, ":cur_daughter"),
		(try_end),
        (try_end),
        (try_begin),
          (troop_get_slot, ":cur_child", ":troop_id", slot_troop_daughter),
          (gt, ":cur_child", 0),
          (try_begin),
            (eq, ":troop_gender", 0),
            (troop_set_slot, ":cur_child", slot_troop_father, ":troop_id"),
	(else_try),
            (troop_set_slot, ":cur_child", slot_troop_mother, ":troop_id"),
          (try_end),
          #Adding mother/father and sibling from troop to new daughter
          (troop_get_slot, ":cur_mother_father", ":troop_id", slot_troop_spouse),
          (troop_get_slot, ":cur_sibling", ":troop_id", slot_troop_son),
          (try_begin),
            (gt, ":cur_mother_father", 0),
		(try_begin),
              (eq, ":troop_gender", 1),
              (troop_set_slot, ":cur_child", slot_troop_father, ":cur_mother_father"),
		(else_try),	
              (troop_set_slot, ":cur_child", slot_troop_mother, ":cur_mother_father"),
            (try_end),
		(try_end),
		(try_begin),
            (gt, ":cur_sibling", 0),
            (troop_set_slot, ":cur_child", slot_troop_sibling, ":cur_sibling"),
          (try_end),
          #Adding son/daughter and spouse from new daughter to troop
          (try_begin),
            (eq, ":troop_gender", 0),
            (troop_get_slot, ":cur_spouse", ":cur_child", slot_troop_mother),
		(else_try),	
            (troop_get_slot, ":cur_spouse", ":cur_child", slot_troop_father),
          (try_end),
          (troop_get_slot, ":cur_son", ":cur_child", slot_troop_sibling),
          (try_begin),
            (gt, ":cur_spouse", 0),
            (troop_set_slot, ":troop_id", slot_troop_spouse, ":cur_spouse"),
		(try_end),
          (try_begin),
            (gt, ":cur_son", 0),
            (troop_set_slot, ":troop_id", slot_troop_son, ":cur_son"),
          (try_end),
        (try_end),
        (try_begin),
          (troop_get_slot, ":cur_father", ":troop_id", slot_troop_father),
          (gt, ":cur_father", 0),
          (try_begin),
            (eq, ":troop_gender", 0),
            (troop_set_slot, ":cur_father", slot_troop_son, ":troop_id"),
	(else_try),
            (troop_set_slot, ":cur_father", slot_troop_daughter, ":troop_id"),
          (try_end),
          #Adding son/daughter and spouse from troop to new father
          (troop_get_slot, ":cur_spouse", ":troop_id", slot_troop_mother),
          (troop_get_slot, ":cur_son_daughter", ":troop_id", slot_troop_sibling),
		(try_begin),
            (gt, ":cur_spouse", 0),
            (troop_set_slot, ":cur_father", slot_troop_spouse, ":cur_spouse"),
		(try_end),
          (try_begin),
            (gt, ":cur_son_daughter", 0),
            (try_begin),
              (eq, ":troop_gender", 0),
              (troop_set_slot, ":cur_father", slot_troop_daughter, ":cur_son_daughter"),
	(else_try),
              (troop_set_slot, ":cur_father", slot_troop_son, ":cur_son_daughter"),
            (try_end),
          (try_end),
          #Adding mother/father and sibling from new father to troop
		(try_begin),
            (eq, ":troop_gender", 0),
            (troop_get_slot, ":cur_sibling", ":cur_father", slot_troop_daughter),
		(else_try),	
            (troop_get_slot, ":cur_sibling", ":cur_father", slot_troop_son),
          (try_end),
          (troop_get_slot, ":cur_mother", ":cur_father", slot_troop_spouse),
          (try_begin),
            (gt, ":cur_sibling", 0),
            (troop_set_slot, ":troop_id", slot_troop_sibling, ":cur_sibling"),
          (try_end),
          (try_begin),
            (gt, ":cur_mother", 0),
            (troop_set_slot, ":troop_id", slot_troop_mother, ":cur_mother"),
		(try_end),
        (try_end),
        (try_begin),
          (troop_get_slot, ":cur_mother", ":troop_id", slot_troop_mother),
          (gt, ":cur_mother", 0),
          (try_begin),
            (eq, ":troop_gender", 0),
            (troop_set_slot, ":cur_mother", slot_troop_son, ":troop_id"),
	(else_try),
            (troop_set_slot, ":cur_mother", slot_troop_daughter, ":troop_id"),
          (try_end),
          #Adding son/daughter and spouse from troop to new mother
          (troop_get_slot, ":cur_spouse", ":troop_id", slot_troop_father),
          (troop_get_slot, ":cur_son_daughter", ":troop_id", slot_troop_sibling),
		(try_begin),
            (gt, ":cur_spouse", 0),
            (troop_set_slot, ":cur_mother", slot_troop_spouse, ":cur_spouse"),
		(try_end),
		(try_begin),
            (gt, ":cur_son_daughter", 0),
            (try_begin),
              (eq, ":troop_gender", 0),
              (troop_set_slot, ":cur_mother", slot_troop_daughter, ":cur_son_daughter"),
		(else_try),	
              (troop_set_slot, ":cur_mother", slot_troop_son, ":cur_son_daughter"),
            (try_end),
		(try_end),
          #Adding mother/father and sibling from new mother to troop
		(try_begin),
            (eq, ":troop_gender", 0),
            (troop_get_slot, ":cur_sibling", ":cur_mother", slot_troop_daughter),
		(else_try),	
            (troop_get_slot, ":cur_sibling", ":cur_mother", slot_troop_son),
		(try_end),
          (troop_get_slot, ":cur_father", ":cur_mother", slot_troop_spouse),
		(try_begin),
            (gt, ":cur_sibling", 0),
            (troop_set_slot, ":troop_id", slot_troop_sibling, ":cur_sibling"),
		(try_end),
		(try_begin),
            (gt, ":cur_father", 0),
            (troop_set_slot, ":troop_id", slot_troop_father, ":cur_father"),
          (try_end),
		(try_end),		
	(try_end),
	]),
  
  # script_collect_friendly_parties
  # Fills the party p_collective_friends with the members of parties attached to main_party and ally_party_no
  ("collect_friendly_parties",
    [
      (party_collect_attachments_to_party, "p_main_party", "p_collective_friends"),
      (try_begin),
        (gt, "$g_ally_party", 0),
        (party_collect_attachments_to_party, "$g_ally_party", "p_temp_party"),
        (assign, "$g_move_heroes", 1),
        (call_script, "script_party_add_party", "p_collective_friends", "p_temp_party"),
      (try_end),
  ]),

  # script_encounter_calculate_fit
  # Input: arg1 = troop_no
  # Output: none
  ("encounter_calculate_fit",
    [
#      (assign, "$g_enemy_fit_for_battle_old",  "$g_enemy_fit_for_battle"),
#      (assign, "$g_friend_fit_for_battle_old", "$g_friend_fit_for_battle"),
#      (assign, "$g_main_party_fit_for_battle_old", "$g_main_party_fit_for_battle"),
      (call_script, "script_party_count_fit_for_battle", "p_main_party"),
 #     (assign, "$g_main_party_fit_for_battle", reg(0)),
      (call_script, "script_collect_friendly_parties"),
      (call_script, "script_party_count_fit_for_battle", "p_collective_friends"),
      (assign, "$g_friend_fit_for_battle", reg(0)),

      (party_clear, "p_collective_ally"),
      (try_begin),
        (gt, "$g_ally_party", 0),
        (party_is_active, "$g_ally_party"),
        (party_collect_attachments_to_party, "$g_ally_party", "p_collective_ally"),
#        (call_script, "script_party_count_fit_for_battle", "p_collective_ally"),
#        (val_add, "$g_friend_fit_for_battle", reg(0)),
      (try_end),

      (party_clear, "p_collective_enemy"),
      (try_begin),
        (party_is_active, "$g_enemy_party"),
        (party_collect_attachments_to_party, "$g_enemy_party", "p_collective_enemy"),
      (try_end),
      (call_script, "script_party_count_fit_for_battle", "p_collective_enemy"),
      (assign, "$g_enemy_fit_for_battle", reg(0)),
      (assign, reg11, "$g_enemy_fit_for_battle"),
      (assign, reg10, "$g_friend_fit_for_battle"),
  ]),
  
  # script_encounter_init_variables
  # Input: arg1 = troop_no
  # Output: none
  ("encounter_init_variables",
    [
      (assign, "$capture_screen_shown", 0),
      (assign, "$loot_screen_shown", 0),
	  
	  (assign, "$after_capture_screen_shown", 0),
	  (assign, "$after_capture_screen_shown_1", 0),
      (assign, "$thanked_by_ally_leader", 0),
      (assign, "$g_battle_result", 0),
      (assign, "$cant_leave_encounter", 0),
      (assign, "$cant_talk_to_enemy", 0),
      (assign, "$last_defeated_hero", 0),
      (assign, "$last_freed_hero", 0),
	  (assign, "$spawn_enemies_true", 0),
      (assign, "$spawn_prisioners_true", 0),
	  (assign, "$capture_prisioners_true", 0),
      (call_script, "script_encounter_calculate_fit"),
      (call_script, "script_party_copy", "p_main_party_backup", "p_main_party"),
      (call_script, "script_party_calculate_strength", "p_main_party", 0),
      (assign, "$g_starting_strength_main_party", reg0),
      (call_script, "script_party_copy", "p_encountered_party_backup", "p_collective_enemy"),
      (call_script, "script_party_calculate_strength", "p_collective_enemy", 0),
      (assign, "$g_starting_strength_enemy_party", reg0),
#      (assign, "$g_starting_strength_ally_party", 0),
      (assign, "$g_strength_contribution_of_player", 100),

      (call_script, "script_party_copy", "p_collective_friends_backup", "p_collective_friends"),
      (call_script, "script_party_calculate_strength", "p_collective_friends", 0),
      (assign, "$g_starting_strength_friends", reg0),

      (store_mul, "$g_strength_contribution_of_player","$g_starting_strength_main_party", 100), # reduce contribution if we are helping someone.
	  
	  (try_begin),
		(gt, "$g_starting_strength_friends", 0), #this new to prevent occasional div by zero error 
		(val_div, "$g_strength_contribution_of_player","$g_starting_strength_friends"),
	  (else_try),
		(assign, "$g_strength_contribution_of_player", 100), #Or zero, maybe
	  (try_end),
	  
      (party_clear, "p_routed_enemies"), #new
      (assign, "$num_routed_us", 0),#newtoday
      (assign, "$num_routed_allies", 0),#newtoday
      (assign, "$num_routed_enemies", 0),#newtoday      
      (party_get_num_companion_stacks, ":num_stacks", "p_main_party"),
      (try_for_range, ":i_stack", 0, ":num_stacks"),
        (party_stack_get_troop_id, ":stack_troop_id", "p_main_party", ":i_stack"),
        (try_begin),
          (troop_set_slot, ":stack_troop_id", slot_troop_player_routed_agents, 0),
          #(troop_set_slot, ":stack_troop_id", slot_troop_enemy_routed_agents, 0),
          #(troop_set_slot, ":stack_troop_id", slot_troop_ally_routed_agents, 0),
        (try_end),
      (try_end),  

      (party_get_num_companion_stacks, ":num_stacks", "p_collective_friends"),
      (try_for_range, ":i_stack", 0, ":num_stacks"),
        (party_stack_get_troop_id, ":stack_troop_id", "p_collective_friends", ":i_stack"),
        (try_begin),
          #(troop_set_slot, ":stack_troop_id", slot_troop_player_routed_agents, 0),
          #(troop_set_slot, ":stack_troop_id", slot_troop_enemy_routed_agents, 0),
          (troop_set_slot, ":stack_troop_id", slot_troop_ally_routed_agents, 0),
        (try_end),
      (try_end),  

      (party_get_num_companion_stacks, ":num_stacks", "p_collective_enemy"),
      (try_for_range, ":i_stack", 0, ":num_stacks"),
        (party_stack_get_troop_id, ":stack_troop_id", "p_collective_enemy", ":i_stack"),
        (try_begin),
          #(troop_set_slot, ":stack_troop_id", slot_troop_player_routed_agents, 0),
          (troop_set_slot, ":stack_troop_id", slot_troop_enemy_routed_agents, 0),
          #(troop_set_slot, ":stack_troop_id", slot_troop_ally_routed_agents, 0),
        (try_end),
      (try_end),  

      (try_for_range, ":cur_faction", fac_kingdom_1, fac_kingdoms_end),
        (faction_set_slot, ":cur_faction", slot_faction_num_routed_agents, 0),
      (try_end),
      
      (assign, "$routed_party_added", 0), #new
      (party_clear, "p_total_enemy_casualties"), #new
      
#      (try_begin),
#        (gt, "$g_ally_party", 0),
#        (call_script, "script_party_copy", "p_ally_party_backup", "p_collective_ally"),
#        (call_script, "script_party_calculate_strength", "p_collective_ally"),
#        (assign, "$g_starting_strength_ally_party", reg0),
#        (store_add, ":starting_strength_factor_combined","$g_starting_strength_ally_party","$g_starting_strength_main_party"),
#         (store_mul, "$g_strength_contribution_of_player","$g_starting_strength_main_party", 80), #reduce contribution if we are helping someone.
#        (val_div, "$g_strength_contribution_of_player",":starting_strength_factor_combined"),
#      (try_end),
  ]),
  
  # script_calculate_renown_value
  # Input: arg1 = troop_no
  # Output: fills $battle_renown_value
  ("calculate_renown_value",
   [
      (call_script, "script_party_calculate_strength", "p_main_party", 0),
      (assign, ":main_party_strength", reg0),
      (call_script, "script_party_calculate_strength", "p_collective_enemy", 0),
      (assign, ":enemy_strength", reg0),
      (call_script, "script_party_calculate_strength", "p_collective_friends", 0),
      (assign, ":friends_strength", reg0),

      (val_add, ":friends_strength", 1),
      (store_mul, ":enemy_strength_ratio", ":enemy_strength", 100),
      (val_div, ":enemy_strength_ratio", ":friends_strength"),

      (assign, ":renown_val", ":enemy_strength"),
      (val_mul, ":renown_val", ":enemy_strength_ratio"),
      (val_div, ":renown_val", 100),

      (val_mul, ":renown_val", ":main_party_strength"),
      (val_div, ":renown_val",":friends_strength"),

      (store_div, "$battle_renown_value", ":renown_val", 5),
      (val_min, "$battle_renown_value", 2500),
      (convert_to_fixed_point, "$battle_renown_value"),
      (store_sqrt, "$battle_renown_value", "$battle_renown_value"),
      (convert_from_fixed_point, "$battle_renown_value"),
      (assign, reg8, "$battle_renown_value"),
      (display_message, "@Renown value for this battle is {reg8}.",0xFFFFFFFF),
  ]),
       
  
  ##  # script_calculate_weekly_wage_for_player
  ##  # Input: none
  ##  # Output: none
  ##  ("calculate_weekly_wage_for_player",
  ##    [
  ##        (call_script, "script_calculate_weekly_party_wage", "p_main_party"),
  ##        (assign, ":result", reg0),
  ##        (try_for_parties, ":party_no"),
  ##          (store_faction_of_party, ":party_faction", ":party_no"),
  ##          (eq, ":party_faction", "fac_player_supporters_faction"),
  ##          (call_script, "script_calculate_weekly_party_wage", ":party_no"),
  ##          (val_add, ":result", reg0),
  ##        (try_end),
  ##        (assign, reg0, ":result"),
  ##  ]),
        
  
  # script_get_first_agent_with_troop_id
  # Input: arg1 = troop_no
  # Output: agent_id
  ("cf_get_first_agent_with_troop_id",
    [
  ]),
  
  
  # script_cf_team_get_average_position_of_agents_with_type_to_pos1
  # Input: arg1 = team_no, arg2 = class_no (grc_everyone, grc_infantry, grc_cavalry, grc_archers, grc_heroes)
  # Output: none, pos1 = average_position (0,0,0 if there are no matching agents)
  ("cf_team_get_average_position_of_agents_with_type_to_pos1",
    [
  ]),
  
  # script_cf_turn_windmill_fans
  # Input: arg1 = instance_no (none = 0)
  # Output: none
  ("cf_turn_windmill_fans",
    [(store_script_param_1, ":instance_no"),
      (scene_prop_get_instance, ":windmill_fan_object", "spr_windmill_fan_turning", ":instance_no"),
      (ge, ":windmill_fan_object", 0),
      (prop_instance_get_position, pos1, ":windmill_fan_object"),
      (position_rotate_y, pos1, 10),
      (prop_instance_animate_to_position, ":windmill_fan_object", pos1, 100),
      (val_add, ":instance_no", 1),
      (call_script, "script_cf_turn_windmill_fans", ":instance_no"),
  ]),
  
  # script_print_party_members
  # Input: arg1 = party_no
  # Output: s51 = output string. "noone" if the party is empty
  ("print_party_members",
    [  
      (store_script_param_1, ":party_no"),
      (party_get_num_companion_stacks, ":num_stacks", ":party_no"),
      (try_for_range, ":i_stack", 0, ":num_stacks"),
        (party_stack_get_troop_id, ":stack_troop",":party_no",":i_stack"),
        (troop_is_hero, ":stack_troop"),
        (try_begin),
          (eq, ":i_stack", 0),
          (str_store_troop_name, s51, ":stack_troop"),
        (try_end),
        (str_store_troop_name, s50, ":stack_troop"),
        (try_begin),
          (eq, ":i_stack", 1),
          (str_store_string, s51, "str_s50_and_s51"),
        (else_try),
          (gt, ":i_stack", 1),
          (str_store_string, s51, "str_s50_comma_s51"),
        (try_end),
      (try_end),
      (try_begin),
        (eq, ":num_stacks", 0),
        (str_store_string, s51, "str_noone"),
      (try_end),
  ]),

  # script_round_value
  # Input: arg1 = value
  # Output: reg0 = rounded_value
  ("round_value",
    [
      (store_script_param_1, ":value"),
      (try_begin),
        (lt, ":value", 100),
        (neq, ":value", 0),
        (val_add, ":value", 5),
        (val_div, ":value", 10),
        (val_mul, ":value", 10),
        (try_begin),
          (eq, ":value", 0),
          (assign, ":value", 5),
        (try_end),
      (else_try),
        (lt, ":value", 300),
        (val_add, ":value", 25),
        (val_div, ":value", 50),
        (val_mul, ":value", 50),
      (else_try),
        (val_add, ":value", 50),
        (val_div, ":value", 100),
        (val_mul, ":value", 100),
      (try_end),
      (assign, reg0, ":value"),
  ]),
  
  
##  # script_print_productions_above_or_below_50
##  # Input: arg1 = center_no, arg2 = sign of the production, 1 if produced goods, -1 if consumed goods
##  # Output: s51 = output string. "nothing" if there are no productions above or below 50
##  ("print_productions_above_or_below_50",
##    [(store_script_param_1, ":center_no"),
##      (store_script_param_2, ":sign"),
##      (store_sub, ":item_to_slot", slot_town_trade_good_productions_begin, trade_goods_begin),
##      (assign, ":cur_print_index", 0),
##      (try_for_range, ":cur_goods", trade_goods_begin, trade_goods_end),
##        (store_add, ":cur_good_slot", ":cur_goods", ":item_to_slot"),
##        (party_get_slot, ":cur_production", ":center_no", ":cur_good_slot"),
##        (val_mul, ":cur_production", ":sign"),
##        (ge, ":cur_production", 50),
##        (try_begin),
##          (eq, ":cur_print_index", 0),
##          (str_store_item_name, s51, ":cur_goods"),
##        (try_end),
##        (str_store_item_name, s50, ":cur_goods"),
##        (try_begin),
##          (eq, ":cur_print_index", 1),
##          (str_store_string, s51, "str_s50_and_s51"),
##        (else_try),
##          (gt, ":cur_print_index", 1),
##          (str_store_string, s51, "str_s50_comma_s51"),
##        (try_end),
##        (val_add, ":cur_print_index", 1),
##      (try_end),
##      (try_begin),
##        (eq, ":cur_print_index", 0),
##        (str_store_string, s51, "str_nothing"),
##      (try_end),
##  ]),
  
  # script_change_banners_and_chest
  # Input: none
  # Output: none
  ("change_banners_and_chest",
    [
	(try_begin), 
	(party_is_active, "$g_encountered_party"), 
	(party_get_slot, ":cur_leader", "$g_encountered_party", slot_town_lord),
     (try_begin),
       (ge, ":cur_leader", 0),
       (troop_get_slot, ":troop_banner_object", ":cur_leader", slot_troop_banner_scene_prop),
       (gt, ":troop_banner_object", 0),
       (replace_scene_props, banner_scene_props_begin, ":troop_banner_object"),
     (else_try),
       (replace_scene_props, banner_scene_props_begin, "spr_empty"),
     (try_end),
     (try_begin),
       (neq, ":cur_leader", "trp_player"),
       (replace_scene_props, "spr_player_chest", "spr_locked_player_chest"),
     (try_end),
	 (try_end),
     ]),


  # script_remove_siege_objects_dest_wall
  # Input: none
  # Output: none
  ("remove_siege_objects_dest_wall",
    [
      ]),

  # script_remove_siege_objects
  # Input: none
  # Output: none
  ("remove_siege_objects",
    [
      (replace_scene_props, "spr_battlement_a_destroyed", "spr_battlement_a"),
      (replace_scene_props, "spr_snowy_castle_battlement_a_destroyed", "spr_snowy_castle_battlement_a"),
      (replace_scene_props, "spr_castle_e_battlement_a_destroyed", "spr_castle_e_battlement_a"),
      (replace_scene_props, "spr_castle_battlement_a_destroyed", "spr_castle_battlement_a"),
      (replace_scene_props, "spr_castle_battlement_b_destroyed", "spr_castle_battlement_b"),
      (replace_scene_props, "spr_earth_wall_a2", "spr_earth_wall_a"),
      (replace_scene_props, "spr_earth_wall_b2", "spr_earth_wall_b"),
      (replace_scene_props, "spr_belfry_platform_b", "spr_empty"),
      (replace_scene_props, "spr_belfry_platform_a", "spr_empty"),
      (replace_scene_props, "spr_belfry_a", "spr_empty"),
      (replace_scene_props, "spr_belfry_wheel", "spr_empty"),
      (replace_scene_props, "spr_siege_ladder_move_6m", "spr_empty"),
      (replace_scene_props, "spr_siege_ladder_move_8m", "spr_empty"),
      (replace_scene_props, "spr_siege_ladder_move_10m", "spr_empty"),
      (replace_scene_props, "spr_siege_ladder_move_12m", "spr_empty"),
      (replace_scene_props, "spr_siege_ladder_move_14m", "spr_empty"),
      (replace_scene_props, "spr_siege_ladder_12m", "spr_empty"),
      (replace_scene_props, "spr_siege_ladder_14m", "spr_empty"),
      (replace_scene_props, "spr_mangonel", "spr_empty"),
      (replace_scene_props, "spr_trebuchet_old", "spr_empty"),
      (replace_scene_props, "spr_trebuchet_new", "spr_empty"),
      (replace_scene_props, "spr_stone_ball", "spr_empty"),
      (replace_scene_props, "spr_Village_fire_big", "spr_empty"),
	  #oim siege objects
	  (replace_scene_props, "spr_oim_rus_white_town_battlement_destroyed", "spr_oim_rus_white_town_battlement"),
	  (replace_scene_props, "spr_oim_rus_castle_battlement_destroyed", "spr_oim_rus_castle_battlement"),
	  (replace_scene_props, "spr_oim_rus_red_town_battlement_destroyed", "spr_oim_rus_red_town_battlement"),
      ]),

  # script_describe_relation_to_s63
  # Input: arg1 = relation (-100 .. 100)
  # Output: none
  ("describe_relation_to_s63",
    [(store_script_param_1, ":relation"),
      (store_add, ":normalized_relation", ":relation", 100),
      (val_add, ":normalized_relation", 5),
      (store_div, ":str_offset", ":normalized_relation", 10),
      (val_clamp, ":str_offset", 0, 20),
      (store_add, ":str_id", "str_relation_mnus_100",  ":str_offset"),
      (str_store_string, s63, ":str_id"),
  ]),
  
  # script_describe_center_relation_to_s3
  # Input: arg1 = relation (-100 .. 100)
  # Output: none
  ("describe_center_relation_to_s3",
    [(store_script_param_1, ":relation"),
      (store_add, ":normalized_relation", ":relation", 100),
      (val_add, ":normalized_relation", 5),
      (store_div, ":str_offset", ":normalized_relation", 10),
      (val_clamp, ":str_offset", 0, 20),
      (store_add, ":str_id", "str_center_relation_mnus_100",  ":str_offset"),
      (str_store_string, s3, ":str_id"),
  ]),


  # script_center_ambiance_sounds
  # Input: none
  # Output: none
  # to be called every two seconds
  ("center_ambiance_sounds",
    [
        (assign, ":sound_1", -1),
        (assign, ":sound_2", -1),
        (assign, ":sound_3", -1),
        (assign, ":sound_4", -1),
        (assign, ":sound_5", -1),
        (try_begin),
          (party_slot_eq, "$g_encountered_party", slot_party_type, spt_village),
          (try_begin),
            (neg|is_currently_night),
            (assign, ":sound_3", "snd_distant_dog_bark"),
            (assign, ":sound_3", "snd_distant_chicken"),
          (else_try),
            (assign, ":sound_1", "snd_distant_dog_bark"),
            (assign, ":sound_2", "snd_distant_owl"),
          (try_end),
        (else_try),
          (party_slot_eq, "$g_encountered_party", slot_party_type, spt_town),
          (try_begin),
            (neg|is_currently_night),
            (assign, ":sound_1", "snd_distant_carpenter"),
            (assign, ":sound_2", "snd_distant_blacksmith"),
            (assign, ":sound_3", "snd_distant_dog_bark"),
          (else_try),
            (assign, ":sound_1", "snd_distant_dog_bark"),
          (try_end),
        (try_end),
        (try_begin),
          (store_random_in_range, ":r", 0, 7),
          (try_begin),
            (eq, ":r", 1),
            (ge, ":sound_1", 0),
            (play_sound, ":sound_1"),
          (else_try),
            (eq, ":r", 2),
            (ge, ":sound_2", 0),
            (play_sound, ":sound_2"),
          (else_try),
            (eq, ":r", 3),
            (ge, ":sound_3", 0),
            (play_sound, ":sound_3"),
          (else_try),
            (eq, ":r", 4),
            (ge, ":sound_4", 0),
            (play_sound, ":sound_4"),
          (else_try),
            (eq, ":r", 5),
            (ge, ":sound_5", 0),
            (play_sound, ":sound_5"),
          (try_end),
        (try_end),
  ]),

  # script_center_set_walker_to_type
  # Input: arg1 = center_no, arg2 = walker_no, arg3 = walker_type, 
  # Output: none
  ("center_set_walker_to_type",
   [
       (store_script_param, ":center_no", 1),
       (store_script_param, ":walker_no", 2),
       (store_script_param, ":walker_type", 3),
       (store_add, ":type_slot", slot_center_walker_0_type, ":walker_no"),
       (party_set_slot, ":center_no", ":type_slot", ":walker_type"),
	   
	   #(store_faction_of_party, ":faction", ":center_no"), 
	   (party_get_slot, ":faction",  ":center_no", slot_center_original_faction),
	   
	   (store_random_in_range, ":shift", 0, 4), 
       (try_begin),
	     (eq, ":faction", "fac_kingdom_2"),
		 (assign, ":walker_troop_id", "trp_rich_baba_mosk"), 
       (else_try), 
	     (eq, ":faction", "fac_kingdom_3"),
		 (assign, ":walker_troop_id", "trp_rich_baba_ttr"), 
       (else_try), 
	     (eq, ":faction", "fac_kingdom_4"),
		 (assign, ":walker_troop_id", "trp_rich_baba_swd"), 
       (else_try), 
	     (eq, ":faction", "fac_kingdom_5"),
		 (assign, ":walker_troop_id", "trp_rich_baba_ukr"), 
       (else_try),
	     (assign, ":walker_troop_id", "trp_rich_baba_pol"), 
	   (try_end), 
	   
	   (val_add, ":walker_troop_id", ":shift"),
	   
       #(try_begin),
       #  (party_slot_eq, ":center_no", slot_party_type, spt_village),
       #  (store_random_in_range, ":walker_troop_id", village_walkers_begin, village_walkers_end),
       #(else_try),
       #  (store_random_in_range, ":walker_troop_id", town_walkers_begin, town_walkers_end),
       #(try_end),
       (try_begin),
         (eq,":walker_type", walkert_spy),
         (assign,":original_walker",":walker_troop_id"),
         (assign,":walker_troop_id", "trp_spy_walker_1"), # select spy troop id

         # restore spy inventory
         (try_for_range,":item_no","itm_horse_meat","itm_wooden_stick"),
            (store_item_kind_count,":num_items",":item_no",":original_walker"),
            (ge,":num_items",1),
            (store_item_kind_count,":num_items",":item_no",":walker_troop_id"),
            (lt,":num_items",1),
            (troop_add_items,":walker_troop_id",":item_no",1),
         (try_end),
         # determine spy recognition item
         (store_random_in_range,":spy_item_type",itp_type_head_armor,itp_type_hand_armor),
         (assign,":num",0),
         (try_for_range,":item_no","itm_horse_meat","itm_wooden_stick"),
            (store_item_kind_count,":num_items",":item_no",":walker_troop_id"),
            (ge,":num_items",1),
            (item_get_type, ":itp", ":item_no"),
            (eq,":itp",":spy_item_type"),
            (val_add,":num",1),
            (troop_remove_items,":walker_troop_id",":item_no",":num_items"),
         (try_end),
         (store_random_in_range,":random_item",0,":num"),
         (assign,":num",-1),
         (try_for_range,":item_no","itm_horse_meat","itm_wooden_stick"),
            (store_item_kind_count,":num_items",":item_no",":original_walker"),
            (ge,":num_items",1),
            (item_get_type, ":itp", ":item_no"),
            (eq,":itp",":spy_item_type"),
            (val_add,":num",1),
            (eq,":num",":random_item"),
            (troop_add_items,":walker_troop_id",":item_no",1),
            (assign,":spy_item",":item_no"),
         (try_end),
         (assign,"$spy_item_worn",":spy_item"),
         (assign,"$spy_quest_troop",":walker_troop_id"),
         (troop_equip_items,":walker_troop_id"),
       (try_end),
       (store_add, ":troop_slot", slot_center_walker_0_troop, ":walker_no"),
       (party_set_slot, ":center_no", ":troop_slot", ":walker_troop_id"),
       (store_random_in_range, ":walker_dna", 0, 1000000),
       (store_add, ":dna_slot", slot_center_walker_0_dna, ":walker_no"),
       (party_set_slot, ":center_no", ":dna_slot", ":walker_dna"),
     ]),


  # script_cf_center_get_free_walker
  # Input: arg1 = center_no
  # Output: reg0 = walker no (can fail)
  ("cf_center_get_free_walker",
   [
       (store_script_param, ":center_no", 1),
       (assign, ":num_free_walkers", 0),
       (try_for_range, ":walker_no", 0, num_town_walkers),
         (store_add, ":type_slot", slot_center_walker_0_type, ":walker_no"),
         (party_slot_eq, ":center_no", ":type_slot", walkert_default),
         (val_add, ":num_free_walkers", 1),
       (try_end),
       (gt, ":num_free_walkers", 0),
       (assign, reg0, -1),
       (store_random_in_range, ":random_rank", 0, ":num_free_walkers"),
       (try_for_range, ":walker_no", 0, num_town_walkers),
         (store_add, ":type_slot", slot_center_walker_0_type, ":walker_no"),
         (party_slot_eq, ":center_no", ":type_slot", walkert_default),
         (val_sub, ":num_free_walkers", 1),
         (eq, ":num_free_walkers", ":random_rank"),
         (assign, reg0, ":walker_no"),
       (try_end),
     ]),
    
  # script_center_remove_walker_type_from_walkers
  # Input: arg1 = center_no, arg2 = walker_type, 
  # Output: reg0 = 1 if comment found, 0 otherwise; s61 will contain comment string if found
  ("center_remove_walker_type_from_walkers",
   [
       (store_script_param, ":center_no", 1),
       (store_script_param, ":walker_type", 2),
       (try_for_range, ":walker_no", 0, num_town_walkers),
         (store_add, ":type_slot", slot_center_walker_0_type, ":walker_no"),
         (party_slot_eq, ":center_no", ":type_slot", ":walker_type"),
         (call_script, "script_center_set_walker_to_type", ":center_no", ":walker_no", walkert_default),
       (try_end),
     ]),
  
          
  # script_init_town_walkers
  # Input: none
  # Output: none
  ("init_town_walkers",
    [(try_begin),
      (eq, "$town_nighttime", 0),
      (try_for_range, ":walker_no", 0, num_town_walkers),
        (store_add, ":troop_slot", slot_center_walker_0_troop, ":walker_no"),
        (party_get_slot, ":walker_troop_id", "$current_town", ":troop_slot"),
        (gt, ":walker_troop_id", 0),
        (store_add, ":entry_no", town_walker_entries_start, ":walker_no"),
        (set_visitor, ":entry_no", ":walker_troop_id"),
      (try_end),  
##       (try_for_range, ":cur_walker", 0, 8),
##         (try_begin),
##           (lt, ":cur_walker", ":num_walkers"),
##           (store_random_in_range, ":walker_troop", town_walkers_begin, town_walkers_end),
##         (else_try),
##           (assign, ":walker_troop", -1),
##         (try_end),
##         (try_begin),
##           (eq, ":cur_walker", 0),
##           (assign, reg0, ":walker_troop"),
##         (else_try),
##           (eq, ":cur_walker", 1),
##           (assign, reg1, ":walker_troop"),
##         (else_try),
##           (eq, ":cur_walker", 2),
##           (assign, reg2, ":walker_troop"),
##         (else_try),
##           (eq, ":cur_walker", 3),
##           (assign, reg3, ":walker_troop"),
##         (else_try),
##           (eq, ":cur_walker", 4),
##           (assign, reg4, ":walker_troop"),
##         (else_try),
##           (eq, ":cur_walker", 5),
##           (assign, reg5, ":walker_troop"),
##         (else_try),
##           (eq, ":cur_walker", 6),
##           (assign, reg6, ":walker_troop"),
##         (else_try),
##           (eq, ":cur_walker", 7),
##           (assign, reg7, ":walker_troop"),
##         (try_end),
##       (try_end),
##       (shuffle_range, 0, 8),
##       (set_visitor, 32, reg0),
##       (set_visitor, 33, reg1),
##       (set_visitor, 34, reg2),
##       (set_visitor, 35, reg3),
##       (set_visitor, 36, reg4),
##       (set_visitor, 37, reg5),
##       (set_visitor, 38, reg6),
##       (set_visitor, 39, reg7),
##     (try_end),
  ]),


  # script_cf_enter_center_location_bandit_check
  # Input: none
  # Output: none
  ("cf_enter_center_location_bandit_check",
    [
      (neq, "$town_nighttime", 0),
      (party_slot_ge, "$current_town", slot_center_has_bandits, 1),
      (eq, "$g_defending_against_siege", 0),#Skip if the center is under siege (because of resting)
      (eq, "$sneaked_into_town", 0),#Skip if sneaked
      
	  (try_begin),
        (this_or_next|party_slot_eq, "$current_town", slot_party_type, spt_village),
		(party_slot_eq, "$current_town", slot_party_type, spt_castle),
        (party_get_slot, ":cur_scene", "$current_town", slot_castle_exterior),
      (else_try),
        (party_get_slot, ":cur_scene", "$current_town", slot_town_center),
      (try_end),

      (modify_visitors_at_site, ":cur_scene"),
      (reset_visitors),            

      (set_jump_mission, "mt_bandits_at_night"),
      (try_begin),
		(party_slot_eq, "$current_town", slot_party_type, spt_town),
        (assign, "$town_entered", 1),
        (assign, "$all_doors_locked", 1),
      (try_end),

      (set_jump_entry, 2),

      (display_message, "@You have run into a trap!", 0xFFFF2222),
      (display_message, "@You are attacked by a group of bandits!", 0xFFFF2222),

      (jump_to_scene, ":cur_scene"),
      (change_screen_mission),
      ]),
  
  # script_init_town_agent
  # Input: none
  # Output: none
  ("init_town_agent",
    [
      (store_script_param, ":agent_no", 1),
      (agent_get_troop_id, ":troop_no", ":agent_no"),
      (set_fixed_point_multiplier, 100),
      (assign, ":stand_animation", -1),
      (try_begin),
        (this_or_next|is_between, ":troop_no", armor_merchants_begin, armor_merchants_end),
        (is_between, ":troop_no", weapon_merchants_begin, weapon_merchants_end),
        (try_begin),
          (troop_get_type, ":cur_troop_gender", ":troop_no"),
          (eq, ":cur_troop_gender", 0),
          (agent_set_animation, ":agent_no", "anim_stand_townguard"),
        (else_try),
          (agent_set_animation, ":agent_no", "anim_stand_townguard"),
        (try_end),
      (else_try),
        (is_between, ":troop_no", kingdom_ladies_begin, kingdom_ladies_end),
        (assign, ":stand_animation", "anim_stand_lady"),
      (else_try),
        (is_between, ":troop_no", kingdom_heroes_begin, kingdom_heroes_end),
        (assign, ":stand_animation", "anim_stand_lord"),
      (else_try),
        (is_between, ":troop_no", soldiers_begin, soldiers_end),
        (assign, ":stand_animation", "anim_stand_townguard"),
      (try_end),
      (try_begin),
        (ge, ":stand_animation", 0),
        (agent_set_stand_animation, ":agent_no", ":stand_animation"),
        (agent_set_animation, ":agent_no", ":stand_animation"),
        (store_random_in_range, ":random_no", 0, 100),
        (agent_set_animation_progress, ":agent_no", ":random_no"),
      (try_end),
      ]),

  # script_init_town_walker_agents
  # Input: none
  # Output: none
  ("init_town_walker_agents",
    [(assign, ":num_walkers", 0),
     (try_for_agents, ":cur_agent"),
       (agent_get_troop_id, ":cur_troop", ":cur_agent"),
       (is_between, ":cur_troop", walkers_begin, walkers_end),
       (val_add, ":num_walkers", 1),
       (agent_get_position, pos1, ":cur_agent"),
       (try_for_range, ":i_e_p", 9, 40),#Entry points
         (entry_point_get_position, pos2, ":i_e_p"),
         (get_distance_between_positions, ":distance", pos1, pos2),
         (lt, ":distance", 200),
         (agent_set_slot, ":cur_agent", 0, ":i_e_p"),
       (try_end),
       (call_script, "script_set_town_walker_destination", ":cur_agent"),
     (try_end),
  ]),

  # script_agent_get_town_walker_details
  # This script assumes this is one of town walkers. 
  # Input: agent_id
  # Output: reg0: town_walker_type, reg1: town_walker_dna
  ("agent_get_town_walker_details",
    [(store_script_param, ":agent_no", 1),
     (agent_get_entry_no, ":entry_no", ":agent_no"),
     (store_sub, ":walker_no", ":entry_no", town_walker_entries_start),

     (store_add, ":type_slot", slot_center_walker_0_type, ":walker_no"),
     (party_get_slot, ":walker_type", "$current_town", ":type_slot"),
     (store_add, ":dna_slot", slot_center_walker_0_dna,  ":walker_no"),
     (party_get_slot, ":walker_dna", "$current_town", ":dna_slot"),
     (assign, reg0, ":walker_type"),
     (assign, reg1, ":walker_dna"),
     (assign, reg2, ":walker_no"),
  ]),


  # script_tick_town_walkers
  # Input: none
  # Output: none
  ("tick_town_walkers",
    [(try_for_agents, ":cur_agent"),
       (agent_get_troop_id, ":cur_troop", ":cur_agent"),
       (is_between, ":cur_troop", walkers_begin, walkers_end),
       (agent_get_slot, ":target_entry_point", ":cur_agent", 0),
       (entry_point_get_position, pos1, ":target_entry_point"),
       (try_begin),
         (lt, ":target_entry_point", 32),
         (init_position, pos2),
         (position_set_y, pos2, 250),
         (position_transform_position_to_parent, pos1, pos1, pos2),
       (try_end),
       (agent_get_position, pos2, ":cur_agent"),
       (get_distance_between_positions, ":distance", pos1, pos2),
       (lt, ":distance", 400),
       (assign, ":random_no", 0),
       (try_begin),
         (lt, ":target_entry_point", 32),
         (store_random_in_range, ":random_no", 0, 100),
       (try_end),
       (lt, ":random_no", 20),
       (call_script, "script_set_town_walker_destination", ":cur_agent"),
     (try_end),
  ]),


  # script_set_town_walker_destination
  # Input: arg1 = agent_no
  # Output: none
  ("set_town_walker_destination",
    [(store_script_param_1, ":agent_no"),
     (assign, reg0, 9),
     (assign, reg1, 10),
     (assign, reg2, 12),
     (assign, reg3, 32),
     (assign, reg4, 33),
     (assign, reg5, 34),
     (assign, reg6, 35),
     (assign, reg7, 36),
     (assign, reg8, 37),
     (assign, reg9, 38),
     (assign, reg10, 39),
     (try_for_agents, ":cur_agent"),
       (agent_get_troop_id, ":cur_troop", ":cur_agent"),
       (is_between, ":cur_troop", walkers_begin, walkers_end),
       (agent_get_slot, ":target_entry_point", ":cur_agent", 0),
       (try_begin),
         (eq, ":target_entry_point", 9),
         (assign, reg0, 0),
       (else_try),
         (eq, ":target_entry_point", 10),
         (assign, reg1, 0),
       (else_try),
         (eq, ":target_entry_point", 12),
         (assign, reg2, 0),
       (else_try),
         (eq, ":target_entry_point", 32),
         (assign, reg3, 0),
       (else_try),
         (eq, ":target_entry_point", 33),
         (assign, reg4, 0),
       (else_try),
         (eq, ":target_entry_point", 34),
         (assign, reg5, 0),
       (else_try),
         (eq, ":target_entry_point", 35),
         (assign, reg6, 0),
       (else_try),
         (eq, ":target_entry_point", 36),
         (assign, reg7, 0),
       (else_try),
         (eq, ":target_entry_point", 37),
         (assign, reg8, 0),
       (else_try),
         (eq, ":target_entry_point", 38),
         (assign, reg9, 0),
       (else_try),
         (eq, ":target_entry_point", 39),
         (assign, reg10, 0),
       (try_end),
     (try_end),
     (assign, ":try_limit", 100),
     (assign, ":target_entry_point", 0),
     (try_for_range, ":unused", 0, ":try_limit"),
       (shuffle_range, 0, 11),
       (gt, reg0, 0),
       (assign, ":target_entry_point", reg0),
       (assign, ":try_limit", 0),
     (try_end),
     (try_begin),
       (gt, ":target_entry_point", 0),
       (agent_set_slot, ":agent_no", 0, ":target_entry_point"),
       (entry_point_get_position, pos1, ":target_entry_point"),
       (try_begin),
         (lt, ":target_entry_point", 32),
         (init_position, pos2),
         (position_set_y, pos2, 250),
         (position_transform_position_to_parent, pos1, pos1, pos2),
       (try_end),
       (agent_set_scripted_destination, ":agent_no", pos1, 0),
       (agent_set_speed_limit, ":agent_no", 5),
     (try_end),
  ]),

  # script_town_init_doors
  # Input: door_state (-1 = closed, 1 = open, 0 = use $town_nighttime)
  # Output: none (required for siege mission templates)
  ("town_init_doors",
   [(store_script_param, ":door_state", 1),
    (try_begin),
      (assign, ":continue", 0),
      (try_begin),
        (eq, ":door_state", 1),
        (assign, ":continue", 1),
      (else_try),
        (eq, ":door_state", 0),
        (eq, "$town_nighttime", 0),
        (assign, ":continue", 1),
      (try_end),
      (eq, ":continue", 1),# open doors
      (assign, ":end_cond", 1),
      (try_for_range, ":i_instance", 0, ":end_cond"),
        (scene_prop_get_instance, ":object", "spr_towngate_door_left", ":i_instance"),
        (ge, ":object", 0),
        (val_add, ":end_cond", 1),
        (prop_instance_get_position, pos1, ":object"),
        (position_rotate_z, pos1, -100),
        (prop_instance_animate_to_position, ":object", pos1, 1),
      (try_end),
      (assign, ":end_cond", 1),
      (try_for_range, ":i_instance", 0, ":end_cond"),
        (scene_prop_get_instance, ":object", "spr_towngate_rectangle_door_left", ":i_instance"),
        (ge, ":object", 0),
        (val_add, ":end_cond", 1),
        (prop_instance_get_position, pos1, ":object"),
        (position_rotate_z, pos1, -80),
        (prop_instance_animate_to_position, ":object", pos1, 1),
      (try_end),
      (assign, ":end_cond", 1),
      (try_for_range, ":i_instance", 0, ":end_cond"),
        (scene_prop_get_instance, ":object", "spr_towngate_door_right", ":i_instance"),
        (ge, ":object", 0),
        (val_add, ":end_cond", 1),
        (prop_instance_get_position, pos1, ":object"),
        (position_rotate_z, pos1, 100),
        (prop_instance_animate_to_position, ":object", pos1, 1),
      (try_end),
      (assign, ":end_cond", 1),
      (try_for_range, ":i_instance", 0, ":end_cond"),
        (scene_prop_get_instance, ":object", "spr_towngate_rectangle_door_right", ":i_instance"),
        (ge, ":object", 0),
        (val_add, ":end_cond", 1),
        (prop_instance_get_position, pos1, ":object"),
        (position_rotate_z, pos1, 80),
        (prop_instance_animate_to_position, ":object", pos1, 1),
      (try_end),
    (try_end),
  ]),

  # script_siege_init_ai_and_belfry
  # Input: none
  # Output: none (required for siege mission templates)
  ("cf_siege_init_ai_and_belfry",
   [(assign, "$cur_belfry_pos", 50),
    (assign, ":cur_belfry_object_pos", slot_scene_belfry_props_begin),
    (store_current_scene, ":cur_scene"),
    #Collecting belfry objects
    (try_for_range, ":i_belfry_instance", 0, 3),
      (scene_prop_get_instance, ":belfry_object", "spr_belfry_a", ":i_belfry_instance"),
      (ge, ":belfry_object", 0),
      (scene_set_slot, ":cur_scene", ":cur_belfry_object_pos", ":belfry_object"),
      (val_add, ":cur_belfry_object_pos", 1),
    (try_end),
    (try_for_range, ":i_belfry_instance", 0, 3),
      (scene_prop_get_instance, ":belfry_object", "spr_belfry_platform_a", ":i_belfry_instance"),
      (ge, ":belfry_object", 0),
      (scene_set_slot, ":cur_scene", ":cur_belfry_object_pos", ":belfry_object"),
      (val_add, ":cur_belfry_object_pos", 1),
    (try_end),
    (try_for_range, ":i_belfry_instance", 0, 3),
      (scene_prop_get_instance, ":belfry_object", "spr_belfry_platform_b", ":i_belfry_instance"),
      (ge, ":belfry_object", 0),
      (scene_set_slot, ":cur_scene", ":cur_belfry_object_pos", ":belfry_object"),
      (val_add, ":cur_belfry_object_pos", 1),
    (try_end),
    (assign, "$belfry_rotating_objects_begin", ":cur_belfry_object_pos"),
    (try_for_range, ":i_belfry_instance", 0, 5),
      (scene_prop_get_instance, ":belfry_object", "spr_belfry_wheel", ":i_belfry_instance"),
      (ge, ":belfry_object", 0),
      (scene_set_slot, ":cur_scene", ":cur_belfry_object_pos", ":belfry_object"),
      (val_add, ":cur_belfry_object_pos", 1),
    (try_end),
    (assign, "$last_belfry_object_pos", ":cur_belfry_object_pos"),

    #Lifting up the platform  at the beginning
      (scene_prop_get_instance, ":belfry_object_to_rotate", "spr_belfry_platform_a", 0),
    
    #Moving the belfry objects to their starting position
    (entry_point_get_position,pos1,55),
    (entry_point_get_position,pos3,50),
    (try_for_range, ":i_belfry_object_pos", slot_scene_belfry_props_begin, "$last_belfry_object_pos"),
      (assign, ":pos_no", pos_belfry_begin),
      (val_add, ":pos_no", ":i_belfry_object_pos"),
      (val_sub, ":pos_no", slot_scene_belfry_props_begin),
      (scene_get_slot, ":cur_belfry_object", ":cur_scene", ":i_belfry_object_pos"),
      (prop_instance_get_position, pos2, ":cur_belfry_object"),
      (try_begin),
        (eq, ":cur_belfry_object", ":belfry_object_to_rotate"),
        (position_rotate_x, pos2, 90),
      (try_end),
      (position_transform_position_to_local, ":pos_no", pos1, pos2),
      (position_transform_position_to_parent, pos4, pos3, ":pos_no"),
      (prop_instance_animate_to_position, ":cur_belfry_object", pos4, 1),
    (try_end),
    (assign, "$belfry_positioned", 0),
    (assign, "$belfry_num_slots_positioned", 0),
    (assign, "$belfry_num_men_pushing", 0),
  ]),

  # script_cf_siege_move_belfry
  # Input: none
  # Output: none (required for siege mission templates)
  ("cf_siege_move_belfry",
   [(neq, "$last_belfry_object_pos", slot_scene_belfry_props_begin),
    (entry_point_get_position,pos1,50),
    (entry_point_get_position,pos4,55),
    (get_distance_between_positions, ":total_distance", pos4, pos1),
    (store_current_scene, ":cur_scene"),
    (scene_get_slot, ":first_belfry_object", ":cur_scene", slot_scene_belfry_props_begin),
    (prop_instance_get_position, pos2, ":first_belfry_object"),
    (entry_point_get_position,pos1,"$cur_belfry_pos"),
    (position_transform_position_to_parent, pos3, pos1, pos_belfry_begin),
    (position_transform_position_to_parent, pos5, pos4, pos_belfry_begin),
    (get_distance_between_positions, ":cur_distance", pos2, pos3),
    (get_distance_between_positions, ":distance_left", pos2, pos5),
    (try_begin),
      (le, ":cur_distance", 10),
      (val_add, "$cur_belfry_pos", 1),
      (entry_point_get_position,pos1,"$cur_belfry_pos"),
      (position_transform_position_to_parent, pos3, pos1, pos_belfry_begin),
      (get_distance_between_positions, ":cur_distance", pos2, pos3),
    (try_end),
    (neq, "$cur_belfry_pos", 50),

    (assign, ":base_speed", 20),
    (store_div, ":slow_range", ":total_distance", 60),
    (store_sub, ":distance_moved", ":total_distance", ":distance_left"),

    (try_begin),
      (lt, ":distance_moved", ":slow_range"),
      (store_mul, ":base_speed", ":distance_moved", -60),
      (val_div, ":base_speed", ":slow_range"),
      (val_add, ":base_speed", 80),
    (else_try),
      (lt, ":distance_left", ":slow_range"),
      (store_mul, ":base_speed", ":distance_left", -60),
      (val_div, ":base_speed", ":slow_range"),
      (val_add, ":base_speed", 80),
    (try_end),
    (store_mul, ":belfry_speed", ":cur_distance", ":base_speed"),
    (try_begin),
      (eq, "$belfry_num_men_pushing", 0),
      (assign, ":belfry_speed", 1000000),
    (else_try),
      (val_div, ":belfry_speed", "$belfry_num_men_pushing"),
    (try_end),

    (try_begin),
      (le, "$cur_belfry_pos", 55),
      (init_position, pos3),
      (position_rotate_x, pos3, ":distance_moved"),
      (scene_get_slot, ":base_belfry_object", ":cur_scene", slot_scene_belfry_props_begin),
      (prop_instance_get_position, pos4, ":base_belfry_object"),
      (entry_point_get_position,pos1,"$cur_belfry_pos"),
      (try_for_range, ":i_belfry_object_pos", slot_scene_belfry_props_begin, "$last_belfry_object_pos"),
        (scene_get_slot, ":cur_belfry_object", ":cur_scene", ":i_belfry_object_pos"),
        (try_begin),
          (ge, ":i_belfry_object_pos", "$belfry_rotating_objects_begin"),
          (prop_instance_get_starting_position, pos5, ":base_belfry_object"),
          (prop_instance_get_starting_position, pos6, ":cur_belfry_object"),
          (position_transform_position_to_local, pos7, pos5, pos6),
          (position_transform_position_to_parent, pos5, pos4, pos7),
          (position_transform_position_to_parent, pos6, pos5, pos3),
          (prop_instance_set_position, ":cur_belfry_object", pos6),
        (else_try),
          (assign, ":pos_no", pos_belfry_begin),
          (val_add, ":pos_no", ":i_belfry_object_pos"),
          (val_sub, ":pos_no", slot_scene_belfry_props_begin),
          (position_transform_position_to_parent, pos2, pos1, ":pos_no"),
          (prop_instance_animate_to_position, ":cur_belfry_object", pos2, ":belfry_speed"),
        (try_end),
      (try_end),
    (try_end),
    (gt, "$cur_belfry_pos", 55),
    (assign, "$belfry_positioned", 1),
  ]),

  # script_cf_siege_rotate_belfry_platform
  # Input: none
  # Output: none (required for siege mission templates)
  ("cf_siege_rotate_belfry_platform",
   [(eq, "$belfry_positioned", 1),
    (scene_prop_get_instance, ":belfry_object", "spr_belfry_platform_a", 0),
    (prop_instance_get_position, pos1, ":belfry_object"),
    (position_rotate_x, pos1, -90),
    (prop_instance_animate_to_position, ":belfry_object", pos1, 400),
    (assign, "$belfry_positioned", 2),
  ]),

  # script_cf_siege_assign_men_to_belfry
  # Input: none
  # Output: none (required for siege mission templates)
  ("cf_siege_assign_men_to_belfry",
   [
    (store_mission_timer_a, ":cur_seconds"),
    (neq, "$last_belfry_object_pos", slot_scene_belfry_props_begin),
    (assign, ":end_trigger", 0),
    (try_begin),
      (lt, "$belfry_positioned", 3),
      (get_player_agent_no, ":player_agent"),
      (store_current_scene, ":cur_scene"),
      (scene_get_slot, ":first_belfry_object", ":cur_scene", slot_scene_belfry_props_begin),
      (prop_instance_get_position, pos2, ":first_belfry_object"),
      (assign, ":slot_1_positioned", 0),
      (assign, ":slot_2_positioned", 0),
      (assign, ":slot_3_positioned", 0),
      (assign, ":slot_4_positioned", 0),
      (assign, ":slot_5_positioned", 0),
      (assign, ":slot_6_positioned", 0),
      (assign, "$belfry_num_slots_positioned", 0),
      (assign, "$belfry_num_men_pushing", 0),
      (try_for_agents, ":cur_agent"),
        (agent_is_alive, ":cur_agent"),
        (agent_is_human, ":cur_agent"),
        (try_begin),
          (agent_get_slot, ":x_pos", ":cur_agent", slot_agent_target_x_pos),
          (neq, ":x_pos", 0),
          (agent_get_slot, ":y_pos", ":cur_agent", slot_agent_target_y_pos),
          (try_begin),
            (eq, ":x_pos", -600),
            (try_begin),
              (eq, ":y_pos", 0),
              (assign, ":slot_1_positioned", 1),
            (else_try),
              (eq, ":y_pos", -200),
              (assign, ":slot_2_positioned", 1),
            (else_try),
              (assign, ":slot_3_positioned", 1),
            (try_end),
          (else_try),
            (try_begin),
              (eq, ":y_pos", 0),
              (assign, ":slot_4_positioned", 1),
            (else_try),
              (eq, ":y_pos", -200),
              (assign, ":slot_5_positioned", 1),
            (else_try),
              (assign, ":slot_6_positioned", 1),
            (try_end),
          (try_end),
          (val_add, "$belfry_num_slots_positioned", 1),
          (init_position, pos1),
          (position_move_x, pos1, ":x_pos"),
          (position_move_y, pos1, ":y_pos"),
          (init_position, pos3),
          (position_move_x, pos3, ":x_pos"),
          (position_move_y, pos3, -1000),
          (position_transform_position_to_parent, pos4, pos2, pos1),
          (position_transform_position_to_parent, pos5, pos2, pos3),
          (agent_get_position, pos6, ":cur_agent"),
          (get_distance_between_positions, ":target_distance", pos6, pos4),
          (get_distance_between_positions, ":waypoint_distance", pos6, pos5),
          (try_begin),
            (this_or_next|lt, ":target_distance", ":waypoint_distance"),
            (lt, ":waypoint_distance", 600),
            (agent_set_scripted_destination, ":cur_agent", pos4, 1),
          (else_try),
            (agent_set_scripted_destination, ":cur_agent", pos5, 1),
          (try_end),
          (try_begin),
            (le, ":target_distance", 300),
            (val_add, "$belfry_num_men_pushing", 1),
          (try_end),
        (else_try),
          (agent_get_team, ":cur_agent_team", ":cur_agent"),
          (this_or_next|eq, "$attacker_team", ":cur_agent_team"),
          (             eq, "$attacker_team_2", ":cur_agent_team"),
          (try_begin),
            (gt, ":cur_seconds", 20),
            (agent_get_position, pos1, ":cur_agent"),
            (agent_set_scripted_destination, ":cur_agent", pos1, 0),
          (else_try),
            (try_begin),
              (team_get_movement_order, ":order1", "$attacker_team", grc_infantry),
              (team_get_movement_order, ":order2", "$attacker_team", grc_cavalry),
              (team_get_movement_order, ":order3", "$attacker_team", grc_archers),
              (this_or_next|neq, ":order1", mordr_stand_ground),
              (this_or_next|neq, ":order2", mordr_stand_ground),
              (neq, ":order3", mordr_stand_ground),
              (set_show_messages, 0),
              (team_give_order, "$attacker_team", grc_everyone, mordr_stand_ground),
              (set_show_messages, 1),
            (try_end),
          (try_end),
        (try_end),
      (try_end),
      (try_begin),
        (lt, "$belfry_num_slots_positioned", 6),
        (try_for_agents, ":cur_agent"),
          (agent_is_alive, ":cur_agent"),
          (agent_get_team, ":cur_agent_team", ":cur_agent"),
          (this_or_next|eq, "$attacker_team", ":cur_agent_team"),
          (eq, "$attacker_team_2", ":cur_agent_team"),
          (neq, ":player_agent", ":cur_agent"),
          (agent_get_class, ":agent_class", ":cur_agent"),
          (this_or_next|eq, ":agent_class", grc_infantry),
          (eq, ":agent_class", grc_cavalry),
          (agent_get_slot, ":x_pos", ":cur_agent", 1),
          (eq, ":x_pos", 0),
          (assign, ":y_pos", 0),
          (try_begin),
            (eq, ":slot_1_positioned", 0),
            (assign, ":x_pos", -600),
            (assign, ":y_pos", 0),
            (val_add, ":slot_1_positioned", 1),
          (else_try),
            (eq, ":slot_2_positioned", 0),
            (assign, ":x_pos", -600),
            (assign, ":y_pos", -200),
            (val_add, ":slot_2_positioned", 1),
          (else_try),
            (eq, ":slot_3_positioned", 0),
            (assign, ":x_pos", -600),
            (assign, ":y_pos", -400),
            (val_add, ":slot_3_positioned", 1),
          (else_try),
            (eq, ":slot_4_positioned", 0),
            (assign, ":x_pos", 600),
            (assign, ":y_pos", 0),
            (val_add, ":slot_4_positioned", 1),
          (else_try),
            (eq, ":slot_5_positioned", 0),
            (assign, ":x_pos", 600),
            (assign, ":y_pos", -200),
            (val_add, ":slot_5_positioned", 1),
          (else_try),
            (eq, ":slot_6_positioned", 0),
            (assign, ":x_pos", 600),
            (assign, ":y_pos", -400),
            (val_add, ":slot_6_positioned", 1),
          (try_end),
          (val_add, "$belfry_num_slots_positioned", 1),
          (agent_set_slot, ":cur_agent", 1, ":x_pos"),
          (agent_set_slot, ":cur_agent", 2, ":y_pos"),
        (try_end),
      (try_end),
      (try_begin),
        (store_mission_timer_a, ":cur_timer"),
        (gt, ":cur_timer", 20),
        (lt, "$belfry_num_slots_positioned", 6),
        (try_for_agents, ":cur_agent"),
          (agent_is_alive, ":cur_agent"),
          (agent_get_team, ":cur_agent_team", ":cur_agent"),
          (this_or_next|eq, "$attacker_team", ":cur_agent_team"),
          (             eq, "$attacker_team_2", ":cur_agent_team"),
          (neq, ":player_agent", ":cur_agent"),
          (agent_get_slot, ":x_pos", ":cur_agent", 1),
          (eq, ":x_pos", 0),
          (assign, ":y_pos", 0),
          (try_begin),
            (eq, ":slot_1_positioned", 0),
            (assign, ":x_pos", -600),
            (assign, ":y_pos", 0),
            (val_add, ":slot_1_positioned", 1),
          (else_try),
            (eq, ":slot_2_positioned", 0),
            (assign, ":x_pos", -600),
            (assign, ":y_pos", -200),
            (val_add, ":slot_2_positioned", 1),
          (else_try),
            (eq, ":slot_3_positioned", 0),
            (assign, ":x_pos", -600),
            (assign, ":y_pos", -400),
            (val_add, ":slot_3_positioned", 1),
          (else_try),
            (eq, ":slot_4_positioned", 0),
            (assign, ":x_pos", 600),
            (assign, ":y_pos", 0),
            (val_add, ":slot_4_positioned", 1),
          (else_try),
            (eq, ":slot_5_positioned", 0),
            (assign, ":x_pos", 600),
            (assign, ":y_pos", -200),
            (val_add, ":slot_5_positioned", 1),
          (else_try),
            (eq, ":slot_6_positioned", 0),
            (assign, ":x_pos", 600),
            (assign, ":y_pos", -400),
            (val_add, ":slot_6_positioned", 1),
          (try_end),
          (val_add, "$belfry_num_slots_positioned", 1),
          (agent_set_slot, ":cur_agent", 1, ":x_pos"),
          (agent_set_slot, ":cur_agent", 2, ":y_pos"),
        (try_end),
      (try_end),
    (else_try),
      (assign, ":end_trigger", 1),
      (try_for_agents, ":cur_agent"),
        (agent_clear_scripted_mode, ":cur_agent"),
      (try_end),
      (set_show_messages, 0),
      (team_give_order, "$attacker_team", grc_everyone, mordr_charge),
      (set_show_messages, 1),
    (try_end),
    (eq, ":end_trigger", 1),
  ]),

  # script_siege_move_archers_to_archer_positions
  # Input: none
  # Output: none
  ("siege_move_archers_to_archer_positions",
   [
     (try_for_agents, ":agent_no"),
       (agent_is_alive, ":agent_no"),
       (agent_slot_eq, ":agent_no", slot_agent_is_not_reinforcement, 0),
       (agent_is_defender, ":agent_no"),
       (agent_get_class, ":agent_class", ":agent_no"),
       (agent_get_troop_id, ":agent_troop", ":agent_no"),
       (eq, ":agent_class", grc_archers),
       (try_begin),
         (agent_slot_eq, ":agent_no", slot_agent_target_entry_point, 0),
         (store_random_in_range, ":random_entry_point", 40, 44),
         (agent_set_slot, ":agent_no", slot_agent_target_entry_point, ":random_entry_point"),
       (try_end),
       (try_begin),
         (agent_get_position, pos0, ":agent_no"),
         (entry_point_get_position, pos1, ":random_entry_point"),
         (get_distance_between_positions, ":dist", pos0, pos1),
         (lt, ":dist", 300),
         (agent_clear_scripted_mode, ":agent_no"),
         (agent_set_slot, ":agent_no", slot_agent_is_in_scripted_mode, 0),
         (agent_set_slot, ":agent_no", slot_agent_is_not_reinforcement, 1),
         (str_store_troop_name, s1, ":agent_troop"),
         (assign, reg0, ":agent_no"),
#         (display_message, "@{s1} ({reg0}) reached pos"),
       (else_try),
         (agent_get_simple_behavior, ":agent_sb", ":agent_no"),
         (agent_get_combat_state, ":agent_cs", ":agent_no"),
         (this_or_next|eq, ":agent_sb", aisb_ranged),
         (eq, ":agent_sb", aisb_go_to_pos),#scripted mode
         (eq, ":agent_cs", 7), # 7 = no visible targets (state for ranged units)
         (try_begin),
           (agent_slot_eq, ":agent_no", slot_agent_is_in_scripted_mode, 0),
           (agent_set_scripted_destination, ":agent_no", pos1, 0),
           (agent_set_slot, ":agent_no", slot_agent_is_in_scripted_mode, 1),
           (str_store_troop_name, s1, ":agent_troop"),
           (assign, reg0, ":agent_no"),
#           (display_message, "@{s1} ({reg0}) moving to pos"),
         (try_end),
       (else_try),
         (try_begin),
           (agent_slot_eq, ":agent_no", slot_agent_is_in_scripted_mode, 1),
           (agent_clear_scripted_mode, ":agent_no"),
           (agent_set_slot, ":agent_no", slot_agent_is_in_scripted_mode, 0),
           (str_store_troop_name, s1, ":agent_troop"),
           (assign, reg0, ":agent_no"),
#           (display_message, "@{s1} ({reg0}) seeing target or changed mode"),
         (try_end),
       (try_end),
     (try_end),
     ]),


  # script_store_movement_order_name_to_s1
  # Input: arg1 = team_no, arg2 = class_no
  # Output: s1 = order_name
  ("store_movement_order_name_to_s1",
   [(store_script_param_1, ":team_no"),
    (store_script_param_2, ":class_no"),
    (team_get_movement_order, ":cur_order", ":team_no", ":class_no"),
    (try_begin),
      (eq, ":cur_order", mordr_hold),
      (str_store_string, s1, "@Holding"),
    (else_try),
      (eq, ":cur_order", mordr_follow),
      (str_store_string, s1, "@Following"),
    (else_try),
      (eq, ":cur_order", mordr_charge),
      (str_store_string, s1, "@Charging"),
    (else_try),
      (eq, ":cur_order", mordr_advance),
      (str_store_string, s1, "@Advancing"),
    (else_try),
      (eq, ":cur_order", mordr_fall_back),
      (str_store_string, s1, "@Falling Back"),
    (else_try),
      (eq, ":cur_order", mordr_stand_closer),
      (str_store_string, s1, "@Standing Closer"),
    (else_try),
      (eq, ":cur_order", mordr_spread_out),
      (str_store_string, s1, "@Spreading Out"),
    (else_try),
      (eq, ":cur_order", mordr_stand_ground),
      (str_store_string, s1, "@Standing"),
    (else_try),
      (str_store_string, s1, "@N/A"),
    (try_end),
  ]),

  # script_store_riding_order_name_to_s1
  # Input: arg1 = team_no, arg2 = class_no
  # Output: s1 = order_name
  ("store_riding_order_name_to_s1",
   [(store_script_param_1, ":team_no"),
    (store_script_param_2, ":class_no"),
	(team_get_gap_distance, ":cur_gap_distance", ":team_no", ":class_no"),
	(try_begin),
      (eq, ":cur_gap_distance", 3),
	  (str_store_string, s1, "str_very_tight"),
    (else_try),
	  (eq, ":cur_gap_distance", 4),
	  (str_store_string, s1, "str_tight"),
	(else_try),
	  (eq, ":cur_gap_distance", 5),
	  (str_store_string, s1, "str_loose"),
	(else_try),
	  (eq, ":cur_gap_distance", 6),
	  (str_store_string, s1, "str_very_loose"),
	(else_try),
      (str_store_string, s1, "@N/A"),
    (try_end),
  ]),

  # script_store_weapon_usage_order_name_to_s1
  # Input: arg1 = team_no, arg2 = class_no
  # Output: s1 = order_name
  ("store_weapon_usage_order_name_to_s1",
   [(store_script_param_1, ":team_no"),
    (store_script_param_2, ":class_no"),
    (team_get_weapon_usage_order, ":cur_order", ":team_no", ":class_no"),
    #(team_get_hold_fire_order, ":cur_hold_fire", ":team_no", ":class_no"), #not used anymore
    (try_begin),
      (eq, ":cur_order", wordr_use_any_weapon),
      #(eq, ":cur_hold_fire", aordr_fire_at_will),
      (str_store_string, s1, "@Any Weapon"),
    (else_try),
      (eq, ":cur_order", wordr_use_blunt_weapons),
      #(eq, ":cur_hold_fire", aordr_fire_at_will),
      (str_store_string, s1, "@Blunt Weapons"),
	(else_try),
      (eq, ":cur_order", wordr_use_melee_weapons),
      (str_store_string, s1, "str_melee_weapons"),
	(else_try),
      (eq, ":cur_order", wordr_use_ranged_weapons),
      (str_store_string, s1, "str_ranged_weapons"),
#    (else_try),
#      (eq, ":cur_order", wordr_use_any_weapon),
#      (eq, ":cur_hold_fire", aordr_hold_your_fire),
#      (str_store_string, s1, "str_hold_fire"),
#    (else_try),
#      (eq, ":cur_order", wordr_use_blunt_weapons),
#      (eq, ":cur_hold_fire", aordr_hold_your_fire),
#      (str_store_string, s1, "str_blunt_hold_fire"),
    (else_try),
      (str_store_string, s1, "@N/A"),
    (try_end),
  ]),

  # script_team_give_order_from_order_panel
  # Input: arg1 = leader_agent_no, arg2 = class_no
  # Output: none
  ("team_give_order_from_order_panel",
   [(store_script_param_1, ":leader_agent_no"),
    (store_script_param_2, ":order"),
    (agent_get_team, ":team_no", ":leader_agent_no"),
    (set_show_messages, 0),
    (try_begin),
      (eq, "$g_formation_group0_selected", 1),
      (team_give_order, ":team_no", 0, ":order"),
    (try_end),
    (try_begin),
      (eq, "$g_formation_group1_selected", 1),
      (team_give_order, ":team_no", 1, ":order"),
    (try_end),
    (try_begin),
      (eq, "$g_formation_group2_selected", 1),
      (team_give_order, ":team_no", 2, ":order"),
    (try_end),
    (try_begin),
      (eq, "$g_formation_group3_selected", 1),
      (team_give_order, ":team_no", 3, ":order"),
    (try_end),
    (try_begin),
      (eq, "$g_formation_group4_selected", 1),
      (team_give_order, ":team_no", 4, ":order"),
    (try_end),
    (try_begin),
      (eq, "$g_formation_group5_selected", 1),
      (team_give_order, ":team_no", 5, ":order"),
    (try_end),
    (try_begin),
      (eq, "$g_formation_group6_selected", 1),
      (team_give_order, ":team_no", 6, ":order"),
    (try_end),
    (try_begin),
      (eq, "$g_formation_group7_selected", 1),
      (team_give_order, ":team_no", 7, ":order"),
    (try_end),
    (try_begin),
      (eq, "$g_formation_group8_selected", 1),
      (team_give_order, ":team_no", 8, ":order"),
    (try_end),

    (try_begin),
      (eq, ":order", mordr_hold),
      (agent_get_position, pos1, ":leader_agent_no"),
      (try_begin),
        (eq, "$g_formation_group0_selected", 1),
        (team_set_order_position, ":team_no", 0, pos1),
      (try_end),
      (try_begin),
        (eq, "$g_formation_group1_selected", 1),
        (team_set_order_position, ":team_no", 1, pos1),
      (try_end),
      (try_begin),
        (eq, "$g_formation_group2_selected", 1),
        (team_set_order_position, ":team_no", 2, pos1),
      (try_end),
      (try_begin),
        (eq, "$g_formation_group3_selected", 1),
        (team_set_order_position, ":team_no", 3, pos1),
      (try_end),
      (try_begin),
        (eq, "$g_formation_group4_selected", 1),
        (team_set_order_position, ":team_no", 4, pos1),
      (try_end),
      (try_begin),
        (eq, "$g_formation_group5_selected", 1),
        (team_set_order_position, ":team_no", 5, pos1),
      (try_end),
      (try_begin),
        (eq, "$g_formation_group6_selected", 1),
        (team_set_order_position, ":team_no", 6, pos1),
      (try_end),
      (try_begin),
        (eq, "$g_formation_group7_selected", 1),
        (team_set_order_position, ":team_no", 7, pos1),
      (try_end),
      (try_begin),
        (eq, "$g_formation_group8_selected", 1),
        (team_set_order_position, ":team_no", 8, pos1),
      (try_end),
    (try_end),
    (set_show_messages, 1),
  ]),  


  # script_update_order_panel
  # Input: arg1 = team_no
  # Output: none
  ("update_order_panel",
   [(store_script_param_1, ":team_no"),
    (set_fixed_point_multiplier, 1000),

    #ozan added
    (try_begin),
      (eq, "$group0_has_troops", 1),
      (call_script, "script_store_movement_order_name_to_s1", ":team_no", 0),
      (overlay_set_text, "$g_presentation_but0_movement", s1),
      (call_script, "script_store_riding_order_name_to_s1", ":team_no", 0),
      (overlay_set_text, "$g_presentation_but0_riding", s1),
      (call_script, "script_store_weapon_usage_order_name_to_s1", ":team_no", 0),
      (overlay_set_text, "$g_presentation_but0_weapon_usage", s1),
    (try_end),
    (try_begin),
      (eq, "$group1_has_troops", 1),
      (call_script, "script_store_movement_order_name_to_s1", ":team_no", 1),
      (overlay_set_text, "$g_presentation_but1_movement", s1),
      (call_script, "script_store_riding_order_name_to_s1", ":team_no", 1),
      (overlay_set_text, "$g_presentation_but1_riding", s1),
      (call_script, "script_store_weapon_usage_order_name_to_s1", ":team_no", 1),
      (overlay_set_text, "$g_presentation_but1_weapon_usage", s1),
    (try_end),
    (try_begin),
      (eq, "$group2_has_troops", 1),
      (call_script, "script_store_movement_order_name_to_s1", ":team_no", 2),
      (overlay_set_text, "$g_presentation_but2_movement", s1),
      (call_script, "script_store_riding_order_name_to_s1", ":team_no", 2),
      (overlay_set_text, "$g_presentation_but2_riding", s1),
      (call_script, "script_store_weapon_usage_order_name_to_s1", ":team_no", 2),
      (overlay_set_text, "$g_presentation_but2_weapon_usage", s1),
    (try_end),
    (try_begin),
      (eq, "$group3_has_troops", 1),
      (call_script, "script_store_movement_order_name_to_s1", ":team_no", 3),
      (overlay_set_text, "$g_presentation_but3_movement", s1),
      (call_script, "script_store_riding_order_name_to_s1", ":team_no", 3),
      (overlay_set_text, "$g_presentation_but3_riding", s1),
      (call_script, "script_store_weapon_usage_order_name_to_s1", ":team_no", 3),
      (overlay_set_text, "$g_presentation_but3_weapon_usage", s1),
    (try_end),
    (try_begin),
      (eq, "$group4_has_troops", 1),
      (call_script, "script_store_movement_order_name_to_s1", ":team_no", 4),
      (overlay_set_text, "$g_presentation_but4_movement", s1),
      (call_script, "script_store_riding_order_name_to_s1", ":team_no", 4),
      (overlay_set_text, "$g_presentation_but4_riding", s1),
      (call_script, "script_store_weapon_usage_order_name_to_s1", ":team_no", 4),
      (overlay_set_text, "$g_presentation_but4_weapon_usage", s1),
    (try_end),
    (try_begin),
      (eq, "$group5_has_troops", 1),
      (call_script, "script_store_movement_order_name_to_s1", ":team_no", 5),
      (overlay_set_text, "$g_presentation_but5_movement", s1),
      (call_script, "script_store_riding_order_name_to_s1", ":team_no", 5),
      (overlay_set_text, "$g_presentation_but5_riding", s1),
      (call_script, "script_store_weapon_usage_order_name_to_s1", ":team_no", 5),
      (overlay_set_text, "$g_presentation_but5_weapon_usage", s1),
    (try_end),
    (try_begin),
      (eq, "$group6_has_troops", 1),
      (call_script, "script_store_movement_order_name_to_s1", ":team_no", 6),
      (overlay_set_text, "$g_presentation_but6_movement", s1),
      (call_script, "script_store_riding_order_name_to_s1", ":team_no", 6),
      (overlay_set_text, "$g_presentation_but6_riding", s1),
      (call_script, "script_store_weapon_usage_order_name_to_s1", ":team_no", 6),
      (overlay_set_text, "$g_presentation_but6_weapon_usage", s1),
    (try_end),
    (try_begin),
      (eq, "$group7_has_troops", 1),
      (call_script, "script_store_movement_order_name_to_s1", ":team_no", 7),
      (overlay_set_text, "$g_presentation_but7_movement", s1),
      (call_script, "script_store_riding_order_name_to_s1", ":team_no", 7),
      (overlay_set_text, "$g_presentation_but7_riding", s1),
      (call_script, "script_store_weapon_usage_order_name_to_s1", ":team_no", 7),
      (overlay_set_text, "$g_presentation_but7_weapon_usage", s1),
    (try_end),
    (try_begin),
      (eq, "$group8_has_troops", 1),
      (call_script, "script_store_movement_order_name_to_s1", ":team_no", 8),
      (overlay_set_text, "$g_presentation_but8_movement", s1),
      (call_script, "script_store_riding_order_name_to_s1", ":team_no", 8),
      (overlay_set_text, "$g_presentation_but8_riding", s1),
      (call_script, "script_store_weapon_usage_order_name_to_s1", ":team_no", 8),
      (overlay_set_text, "$g_presentation_but8_weapon_usage", s1),
    (try_end),

    #ozan added
    (assign, ":stat_position_y", 660),
    (try_begin),
      (position_set_y, pos1, ":stat_position_y"),
      (eq, "$group0_has_troops", 1),
      (position_set_x, pos1, 270),
      (overlay_set_position, "$g_presentation_but0_movement", pos1),
      (position_set_x, pos1, 410),
      (overlay_set_position, "$g_presentation_but0_riding", pos1),
      (position_set_x, pos1, 550),
      (overlay_set_position, "$g_presentation_but0_weapon_usage", pos1),
      (val_add, ":stat_position_y", -40),
    (try_end),
    (try_begin),
      (position_set_y, pos1, ":stat_position_y"),
      (eq, "$group1_has_troops", 1),
      (position_set_x, pos1, 270),
      (overlay_set_position, "$g_presentation_but1_movement", pos1),
      (position_set_x, pos1, 410),
      (overlay_set_position, "$g_presentation_but1_riding", pos1),
      (position_set_x, pos1, 550),
      (overlay_set_position, "$g_presentation_but1_weapon_usage", pos1),
      (val_add, ":stat_position_y", -40),
    (try_end),
    (try_begin),
      (position_set_y, pos1, ":stat_position_y"),
      (eq, "$group2_has_troops", 1),
      (position_set_x, pos1, 270),
      (overlay_set_position, "$g_presentation_but2_movement", pos1),
      (position_set_x, pos1, 410),
      (overlay_set_position, "$g_presentation_but2_riding", pos1),
      (position_set_x, pos1, 550),
      (overlay_set_position, "$g_presentation_but2_weapon_usage", pos1),
      (val_add, ":stat_position_y", -40),
    (try_end),
    (try_begin),
      (position_set_y, pos1, ":stat_position_y"),
      (eq, "$group3_has_troops", 1),
      (position_set_x, pos1, 270),
      (overlay_set_position, "$g_presentation_but3_movement", pos1),
      (position_set_x, pos1, 410),
      (overlay_set_position, "$g_presentation_but3_riding", pos1),
      (position_set_x, pos1, 550),
      (overlay_set_position, "$g_presentation_but3_weapon_usage", pos1),
      (val_add, ":stat_position_y", -40),
    (try_end),
    (try_begin),
      (position_set_y, pos1, ":stat_position_y"),
      (eq, "$group4_has_troops", 1),
      (position_set_x, pos1, 270),
      (overlay_set_position, "$g_presentation_but4_movement", pos1),
      (position_set_x, pos1, 410),
      (overlay_set_position, "$g_presentation_but4_riding", pos1),
      (position_set_x, pos1, 550),
      (overlay_set_position, "$g_presentation_but4_weapon_usage", pos1),
      (val_add, ":stat_position_y", -40),
    (try_end),
    (try_begin),
      (position_set_y, pos1, ":stat_position_y"),
      (eq, "$group5_has_troops", 1),
      (position_set_x, pos1, 270),
      (overlay_set_position, "$g_presentation_but5_movement", pos1),
      (position_set_x, pos1, 410),
      (overlay_set_position, "$g_presentation_but5_riding", pos1),
      (position_set_x, pos1, 550),
      (overlay_set_position, "$g_presentation_but5_weapon_usage", pos1),
      (val_add, ":stat_position_y", -40),
    (try_end),
    (try_begin),
      (position_set_y, pos1, ":stat_position_y"),
      (eq, "$group6_has_troops", 1),
      (position_set_x, pos1, 270),
      (overlay_set_position, "$g_presentation_but6_movement", pos1),
      (position_set_x, pos1, 410),
      (overlay_set_position, "$g_presentation_but6_riding", pos1),
      (position_set_x, pos1, 550),
      (overlay_set_position, "$g_presentation_but6_weapon_usage", pos1),
      (val_add, ":stat_position_y", -40),
    (try_end),
    (try_begin),
      (position_set_y, pos1, ":stat_position_y"),
      (eq, "$group7_has_troops", 1),
      (position_set_x, pos1, 270),
      (overlay_set_position, "$g_presentation_but7_movement", pos1),
      (position_set_x, pos1, 410),
      (overlay_set_position, "$g_presentation_but7_riding", pos1),
      (position_set_x, pos1, 550),
      (overlay_set_position, "$g_presentation_but7_weapon_usage", pos1),
      (val_add, ":stat_position_y", -40),
    (try_end),
    (try_begin),
      (position_set_y, pos1, ":stat_position_y"),
      (eq, "$group8_has_troops", 1),
      (position_set_x, pos1, 270),
      (overlay_set_position, "$g_presentation_but8_movement", pos1),
      (position_set_x, pos1, 410),
      (overlay_set_position, "$g_presentation_but8_riding", pos1),
      (position_set_x, pos1, 550),
      (overlay_set_position, "$g_presentation_but8_weapon_usage", pos1),
      (val_add, ":stat_position_y", -40),
    (try_end),
  ]),

  # script_update_agent_position_on_map
  # Input: arg1 = agent_no, pos2 = map_size_pos
  # Output: none
  ("update_agent_position_on_map",
   [(store_script_param_1, ":agent_no"),
    (agent_get_slot, ":agent_overlay", ":agent_no", slot_agent_map_overlay_id),

    (get_player_agent_no, ":player_agent"),
    (try_begin),
      (le, ":agent_overlay", 0),
      (set_fixed_point_multiplier, 1000),
      (try_begin),
        (eq, ":agent_no", ":player_agent"),
        (create_mesh_overlay, reg1, "mesh_player_dot"),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, 500),
        (overlay_set_size, reg1, pos1),
      (else_try),
        (create_mesh_overlay, reg1, "mesh_white_dot"),
        (position_set_x, pos1, 200),
        (position_set_y, pos1, 200),
        (overlay_set_size, reg1, pos1),
      (try_end),
      (overlay_set_alpha, reg1, 0x88),
      (agent_set_slot, ":agent_no", slot_agent_map_overlay_id, reg1),
      (assign, ":agent_overlay", reg1),
    (try_end),

    (try_begin),
      (neq, ":agent_no", ":player_agent"),
      (agent_get_party_id, ":agent_party", ":agent_no"),
      (try_begin),
        (eq, ":agent_party", "p_main_party"),
        (agent_get_division, ":agent_division", ":agent_no"),
        (try_begin),
          (eq, ":agent_division", 0),
          (overlay_set_color, ":agent_overlay", 0x8d5220),
        (else_try),
          (eq, ":agent_division", 1),
          (overlay_set_color, ":agent_overlay", 0x34c6e4),
        (else_try),
          (eq, ":agent_division", 2),
          (overlay_set_color, ":agent_overlay", 0x569619),
        (else_try),
          (eq, ":agent_division", 3),
          (overlay_set_color, ":agent_overlay", 0xFFE500),
        (else_try),
          (eq, ":agent_division", 4),
          (overlay_set_color, ":agent_overlay", 0x990099),
        (else_try),
          (eq, ":agent_division", 5),
          (overlay_set_color, ":agent_overlay", 0x99FE80),
        (else_try),
          (eq, ":agent_division", 6),
          (overlay_set_color, ":agent_overlay", 0x9DEFFE),
        (else_try),
          (eq, ":agent_division", 7),
          (overlay_set_color, ":agent_overlay", 0xFECB9D),
        (else_try),
          (eq, ":agent_division", 8),
          (overlay_set_color, ":agent_overlay", 0xB19C9C),
        (try_end),
      (else_try),
        (agent_is_ally, ":agent_no"),
        (overlay_set_color, ":agent_overlay", 0x5555FF),
      (else_try),
        (overlay_set_color, ":agent_overlay", 0xFF0000),
      (try_end),
    (try_end),

    (try_begin),
      (eq, ":agent_no", ":player_agent"),
      (agent_get_look_position, pos1, ":agent_no"),
      (position_get_rotation_around_z, ":rot", pos1),
      (init_position, pos10),
      (position_rotate_z, pos10, ":rot"),
      (overlay_set_mesh_rotation, ":agent_overlay", pos10),
      (call_script, "script_convert_3d_pos_to_map_pos"),
    (else_try),
      (agent_get_position, pos1, ":agent_no"),
      (call_script, "script_convert_3d_pos_to_map_pos"),
    (try_end),
    (overlay_set_position, ":agent_overlay", pos0),
  ]),

  # script_convert_3d_pos_to_map_pos
  # Input: pos1 = 3d_pos, pos2 = map_size_pos
  # Output: pos0 = map_pos
  ("convert_3d_pos_to_map_pos",
   [(set_fixed_point_multiplier, 1000),
    (position_transform_position_to_local, pos3, pos2, pos1),
    (position_get_x, ":agent_x_pos", pos3),
    (position_get_y, ":agent_y_pos", pos3),
    (val_div, ":agent_x_pos", "$g_battle_map_scale"),
    (val_div, ":agent_y_pos", "$g_battle_map_scale"),
    (set_fixed_point_multiplier, 1000),
    (store_sub, ":map_x", 980, "$g_battle_map_width"),
    (store_sub, ":map_y", 730, "$g_battle_map_height"),
    (val_add, ":agent_x_pos", ":map_x"),
    (val_add, ":agent_y_pos", ":map_y"),
    (position_set_x, pos0, ":agent_x_pos"),
    (position_set_y, pos0, ":agent_y_pos"),
  ]),

  # script_update_order_flags_on_map
  # Input: none
  # Output: none
  ("update_order_flags_on_map",
   [(set_fixed_point_multiplier, 1000),
    (get_player_agent_no, ":player_agent"),
    (agent_get_team, ":player_team", ":player_agent"),

    (get_scene_boundaries, pos2, pos3),

    (team_get_movement_order, ":cur_order", ":player_team", grc_infantry),
    (try_begin),
      (eq, ":cur_order", mordr_hold),
      (team_get_order_position, pos1, ":player_team", grc_infantry),
      (call_script, "script_convert_3d_pos_to_map_pos"),
      (overlay_set_alpha, "$g_battle_map_infantry_order_flag", 0xFF),
      (overlay_set_position, "$g_battle_map_infantry_order_flag", pos0),
    (else_try),
      (overlay_set_alpha, "$g_battle_map_infantry_order_flag", 0),
    (try_end),
    (team_get_movement_order, ":cur_order", ":player_team", grc_archers),
    (try_begin),
      (eq, ":cur_order", mordr_hold),
      (team_get_order_position, pos1, ":player_team", grc_archers),
      (call_script, "script_convert_3d_pos_to_map_pos"),
      (overlay_set_alpha, "$g_battle_map_archers_order_flag", 0xFF),
      (overlay_set_position, "$g_battle_map_archers_order_flag", pos0),
    (else_try),
      (overlay_set_alpha, "$g_battle_map_archers_order_flag", 0),
    (try_end),
    (team_get_movement_order, ":cur_order", ":player_team", grc_cavalry),
    (try_begin),
      (eq, ":cur_order", mordr_hold),
      (team_get_order_position, pos1, ":player_team", grc_cavalry),
      (call_script, "script_convert_3d_pos_to_map_pos"),
      (overlay_set_alpha, "$g_battle_map_cavalry_order_flag", 0xFF),
      (overlay_set_position, "$g_battle_map_cavalry_order_flag", pos0),
    (else_try),
      (overlay_set_alpha, "$g_battle_map_cavalry_order_flag", 0),
    (try_end),
  ]),

  # script_update_order_panel_checked_classes
  # Input: none   
  # Output: none
  ("update_order_panel_checked_classes",
   [(get_player_agent_no, ":player_agent"),
    (agent_get_team, ":player_team", ":player_agent"),

    (try_begin),
      (eq, "$group0_has_troops", 1),
      (class_is_listening_order, ":player_team", 0),
      (overlay_set_val, "$g_presentation_obj_battle_check0", 1),
      (assign, "$g_formation_group0_selected", 1),
      (overlay_animate_to_alpha, "$g_presentation_obj_battle_but0", 250, 0x44),
    (else_try),
      (eq, "$group0_has_troops", 1),
      (overlay_set_val, "$g_presentation_obj_battle_check0", 0),
      (assign, "$g_formation_group0_selected", 0),
      (overlay_animate_to_alpha, "$g_presentation_obj_battle_but0", 250, 0),
    (try_end),
    (try_begin),
      (eq, "$group1_has_troops", 1),
      (class_is_listening_order, ":player_team", 1),
      (overlay_set_val, "$g_presentation_obj_battle_check1", 1),
      (assign, "$g_formation_group1_selected", 1),
      (overlay_animate_to_alpha, "$g_presentation_obj_battle_but1", 250, 0x44),
    (else_try),
      (eq, "$group1_has_troops", 1),
      (overlay_set_val, "$g_presentation_obj_battle_check1", 0),
      (assign, "$g_formation_group1_selected", 0),
      (overlay_animate_to_alpha, "$g_presentation_obj_battle_but1", 250, 0),
    (try_end),
    (try_begin),
      (eq, "$group2_has_troops", 1),
      (class_is_listening_order, ":player_team", 2),
      (overlay_set_val, "$g_presentation_obj_battle_check2", 1),
      (assign, "$g_formation_group2_selected", 1),
      (overlay_animate_to_alpha, "$g_presentation_obj_battle_but2", 250, 0x44),
    (else_try),
      (eq, "$group2_has_troops", 1),
      (overlay_set_val, "$g_presentation_obj_battle_check2", 0),
      (assign, "$g_formation_group2_selected", 0),
      (overlay_animate_to_alpha, "$g_presentation_obj_battle_but2", 250, 0),
    (try_end),
    (try_begin),
      (eq, "$group3_has_troops", 1),
      (class_is_listening_order, ":player_team", 3),
      (overlay_set_val, "$g_presentation_obj_battle_check3", 1),
      (assign, "$g_formation_group3_selected", 1),
      (overlay_animate_to_alpha, "$g_presentation_obj_battle_but3", 250, 0x44),
    (else_try),
      (eq, "$group3_has_troops", 1),
      (overlay_set_val, "$g_presentation_obj_battle_check3", 0),
      (assign, "$g_formation_group3_selected", 0),
      (overlay_animate_to_alpha, "$g_presentation_obj_battle_but3", 250, 0),
    (try_end),
    (try_begin),
      (eq, "$group4_has_troops", 1),
      (class_is_listening_order, ":player_team", 4),
      (overlay_set_val, "$g_presentation_obj_battle_check4", 1),
      (assign, "$g_formation_group4_selected", 1),
      (overlay_animate_to_alpha, "$g_presentation_obj_battle_but4", 250, 0x44),
    (else_try),
      (eq, "$group4_has_troops", 1),
      (overlay_set_val, "$g_presentation_obj_battle_check4", 0),
      (assign, "$g_formation_group4_selected", 0),
      (overlay_animate_to_alpha, "$g_presentation_obj_battle_but4", 250, 0),
    (try_end),
    (try_begin),
      (eq, "$group5_has_troops", 1),
      (class_is_listening_order, ":player_team", 5),
      (overlay_set_val, "$g_presentation_obj_battle_check5", 1),
      (assign, "$g_formation_group5_selected", 1),
      (overlay_animate_to_alpha, "$g_presentation_obj_battle_but5", 250, 0x44),
    (else_try),
      (eq, "$group5_has_troops", 1),
      (overlay_set_val, "$g_presentation_obj_battle_check5", 0),
      (assign, "$g_formation_group5_selected", 0),
      (overlay_animate_to_alpha, "$g_presentation_obj_battle_but5", 250, 0),
    (try_end),
    (try_begin),
      (eq, "$group6_has_troops", 1),
      (class_is_listening_order, ":player_team", 6),
      (overlay_set_val, "$g_presentation_obj_battle_check6", 1),
      (assign, "$g_formation_group6_selected", 1),
      (overlay_animate_to_alpha, "$g_presentation_obj_battle_but6", 250, 0x44),
    (else_try),
      (eq, "$group6_has_troops", 1),
      (overlay_set_val, "$g_presentation_obj_battle_check6", 0),
      (assign, "$g_formation_group6_selected", 0),
      (overlay_animate_to_alpha, "$g_presentation_obj_battle_but6", 250, 0),
    (try_end),
    (try_begin),
      (eq, "$group7_has_troops", 1),
      (class_is_listening_order, ":player_team", 7),
      (overlay_set_val, "$g_presentation_obj_battle_check7", 1),
      (assign, "$g_formation_group7_selected", 1),
      (overlay_animate_to_alpha, "$g_presentation_obj_battle_but7", 250, 0x44),
    (else_try),
      (eq, "$group7_has_troops", 1),
      (overlay_set_val, "$g_presentation_obj_battle_check7", 0),
      (assign, "$g_formation_group7_selected", 0),
      (overlay_animate_to_alpha, "$g_presentation_obj_battle_but7", 250, 0),
    (try_end),
    (try_begin),
      (eq, "$group8_has_troops", 1),
      (class_is_listening_order, ":player_team", 8),
      (overlay_set_val, "$g_presentation_obj_battle_check8", 1),
      (assign, "$g_formation_group8_selected", 1),
      (overlay_animate_to_alpha, "$g_presentation_obj_battle_but8", 250, 0x44),
    (else_try),
      (eq, "$group8_has_troops", 1),
      (overlay_set_val, "$g_presentation_obj_battle_check8", 0),
      (assign, "$g_formation_group8_selected", 0),
      (overlay_animate_to_alpha, "$g_presentation_obj_battle_but8", 250, 0),
    (try_end),
  ]),

  # script_update_order_panel_statistics_and_map
  # Input: none
  # Output: none
  ("update_order_panel_statistics_and_map", #TODO: Call this in every battle mission template, once per second
   [(set_fixed_point_multiplier, 1000),

    (assign, ":num_us_ready_group0", 0),
    (assign, ":num_us_ready_group1", 0),
    (assign, ":num_us_ready_group2", 0),
    (assign, ":num_us_ready_group3", 0),
    (assign, ":num_us_ready_group4", 0),
    (assign, ":num_us_ready_group5", 0),
    (assign, ":num_us_ready_group6", 0),
    (assign, ":num_us_ready_group7", 0),
    (assign, ":num_us_ready_group8", 0),

    (assign, ":num_us_ready_men", 0),
    (assign, ":num_us_wounded_men", 0),
    (assign, ":num_us_routed_men", 0),
    (assign, ":num_us_dead_men", 0),
    (assign, ":num_allies_ready_men", 0),
    (assign, ":num_allies_wounded_men", 0),
    (assign, ":num_allies_routed_men", 0),
    (assign, ":num_allies_dead_men", 0),
    (assign, ":num_enemies_ready_men", 0),
    (assign, ":num_enemies_wounded_men", 0),
    (assign, ":num_enemies_routed_men", 0),
    (assign, ":num_enemies_dead_men", 0),

    (get_scene_boundaries, pos2, pos3),

    (try_for_agents,":cur_agent"),
      (agent_is_human, ":cur_agent"),
      (agent_get_division, ":agent_division", ":cur_agent"),
      (agent_get_party_id, ":agent_party", ":cur_agent"),
      (agent_get_slot, ":agent_overlay", ":cur_agent", slot_agent_map_overlay_id),
      (try_begin),
        (eq, ":agent_party", "p_main_party"),
        (try_begin),
          (agent_is_alive, ":cur_agent"),
          (call_script, "script_update_agent_position_on_map", ":cur_agent"),          
          (try_begin),
            (eq, ":agent_division", 0),
            (val_add, ":num_us_ready_group0", 1),
            (eq, "$group0_has_troops", 1), #added to solve problem. test this.
          (else_try),
            (eq, ":agent_division", 1),
            (val_add, ":num_us_ready_group1", 1),
            (eq, "$group1_has_troops", 1), #added to solve problem.
          (else_try),
            (eq, ":agent_division", 2),
            (val_add, ":num_us_ready_group2", 1),
            (eq, "$group2_has_troops", 1), #added to solve problem.
          (else_try),
            (eq, ":agent_division", 3),
            (val_add, ":num_us_ready_group3", 1),
            (eq, "$group3_has_troops", 1), #added to solve problem.
          (else_try),
            (eq, ":agent_division", 4),
            (val_add, ":num_us_ready_group4", 1),
            (eq, "$group4_has_troops", 1), #added to solve problem.
          (else_try),
            (eq, ":agent_division", 5),
            (val_add, ":num_us_ready_group5", 1),
            (eq, "$group5_has_troops", 1), #added to solve problem.
          (else_try),
            (eq, ":agent_division", 6),
            (val_add, ":num_us_ready_group6", 1),
            (eq, "$group6_has_troops", 1), #added to solve problem.
          (else_try),
            (eq, ":agent_division", 7),
            (val_add, ":num_us_ready_group7", 1),
            (eq, "$group7_has_troops", 1), #added to solve problem.
          (else_try),
            (eq, ":agent_division", 8),
            (val_add, ":num_us_ready_group8", 1),
            (eq, "$group8_has_troops", 1), #added to solve problem.
          (try_end),
          (val_add, ":num_us_ready_men", 1),
        (else_try),
          (overlay_set_alpha, ":agent_overlay", 0),
          (agent_is_wounded, ":cur_agent"),
          (val_add, ":num_us_wounded_men", 1),
        (else_try),
          (agent_is_routed, ":cur_agent"),
          (val_add, ":num_us_routed_men", 1),
        (else_try),
          (val_add, ":num_us_dead_men", 1),
        (try_end),
      (else_try),
        (agent_is_ally, ":cur_agent"),
        (try_begin),
          (agent_is_alive, ":cur_agent"),
          (call_script, "script_update_agent_position_on_map", ":cur_agent"),
          (val_add, ":num_allies_ready_men", 1),
        (else_try),
          (overlay_set_alpha, ":agent_overlay", 0),
          (agent_is_wounded, ":cur_agent"),
          (val_add, ":num_allies_wounded_men", 1),
        (else_try),
          (agent_is_routed, ":cur_agent"),
          (val_add, ":num_allies_routed_men", 1),
        (else_try),
          (val_add, ":num_allies_dead_men", 1),
        (try_end),
      (else_try),
        (try_begin),
          (agent_is_alive, ":cur_agent"),
          (call_script, "script_update_agent_position_on_map", ":cur_agent"),
          (val_add, ":num_enemies_ready_men", 1),
        (else_try),
          (overlay_set_alpha, ":agent_overlay", 0),
          (agent_is_wounded, ":cur_agent"),
          (val_add, ":num_enemies_wounded_men", 1),
        (else_try),
          (agent_is_routed, ":cur_agent"),
          (val_add, ":num_enemies_routed_men", 1),
        (else_try),
          (val_add, ":num_enemies_dead_men", 1),
        (try_end),
      (try_end),
    (try_end),
    
    (assign, reg1, ":num_us_ready_group0"),
    (assign, reg2, ":num_us_ready_group1"),
    (assign, reg3, ":num_us_ready_group2"),
    (assign, reg4, ":num_us_ready_group3"),
    (assign, reg5, ":num_us_ready_group4"),
    (assign, reg6, ":num_us_ready_group5"),
    (assign, reg7, ":num_us_ready_group6"),
    (assign, reg8, ":num_us_ready_group7"),
    (assign, reg9, ":num_us_ready_group8"),
    (assign, reg10, ":num_us_ready_men"),
    (assign, reg11, ":num_us_wounded_men"),
    (assign, reg12, ":num_us_routed_men"),
    (assign, reg13, ":num_us_dead_men"),
    (assign, reg14, ":num_allies_ready_men"),
    (assign, reg15, ":num_allies_wounded_men"),
    (assign, reg16, ":num_allies_routed_men"),
    (assign, reg17, ":num_allies_dead_men"),
    (assign, reg18, ":num_enemies_ready_men"),
    (assign, reg19, ":num_enemies_wounded_men"),
    (assign, reg20, ":num_enemies_routed_men"),
    (assign, reg21, ":num_enemies_dead_men"),

    (try_begin),
      (eq, "$group0_has_troops", 1),
      (str_store_class_name, s1, 0),
      (overlay_set_text, "$g_presentation_obj_battle_name0", "str_s1_reg1"),
    (try_end),
    (try_begin),
      (eq, "$group1_has_troops", 1),
      (str_store_class_name, s1, 1),
      (overlay_set_text, "$g_presentation_obj_battle_name1", "str_s1_reg2"),
    (try_end),
    (try_begin),
      (eq, "$group2_has_troops", 1),
      (str_store_class_name, s1, 2),
      (overlay_set_text, "$g_presentation_obj_battle_name2", "str_s1_reg3"),
    (try_end),
    (try_begin),
      (eq, "$group3_has_troops", 1),
      (str_store_class_name, s1, 3),
      (overlay_set_text, "$g_presentation_obj_battle_name3", "str_s1_reg4"),
    (try_end),
    (try_begin),
      (eq, "$group4_has_troops", 1),
      (str_store_class_name, s1, 4),
      (overlay_set_text, "$g_presentation_obj_battle_name4", "str_s1_reg5"),
    (try_end),
    (try_begin),
      (eq, "$group5_has_troops", 1),
      (str_store_class_name, s1, 5),
      (overlay_set_text, "$g_presentation_obj_battle_name5", "str_s1_reg6"),
    (try_end),
    (try_begin),
      (eq, "$group6_has_troops", 1),
      (str_store_class_name, s1, 6),
      (overlay_set_text, "$g_presentation_obj_battle_name6", "str_s1_reg7"),
    (try_end),
    (try_begin),
      (eq, "$group7_has_troops", 1),
      (str_store_class_name, s1, 7),
      (overlay_set_text, "$g_presentation_obj_battle_name7", "str_s1_reg8"),
    (try_end),
    (try_begin),
      (eq, "$group8_has_troops", 1),
      (str_store_class_name, s1, 8),
      (overlay_set_text, "$g_presentation_obj_battle_name8", "str_s1_reg9"),
    (try_end),
    
    (overlay_set_text, "$g_battle_us_ready", "@{!}{reg10}"),
    (overlay_set_text, "$g_battle_us_wounded", "@{!}{reg11}"),
    (overlay_set_text, "$g_battle_us_routed", "@{!}{reg12}"),
    (overlay_set_text, "$g_battle_us_dead", "str_reg13"),
    (overlay_set_text, "$g_battle_allies_ready", "str_reg14"),
    (overlay_set_text, "$g_battle_allies_wounded", "str_reg15"),
    (overlay_set_text, "$g_battle_allies_routed", "str_reg16"),
    (overlay_set_text, "$g_battle_allies_dead", "str_reg17"),
    (overlay_set_text, "$g_battle_enemies_ready", "str_reg18"),
    (overlay_set_text, "$g_battle_enemies_wounded", "str_reg19"),
    (overlay_set_text, "$g_battle_enemies_routed", "str_reg20"),
    (overlay_set_text, "$g_battle_enemies_dead", "str_reg21"),

    (assign, ":stat_position_x", 675),
    (assign, ":stat_position_y", 280),
    (val_add, ":stat_position_x", 70),
    (val_add, ":stat_position_y", 60),
    (position_set_x, pos1, ":stat_position_x"),
    (position_set_y, pos1, ":stat_position_y"),
    (overlay_set_position, "$g_battle_us_ready", pos1),
    (val_add, ":stat_position_x", 70),
    (position_set_x, pos1, ":stat_position_x"),
    (overlay_set_position, "$g_battle_us_wounded", pos1),
    (val_add, ":stat_position_x", 70),
    (position_set_x, pos1, ":stat_position_x"),
    (overlay_set_position, "$g_battle_us_routed", pos1),
    (val_add, ":stat_position_x", 70),
    (position_set_x, pos1, ":stat_position_x"),
    (overlay_set_position, "$g_battle_us_dead", pos1),
    (val_add, ":stat_position_x", -210),
    (val_add, ":stat_position_y", -30),
    (position_set_x, pos1, ":stat_position_x"),
    (position_set_y, pos1, ":stat_position_y"),
    (overlay_set_position, "$g_battle_allies_ready", pos1),
    (val_add, ":stat_position_x", 70),
    (position_set_x, pos1, ":stat_position_x"),
    (overlay_set_position, "$g_battle_allies_wounded", pos1),
    (val_add, ":stat_position_x", 70),
    (position_set_x, pos1, ":stat_position_x"),
    (overlay_set_position, "$g_battle_allies_routed", pos1),
    (val_add, ":stat_position_x", 70),
    (position_set_x, pos1, ":stat_position_x"),
    (overlay_set_position, "$g_battle_allies_dead", pos1),
    (val_add, ":stat_position_x", -210),
    (val_add, ":stat_position_y", -30),
    (position_set_x, pos1, ":stat_position_x"),
    (position_set_y, pos1, ":stat_position_y"),
    (overlay_set_position, "$g_battle_enemies_ready", pos1),
    (val_add, ":stat_position_x", 70),
    (position_set_x, pos1, ":stat_position_x"),
    (overlay_set_position, "$g_battle_enemies_wounded", pos1),
    (val_add, ":stat_position_x", 70),
    (position_set_x, pos1, ":stat_position_x"),
    (overlay_set_position, "$g_battle_enemies_routed", pos1),
    (val_add, ":stat_position_x", 70),
    (position_set_x, pos1, ":stat_position_x"),
    (overlay_set_position, "$g_battle_enemies_dead", pos1),

    (call_script, "script_update_order_flags_on_map"),
  ]),

 # script_set_town_picture
  # Input: none
  # Output: none
  ("set_town_picture",
   [
    ]),


  # script_consume_food
  # Input: arg1: order of the food to be consumed
  # Output: none
  ("consume_food",
   [(store_script_param, ":selected_food", 1),
    (troop_get_inventory_capacity, ":capacity", "trp_player"),
    (try_for_range, ":cur_slot", 0, ":capacity"),
      (troop_get_inventory_slot, ":cur_item", "trp_player", ":cur_slot"),
      (is_between, ":cur_item", food_begin, food_end),
      (troop_get_inventory_slot_modifier, ":item_modifier", "trp_player", ":cur_slot"),
      (neq, ":item_modifier", imod_rotten),
      (item_slot_eq, ":cur_item", slot_item_is_checked, 0),
      (item_set_slot, ":cur_item", slot_item_is_checked, 1),
      (val_sub, ":selected_food", 1),
      (lt, ":selected_food", 0),
      (assign, ":capacity", 0),
      (troop_inventory_slot_get_item_amount, ":cur_amount", "trp_player", ":cur_slot"),
      (val_sub, ":cur_amount", 1),
      (troop_inventory_slot_set_item_amount, "trp_player", ":cur_slot", ":cur_amount"),
    (try_end),
    ]),

  # script_calculate_troop_score_for_center
  # Input: arg1 = troop_no, arg2 = center_no
  # Output: reg0 = score
  ("calculate_troop_score_for_center",
   [(store_script_param, ":troop_no", 1),
    (store_script_param, ":center_no", 2),
    (assign, ":num_center_points", 1),
    (try_for_range, ":cur_center", centers_begin, centers_end),
      (assign, ":center_owned", 0),
      (try_begin),
        (eq, ":troop_no", "trp_player"),
        (party_slot_eq, ":cur_center", slot_town_lord, stl_reserved_for_player),
        (assign, ":center_owned", 1),
      (try_end),
      (this_or_next|party_slot_eq, ":cur_center", slot_town_lord, ":troop_no"),
		(eq, ":center_owned", 1),
      (try_begin),
        (party_slot_eq, ":cur_center", slot_party_type, spt_town),
        (val_add, ":num_center_points", 4),
      (else_try),
        (party_slot_eq, ":cur_center", slot_party_type, spt_castle),
        (val_add, ":num_center_points", 2),
      (else_try),
        (val_add, ":num_center_points", 1),
      (try_end),
    (try_end),
    (troop_get_slot, ":troop_renown", ":troop_no", slot_troop_renown),
    (store_add, ":score", 500, ":troop_renown"),
    (val_div, ":score", ":num_center_points"),
    (store_random_in_range, ":random", 50, 100),
    (val_mul, ":score", ":random"),
    (try_begin),
      (party_slot_eq, ":center_no", slot_center_last_taken_by_troop, ":troop_no"),
      (val_mul, ":score", 3),
      (val_div, ":score", 2),
    (try_end),
    (try_begin),
      (eq, ":troop_no", "trp_player"),
      (faction_get_slot, ":faction_leader", "$players_kingdom"),
      (call_script, "script_troop_get_player_relation", ":faction_leader"),
      (assign, ":leader_relation", reg0),
      #(troop_get_slot, ":leader_relation", ":faction_leader", slot_troop_player_relation),
      (val_mul, ":leader_relation", 2),
      (val_add, ":score", ":leader_relation"),
    (try_end),
    (assign, reg0, ":score"),
    ]),
  

  # script_assign_lords_to_empty_centers
  # Input: none
  # Output: none
  ("assign_lords_to_empty_centers",
   [(try_for_range, ":cur_center", centers_begin, centers_end),
		(party_get_slot, ":center_lord", ":cur_center", slot_town_lord),
        (this_or_next|eq, ":center_lord", stl_unassigned),
			(eq, ":center_lord", stl_rejected_by_player),
    
        (store_faction_of_party, ":center_faction", ":cur_center"),
        (is_between, ":center_faction", kingdoms_begin, kingdoms_end),
        (neg|faction_slot_eq, ":center_faction", slot_faction_leader, "trp_player"),
        
		(assign, ":best_lord", -1),
		(assign, ":best_lord_score", -1),
		(try_begin),
			(eq, ":center_lord", stl_unassigned),
			(try_begin),
				(eq, "$players_kingdom", ":center_faction"),
				(eq, "$player_has_homage", 1),
				(assign, ":best_lord", stl_reserved_for_player),
				(call_script, "script_calculate_troop_score_for_center", "trp_player", ":cur_center"),
				(assign, ":best_lord_score", reg0),
			(try_end),
		(try_end),
    
      (try_for_range, ":cur_troop", kingdom_heroes_begin, kingdom_heroes_end),
			(troop_slot_eq, ":cur_troop", slot_troop_occupation, slto_kingdom_hero),
			(store_troop_faction, ":troop_faction", ":cur_troop"),
			(eq, ":troop_faction", ":center_faction"),
			(call_script, "script_calculate_troop_score_for_center", ":cur_troop", ":cur_center"),
			(assign, ":score", reg0),

			(gt, ":score", ":best_lord_score"),
			(assign, ":best_lord_score", ":score"),
			(assign, ":best_lord", ":cur_troop"),
		(try_end),
		(try_begin),
			(ge, ":best_lord", 0),
			(call_script, "script_give_center_to_lord", ":cur_center", ":best_lord", 1),
		(else_try),
			(eq, ":best_lord", stl_reserved_for_player),
			(party_set_slot, ":cur_center", slot_town_lord, stl_reserved_for_player),
	  	(try_begin),
				(party_slot_eq, ":cur_center", slot_party_type, spt_castle),
				(try_for_range, ":cur_village", villages_begin, villages_end),
					(party_slot_eq, ":cur_village", slot_village_bound_center, ":cur_center"),
					(party_set_slot, ":cur_village", slot_town_lord, stl_reserved_for_player),
				(try_end),
			(try_end),
		(try_end),
    (try_end),
    ]),


  # script_create_village_farmer_party
  # Input: arg1 = village_no
  # Output: reg0 = party_no
  ("create_village_farmer_party",
   [(store_script_param, ":village_no", 1),
    (party_get_slot, ":town_no", ":village_no", slot_village_market_town),
    
    (store_faction_of_party, ":party_faction", ":town_no"),
	    (set_spawn_radius, 0),
	    (spawn_around_party, ":village_no", "pt_village_farmers"),
	    (assign, ":new_party", reg0),
	      
	    (party_set_faction, ":new_party", ":party_faction"),
	    (party_set_slot, ":new_party", slot_party_home_center, ":village_no"),
	    (party_set_slot, ":new_party", slot_party_type, spt_village_farmer),
	    (party_set_slot, ":new_party", slot_party_ai_state, spai_trading_with_town),
	    (party_set_slot, ":new_party", slot_party_ai_object, ":town_no"),		
	    (party_set_ai_behavior, ":new_party", ai_bhvr_travel_to_party),
	    (party_set_ai_object, ":new_party", ":town_no"),
	    (party_set_flags, ":new_party", pf_default_behavior, 0),
	    (store_sub, ":item_to_price_slot", slot_town_trade_good_prices_begin, trade_goods_begin),
	    (try_for_range, ":cur_goods", trade_goods_begin, trade_goods_end),
	      (store_add, ":cur_good_price_slot", ":cur_goods", ":item_to_price_slot"),
	      (party_get_slot, ":cur_village_price", ":village_no", ":cur_good_price_slot"),
	      (party_set_slot, ":new_party", ":cur_good_price_slot", ":cur_village_price"),
	    (try_end),
	    (assign, reg0, ":new_party"),
    ]),

  #script_do_party_center_trade
  # INPUT: arg1 = party_no, arg2 = center_no, arg3 = percentage_change_in_center
  # OUTPUT: reg0 = total_change
  ("do_party_center_trade",
    [
      (store_script_param, ":party_no", 1),
      (store_script_param, ":center_no", 2),
      (store_script_param, ":percentage_change", 3),
      (assign, ":total_change", 0),
      (store_sub, ":item_to_price_slot", slot_town_trade_good_prices_begin, trade_goods_begin),
      (try_for_range, ":cur_good", trade_goods_begin, trade_goods_end),
        (store_add, ":cur_good_price_slot", ":cur_good", ":item_to_price_slot"),
        (party_get_slot, ":cur_merchant_price", ":party_no", ":cur_good_price_slot"),
        (party_get_slot, ":cur_center_price", ":center_no", ":cur_good_price_slot"),
        (store_sub, ":price_dif", ":cur_merchant_price", ":cur_center_price"),
        (assign, ":cur_change", ":price_dif"),
        (val_abs, ":cur_change"),
        (val_add, ":total_change", ":cur_change"),
        (val_mul, ":cur_change", ":percentage_change"),
        (val_div, ":cur_change", 100),
        (try_begin),
          (lt, ":price_dif", 0),
          (val_mul, ":cur_change", -1),
        (try_end),
        (val_add, ":cur_center_price", ":cur_change"),
        (party_set_slot, ":center_no", ":cur_good_price_slot", ":cur_center_price"),
        (party_set_slot, ":party_no", ":cur_good_price_slot", ":cur_center_price"),
      (try_end),
      (assign, reg0, ":total_change"),
  ]),

  #script_player_join_faction
  # INPUT: arg1 = faction_no
  # OUTPUT: none
  ("player_join_faction",
    [
      (store_script_param, ":faction_no", 1),
      (assign,"$players_kingdom",":faction_no"),
      (faction_set_slot, "fac_player_supporters_faction", slot_faction_ai_state, sfai_default),
##      (try_for_range, ":kingdom_hero", kingdom_heroes_begin, kingdom_heroes_end),
##        (store_troop_faction, ":kingdom_hero_faction", ":kingdom_hero"),
##        (eq, ":kingdom_hero_faction", "fac_player_supporters_faction"),
##        (call_script, "script_change_troop_faction", ":kingdom_hero", ":faction_no"),
##      (try_end),
      (assign, "$players_oath_renounced_against_kingdom", 0),
      (assign, "$players_oath_renounced_given_center", 0),
      (assign, "$players_oath_renounced_begin_time", 0),
      (try_for_range,":other_kingdom",kingdoms_begin,kingdoms_end),
        (faction_slot_eq, ":other_kingdom", slot_faction_state, sfs_active),
        (neq, ":other_kingdom", "fac_player_supporters_faction"),
        (try_begin),
          (neq, ":other_kingdom", ":faction_no"),
          (store_relation, ":other_kingdom_reln", ":other_kingdom", ":faction_no"),
        (else_try),
          (store_relation, ":other_kingdom_reln", "fac_player_supporters_faction", ":other_kingdom"),
          (val_max, ":other_kingdom_reln", 12),
        (try_end),
        (call_script, "script_set_player_relation_with_faction", ":other_kingdom", ":other_kingdom_reln"),
      (try_end),
      (try_for_range, ":cur_center", centers_begin, centers_end),
        #Give center to kingdom if player is the owner
        (party_slot_eq, ":cur_center", slot_town_lord, "trp_player"),
        (party_set_faction, ":cur_center", ":faction_no"),
      (try_end),
      (try_for_range, ":quest_no", lord_quests_begin, lord_quests_end),
        (check_quest_active, ":quest_no"),
        (quest_get_slot, ":quest_giver_troop", ":quest_no", slot_quest_giver_troop),
        (store_troop_faction, ":quest_giver_faction", ":quest_giver_troop"),
        (store_relation, ":quest_giver_faction_relation", "fac_player_supporters_faction", ":quest_giver_faction"),
        (lt, ":quest_giver_faction_relation", 0),
        (call_script, "script_abort_quest", ":quest_no", 0),
      (try_end),
      (try_begin),
        (neq, ":faction_no", "fac_player_supporters_faction"),
        (faction_set_slot, "fac_player_supporters_faction", slot_faction_state, sfs_inactive),
        (faction_set_slot, "fac_player_supporters_faction", slot_faction_leader, "trp_player"),
      (try_end),
      (call_script, "script_store_average_center_value_per_faction"),
      (call_script, "script_update_all_notes"),
      (assign, "$g_recalculate_ais", 1),
      ]),

  #script_player_leave_faction
  # INPUT: arg1 = give_back_fiefs
  # OUTPUT: none
  ("player_leave_faction",
    [
      (store_script_param, ":give_back_fiefs", 1),
      (call_script, "script_check_and_finish_active_army_quests_for_faction", "$players_kingdom"),
      (assign, ":old_kingdom", "$players_kingdom"),
      #(assign, ":old_has_homage", "$player_has_homage"),
      (assign, "$players_kingdom", 0),
      (assign, "$player_has_homage", 0),
      (try_begin),
        (neq, ":give_back_fiefs", 0),
        (try_for_range, ":cur_center", centers_begin, centers_end),
          (party_slot_eq, ":cur_center", slot_town_lord, "trp_player"),
          (party_set_slot, ":cur_center", slot_town_lord, stl_unassigned),
          (call_script, "script_give_center_to_faction", ":cur_center", ":old_kingdom"),
        (try_end),
      (else_try),
        (try_for_range, ":cur_center", centers_begin, centers_end),
          (party_slot_eq, ":cur_center", slot_town_lord, "trp_player"),
          (call_script, "script_give_center_to_faction", ":cur_center", "fac_player_supporters_faction"),
        (try_end),
        (try_for_range, ":cur_center", villages_begin, villages_end),
          (party_get_slot, ":cur_bound_center", ":cur_center", slot_village_bound_center),
          (party_slot_eq, ":cur_center", slot_town_lord, "trp_player"),
          (neg|party_slot_eq, ":cur_bound_center", slot_town_lord, "trp_player"),
          (call_script, "script_give_center_to_faction", ":cur_center", ":old_kingdom"),
        (try_end),
        (store_relation, ":reln", "fac_player_supporters_faction", ":old_kingdom"),
        (store_sub, ":req_dif", -40, ":reln"),
        (call_script, "script_change_player_relation_with_faction", ":old_kingdom", ":req_dif"),
      (try_end),
      #(try_begin),
      #  (eq, ":old_has_homage", 1),
      #  (faction_get_slot, ":faction_leader", ":old_kingdom", slot_faction_leader),
      #  (call_script, "script_change_player_relation_with_troop", ":faction_leader", -20),
      #(try_end),
	  (try_begin), 
	    (check_quest_active, "qst_oim_potop_return"), 
		(quest_slot_eq, "qst_oim_potop_return", slot_quest_current_state, 1), 
		(quest_set_slot, "qst_oim_potop_return", slot_quest_current_state, 2), 
		(str_store_string, s5, "str_oim_potop_return_notes_leaved"), 
		(add_quest_note_from_sreg, "qst_oim_potop_return", 5, s5, 1),
	  (try_end), 	  
    (call_script, "script_update_all_notes"),
    (assign, "$g_recalculate_ais", 1),
    ]),

	  
  #script_activate_deactivate_player_faction
  # INPUT: arg1 = last_interaction_with_faction
  # OUTPUT: none
  ("activate_deactivate_player_faction",
    [
      (store_script_param, ":last_interaction_with_faction", 1),
	(try_begin),
        (assign, ":has_center", 0),
        (try_for_range, ":cur_center", centers_begin, centers_end),
          (store_faction_of_party, ":cur_center_faction", ":cur_center"),
          (eq, ":cur_center_faction", "fac_player_supporters_faction"),
          (assign, ":has_center", 1),
	(try_end),
        (try_begin),
          (eq, ":has_center", 1),
          (neg|faction_slot_eq, "fac_player_supporters_faction", slot_faction_state, sfs_active),
    (faction_set_slot, "fac_player_supporters_faction", slot_faction_state, sfs_active),
          (faction_set_slot, "fac_player_supporters_faction", slot_faction_leader, "trp_player"),
          (str_store_faction_name, s1, ":last_interaction_with_faction"),
		(faction_set_name, "fac_player_supporters_faction", "@{s1} Rebels"),
          (faction_set_color, "fac_player_supporters_faction", 0xAAAAAA),
    (assign, "$players_kingdom", "fac_player_supporters_faction"),
    (assign, "$g_player_banner_granted", 1),
          (call_script, "script_store_average_center_value_per_faction"),
          (call_script, "script_update_all_notes"),
          (call_script, "script_add_notification_menu", "mnu_notification_player_faction_active", 0, 0),
        (else_try),
          (eq, ":has_center", 0),
          (faction_slot_eq, "fac_player_supporters_faction", slot_faction_state, sfs_active),
          (le, "$supported_pretender", 0),
          (faction_set_slot, "fac_player_supporters_faction", slot_faction_state, sfs_inactive),
          (faction_set_slot, "fac_player_supporters_faction", slot_faction_leader, "trp_player"),
          (assign, "$players_kingdom", 0),
          (assign, "$players_oath_renounced_against_kingdom", 0),
        (assign, "$players_oath_renounced_given_center", 0),
          (assign, "$players_oath_renounced_begin_time", 0),
          (call_script, "script_store_average_center_value_per_faction"),
          (call_script, "script_update_all_notes"),
          (call_script, "script_add_notification_menu", "mnu_notification_player_faction_deactive", 0, 0),
        (try_end),
	(try_end),
    ]),



  #script_agent_reassign_team
  # INPUT: arg1 = agent_no
  # OUTPUT: none
  ("agent_reassign_team",
    [
      (store_script_param, ":agent_no", 1),
      (get_player_agent_no, ":player_agent"),
      (try_begin),
        (ge, ":player_agent", 0),
        (agent_is_human, ":agent_no"),
        (agent_is_ally, ":agent_no"),
        (agent_get_party_id, ":party_no", ":agent_no"),
        (neq, ":party_no", "p_main_party"),
        (assign, ":continue", 1),
        (store_faction_of_party, ":party_faction", ":party_no"),
        (try_begin),
          (eq, ":party_faction", "$players_kingdom"),
          (is_between, "$players_kingdom", kingdoms_begin, kingdoms_end),
          (faction_slot_eq, "$players_kingdom", slot_faction_marshall, "trp_player"),
          (assign, ":continue", 0),
        (else_try),
          (party_stack_get_troop_id, ":leader_troop_id", ":party_no", 0),
          (neg|is_between, ":leader_troop_id", kingdom_heroes_begin, kingdom_heroes_end),
          (assign, ":continue", 0),
        (try_end),
        (eq, ":continue", 1),
        (agent_get_team, ":player_team", ":player_agent"),
        (val_add, ":player_team", 2),
        (agent_set_team, ":agent_no", ":player_team"),
      (try_end),
      ]),

  #script_start_quest
  # INPUT: arg1 = quest_no, arg2 = giver_troop_no, s2 = description_text
  # OUTPUT: none
  ("start_quest",
    [(store_script_param, ":quest_no", 1),
     (store_script_param, ":giver_troop_no", 2),
     (try_begin),
       (is_between, ":giver_troop_no", kingdom_heroes_begin, kingdom_heroes_end),
       (str_store_troop_name_link, s62, ":giver_troop_no"),
     (else_try),
       (str_store_troop_name, s62, ":giver_troop_no"),
     (try_end),
       (str_store_string, s63, "@Given by: {s62}"),
     (store_current_hours, ":cur_hours"),          
	 (str_clear, s60),
     (str_store_date, s60, ":cur_hours"),
     (str_store_string, s60, "@Given on: {s60}"),
     (add_quest_note_from_sreg, ":quest_no", 0, s60, 0),
     (add_quest_note_from_sreg, ":quest_no", 1, s63, 0),
     (add_quest_note_from_sreg, ":quest_no", 2, s2, 0),

     (try_begin),
       (quest_slot_ge, ":quest_no", slot_quest_expiration_days, 1),
       (quest_get_slot, reg0, ":quest_no", slot_quest_expiration_days),
       (add_quest_note_from_sreg, ":quest_no", 7, "@You have {reg0} days to finish this quest.", 0),
     (try_end),

     #Adding dont_give_again_for_days value
     (try_begin),
       (quest_slot_ge, ":quest_no", slot_quest_dont_give_again_period, 1),
       (quest_get_slot, ":dont_give_again_period", ":quest_no", slot_quest_dont_give_again_period),
       (quest_set_slot, ":quest_no", slot_quest_dont_give_again_remaining_days, ":dont_give_again_period"),
     (try_end),
     (start_quest, ":quest_no", ":giver_troop_no"),
     (display_message, "str_quest_log_updated"),
     ]),

  #script_conclude_quest
  # INPUT: arg1 = quest_no
  # OUTPUT: none
  ("conclude_quest",
    [(store_script_param, ":quest_no", 1),
      (conclude_quest, ":quest_no"),
      (quest_get_slot, ":quest_giver_troop", ":quest_no", slot_quest_giver_troop),
	 (try_begin), 
		(neq, ":quest_giver_troop", "trp_player"),
      (str_store_troop_name, s59, ":quest_giver_troop"),
      (add_quest_note_from_sreg, ":quest_no", 7, "@This quest has been concluded. Talk to {s59} to finish it.", 0),
	 (else_try),
		(str_store_string, s2, "str_quest_concluded_hero"),
		(add_quest_note_from_sreg, ":quest_no", 7, s2, 0),
     (try_end), 	 
    ]),

  #script_succeed_quest
  # INPUT: arg1 = quest_no
  # OUTPUT: none
  ("succeed_quest",
    [(store_script_param, ":quest_no", 1),
      (succeed_quest, ":quest_no"),
      (quest_get_slot, ":quest_giver_troop", ":quest_no", slot_quest_giver_troop),
	 (try_begin), 
		(neq, ":quest_giver_troop", "trp_player"),
		(try_begin), 
			(troop_slot_eq, ":quest_giver_troop", slot_troop_occupation, slto_kingdom_hero),
			(str_store_troop_name_link, s59, ":quest_giver_troop"),
		(else_try), 	
      (str_store_troop_name, s59, ":quest_giver_troop"),
		(try_end), 	
      (add_quest_note_from_sreg, ":quest_no", 7, "@This quest has been successfully completed. Talk to {s59} to claim your reward.", 0),
	 (else_try), 
		(str_store_string, s2, "str_quest_succeeded_hero"),
		(add_quest_note_from_sreg, ":quest_no", 7, s2, 0),
     (try_end), 	 
    ]),

  #script_fail_quest
  # INPUT: arg1 = quest_no
  # OUTPUT: none
  ("fail_quest",
    [(store_script_param, ":quest_no", 1),
      (fail_quest, ":quest_no"),
      (quest_get_slot, ":quest_giver_troop", ":quest_no", slot_quest_giver_troop),
	 (try_begin), 
		(neq, ":quest_giver_troop", "trp_player"),
      (str_store_troop_name, s59, ":quest_giver_troop"),
      (add_quest_note_from_sreg, ":quest_no", 7, "@This quest has failed. Talk to {s59} to explain the situation.", 0),
	  (else_try), 
		(str_store_string, s2, "str_quest_failed_hero"),
		(add_quest_note_from_sreg, ":quest_no", 7, s2, 0),
	  (try_end), 	
    ]),

  #script_report_quest_troop_positions
  # INPUT: arg1 = quest_no, arg2 = troop_no, arg3 = note_index
  # OUTPUT: none
  ("report_quest_troop_positions",
    [(store_script_param, ":quest_no", 1),
      (store_script_param, ":troop_no", 2),
      (store_script_param, ":note_index", 3),
      (call_script, "script_get_information_about_troops_position", ":troop_no", 1),
      (str_store_string, s5, "@At the time quest was given:^{s1}"),
      (add_quest_note_from_sreg, ":quest_no", ":note_index", s5, 1),
      (call_script, "script_update_troop_location_notes", ":troop_no", 1),
    ]),
   
  #script_end_quest
  # INPUT: arg1 = quest_no
  # OUTPUT: none
  ("end_quest",
    [(store_script_param, ":quest_no", 1),
      (str_clear, s1),
      (add_quest_note_from_sreg, ":quest_no", 0, s1, 0),
      (add_quest_note_from_sreg, ":quest_no", 1, s1, 0),
      (add_quest_note_from_sreg, ":quest_no", 2, s1, 0),
      (add_quest_note_from_sreg, ":quest_no", 3, s1, 0),
      (add_quest_note_from_sreg, ":quest_no", 4, s1, 0),
      (add_quest_note_from_sreg, ":quest_no", 5, s1, 0),
      (add_quest_note_from_sreg, ":quest_no", 6, s1, 0),
      (add_quest_note_from_sreg, ":quest_no", 7, s1, 0),
      (try_begin),
        (neg|check_quest_failed, ":quest_no"),
        (val_add, "$g_total_quests_completed", 1),
      (try_end),
	  (complete_quest, ":quest_no"),
      (try_begin),
        (is_between, ":quest_no", mayor_quests_begin, mayor_quests_end),
        (assign, "$merchant_quest_last_offerer", -1),
        (assign, "$merchant_offered_quest", -1),
      (try_end),
	 (quest_set_slot, ":quest_no", slot_quest_expiration_days, -1),
    ]),

  #script_cancel_quest
  # INPUT: arg1 = quest_no
  # OUTPUT: none
  ("cancel_quest",
    [(store_script_param, ":quest_no", 1),
     (str_clear, s1),
     (add_quest_note_from_sreg, ":quest_no", 0, s1, 0),
     (add_quest_note_from_sreg, ":quest_no", 1, s1, 0),
     (add_quest_note_from_sreg, ":quest_no", 2, s1, 0),
     (add_quest_note_from_sreg, ":quest_no", 3, s1, 0),
     (add_quest_note_from_sreg, ":quest_no", 4, s1, 0),
     (add_quest_note_from_sreg, ":quest_no", 5, s1, 0),
     (add_quest_note_from_sreg, ":quest_no", 6, s1, 0),
     (add_quest_note_from_sreg, ":quest_no", 7, s1, 0),
     (cancel_quest, ":quest_no"),
     (try_begin),
       (is_between, ":quest_no", mayor_quests_begin, mayor_quests_end),
       (assign, "$merchant_quest_last_offerer", -1),
       (assign, "$merchant_offered_quest", -1),
     (try_end),
     ]),

##  #script_get_available_mercenary_troop_and_amount_of_center
##  # INPUT: arg1 = center_no
##  # OUTPUT: reg0 = mercenary_troop_type, reg1 = amount
##  ("get_available_mercenary_troop_and_amount_of_center",
##    [(store_script_param, ":center_no", 1),
##     (party_get_slot, ":mercenary_troop", ":center_no", slot_center_mercenary_troop_type),
##     (party_get_slot, ":mercenary_amount", ":center_no", slot_center_mercenary_troop_amount),
##     (party_get_free_companions_capacity, ":free_capacity", "p_main_party"),
##     (val_min, ":mercenary_amount", ":free_capacity"),
##     (store_troop_gold, ":cur_gold", "trp_player"),
##     (call_script, "script_game_get_join_cost", ":mercenary_troop"),
##     (assign, ":join_cost", reg0),
##     (try_begin),
##       (gt, ":join_cost", 0),
##       (val_div, ":cur_gold", ":join_cost"),
##       (val_min, ":mercenary_amount", ":cur_gold"),
##     (try_end),
##     (assign, reg0, ":mercenary_troop"),
##     (assign, reg1, ":mercenary_amount"),
##     ]),
##

  #script_update_village_market_towns
  # INPUT: none
  # OUTPUT: none
  ("update_village_market_towns",
    [(try_for_range, ":cur_village", villages_begin, villages_end),
       (store_faction_of_party, ":village_faction", ":cur_village"),
       (assign, ":min_dist", 999999),
       (assign, ":min_dist_town", -1),
       (try_for_range, ":cur_town", towns_begin, towns_end),
         (store_faction_of_party, ":town_faction", ":cur_town"),
         (eq, ":town_faction", ":village_faction"),
         (store_distance_to_party_from_party, ":cur_dist", ":cur_village", ":cur_town"),
         (lt, ":cur_dist", ":min_dist"),
         (assign, ":min_dist", ":cur_dist"),
         (assign, ":min_dist_town", ":cur_town"),
       (try_end),
		(gt, ":min_dist_town", -1),
		(party_set_slot, ":cur_village", slot_village_market_town, ":min_dist_town"),
	   (try_end),
     ]),

      

  #script_update_mercenary_units_of_towns
  # INPUT: none
  # OUTPUT: none
  ("update_mercenary_units_of_towns",
    [(try_for_range, ":town_no", towns_begin, towns_end),
      (store_random_in_range, ":troop_no", mercenary_troops_begin, mercenary_troops_end),
      (party_set_slot, ":town_no", slot_center_mercenary_troop_type, ":troop_no"),
      (store_random_in_range, ":amount", 2, 10),
      (party_set_slot, ":town_no", slot_center_mercenary_troop_amount, ":amount"),
    (try_end),
     ]),
     
  #script_update_volunteer_troops_in_village
  # INPUT: arg1 = center_no
  # OUTPUT: none
  ("update_volunteer_troops_in_village",
    [
       (store_script_param, ":center_no", 1),
       (faction_set_slot, "fac_kingdom_1", slot_faction_tier_1_troop, "trp_swadian_recruit"),
       (faction_set_slot, "fac_kingdom_2", slot_faction_tier_1_troop, "trp_vaegir_recruit"),
       (faction_set_slot, "fac_kingdom_3", slot_faction_tier_1_troop, "trp_khergit_tribesman"),
       (faction_set_slot, "fac_kingdom_4", slot_faction_tier_1_troop, "trp_nord_recruit"),
       (faction_set_slot, "fac_kingdom_5", slot_faction_tier_1_troop, "trp_rhodok_tribesman"),
	   
       (party_get_slot, ":player_relation", ":center_no", slot_center_player_relation),
       (party_get_slot, ":center_culture", ":center_no", slot_center_culture),
       (faction_get_slot, ":volunteer_troop", ":center_culture", slot_faction_tier_1_troop),
       (assign, ":volunteer_troop_tier", 1),
       (store_div, ":tier_upgrades", ":player_relation", 10),
       (try_for_range, ":unused", 0, ":tier_upgrades"),
         (store_random_in_range, ":random_no", 0, 100),
         (lt, ":random_no", 10),
         (store_random_in_range, ":random_no", 0, 2),
         (troop_get_upgrade_troop, ":upgrade_troop_no", ":volunteer_troop", ":random_no"),
         (try_begin),
           (le, ":upgrade_troop_no", 0),
           (troop_get_upgrade_troop, ":upgrade_troop_no", ":volunteer_troop", 0),
         (try_end),
         (gt, ":upgrade_troop_no", 0),
         (val_add, ":volunteer_troop_tier", 1),
         #(assign, ":volunteer_troop", ":upgrade_troop_no"),
       (try_end),
       
       (assign, ":upper_limit", 8),
       (try_begin),
         (ge, ":player_relation", 4),
         (assign, ":upper_limit", ":player_relation"),
         (val_div, ":upper_limit", 2),
         (val_add, ":upper_limit", 6),
       (else_try),
         (lt, ":player_relation", 0),
         (assign, ":upper_limit", 0),
       (try_end),

       (val_mul, ":upper_limit", 3),   
       (store_add, ":amount_random_divider", 2, ":volunteer_troop_tier"),
       (val_div, ":upper_limit", ":amount_random_divider"),

	   (try_begin),
	     (try_begin),
	       (call_script, "script_party_count_members_with_full_health", "p_main_party"),
	       (assign, ":number_of_members", reg0),
	       (lt, ":number_of_members", 10),	 
	       (assign, ":player_has_center", 0),
	       (try_for_range, ":cur_center", centers_begin, centers_end),
	         (party_get_slot, ":center_lord", ":cur_center", slot_town_lord),
	         (eq, ":center_lord", "trp_player"),
	         (assign, ":player_has_center", 1),
	       (try_end),
	       (eq, ":player_has_center", 0),

	       (assign, ":player_is_at_harsh_conditions", 1),
         (else_try),
	       (assign, ":player_is_at_harsh_conditions", 0),
         (try_end),

	     (le, "$player_has_homage", 0),
		 (eq, ":player_is_at_harsh_conditions", 1),
		 (val_div, ":upper_limit", 2),
       (try_end),
       
       (store_random_in_range, ":amount", 0, ":upper_limit"),
       (party_set_slot, ":center_no", slot_center_volunteer_troop_type, ":volunteer_troop"),
       (party_set_slot, ":center_no", slot_center_volunteer_troop_amount, ":amount"),
     ]),

  #script_update_npc_volunteer_troops_in_village
  # INPUT: arg1 = center_no
  # OUTPUT: none
  ("update_npc_volunteer_troops_in_village",
    [
       (store_script_param, ":center_no", 1),
       (store_random_in_range, ":amount", 0, 7),
       #(party_set_slot, ":center_no", slot_center_npc_volunteer_troop_type, ":volunteer_troop"),
       (party_set_slot, ":center_no", slot_center_npc_volunteer_troop_amount, ":amount"),
     ]),

  #script_update_companion_candidates_in_taverns
  # INPUT: none
  # OUTPUT: none
  ("update_companion_candidates_in_taverns",
    [  (try_for_range, ":troop_no", companions_begin, companions_end),
        (troop_set_slot, ":troop_no", slot_troop_cur_center, -1),
         (troop_slot_eq, ":troop_no", slot_troop_occupation, 0),
        (store_random_in_range, ":town_no", towns_begin, towns_end),
        (try_begin),
          (neg|troop_slot_eq, ":troop_no", slot_troop_home, ":town_no"),
          (neg|troop_slot_eq, ":troop_no", slot_troop_first_encountered, ":town_no"),
		    #oim code
		    (try_begin),
				(eq, ":troop_no", "trp_npc4"), 
				(call_script, "script_cf_select_random_town_with_faction", "fac_kingdom_5"), 
				(assign, ":town_no", reg0), 
				(try_begin), 
					(lt, ":town_no", 0), 
					(assign, ":town_no", "p_town_5"), 
				(try_end), 
			(else_try), 
				(eq, ":troop_no", "trp_npc1"), 
				(call_script, "script_cf_select_random_town_with_faction", "fac_kingdom_1"), 
				(assign, ":town_no", reg0), 
				(try_begin), 
					(lt, ":town_no", 0), 
					(assign, ":town_no", "p_town_6"), 
				(try_end), 
			(else_try), 
				(eq, ":troop_no", "trp_npc6"), 
				(call_script, "script_cf_get_random_active_faction_except_player_faction_and_faction", "fac_kingdom_2"), 
				(assign, ":fac_no", reg0), 
				(call_script, "script_cf_select_random_town_with_faction", ":fac_no"), 
				(assign, ":town_no", reg0), 
				(try_begin), 
					(lt, ":town_no", 0), 
					(assign, ":town_no", "p_town_6"), 
				(try_end), 
			(else_try), 
				(eq, ":troop_no", "trp_npc9"), 
				(call_script, "script_cf_get_random_active_faction_except_player_faction_and_faction", "fac_kingdom_2"), 
				(assign, ":fac_no", reg0), 
				(call_script, "script_cf_select_random_town_with_faction", ":fac_no"), 
				(assign, ":town_no", reg0), 
				(try_begin), 
					(lt, ":town_no", 0), 
					(assign, ":town_no", "p_town_7"), 
				(try_end), 
			(else_try), 
				(eq, ":troop_no", "trp_npc11"), 
				(call_script, "script_cf_get_random_active_faction_except_player_faction_and_faction", "fac_kingdom_3"), 
				(assign, ":fac_no", reg0), 
				(call_script, "script_cf_select_random_town_with_faction", ":fac_no"), 
				(assign, ":town_no", reg0), 
				(try_begin), 
					(lt, ":town_no", 0), 
					(assign, ":town_no", "p_town_15"), 
				(try_end), 
			(else_try), 
				(eq, ":troop_no", "trp_npc12"), 
				(call_script, "script_cf_get_random_active_faction_except_player_faction_and_faction", "fac_kingdom_5"), 
				(assign, ":fac_no", reg0), 
				(call_script, "script_cf_select_random_town_with_faction", ":fac_no"), 
				(assign, ":town_no", reg0), 
				(try_begin), 
					(lt, ":town_no", 0), 
					(assign, ":town_no", "p_town_14"), 
				(try_end), 
			(else_try), 
				(eq, ":troop_no", "trp_npc13"), 
				(call_script, "script_cf_get_random_active_faction_except_player_faction_and_faction", "fac_kingdom_5"), 
				(assign, ":fac_no", reg0), 
				(call_script, "script_cf_select_random_town_with_faction", ":fac_no"), 
				(assign, ":town_no", reg0), 
				(try_begin), 
					(lt, ":town_no", 0), 
					(assign, ":town_no", "p_town_9"), 
				(try_end), 
			(else_try), 
				(eq, ":troop_no", "trp_npc15"), 
				(call_script, "script_cf_get_random_active_faction_except_player_faction_and_faction", "fac_kingdom_2"), 
				(assign, ":fac_no", reg0), 
				(call_script, "script_cf_select_random_town_with_faction", ":fac_no"), 
				(assign, ":town_no", reg0), 
				(try_begin), 
					(lt, ":town_no", 0), 
					(assign, ":town_no", "p_town_13"), 
				(try_end), 
			(else_try), 
				(eq, ":troop_no", "trp_npc16"), 
				(call_script, "script_cf_get_random_active_faction_except_player_faction_and_faction", "fac_kingdom_3"), 
				(assign, ":fac_no", reg0), 
				(call_script, "script_cf_select_random_town_with_faction", ":fac_no"), 
				(assign, ":town_no", reg0), 
				(try_begin), 
					(lt, ":town_no", 0), 
					(assign, ":town_no", "p_town_15"), 
				(try_end), 
			(try_end), 	
          (troop_set_slot, ":troop_no", slot_troop_cur_center, ":town_no"),
          (try_begin),
            (eq, "$cheat_mode", 1),
            (str_store_troop_name, 4, ":troop_no"),
            (str_store_party_name, 5, ":town_no"),
            (display_message, "@{!}{s4} is in {s5}"),
          (try_end),
        (try_end),
      (try_end),
     ]),

  #script_update_ransom_brokers
  # INPUT: none
  # OUTPUT: none
  ("update_ransom_brokers",
    [(try_for_range, ":town_no", towns_begin, towns_end),
       (party_set_slot, ":town_no", slot_center_ransom_broker, 0),
     (try_end),
     
     (try_for_range, ":troop_no", ransom_brokers_begin, ransom_brokers_end),
       (store_random_in_range, ":town_no", towns_begin, towns_end),
       (party_set_slot, ":town_no", slot_center_ransom_broker, ":troop_no"),
     (try_end),

     (party_set_slot,"p_town_2",slot_center_ransom_broker,"trp_ramun_the_slave_trader"),
     ]),

  #script_update_tavern_travelers
  # INPUT: none
  # OUTPUT: none
  ("update_tavern_travelers",
    [(try_for_range, ":town_no", towns_begin, towns_end),
       (party_set_slot, ":town_no", slot_center_tavern_traveler, 0),
     (try_end),
     
     (try_for_range, ":troop_no", tavern_travelers_begin, tavern_travelers_end),
       (store_random_in_range, ":town_no", towns_begin, towns_end),
       (party_set_slot, ":town_no", slot_center_tavern_traveler, ":troop_no"),
       (assign, ":end_cond", 15),
       (try_for_range, ":unused", 0, ":end_cond"),
         (store_random_in_range, ":info_faction", kingdoms_begin, kingdoms_end),
         (faction_slot_eq, ":info_faction", slot_faction_state, sfs_active),
         (neq, ":info_faction", "$players_kingdom"),
         (neq, ":info_faction", "fac_player_supporters_faction"),
         (party_set_slot, ":town_no", slot_center_traveler_info_faction, ":info_faction"),
         (assign, ":end_cond", 0),
       (try_end),
     (try_end),
     ]),

  #script_update_villages_infested_by_bandits
  # INPUT: none
  # OUTPUT: none
  ("update_villages_infested_by_bandits",
    [(try_for_range, ":village_no", villages_begin, villages_end),
       (try_begin),
         (check_quest_active, "qst_eliminate_bandits_infesting_village"),
         (quest_slot_eq, "qst_eliminate_bandits_infesting_village", slot_quest_target_center, ":village_no"),
         (quest_get_slot, ":cur_state", "qst_eliminate_bandits_infesting_village", slot_quest_current_state),
         (val_add, ":cur_state", 1),
         (try_begin),
           (lt, ":cur_state", 3),
           (quest_set_slot, "qst_eliminate_bandits_infesting_village", slot_quest_current_state, ":cur_state"),
         (else_try),
           (party_set_slot, ":village_no", slot_village_infested_by_bandits, 0),
           (call_script, "script_abort_quest", "qst_eliminate_bandits_infesting_village", 2),
         (try_end),
       (else_try),
         (check_quest_active, "qst_deal_with_bandits_at_lords_village"),
         (quest_slot_eq, "qst_deal_with_bandits_at_lords_village", slot_quest_target_center, ":village_no"),
         (quest_get_slot, ":cur_state", "qst_deal_with_bandits_at_lords_village", slot_quest_current_state),
         (val_add, ":cur_state", 1),
         (try_begin),
           (lt, ":cur_state", 3),
           (quest_set_slot, "qst_deal_with_bandits_at_lords_village", slot_quest_current_state, ":cur_state"),
         (else_try),
           (party_set_slot, ":village_no", slot_village_infested_by_bandits, 0),
           (call_script, "script_abort_quest", "qst_deal_with_bandits_at_lords_village", 2),
         (try_end),
       (else_try),
         (party_set_slot, ":village_no", slot_village_infested_by_bandits, 0),
         (store_random_in_range, ":random_no", 0, 100),
         (lt, ":random_no", 3),
         (store_random_in_range, ":random_no", 0, 3),
         (try_begin),
           (eq, ":random_no", 0),
           (assign, ":bandit_troop", "trp_bandit"),
         (else_try),
           (eq, ":random_no", 1),
           (assign, ":bandit_troop", "trp_mountain_bandit"),
         (else_try),
           (assign, ":bandit_troop", "trp_forest_bandit"),
         (try_end),
         (party_set_slot, ":village_no", slot_village_infested_by_bandits, ":bandit_troop"),
         #Reduce prosperity of the village by 3		 
         (call_script, "script_change_center_prosperity", ":village_no", -3),
         (try_begin),
           (eq, "$cheat_mode", 1),
           (str_store_party_name, s1, ":village_no"),
           (display_message, "@{s1} is infested by bandits."),
         (try_end),
       (try_end),
     (try_end),
     ]),

  #script_update_booksellers
  # INPUT: none
  # OUTPUT: none
  ("update_booksellers",
    [(try_for_range, ":town_no", towns_begin, towns_end),
       (party_set_slot, ":town_no", slot_center_tavern_bookseller, 0),
     (try_end),
     
     (try_for_range, ":troop_no", tavern_booksellers_begin, tavern_booksellers_end),
       (store_random_in_range, ":town_no", towns_begin, towns_end),
       (party_set_slot, ":town_no", slot_center_tavern_bookseller, ":troop_no"),
     (try_end),
     ]),
     
  #script_update_tavern_minstels
  # INPUT: none
  # OUTPUT: none
  ("update_tavern_minstels",
    [(try_for_range, ":town_no", towns_begin, towns_end),
       (party_set_slot, ":town_no", slot_center_tavern_minstrel, 0),
     (try_end),
     
     (try_for_range, ":troop_no", tavern_minstrels_begin, tavern_minstrels_end),
       (store_random_in_range, ":town_no", towns_begin, towns_end),
       (party_set_slot, ":town_no", slot_center_tavern_minstrel, ":troop_no"),
	   (try_end),	
     ]),
 
  #script_update_faction_notes
  # INPUT: faction_no
  # OUTPUT: none
  ("update_faction_notes",
    [
##(store_script_param, ":faction_no", 1),
##     (try_begin),
##       (is_between, ":faction_no", kingdoms_begin, kingdoms_end),
##       (faction_slot_eq, ":faction_no", slot_faction_state, sfs_active),
##       (faction_get_slot, ":faction_leader", ":faction_no", slot_faction_leader),
##       (str_store_faction_name, s5, ":faction_no"),
##       (str_store_troop_name_link, s6, ":faction_leader"),
##       (assign, ":num_centers", 0),
##       (str_store_string, s8, "@nowhere"),
##       (try_for_range_backwards, ":cur_center", centers_begin, centers_end),
##         (store_faction_of_party, ":center_faction", ":cur_center"),
##         (eq, ":center_faction", ":faction_no"),
##         (try_begin),
##           (eq, ":num_centers", 0),
##           (str_store_party_name_link, s8, ":cur_center"),
##         (else_try),
##           (eq, ":num_centers", 1),
##           (str_store_party_name_link, s7, ":cur_center"),
##           (str_store_string, s8, "@{s7} and {s8}"),
##         (else_try),
##           (str_store_party_name_link, s7, ":cur_center"),
##           (str_store_string, s8, "@{s7}, {s8}"),
##         (try_end),
##         (val_add, ":num_centers", 1),
##       (try_end),
##       (assign, ":num_members", 0),
##       (str_store_string, s10, "@noone"),
##       (try_for_range_backwards, ":loop_var", "trp_kingdom_heroes_including_player_begin", kingdom_heroes_end),
##         (assign, ":cur_troop", ":loop_var"),
##         (try_begin),
##           (eq, ":loop_var", "trp_kingdom_heroes_including_player_begin"),
##           (assign, ":cur_troop", "trp_player"),
##           (assign, ":troop_faction", "$players_kingdom"),
##         (else_try),
##           (store_troop_faction, ":troop_faction", ":cur_troop"),
##         (try_end),
##         (eq, ":troop_faction", ":faction_no"),
##         (neq, ":cur_troop", ":faction_leader"),
##         (troop_slot_eq, ":cur_troop", slot_troop_occupation, slto_kingdom_hero),
##         (try_begin),
##           (eq, ":num_members", 0),
##           (str_store_troop_name_link, s10, ":cur_troop"),
##         (else_try),
##           (eq, ":num_members", 1),
##           (str_store_troop_name_link, s9, ":cur_troop"),
##           (str_store_string, s10, "@{s9} and {s10}"),
##         (else_try),
##           (str_store_troop_name_link, s9, ":cur_troop"),
##           (str_store_string, s10, "@{s9}, {s10}"),
##         (try_end),
##         (val_add, ":num_members", 1),
##       (try_end),
##       (str_store_string, s12, "@noone"),
##       (assign, ":num_enemies", 0),
##       (try_for_range_backwards, ":cur_faction", kingdoms_begin, kingdoms_end),
##         (faction_slot_eq, ":cur_faction", slot_faction_state, sfs_active),
##         (store_relation, ":cur_relation", ":cur_faction", ":faction_no"),
##         (lt, ":cur_relation", 0),
##         (try_begin),
##           (eq, ":num_enemies", 0),
##           (str_store_faction_name_link, s12, ":cur_faction"),
##         (else_try),
##           (eq, ":num_enemies", 1),
##           (str_store_faction_name_link, s11, ":cur_faction"),
##           (str_store_string, s12, "@{s11} and {s12}"),
##         (else_try),
##           (str_store_faction_name_link, s11, ":cur_faction"),
##           (str_store_string, s12, "@{s11}, {s12}"),
##         (try_end),
##         (val_add, ":num_enemies", 1),
##       (try_end),
##       (add_faction_note_from_sreg, ":faction_no", 0, "@{s5} is ruled by {s6}.^It occupies {s8}.^Its vassals are {s10}.^{s5} is at war with {s12}.", 0),
##     (else_try),
##       (is_between, ":faction_no", kingdoms_begin, kingdoms_end),
##       (faction_slot_eq, ":faction_no", slot_faction_state, sfs_defeated),
##       (str_store_faction_name, s5, ":faction_no"),
##       (add_faction_note_from_sreg, ":faction_no", 0, "@{s5} has been defeated!", 0),
##       (str_store_string, s1, "str_empty_string"),
##       (add_faction_note_from_sreg, ":faction_no", 1, s1, 0),
##     (else_try),
##       (str_store_string, s1, "str_empty_string"),
##       (add_faction_note_from_sreg, ":faction_no", 0, s1, 0),
##       (add_faction_note_from_sreg, ":faction_no", 1, s1, 0),
##     (try_end),
##      (try_begin),
##       (is_between, ":faction_no", "fac_kingdom_1", kingdoms_end), #Excluding player kingdom
##       (add_faction_note_tableau_mesh, ":faction_no", "tableau_faction_note_mesh"),
##      (else_try),
##       (add_faction_note_tableau_mesh, ":faction_no", "tableau_faction_note_mesh_banner"),
##      (try_end),
     ]),

  #script_update_faction_traveler_notes
  # INPUT: faction_no
  # OUTPUT: none
  ("update_faction_traveler_notes",
    [(store_script_param, ":faction_no", 1),
     (assign, ":total_men", 0),
     (try_for_parties, ":cur_party"),
       (store_faction_of_party, ":center_faction", ":cur_party"),
       (eq, ":center_faction", ":faction_no"),
       (party_get_num_companions, ":num_men", ":cur_party"),
       (val_add, ":total_men", ":num_men"),
     (try_end),
     (str_store_faction_name, s5, ":faction_no"),
     (assign, reg1, ":total_men"),
     (add_faction_note_from_sreg, ":faction_no", 1, "@{s5} has a strength of {reg1} men in total.", 1),
     ]),


  #script_update_troop_notes
  # INPUT: troop_no
  # OUTPUT: none
  ("update_troop_notes",
    [
##	(store_script_param, ":troop_no", 1),
##     (str_store_troop_name, s54, ":troop_no"),
##     (try_begin),
##       (eq, ":troop_no", "trp_player"),
##       (this_or_next|eq, "$player_has_homage", 1),
##       (eq, "$players_kingdom", "fac_player_supporters_faction"),
##       (assign, ":troop_faction", "$players_kingdom"),
##     (else_try),
##       (store_troop_faction, ":troop_faction", ":troop_no"),
##     (try_end),
##     (try_begin),
##       (neq, ":troop_no", "trp_player"),
##       (neg|is_between, ":troop_faction", kingdoms_begin, kingdoms_end),
##       (str_clear, s54),
##       (add_troop_note_from_sreg, ":troop_no", 0, s54, 0),
##       (add_troop_note_from_sreg, ":troop_no", 1, s54, 0),
##       (add_troop_note_from_sreg, ":troop_no", 2, s54, 0),
##     (else_try),
##       (is_between, ":troop_no", kingdom_ladies_begin, kingdom_ladies_end),
##       (str_clear, s54),
##       (add_troop_note_from_sreg, ":troop_no", 0, s54, 0),
##       (add_troop_note_from_sreg, ":troop_no", 1, s54, 0),
##       (add_troop_note_from_sreg, ":troop_no", 2, s54, 0),
##     (else_try),
##       (is_between, ":troop_no", pretenders_begin, pretenders_end),
##       (neg|troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_hero),
##       (neq, ":troop_no", "$supported_pretender"),
##       (troop_get_slot, ":orig_faction", ":troop_no", slot_troop_original_faction),
##       (try_begin),
##         (faction_slot_eq, ":orig_faction", slot_faction_state, sfs_active),
##         (faction_slot_eq, ":orig_faction", slot_faction_has_rebellion_chance, 1),
##         (str_store_faction_name_link, s56, ":orig_faction"),
##         (add_troop_note_from_sreg, ":troop_no", 0, "@{s54} is a claimant to the throne of {s56}.", 0),
##         (add_troop_note_tableau_mesh, ":troop_no", "tableau_troop_note_mesh"),
##       (else_try),
##         (str_clear, s54),
##         (add_troop_note_from_sreg, ":troop_no", 0, s54, 0),
##         (add_troop_note_from_sreg, ":troop_no", 1, s54, 0),
##         (add_troop_note_from_sreg, ":troop_no", 2, s54, 0),
##       (try_end),
##     (else_try),
##       (faction_get_slot, ":faction_leader", ":troop_faction", slot_faction_leader),
##       (str_store_troop_name_link, s55, ":faction_leader"),
##	   (try_begin), 
##	    (is_between, ":troop_faction", kingdoms_begin, kingdoms_end),
##		(str_store_faction_name_link, s56, ":troop_faction"),
##	   (else_try), 
##	    (str_store_faction_name, s56, ":troop_faction"),
##	   (try_end), 
##       (assign, reg4, 0),
##       (assign, reg6, 0),
##       (try_begin),
##         (eq, ":troop_faction", "fac_player_faction"),
##         (assign, reg6, 1),
##       (else_try),
##         (eq, ":faction_leader", ":troop_no"),
##         (assign, reg4, 1),
##       (try_end),
##       (assign, ":num_centers", 0),
##       (str_store_string, s58, "@nowhere"),
##       (try_for_range_backwards, ":cur_center", centers_begin, centers_end),
##         (party_slot_eq, ":cur_center", slot_town_lord, ":troop_no"),
##         (try_begin),
##           (eq, ":num_centers", 0),
##           (str_store_party_name_link, s58, ":cur_center"),
##         (else_try),
##           (eq, ":num_centers", 1),
##           (str_store_party_name_link, s57, ":cur_center"),
##           (str_store_string, s58, "@{s57} and {s58}"),
##         (else_try),
##           (str_store_party_name_link, s57, ":cur_center"),
##           (str_store_string, s58, "@{s57}, {s58}"),
##         (try_end),
##         (val_add, ":num_centers", 1),
##       (try_end),
##       (troop_get_type, reg3, ":troop_no"),
##       (troop_get_slot, reg5, ":troop_no", slot_troop_renown),
##       (str_clear, s59),
##       (try_begin),
###         (troop_get_slot, ":relation", ":troop_no", slot_troop_player_relation),
##         (call_script, "script_troop_get_player_relation", ":troop_no"),
##         (assign, ":relation", reg0),
##         (store_add, ":normalized_relation", ":relation", 100),
##         (val_add, ":normalized_relation", 5),
##         (store_div, ":str_offset", ":normalized_relation", 10),
##         (val_clamp, ":str_offset", 0, 20),
##         (store_add, ":str_id", "str_relation_mnus_100_ns",  ":str_offset"),
##         (neq, ":str_id", "str_relation_plus_0_ns"),
##         (str_store_string, s60, "@{reg3?She:He}"),
##         (str_store_string, s59, ":str_id"),
##         (str_store_string, s59, "@^{s59}"),
##       (try_end),
##       (assign, reg9, ":num_centers"),
##       (add_troop_note_from_sreg, ":troop_no", 0, "@{reg6?:{reg4?{s54} is the ruler of {s56}.^:{s54} is a vassal of {s55} of {s56}.^}}Renown: {reg5}.^{reg9?{reg3?She:He} is the {reg3?lady:lord} of {s58}.:{reg3?She:He} has no fiefs.}{s59}", 0),
##       (add_troop_note_tableau_mesh, ":troop_no", "tableau_troop_note_mesh"),
##     (try_end),
     ]),

  #script_update_troop_location_notes
  # INPUT: troop_no
  # OUTPUT: none
  ("update_troop_location_notes",
    [(store_script_param, ":troop_no", 1),
      (store_script_param, ":see_or_hear", 2),      
     (call_script, "script_get_information_about_troops_position", ":troop_no", 1),
      (try_begin),
        (neq, reg0, 0),       
	    (troop_get_type, reg1, ":troop_no"),         
        (try_begin),
          (eq, ":see_or_hear", 0),
          (add_troop_note_from_sreg, ":troop_no", 2, "@The last time you saw {reg1?her:him}, {s1}", 1),
        (else_try),
          (add_troop_note_from_sreg, ":troop_no", 2, "@The last time you heard about {reg1?her:him}, {s1}", 1),
        (try_end),
      (try_end),
     ]),

  #script_update_center_notes
  # INPUT: center_no
  # OUTPUT: none
  ("update_center_notes",
    [(store_script_param, ":center_no", 1),
      
     (party_get_slot, ":lord_troop", ":center_no", slot_town_lord),
		(try_begin),
       (ge, ":lord_troop", 0),
       (store_troop_faction, ":lord_faction", ":lord_troop"),
       (str_store_troop_name_link, s1, ":lord_troop"),
				(try_begin),
         (eq, ":lord_troop", "trp_player"),
         (gt, "$players_kingdom", 0),
         (str_store_faction_name_link, s2, "$players_kingdom"),
				(else_try),
         (str_store_faction_name_link, s2, ":lord_faction"),
				(try_end),
       (str_store_party_name, s50, ":center_no"),
		    (try_begin),
         (party_slot_eq, ":center_no", slot_party_type, spt_town),
         (str_store_string, s51, "@The town of {s50}"),
				(else_try),	
         (party_slot_eq, ":center_no", slot_party_type, spt_village),
         (party_get_slot, ":bound_center", ":center_no", slot_village_bound_center),
         (str_store_party_name_link, s52, ":bound_center"),
         (str_store_string, s51, "@The village of {s50} near {s52}"),
				(else_try),	
         (str_store_string, s51, "@{s50}"),
       (try_end),
       (str_store_string, s2, "@{s51} belongs to {s1} of {s2}.^"),
				(else_try),	
       (str_clear, s2),
     (try_end),
     (try_begin),
       (is_between, ":center_no", villages_begin, villages_end),
				(else_try),	
       (assign, ":num_villages", 0),
       (try_for_range_backwards, ":village_no", villages_begin, villages_end),
         (party_slot_eq, ":village_no", slot_village_bound_center, ":center_no"),
         (try_begin),
           (eq, ":num_villages", 0),
           (str_store_party_name_link, s8, ":village_no"),
				(else_try),	
           (eq, ":num_villages", 1),
           (str_store_party_name_link, s7, ":village_no"),
           (str_store_string, s8, "@{s7} and {s8}"),
				(else_try),	
           (str_store_party_name_link, s7, ":village_no"),
           (str_store_string, s8, "@{s7}, {s8}"),
				(try_end),
         (val_add, ":num_villages", 1),
		    (try_end),
		    (try_begin),
         (eq, ":num_villages", 0),
         (str_store_string, s2, "@{s2}It has no villages.^"),
       (else_try),
         (store_sub, reg0, ":num_villages", 1),
         (str_store_string, s2, "@{s2}{reg0?Its villages are:Its village is} {s8}.^"),
		    (try_end),
			(try_end),
     (call_script, "script_get_prosperity_text_to_s50", ":center_no"),
     (add_party_note_from_sreg, ":center_no", 0, "@{s2}Its prosperity is: {s50}", 0),
     (add_party_note_tableau_mesh, ":center_no", "tableau_center_note_mesh"),
     ]),
      

  #script_update_center_recon_notes
  # INPUT: center_no
  # OUTPUT: none
  ("update_center_recon_notes",
    [(store_script_param, ":center_no", 1),
     (try_begin),
       (this_or_next|is_between, ":center_no", towns_begin, towns_end),
       (is_between, ":center_no", castles_begin, castles_end),
       (party_get_slot, ":center_food_store", ":center_no", slot_party_food_store),
       (call_script, "script_center_get_food_consumption", ":center_no"),
       (assign, ":food_consumption", reg0),
       (store_div, reg6, ":center_food_store", ":food_consumption"),
       (party_collect_attachments_to_party, ":center_no", "p_collective_ally"),
       (party_get_num_companions, reg5, "p_collective_ally"),
       (add_party_note_from_sreg, ":center_no", 1, "@Current garrison consists of {reg5} men.^Has food stock for {reg6} days.", 1),
     (try_end),
     ]),
  
  #script_update_all_notes
  # INPUT: none
  # OUTPUT: none
  ("update_all_notes",
    [
      (call_script, "script_update_troop_notes", "trp_player"),
      (try_for_range, ":troop_no", kingdom_heroes_begin, kingdom_heroes_end),
        (call_script, "script_update_troop_notes", ":troop_no"),
      (try_end),
      (try_for_range, ":center_no", centers_begin, centers_end),
        (call_script, "script_update_center_notes", ":center_no"),
      (try_end),
      (try_for_range, ":faction_no", kingdoms_begin, kingdoms_end),
        (call_script, "script_update_faction_notes", ":faction_no"),
      (try_end),
     ]),

  #script_agent_troop_get_banner_mesh
  # INPUT: agent_no, troop_no
  # OUTPUT: banner_mesh
  ("agent_troop_get_banner_mesh",
    [
       (store_script_param, ":agent_no", 1),
       (store_script_param, ":troop_no", 2),
       (assign, ":banner_troop", -1),
       (assign, ":banner_mesh", "mesh_banners_default_b"),
       (try_begin),
         (lt, ":agent_no", 0),
         (try_begin),
           (ge, ":troop_no", 0),
           (this_or_next|troop_slot_ge, ":troop_no", slot_troop_banner_scene_prop, 1),
           (eq, ":troop_no", "trp_player"),
           (assign, ":banner_troop", ":troop_no"),
         (else_try),
           (is_between, ":troop_no", companions_begin, companions_end),
           (assign, ":banner_troop", "trp_player"),
         (else_try),
           (assign, ":banner_mesh", "mesh_banners_default_a"),
         (try_end),
       (else_try),
         (eq, "$g_is_quick_battle", 1),
         (agent_get_team, ":agent_team", ":agent_no"),
         (try_begin),
           (eq, ":agent_team", 0),
           (assign, ":banner_mesh", "$g_quick_battle_team_0_banner"),
         (else_try),
           (assign, ":banner_mesh", "$g_quick_battle_team_1_banner"),
         (try_end),
       (else_try),
         (game_in_multiplayer_mode),
         (agent_get_group, ":agent_group", ":agent_no"),
         (try_begin),
           (neg|player_is_active, ":agent_group"),
           (agent_get_player_id, ":agent_group", ":agent_no"),
         (try_end),
         (try_begin),
           #if player banners are not allowed, use the default banner mesh
           (eq, "$g_multiplayer_allow_player_banners", 1),
           (player_is_active, ":agent_group"),
           (player_get_banner_id, ":player_banner", ":agent_group"),
           (ge, ":player_banner", 0),
           (store_add, ":banner_mesh", ":player_banner", banner_meshes_begin),
           (assign, ":already_used", 0),
           (try_for_range, ":cur_faction", npc_kingdoms_begin, npc_kingdoms_end), #wrong client data check
             (faction_slot_eq, ":cur_faction", slot_faction_banner, ":banner_mesh"),
             (assign, ":already_used", 1),
           (try_end),
           (eq, ":already_used", 0), #otherwise use the default banner mesh
         (else_try),
           (agent_get_team, ":agent_team", ":agent_no"),
           (team_get_faction, ":team_faction_no", ":agent_team"),

           (try_begin),
             (agent_is_human, ":agent_no"),
             (faction_get_slot, ":banner_mesh", ":team_faction_no", slot_faction_banner),
           (else_try),
             (agent_get_rider, ":rider_agent_no", ":agent_no"),
             #(agent_get_position, pos1, ":agent_no"),
             #(position_get_x, ":pos_x", pos1),
             #(position_get_y, ":pos_y", pos1),
             #(assign, reg0, ":pos_x"),
             #(assign, reg1, ":pos_y"),
             #(assign, reg2, ":agent_no"),
             #(display_message, "@{!}agent_no:{reg2}, pos_x:{reg0} , posy:{reg1}"),
             (try_begin),
               (ge, ":rider_agent_no", 0),
               (agent_is_active, ":rider_agent_no"),
               (agent_get_team, ":rider_agent_team", ":rider_agent_no"),
               (team_get_faction, ":rider_team_faction_no", ":rider_agent_team"),
               (faction_get_slot, ":banner_mesh", ":rider_team_faction_no", slot_faction_banner),
             (else_try),
               (assign, ":banner_mesh", "mesh_banners_default_c"),
             (try_end),                   
           (try_end),             
         (try_end),
       (else_try),
         (agent_get_troop_id, ":troop_id", ":agent_no"),
         (this_or_next|troop_slot_ge,  ":troop_id", slot_troop_banner_scene_prop, 1),
         (eq, ":troop_no", "trp_player"),
         (assign, ":banner_troop", ":troop_id"),
       (else_try),
         (agent_get_party_id, ":agent_party", ":agent_no"),
         (try_begin),
           (lt, ":agent_party", 0),
           (is_between, ":troop_id", companions_begin, companions_end),
           (main_party_has_troop, ":troop_id"),
           (assign, ":agent_party", "p_main_party"),
         (try_end),
         (ge, ":agent_party", 0),
         (party_get_template_id, ":party_template", ":agent_party"),
         (try_begin),
           (eq, ":party_template", "pt_deserters"),
           (assign, ":banner_mesh", "mesh_banners_default_c"),
         (else_try),
           (is_between, ":agent_party", centers_begin, centers_end),
           (is_between, ":troop_id", companions_begin, companions_end),
           (neq, "$talk_context", tc_tavern_talk),
           #this should be a captured companion in prison
           (assign, ":banner_troop", "trp_player"),
         (else_try),
           (is_between, ":agent_party", centers_begin, centers_end),
           (party_get_slot, ":town_lord", "$g_encountered_party", slot_town_lord),
           (ge, ":town_lord", 0),
           (assign, ":banner_troop", ":town_lord"),
         (else_try),
           (this_or_next|party_slot_eq, ":agent_party", slot_party_type, spt_kingdom_hero_party),
           (             eq, ":agent_party", "p_main_party"),
           (party_get_num_companion_stacks, ":num_stacks", ":agent_party"),
           (gt, ":num_stacks", 0),
           (party_stack_get_troop_id, ":leader_troop_id", ":agent_party", 0),
           (this_or_next|troop_slot_ge,  ":leader_troop_id", slot_troop_banner_scene_prop, 1),
           (             eq, ":leader_troop_id", "trp_player"),
           (assign, ":banner_troop", ":leader_troop_id"),
         (try_end),
       (else_try), #Check if we are in a tavern
         (eq, "$talk_context", tc_tavern_talk),
         (neq, ":troop_no", "trp_player"),
         (assign, ":banner_mesh", "mesh_banners_default_d"),
       (else_try), #can't find party, this can be a town guard
         (neq, ":troop_no", "trp_player"),
         (is_between, "$g_encountered_party", walled_centers_begin, walled_centers_end),
         (party_get_slot, ":town_lord", "$g_encountered_party", slot_town_lord),
         (ge, ":town_lord", 0),
         (assign, ":banner_troop", ":town_lord"),
       (try_end),
       (try_begin),
         (ge, ":banner_troop", 0),
         (try_begin),
           (neg|troop_slot_ge, ":banner_troop", slot_troop_banner_scene_prop, 1),
           (assign, ":banner_mesh", "mesh_banners_default_b"),
         (else_try), 
           (troop_get_slot, ":banner_spr", ":banner_troop", slot_troop_banner_scene_prop),
           (store_add, ":banner_scene_props_end", banner_scene_props_end_minus_one, 1),
           (is_between, ":banner_spr", banner_scene_props_begin, ":banner_scene_props_end"),
           (val_sub, ":banner_spr", banner_scene_props_begin),
           (store_add, ":banner_mesh", ":banner_spr", arms_meshes_begin),
         (try_end),
       (try_end),
       (assign, reg0, ":banner_mesh"),
     ]),

  #script_shield_item_set_banner
  # INPUT: agent_no
  # OUTPUT: none
  ("shield_item_set_banner",
    [
       (store_script_param, ":agent_no", 1),
       (store_script_param, ":troop_no", 2),
       (assign, ":banner_troop", -1),
       (assign, ":banner_mesh", "mesh_banners_default_b"),
       (try_begin),
         (lt, ":agent_no", 0),
         (try_begin),
           (ge, ":troop_no", 0),
           (this_or_next|troop_slot_ge, ":troop_no", slot_troop_banner_scene_prop, 1),
           (eq, ":troop_no", "trp_player"),
           (assign, ":banner_troop", ":troop_no"),
         (else_try),
           (is_between, ":troop_no", companions_begin, companions_end),
           (assign, ":banner_troop", "trp_player"),
         (else_try),
           (assign, ":banner_mesh", "mesh_banners_default_a"),
         (try_end),
       (else_try),
         (eq, "$g_is_quick_battle", 1),
         (agent_get_team, ":agent_team", ":agent_no"),
         (try_begin),
           (eq, ":agent_team", 0),
           (assign, ":banner_mesh", "$g_quick_battle_team_0_banner"),
         (else_try),
           (assign, ":banner_mesh", "$g_quick_battle_team_1_banner"),
         (try_end),
       (else_try),
         (game_in_multiplayer_mode),
         (agent_get_group, ":agent_group", ":agent_no"),
         (try_begin),
           (neg|player_is_active, ":agent_group"),
           (agent_get_player_id, ":agent_group", ":agent_no"),
         (try_end),
         (try_begin),
           #if player banners are not allowed, use the default banner mesh
           (eq, "$g_multiplayer_allow_player_banners", 1),
           (player_is_active, ":agent_group"),
           (player_get_banner_id, ":player_banner", ":agent_group"),
           (ge, ":player_banner", 0),
           (store_add, ":banner_mesh", ":player_banner", banner_meshes_begin),
           (assign, ":already_used", 0),
           (try_for_range, ":cur_faction", npc_kingdoms_begin, npc_kingdoms_end), #wrong client data check
             (faction_slot_eq, ":cur_faction", slot_faction_banner, ":banner_mesh"),
             (assign, ":already_used", 1),
           (try_end),
           (eq, ":already_used", 0), #otherwise use the default banner mesh
         (else_try),
           (agent_get_team, ":agent_team", ":agent_no"),
           (team_get_faction, ":team_faction_no", ":agent_team"),

           (try_begin),
             (agent_is_human, ":agent_no"),
             (faction_get_slot, ":banner_mesh", ":team_faction_no", slot_faction_banner),
           (else_try),
             (agent_get_rider, ":rider_agent_no", ":agent_no"),
             #(agent_get_position, pos1, ":agent_no"),
             #(position_get_x, ":pos_x", pos1),
             #(position_get_y, ":pos_y", pos1),
             #(assign, reg0, ":pos_x"),
             #(assign, reg1, ":pos_y"),
             #(assign, reg2, ":agent_no"),
             #(display_message, "@{!}agent_no:{reg2}, pos_x:{reg0} , posy:{reg1}"),
             (try_begin),
               (ge, ":rider_agent_no", 0),
               (agent_is_active, ":rider_agent_no"),
               (agent_get_team, ":rider_agent_team", ":rider_agent_no"),
               (team_get_faction, ":rider_team_faction_no", ":rider_agent_team"),
               (faction_get_slot, ":banner_mesh", ":rider_team_faction_no", slot_faction_banner),
             (else_try),
               (assign, ":banner_mesh", "mesh_banners_default_c"),
             (try_end),                   
           (try_end),             
         (try_end),
       (else_try),
         (agent_get_troop_id, ":troop_id", ":agent_no"),
         (this_or_next|troop_slot_ge,  ":troop_id", slot_troop_banner_scene_prop, 1),
         (eq, ":troop_no", "trp_player"),
         (assign, ":banner_troop", ":troop_id"),
       (else_try),
         (agent_get_party_id, ":agent_party", ":agent_no"),
         (try_begin),
           (lt, ":agent_party", 0),
           (is_between, ":troop_id", companions_begin, companions_end),
           (main_party_has_troop, ":troop_id"),
           (assign, ":agent_party", "p_main_party"),
         (try_end),
         (ge, ":agent_party", 0),
         (party_get_template_id, ":party_template", ":agent_party"),
         (try_begin),
           (eq, ":party_template", "pt_deserters"),
           (assign, ":banner_mesh", "mesh_banners_default_c"),
         (else_try),
           (is_between, ":agent_party", centers_begin, centers_end),
           (is_between, ":troop_id", companions_begin, companions_end),
           (neq, "$talk_context", tc_tavern_talk),
           #this should be a captured companion in prison
           (assign, ":banner_troop", "trp_player"),
         (else_try),
           (is_between, ":agent_party", centers_begin, centers_end),
           (party_get_slot, ":town_lord", "$g_encountered_party", slot_town_lord),
           (ge, ":town_lord", 0),
           (assign, ":banner_troop", ":town_lord"),
         (else_try),
           (this_or_next|party_slot_eq, ":agent_party", slot_party_type, spt_kingdom_hero_party),
           (             eq, ":agent_party", "p_main_party"),
           (party_get_num_companion_stacks, ":num_stacks", ":agent_party"),
           (gt, ":num_stacks", 0),
           (party_stack_get_troop_id, ":leader_troop_id", ":agent_party", 0),
           (this_or_next|troop_slot_ge,  ":leader_troop_id", slot_troop_banner_scene_prop, 1),
           (             eq, ":leader_troop_id", "trp_player"),
           (assign, ":banner_troop", ":leader_troop_id"),
         (try_end),
       (else_try), #Check if we are in a tavern
         (eq, "$talk_context", tc_tavern_talk),
         (neq, ":troop_no", "trp_player"),
         (assign, ":banner_mesh", "mesh_banners_default_d"),
       (else_try), #can't find party, this can be a town guard
         (neq, ":troop_no", "trp_player"),
         (is_between, "$g_encountered_party", walled_centers_begin, walled_centers_end),
         (party_get_slot, ":town_lord", "$g_encountered_party", slot_town_lord),
         (ge, ":town_lord", 0),
         (assign, ":banner_troop", ":town_lord"),
       (try_end),
       (try_begin),
         (ge, ":banner_troop", 0),
         (try_begin),
           (neg|troop_slot_ge, ":banner_troop", slot_troop_banner_scene_prop, 1),
           (assign, ":banner_mesh", "mesh_banners_default_b"),
         (else_try), 
           (troop_get_slot, ":banner_spr", ":banner_troop", slot_troop_banner_scene_prop),
           (store_add, ":banner_scene_props_end", banner_scene_props_end_minus_one, 1),
           (is_between, ":banner_spr", banner_scene_props_begin, ":banner_scene_props_end"),
           (val_sub, ":banner_spr", banner_scene_props_begin),
           (store_add, ":banner_mesh", ":banner_spr", arms_meshes_begin),
         (try_end),
       (try_end),
       (assign, reg0, ":banner_mesh"),
     ]),
  #script_shield_item_set_banner
  # INPUT: agent_no
  # OUTPUT: none
  ("shield_item_set_banner",
    [
     ]),

  
  #script_troop_agent_set_banner
  # INPUT: agent_no
  # OUTPUT: none
  ("troop_agent_set_banner",
    [
       (store_script_param, ":tableau_no",1),
       (store_script_param, ":agent_no", 2),
       (store_script_param, ":troop_no", 3),
       (call_script, "script_agent_troop_get_banner_mesh", ":agent_no", ":troop_no"),
       (cur_agent_set_banner_tableau_material, ":tableau_no", reg0),
     ]),

  #script_add_troop_to_cur_tableau
  # INPUT: troop_no
  # OUTPUT: none
  ("add_troop_to_cur_tableau",
    [
       (store_script_param, ":troop_no",1),

       (set_fixed_point_multiplier, 100),
       (assign, ":banner_mesh", -1),
       (troop_get_slot, ":banner_spr", ":troop_no", slot_troop_banner_scene_prop),
       (store_add, ":banner_scene_props_end", banner_scene_props_end_minus_one, 1),
       (try_begin),
         (is_between, ":banner_spr", banner_scene_props_begin, ":banner_scene_props_end"),
         (val_sub, ":banner_spr", banner_scene_props_begin),
         (store_add, ":banner_mesh", ":banner_spr", banner_meshes_begin),
       (try_end),

       (cur_tableau_clear_override_items),
       
#       (cur_tableau_set_override_flags, af_override_fullhelm),
       (cur_tableau_set_override_flags, af_override_head|af_override_weapons),
       
       (init_position, pos2),
       (cur_tableau_set_camera_parameters, 1, 6, 6, 10, 10000),

       (init_position, pos5),
       (assign, ":eye_height", 162),
       (store_mul, ":camera_distance", ":troop_no", 87323),
#       (val_mod, ":camera_distance", 5),
       (assign, ":camera_distance", 139),
       (store_mul, ":camera_yaw", ":troop_no", 124337),
       (val_mod, ":camera_yaw", 50),
       (val_add, ":camera_yaw", -25),
       (store_mul, ":camera_pitch", ":troop_no", 98123),
       (val_mod, ":camera_pitch", 20),
       (val_add, ":camera_pitch", -14),
       (assign, ":animation", "anim_stand_man"),
       
##       (troop_get_inventory_slot, ":horse_item", ":troop_no", ek_horse),
##       (try_begin),
##         (gt, ":horse_item", 0),
##         (assign, ":eye_height", 210),
##         (cur_tableau_add_horse, ":horse_item", pos2, anim_horse_stand, 0),
##         (assign, ":animation", anim_ride_0),
##         (position_set_z, pos5, 125),
##         (try_begin),
##           (is_between, ":camera_yaw", -10, 10), #make sure horse head doesn't obstruct face.
##           (val_min, ":camera_pitch", -5),
##         (try_end),
##       (try_end),
       (position_set_z, pos5, ":eye_height"),

       # camera looks towards -z axis
       (position_rotate_x, pos5, -90),
       (position_rotate_z, pos5, 180),

       # now apply yaw and pitch
       (position_rotate_y, pos5, ":camera_yaw"),
       (position_rotate_x, pos5, ":camera_pitch"),
       (position_move_z, pos5, ":camera_distance", 0),
       (position_move_x, pos5, 5, 0),

       (try_begin),
         (ge, ":banner_mesh", 0),

         (init_position, pos1),
         (position_set_z, pos1, -1500),
         (position_set_x, pos1, 265),
         (position_set_y, pos1, 400),
         (position_transform_position_to_parent, pos3, pos5, pos1),
         (cur_tableau_add_mesh, ":banner_mesh", pos3, 400, 0),
       (try_end),
       (cur_tableau_add_troop, ":troop_no", pos2, ":animation" , 0),

       (cur_tableau_set_camera_position, pos5),

       (copy_position, pos8, pos5),
       (position_rotate_x, pos8, -90), #y axis aligned with camera now. z is up
       (position_rotate_z, pos8, 30), 
       (position_rotate_x, pos8, -60), 
       (cur_tableau_add_sun_light, pos8, 175,150,125),
     ]),

  #script_add_troop_to_cur_tableau_for_character
  # INPUT: troop_no
  # OUTPUT: none
  ("add_troop_to_cur_tableau_for_character",
    [
       (store_script_param, ":troop_no",1),

       (set_fixed_point_multiplier, 100),

       (cur_tableau_clear_override_items),
       (cur_tableau_set_override_flags, af_override_fullhelm),
##       (cur_tableau_set_override_flags, af_override_head|af_override_weapons),
       
       (init_position, pos2),
       (cur_tableau_set_camera_parameters, 1, 4, 8, 10, 10000),

       (init_position, pos5),
       (assign, ":cam_height", 150),
#       (val_mod, ":camera_distance", 5),
       (assign, ":camera_distance", 360),
       (assign, ":camera_yaw", -15),
       (assign, ":camera_pitch", -18),
       (assign, ":animation", anim_stand_man),
       
       (position_set_z, pos5, ":cam_height"),

       # camera looks towards -z axis
       (position_rotate_x, pos5, -90),
       (position_rotate_z, pos5, 180),

       # now apply yaw and pitch
       (position_rotate_y, pos5, ":camera_yaw"),
       (position_rotate_x, pos5, ":camera_pitch"),
       (position_move_z, pos5, ":camera_distance", 0),
       (position_move_x, pos5, 5, 0),

       (try_begin),
         (troop_is_hero, ":troop_no"),
         (cur_tableau_add_troop, ":troop_no", pos2, ":animation", -1),
       (else_try),
         (store_mul, ":random_seed", ":troop_no", 126233),
         (val_mod, ":random_seed", 1000),
         (val_add, ":random_seed", 1),
         (cur_tableau_add_troop, ":troop_no", pos2, ":animation", ":random_seed"),
       (try_end),
       (cur_tableau_set_camera_position, pos5),

       (copy_position, pos8, pos5),
       (position_rotate_x, pos8, -90), #y axis aligned with camera now. z is up
       (position_rotate_z, pos8, 30), 
       (position_rotate_x, pos8, -60), 
       (cur_tableau_add_sun_light, pos8, 175,150,125),
     ]),
	
  #script_add_troop_to_cur_tableau_for_inventory
  # INPUT: troop_no
  # OUTPUT: none
  ("add_troop_to_cur_tableau_for_inventory",
    [
       (store_script_param, ":troop_no",1),
       (store_mod, ":side", ":troop_no", 4), #side flag is inside troop_no value
       (val_div, ":troop_no", 4), #removing the flag bit
       (val_mul, ":side", 90), #to degrees

       (set_fixed_point_multiplier, 100),

       (cur_tableau_clear_override_items),
       
       (init_position, pos2),
       (position_rotate_z, pos2, ":side"),
       (cur_tableau_set_camera_parameters, 1, 4, 6, 10, 10000),

       (init_position, pos5),
       (assign, ":cam_height", 105),
#       (val_mod, ":camera_distance", 5),
       (assign, ":camera_distance", 380),
       (assign, ":camera_yaw", -15),
       (assign, ":camera_pitch", -18),
       (assign, ":animation", anim_stand_man),
       
       (position_set_z, pos5, ":cam_height"),

       # camera looks towards -z axis
       (position_rotate_x, pos5, -90),
       (position_rotate_z, pos5, 180),

       # now apply yaw and pitch
       (position_rotate_y, pos5, ":camera_yaw"),
       (position_rotate_x, pos5, ":camera_pitch"),
       (position_move_z, pos5, ":camera_distance", 0),
       (position_move_x, pos5, 5, 0),

       (try_begin),
         (troop_is_hero, ":troop_no"),
         (cur_tableau_add_troop, ":troop_no", pos2, ":animation", -1),
       (else_try),
         (store_mul, ":random_seed", ":troop_no", 126233),
         (val_mod, ":random_seed", 1000),
         (val_add, ":random_seed", 1),
         (cur_tableau_add_troop, ":troop_no", pos2, ":animation", ":random_seed"),
       (try_end),
       (cur_tableau_set_camera_position, pos5),

       (copy_position, pos8, pos5),
       (position_rotate_x, pos8, -90), #y axis aligned with camera now. z is up
       (position_rotate_z, pos8, 30), 
       (position_rotate_x, pos8, -60), 
       (cur_tableau_add_sun_light, pos8, 175,150,125),
     ]),

  #script_add_troop_to_cur_tableau_for_profile
  # INPUT: troop_no
  # OUTPUT: none
  ("add_troop_to_cur_tableau_for_profile",
    [
       (store_script_param, ":troop_no",1),

       (set_fixed_point_multiplier, 100),

       (cur_tableau_clear_override_items),
       
       (cur_tableau_set_camera_parameters, 1, 4, 6, 10, 10000),

       (init_position, pos5),
       (assign, ":cam_height", 105),
#       (val_mod, ":camera_distance", 5),
       (assign, ":camera_distance", 380),
       (assign, ":camera_yaw", -15),
       (assign, ":camera_pitch", -18),
       (assign, ":animation", anim_stand_man),
       
       (position_set_z, pos5, ":cam_height"),

       # camera looks towards -z axis
       (position_rotate_x, pos5, -90),
       (position_rotate_z, pos5, 180),

       # now apply yaw and pitch
       (position_rotate_y, pos5, ":camera_yaw"),
       (position_rotate_x, pos5, ":camera_pitch"),
       (position_move_z, pos5, ":camera_distance", 0),
       (position_move_x, pos5, 5, 0),

       (profile_get_banner_id, ":profile_banner"),
       (try_begin),
         (ge, ":profile_banner", 0),
         (init_position, pos2),
         (val_add, ":profile_banner", banner_meshes_begin),
         (position_set_x, pos2, -175),
         (position_set_y, pos2, -300),
         (position_set_z, pos2, 180),
         (position_rotate_x, pos2, 90),
         (position_rotate_y, pos2, -15),
         (cur_tableau_add_mesh, ":profile_banner", pos2, 0, 0),
       (try_end),

       (init_position, pos2),
       (try_begin),
         (troop_is_hero, ":troop_no"),
         (cur_tableau_add_troop, ":troop_no", pos2, ":animation", -1),
       (else_try),
         (store_mul, ":random_seed", ":troop_no", 126233),
         (val_mod, ":random_seed", 1000),
         (val_add, ":random_seed", 1),
         (cur_tableau_add_troop, ":troop_no", pos2, ":animation", ":random_seed"),
       (try_end),
       (cur_tableau_set_camera_position, pos5),

       (copy_position, pos8, pos5),
       (position_rotate_x, pos8, -90), #y axis aligned with camera now. z is up
       (position_rotate_z, pos8, 30), 
       (position_rotate_x, pos8, -60), 
       (cur_tableau_add_sun_light, pos8, 175,150,125),
     ]),

  #script_add_troop_to_cur_tableau_for_retirement
  # INPUT: type
  # OUTPUT: none
  ("add_troop_to_cur_tableau_for_retirement", [
    (store_script_param, ":type", 1),
    (cur_tableau_set_override_flags, af_override_everything),

    (try_begin),
      (eq, ":type", 0),
      (cur_tableau_add_override_item, "itm_pilgrim_hood"),
      (cur_tableau_add_override_item, "itm_pilgrim_disguise"),
      (cur_tableau_add_override_item, "itm_wrapping_boots"),
      (assign, ":animation", "anim_pose_1"),
    (else_try),
      (eq, ":type", 1),
      (cur_tableau_add_override_item, "itm_pilgrim_hood"),
      (cur_tableau_add_override_item, "itm_red_tunic"),
      (cur_tableau_add_override_item, "itm_wrapping_boots"),
      (cur_tableau_add_override_item, "itm_dagger"),
      (assign, ":animation", "anim_pose_1"),
    (else_try),
      (eq, ":type", 2),
      (cur_tableau_add_override_item, "itm_linen_tunic"),
      (cur_tableau_add_override_item, "itm_wrapping_boots"),
      (assign, ":animation", "anim_pose_2"),
    (else_try),
      (eq, ":type", 3),
      (cur_tableau_add_override_item, "itm_nomad_vest"),
      (cur_tableau_add_override_item, "itm_nomad_boots"),
      (assign, ":animation", "anim_pose_2"),
    (else_try),
      (eq, ":type", 4),
      (cur_tableau_add_override_item, "itm_leather_apron"),
      (cur_tableau_add_override_item, "itm_leather_boots"),
      (assign, ":animation", "anim_pose_3"),
    (else_try),
      (eq, ":type", 5),
      (cur_tableau_add_override_item, "itm_red_shirt"),
      (cur_tableau_add_override_item, "itm_woolen_hose"),
      (cur_tableau_add_override_item, "itm_fur_hat"),
      (assign, ":animation", "anim_pose_3"),
    (else_try),
      (eq, ":type", 6),
      (cur_tableau_add_override_item, "itm_red_gambeson"),
      (cur_tableau_add_override_item, "itm_leather_boots"),
      (cur_tableau_add_override_item, "itm_sword_medieval_c"),
      (assign, ":animation", "anim_pose_4"),
    (else_try),
      (eq, ":type", 7),
      (cur_tableau_add_override_item, "itm_nobleman_outfit"),
      (cur_tableau_add_override_item, "itm_blue_hose"),
      (cur_tableau_add_override_item, "itm_sword_medieval_c"),
      (assign, ":animation", "anim_pose_4"),
    (else_try),
      (eq, ":type", 8),
      (cur_tableau_add_override_item, "itm_courtly_outfit"),
      (cur_tableau_add_override_item, "itm_woolen_hose"),
      (cur_tableau_add_override_item, "itm_sword_medieval_c"),
      (assign, ":animation", "anim_pose_4"),
    (else_try),
##      (eq, ":type", 9),
      (cur_tableau_add_override_item, "itm_heraldic_mail_with_surcoat_for_tableau"),
      (cur_tableau_add_override_item, "itm_mail_boots_for_tableau"),
      (cur_tableau_add_override_item, "itm_sword_medieval_c"),
      (assign, ":animation", "anim_pose_5"),
##    (else_try), #not used
##      (cur_tableau_add_override_item, "itm_heraldic_mail_with_tabard"),
##      (cur_tableau_add_override_item, "itm_iron_greaves"),
##      (cur_tableau_add_override_item, "itm_sword_medieval_c"),
##      (assign, ":animation", "anim_pose_5"),
    (try_end),

##    (set_fixed_point_multiplier, 100),
##    (cur_tableau_set_background_color, 0x00000000),
##    (cur_tableau_set_ambient_light, 10,11,15),

##     (init_position, pos8),
##     (position_set_x, pos8, -210),
##     (position_set_y, pos8, 200),
##     (position_set_z, pos8, 300),
##     (cur_tableau_add_point_light, pos8, 550,500,450),


    (set_fixed_point_multiplier, 100),
    (cur_tableau_set_camera_parameters, 1, 6, 6, 10, 10000),
    (assign, ":cam_height", 155),
    (assign, ":camera_distance", 575),
    (assign, ":camera_yaw", -5),
    (assign, ":camera_pitch", 10),

    (init_position, pos5),
    (position_set_z, pos5, ":cam_height"),
    # camera looks towards -z axis
    (position_rotate_x, pos5, -90),
    (position_rotate_z, pos5, 180),
    # now apply yaw and pitch
    (position_rotate_y, pos5, ":camera_yaw"),
    (position_rotate_x, pos5, ":camera_pitch"),
    (position_move_z, pos5, ":camera_distance", 0),
    (position_move_x, pos5, 60, 0),

    (init_position, pos2),
    (cur_tableau_add_troop, "trp_player", pos2, ":animation", 0),
    (cur_tableau_set_camera_position, pos5),

    (copy_position, pos8, pos5),
    (position_rotate_x, pos8, -90), #y axis aligned with camera now. z is up
    (position_rotate_z, pos8, 30),
    (position_rotate_x, pos8, -60),
    (cur_tableau_add_sun_light, pos8, 175,150,125),
    ]),
  
  #script_add_troop_to_cur_tableau_for_party
  # INPUT: troop_no
  # OUTPUT: none
  ("add_troop_to_cur_tableau_for_party",
    [
       (store_script_param, ":troop_no",1),
       (store_mod, ":hide_weapons", ":troop_no", 2), #hide_weapons flag is inside troop_no value
       (val_div, ":troop_no", 2), #removing the flag bit

       (set_fixed_point_multiplier, 100),

       (cur_tableau_clear_override_items),
       (try_begin),
         (eq, ":hide_weapons", 1),
         (cur_tableau_set_override_flags, af_override_fullhelm|af_override_head|af_override_weapons),
       (try_end),
       
       (init_position, pos2),
       (cur_tableau_set_camera_parameters, 1, 6, 6, 10, 10000),

       (init_position, pos5),
       (assign, ":cam_height", 105),
#       (val_mod, ":camera_distance", 5),
       (assign, ":camera_distance", 450),
       (assign, ":camera_yaw", 15),
       (assign, ":camera_pitch", -18),
       (assign, ":animation", anim_stand_man),
       
       (troop_get_inventory_slot, ":horse_item", ":troop_no", ek_horse),
       (try_begin),
         (gt, ":horse_item", 0),
         (eq, ":hide_weapons", 0),
         (cur_tableau_add_horse, ":horse_item", pos2, "anim_horse_stand", 0),
         (assign, ":animation", "anim_ride_0"),
         (assign, ":camera_yaw", 23),
         (assign, ":cam_height", 150),
         (assign, ":camera_distance", 550),
       (try_end),
       (position_set_z, pos5, ":cam_height"),

       # camera looks towards -z axis
       (position_rotate_x, pos5, -90),
       (position_rotate_z, pos5, 180),

       # now apply yaw and pitch
       (position_rotate_y, pos5, ":camera_yaw"),
       (position_rotate_x, pos5, ":camera_pitch"),
       (position_move_z, pos5, ":camera_distance", 0),
       (position_move_x, pos5, 5, 0),

       (try_begin),
         (troop_is_hero, ":troop_no"),
         (cur_tableau_add_troop, ":troop_no", pos2, ":animation", -1),
       (else_try),
         (store_mul, ":random_seed", ":troop_no", 126233),
         (val_mod, ":random_seed", 1000),
         (val_add, ":random_seed", 1),
         (cur_tableau_add_troop, ":troop_no", pos2, ":animation", ":random_seed"),
       (try_end),
       (cur_tableau_set_camera_position, pos5),

       (copy_position, pos8, pos5),
       (position_rotate_x, pos8, -90), #y axis aligned with camera now. z is up
       (position_rotate_z, pos8, 30), 
       (position_rotate_x, pos8, -60), 
       (cur_tableau_add_sun_light, pos8, 175,150,125),
     ]),

  #script_get_prosperity_text_to_s50
  # INPUT: center_no
  # OUTPUT: none
  ("get_prosperity_text_to_s50",
    [(store_script_param, ":center_no", 1),
     (party_get_slot, ":prosperity", ":center_no", slot_town_prosperity),
     (val_div, ":prosperity", 20),
     (try_begin),
       (eq, ":prosperity", 0), #0..19
       (str_store_string, s50, "@Very Poor"),
     (else_try),
       (eq, ":prosperity", 1), #20..39
       (str_store_string, s50, "@Poor"),
     (else_try),
       (eq, ":prosperity", 2), #40..59
       (str_store_string, s50, "@Average"),
     (else_try),
       (eq, ":prosperity", 3), #60..79
       (str_store_string, s50, "@Rich"),
     (else_try),
       (str_store_string, s50, "@Very Rich"), #80..99
     (try_end),
     ]),

  #script_spawn_bandits
  # INPUT: none
  # OUTPUT: none
  ("spawn_bandits",
    [(set_spawn_radius,1),
     (try_begin),
       (store_num_parties_of_template, ":num_parties", "pt_mountain_bandits"),
       (lt,":num_parties",12),

	   (store_random_in_range,":spawn_point",0,2),
	   (try_begin),
	     (eq, ":spawn_point", 0),
		 (assign,":spawn_point","p_mountain_bandit_spawn_point_1"),
	   (else_try),
	     (assign,":spawn_point","p_mountain_bandit_spawn_point_2"),
	   (try_end),

       (spawn_around_party,":spawn_point","pt_mountain_bandits"),
     (try_end),
     (try_begin),
       (store_num_parties_of_template, ":num_parties", "pt_forest_bandits"),
       (lt,":num_parties",12),

	   (store_random_in_range,":spawn_point",0,2),
	   (try_begin),
	     (eq, ":spawn_point", 0),
		 (assign,":spawn_point","p_forest_bandit_spawn_point_1"),
	   (else_try),
	     (assign,":spawn_point","p_forest_bandit_spawn_point_2"),
	   (try_end),

       (spawn_around_party,":spawn_point","pt_forest_bandits"),
     (try_end),
     (try_begin),
       (store_num_parties_of_template, ":num_parties", "pt_sea_raiders"),
       (lt,":num_parties",12),       

	   (store_random_in_range,":spawn_point",0,2),
	   (try_begin),
	     (eq, ":spawn_point", 0),
		 (assign,":spawn_point","p_sea_raider_spawn_point_1"),
	   (else_try),
	     (assign,":spawn_point","p_sea_raider_spawn_point_2"),
	   (try_end),
       
       (spawn_around_party,":spawn_point","pt_sea_raiders"),
     (try_end),
     (try_begin),
       (store_num_parties_of_template, ":num_parties", "pt_steppe_bandits"),
       (lt,":num_parties",12),

	   (store_random_in_range,":spawn_point",0,2),
	   (try_begin),
	     (eq, ":spawn_point", 0),
		 (assign,":spawn_point","p_steppe_bandit_spawn_point_1"),
	   (else_try),
	     (assign,":spawn_point","p_steppe_bandit_spawn_point_2"),
	   (try_end),

       (spawn_around_party,":spawn_point","pt_steppe_bandits"),
     (try_end),
     (try_begin),
       (store_num_parties_of_template, ":num_parties", "pt_looters"),
       (lt,":num_parties",20),
       (store_random_in_range,":spawn_point",villages_begin,villages_end), #spawn looters twice to have lots of them at the beginning       
       (spawn_around_party,":spawn_point","pt_looters"),
       (assign, ":spawned_party_id", reg0),
       (try_begin),
         (check_quest_active, "qst_deal_with_looters"),
         (party_set_flags, ":spawned_party_id", pf_quest_party, 1),
       (else_try),
         (party_set_flags, ":spawned_party_id", pf_quest_party, 0),
       (try_end),
     (try_end),
     (try_begin),
       (store_num_parties_of_template, ":num_parties", "pt_deserters"),
       (lt,":num_parties",20),
       (set_spawn_radius, 6),
       (try_for_range, ":troop_no", kingdom_heroes_begin, kingdom_heroes_end),
         (store_random_in_range, ":random_no", 0, 100),
         (lt, ":random_no", 5),
         (troop_get_slot, ":party_no", ":troop_no", slot_troop_leaded_party),
         (store_troop_faction, ":troop_faction", ":troop_no"),
         (neq, ":troop_faction", "fac_player_supporters_faction"),
         (gt, ":party_no", 0),
         (neg|party_is_in_any_town, ":party_no"),
         (spawn_around_party, ":party_no", "pt_deserters"),
         (assign, ":new_party", reg0),

         (store_character_level, ":player_level", "trp_player"),
		 (store_sub, ":player_level_sub_2", ":player_level", 2),
		 (val_max, ":player_level_sub_2", 0),		 
		 (store_div, ":player_level_sub_2_div_3", ":player_level_sub_2", 3),
		 (val_max, ":player_level_sub_2_div_3", 1),
		 (val_min, ":player_level_sub_2_div_3", 10),

         (call_script, "script_ms_fill_random_army_template_to_party", ":new_party", ":troop_faction", ":player_level_sub_2_div_3"),
       (try_end),
	(try_end),
     ]),

  #script_count_mission_casualties_from_agents
  # INPUT: none
  # OUTPUT: none
  ("count_mission_casualties_from_agents",
    [(party_clear, "p_player_casualties"),
     (party_clear, "p_enemy_casualties"),
     (party_clear, "p_ally_casualties"),
     (assign, "$any_allies_at_the_last_battle", 0),
     #(assign, "$num_routed_us", 0), #these should not assign to 0 here to protect routed agents to spawn again in next turns.
     #(assign, "$num_routed_allies", 0),
     #(assign, "$num_routed_enemies", 0),

     #initialize all routed counts of troops
     (try_for_agents, ":cur_agent"),
       (agent_is_human, ":cur_agent"),     
       (agent_get_party_id, ":agent_party", ":cur_agent"),
       (agent_get_troop_id, ":agent_troop_id", ":cur_agent"),
       (troop_set_slot, ":agent_troop_id", slot_troop_player_routed_agents, 0),
       (troop_set_slot, ":agent_troop_id", slot_troop_ally_routed_agents, 0),
       (troop_set_slot, ":agent_troop_id", slot_troop_enemy_routed_agents, 0),
     (try_end),
     
     (try_for_agents, ":cur_agent"),
       (agent_is_human, ":cur_agent"),     
       (agent_get_party_id, ":agent_party", ":cur_agent"),
       (try_begin),
         (neq, ":agent_party", "p_main_party"),
         (agent_is_ally, ":cur_agent"),
         (assign, "$any_allies_at_the_last_battle", 1),
       (try_end),
       #count routed agents in player party, ally parties and enemy parties
       (try_begin),
         (agent_is_routed, ":cur_agent"),
         (agent_get_slot, ":agent_was_running_away", ":cur_agent", slot_agent_is_running_away),
         (eq, ":agent_was_running_away", 1),
         (try_begin),
           (agent_get_troop_id, ":routed_ag_troop_id", ":cur_agent"),
           (agent_get_party_id, ":routed_ag_party_id", ":cur_agent"),
           #only enemies
           #only regulars
           (store_faction_of_party, ":faction_of_routed_agent_party", ":routed_ag_party_id"),
              
           (try_begin),
             (eq, ":agent_party", "p_main_party"),
             (val_add, "$num_routed_us", 1),
           (else_try),
             (agent_is_ally, ":cur_agent"),     
             (val_add, "$num_routed_allies", 1),
           (else_try),
             #for now only count and include routed enemy agents in new routed party.
             (val_add, "$num_routed_enemies", 1),
             (faction_get_slot, ":num_routed_agents_in_this_faction", ":faction_of_routed_agent_party", slot_faction_num_routed_agents),
             (val_add, ":num_routed_agents_in_this_faction", 1),
             (faction_set_slot, ":faction_of_routed_agent_party", slot_faction_num_routed_agents, ":num_routed_agents_in_this_faction"),           
             (party_add_members, "p_routed_enemies", ":routed_ag_troop_id", 1),     
           (try_end),
         (try_end),
         (agent_get_troop_id, ":agent_troop_id", ":cur_agent"),
         (try_begin),
           (eq, ":agent_party", "p_main_party"),
           (troop_get_slot, ":player_routed_agents", ":agent_troop_id", slot_troop_player_routed_agents),
           (val_add, ":player_routed_agents", 1),
           (troop_set_slot, ":agent_troop_id", slot_troop_player_routed_agents, ":player_routed_agents"),
           
         (else_try),
           (agent_is_ally, ":cur_agent"),     
           (troop_get_slot, ":ally_routed_agents", ":agent_troop_id", slot_troop_ally_routed_agents),
           (val_add, ":ally_routed_agents", 1),
           (troop_set_slot, ":agent_troop_id", slot_troop_ally_routed_agents, ":ally_routed_agents"),
           
         (else_try),
           (troop_get_slot, ":enemy_routed_agents", ":agent_troop_id", slot_troop_enemy_routed_agents),
           (val_add, ":enemy_routed_agents", 1),
           (troop_set_slot, ":agent_troop_id", slot_troop_enemy_routed_agents, ":enemy_routed_agents"),

         (try_end),   
       (try_end),
       #count and save killed agents in player party, ally parties and enemy parties
       (neg|agent_is_alive, ":cur_agent"),
       (agent_get_troop_id, ":agent_troop_id", ":cur_agent"),
       (try_begin),
         (eq, ":agent_party", "p_main_party"),
         (party_add_members, "p_player_casualties", ":agent_troop_id", 1),
         (try_begin),
           (agent_is_wounded, ":cur_agent"),
           (party_wound_members, "p_player_casualties", ":agent_troop_id", 1),
         (try_end),
       (else_try),
         (agent_is_ally, ":cur_agent"),
         (party_add_members, "p_ally_casualties", ":agent_troop_id", 1),
         (try_begin),
           (agent_is_wounded, ":cur_agent"),
           (party_wound_members, "p_ally_casualties", ":agent_troop_id", 1),
         (try_end),
       (else_try),
         (party_add_members, "p_enemy_casualties", ":agent_troop_id", 1),
         (try_begin),
           (agent_is_wounded, ":cur_agent"),
           (party_wound_members, "p_enemy_casualties", ":agent_troop_id", 1),
         (try_end),
       (try_end),
     (try_end),
     ]),

  #script_get_max_skill_of_player_party
  # INPUT: arg1 = skill_no
  # OUTPUT: reg0 = max_skill, reg1 = skill_owner_troop_no
  ("get_max_skill_of_player_party",
    [(store_script_param, ":skill_no", 1),
     (party_get_num_companion_stacks, ":num_stacks","p_main_party"),
     (store_skill_level, ":max_skill", ":skill_no", "trp_player"),
     (assign, ":skill_owner", "trp_player"),
     (try_for_range, ":i_stack", 0, ":num_stacks"),
       (party_stack_get_troop_id, ":stack_troop","p_main_party",":i_stack"),
       (troop_is_hero, ":stack_troop"),
       (neg|troop_is_wounded, ":stack_troop"),
       (store_skill_level, ":cur_skill", ":skill_no", ":stack_troop"),
       (gt, ":cur_skill", ":max_skill"),
       (assign, ":max_skill", ":cur_skill"),
       (assign, ":skill_owner", ":stack_troop"),
     (try_end),
     (assign, reg0, ":max_skill"),
     (assign, reg1, ":skill_owner"),
     ]),

  #script_upgrade_hero_party
  # INPUT: arg1 = party_id, arg2 = xp_amount
  ("upgrade_hero_party",
    [(store_script_param, ":party_no", 1),
     (store_script_param, ":xp_amount", 2),
     (party_upgrade_with_xp, ":party_no", ":xp_amount", 0),
     ]),

  #script_get_improvement_details
  # INPUT: arg1 = improvement
  # OUTPUT: reg0 = base_cost
  ("get_improvement_details",
    [(store_script_param, ":improvement_no", 1),
     (try_begin),
       (eq, ":improvement_no", slot_center_has_manor),
       (str_store_string, s0, "@Manor"),
       (str_store_string, s1, "@A manor lets you rest at the village and pay your troops half wages while you rest."),
       (assign, reg0, 8000),
     (else_try),
       (eq, ":improvement_no", slot_center_has_fish_pond),
       (str_store_string, s0, "@Mill"),
       (str_store_string, s1, "@A mill increases village prosperity by 5%."),
       (assign, reg0, 6000),
     (else_try),
       (eq, ":improvement_no", slot_center_has_watch_tower),
       (str_store_string, s0, "@Watch Tower"),
       (str_store_string, s1, "@A watch tower lets the villagers raise alarm earlier. The time it takes for enemies to loot the village increases by 25%."),
       (assign, reg0, 5000),
     (else_try),
       (eq, ":improvement_no", slot_center_has_school),
       (str_store_string, s0, "@School"),
       (str_store_string, s1, "@A shool increases the loyality of the villagers to you by +1 every month."),
       (assign, reg0, 9000),
     (else_try),
       (eq, ":improvement_no", slot_center_has_messenger_post),
       (str_store_string, s0, "@Messenger Post"),
       (str_store_string, s1, "@A messenger post lets the inhabitants send you a message whenever enemies are nearby, even if you are far away from here."),
       (assign, reg0, 4000),
     (else_try),
       (eq, ":improvement_no", slot_center_has_prisoner_tower),
       (str_store_string, s0, "@Prison Tower"),
       (str_store_string, s1, "@A prison tower reduces the chance of captives held here running away successfully."),
       (assign, reg0, 7000),
     (try_end),
     ]),
  
  #script_cf_troop_agent_is_alive
  # INPUT: arg1 = troop_id
  ("cf_troop_agent_is_alive",
    [(store_script_param, ":troop_no", 1),
     (assign, ":alive_count", 0),
     (try_for_agents, ":cur_agent"),
       (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
       (eq, ":troop_no", ":cur_agent_troop"),
       (agent_is_alive, ":cur_agent"),
       (val_add, ":alive_count", 1),
     (try_end),
     (gt, ":alive_count", 0),
     ]),

  #script_cf_village_recruit_volunteers_cond
  # INPUT: none
  # OUTPUT: none
  ("cf_village_recruit_volunteers_cond",
    [	
	 (neg|party_slot_eq, "$current_town", slot_village_state, svs_looted),
     (neg|party_slot_eq, "$current_town", slot_village_state, svs_being_raided),
     (neg|party_slot_ge, "$current_town", slot_village_infested_by_bandits, 1),

     (store_faction_of_party, ":village_faction", "$current_town"),	 
     (party_get_slot, ":center_relation", "$current_town", slot_center_player_relation),
     (store_relation, ":village_faction_relation", ":village_faction", "fac_player_faction"),
     (ge, ":center_relation", 0),
	 (ge, ":village_faction_relation", 0),
	 
	 (try_begin),
	   (call_script, "script_party_count_members_with_full_health", "p_main_party"),
	   (assign, ":number_of_members", reg0),
	   (le, ":number_of_members", 10),	 
	   (assign, ":player_has_center", 0),
	   (try_for_range, ":cur_center", centers_begin, centers_end),
	     (party_get_slot, ":center_lord", ":cur_center", slot_town_lord),
	     (eq, ":center_lord", "trp_player"),
	     (assign, ":player_has_center", 1),
	   (try_end),
	   (eq, ":player_has_center", 0),

	   (assign, ":player_is_at_harsh_conditions", 1),
     (else_try),
	   (assign, ":player_is_at_harsh_conditions", 0),
     (try_end),

     (this_or_next|eq, ":village_faction", "$players_kingdom"),
     (this_or_next|eq, ":village_faction", "$supported_pretender_old_faction"),
	 (this_or_next|eq, ":player_is_at_harsh_conditions", 1),
	 (eq, ":village_faction", "fac_player_faction"),
		
     (party_slot_ge, "$current_town", slot_center_volunteer_troop_amount, 0),
     (party_slot_ge, "$current_town", slot_center_volunteer_troop_type, 1),
     (party_get_free_companions_capacity, ":free_capacity", "p_main_party"),
     (ge, ":free_capacity", 1),
	 
	 (this_or_next|ge, "$player_has_homage", 1),
	 (eq, ":player_is_at_harsh_conditions", 1),
    ]),

  #script_village_recruit_volunteers_recruit
  # INPUT: none
  # OUTPUT: none
  ("village_recruit_volunteers_recruit",
    [
	
     (faction_set_slot, "fac_kingdom_1", slot_faction_tier_1_troop, "trp_swadian_recruit"),
     (faction_set_slot, "fac_kingdom_2", slot_faction_tier_1_troop, "trp_vaegir_recruit"),
     (faction_set_slot, "fac_kingdom_3", slot_faction_tier_1_troop, "trp_khergit_tribesman"),
     (faction_set_slot, "fac_kingdom_4", slot_faction_tier_1_troop, "trp_nord_recruit"),
     (faction_set_slot, "fac_kingdom_5", slot_faction_tier_1_troop, "trp_rhodok_tribesman"),
	 #(party_get_slot, ":volunteer_troop", "$current_town", slot_center_volunteer_troop_type),
     (party_get_slot, ":volunteer_amount", "$current_town", slot_center_volunteer_troop_amount),
     (party_get_free_companions_capacity, ":free_capacity", "p_main_party"),
     (val_min, ":volunteer_amount", ":free_capacity"),
     (store_troop_gold, ":gold", "trp_player"),
     (store_div, ":gold_capacity", ":gold", 10),#10 denars per man
     (val_min, ":volunteer_amount", ":gold_capacity"),
	 
	 (party_get_slot, ":center_culture", "$current_town", slot_center_culture),
	 (store_faction_of_party, ":faction", "$current_town"), 
	 (try_begin), 
	    (eq, ":faction", "fac_kingdom_1"), 
		(faction_get_slot, ":volunteer_troop", "fac_kingdom_1", slot_faction_tier_1_troop),
	 (else_try), 
	   (eq, ":faction", "fac_kingdom_2"), 
	   (faction_get_slot, ":volunteer_troop", "fac_kingdom_2", slot_faction_tier_1_troop),
     (else_try), 
	   (eq, ":faction", "fac_kingdom_3"), 
	   (faction_get_slot, ":volunteer_troop", "fac_kingdom_3", slot_faction_tier_1_troop),
	 (else_try), 
	   (eq, ":faction", "fac_kingdom_4"),
	   (faction_get_slot, ":volunteer_troop", "fac_kingdom_4", slot_faction_tier_1_troop),
	 (else_try),
	   (eq, ":faction", "fac_kingdom_5"), 
	   (faction_get_slot, ":volunteer_troop", "fac_kingdom_5", slot_faction_tier_1_troop),
	 (else_try),
	   (faction_get_slot, ":volunteer_troop", ":center_culture", slot_faction_tier_1_troop),
	 (end_try), 
	 	 
     (party_add_members, "p_main_party", ":volunteer_troop", ":volunteer_amount"),
     (party_set_slot, "$current_town", slot_center_volunteer_troop_amount, -1),
     (store_mul, ":cost", ":volunteer_amount", 10),#10 denars per man	 
     (troop_remove_gold, "trp_player", ":cost"),
     ]),

  #script_get_troop_item_amount
  # INPUT: arg1 = troop_no, arg2 = item_no
  # OUTPUT: reg0 = item_amount
  ("get_troop_item_amount",
    [(store_script_param, ":troop_no", 1),
     (store_script_param, ":item_no", 2),
     (troop_get_inventory_capacity, ":inv_cap", ":troop_no"),
     (assign, ":count", 0),
     (try_for_range, ":i_slot", 0, ":inv_cap"),
       (troop_get_inventory_slot, ":cur_item", ":troop_no", ":i_slot"),
       (eq, ":cur_item", ":item_no"),
       (val_add, ":count", 1),
     (try_end),
     (assign, reg0, ":count"),
     ]),

  #script_get_name_from_dna_to_s50
  # INPUT: arg1 = dna
  # OUTPUT: s50 = name
  ("get_name_from_dna_to_s50",
    [(store_script_param, ":dna", 1),
     (store_sub, ":num_names", names_end, names_begin),
     (store_sub, ":num_surnames", surnames_end, surnames_begin),
     (assign, ":selected_name", ":dna"),
     (val_mod, ":selected_name", ":num_names"),
     (assign, ":selected_surname", ":dna"),
     (val_div, ":selected_surname", ":num_names"),
     (val_mod, ":selected_surname", ":num_surnames"),
     (val_add, ":selected_name", names_begin),
     (val_add, ":selected_surname", surnames_begin),
     (str_store_string, s50, ":selected_name"),
     (str_store_string, s50, ":selected_surname"),
     ]),
     
  #script_change_center_prosperity
  # INPUT: arg1 = center_no, arg2 = difference
  # OUTPUT: none
  ("change_center_prosperity",
    [(store_script_param, ":center_no", 1),
     (store_script_param, ":difference", 2),
     (party_get_slot, ":prosperity", ":center_no", slot_town_prosperity),
     (store_add, ":new_prosperity", ":prosperity", ":difference"),
     (val_clamp, ":new_prosperity", 0, 100),
     (store_div, ":old_state", ":prosperity", 20),
     (store_div, ":new_state", ":new_prosperity", 20),
     (try_begin),
       (neq, ":old_state", ":new_state"),
       (str_store_party_name_link, s2, ":center_no"),
       (call_script, "script_get_prosperity_text_to_s50", ":center_no"),
       (str_store_string, s3, s50),
       (party_set_slot, ":center_no", slot_town_prosperity, ":new_prosperity"),
       (call_script, "script_get_prosperity_text_to_s50", ":center_no"),
       (str_store_string, s4, s50),
	   (try_begin),
	     (store_current_hours, ":cur_hours"),
		 (gt, ":cur_hours", 24), #do not display this text within the first day of the game.
         (party_slot_eq, ":center_no", slot_town_lord, "trp_player"),
		 (display_message, "@Prosperity of {s2} has changed from {s3} to {s4}."),
	   (try_end),
       (call_script, "script_update_center_notes", ":center_no"),
     (else_try),
       (party_set_slot, ":center_no", slot_town_prosperity, ":new_prosperity"),
     (try_end),
     ]),

  #script_get_center_ideal_prosperity
  # INPUT: arg1 = center_no
  # OUTPUT: reg0 = ideal_prosperity
  ("get_center_ideal_prosperity",
    [(store_script_param, ":center_no", 1),
     (assign, ":ideal", 40),
     (try_begin),
       (is_between, ":center_no", villages_begin, villages_end),
       (try_begin),
       (party_slot_eq, ":center_no", slot_center_has_fish_pond, 1),
       (val_add, ":ideal", 5),
     (try_end),
       (party_get_slot, ":land_quality", ":center_no", slot_village_land_quality),
       (val_mul, ":land_quality", 3),
       (val_add, ":ideal", ":land_quality"),
       (party_get_slot, ":num_cattle", ":center_no", slot_village_number_of_cattle),
       (val_div, ":num_cattle", 20),
       (val_add, ":ideal", ":num_cattle"),
     (else_try),
       (try_for_range, ":village_no", villages_begin, villages_end),
         (party_slot_eq, ":village_no", slot_village_bound_center, ":center_no"),
         (party_get_slot, ":prosperity", ":village_no", slot_town_prosperity),
         (val_div, ":prosperity", 20),
         (val_add, ":ideal", ":prosperity"),
		(try_end),
		(try_end),
     (assign, reg0, ":ideal"),
	]),
	
  #script_get_poorest_village_of_faction
  # INPUT: arg1 = center_no
  # OUTPUT: reg0 = ideal_prosperity
  ("get_poorest_village_of_faction",
    [(store_script_param, ":faction_no", 1),
     (assign, ":min_prosperity_village", -1),
     (assign, ":min_prosperity", 101),
     (try_for_range, ":village_no", villages_begin, villages_end),
       (store_faction_of_party, ":village_faction", ":village_no"),
       (eq, ":village_faction", ":faction_no"),
       (party_get_slot, ":prosperity", ":village_no", slot_town_prosperity),
       (lt, ":prosperity", ":min_prosperity"),
       (assign, ":min_prosperity", ":prosperity"),
       (assign, ":min_prosperity_village", ":village_no"),
     (try_end),
     (assign, reg0, ":min_prosperity_village"),
     ]),

  #script_troop_add_gold
  # INPUT: arg1 = troop_no, arg2 = amount
  # OUTPUT: none
  ("troop_add_gold",
    [(store_script_param, ":troop_no", 1),
      (store_script_param, ":amount", 2),
      (troop_add_gold, ":troop_no", ":amount"),
      (try_begin),
        (eq, ":troop_no", "trp_player"),
        (play_sound, "snd_money_received"),
      (try_end),
     ]),     

#NPC companion changes begin
  ("initialize_npcs",
    [
(troop_set_slot, "trp_npc1", slot_troop_morality_type, tmt_egalitarian), 
(troop_set_slot, "trp_npc1", slot_troop_morality_value, 5), 
(troop_set_slot, "trp_npc1", slot_troop_2ary_morality_type, tmt_aristocratic), #zagloba
(troop_set_slot, "trp_npc1", slot_troop_2ary_morality_value, 1),
(troop_set_slot, "trp_npc1", slot_troop_personalityclash_object, -1), #zagloba - ksendz
(troop_set_slot, "trp_npc1", slot_troop_personalityclash2_object, -1),#zagloba - mamay
(troop_set_slot, "trp_npc1", slot_troop_personalitymatch_object, "trp_npc8"), #zagloba + bahyt 
(troop_set_slot, "trp_npc1", slot_troop_home, "p_village_2"), #vodovitce
(troop_set_slot, "trp_npc1", slot_troop_payment_request, 0),

(troop_set_slot, "trp_npc2", slot_troop_morality_type, tmt_humanitarian), #tzepesh
        (troop_set_slot, "trp_npc2", slot_troop_morality_value, 2),  
        (troop_set_slot, "trp_npc2", slot_troop_2ary_morality_type, tmt_honest),  
(troop_set_slot, "trp_npc2", slot_troop_2ary_morality_value, 4),
(troop_set_slot, "trp_npc2", slot_troop_personalityclash_object, "trp_npc3"), #tzepesh - ksendz
(troop_set_slot, "trp_npc2", slot_troop_personalityclash2_object, "trp_npc13"), #tzepesh - oxana
(troop_set_slot, "trp_npc2", slot_troop_personalitymatch_object, "trp_npc8"), #tzepesh +  bahyt 
(troop_set_slot, "trp_npc2", slot_troop_home, "p_castle_24"), #kamenetz
(troop_set_slot, "trp_npc2", slot_troop_payment_request, 200),

(troop_set_slot, "trp_npc3", slot_troop_morality_type,tmt_egalitarian), #ksendz
(troop_set_slot, "trp_npc3", slot_troop_morality_value, 2), 
        (troop_set_slot, "trp_npc3", slot_troop_2ary_morality_type, tmt_aristocratic), 
        (troop_set_slot, "trp_npc3", slot_troop_2ary_morality_value, -1),
(troop_set_slot, "trp_npc3", slot_troop_personalityclash_object, -1), #ksendz-zagloba
(troop_set_slot, "trp_npc3", slot_troop_personalityclash2_object, -1), #ksendz-mamay
(troop_set_slot, "trp_npc3", slot_troop_personalitymatch_object, "trp_npc11"), #ksendz+nogay
(troop_set_slot, "trp_npc3", slot_troop_home, "p_town_16"), #krakov
        (troop_set_slot, "trp_npc3", slot_troop_payment_request, 0), 

(troop_set_slot, "trp_npc4", slot_troop_morality_type, tmt_aristocratic), #mamay
        (troop_set_slot, "trp_npc4", slot_troop_morality_value, 4),  
        (troop_set_slot, "trp_npc4", slot_troop_2ary_morality_type, tmt_honest), 
        (troop_set_slot, "trp_npc4", slot_troop_2ary_morality_value, -1),
(troop_set_slot, "trp_npc4", slot_troop_personalityclash_object, -1), #mamay - fedot
(troop_set_slot, "trp_npc4", slot_troop_personalityclash2_object, -1), #mamay  - elisey
(troop_set_slot, "trp_npc4", slot_troop_personalitymatch_object, "trp_npc15"), #mamay +  varvara
(troop_set_slot, "trp_npc4", slot_troop_home, "p_castle_16"), #korsun
        (troop_set_slot, "trp_npc4", slot_troop_payment_request, 300), 

(troop_set_slot, "trp_npc5", slot_troop_morality_type, tmt_egalitarian), #karlsson
(troop_set_slot, "trp_npc5", slot_troop_morality_value, 3), 
        (troop_set_slot, "trp_npc5", slot_troop_2ary_morality_type, -1),
        (troop_set_slot, "trp_npc5", slot_troop_2ary_morality_value, 0),
(troop_set_slot, "trp_npc5", slot_troop_personalityclash_object, "trp_npc2"), #karlsson -tzepesh
(troop_set_slot, "trp_npc5", slot_troop_personalityclash2_object, "trp_npc9"), #karlsson -olgerd
(troop_set_slot, "trp_npc5", slot_troop_personalitymatch_object, "trp_npc3"), #karlsson+ ksendz
(troop_set_slot, "trp_npc5", slot_troop_home, "p_castle_4"), #vyborg
(troop_set_slot, "trp_npc5", slot_troop_payment_request, 400),
		
(troop_set_slot, "trp_npc6", slot_troop_morality_type, tmt_humanitarian), #fedot
(troop_set_slot, "trp_npc6", slot_troop_morality_value, 2), #fedot
(troop_set_slot, "trp_npc6", slot_troop_2ary_morality_type, -1),
(troop_set_slot, "trp_npc6", slot_troop_2ary_morality_value, 0),
(troop_set_slot, "trp_npc6", slot_troop_personalityclash_object, "trp_npc8"), #fedot - bahyt
(troop_set_slot, "trp_npc6", slot_troop_personalityclash2_object, "trp_npc13"), #fedot - oxana
(troop_set_slot, "trp_npc6", slot_troop_personalitymatch_object, "trp_npc12"), #fedot +  saraboon
(troop_set_slot, "trp_npc6", slot_troop_home, "p_castle_37"), #tula
(troop_set_slot, "trp_npc6", slot_troop_payment_request, 400),
		
(troop_set_slot, "trp_npc7", slot_troop_morality_type, tmt_aristocratic), #elisey
(troop_set_slot, "trp_npc7", slot_troop_morality_value, 3),
(troop_set_slot, "trp_npc7", slot_troop_2ary_morality_type, tmt_honest),
(troop_set_slot, "trp_npc7", slot_troop_2ary_morality_value, 3),
(troop_set_slot, "trp_npc7", slot_troop_personalityclash_object, -1), #elisey -zagloba
(troop_set_slot, "trp_npc7", slot_troop_personalityclash2_object, "trp_npc14"), #elisey - ingri
(troop_set_slot, "trp_npc7", slot_troop_personalitymatch_object, "trp_npc10"), #elisey +  buskador
(troop_set_slot, "trp_npc7", slot_troop_home, "p_castle_17"), #ryazan
(troop_set_slot, "trp_npc7", slot_troop_payment_request, 300),

(troop_set_slot, "trp_npc8", slot_troop_morality_type, tmt_egalitarian), #bahyt
(troop_set_slot, "trp_npc8", slot_troop_morality_value, 1), 
(troop_set_slot, "trp_npc8", slot_troop_2ary_morality_type, -1),
(troop_set_slot, "trp_npc8", slot_troop_2ary_morality_value, 0),
(troop_set_slot, "trp_npc8", slot_troop_personalityclash_object, "trp_npc15"), #bahyt-varvara
(troop_set_slot, "trp_npc8", slot_troop_personalityclash2_object, "trp_npc16"), #bahyt - fatima
(troop_set_slot, "trp_npc8", slot_troop_personalitymatch_object, "trp_npc4"), #bahyt+mamay
(troop_set_slot, "trp_npc8", slot_troop_home, "p_town_10"), #azak-kale
(troop_set_slot, "trp_npc8", slot_troop_payment_request, 300),

(troop_set_slot, "trp_npc9", slot_troop_morality_type, tmt_aristocratic), #olgerd
(troop_set_slot, "trp_npc9", slot_troop_morality_value, 2), 
(troop_set_slot, "trp_npc9", slot_troop_2ary_morality_type, -1),
(troop_set_slot, "trp_npc9", slot_troop_2ary_morality_value, 0),
(troop_set_slot, "trp_npc9", slot_troop_personalityclash_object, "trp_npc6"), #olgerd - fedot
(troop_set_slot, "trp_npc9", slot_troop_personalityclash2_object, "trp_npc11"), #olgerd - nogay
(troop_set_slot, "trp_npc9", slot_troop_personalitymatch_object, "trp_npc14"), #olgerd +  ingri
(troop_set_slot, "trp_npc9", slot_troop_home, "p_town_4"), #vilno
(troop_set_slot, "trp_npc9", slot_troop_payment_request, 250),
		
(troop_set_slot, "trp_npc10", slot_troop_morality_type, tmt_honest), #buskador
(troop_set_slot, "trp_npc10", slot_troop_morality_value, 5),
(troop_set_slot, "trp_npc10", slot_troop_2ary_morality_type, -1),
(troop_set_slot, "trp_npc10", slot_troop_2ary_morality_value, 0),
(troop_set_slot, "trp_npc10", slot_troop_personalityclash_object, "trp_npc5"), #buskador - karlsson
(troop_set_slot, "trp_npc10", slot_troop_personalityclash2_object, "trp_npc12"), #buskador - saraboon
(troop_set_slot, "trp_npc10", slot_troop_personalitymatch_object, "trp_npc2"), #buskador + tzepesh
(troop_set_slot, "trp_npc10", slot_troop_home, "p_mountain_bandit_spawn_point_1"), #mountain_bandit_spawn_point
(troop_set_slot, "trp_npc10", slot_troop_payment_request, 500),

(troop_set_slot, "trp_npc11", slot_troop_morality_type, tmt_egalitarian), #nogay
(troop_set_slot, "trp_npc11", slot_troop_morality_value, 4),
(troop_set_slot, "trp_npc11", slot_troop_2ary_morality_type, -1),
(troop_set_slot, "trp_npc11", slot_troop_2ary_morality_value, 0),
(troop_set_slot, "trp_npc11", slot_troop_personalityclash_object, "trp_npc7"), #nogay - elisey
(troop_set_slot, "trp_npc11", slot_troop_personalityclash2_object, "trp_npc16"), #nogay - fatima
(troop_set_slot, "trp_npc11", slot_troop_personalitymatch_object, "trp_npc13"), #nogay + oxana
(troop_set_slot, "trp_npc11", slot_troop_home, "p_village_49"), #nugay
(troop_set_slot, "trp_npc11", slot_troop_payment_request, 300),

(troop_set_slot, "trp_npc12", slot_troop_morality_type, tmt_humanitarian), #sarabun
(troop_set_slot, "trp_npc12", slot_troop_morality_value, 5),
(troop_set_slot, "trp_npc12", slot_troop_2ary_morality_type, -1),
(troop_set_slot, "trp_npc12", slot_troop_2ary_morality_value, 0),
(troop_set_slot, "trp_npc12", slot_troop_personalityclash_object, "trp_npc9"), #sarabun - olgerd
(troop_set_slot, "trp_npc12", slot_troop_personalityclash2_object, "trp_npc15"), #sarabun - varvara
(troop_set_slot, "trp_npc12", slot_troop_personalitymatch_object, "trp_npc7"), #sarabun - elisey
(troop_set_slot, "trp_npc12", slot_troop_home, "p_town_3"), #Kiev
(troop_set_slot, "trp_npc12", slot_troop_payment_request, 600),
		
(troop_set_slot, "trp_npc13", slot_troop_morality_type, tmt_humanitarian), #oxana
(troop_set_slot, "trp_npc13", slot_troop_morality_value, 1),
(troop_set_slot, "trp_npc13", slot_troop_2ary_morality_type, tmt_honest),
(troop_set_slot, "trp_npc13", slot_troop_2ary_morality_value, 1),
(troop_set_slot, "trp_npc13", slot_troop_personalityclash_object, "trp_npc5"), #oxana- karlsson
(troop_set_slot, "trp_npc13", slot_troop_personalityclash2_object, "trp_npc10"), #oxana - buskador
(troop_set_slot, "trp_npc13", slot_troop_personalitymatch_object, "trp_npc1"), #oxana - zagloba
(troop_set_slot, "trp_npc13", slot_troop_home, "p_castle_9"), #Poltava
(troop_set_slot, "trp_npc13", slot_troop_payment_request, 300),

(troop_set_slot, "trp_npc14", slot_troop_morality_type, tmt_egalitarian), #ingri
(troop_set_slot, "trp_npc14", slot_troop_morality_value, 4),
(troop_set_slot, "trp_npc14", slot_troop_2ary_morality_type, -1),
(troop_set_slot, "trp_npc14", slot_troop_2ary_morality_value, 0),
(troop_set_slot, "trp_npc14", slot_troop_personalityclash_object, "trp_npc9"), #ingri-olgerd
(troop_set_slot, "trp_npc14", slot_troop_personalityclash2_object, "trp_npc12"), #ingri-saraboon
(troop_set_slot, "trp_npc14", slot_troop_personalitymatch_object, "trp_npc13"), #ingri - oxana
(troop_set_slot, "trp_npc14", slot_troop_home, "p_town_2"), #revel
(troop_set_slot, "trp_npc14", slot_troop_payment_request, 500),

(troop_set_slot, "trp_npc15", slot_troop_morality_type, tmt_humanitarian), #varvara
(troop_set_slot, "trp_npc15", slot_troop_morality_value, 5),
(troop_set_slot, "trp_npc15", slot_troop_2ary_morality_type, -1),
(troop_set_slot, "trp_npc15", slot_troop_2ary_morality_value, 0),
(troop_set_slot, "trp_npc15", slot_troop_personalityclash_object, "trp_npc2"), #varvara - tzepesh
(troop_set_slot, "trp_npc15", slot_troop_personalityclash2_object, "trp_npc14"), #varvara - ingri
(troop_set_slot, "trp_npc15", slot_troop_personalitymatch_object, "trp_npc10"), #varvara + buskador
(troop_set_slot, "trp_npc15", slot_troop_home, "p_castle_6"), #novgorod
(troop_set_slot, "trp_npc15", slot_troop_payment_request, 200),
		
(troop_set_slot, "trp_npc16", slot_troop_morality_type, tmt_aristocratic), #fatima
(troop_set_slot, "trp_npc16", slot_troop_morality_value, 4),
(troop_set_slot, "trp_npc16", slot_troop_2ary_morality_type, -1),
(troop_set_slot, "trp_npc16", slot_troop_2ary_morality_value, 0),
(troop_set_slot, "trp_npc16", slot_troop_personalityclash_object, "trp_npc13"), #fatima-oxana
(troop_set_slot, "trp_npc16", slot_troop_personalityclash2_object, "trp_npc11"), #fatimima - nogay
(troop_set_slot, "trp_npc16", slot_troop_personalitymatch_object, "trp_npc5"), #fatima + karlsson
(troop_set_slot, "trp_npc16", slot_troop_home, "p_castle_22"), #kafa
(troop_set_slot, "trp_npc16", slot_troop_payment_request, 300),

        (store_sub, "$number_of_npc_slots", slot_troop_strings_end, slot_troop_intro),

        (try_for_range, ":npc", companions_begin, companions_end),


            (try_for_range, ":slot_addition", 0, "$number_of_npc_slots"),
                (store_add, ":slot", ":slot_addition", slot_troop_intro),

                (store_mul, ":string_addition", ":slot_addition", 16),
                (store_add, ":string", "str_npc1_intro", ":string_addition"), 
                (val_add, ":string", ":npc"),
                (val_sub, ":string", companions_begin),

                (troop_set_slot, ":npc", ":slot", ":string"),
            (try_end),
        (try_end),
#Troop commentary changes begin
        (try_for_range, ":lord", "trp_knight_1_1", "trp_heroes_end"),
            (store_random_in_range, ":reputation", 0, 8),
            (try_begin),
                (eq, ":reputation", 0),
                (assign, ":reputation", 1),
            (try_end),
            (troop_set_slot, ":lord", slot_lord_reputation_type, ":reputation"),
        (try_end),
#Troop commentary changes end

#Post 0907 changes begin
        (call_script, "script_add_log_entry", logent_game_start, "trp_player", -1, -1, -1),
#Post 0907 changes end

#Rebellion changes begin
        (troop_set_slot, "trp_kingdom_1_pretender",  slot_troop_original_faction, "fac_kingdom_1"),
        (troop_set_slot, "trp_kingdom_2_pretender",  slot_troop_original_faction, "fac_kingdom_2"),
        (troop_set_slot, "trp_kingdom_3_pretender",  slot_troop_original_faction, "fac_kingdom_3"),
        (troop_set_slot, "trp_kingdom_4_pretender",  slot_troop_original_faction, "fac_kingdom_4"),
        (troop_set_slot, "trp_kingdom_5_pretender",  slot_troop_original_faction, "fac_kingdom_5"),

        (troop_set_slot, "trp_kingdom_1_pretender", slot_troop_support_base,     "p_town_4"), #suno
        (troop_set_slot, "trp_kingdom_2_pretender", slot_troop_support_base,     "p_town_11"), #curaw
        (troop_set_slot, "trp_kingdom_3_pretender", slot_troop_support_base,     "p_town_18"), #town_18
        (troop_set_slot, "trp_kingdom_4_pretender", slot_troop_support_base,     "p_town_12"), #wercheg
        (troop_set_slot, "trp_kingdom_5_pretender", slot_troop_support_base,     "p_town_3"), #veluca
        (try_for_range, ":pretender", pretenders_begin, pretenders_end),
            (troop_set_slot, ":pretender", slot_lord_reputation_type, lrep_none),
        (try_end),
#Rebellion changes end
     ]),



  ("objectionable_action",
    [
        (store_script_param_1, ":action_type"),
        (store_script_param_2, ":action_string"),

        (assign, ":grievance_minimum", -2),
        (try_for_range, ":npc", companions_begin, companions_end),
            (main_party_has_troop, ":npc"),

###Primary morality check
            (try_begin),
                (troop_slot_eq, ":npc", slot_troop_morality_type, ":action_type"),
                (troop_get_slot, ":value", ":npc", slot_troop_morality_value),
                (try_begin),
                    (troop_slot_eq, ":npc", slot_troop_morality_state, tms_acknowledged),
# npc is betrayed, major penalty to player honor and morale
                    (troop_get_slot, ":grievance", ":npc", slot_troop_morality_penalties),
                    (val_mul, ":value", 2),
                    (val_add, ":grievance", ":value"),
                    (troop_set_slot, ":npc", slot_troop_morality_penalties, ":grievance"),
                (else_try),
                    (this_or_next|troop_slot_eq, ":npc", slot_troop_morality_state, tms_dismissed),
                        (eq, "$disable_npc_complaints", 1),
# npc is quietly disappointed
                    (troop_get_slot, ":grievance", ":npc", slot_troop_morality_penalties),
                    (val_add, ":grievance", ":value"),
                    (troop_set_slot, ":npc", slot_troop_morality_penalties, ":grievance"),
                (else_try),
# npc raises the issue for the first time
                    (troop_slot_eq, ":npc", slot_troop_morality_state, tms_no_problem),
                    (gt, ":value", ":grievance_minimum"),
                    (assign, "$npc_with_grievance", ":npc"),
                    (assign, "$npc_grievance_string", ":action_string"),
                    (assign, "$npc_grievance_slot", slot_troop_morality_state),
                    (assign, ":grievance_minimum", ":value"),
                    (assign, "$npc_praise_not_complaint", 0),
                    (try_begin),
                        (lt, ":value", 0),
                        (assign, "$npc_praise_not_complaint", 1),
                    (try_end),
                (try_end),



###Secondary morality check
            (else_try),
                (troop_slot_eq, ":npc", slot_troop_2ary_morality_type, ":action_type"),
                (troop_get_slot, ":value", ":npc", slot_troop_2ary_morality_value),
                (try_begin),
                    (troop_slot_eq, ":npc", slot_troop_2ary_morality_state, tms_acknowledged),
# npc is betrayed, major penalty to player honor and morale
                    (troop_get_slot, ":grievance", ":npc", slot_troop_morality_penalties),
                    (val_mul, ":value", 2),
                    (val_add, ":grievance", ":value"),
                    (troop_set_slot, ":npc", slot_troop_morality_penalties, ":grievance"),
                (else_try),
                    (this_or_next|troop_slot_eq, ":npc", slot_troop_2ary_morality_state, tms_dismissed),
                        (eq, "$disable_npc_complaints", 1),
# npc is quietly disappointed
                    (troop_get_slot, ":grievance", ":npc", slot_troop_morality_penalties),
                    (val_add, ":grievance", ":value"),
                    (troop_set_slot, ":npc", slot_troop_morality_penalties, ":grievance"),
                (else_try),
# npc raises the issue for the first time
                    (troop_slot_eq, ":npc", slot_troop_2ary_morality_state, tms_no_problem),
                    (gt, ":value", ":grievance_minimum"),
                    (assign, "$npc_with_grievance", ":npc"),
                    (assign, "$npc_grievance_string", ":action_string"),
                    (assign, "$npc_grievance_slot", slot_troop_2ary_morality_state),
                    (assign, ":grievance_minimum", ":value"),
                    (assign, "$npc_praise_not_complaint", 0),
                    (try_begin),
                        (lt, ":value", 0),
                        (assign, "$npc_praise_not_complaint", 1),
                    (try_end),
                (try_end),
            (try_end),

            (try_begin),
                (gt, "$npc_with_grievance", 0),
                (eq, "$npc_praise_not_complaint", 0),
                (str_store_troop_name, 4, "$npc_with_grievance"),
                (display_message, "@{s4} looks upset."),
            (try_end),

        (try_end),        


     ]),


  ("post_battle_personality_clash_check",
[



#            (display_message, "@Post-victory personality clash check"),
            (try_for_range, ":npc", companions_begin, companions_end),
                (eq, "$disable_npc_complaints", 0),

                (main_party_has_troop, ":npc"),
                (neg|troop_is_wounded, ":npc"),

                (troop_get_slot, ":other_npc", ":npc", slot_troop_personalityclash2_object),
                (main_party_has_troop, ":other_npc"),
                (neg|troop_is_wounded, ":other_npc"),

#                (store_random_in_range, ":random", 0, 3),
                (try_begin),
                    (troop_slot_eq, ":npc", slot_troop_personalityclash2_state, 0),
                    (try_begin),
#                        (eq, ":random", 0),
                        (assign, "$npc_with_personality_clash_2", ":npc"),
                    (try_end),
                (try_end),

            (try_end),

            (try_for_range, ":npc", companions_begin, companions_end),
                (troop_slot_eq, ":npc", slot_troop_personalitymatch_state, 0),
                (eq, "$disable_npc_complaints", 0),

                (main_party_has_troop, ":npc"),
                (neg|troop_is_wounded, ":npc"),

                (troop_get_slot, ":other_npc", ":npc", slot_troop_personalitymatch_object),
                (main_party_has_troop, ":other_npc"),
                (neg|troop_is_wounded, ":other_npc"),
                (assign, "$npc_with_personality_match", ":npc"),
            (try_end),


            (try_begin),
                (gt, "$npc_with_personality_clash_2", 0),
					(assign, "$npc_map_talk_context", slot_troop_personalityclash2_state),
					(start_map_conversation, "$npc_with_personality_clash_2"),
				(else_try),
                (gt, "$npc_with_personality_match", 0),
					(assign, "$npc_map_talk_context", slot_troop_personalitymatch_state),
					(start_map_conversation, "$npc_with_personality_match"),
			(try_end),


     ]),

  #script_event_player_defeated_enemy_party
  # INPUT: none
  # OUTPUT: none
  ("event_player_defeated_enemy_party",
    [(try_begin),
       (check_quest_active, "qst_raid_caravan_to_start_war"),
       (neg|check_quest_concluded, "qst_raid_caravan_to_start_war"),
       (party_slot_eq, "$g_enemy_party", slot_party_type, spt_kingdom_caravan),
       (store_faction_of_party, ":enemy_faction", "$g_enemy_party"),
       (quest_slot_eq, "qst_raid_caravan_to_start_war", slot_quest_target_faction, ":enemy_faction"),
       (quest_get_slot, ":cur_state", "qst_raid_caravan_to_start_war", slot_quest_current_state),
       (quest_get_slot, ":quest_target_amount", "qst_raid_caravan_to_start_war", slot_quest_target_amount),
       (val_add, ":cur_state", 1),
       (quest_set_slot, "qst_raid_caravan_to_start_war", slot_quest_current_state, ":cur_state"),
       (try_begin),
         (ge, ":cur_state", ":quest_target_amount"),
         (quest_get_slot, ":quest_target_faction", "qst_raid_caravan_to_start_war", slot_quest_target_faction),
         (quest_get_slot, ":quest_giver_troop", "qst_raid_caravan_to_start_war", slot_quest_giver_troop),
         (store_troop_faction, ":quest_giver_faction", ":quest_giver_troop"),
         (call_script, "script_diplomacy_start_war_between_kingdoms", ":quest_target_faction", ":quest_giver_faction", 1),
         (call_script, "script_succeed_quest", "qst_raid_caravan_to_start_war"),
       (try_end),
     (try_end),
     (party_get_template_id, ":cur_party_template", "$g_enemy_party"),
     #OiM code starts here
     (try_begin),
		(check_quest_active, "qst_deal_with_zamoshie_bandits"),
		(eq, ":cur_party_template", "pt_zamoshie_bandits"),
		(call_script, "script_succeed_quest", "qst_deal_with_zamoshie_bandits"),
     (try_end),
     (try_begin),
		(check_quest_active, "qst_oim_lendliz2"),
		(neg|check_quest_succeeded, "qst_oim_lendliz2"),
		(neg|check_quest_finished, "qst_oim_lendliz2"),
		(eq, ":cur_party_template", "pt_oim_merchant_caravan"),
		(quest_slot_eq, "qst_oim_lendliz2", slot_quest_current_state, 0),
		(call_script, "script_succeed_quest", "qst_oim_lendliz2"),
		(quest_set_slot, "qst_oim_lendliz2", slot_quest_current_state, 1),
		(assign, "$oim_auto_talk_troop", "trp_don_cossack"), 
		(assign, "$g_next_menu", "mnu_oim_auto_talk_menu"),
     (try_end),
     #oim getman caravan with letter
     (try_begin),
		(check_quest_active, "qst_oim_getman_caravan"),
		(neg|check_quest_succeeded, "qst_oim_getman_caravan"),
		(neg|check_quest_finished, "qst_oim_getman_caravan"),
		(eq, ":cur_party_template", "pt_oim_merchant_caravan"),
		(quest_slot_eq, "qst_oim_getman_caravan", slot_quest_current_state, 0),
		(call_script, "script_succeed_quest", "qst_oim_getman_caravan"),
		(quest_set_slot, "qst_oim_getman_caravan", slot_quest_current_state, 1),
		(assign, "$oim_auto_talk_troop", "trp_caravan_master"), 
		(assign, "$g_next_menu", "mnu_oim_auto_talk_menu"),
     (try_end),
     #(spawn_around_party, "p_village_53", "pt_getman_deserters"),
     (try_begin),
		(eq, ":cur_party_template", "pt_getman_deserters"),
		(assign, "$g_next_menu", "mnu_oim_auto_talk_menu"), 
		(quest_get_slot, ":talk_troop", "qst_oim_getman_nesviz_legend", slot_quest_target_troop),
		(assign, "$oim_auto_talk_troop", ":talk_troop"), 
     (try_end),
     (try_begin),
		(eq, ":cur_party_template", "pt_oim_zagloba_party"),
		(call_script, "script_succeed_quest", "qst_oim_potop_zagloba_revoult"),
     (try_end),
     ]),

  #script_event_player_captured_as_prisoner
  # INPUT: none
  # OUTPUT: none
  ("event_player_captured_as_prisoner",
    [
        (call_script, "script_remove_player_aimed_weapons"),
        (try_begin),
          (check_quest_active, "qst_raid_caravan_to_start_war"),
          (neg|check_quest_concluded, "qst_raid_caravan_to_start_war"),
          (quest_get_slot, ":quest_target_faction", "qst_raid_caravan_to_start_war", slot_quest_target_faction),
          (store_faction_of_party, ":capturer_faction", "$capturer_party"),
          (eq, ":quest_target_faction", ":capturer_faction"),
          (call_script, "script_fail_quest", "qst_raid_caravan_to_start_war"),
        (try_end),
        #Removing followers of the player
        (try_for_range, ":troop_no", kingdom_heroes_begin, kingdom_heroes_end),
          (troop_get_slot, ":party_no", ":troop_no", slot_troop_leaded_party),
          (gt, ":party_no", 0),
          (party_slot_eq, ":party_no", slot_party_commander_party, "p_main_party"),
          (call_script, "script_party_set_ai_state", ":party_no", spai_undefined, -1),
          (party_set_slot, ":party_no", slot_party_commander_party, -1),
          (assign, "$g_recalculate_ais", 1),
        (try_end),
		
		(party_get_template_id, ":cur_party_template", "$g_enemy_party"),
		#OiM code starts here
		(try_begin),
			(check_quest_active, "qst_oim_lendliz2"),
			(neg|check_quest_succeeded, "qst_oim_lendliz2"),
			(neg|check_quest_finished, "qst_oim_lendliz2"),
			(eq, ":cur_party_template", "pt_oim_merchant_caravan"),
			(quest_slot_eq, "qst_oim_lendliz2", slot_quest_current_state, 0),
			(call_script, "script_fail_quest", "qst_oim_lendliz2"),
			(quest_set_slot, "qst_oim_lendliz2", slot_quest_current_state, 1),
			(assign, "$oim_auto_talk_troop", "trp_don_cossack"), 
			(assign, "$g_next_menu", "mnu_oim_auto_talk_menu"),
		(try_end),
		(try_begin),
			(check_quest_active, "qst_oim_dmitriy_tsar_prison"),
			(check_quest_succeeded, "qst_oim_dmitriy_tsar_prison"),
			(neg|check_quest_finished,"qst_oim_dmitriy_tsar_prison"),
			(quest_slot_eq, "qst_oim_dmitriy_tsar_prison", slot_quest_current_state, 1),
			(eq, "$g_talk_troop", "trp_kingdom_2_lord"), 
			(str_store_string, s2, "str_oim_generik_death_qst"),
			(assign, "$g_next_menu", "mnu_oim_last_game_menu"),
		(try_end),  
		#oim getman caravan with letter
		(try_begin),
			(check_quest_active, "qst_oim_getman_caravan"),
			(neg|check_quest_succeeded, "qst_oim_getman_caravan"),
			(neg|check_quest_finished, "qst_oim_getman_caravan"),
			(eq, ":cur_party_template", "pt_oim_merchant_caravan"),
			(quest_slot_eq, "qst_oim_getman_caravan", slot_quest_current_state, 0),
			(call_script, "script_fail_quest", "qst_oim_getman_caravan"),
			(quest_set_slot, "qst_oim_getman_caravan", slot_quest_current_state, 1),
			(assign, "$oim_auto_talk_troop", "trp_caravan_master"), 
			(assign, "$g_next_menu", "mnu_oim_auto_talk_menu"),
		(try_end),
		(try_begin),
			(check_quest_active, "qst_oim_kidalovo_z_konyem"),
			(neg|check_quest_succeeded, "qst_oim_kidalovo_z_konyem"),
			(neg|check_quest_finished, "qst_oim_kidalovo_z_konyem"),
			(troop_remove_items, "trp_player", "itm_hunter", 1),
			(display_message, "@OiM You ve lost your horse"),
		(try_end),
		(try_begin),
			(eq, ":cur_party_template", "pt_oim_zagloba_party"),
			(str_store_string, s2, "@oim_potop_negative_end_game"),
			(assign, "$g_next_menu", "mnu_oim_last_game_menu"), 
		(try_end),
		(try_begin),
			(eq, ":cur_party_template", "pt_deserters"),
			(call_script, "script_get_closest_walled_center", "$g_encountered_party"), #":spawn_party"),
			(assign, ":party_to_patrol", reg0),
			(party_set_slot, "$g_encountered_party", slot_spawn_party_main_object, ":party_to_patrol"),
			(party_set_slot, "$g_encountered_party", slot_spawn_party_attack, 0),
			(call_script, "script_party_set_ai_state", "$g_encountered_party", spai_patrolling_around_center, ":party_to_patrol"),
			(party_set_ai_behavior, "$g_encountered_party", ai_bhvr_patrol_location),
			(party_set_slot, "$g_encountered_party", slot_spawn_party_is_control, 17),
		(try_end),
		(try_begin), 
			(check_quest_active,"qst_oim_bring_tatarin_to_sich"),
			(neg|check_quest_succeeded,"qst_oim_bring_tatarin_to_sich"),
			(neg|check_quest_failed,"qst_oim_bring_tatarin_to_sich"),
                        (neg|check_quest_finished,"qst_oim_bring_tatarin_to_sich"),
			(call_script, "script_fail_quest", "qst_oim_bring_tatarin_to_sich"),
			(call_script, "script_end_quest", "qst_oim_bring_tatarin_to_sich"),
			(call_script, "script_change_player_relation_with_faction", "fac_kingdom_5", -5),
		(try_end), 
		
		
     ]),


#NPC morale both returns a string and reg0 as the morale value
  ("npc_morale",
[
        (store_script_param_1, ":npc"),

        (troop_get_slot, ":morality_grievances", ":npc", slot_troop_morality_penalties),
        (troop_get_slot, ":personality_grievances", ":npc", slot_troop_personalityclash_penalties),
        (party_get_morale, ":party_morale", "p_main_party"),

        (store_sub, ":troop_morale", ":party_morale", ":morality_grievances"),
        (val_sub, ":troop_morale", ":personality_grievances"),
        (val_add, ":troop_morale", 50),

        (assign, reg8, ":troop_morale"),
        
        (val_mul, ":troop_morale", 3),
        (val_div, ":troop_morale", 4),
        (val_clamp, ":troop_morale", 0, 100),

        (assign, reg5, ":party_morale"),
        (assign, reg6, ":morality_grievances"),
        (assign, reg7, ":personality_grievances"),
        (assign, reg9, ":troop_morale"),

#        (str_store_troop_name, s11, ":npc"),
#        (display_message, "@{!}{s11}'s morale = PM{reg5} + 50 - MG{reg6} - PG{reg7} = {reg8} x 0.75 = {reg9}"),

        (try_begin),
            (lt, ":morality_grievances", 3),
            (str_store_string, 7, "str_happy"),
        (else_try),
            (lt, ":morality_grievances", 15),
            (str_store_string, 7, "str_content"),
        (else_try),
            (lt, ":morality_grievances", 30),
            (str_store_string, 7, "str_concerned"),
        (else_try),
            (lt, ":morality_grievances", 45),
            (str_store_string, 7, "str_not_happy"),
        (else_try),
            (str_store_string, 7, "str_miserable"),
        (try_end),


        (try_begin),
            (lt, ":personality_grievances", 3),
            (str_store_string, 6, "str_happy"),
        (else_try),
            (lt, ":personality_grievances", 15),
            (str_store_string, 6, "str_content"),
        (else_try),
            (lt, ":personality_grievances", 30),
            (str_store_string, 6, "str_concerned"),
        (else_try),
            (lt, ":personality_grievances", 45),
            (str_store_string, 6, "str_not_happy"),
        (else_try),
            (str_store_string, 6, "str_miserable"),
        (try_end),


        (try_begin),
            (gt, ":troop_morale", 80),
            (str_store_string, 8, "str_happy"),
            (str_store_string, 63, "str_bar_enthusiastic"),
        (else_try),
            (gt, ":troop_morale", 60),
            (str_store_string, 8, "str_content"),
            (str_store_string, 63, "str_bar_content"),
        (else_try),
            (gt, ":troop_morale", 40),
            (str_store_string, 8, "str_concerned"),
            (str_store_string, 63, "str_bar_weary"),
        (else_try),
            (gt, ":troop_morale", 20),
            (str_store_string, 8, "str_not_happy"),
            (str_store_string, 63, "str_bar_disgruntled"),
        (else_try),
            (str_store_string, 8, "str_miserable"),
            (str_store_string, 63, "str_bar_miserable"),
        (try_end),


        (str_store_string, 21, "str_npc_morale_report"),
        (assign, reg0, ":troop_morale"),

     ]),
#NPC morale both returns a string and reg0 as the morale value


#
  ("retire_companion",
[
    (store_script_param_1, ":npc"),
    (store_script_param_2, ":length"),

    (remove_member_from_party, ":npc", "p_main_party"),
    (troop_set_slot, ":npc", slot_troop_personalityclash_penalties, 0),
    (troop_set_slot, ":npc", slot_troop_morality_penalties, 0),
    (troop_get_slot, ":renown", "trp_player", slot_troop_renown),
    (store_add, ":return_renown", ":renown", ":length"),
    (troop_set_slot, ":npc", slot_troop_occupation, slto_retirement),
    (troop_set_slot, ":npc", slot_troop_return_renown, ":return_renown"),
    ]),

#NPC companion changes end

  #script_reduce_companion_morale_for_clash
  #script_calculate_ransom_amount_for_troop
  # INPUT: arg1 = troop_no for companion1 arg2 = troop_no for companion2 arg3 = slot_for_clash_state
  # slot_for_clash_state means: 1=give full penalty to companion1; 2=give full penalty to companion2; 3=give penalty equally
  ("reduce_companion_morale_for_clash",
   [
    (store_script_param, ":companion_1", 1),
    (store_script_param, ":companion_2", 2),
    (store_script_param, ":slot_for_clash_state", 3),

    (troop_get_slot, ":clash_state", ":companion_1", ":slot_for_clash_state"),
    (troop_get_slot, ":grievance_1", ":companion_1", slot_troop_personalityclash_penalties),
    (troop_get_slot, ":grievance_2", ":companion_2", slot_troop_personalityclash_penalties),
    (try_begin),
      (eq, ":clash_state", pclash_penalty_to_self),
      (val_add, ":grievance_1", 5),
    (else_try),
      (eq, ":clash_state", pclash_penalty_to_other),
      (val_add, ":grievance_2", 5),
    (else_try),
      (eq, ":clash_state", pclash_penalty_to_both),
      (val_add, ":grievance_1", 3),
      (val_add, ":grievance_2", 3),
    (try_end),
    (troop_set_slot, ":companion_1", slot_troop_personalityclash_penalties, ":grievance_1"),
    (troop_set_slot, ":companion_2", slot_troop_personalityclash_penalties, ":grievance_2"),
    ]),

#Hunting scripts end

  #script_calculate_ransom_amount_for_troop
  # INPUT: arg1 = troop_no
  # OUTPUT: reg0 = ransom_amount
  ("calculate_ransom_amount_for_troop",
    [(store_script_param, ":troop_no", 1),
     (store_troop_faction, ":faction_no", ":troop_no"),
     (assign, ":ransom_amount", 400),
     (try_begin),
       (faction_slot_eq, ":faction_no", slot_faction_leader, ":troop_no"),
       (val_add, ":ransom_amount", 4000),
     (try_end),

     (assign, ":num_center_points", 0),
     (try_for_range, ":cur_center", centers_begin, centers_end),
       (party_slot_eq, ":cur_center", slot_town_lord, ":troop_no"),
       (try_begin),
         (party_slot_eq, ":cur_center", slot_party_type, spt_town),
         (val_add, ":num_center_points", 4),
       (else_try),
         (party_slot_eq, ":cur_center", slot_party_type, spt_castle),
         (val_add, ":num_center_points", 2),
       (else_try),
         (val_add, ":num_center_points", 1),
       (try_end),
     (try_end),
     (val_mul, ":num_center_points", 500),
     (val_add, ":ransom_amount", ":num_center_points"),
     (troop_get_slot, ":renown", ":troop_no", slot_troop_renown),
     (val_mul, ":renown", 2),
     (val_add, ":ransom_amount", ":renown"),
     #(store_mul, ":ransom_max_amount", ":ransom_amount", 3),
     #(val_div, ":ransom_max_amount", 2),
     #(store_random_in_range, ":random_ransom_amount", ":ransom_amount", ":ransom_max_amount"),
     (assign, ":random_ransom_amount", ":ransom_amount"),
     (val_mul, ":random_ransom_amount", 500),
     (val_div, ":random_ransom_amount", 300),
     (assign, reg0, ":random_ransom_amount"),
     ]),  

  #script_offer_ransom_amount_to_player_for_prisoners_in_party
  # INPUT: arg1 = party_no
  # OUTPUT: reg0 = result (1 = offered, 0 = not offered)
  ("offer_ransom_amount_to_player_for_prisoners_in_party",
    [(store_script_param, ":party_no", 1),
     (assign, ":result", 0),
     (party_get_num_prisoner_stacks, ":num_stacks", ":party_no"),
     (try_for_range, ":i_stack", 0, ":num_stacks"),
       (eq, ":result", 0),
       (party_prisoner_stack_get_troop_id, ":stack_troop", ":party_no", ":i_stack"),
       (troop_is_hero, ":stack_troop"),
       (troop_slot_eq, ":stack_troop", slot_troop_occupation, slto_kingdom_hero),
       (store_troop_faction, ":stack_troop_faction", ":stack_troop"),
       (store_random_in_range, ":random_no", 0, 100),
       (try_begin),
         (faction_slot_eq, ":stack_troop_faction", slot_faction_state, sfs_active),
         (le, ":random_no", 5),
         (neq, "$g_ransom_offer_rejected", 1),
         (assign, ":num_stacks", 0), #break
         (assign, ":result", 1),
         (assign, "$g_ransom_offer_troop", ":stack_troop"),
         (assign, "$g_ransom_offer_party", ":party_no"),
         (jump_to_menu, "mnu_enemy_offer_ransom_for_prisoner"),
       (try_end),
     (try_end),
     (assign, reg0, ":result"),
     ]),

  # script_event_hero_taken_prisoner_by_player
  # Input: arg1 = troop_no
  # Output: none
  ("event_hero_taken_prisoner_by_player",
    [
      (store_script_param_1, ":troop_no"),
      (try_begin),
        (check_quest_active, "qst_persuade_lords_to_make_peace"),
        (try_begin),
          (quest_slot_eq, "qst_persuade_lords_to_make_peace", slot_quest_target_troop, ":troop_no"),
          (val_mul, ":troop_no", -1),
          (quest_set_slot, "qst_persuade_lords_to_make_peace", slot_quest_target_troop, ":troop_no"),
          (val_mul, ":troop_no", -1),
        (else_try),
          (quest_slot_eq, "qst_persuade_lords_to_make_peace", slot_quest_object_troop, ":troop_no"),
          (val_mul, ":troop_no", -1),
          (quest_set_slot, "qst_persuade_lords_to_make_peace", slot_quest_object_troop, ":troop_no"),
          (val_mul, ":troop_no", -1),
        (try_end),
        (neg|check_quest_concluded, "qst_persuade_lords_to_make_peace"),
        (neg|quest_slot_ge, "qst_persuade_lords_to_make_peace", slot_quest_target_troop, 0),
        (neg|quest_slot_ge, "qst_persuade_lords_to_make_peace", slot_quest_object_troop, 0),
        (call_script, "script_succeed_quest", "qst_persuade_lords_to_make_peace"),
      (try_end),
      (call_script, "script_update_troop_location_notes", ":troop_no", 0),
  ]),

  # script_cf_check_hero_can_escape_from_player
  # Input: arg1 = troop_no
  # Output: none (can fail)
  ("cf_check_hero_can_escape_from_player",
    [
      (store_script_param_1, ":troop_no"),
      (assign, ":quest_target", 0),
		(assign, reg0, 0), 
		(store_troop_faction, ":fac", ":troop_no"), 
      (try_begin),
        (check_quest_active, "qst_persuade_lords_to_make_peace"),
        (this_or_next|quest_slot_eq, "qst_persuade_lords_to_make_peace", slot_quest_target_troop, ":troop_no"),
        (quest_slot_eq, "qst_persuade_lords_to_make_peace", slot_quest_object_troop, ":troop_no"),
        (assign, ":quest_target", 1),
      (try_end),
			#oim code
			(try_begin),
				(eq, ":troop_no", "trp_knight_2_16"), 
				(check_quest_active,"qst_oim_potop_kmitic"),
				(assign, ":quest_target", 1),
			(try_end), 
			(assign, ":min_random", 0), 
			(try_begin),
				(eq, ":troop_no", "trp_kingdom_2_lord"), 
				(check_quest_active,"qst_oim_potop_capture_tszar"),
				#(quest_slot_eq, "qst_oim_potop_return", slot_quest_current_state, 1), 
				(neg|check_quest_succeeded,"qst_oim_potop_capture_tszar"),
				(neg|check_quest_finished,"qst_oim_potop_capture_tszar"),
				(try_begin),
					(troop_slot_eq, "trp_knight_1_1", slot_troop_support_hero, 1), 
					(val_add, ":min_random", 30), 
				(try_end), 
      (try_begin),
					(troop_slot_eq, "trp_knight_1_2", slot_troop_support_hero, 1), 
					(val_add, ":min_random", 30), 
      (try_end),  
				(try_begin),
					(troop_slot_eq, "trp_knight_1_3", slot_troop_support_hero, 1), 
					(val_add, ":min_random", 30), 
				(try_end), 
			(try_end), 
			(try_begin),
			(check_quest_active, "qst_oim_getman_capture_tatarin"),
			(neg|check_quest_succeeded,"qst_oim_getman_capture_tatarin"),
			(neg|check_quest_finished,"qst_oim_getman_capture_tatarin"),
			(eq, ":fac", "fac_kingdom_3"), 
			(assign, ":quest_target", 1),
		(try_end), 		
		(try_begin), 
			(eq, ":troop_no", "trp_kingdom_1_pretender"),
			(check_quest_active,"qst_oim_getman_nesvizh_pernach"),
			(assign, ":quest_target", 1),
		(try_end), 		
		(try_begin), 
			(check_quest_active, "qst_oim_potop_capture_swedish_lord"),
			(neg|check_quest_succeeded,"qst_oim_potop_capture_swedish_lord"),
			(neg|check_quest_finished,"qst_oim_potop_capture_swedish_lord"),
			(eq, ":fac", "fac_kingdom_4"), 
			(assign, ":quest_target", 1),
		(try_end), 		
		(try_begin), 
			(check_quest_active,"qst_oim_potop_volodievskiy"),
			(this_or_next|quest_slot_eq, "qst_oim_potop_volodievskiy", slot_quest_current_state, 1), 
			( 			  quest_slot_eq, "qst_oim_potop_volodievskiy", slot_quest_current_state, 2), 
			(neg|check_quest_finished,"qst_oim_potop_volodievskiy"),
			(eq, ":fac", "fac_kingdom_4"),
			(assign, ":quest_target", 1), 
		(try_end), 
		(try_begin), 
			(check_quest_active, "qst_oim_getman_borat_dlg"), 
			(neg|check_quest_finished,"qst_oim_getman_borat_dlg"),
			(eq, ":troop_no", "trp_knight_2_14"), 
			(assign, ":quest_target", 1), 
		(try_end), 
		(try_begin), 
			(eq, ":troop_no", "trp_kingdom_2_pretender"), 
			(assign, ":quest_target", 1), 
		(try_end), 
		(assign, reg0, ":quest_target"), 
		(try_begin), 
			(store_skill_level, ":prison_menagment", "skl_prisoner_management", "trp_player"),
			(val_mul, ":prison_menagment", 5), 
			(val_add, ":min_random", ":prison_menagment"), 
			(val_clamp, ":min_random", 0, 95),
		(try_end), 
        (store_random_in_range, ":rand", ":min_random", 100),
		(try_begin), 
			(neq, ":quest_target", 1), 
			(ge, ":rand", hero_escape_after_defeat_chance),	
			(assign, reg0, 1), 
		(try_end), 
		(try_begin), 
			(eq, debug_mode, 1), 
			(assign, reg0, 1), 
		(try_end), 	
  ]),

  # script_cf_party_remove_random_regular_troop
  # Input: arg1 = party_no
  # Output: troop_id that has been removed (can fail)
  ("cf_party_remove_random_regular_troop",
    [(store_script_param_1, ":party_no"),
     (party_get_num_companion_stacks, ":num_stacks", ":party_no"),
     (assign, ":num_troops", 0),
     (try_for_range, ":i_stack", 0, ":num_stacks"),
       (party_stack_get_troop_id, ":stack_troop", ":party_no", ":i_stack"),
       (neg|troop_is_hero, ":stack_troop"),
       (party_stack_get_size, ":stack_size", ":party_no", ":i_stack"),
       (val_add, ":num_troops", ":stack_size"),
     (try_end),
     (assign, reg0, -1),
     (gt, ":num_troops", 0),
     (store_random_in_range, ":random_troop", 0, ":num_troops"),
     (try_for_range, ":i_stack", 0, ":num_stacks"),
       (party_stack_get_troop_id, ":stack_troop", ":party_no", ":i_stack"),
       (neg|troop_is_hero, ":stack_troop"),
       (party_stack_get_size, ":stack_size", ":party_no", ":i_stack"),
       (val_sub, ":random_troop", ":stack_size"),
       (lt, ":random_troop", 0),
       (assign, ":num_stacks", 0), #break
       (party_remove_members, ":party_no", ":stack_troop", 1),
       (assign, reg0, ":stack_troop"),
     (try_end),
     ]),

  # script_place_player_banner_near_inventory
  # Input: none
  # Output: none
  ("place_player_banner_near_inventory",
    [
    	#normal_banner_begin
    	(troop_get_slot, ":troop_banner_object", "trp_player", slot_troop_banner_scene_prop),
    	#custom_banner_begin
#    	(troop_get_slot, ":flag_spr", "trp_player", slot_troop_custom_banner_flag_type),

     (try_begin),
    	#normal_banner_begin
       (gt, ":troop_banner_object", 0),
       (scene_prop_get_instance, ":flag_object", ":troop_banner_object", 0),
    	#custom_banner_begin
#       (ge, ":flag_spr", 0),
#       (val_add, ":flag_spr", custom_banner_flag_scene_props_begin),
#       (scene_prop_get_instance, ":flag_object", ":flag_spr", 0),
       (try_begin),
         (ge, ":flag_object", 0),
         (get_player_agent_no, ":player_agent"),
         (agent_get_look_position, pos1, ":player_agent"),
         (position_move_y, pos1, -500),
         (position_rotate_z, pos1, 180),
         (position_set_z_to_ground_level, pos1),
         (position_move_z, pos1, 300),
         (prop_instance_set_position, ":flag_object", pos1),
       (try_end),
       (scene_prop_get_instance, ":pole_object", "spr_banner_pole", 0),
       (try_begin),
         (ge, ":pole_object", 0),
         (position_move_z, pos1, -320),
         (prop_instance_set_position, ":pole_object", pos1),
       (try_end),
     (else_try),
       (init_position, pos1),
       (position_move_z, pos1, -1000000),
       (scene_prop_get_instance, ":flag_object", banner_scene_props_begin, 0),
       (try_begin),
         (ge, ":flag_object", 0),
         (prop_instance_set_position, ":flag_object", pos1),
       (try_end),
       (scene_prop_get_instance, ":pole_object", "spr_banner_pole", 0),
       (try_begin),
         (ge, ":pole_object", 0),
         (prop_instance_set_position, ":pole_object", pos1),
       (try_end),
     (try_end),
     ]),

  # script_place_player_banner_near_inventory_bms
  # Input: none
  # Output: none
  ("place_player_banner_near_inventory_bms",
    [
    	    	#normal_banner_begin
    	(troop_get_slot, ":troop_banner_object", "trp_player", slot_troop_banner_scene_prop),
    	    	#custom_banner_begin
#      (troop_get_slot, ":flag_spr", "trp_player", slot_troop_custom_banner_flag_type),
     (try_begin),
    	    	#normal_banner_begin
       (gt, ":troop_banner_object", 0),
       (replace_scene_props, banner_scene_props_begin, ":troop_banner_object"),
    	    	#custom_banner_begin
#       (ge, ":flag_spr", 0),
#       (val_add, ":flag_spr", custom_banner_flag_scene_props_begin),
#       (replace_scene_props, banner_scene_props_begin, ":flag_spr"),
     (try_end),
     ]),
  
  # script_stay_captive_for_hours
  # Input: arg1 = num_hours
  # Output: none
  ("stay_captive_for_hours",
    [(store_script_param, ":num_hours", 1),
     (store_current_hours, ":cur_hours"),
     (val_add, ":cur_hours", ":num_hours"),
     (val_max, "$g_check_autos_at_hour", ":cur_hours"),
     (val_add, ":num_hours", 1),
     (rest_for_hours, ":num_hours", 0, 0),
     ]),

  # script_set_parties_around_player_ignore_player
  # Input: arg1 = ignore_range, arg2 = num_hours_to_ignore
  # Output: none
  ("set_parties_around_player_ignore_player",
    [(store_script_param, ":ignore_range", 1),
     (store_script_param, ":num_hours", 2),
     (try_for_parties, ":party_no"),
       (party_is_active, ":party_no"),
       (store_distance_to_party_from_party, ":dist", "p_main_party", ":party_no"),
       (lt, ":dist", ":ignore_range"),
       (store_current_hours,":protected_until"),
       (val_add, ":protected_until", ":num_hours"),
       (party_set_slot,":party_no",slot_party_ignore_player_until,":protected_until"),
       (party_ignore_player, ":party_no", ":num_hours"),
	   (party_set_ignore_with_player_party, "p_main_party", ":num_hours"),
     (try_end),
     ]),

  # script_randomly_make_prisoner_heroes_escape_from_party
  # Input: arg1 = party_no, arg2 = escape_chance_mul_1000
  # Output: none
  ("randomly_make_prisoner_heroes_escape_from_party",
    [(store_script_param, ":party_no", 1),
     (store_script_param, ":escape_chance", 2),
     (assign, ":quest_troop_1", -1),
     (assign, ":quest_troop_2", -1),
     (try_begin),
       (check_quest_active, "qst_rescue_lord_by_replace"),
       (quest_get_slot, ":quest_troop_1", "qst_rescue_lord_by_replace", slot_quest_target_troop),
     (try_end),
     (try_begin),
       (check_quest_active, "qst_deliver_message_to_prisoner_lord"),
       (quest_get_slot, ":quest_troop_2", "qst_deliver_message_to_prisoner_lord", slot_quest_target_troop),
     (try_end),
     (party_get_num_prisoner_stacks, ":num_stacks", ":party_no"),
     (try_for_range_backwards, ":i_stack", 0, ":num_stacks"),
       (party_prisoner_stack_get_troop_id, ":stack_troop", ":party_no", ":i_stack"),
       (troop_is_hero, ":stack_troop"),
       (neq, ":stack_troop", ":quest_troop_1"),
       (neq, ":stack_troop", ":quest_troop_2"),
       (troop_slot_eq, ":stack_troop", slot_troop_occupation, slto_kingdom_hero),
       (store_random_in_range, ":random_no", 0, 1000),
       (lt, ":random_no", ":escape_chance"),
       (party_remove_prisoners, ":party_no", ":stack_troop", 1),
       (call_script, "script_remove_troop_from_prison", ":stack_troop"),
       (str_store_troop_name_link, s1, ":stack_troop"),
       (try_begin),
         (eq, ":party_no", "p_main_party"),
         (str_store_string, s2, "@your party"),
       (else_try),
         (str_store_party_name, s2, ":party_no"),
       (try_end),
       (assign, reg0, 0),
       (try_begin),
         (this_or_next|eq, ":party_no", "p_main_party"),
         (party_slot_eq, ":party_no", slot_town_lord, "trp_player"),
         (assign, reg0, 1),
       (try_end),
       (store_troop_faction, ":troop_faction", ":stack_troop"),
       (str_store_faction_name_link, s3, ":troop_faction"),
       (display_message, "@{reg0?One of your prisoners, :}{s1} of {s3} has escaped from captivity!"),
     (try_end),
     ]),


  # script_fill_tournament_participants_troop
  # Input: arg1 = center_no, arg2 = player_at_center
  # Output: none (fills trp_tournament_participants)
  ("fill_tournament_participants_troop",
    [(store_script_param, ":center_no", 1),
     (store_script_param, ":player_at_center", 2),
     (assign, ":cur_slot", 0),

     (try_begin),
       (eq, ":player_at_center", 1),
       (party_get_num_companion_stacks, ":num_stacks", "p_main_party"),
       (try_for_range, ":stack_no", 0, ":num_stacks"),
         (party_stack_get_troop_id, ":cur_troop", "p_main_party", ":stack_no"),
         (troop_is_hero, ":cur_troop"),
         (neq, ":cur_troop", "trp_kidnapped_girl"),
         (troop_set_slot, "trp_tournament_participants", ":cur_slot", ":cur_troop"),
         (val_add, ":cur_slot", 1),
       (try_end),
     (try_end),

     (party_collect_attachments_to_party, ":center_no", "p_temp_party"),
     (party_get_num_companion_stacks, ":num_stacks", "p_temp_party"),
     (try_for_range, ":stack_no", 0, ":num_stacks"),
       (party_stack_get_troop_id, ":cur_troop", "p_temp_party", ":stack_no"),
       (troop_is_hero, ":cur_troop"),
       (troop_set_slot, "trp_tournament_participants", ":cur_slot", ":cur_troop"),
       (val_add, ":cur_slot", 1),
     (try_end),

     (try_begin),
       (store_random_in_range, ":random_no", 0, 100),
       (lt, ":random_no", 50),
       (troop_set_slot, "trp_tournament_participants", ":cur_slot", "trp_xerina"),
       (val_add, ":cur_slot", 1),
     (try_end),
     (try_begin),
       (store_random_in_range, ":random_no", 0, 100),
       (lt, ":random_no", 50),
       (troop_set_slot, "trp_tournament_participants", ":cur_slot", "trp_dranton"),
       (val_add, ":cur_slot", 1),
     (try_end),
     (try_begin),
       (store_random_in_range, ":random_no", 0, 100),
       (lt, ":random_no", 50),
       (troop_set_slot, "trp_tournament_participants", ":cur_slot", "trp_kradus"),
       (val_add, ":cur_slot", 1),
     (try_end),

     (assign, ":begin_slot", ":cur_slot"),
     (try_for_range, ":cur_slot", ":begin_slot", 64),
       (store_random_in_range, ":random_no", 0, 6),
       (try_begin),
         (eq, ":random_no", 0),
         (troop_set_slot, "trp_tournament_participants", ":cur_slot", "trp_regular_fighter"),
       (else_try),
         (eq, ":random_no", 1),
         (troop_set_slot, "trp_tournament_participants", ":cur_slot", "trp_veteran_fighter"),
       (else_try),
         (eq, ":random_no", 2),
         (troop_set_slot, "trp_tournament_participants", ":cur_slot", "trp_champion_fighter"),
       (else_try),
         (eq, ":random_no", 3),
         (troop_set_slot, "trp_tournament_participants", ":cur_slot", "trp_sword_sister"),
       (else_try),
         (eq, ":random_no", 4),
         (troop_set_slot, "trp_tournament_participants", ":cur_slot", "trp_hired_blade"),
       (else_try),
         (troop_set_slot, "trp_tournament_participants", ":cur_slot", "trp_mercenary_swordsman"),
       (try_end),
     (try_end),
     ]),
  
  # script_get_num_tournament_participants
  # Input: none
  # Output: reg0 = num_participants
  ("get_num_tournament_participants",
    [(assign, ":num_participants", 0),
     (try_for_range, ":cur_slot", 0, 64),
       (troop_slot_ge, "trp_tournament_participants", ":cur_slot", 0),
       (val_add, ":num_participants", 1),
     (try_end),
     (assign, reg0, ":num_participants"),
     ]),

  # script_get_random_tournament_participant
  # Input: none
  # Output: reg0 = troop_no
  ("get_random_tournament_participant",
    [(call_script, "script_get_num_tournament_participants"),
     (assign, ":num_participants", reg0),
     (store_random_in_range, ":random_troop", 0, ":num_participants"),
     (assign, ":continue", 1),
     (try_for_range, ":cur_slot", 0, 64),
       (eq, ":continue", 1),
       (troop_slot_ge, "trp_tournament_participants", ":cur_slot", 0),
       (val_sub, ":random_troop", 1),
       (lt, ":random_troop", 0),
       (assign, ":continue", 0),
       (troop_get_slot, ":troop_no", "trp_tournament_participants", ":cur_slot"),
       (troop_set_slot, "trp_tournament_participants", ":cur_slot", -1),
     (try_end),
     (assign, reg0, ":troop_no"),
     ]),

  # script_add_tournament_participant
  # Input: arg1 = troop_no
  # Output: none
  ("add_tournament_participant",
    [
     ]),

  # script_get_random_tournament_team_amount_and_size
  # Input: none
  # Output: reg0 = number_of_teams, reg1 = team_size
  ("get_random_tournament_team_amount_and_size",
    [
        (call_script, "script_get_num_tournament_participants"),
        (assign, ":num_participants", reg0),
        (party_get_slot, ":town_max_teams", "$current_town", slot_town_tournament_max_teams),
        (val_add, ":town_max_teams", 1),
        (party_get_slot, ":town_max_team_size", "$current_town", slot_town_tournament_max_team_size),
        (val_add, ":town_max_team_size", 1),
        (assign, ":max_teams", ":num_participants"),
        (val_min, ":max_teams", ":town_max_teams"),
        (assign, ":max_size", ":num_participants"),
        (val_min, ":max_size", ":town_max_team_size"),
        (assign, ":min_size", 1),
        (try_begin),
          (ge, ":num_participants", 32),
          (assign, ":min_size", 2),
          (val_min, ":min_size", ":town_max_team_size"),
        (try_end),
        (assign, ":end_cond", 500),
        (try_for_range, ":unused", 0, ":end_cond"),
          (store_random_in_range, ":random_teams", 2, ":max_teams"),
          (store_random_in_range, ":random_size", ":min_size", ":max_size"),
          (store_mul, ":total_men", ":random_teams", ":random_size"),
          (le, ":total_men", ":num_participants"),
          (store_sub, ":left_men", ":num_participants", ":total_men"),
          (neq, ":left_men", 1),
          (assign, ":end_cond", 0),
        (try_end),
        (try_begin),
          (gt, ":end_cond", 0),
          (assign, ":random_teams", 2),
          (assign, ":random_size", 1),
        (try_end),
        (assign, reg0, ":random_teams"),
        (assign, reg1, ":random_size"),
     ]),

  # script_get_troop_priority_point_for_tournament
  # Input: arg1 = troop_no
  # Output: reg0 = troop_point
  ("get_troop_priority_point_for_tournament",
    [(store_script_param, ":troop_no", 1),
     (assign, ":troop_point", 0),
     (try_begin),
       (ge, ":troop_no", 0),
       (val_add, ":troop_point", 40000),
       (try_begin),
         (eq, ":troop_no", "trp_player"),
         (val_add, ":troop_point", 80000),
       (try_end),
       (try_begin),
         (troop_is_hero, ":troop_no"),
         (val_add, ":troop_point", 20000),
       (try_end),
       (try_begin),
         (troop_slot_eq, ":troop_no", slot_troop_occupation, slto_player_companion),
         (val_add, ":troop_point", 10000),
       (else_try),
         (troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_hero),
         (troop_get_slot, ":renown", ":troop_no", slot_troop_renown),
         (val_add, ":troop_point", ":renown"),
         (val_add, ":troop_point", 1000), #in order to make it more prior than tournament heroes with higher levels
       (else_try),
         (store_character_level, ":level", ":troop_no"),
         (val_add, ":troop_point", ":level"),
       (try_end),
     (try_end),
     (assign, reg0, ":troop_point"),
     ]),

  # script_sort_tournament_participant_troops
  # Input: none
  # Output: none (sorts trp_tournament_participants)
  ("sort_tournament_participant_troops",
    [(try_for_range, ":cur_slot", 0, 63),
       (store_add, ":cur_slot_2_begin", ":cur_slot", 1),
       (try_for_range, ":cur_slot_2", ":cur_slot_2_begin", 64),
         (troop_get_slot, ":troop_1", "trp_tournament_participants", ":cur_slot"),
         (troop_get_slot, ":troop_2", "trp_tournament_participants", ":cur_slot_2"),
         (call_script, "script_get_troop_priority_point_for_tournament", ":troop_1"),
         (assign, ":troop_1_point", reg0),
         (call_script, "script_get_troop_priority_point_for_tournament", ":troop_2"),
         (assign, ":troop_2_point", reg0),
         (gt, ":troop_2_point", ":troop_1_point"),
         (troop_set_slot, "trp_tournament_participants", ":cur_slot", ":troop_2"),
         (troop_set_slot, "trp_tournament_participants", ":cur_slot_2", ":troop_1"),
       (try_end),
     (try_end),
     ]),

  # script_remove_tournament_participants_randomly
  # Input: arg1 = number_to_be_removed
  # Output: none
  ("remove_tournament_participants_randomly",
    [(store_script_param, ":number_to_be_removed", 1),
     (try_for_range, ":unused", 0, ":number_to_be_removed"),
       (assign, ":total_weight", 0),
       (try_for_range, ":cur_slot", 0, 64),
         (troop_get_slot, ":troop_no", "trp_tournament_participants", ":cur_slot"),
         (ge, ":troop_no", 0),
         (store_character_level, ":level", ":troop_no"),
         (val_min, ":level", 38),
         (store_sub, ":weight", 40, ":level"),
         (val_add, ":total_weight", ":weight"),
       (try_end),
       (store_random_in_range, ":random_weight", 0, ":total_weight"),
       (assign, ":continue", 1),
       (try_for_range, ":cur_slot", 0, 64),
         (eq, ":continue", 1),
         (troop_get_slot, ":troop_no", "trp_tournament_participants", ":cur_slot"),
         (ge, ":troop_no", 0),
         (store_character_level, ":level", ":troop_no"),
         (val_min, ":level", 38),
         (store_sub, ":weight", 40, ":level"),
         (val_sub, ":random_weight", ":weight"),
         (lt, ":random_weight", 0),
         (troop_set_slot, "trp_tournament_participants", ":cur_slot", -1),
         (assign, ":continue", 0),
       (try_end),
     (try_end),
     ]),
  
  # script_end_tournament_fight
  # Input: arg1 = player_team_won (1 or 0)
  # Output: none
  ("end_tournament_fight",
    [
     ]),


  # script_get_win_amount_for_tournament_bet
  # Input: none
  # Output: reg0 = win_amount_with_100_denars
  ("get_win_amount_for_tournament_bet",
    [
        (party_get_slot, ":player_odds", "$current_town", slot_town_player_odds),
        (try_begin),
          (eq, "$g_tournament_cur_tier", 0),
          (assign, ":win_amount", 120),
        (else_try),
          (eq, "$g_tournament_cur_tier", 1),
          (assign, ":win_amount", 90),
        (else_try),
          (eq, "$g_tournament_cur_tier", 2),
          (assign, ":win_amount", 60),
        (else_try),
          (eq, "$g_tournament_cur_tier", 3),
          (assign, ":win_amount", 40),
        (else_try),
          (eq, "$g_tournament_cur_tier", 4),
          (assign, ":win_amount", 20),
        (else_try),
          (assign, ":win_amount", 8),
        (try_end),
        (val_mul, ":win_amount", ":player_odds"),
        (val_div, ":win_amount", 100),
        (val_add, ":win_amount", 100), #win amount when 100 denars is placed
        (assign, reg0, ":win_amount"),
     ]),

  # script_tournament_place_bet
  # Input: arg1 = bet_amount
  # Output: none
  ("tournament_place_bet",
    [
        (store_script_param, ":bet_amount", 1),
        (call_script, "script_get_win_amount_for_tournament_bet"),
        (assign, ":win_amount", reg0),
        (val_mul, ":win_amount", ":bet_amount"),
        (val_div, ":win_amount", 100),
        (val_sub, ":win_amount", ":bet_amount"),
        (val_add, "$g_tournament_bet_placed", ":bet_amount"),
        (val_add, "$g_tournament_bet_win_amount", ":win_amount"),		
        (troop_remove_gold, "trp_player", ":bet_amount"),
        (assign, "$g_tournament_last_bet_tier", "$g_tournament_cur_tier"),
     ]),

  # script_calculate_amount_of_cattle_can_be_stolen
  # Input: arg1 = village_no
  # Output: reg0 = max_amount
  ("calculate_amount_of_cattle_can_be_stolen",
    [
      (store_script_param, ":village_no", 1),
      (call_script, "script_get_max_skill_of_player_party", "skl_looting"),
      (assign, ":max_skill", reg0),
      (store_mul, ":can_steal", ":max_skill", 2),
      (call_script, "script_party_count_fit_for_battle", "p_main_party"),
      (store_add, ":num_men_effect", reg0, 10),
      (val_div, ":num_men_effect", 10),
      (val_add, ":can_steal", ":num_men_effect"),
      (party_get_slot, ":num_cattle", ":village_no", slot_village_number_of_cattle),
      (val_min, ":can_steal", ":num_cattle"),
      (assign, reg0, ":can_steal"),
     ]),


  # script_draw_banner_to_region
  # Input: arg1 = troop_no, arg2 = center_pos_x, arg3 = center_pos_y, arg4 = width, arg5 = height, arg6 = stretch_width, arg7 = stretch_height, arg8 = default_scale, arg9 = max_charge_scale, arg10 = drawn_item_type
  # drawn_item_type is 0 for banners, 1 for shields, 2 for heater shield, 3 for armor
  # arguments will be used as fixed point values
  # Output: none
  ("draw_banner_to_region",
    [
      (store_script_param, ":troop_no", 1),
      (store_script_param, ":center_pos_x", 2),
      (store_script_param, ":center_pos_y", 3),
      (store_script_param, ":width", 4),
      (store_script_param, ":height", 5),
      (store_script_param, ":stretch_width", 6),
      (store_script_param, ":stretch_height", 7),
      (store_script_param, ":default_scale", 8),
      (store_script_param, ":max_charge_scale", 9),
      (store_script_param, ":drawn_item_type", 10),

      (troop_get_slot, ":bg_type", ":troop_no", slot_troop_custom_banner_bg_type),
      (val_add, ":bg_type", custom_banner_backgrounds_begin),
      (troop_get_slot, ":bg_color_1", ":troop_no", slot_troop_custom_banner_bg_color_1),
      (troop_get_slot, ":bg_color_2", ":troop_no", slot_troop_custom_banner_bg_color_2),
      (troop_get_slot, ":num_charges", ":troop_no", slot_troop_custom_banner_num_charges),
      (troop_get_slot, ":positioning", ":troop_no", slot_troop_custom_banner_positioning),
      (call_script, "script_get_troop_custom_banner_num_positionings", ":troop_no"),
      (assign, ":num_positionings", reg0),
      (val_mod, ":positioning", ":num_positionings"),

      (init_position, pos2),
      (position_set_x, pos2, ":width"),
      (position_set_y, pos2, ":height"),
      (assign, ":default_value", 1),
      (convert_to_fixed_point, ":default_value"),
      (position_set_z, pos2, ":default_value"),

      (init_position, pos1),
      (position_set_x, pos1, ":center_pos_x"),
      (position_set_y, pos1, ":center_pos_y"),
      (position_move_z, pos1, -20),

      (init_position, pos3),
      (position_set_x, pos3, ":default_scale"),
      (position_set_y, pos3, ":default_scale"),
      (position_set_z, pos3, ":default_value"),

      (try_begin),
        (this_or_next|eq, ":bg_type", "mesh_custom_banner_bg"),
        (this_or_next|eq, ":bg_type", "mesh_custom_banner_fg01"),
        (this_or_next|eq, ":bg_type", "mesh_custom_banner_fg02"),
        (this_or_next|eq, ":bg_type", "mesh_custom_banner_fg03"),
        (this_or_next|eq, ":bg_type", "mesh_custom_banner_fg08"),
        (this_or_next|eq, ":bg_type", "mesh_custom_banner_fg09"),
        (this_or_next|eq, ":bg_type", "mesh_custom_banner_fg10"),
        (this_or_next|eq, ":bg_type", "mesh_custom_banner_fg11"),
        (this_or_next|eq, ":bg_type", "mesh_custom_banner_fg12"),
        (this_or_next|eq, ":bg_type", "mesh_custom_banner_fg13"),
        (this_or_next|eq, ":bg_type", "mesh_custom_banner_fg16"),
        (eq, ":bg_type", "mesh_custom_banner_fg17"),
        (cur_tableau_add_mesh_with_scale_and_vertex_color, ":bg_type", pos1, pos2, 0, ":bg_color_1"),
      (else_try),
        (cur_tableau_add_mesh_with_scale_and_vertex_color, ":bg_type", pos1, pos3, 0, ":bg_color_1"),
      (try_end),
      (position_move_z, pos1, -20),
      (position_move_x, pos2, ":width"),
      (position_move_y, pos2, ":height"),
      (cur_tableau_add_mesh_with_scale_and_vertex_color, "mesh_custom_banner_bg", pos1, pos2, 0, ":bg_color_2"),
      
      (assign, ":charge_stretch", ":stretch_width"),
      (val_min, ":charge_stretch", ":stretch_height"),
      (val_min, ":charge_stretch", ":max_charge_scale"),
      (call_script, "script_get_custom_banner_charge_type_position_scale_color", "trp_player", ":positioning"),

      (try_begin),
        (this_or_next|eq, ":drawn_item_type", 2), #heater shield
        (eq, ":drawn_item_type", 3), #armor
        (assign, ":change_center_pos", 0),
        (try_begin),
          (eq, ":num_charges", 1),
          (assign, ":change_center_pos", 1),
        (else_try),
          (eq, ":num_charges", 2),
          (eq, ":positioning", 1),
          (assign, ":change_center_pos", 1),
        (else_try),
          (eq, ":num_charges", 3),
          (eq, ":positioning", 1),
          (assign, ":change_center_pos", 1),
        (try_end),
        (try_begin),
          (eq, ":change_center_pos", 1),
          (val_add, ":center_pos_y", 30),
        (try_end),
      (try_end),
      
      (try_begin),
        (ge, ":num_charges", 1),
        (val_mul, reg1, ":charge_stretch"),
        (val_div, reg1, 10000),
        (position_get_x, ":x", pos0),
        (position_get_y, ":y", pos0),
        (val_mul, ":x", ":stretch_width"),
        (val_mul, ":y", ":stretch_height"),
        (val_div, ":x", 10000),
        (val_div, ":y", 10000),
        (val_add, ":x", ":center_pos_x"),
        (val_add, ":y", ":center_pos_y"),
        (position_set_x, pos0, ":x"),
        (position_set_y, pos0, ":y"),
        (assign, ":scale_value", reg1),
        (convert_to_fixed_point, ":scale_value"),
        (store_mul, ":scale_value_inverse", ":scale_value", -1),
        (init_position, pos4),
        (position_set_x, pos4, ":scale_value"),
        (position_set_y, pos4, ":scale_value"),
        (position_set_z, pos4, ":scale_value"),
        (store_div, ":orientation", reg0, 256), #orientation flags
        (try_begin),
          (this_or_next|eq, ":orientation", 1),
          (eq, ":orientation", 3),
          (position_set_x, pos4, ":scale_value_inverse"),
        (try_end),
        (try_begin),
          (this_or_next|eq, ":orientation", 2),
          (eq, ":orientation", 3),
          (position_set_y, pos4, ":scale_value_inverse"),
        (try_end),
        (val_mod, reg0, 256), #remove orientation flags
        (cur_tableau_add_mesh_with_scale_and_vertex_color, reg0, pos0, pos4, 0, reg2),
      (try_end),
      (try_begin),
        (ge, ":num_charges", 2),
        (val_mul, reg4, ":charge_stretch"),
        (val_div, reg4, 10000),
        (position_get_x, ":x", pos1),
        (position_get_y, ":y", pos1),
        (val_mul, ":x", ":stretch_width"),
        (val_mul, ":y", ":stretch_height"),
        (val_div, ":x", 10000),
        (val_div, ":y", 10000),
        (val_add, ":x", ":center_pos_x"),
        (val_add, ":y", ":center_pos_y"),
        (position_set_x, pos1, ":x"),
        (position_set_y, pos1, ":y"),

        (assign, ":scale_value", reg4),
        (convert_to_fixed_point, ":scale_value"),
        (store_mul, ":scale_value_inverse", ":scale_value", -1),
        (init_position, pos4),
        (position_set_x, pos4, ":scale_value"),
        (position_set_y, pos4, ":scale_value"),
        (position_set_z, pos4, ":scale_value"),
        (store_div, ":orientation", reg3, 256), #orientation flags
        (try_begin),
          (this_or_next|eq, ":orientation", 1),
          (eq, ":orientation", 3),
          (position_set_x, pos4, ":scale_value_inverse"),
        (try_end),
        (try_begin),
          (this_or_next|eq, ":orientation", 2),
          (eq, ":orientation", 3),
          (position_set_y, pos4, ":scale_value_inverse"),
        (try_end),
        (val_mod, reg3, 256), #remove orientation flags

        (cur_tableau_add_mesh_with_scale_and_vertex_color, reg3, pos1, pos4, 0, reg5),
      (try_end),
      (try_begin),
        (ge, ":num_charges", 3),
        (val_mul, reg7, ":charge_stretch"),
        (val_div, reg7, 10000),
        (position_get_x, ":x", pos2),
        (position_get_y, ":y", pos2),
        (val_mul, ":x", ":stretch_width"),
        (val_mul, ":y", ":stretch_height"),
        (val_div, ":x", 10000),
        (val_div, ":y", 10000),
        (val_add, ":x", ":center_pos_x"),
        (val_add, ":y", ":center_pos_y"),
        (position_set_x, pos2, ":x"),
        (position_set_y, pos2, ":y"),

        (assign, ":scale_value", reg7),
        (convert_to_fixed_point, ":scale_value"),
        (store_mul, ":scale_value_inverse", ":scale_value", -1),
        (init_position, pos4),
        (position_set_x, pos4, ":scale_value"),
        (position_set_y, pos4, ":scale_value"),
        (position_set_z, pos4, ":scale_value"),
        (store_div, ":orientation", reg6, 256), #orientation flags
        (try_begin),
          (this_or_next|eq, ":orientation", 1),
          (eq, ":orientation", 3),
          (position_set_x, pos4, ":scale_value_inverse"),
        (try_end),
        (try_begin),
          (this_or_next|eq, ":orientation", 2),
          (eq, ":orientation", 3),
          (position_set_y, pos4, ":scale_value_inverse"),
        (try_end),
        (val_mod, reg6, 256), #remove orientation flags

        (cur_tableau_add_mesh_with_scale_and_vertex_color, reg6, pos2, pos4, 0, reg8),
      (try_end),
      (try_begin),
        (ge, ":num_charges", 4),
        (val_mul, reg10, ":charge_stretch"),
        (val_div, reg10, 10000),
        (position_get_x, ":x", pos3),
        (position_get_y, ":y", pos3),
        (val_mul, ":x", ":stretch_width"),
        (val_mul, ":y", ":stretch_height"),
        (val_div, ":x", 10000),
        (val_div, ":y", 10000),
        (val_add, ":x", ":center_pos_x"),
        (val_add, ":y", ":center_pos_y"),
        (position_set_x, pos3, ":x"),
        (position_set_y, pos3, ":y"),

        (assign, ":scale_value", reg10),
        (convert_to_fixed_point, ":scale_value"),
        (store_mul, ":scale_value_inverse", ":scale_value", -1),
        (init_position, pos4),
        (position_set_x, pos4, ":scale_value"),
        (position_set_y, pos4, ":scale_value"),
        (position_set_z, pos4, ":scale_value"),
        (store_div, ":orientation", reg9, 256), #orientation flags
        (try_begin),
          (this_or_next|eq, ":orientation", 1),
          (eq, ":orientation", 3),
          (position_set_x, pos4, ":scale_value_inverse"),
        (try_end),
        (try_begin),
          (this_or_next|eq, ":orientation", 2),
          (eq, ":orientation", 3),
          (position_set_y, pos4, ":scale_value_inverse"),
        (try_end),
        (val_mod, reg9, 256), #remove orientation flags

        (cur_tableau_add_mesh_with_scale_and_vertex_color, reg9, pos3, pos4, 0, reg11),
      (try_end),
     ]),

  # script_get_troop_custom_banner_num_positionings
  # Input: arg1 = troop_no
  # Output: reg0 = num_positionings
  ("get_troop_custom_banner_num_positionings",
    [
      (store_script_param, ":troop_no", 1),
      (troop_get_slot, ":num_charges", ":troop_no", slot_troop_custom_banner_num_charges),
      (try_begin),
        (eq, ":num_charges", 1),
        (assign, ":num_positionings", 2),
      (else_try),
        (eq, ":num_charges", 2),
        (assign, ":num_positionings", 4),
      (else_try),
        (eq, ":num_charges", 3),
        (assign, ":num_positionings", 6),
      (else_try),
        (assign, ":num_positionings", 2),
      (try_end),
      (assign, reg0, ":num_positionings"),
     ]),

  # script_get_custom_banner_charge_type_position_scale_color
  # Input: arg1 = troop_no, arg2 = positioning_index
  # Output: reg0 = type_1
  #         reg1 = scale_1
  #         reg2 = color_1
  #         reg3 = type_2
  #         reg4 = scale_2
  #         reg5 = color_2
  #         reg6 = type_3
  #         reg7 = scale_3
  #         reg8 = color_3
  #         reg9 = type_4
  #         reg10 = scale_4
  #         reg11 = color_4
  ("get_custom_banner_charge_type_position_scale_color",
    [
      (store_script_param, ":troop_no", 1),
      (store_script_param, ":positioning", 2),
      (troop_get_slot, ":num_charges", ":troop_no", slot_troop_custom_banner_num_charges),
      (init_position, pos0),
      (init_position, pos1),
      (init_position, pos2),
      (init_position, pos3),

      (troop_get_slot, reg0, ":troop_no", slot_troop_custom_banner_charge_type_1),
      (val_add, reg0, custom_banner_charges_begin),
      (troop_get_slot, reg2, ":troop_no", slot_troop_custom_banner_charge_color_1),
      (troop_get_slot, reg3, ":troop_no", slot_troop_custom_banner_charge_type_2),
      (val_add, reg3, custom_banner_charges_begin),
      (troop_get_slot, reg5, ":troop_no", slot_troop_custom_banner_charge_color_2),
      (troop_get_slot, reg6, ":troop_no", slot_troop_custom_banner_charge_type_3),
      (val_add, reg6, custom_banner_charges_begin),
      (troop_get_slot, reg8, ":troop_no", slot_troop_custom_banner_charge_color_3),
      (troop_get_slot, reg9, ":troop_no", slot_troop_custom_banner_charge_type_4),
      (val_add, reg9, custom_banner_charges_begin),
      (troop_get_slot, reg11, ":troop_no", slot_troop_custom_banner_charge_color_4),

      (try_begin),
        (eq, ":num_charges", 1),
        (try_begin),
          (eq, ":positioning", 0),
          (assign, reg1, 100),
        (else_try),
          (assign, reg1, 50),
        (try_end),
      (else_try),
        (eq, ":num_charges", 2),
        (try_begin),
          (eq, ":positioning", 0),
          (position_set_y, pos0, 25),
          (position_set_y, pos1, -25),
          (assign, reg1, 40),
          (assign, reg4, 40),
        (else_try),
          (eq, ":positioning", 1),
          (position_set_x, pos0, -25),
          (position_set_x, pos1, 25),
          (assign, reg1, 40),
          (assign, reg4, 40),
        (else_try),
          (eq, ":positioning", 2),
          (position_set_x, pos0, -25),
          (position_set_y, pos0, 25),
          (position_set_x, pos1, 25),
          (position_set_y, pos1, -25),
          (assign, reg1, 50),
          (assign, reg4, 50),
        (else_try),
          (position_set_x, pos0, -25),
          (position_set_y, pos0, -25),
          (position_set_x, pos1, 25),
          (position_set_y, pos1, 25),
          (assign, reg1, 50),
          (assign, reg4, 50),
        (try_end),
      (else_try),
        (eq, ":num_charges", 3),
        (try_begin),
          (eq, ":positioning", 0),
          (position_set_y, pos0, 33),
          (position_set_y, pos2, -33),
          (assign, reg1, 30),
          (assign, reg4, 30),
          (assign, reg7, 30),
        (else_try),
          (eq, ":positioning", 1),
          (position_set_x, pos0, -33),
          (position_set_x, pos2, 33),
          (assign, reg1, 30),
          (assign, reg4, 30),
          (assign, reg7, 30),
        (else_try),
          (eq, ":positioning", 2),
          (position_set_x, pos0, -30),
          (position_set_y, pos0, 30),
          (position_set_x, pos2, 30),
          (position_set_y, pos2, -30),
          (assign, reg1, 35),
          (assign, reg4, 35),
          (assign, reg7, 35),
        (else_try),
          (eq, ":positioning", 3),
          (position_set_x, pos0, -30),
          (position_set_y, pos0, -30),
          (position_set_x, pos2, 30),
          (position_set_y, pos2, 30),
          (assign, reg1, 35),
          (assign, reg4, 35),
          (assign, reg7, 35),
        (else_try),
          (eq, ":positioning", 4),
          (position_set_x, pos0, -25),
          (position_set_y, pos0, -25),
          (position_set_y, pos1, 25),
          (position_set_x, pos2, 25),
          (position_set_y, pos2, -25),
          (assign, reg1, 50),
          (assign, reg4, 50),
          (assign, reg7, 50),
        (else_try),
          (position_set_x, pos0, -25),
          (position_set_y, pos0, 25),
          (position_set_y, pos1, -25),
          (position_set_x, pos2, 25),
          (position_set_y, pos2, 25),
          (assign, reg1, 50),
          (assign, reg4, 50),
          (assign, reg7, 50),
        (try_end),
      (else_try),
        (try_begin),
          (eq, ":positioning", 0),
          (position_set_x, pos0, -25),
          (position_set_y, pos0, 25),
          (position_set_x, pos1, 25),
          (position_set_y, pos1, 25),
          (position_set_x, pos2, -25),
          (position_set_y, pos2, -25),
          (position_set_x, pos3, 25),
          (position_set_y, pos3, -25),
          (assign, reg1, 50),
          (assign, reg4, 50),
          (assign, reg7, 50),
          (assign, reg10, 50),
        (else_try),
          (position_set_y, pos0, 30),
          (position_set_x, pos1, -30),
          (position_set_x, pos2, 30),
          (position_set_y, pos3, -30),
          (assign, reg1, 35),
          (assign, reg4, 35),
          (assign, reg7, 35),
          (assign, reg10, 35),
        (try_end),
      (try_end),
     ]),

  # script_get_random_custom_banner
  # Input: arg1 = troop_no
  # Output: none
  ("get_random_custom_banner",
    [
     ]),

  # script_get_custom_banner_color_from_index
  # Input: arg1 = color_index
  # Output: reg0 = color
  ("get_custom_banner_color_from_index",
    [
     ]),

  # script_cf_check_color_visibility
  # Input: arg1 = color_1, arg2 = color_2
  # Output: none
  ("cf_check_color_visibility",
    [
     ]),
  
  # script_get_next_active_kingdom
  # Input: arg1 = faction_no
  # Output: reg0 = faction_no (does not choose player faction)
  ("get_next_active_kingdom",
    [
      (store_script_param, ":faction_no", 1),
      (assign, ":end_cond", kingdoms_end),
      (try_for_range, ":unused", kingdoms_begin, ":end_cond"),
        (val_add, ":faction_no", 1),
        (try_begin),
          (ge, ":faction_no", kingdoms_end),
          (assign, ":faction_no", kingdoms_begin),
        (try_end),
        (faction_slot_eq, ":faction_no", slot_faction_state, sfs_active),
        (neq, ":faction_no", "fac_player_supporters_faction"),
        (assign, ":end_cond", 0),
      (try_end),
      (assign, reg0, ":faction_no"),
     ]),

  # script_store_average_center_value_per_faction
  # Input: none
  # Output: none (sets $g_average_center_value_per_faction)
  ("store_average_center_value_per_faction",
    [
      (store_sub, ":num_towns", towns_end, towns_begin),
      (store_sub, ":num_castles", castles_end, castles_begin),
      (assign, ":num_factions", 0),
      (try_for_range, ":faction_no", kingdoms_begin, kingdoms_end),
        (faction_slot_eq, ":faction_no", slot_faction_state, sfs_active),
        (val_add, ":num_factions", 1),
      (try_end),
      (val_max, ":num_factions", 1),
      (store_mul, "$g_average_center_value_per_faction", ":num_towns", 2),
      (val_add, "$g_average_center_value_per_faction", ":num_castles"),
      (val_mul, "$g_average_center_value_per_faction", 10),
      (val_div, "$g_average_center_value_per_faction", ":num_factions"),
     ]),

  # script_remove_cattles_if_herd_is_close_to_party
  # Input: arg1 = party_no, arg2 = maximum_number_of_cattles_required
  # Output: reg0 = number_of_cattles_removed
  ("remove_cattles_if_herd_is_close_to_party",
    [
      (store_script_param, ":party_no", 1),
      (store_script_param, ":max_req", 2),
      (assign, ":cur_req", ":max_req"),
      (try_for_parties, ":cur_party"),
        (gt, ":cur_req", 0),
        (party_slot_eq, ":cur_party", slot_party_type, spt_cattle_herd),
        (store_distance_to_party_from_party, ":dist", ":cur_party", ":party_no"),
        (lt, ":dist", 3),
        #Do not use the quest herd
        (assign, ":subcontinue", 1),
        (try_begin),
          (check_quest_active, "qst_move_cattle_herd"),
          (quest_slot_eq, "qst_move_cattle_herd", slot_quest_target_party, ":cur_party"),
          (assign, ":subcontinue", 0),
        (try_end),
        (eq, ":subcontinue", 1),
        (party_count_companions_of_type, ":num_cattle", ":cur_party", "trp_cattle"),
        (try_begin),
          (le, ":num_cattle", ":cur_req"),
          (assign, ":num_added", ":num_cattle"),
          (remove_party, ":cur_party"),
        (else_try),
          (assign, ":num_added", ":cur_req"),
          (party_remove_members, ":cur_party", "trp_cattle", ":cur_req"),
        (try_end),
        (val_sub, ":cur_req", ":num_added"),
        (try_begin),
          (party_slot_eq, ":party_no", slot_party_type, spt_village),
          (party_get_slot, ":village_cattle_amount", ":party_no", slot_village_number_of_cattle),
          (val_add, ":village_cattle_amount", ":num_added"),
          (party_set_slot, ":party_no", slot_village_number_of_cattle, ":village_cattle_amount"),
        (try_end),
        (assign, reg3, ":num_added"),
        (str_store_party_name_link, s1, ":party_no"),
        (display_message, "@You brought {reg3} heads of cattle to {s1}."),
      (try_end),
      (store_sub, reg0, ":max_req", ":cur_req"),
     ]),  

  # script_get_rumor_to_s61
  # Input: rumor_id
  # Output: reg0 = 1 if rumor found, 0 otherwise; s61 will contain rumor string if found
  ("get_rumor_to_s61",
    [	  
     (store_script_param, ":base_rumor_id", 1), # the script returns the same rumor for the same rumor id, so that one cannot hear all rumors by
                                                # speaking to a single person.
     (store_current_hours, ":cur_hours"),
     #(store_div, ":cur_day", ":cur_hours", 24),
     (assign, ":rumor_found", 0),
     (assign, ":num_tries", 3),
     (try_for_range, ":try_no", 0, ":num_tries"),
       (store_mul, ":rumor_id", ":try_no", 6781),
       (val_add, ":rumor_id", ":base_rumor_id"),
       (store_mod, ":rumor_type", ":rumor_id", 7),
       (val_add, ":rumor_id", ":cur_hours"),
       (try_begin),
         (eq,  ":rumor_type", 0),
         (try_begin),
           (store_sub, ":range", towns_end, towns_begin),
           (store_mod, ":random_center", ":rumor_id", ":range"),
           (val_add, ":random_center", towns_begin),
           (party_slot_ge, ":random_center", slot_town_has_tournament, 1),
           (neq, ":random_center", "$current_town"),
           (str_store_party_name, s62, ":random_center"),
           (str_store_string, s61, "@I heard that there will be a tournament in {s62} soon."),
           (assign, ":rumor_found", 1),
         (try_end),
       (else_try),
         (eq,  ":rumor_type", 1),
         (try_begin),
           (store_sub, ":range", kingdom_heroes_end, kingdom_heroes_begin),
           (store_mod, ":random_hero", ":rumor_id", ":range"),
           (val_add, ":random_hero", kingdom_heroes_begin),
           (troop_get_slot, ":personality", ":random_hero", slot_lord_reputation_type),
           (gt, ":personality", 0),
           (store_add, ":rumor_string", ":personality", "str_gossip_about_character_default"),
           (str_store_troop_name, s6, ":random_hero"),
           (str_store_string, s61, ":rumor_string"),
           (assign, ":rumor_found", 1),
         (try_end),
       (else_try),
         (eq,  ":rumor_type", 2),
         (try_begin),
           #(store_sub, ":range", trade_goods_end, trade_goods_begin),
           #(store_add, ":random_trade_good", ":rumor_id", ":cur_day"),
           #(store_mod, ":random_trade_good", ":random_trade_good", ":range"),
           #(store_add, ":random_trade_good_slot", ":random_trade_good", slot_town_trade_good_prices_begin),
           #(val_add, ":random_trade_good", trade_goods_begin),
           (store_mul, ":min_price", average_price_factor, 2),
           (val_div, ":min_price", 4),
           (assign, ":min_price_center", -1),

		   (assign, ":min_dist", 10000),
		   (party_get_position, pos0, "$g_encountered_party"),
		   (try_for_range, ":center_no", towns_begin, towns_end),
		     (neq, ":center_no", "$g_encountered_party"),
		     (party_get_position, pos1, ":center_no"),
			 (get_distance_between_positions, ":dist", pos0, pos1),
			 (lt, ":dist", ":min_dist"),
			 (assign, ":min_dist", ":dist"),
		   (try_end),
		   (store_mul, ":min_dist_mul_2", ":min_dist", 2),
		   
		   (try_for_range, ":center_no", towns_begin, towns_end),
		     (neq, ":center_no", "$g_encountered_party"),
		     (party_get_position, pos1, ":center_no"),
			 (get_distance_between_positions, ":dist", pos0, pos1),
	      	   
               (str_store_party_name, s63, ":center_no"),
			   (assign, reg7, ":dist"),
			   (assign, reg8, ":min_dist"),
			   #(display_message, "@OZANDEBUG:{s63}:{reg7}/{reg8}"),
			   (lt, ":dist", ":min_dist_mul_2"),
			 (try_for_range, ":trade_good_id", trade_goods_begin, trade_goods_end),			 
			   (store_sub, ":trade_good_slot", ":trade_good_id", trade_goods_begin),
			   (val_add, ":trade_good_slot", slot_town_trade_good_prices_begin),			   
			   (party_get_slot, ":cur_price", ":center_no", ":trade_good_slot"),
	      	   (str_store_item_name, s62, ":trade_good_id"),
               (str_store_party_name, s63, ":center_no"),
			   (assign, reg7, ":cur_price"),
			   #(display_message, "@OZANDEBUG:{s62}-{s63}:{reg7}"),
			   (lt, ":cur_price", ":min_price"),
			   (assign, ":min_price", ":cur_price"),
			   (assign, ":min_price_center", ":center_no"),
			   (assign, ":min_price_good", ":trade_good_id"),
			 (try_end),
		   (try_end),		   

           #(try_for_range, ":sub_try_no", 0, 1000),
           #  (store_sub, ":range", towns_end, towns_begin),
           #  (store_add, ":center_rumor_id", ":rumor_id", ":sub_try_no"),
           #  (store_mod, ":random_center", ":center_rumor_id", ":range"),
           #  (val_add, ":random_center", towns_begin),
           #  (neq, ":random_center", "$g_encountered_party"),
           #  (party_get_slot, ":cur_price", ":random_center", ":random_trade_good_slot"),
           #  (lt, ":cur_price", ":min_price"),
           #  (assign, ":min_price", ":cur_price"),
           #  (assign, ":min_price_center", ":random_center"),
           #(try_end),

           (ge, ":min_price_center", 0),
           #(str_store_item_name, s62, ":random_trade_good"),
		   (str_store_item_name, s62, ":min_price_good"),
           (str_store_party_name, s63, ":min_price_center"),
           (str_store_string, s61, "@I heard that one can buy {s62} very cheap at {s63}."),
           (assign, ":rumor_found", 1),
         (try_end),
       (else_try),
         (eq,  ":rumor_type", 3),
         (try_begin),
           #(store_sub, ":range", trade_goods_end, trade_goods_begin),
           #(store_add, ":random_trade_good", ":rumor_id", ":cur_day"),
           #(store_mod, ":random_trade_good", ":random_trade_good", ":range"),
           #(store_add, ":random_trade_good_slot", ":random_trade_good", slot_town_trade_good_prices_begin),
           #(val_add, ":random_trade_good", trade_goods_begin),
           (store_mul, ":max_price", average_price_factor, 4),
           (val_div, ":max_price", 3),
           (assign, ":max_price_center", -1),

		   (assign, ":min_dist", 10000),
		   (party_get_position, pos0, "$g_encountered_party"),
		   (try_for_range, ":center_no", towns_begin, towns_end),
		     (neq, ":center_no", "$g_encountered_party"),
		     (party_get_position, pos1, ":center_no"),
			 (get_distance_between_positions, ":dist", pos0, pos1),
			 (lt, ":dist", ":min_dist"),
			 (assign, ":min_dist", ":dist"),
		   (try_end),
		   (store_mul, ":min_dist_mul_3", ":min_dist", 3),
		   
		   (try_for_range, ":center_no", towns_begin, towns_end),
		     (neq, ":center_no", "$g_encountered_party"),
		     (party_get_position, pos1, ":center_no"),
			 (get_distance_between_positions, ":dist", pos0, pos1),
	      	   
               (str_store_party_name, s63, ":center_no"),
			   (assign, reg7, ":dist"),
			   (assign, reg8, ":min_dist"),
			   #(display_message, "@OZANDEBUG:{s63}:{reg7}/{reg8}"),
			   (lt, ":dist", ":min_dist_mul_3"),
			 (try_for_range, ":trade_good_id", trade_goods_begin, trade_goods_end),			 
			   (store_sub, ":trade_good_slot", ":trade_good_id", trade_goods_begin),
			   (val_add, ":trade_good_slot", slot_town_trade_good_prices_begin),			   
			   (party_get_slot, ":cur_price", ":center_no", ":trade_good_slot"),
	      	   (str_store_item_name, s62, ":trade_good_id"),
               (str_store_party_name, s63, ":center_no"),
			   (assign, reg7, ":cur_price"),
			   #(display_message, "@OZANDEBUG:{s62}-{s63}:{reg7}"),
			   (gt, ":cur_price", ":max_price"),
			   (assign, ":max_price", ":cur_price"),
			   (assign, ":max_price_center", ":center_no"),
			   (assign, ":max_price_good", ":trade_good_id"),
			 (try_end),
		   (try_end),		   

           #(try_for_range, ":sub_try_no", 0, 10),
           #  (store_sub, ":range", towns_end, towns_begin),
           #  (store_add, ":center_rumor_id", ":rumor_id", ":sub_try_no"),
           #  (store_mod, ":random_center", ":center_rumor_id", ":range"),
           #  (val_add, ":random_center", towns_begin),
           #  (neq, ":random_center", "$g_encountered_party"),
           #  (party_get_slot, ":cur_price", ":random_center", ":random_trade_good_slot"),
           #  (gt, ":cur_price", ":max_price"),
           #  (assign, ":max_price", ":cur_price"),
           #  (assign, ":max_price_center", ":random_center"),
           #(try_end),
           (ge, ":max_price_center", 0),
           #(str_store_item_name, s62, ":random_trade_good"),
		   (str_store_item_name, s62, ":max_price_good"),
           (str_store_party_name, s63, ":max_price_center"),
           (str_store_string, s61, "@I heard that they pay a very high price for {s62} at {s63}."),
           (assign, ":rumor_found", 1),
         (try_end),
       (try_end),
       (try_begin),
         (gt, ":rumor_found", 0),
         (assign, ":num_tries", 0),
       (try_end),
     (try_end),
     (assign, reg0, ":rumor_found"),
     ]),

  ("lord_comment_to_s43",
    [(store_script_param, ":lord", 1),
     (store_script_param, ":default_string", 2),

    (troop_get_slot,":reputation", ":lord", slot_lord_reputation_type),
    (val_add,":reputation", ":default_string"),
    (str_store_string,43,":reputation"),
	]),
  
#Troop Commentaries begin
  
  # script_add_log_entry
  # Input: arg1 = entry_type, arg2 = event_actor, arg3 = center_object, arg4 = troop_object, arg5 = faction_object
  # Output: none
  ("add_log_entry",
    [(store_script_param, ":entry_type", 1),
     (store_script_param, ":actor", 2),
     (store_script_param, ":center_object", 3),
     (store_script_param, ":troop_object", 4),
     (store_script_param, ":faction_object", 5),
     (assign, ":center_object_lord", -1),
     (assign, ":center_object_faction", -1),
     (assign, ":troop_object_faction", -1),
     (try_begin),
       (gt, ":center_object", 0),
       (party_get_slot, ":center_object_lord", ":center_object", slot_town_lord),
       (store_faction_of_party, ":center_object_faction", ":center_object"),
     (try_end),
     (try_begin),
       (ge, ":troop_object", 0),
       (store_troop_faction, ":troop_object_faction", ":troop_object"),
     (try_end),

     (val_add, "$num_log_entries", 1),
     
     (store_current_hours, ":entry_time"),
     (troop_set_slot, "trp_log_array_entry_type",            "$num_log_entries", ":entry_type"),
     (troop_set_slot, "trp_log_array_entry_time",            "$num_log_entries", ":entry_time"),
     (troop_set_slot, "trp_log_array_actor",                 "$num_log_entries", ":actor"),
     (troop_set_slot, "trp_log_array_center_object",         "$num_log_entries", ":center_object"),
     (troop_set_slot, "trp_log_array_center_object_lord",    "$num_log_entries", ":center_object_lord"),
     (troop_set_slot, "trp_log_array_center_object_faction", "$num_log_entries", ":center_object_faction"),
     (troop_set_slot, "trp_log_array_troop_object",          "$num_log_entries", ":troop_object"),
     (troop_set_slot, "trp_log_array_troop_object_faction",  "$num_log_entries", ":troop_object_faction"),
     (troop_set_slot, "trp_log_array_faction_object",        "$num_log_entries", ":faction_object"),

     (try_begin),
       (eq, "$cheat_mode", 1),
       (assign, reg3, "$num_log_entries"), 
       (assign, reg4, ":entry_type"),
       (display_message, "@Log entry {reg3}: type {reg4}"), 
       (try_begin),
          (gt, ":center_object", 0),
          (str_store_party_name, s4, ":center_object"),
          (display_message, "@Center: {s4}"), 
       (try_end),      
       (try_begin),
          (gt, ":troop_object", 0),
		  (str_store_troop_name, s4, ":troop_object"),
          (display_message, "@Troop: {s4}"), 
       (try_end),      
       (try_begin),
          (gt, ":center_object_lord", 0),
		  (str_store_troop_name, s4, ":center_object_lord"),
          (display_message, "@Lord: {s4}"), 
       (try_end),
     (try_end),


     (try_begin),
       (this_or_next|gt, "$g_ally_party", 0),
		(eq, ":entry_type", logent_player_participated_in_siege),
       (try_begin),
         (eq, "$cheat_mode", 1),
         (display_message, "@Ally party is present"),
       (try_end),
       (try_for_range, ":hero", kingdom_heroes_begin, kingdom_heroes_end),
         (party_count_companions_of_type, ":hero_present", "p_collective_friends", ":hero"),
         (gt, ":hero_present", 0),
         (troop_set_slot, ":hero", slot_troop_present_at_event, "$num_log_entries"),
#         (store_sub, ":skip_up_to_here", "$num_log_entries", 1),
#         (troop_set_slot, ":hero", slot_troop_last_comment_slot, ":skip_up_to_here"),
         (try_begin),
           (eq, "$cheat_mode", 1),
           (str_store_troop_name, 4, ":hero"),
           (display_message, "@{s4} is present at event"),
         (try_end),
       (try_end),
     (try_end),
     ]),

  
  # script_get_relevant_comment_for_log_entry
  # Input: arg1 = log_entry_no, 
  # Output: reg0 = comment_id; reg1 = relevance
  # Notes: 50 is the default relevance.
  # A comment with relevance less than 30 will always be skipped.
  # A comment with relevance 75 or more will never be skipped.
  # A comment with relevance 50 has about 50% chance to be skipped.
  # If there is more than one comment that is not skipped, the system will randomize their relevance values, and then choose the highest one.
  # Also note that the relevance of events decreases as time passes. After three months, relevance reduces to 50%, after 6 months, 25%, etc...
  ("get_relevant_comment_for_log_entry",
    [(store_script_param, ":log_entry_no", 1),
     
     (troop_get_slot, ":entry_type",            "trp_log_array_entry_type",            ":log_entry_no"),
     (troop_get_slot, ":entry_time",            "trp_log_array_entry_time",            ":log_entry_no"),
     (troop_get_slot, ":actor",                 "trp_log_array_actor",                 ":log_entry_no"),
##     (troop_get_slot, ":center_object",         "trp_log_array_center_object",         ":log_entry_no"),
     (troop_get_slot, ":center_object_lord",    "trp_log_array_center_object_lord",    ":log_entry_no"),
     (troop_get_slot, ":center_object_faction", "trp_log_array_center_object_faction", ":log_entry_no"),
     (troop_get_slot, ":troop_object",          "trp_log_array_troop_object",          ":log_entry_no"),
     (troop_get_slot, ":troop_object_faction",  "trp_log_array_troop_object_faction",  ":log_entry_no"),
     (troop_get_slot, ":faction_object",        "trp_log_array_faction_object",        ":log_entry_no"),

     (assign, ":relevance", 0),
     (assign, ":comment", -1), 
     (assign, ":suggested_relation_change", 0),

     (troop_get_slot, ":reputation", "$g_talk_troop", slot_lord_reputation_type),
     (store_current_hours, ":current_time"),
     (store_sub, ":entry_hours_elapsed", ":current_time", ":entry_time"),

#Post 0907 changes begin
     (assign, ":players_kingdom_relation", 0), ##the below is so that lords will not congratulate player on attacking neutrals
	 (try_begin),
       (eq, "$cheat_mode", 1),
       (try_begin),
         (assign, reg5, ":log_entry_no"),
         (assign, reg6, ":entry_type"),
         (assign, reg8, ":entry_time"),

         (gt, "$players_kingdom", 0),
         (try_begin),
            (gt, ":troop_object_faction", 0),
            (store_relation, ":players_kingdom_relation", "$players_kingdom", ":troop_object_faction"),
            (assign, reg7, ":players_kingdom_relation"),
            (display_message, "@Event #{reg5}, type {reg6}, time {reg8}: player's kingdom relation to troop object = {reg7}"),
         (else_try),
            (gt, ":center_object_faction", 0),
            (store_relation, ":players_kingdom_relation", "$players_kingdom", ":center_object_faction"),
            (assign, reg7, ":players_kingdom_relation"),
            (display_message, "@Event #{reg5}, type {reg6}, time {reg8}: player's kingdom relation to center object faction = {reg7}"),
         (else_try),
            (gt, ":faction_object", 0),
            (store_relation, ":players_kingdom_relation", "$players_kingdom", ":faction_object"),
            (assign, reg7, ":players_kingdom_relation"),

            (display_message, "@Event #{reg5}, type {reg6}, time {reg8}: player's kingdom relation to faction object = {reg7}"),
         (else_try),
            (display_message, "@Event #{reg5}, type {reg6}, time {reg8}. No relevant kingdom relation"),
         (try_end),
       (else_try),
         (display_message, "@Event #{reg5}, type {reg6}, time {reg8}. Player unaffiliated"),
       (try_end),
     (try_end),

     (try_begin),
       (eq, ":entry_type", logent_game_start),
       (eq, "$g_talk_troop_met", 0),
       (is_between, "$g_talk_troop_faction_relation", -5, 5),
       (is_between, "$g_talk_troop_relation", -5, 5),

       (assign, ":relevance", 25),
       (troop_get_slot, ":plyr_renown", "trp_player", slot_troop_renown),
#normal_banner_begin
       (troop_get_slot, ":banner", "trp_player", slot_troop_banner_scene_prop),
#custom_banner_begin
#       (troop_get_slot, ":banner", "trp_player", slot_troop_custom_banner_flag_type),
       (store_random_in_range, ":renown_check", 100, 200),
       (try_begin),
          (eq, ":reputation", lrep_none),
          (gt, "$players_kingdom", 0),
          (assign, ":comment", "str_comment_intro_liege_affiliated"),
		  (else_try),
			(gt, ":plyr_renown", ":renown_check"),
            (assign, ":comment", "str_comment_intro_famous_liege"),
            (val_add, ":comment", ":reputation"),
		  (else_try),	
#normal_banner_begin
            (gt, ":banner", 0), 
#custom_banner_begin
#          (ge, ":banner", 0), 
			(assign, ":comment", "str_comment_intro_noble_liege"),
			(val_add, ":comment", ":reputation"),
          (else_try),
            (assign, ":comment", "str_comment_intro_common_liege"),
            (val_add, ":comment", ":reputation"),									
		  (try_end),
#Post 0907 changes end

     (else_try),
       (eq, ":entry_type", logent_village_raided),
       (eq, ":actor", "trp_player"),
       (try_begin),
         (eq, ":center_object_lord", "$g_talk_troop"),
         (assign, ":relevance", 200),
         (assign, ":suggested_relation_change", -1),
         (assign, ":comment", "str_comment_you_raided_my_village_default"),
         (try_begin),
            (lt, "$g_talk_troop_faction_relation", -5),
            (this_or_next|eq, ":reputation", lrep_goodnatured),
                (eq, ":reputation", lrep_upstanding),
            (assign, ":comment", "str_comment_you_raided_my_village_enemy_benevolent"),
         (else_try),
            (lt, "$g_talk_troop_faction_relation", -5),
            (this_or_next|eq, ":reputation", lrep_cunning),
                (eq, ":reputation", lrep_selfrighteous),
            (assign, ":comment", "str_comment_you_raided_my_village_enemy_coldblooded"),
         (else_try),
            (lt, "$g_talk_troop_faction_relation", -5),
            (this_or_next|eq, ":reputation", lrep_quarrelsome),
                (eq, ":reputation", lrep_debauched),
            (assign, ":comment", "str_comment_you_raided_my_village_enemy_spiteful"),
         (else_try),
            (lt, "$g_talk_troop_faction_relation", -5),
            (assign, ":comment", "str_comment_you_raided_my_village_enemy"),
         (else_try),
            (lt, "$g_talk_troop_relation", -5),
            (this_or_next|eq, ":reputation", lrep_quarrelsome),
                (eq, ":reputation", lrep_debauched),
            (assign, ":comment", "str_comment_you_raided_my_village_unfriendly_spiteful"),
         (else_try),
            (gt, "$g_talk_troop_relation", 5),
            (assign, ":comment", "str_comment_you_raided_my_village_friendly"),
         (try_end),
       (try_end),

     (else_try),
       (eq, ":entry_type", logent_village_extorted),
       (eq, ":actor", "trp_player"),
       (try_begin),
         (eq, ":center_object_lord", "$g_talk_troop"),
         (assign, ":relevance", 30),
         (assign, ":suggested_relation_change", -1),
         (assign, ":comment", "str_comment_you_robbed_my_village_default"),
         (try_begin),
            (lt, "$g_talk_troop_faction_relation", -5),
            (this_or_next|eq, ":reputation", lrep_cunning),
                (eq, ":reputation", lrep_selfrighteous),
            (assign, ":comment", "str_comment_you_robbed_my_village_enemy_coldblooded"),
         (else_try),
            (lt, "$g_talk_troop_faction_relation", -5),
            (assign, ":comment", "str_comment_you_robbed_my_village_enemy"),
         (else_try),
            (gt, "$g_talk_troop_relation", 5),
            (this_or_next|eq, ":reputation", lrep_quarrelsome),
                (eq, ":reputation", lrep_debauched),
            (assign, ":comment", "str_comment_you_robbed_my_village_friendly_spiteful"),
         (else_try),
            (gt, "$g_talk_troop_relation", 5),
            (assign, ":comment", "str_comment_you_robbed_my_village_friendly"),
         (try_end),
       (try_end),

     (else_try),
       (eq, ":entry_type", logent_caravan_accosted),
       (eq, ":actor", "trp_player"),
       (eq, ":faction_object", "$g_talk_troop_faction"),
       (faction_slot_eq, "$g_talk_troop_faction", slot_faction_leader, "$g_talk_troop"),
       (assign, ":relevance", 30),
       (assign, ":suggested_relation_change", -1),
       (assign, ":comment", "str_comment_you_accosted_my_caravan_default"),
       (try_begin),
            (lt, "$g_talk_troop_faction_relation", -5),
            (assign, ":comment", "str_comment_you_accosted_my_caravan_enemy"),
       (try_end),

     (else_try),
       (eq, ":entry_type", logent_helped_peasants),
       (eq, ":actor", "trp_player"),
       (try_begin),
         (eq, ":center_object_lord", "$g_talk_troop"),
         (assign, ":relevance", 40),
         (assign, ":suggested_relation_change", 0),
         (try_begin),
            (this_or_next|eq, ":reputation", lrep_goodnatured),
                (eq, ":reputation", lrep_upstanding),
            (assign, ":comment", "str_comment_you_helped_villagers_benevolent"),
            (assign, ":suggested_relation_change", 1),
         (else_try),
            (gt, "$g_talk_troop_relation", 5),
            (this_or_next|eq, ":reputation", lrep_quarrelsome),
                (eq, ":reputation", lrep_debauched),
            (assign, ":comment", "str_comment_you_helped_villagers_friendly_cruel"),
            (assign, ":suggested_relation_change", -1),
         (else_try),
            (lt, "$g_talk_troop_relation", -5),
            (this_or_next|eq, ":reputation", lrep_quarrelsome),
                (eq, ":reputation", lrep_debauched),
            (assign, ":comment", "str_comment_you_helped_villagers_unfriendly_spiteful"),
            (assign, ":suggested_relation_change", -1),
         (else_try),
            (gt, "$g_talk_troop_relation", 5),
            (assign, ":comment", "str_comment_you_helped_villagers_friendly"),
         (else_try),
            (this_or_next|eq, ":reputation", lrep_selfrighteous),
                (eq, ":reputation", lrep_debauched),
            (assign, ":comment", "str_comment_you_helped_villagers_cruel"),
            (assign, ":suggested_relation_change", -1),
         (else_try),
             (assign, ":comment", "str_comment_you_helped_villagers_default"),
         (try_end),
       (try_end),

###Combat events
     (else_try),
       (eq, ":entry_type", logent_castle_captured_by_player),
       (try_begin),
         (eq, ":center_object_lord", "$g_talk_troop"),
         (this_or_next|eq, ":reputation", lrep_quarrelsome),
         (eq, ":reputation", lrep_debauched),
         (assign, ":comment", "str_comment_you_captured_my_castle_enemy_spiteful"),
         (assign, ":relevance", 200),
       (else_try),
         (eq, ":center_object_lord", "$g_talk_troop"),
         (this_or_next|eq, ":reputation", lrep_martial),
         (eq, ":reputation", lrep_goodnatured),
         (assign, ":comment", "str_comment_you_captured_my_castle_enemy_chivalrous"),
         (assign, ":relevance", 200),
       (else_try),
         (eq, ":center_object_lord", "$g_talk_troop"),
         (assign, ":comment", "str_comment_you_captured_my_castle_enemy"),
         (assign, ":relevance", 200),
       (else_try),
         (eq, "$players_kingdom", "$g_talk_troop_faction"),
         (lt, ":players_kingdom_relation", 0),
         (this_or_next|eq, ":reputation", lrep_quarrelsome),
         (eq, ":reputation", lrep_debauched),
         (assign, ":comment", "str_comment_you_captured_a_castle_allied_spiteful"),
         (assign, ":relevance", 75),
       (else_try),
         (eq, "$players_kingdom", "$g_talk_troop_faction"),
         (lt, ":players_kingdom_relation", 0),
         (gt, "$g_talk_troop_relation", 5),
         (assign, ":comment", "str_comment_you_captured_a_castle_allied_friendly"),
         (assign, ":relevance", 75),
       (else_try),
         (eq, "$players_kingdom", "$g_talk_troop_faction"),
         (lt, ":players_kingdom_relation", 0),
         (lt, "$g_talk_troop_relation", -5),
         (this_or_next|eq, ":reputation", lrep_quarrelsome),
         (eq, ":reputation", lrep_debauched),
         (assign, ":comment", "str_comment_you_captured_a_castle_allied_unfriendly_spiteful"),
         (assign, ":relevance", 75),
       (else_try),
         (eq, "$players_kingdom", "$g_talk_troop_faction"),
         (lt, ":players_kingdom_relation", 0),
         (lt, "$g_talk_troop_relation", -5),
         (assign, ":comment", "str_comment_you_captured_a_castle_allied_unfriendly"),
         (assign, ":relevance", 75),
       (else_try),
         (eq, "$players_kingdom", "$g_talk_troop_faction"),
         (lt, ":players_kingdom_relation", 0),
         (assign, ":comment", "str_comment_you_captured_a_castle_allied"),
         (assign, ":relevance", 75),
       (try_end),
       
#Post 0907 changes begin
     (else_try),
       (this_or_next|eq, ":entry_type", logent_lord_defeated_by_player),
            (eq, ":entry_type", logent_lord_helped_by_player),
       (troop_slot_eq, "$g_talk_troop", slot_troop_present_at_event, ":log_entry_no"),
       (try_begin),
           (lt, "$g_talk_troop_relation", -5),
           (this_or_next|eq, ":reputation", lrep_quarrelsome),
               (eq, ":reputation", lrep_debauched),        
           (assign, ":comment", "str_comment_we_defeated_a_lord_unfriendly_spiteful"),
           (assign, ":relevance", 150),
       (else_try),
           (lt, "$g_talk_troop_relation", -5),
           (assign, ":comment", "str_comment_we_defeated_a_lord_unfriendly"),
           (assign, ":relevance", 150),
       (else_try),
           (this_or_next|eq, ":reputation", lrep_selfrighteous),
               (eq, ":reputation", lrep_debauched),        
           (assign, ":comment", "str_comment_we_defeated_a_lord_cruel"),
           (assign, ":relevance", 150),
       (else_try),
           (eq, ":reputation", lrep_quarrelsome),        
           (assign, ":comment", "str_comment_we_defeated_a_lord_cruel"),
           (assign, ":relevance", 150),
       (else_try),
           (eq, ":reputation", lrep_upstanding),
           (assign, ":comment", "str_comment_we_defeated_a_lord_upstanding"),
           (assign, ":relevance", 150),
       (else_try),
           (assign, ":comment", "str_comment_we_defeated_a_lord_default"),
           (assign, ":relevance", 150),
       (try_end),


     (else_try),
       (this_or_next|eq, ":entry_type", logent_castle_captured_by_player),
       (eq, ":entry_type", logent_player_participated_in_siege),
       (troop_slot_eq, "$g_talk_troop", slot_troop_present_at_event, ":log_entry_no"),
       (try_begin),
           (lt, "$g_talk_troop_relation", -5),
           (this_or_next|eq, ":reputation", lrep_quarrelsome),
           (eq, ":reputation", lrep_debauched),        
           (assign, ":comment", "str_comment_we_fought_in_siege_unfriendly_spiteful"),
           (assign, ":relevance", 150),
       (else_try),
           (lt, "$g_talk_troop_relation", -5),
           (assign, ":comment", "str_comment_we_fought_in_siege_unfriendly"),
           (assign, ":relevance", 150),
       (else_try),
           (this_or_next|eq, ":reputation", lrep_selfrighteous),
           (eq, ":reputation", lrep_debauched),        
           (assign, ":comment", "str_comment_we_fought_in_siege_cruel"),
           (assign, ":relevance", 150),
       (else_try),
           (eq, ":reputation", lrep_quarrelsome),        
           (assign, ":comment", "str_comment_we_fought_in_siege_quarrelsome"),
           (assign, ":relevance", 150),
       (else_try),
           (eq, ":reputation", lrep_upstanding),
           (assign, ":comment", "str_comment_we_fought_in_siege_upstanding"),
           (assign, ":relevance", 150),
       (else_try),
           (assign, ":comment", "str_comment_we_fought_in_siege_default"),
           (assign, ":relevance", 150),
       (try_end),
       

     (else_try),
       (eq, ":entry_type", logent_player_participated_in_major_battle),
       (troop_slot_eq, "$g_talk_troop", slot_troop_present_at_event, ":log_entry_no"),
       (try_begin),
           (lt, "$g_talk_troop_relation", -5),
           (this_or_next|eq, ":reputation", lrep_quarrelsome),
               (eq, ":reputation", lrep_debauched),        
           (assign, ":comment", "str_comment_we_fought_in_major_battle_unfriendly_spiteful"),
           (assign, ":relevance", 150),
       (else_try),
           (lt, "$g_talk_troop_relation", -5),
           (assign, ":comment", "str_comment_we_fought_in_major_battle_unfriendly"),
           (assign, ":relevance", 150),
       (else_try),
           (this_or_next|eq, ":reputation", lrep_selfrighteous),
               (eq, ":reputation", lrep_debauched),        
           (assign, ":comment", "str_comment_we_fought_in_major_battle_cruel"),
           (assign, ":relevance", 150),
       (else_try),
           (eq, ":reputation", lrep_quarrelsome),        
           (assign, ":comment", "str_comment_we_fought_in_major_battle_cruel"),
           (assign, ":relevance", 150),
       (else_try),
           (eq, ":reputation", lrep_upstanding),
           (assign, ":comment", "str_comment_we_fought_in_major_battle_upstanding"),
           (assign, ":relevance", 150),
       (else_try),
           (assign, ":comment", "str_comment_we_fought_in_major_battle_default"),
           (assign, ":relevance", 150),
	   (try_end),

	   
#Post 0907 changes end

     (else_try),
       (eq, ":entry_type", logent_lord_defeated_by_player),
       (try_begin),
         (eq, ":troop_object", "$g_talk_troop"),
         (this_or_next|eq, ":reputation", lrep_martial),
             (eq, ":reputation", lrep_goodnatured),
         (assign, ":comment", "str_comment_you_defeated_me_enemy_chivalrous"),
         (assign, ":relevance", 200),
       (else_try),
         (eq, ":troop_object", "$g_talk_troop"),
         (this_or_next|eq, ":reputation", lrep_debauched),
             (eq, ":reputation", lrep_quarrelsome),
         (assign, ":comment", "str_comment_you_defeated_me_enemy_spiteful"),
         (assign, ":relevance", 200),
       (else_try),
         (eq, ":troop_object", "$g_talk_troop"),
         (assign, ":comment", "str_comment_you_defeated_me_enemy"),
         (assign, ":relevance", 200),
       (else_try),
         (eq, ":troop_object_faction", "$g_talk_troop_faction"),
         (this_or_next|eq, ":reputation", lrep_upstanding),
             (eq, ":reputation", lrep_cunning),
         (assign, ":comment", "str_comment_you_defeated_my_friend_enemy_pragmatic"),
         (assign, ":relevance", 40), #Suvorov
       (else_try),
         (eq, ":troop_object_faction", "$g_talk_troop_faction"),
         (this_or_next|eq, ":reputation", lrep_martial),
             (eq, ":reputation", lrep_goodnatured),
         (assign, ":comment", "str_comment_you_defeated_my_friend_enemy_chivalrous"),
         (assign, ":relevance", 40), #Suvorov
       (else_try),
         (eq, ":troop_object_faction", "$g_talk_troop_faction"),
         (this_or_next|eq, ":reputation", lrep_quarrelsome),
             (eq, ":reputation", lrep_debauched),
         (assign, ":comment", "str_comment_you_defeated_my_friend_enemy_spiteful"),
         (assign, ":relevance", 40), #Suvorov
       (else_try),
         (eq, ":troop_object_faction", "$g_talk_troop_faction"),
         (assign, ":comment", "str_comment_you_defeated_my_friend_enemy"),
         (assign, ":relevance", 40), #Suvorov
       (else_try),
         (eq, "$players_kingdom", "$g_talk_troop_faction"),
         (lt, ":players_kingdom_relation", 0),
         (faction_slot_eq, "$players_kingdom", slot_faction_leader, "$g_talk_troop"),
         (assign, ":comment", "str_comment_you_defeated_a_lord_allied_liege"),
         (assign, ":relevance", 70),
       (else_try),
         (eq, "$players_kingdom", "$g_talk_troop_faction"),
         (lt, ":players_kingdom_relation", 0),
         (lt, "$g_talk_troop_relation", -5),
         (this_or_next|eq, ":reputation", lrep_quarrelsome),
             (eq, ":reputation", lrep_debauched),
         (assign, ":comment", "str_comment_you_defeated_a_lord_allied_unfriendly_spiteful"),
         (assign, ":relevance", 65),
       (else_try),
         (eq, "$players_kingdom", "$g_talk_troop_faction"),
         (lt, ":players_kingdom_relation", 0),
         (this_or_next|eq, ":reputation", lrep_quarrelsome),
             (eq, ":reputation", lrep_debauched),
         (assign, ":comment", "str_comment_you_defeated_a_lord_allied_spiteful"),
         (assign, ":relevance", 65),
       (else_try),
         (eq, "$players_kingdom", "$g_talk_troop_faction"),
         (lt, ":players_kingdom_relation", 0),
         (lt, "$g_talk_troop_relation", -5),
         (this_or_next|eq, ":reputation", lrep_upstanding),
             (eq, ":reputation", lrep_martial),
         (assign, ":comment", "str_comment_you_defeated_a_lord_allied_unfriendly_chivalrous"),
         (assign, ":relevance", 65),
       (else_try),
         (eq, "$players_kingdom", "$g_talk_troop_faction"),
         (lt, ":players_kingdom_relation", 0),
         (assign, ":comment", "str_comment_you_defeated_a_lord_allied"),
         (assign, ":relevance", 65),
       (try_end),


     (else_try),
       (eq, ":entry_type", logent_lord_defeated_by_player),
       (try_begin),
         (eq, ":troop_object", "$g_talk_troop"),
         (this_or_next|eq, ":reputation", lrep_martial),
             (eq, ":reputation", lrep_goodnatured),
         (assign, ":comment", "str_comment_you_defeated_me_enemy_chivalrous"),
         (assign, ":relevance", 200),
       (else_try),
         (eq, ":troop_object", "$g_talk_troop"),
         (this_or_next|eq, ":reputation", lrep_debauched),
             (eq, ":reputation", lrep_quarrelsome),
         (assign, ":comment", "str_comment_you_defeated_me_enemy_spiteful"),
         (assign, ":relevance", 200),
       (else_try),
         (eq, ":troop_object", "$g_talk_troop"),
         (assign, ":comment", "str_comment_you_defeated_me_enemy"),
         (assign, ":relevance", 200),
       (else_try),
         (eq, ":troop_object_faction", "$g_talk_troop_faction"),
         (this_or_next|eq, ":reputation", lrep_upstanding),
             (eq, ":reputation", lrep_cunning),
         (assign, ":comment", "str_comment_you_defeated_my_friend_enemy_pragmatic"),
         (assign, ":relevance", 85),
       (else_try),
         (eq, ":troop_object_faction", "$g_talk_troop_faction"),
         (this_or_next|eq, ":reputation", lrep_martial),
             (eq, ":reputation", lrep_goodnatured),
         (assign, ":comment", "str_comment_you_defeated_my_friend_enemy_chivalrous"),
         (assign, ":relevance", 85),
       (else_try),
         (eq, ":troop_object_faction", "$g_talk_troop_faction"),
         (this_or_next|eq, ":reputation", lrep_quarrelsome),
             (eq, ":reputation", lrep_debauched),
         (assign, ":comment", "str_comment_you_defeated_my_friend_enemy_spiteful"),
         (assign, ":relevance", 85),
       (else_try),
         (eq, ":troop_object_faction", "$g_talk_troop_faction"),
         (assign, ":comment", "str_comment_you_defeated_my_friend_enemy"),
         (assign, ":relevance", 85),
       (else_try),
         (eq, "$players_kingdom", "$g_talk_troop_faction"),
         (lt, ":players_kingdom_relation", 0),
         (faction_slot_eq, "$players_kingdom", slot_faction_leader, "$g_talk_troop"),
         (assign, ":comment", "str_comment_you_defeated_a_lord_allied_liege"),
         (assign, ":relevance", 70),
       (else_try),
         (eq, "$players_kingdom", "$g_talk_troop_faction"),
         (lt, ":players_kingdom_relation", 0),
         (lt, "$g_talk_troop_relation", -5),
         (this_or_next|eq, ":reputation", lrep_quarrelsome),
             (eq, ":reputation", lrep_debauched),
         (assign, ":comment", "str_comment_you_defeated_a_lord_allied_unfriendly_spiteful"),
         (assign, ":relevance", 65),
       (else_try),
         (eq, "$players_kingdom", "$g_talk_troop_faction"),
         (lt, ":players_kingdom_relation", 0),
         (this_or_next|eq, ":reputation", lrep_quarrelsome),
             (eq, ":reputation", lrep_debauched),
         (assign, ":comment", "str_comment_you_defeated_a_lord_allied_spiteful"),
         (assign, ":relevance", 65),
       (else_try),
         (eq, "$players_kingdom", "$g_talk_troop_faction"),
         (lt, ":players_kingdom_relation", 0),
         (lt, "$g_talk_troop_relation", -5),
         (this_or_next|eq, ":reputation", lrep_upstanding),
             (eq, ":reputation", lrep_martial),
         (assign, ":comment", "str_comment_you_defeated_a_lord_allied_unfriendly_chivalrous"),
         (assign, ":relevance", 65),
       (else_try),
         (eq, "$players_kingdom", "$g_talk_troop_faction"),
         (lt, ":players_kingdom_relation", 0),
         (assign, ":comment", "str_comment_you_defeated_a_lord_allied"),
         (assign, ":relevance", 65),
       (try_end),

#Post 0907 changes begin
     (else_try),
       (eq, ":entry_type", logent_lord_helped_by_player),
       (neq, ":troop_object", "$g_talk_troop"),
       (eq, ":troop_object_faction", "$g_talk_troop_faction"),
       (try_begin),
         (lt, "$g_talk_troop_relation", -5),
         (this_or_next|eq, ":reputation", lrep_upstanding),
             (eq, ":reputation", lrep_martial),
         (assign, ":comment", "str_comment_you_helped_my_ally_unfriendly_chivalrous"),
         (assign, ":relevance", 65),
         (assign, ":suggested_relation_change", 2),
       (else_try),
         (lt, "$g_talk_troop_relation", -5),
         (assign, ":comment", "str_comment_you_helped_my_ally_unfriendly"),
         (assign, ":relevance", 0),
       (else_try),
         (eq, ":reputation", lrep_none),
         (assign, ":comment", "str_comment_you_helped_my_ally_liege"),
         (assign, ":relevance", 65),
         (assign, ":suggested_relation_change", 3),
       (else_try),
         (lt, "$g_talk_troop_relation", -5),
         (this_or_next|eq, ":reputation", lrep_quarrelsome),
             (eq, ":reputation", lrep_debauched),
         (assign, ":comment", "str_comment_you_helped_my_ally_unfriendly_spiteful"),
         (assign, ":relevance", 65),
       (else_try),
         (this_or_next|eq, ":reputation", lrep_quarrelsome),
             (eq, ":reputation", lrep_debauched),
         (assign, ":comment", "str_comment_you_helped_my_ally_spiteful"),
         (assign, ":relevance", 65),
       (else_try),
         (this_or_next|eq, ":reputation", lrep_martial),
             (eq, ":reputation", lrep_upstanding),
         (assign, ":comment", "str_comment_you_helped_my_ally_chivalrous"),
         (assign, ":relevance", 65),
         (assign, ":suggested_relation_change", 2),
       (else_try),
         (eq, ":troop_object", "$g_talk_troop"),
         (assign, ":comment", "str_comment_you_helped_my_ally_default"),
       (try_end),

#Post 0907 changes begin
     (else_try),
       (eq, ":entry_type", logent_player_defeated_by_lord),
       (troop_slot_eq, "$g_talk_troop", slot_troop_present_at_event, ":log_entry_no"),
       (try_begin),
           (lt, "$g_talk_troop_relation", -5),
           (this_or_next|eq, ":reputation", lrep_quarrelsome),
               (eq, ":reputation", lrep_debauched),        
           (assign, ":comment", "str_comment_we_were_defeated_unfriendly_spiteful"),
           (assign, ":relevance", 150),
       (else_try),
           (lt, "$g_talk_troop_relation", -5),
           (assign, ":comment", "str_comment_we_were_defeated_unfriendly"),
           (assign, ":relevance", 150),
       (else_try),
           (this_or_next|eq, ":reputation", lrep_selfrighteous),
               (eq, ":reputation", lrep_debauched),        
           (assign, ":comment", "str_comment_we_were_defeated_cruel"),
           (assign, ":relevance", 150),
       (else_try),
           (assign, ":comment", "str_comment_we_were_defeated_default"),
           (assign, ":relevance", 150),
       (try_end),

     (else_try),
       (eq, ":entry_type", logent_player_defeated_by_lord),
       (try_begin),
         (eq, ":troop_object", "$g_talk_troop"),
         (this_or_next|eq, ":reputation", lrep_quarrelsome),
                (eq, ":reputation", lrep_debauched),
         (assign, ":comment", "str_comment_I_defeated_you_enemy_spiteful"),
         (assign, ":relevance", 200),
       (else_try),
         (eq, ":troop_object", "$g_talk_troop"),
         (eq, ":reputation", lrep_martial),
         (assign, ":comment", "str_comment_I_defeated_you_enemy_chivalrous"),
         (assign, ":relevance", 200),
       (else_try),
         (eq, ":troop_object", "$g_talk_troop"),
         (this_or_next|eq, ":reputation", lrep_goodnatured),
                (eq, ":reputation", lrep_upstanding),
         (assign, ":comment", "str_comment_I_defeated_you_enemy_benevolent"),
         (assign, ":relevance", 200),
       (else_try),
         (eq, ":troop_object", "$g_talk_troop"),
         (this_or_next|eq, ":reputation", lrep_selfrighteous),
             (eq, ":reputation", lrep_cunning),
         (assign, ":comment", "str_comment_I_defeated_you_enemy_coldblooded"),
         (assign, ":relevance", 200),
       (else_try),
         (eq, ":troop_object", "$g_talk_troop"),
         (assign, ":comment", "str_comment_I_defeated_you_enemy"),
         (assign, ":relevance", 200),
       (else_try),
         (eq, ":troop_object", "$g_talk_troop"),
         (assign, ":comment", "str_comment_I_defeated_you_enemy"),
         (assign, ":relevance", 200),
       (else_try),
         (eq, "$players_kingdom", "$g_talk_troop_faction"),
         (this_or_next|eq, ":reputation", lrep_quarrelsome),
                (eq, ":reputation", lrep_debauched),
         (gt, "$g_talk_troop_relation", 5),
         (assign, ":comment", "str_comment_you_were_defeated_allied_friendly_spiteful"),
         (assign, ":relevance", 80),
       (else_try),
         (eq, "$players_kingdom", "$g_talk_troop_faction"),
         (this_or_next|eq, ":reputation", lrep_selfrighteous),
                (eq, ":reputation", lrep_debauched),
         (lt, "$g_talk_troop_relation", -5),
         (assign, ":comment", "str_comment_you_were_defeated_allied_unfriendly_cruel"),
         (assign, ":relevance", 80),
       (else_try),
         (eq, "$players_kingdom", "$g_talk_troop_faction"),
         (this_or_next|eq, ":reputation", lrep_quarrelsome),
                (eq, ":reputation", lrep_debauched),
         (le, "$g_talk_troop_relation", 5),
         (assign, ":comment", "str_comment_you_were_defeated_allied_spiteful"),
         (assign, ":relevance", 80),
       (else_try),
         (eq, "$players_kingdom", "$g_talk_troop_faction"),
         (eq, ":reputation", lrep_selfrighteous),
         (assign, ":comment", "str_comment_you_were_defeated_allied_pitiless"),
         (assign, ":relevance", 65),
       (else_try),
         (eq, "$players_kingdom", "$g_talk_troop_faction"),
         (eq, ":reputation", lrep_upstanding),
         (lt, "$g_talk_troop_relation", -15),
         (assign, ":comment", "str_comment_you_were_defeated_allied_unfriendly_upstanding"),
         (assign, ":relevance", 65),
       (else_try),
         (eq, "$players_kingdom", "$g_talk_troop_faction"),
         (lt, "$g_talk_troop_relation", -10),
         (assign, ":comment", "str_comment_you_were_defeated_allied_unfriendly"),
         (assign, ":relevance", 65),
       (else_try),
         (eq, "$players_kingdom", "$g_talk_troop_faction"),
         (assign, ":comment", "str_comment_you_were_defeated_allied"),
         (assign, ":relevance", 65),
       (try_end),
#Post 0907 changes end

#Post 0907 changes begin
     (else_try),
       (eq, ":entry_type", logent_player_retreated_from_lord),
       (troop_slot_eq, "$g_talk_troop", slot_troop_present_at_event, ":log_entry_no"),
       (try_begin),
           (lt, "$g_talk_troop_relation", -5),
           (this_or_next|eq, ":reputation", lrep_quarrelsome),
               (eq, ":reputation", lrep_debauched),        
           (assign, ":comment", "str_comment_you_abandoned_us_unfriendly_spiteful"),
           (assign, ":relevance", 150),
           (assign, ":suggested_relation_change", -5),
       (else_try),
           (lt, "$g_talk_troop_relation", -5),
           (eq, ":reputation", lrep_selfrighteous),        
           (assign, ":comment", "str_comment_you_abandoned_us_unfriendly_pitiless"),
           (assign, ":relevance", 150),
           (assign, ":suggested_relation_change", -5),
       (else_try),
           (lt, "$g_talk_troop_relation", -5),
           (this_or_next|eq, ":reputation", lrep_quarrelsome),
               (eq, ":reputation", lrep_debauched),        
           (assign, ":comment", "str_comment_you_abandoned_us_spiteful"),
           (assign, ":suggested_relation_change", -5),
       (else_try),
           (eq, ":reputation", lrep_martial),
           (assign, ":comment", "str_comment_you_abandoned_us_chivalrous"),
           (assign, ":relevance", 150),
           (assign, ":suggested_relation_change", -2),
       (else_try),
           (this_or_next|eq, ":reputation", lrep_upstanding),
               (eq, ":reputation", lrep_goodnatured),        
           (assign, ":comment", "str_comment_you_abandoned_us_benefitofdoubt"),
           (assign, ":relevance", 150),
           (assign, ":suggested_relation_change", -1),
       (else_try),
           (assign, ":comment", "str_comment_you_abandoned_us_default"),
           (assign, ":relevance", 150),
           (assign, ":suggested_relation_change", -2),
       (try_end),


#Post 0907 changes end

     (else_try),
       (this_or_next|eq, ":entry_type", logent_player_retreated_from_lord),
            (eq, ":entry_type", logent_player_retreated_from_lord_cowardly),
       (eq, ":troop_object", "$g_talk_troop"),
       (try_begin),
         (eq, "$cheat_mode", 1),
         (assign, reg7, ":entry_hours_elapsed"),
         (display_message, "@Elapsed hours: {reg7}"),
       (try_end),
       (gt, ":entry_hours_elapsed", 2),
       (try_begin),
         (this_or_next|eq, ":reputation", lrep_selfrighteous),
                (eq, ":reputation", lrep_debauched),
         (assign, ":comment", "str_comment_you_ran_from_me_enemy_spiteful"),
         (assign, ":relevance", 25),
       (else_try),
         (eq, ":reputation", lrep_martial),
         (assign, ":comment", "str_comment_you_ran_from_me_enemy_chivalrous"),
         (assign, ":relevance", 25),
       (else_try),
         (this_or_next|eq, ":reputation", lrep_goodnatured),
                (eq, ":reputation", lrep_upstanding),
         (assign, ":comment", "str_comment_you_ran_from_me_enemy_benevolent"),
         (assign, ":relevance", 25),
       (else_try),
         (eq, ":reputation", lrep_cunning),
         (assign, ":comment", "str_comment_you_ran_from_me_enemy_coldblooded"),
         (assign, ":relevance", 25),
       (else_try),
         (assign, ":comment", "str_comment_you_ran_from_me_enemy"),
         (assign, ":relevance", 25),
       (try_end),

     (else_try),
       (eq, ":entry_type", logent_player_retreated_from_lord_cowardly),
       (try_begin),
         (eq, "$players_kingdom", "$g_talk_troop_faction"),
         (neq, ":troop_object", "$g_talk_troop"),
         (lt, "$g_talk_troop_relation", 5),
         (eq, ":reputation", lrep_martial),
         (assign, ":comment", "str_comment_you_ran_from_foe_allied_chivalrous"),
         (assign, ":relevance", 80),
         (assign, ":suggested_relation_change", -3),
       (else_try),
         (eq, "$players_kingdom", "$g_talk_troop_faction"),
         (neq, ":troop_object", "$g_talk_troop"),
         (eq, ":reputation", lrep_upstanding),
         (assign, ":comment", "str_comment_you_ran_from_foe_allied_upstanding"),
         (assign, ":relevance", 80),
         (assign, ":suggested_relation_change", -1),
       (else_try),
         (eq, "$players_kingdom", "$g_talk_troop_faction"),
         (neq, ":troop_object", "$g_talk_troop"),
         (lt, "$g_talk_troop_relation", 5),
         (this_or_next|eq, ":reputation", lrep_quarrelsome),
             (eq, ":reputation", lrep_debauched),
         (assign, ":comment", "str_comment_you_ran_from_foe_allied_spiteful"),
         (assign, ":relevance", 80),
       (try_end),

     (else_try),
       (eq, ":entry_type", logent_lord_defeated_but_let_go_by_player),
       (try_begin),
         (eq, ":troop_object", "$g_talk_troop"),
         (this_or_next|eq, ":reputation", lrep_quarrelsome),
             (eq, ":reputation", lrep_debauched),
         (assign, ":comment", "str_comment_you_let_me_go_spiteful"),
         (assign, ":relevance", 300),
         (assign, ":suggested_relation_change", -15),
       (else_try),
         (eq, ":troop_object", "$g_talk_troop"),
         (ge, "$g_talk_troop_faction_relation", 0),
         (assign, ":comment", "str_comment_you_let_me_go_default"),
         (assign, ":relevance", 300),
         (assign, ":suggested_relation_change", 2),
       (else_try),
         (eq, ":troop_object", "$g_talk_troop"),
         (lt, "$g_talk_troop_faction_relation", 0),
         (this_or_next|eq, ":reputation", lrep_martial),
             (eq, ":reputation", lrep_upstanding),
         (assign, ":suggested_relation_change", 5),
         (assign, ":relevance", 300),
         (assign, ":comment", "str_comment_you_let_me_go_enemy_chivalrous"),
       (else_try),
         (eq, ":troop_object", "$g_talk_troop"),
         (lt, "$g_talk_troop_faction_relation", 0),
         (this_or_next|eq, ":reputation", lrep_selfrighteous),
             (eq, ":reputation", lrep_cunning),
         (assign, ":relevance", 300),
         (assign, ":comment", "str_comment_you_let_me_go_enemy_coldblooded"),
       (else_try),
         (eq, ":troop_object", "$g_talk_troop"),
         (lt, "$g_talk_troop_faction_relation", 0),
         (assign, ":relevance", 300),
         (assign, ":comment", "str_comment_you_let_me_go_enemy"),
         (assign, ":suggested_relation_change", 1),
       (else_try),
         (eq, "$players_kingdom", "$g_talk_troop_faction"),
         (lt, ":players_kingdom_relation", 0),
         (neq, ":troop_object", "$g_talk_troop"),
         (this_or_next|eq, ":reputation", lrep_martial),
             (eq, ":reputation", lrep_goodnatured),
         (assign, ":comment", "str_comment_you_let_go_a_lord_allied_chivalrous"),
         (assign, ":relevance", 80),
       (else_try),
         (eq, "$players_kingdom", "$g_talk_troop_faction"),
         (lt, ":players_kingdom_relation", 0),
         (neq, ":troop_object", "$g_talk_troop"),
         (eq, ":reputation", lrep_upstanding),
         (assign, ":comment", "str_comment_you_let_go_a_lord_allied_upstanding"),
         (assign, ":relevance", 80),
       (else_try),
         (eq, "$players_kingdom", "$g_talk_troop_faction"),
         (lt, ":players_kingdom_relation", 0),
         (neq, ":troop_object", "$g_talk_troop"),
         (this_or_next|eq, ":reputation", lrep_cunning),
             (eq, ":reputation", lrep_selfrighteous),
         (assign, ":comment", "str_comment_you_let_go_a_lord_allied_coldblooded"),
         (assign, ":relevance", 80),
       (else_try),
         (eq, "$players_kingdom", "$g_talk_troop_faction"),
         (lt, ":players_kingdom_relation", 0),
         (neq, ":troop_object", "$g_talk_troop"),
         (lt, "$g_talk_troop_relation", -5),
         (this_or_next|eq, ":reputation", lrep_quarrelsome),
             (eq, ":reputation", lrep_debauched),
         (assign, ":comment", "str_comment_you_let_go_a_lord_allied_unfriendly_spiteful"),
         (assign, ":relevance", 80),
       (else_try),
         (eq, "$players_kingdom", "$g_talk_troop_faction"),
         (lt, ":players_kingdom_relation", 0),
         (neq, ":troop_object", "$g_talk_troop"),
         (assign, ":comment", "str_comment_you_let_go_a_lord_allied"),
         (assign, ":relevance", 80),
       (try_end),

#Internal faction relations

     (else_try),
       (eq, ":entry_type", logent_pledged_allegiance),
       (eq, ":actor", "trp_player"),
       (try_begin),
         (eq, ":faction_object", "$g_talk_troop_faction"),
         (neq, ":troop_object", "$g_talk_troop"),
         (assign, ":relevance", 200),
         (try_begin),
            (lt, "$g_talk_troop_relation", -5),
            (eq, ":reputation", lrep_martial),
            (assign, ":comment", "str_comment_pledged_allegiance_allied_martial_unfriendly"),
         (else_try),
            (eq, ":reputation", lrep_martial),
            (assign, ":comment", "str_comment_pledged_allegiance_allied_martial"),
         (else_try),
            (lt, "$g_talk_troop_relation", -5),
            (eq, ":reputation", lrep_quarrelsome),
            (assign, ":comment", "str_comment_pledged_allegiance_allied_quarrelsome_unfriendly"),
         (else_try),
            (eq, ":reputation", lrep_quarrelsome),
            (assign, ":comment", "str_comment_pledged_allegiance_allied_quarrelsome"),
         (else_try),
            (lt, "$g_talk_troop_relation", -5),
            (eq, ":reputation", lrep_selfrighteous),
            (assign, ":comment", "str_comment_pledged_allegiance_allied_selfrighteous_unfriendly"),
         (else_try),
            (eq, ":reputation", lrep_selfrighteous),
            (assign, ":comment", "str_comment_pledged_allegiance_allied_selfrighteous"),
         (else_try),
            (lt, "$g_talk_troop_relation", -5),
            (eq, ":reputation", lrep_cunning),
            (assign, ":comment", "str_comment_pledged_allegiance_allied_cunning_unfriendly"),
         (else_try),
            (eq, ":reputation", lrep_cunning),
            (assign, ":comment", "str_comment_pledged_allegiance_allied_cunning"),
         (else_try),
            (lt, "$g_talk_troop_relation", -5),
            (eq, ":reputation", lrep_debauched),
            (assign, ":comment", "str_comment_pledged_allegiance_allied_debauched_unfriendly"),
         (else_try),
            (eq, ":reputation", lrep_debauched),
            (assign, ":comment", "str_comment_pledged_allegiance_allied_debauched"),
         (else_try),
            (lt, "$g_talk_troop_relation", -5),
            (eq, ":reputation", lrep_goodnatured),
            (assign, ":comment", "str_comment_pledged_allegiance_allied_goodnatured_unfriendly"),
         (else_try),
            (eq, ":reputation", lrep_goodnatured),
            (assign, ":comment", "str_comment_pledged_allegiance_allied_goodnatured"),
         (else_try),
            (lt, "$g_talk_troop_relation", -5),
            (eq, ":reputation", lrep_upstanding),
            (assign, ":comment", "str_comment_pledged_allegiance_allied_upstanding_unfriendly"),
         (else_try),
            (eq, ":reputation", lrep_upstanding),
            (assign, ":comment", "str_comment_pledged_allegiance_allied_upstanding"),
         (try_end),
       (try_end),


     (else_try),
       (eq, ":entry_type", logent_fief_granted_village),
       (eq, ":actor", "trp_player"),
       (try_begin),
         (eq, ":faction_object", "$g_talk_troop_faction"),
         (neq, ":troop_object", "$g_talk_troop"),
         (eq, ":faction_object", "$players_kingdom"),
         (assign, ":relevance", 110),
         (try_begin),
            (gt, "$g_talk_troop_relation", 5),
            (this_or_next|eq, ":reputation", lrep_selfrighteous),
                (eq, ":reputation", lrep_debauched),
            (assign, ":comment", "str_comment_our_king_granted_you_a_fief_allied_friendly_cruel"),
         (else_try),
            (gt, "$g_talk_troop_relation", 5),
            (this_or_next|eq, ":reputation", lrep_quarrelsome),
                (eq, ":reputation", lrep_cunning),
            (assign, ":comment", "str_comment_our_king_granted_you_a_fief_allied_friendly_cynical"),
         (else_try),
            (gt, "$g_talk_troop_relation", 5),
            (assign, ":comment", "str_comment_our_king_granted_you_a_fief_allied_friendly"),
         (else_try),
            (is_between, "$g_talk_troop_relation", -5, 5),
            (this_or_next|eq, ":reputation", lrep_quarrelsome),
                (eq, ":reputation", lrep_debauched),
            (assign, ":comment", "str_comment_our_king_granted_you_a_fief_allied_spiteful"),
            (assign, ":suggested_relation_change", -2),
         (else_try),
            (lt, "$g_talk_troop_relation", -5),
            (eq, ":reputation", lrep_upstanding),
            (assign, ":comment", "str_comment_our_king_granted_you_a_fief_allied_unfriendly_upstanding"),
         (else_try),
            (lt, "$g_talk_troop_relation", -5),
            (this_or_next|eq, ":reputation", lrep_quarrelsome),
                (eq, ":reputation", lrep_debauched),
            (assign, ":comment", "str_comment_our_king_granted_you_a_fief_allied_unfriendly_spiteful"),
         (else_try),
            (assign, ":comment", "str_comment_our_king_granted_you_a_fief_allied"),
         (try_end),
       (try_end),

     (else_try),
       (eq, ":entry_type", logent_renounced_allegiance),
       (eq, ":actor", "trp_player"),
       (try_begin),
         (eq, ":faction_object", "$g_talk_troop_faction"),
         (neq, ":troop_object", "$g_talk_troop"),
         (try_begin),
           (ge, "$g_talk_troop_faction_relation", 0),
           (neq, "$g_talk_troop_faction", "$players_kingdom"),
           (assign, ":relevance", 180),
           (try_begin),
             (gt, "$g_talk_troop_relation", 5),
             (assign, ":comment", "str_comment_you_renounced_your_alliegance_friendly"),
           (else_try),
             (ge, "$g_talk_troop_relation", 0),
             (eq, ":reputation", lrep_goodnatured),
             (assign, ":comment", "str_comment_you_renounced_your_alliegance_friendly"),
           (try_end),
         (else_try),
           (lt, "$g_talk_troop_faction_relation", 0),
           (assign, ":relevance", 300),
           (try_begin),
              (ge, "$g_talk_troop_relation", 0),
              (this_or_next|eq, ":reputation", lrep_selfrighteous),
                  (eq, ":reputation", lrep_debauched),
              (assign, ":comment", "str_comment_you_renounced_your_alliegance_unfriendly_moralizing"),
           (else_try),
              (gt, "$g_talk_troop_relation", 5),
              (this_or_next|eq, ":reputation", lrep_goodnatured),
                (eq, ":reputation", lrep_upstanding),
              (assign, ":comment", "str_comment_you_renounced_your_alliegance_enemy_friendly"),
           (else_try),
              (gt, "$g_talk_troop_relation", 5),
              (assign, ":comment", "str_comment_you_renounced_your_alliegance_enemy"),
           (else_try),
              (is_between, "$g_talk_troop_relation", -5, 5),
              (this_or_next|eq, ":reputation", lrep_quarrelsome),
                  (eq, ":reputation", lrep_debauched),
              (assign, ":comment", "str_comment_you_renounced_your_alliegance_unfriendly_spiteful"),
              (assign, ":suggested_relation_change", -2),
           (else_try),
              (lt, "$g_talk_troop_relation", -5),
              (this_or_next|eq, ":reputation", lrep_quarrelsome),
              (this_or_next|eq, ":reputation", lrep_selfrighteous),
                (eq, ":reputation", lrep_debauched),
              (assign, ":comment", "str_comment_you_renounced_your_alliegance_unfriendly_spiteful"),
           (else_try),
              (assign, ":comment", "str_comment_you_renounced_your_alliegance_default"),
           (try_end),
         (try_end),
       (try_end),


	   (try_end),
     (assign, reg0, ":comment"),
	 (assign, reg1, ":relevance"),
     (assign, reg2, ":suggested_relation_change"),
	]),

  # script_get_relevant_comment_to_s42
  # Input: none
  # Output: reg0 = 1 if comment found, 0 otherwise; s61 will contain comment string if found
  ("get_relevant_comment_to_s42",
    [
	 (troop_get_slot, ":reputation", "$g_talk_troop", slot_lord_reputation_type),
     (try_begin),
	   (eq, "$cheat_mode", 1),
       (store_add, ":rep_string", ":reputation", "str_personality_archetypes"),
       (str_store_string, s15, ":rep_string"),
       (display_message, "@Reputation type: {s15}"),
     (try_end),

     (assign, ":highest_score_so_far", 50),
     (assign, ":best_comment_so_far", -1),
     (assign, ":comment_found", 0),
     (assign, ":best_log_entry", -1),
     (assign, ":comment_relation_change", 0),
     (store_current_hours, ":current_time"),

#prevents multiple comments in conversations in same hour

#     (troop_get_slot, ":talk_troop_last_comment_time", "$g_talk_troop", slot_troop_last_comment_time),
#"$num_log_entries should also be set to one, not zero. This is included in the initialize npcs script, although could be moved to game_start
     (troop_get_slot, ":talk_troop_last_comment_slot", "$g_talk_troop", slot_troop_last_comment_slot),
     (troop_set_slot, "$g_talk_troop", slot_troop_last_comment_slot, "$num_log_entries"),

     (store_add, ":log_entries_plus_one", "$num_log_entries", 1),
     (try_for_range, ":log_entry_no", 1, ":log_entries_plus_one"),
#      It should be log entries plus one, so that the try_ sequence does not stop short of the last log entry
#      $Num_log_entries is now the number of the last log entry, which begins at "1" rather than "0"
#      This is so that (le, ":log_entry_no", ":talk_troop_last_comment_slot") works properly
     
       (troop_get_slot, ":entry_time",           "trp_log_array_entry_time",           ":log_entry_no"),
#      (val_max, ":entry_time", 1), #This is needed for pre-game events to be commented upon, if hours are used rather than the order of events
       (store_sub, ":entry_hours_elapsed", ":current_time", ":entry_time"),
       (try_begin),
         (le, ":log_entry_no", ":talk_troop_last_comment_slot"),
#         (le, ":entry_time", ":talk_troop_last_comment_time"),
         (try_begin),
           (eq, ":log_entry_no", ":talk_troop_last_comment_slot"),
           (eq, "$cheat_mode", 1),
           (assign, reg5, ":log_entry_no"),
           (display_message, "@Entries up to #{reg5} skipped"),
         (try_end),
#       I suggest using the log entry number as opposed to time so that events in the same hour can be commented upon
#       This feels more natural, for example, if there are other lords in the court when the player pledges allegiance     
       (else_try),
#         (le, ":entry_hours_elapsed", 3), #don't comment on really fresh events 
#       (else_try),
         (call_script, "script_get_relevant_comment_for_log_entry", ":log_entry_no"),
         (gt, reg1, 10),
         (assign, ":score", reg1),
         (assign, ":comment", reg0),
         (store_random_in_range, ":rand", 70, 140),
         (val_mul, ":score", ":rand"),
         (store_add, ":entry_time_score", ":entry_hours_elapsed", 500), #approx. one month 
         (val_mul, ":score", 1000),
         (val_div, ":score", ":entry_time_score"), ###Relevance decreases over time - halved after one month, one-third after two, etc
         (try_begin),
           (gt, ":score", ":highest_score_so_far"),
           (assign, ":highest_score_so_far", ":score"),
           (assign, ":best_comment_so_far",  ":comment"),
           (assign, ":best_log_entry", ":log_entry_no"),
           (assign, ":comment_relation_change", reg2),
         (try_end),
       (try_end),
     (try_end),

     (try_begin),
       (gt, ":best_comment_so_far", 0),
       (assign, ":comment_found", 1), #comment found print it to s61 now. 
       (troop_get_slot, ":actor",                 "trp_log_array_actor",                 ":best_log_entry"),
       (troop_get_slot, ":center_object",         "trp_log_array_center_object",         ":best_log_entry"),
       (troop_get_slot, ":center_object_lord",    "trp_log_array_center_object_lord",    ":best_log_entry"),
       (troop_get_slot, ":center_object_faction", "trp_log_array_center_object_faction", ":best_log_entry"),
       (troop_get_slot, ":troop_object",          "trp_log_array_troop_object",          ":best_log_entry"),
       (troop_get_slot, ":troop_object_faction",  "trp_log_array_troop_object_faction",  ":best_log_entry"),
       (troop_get_slot, ":faction_object",        "trp_log_array_faction_object",        ":best_log_entry"),
       (try_begin),
         (ge, ":actor", 0),
         (str_store_troop_name,   s50, ":actor"),
       (try_end),
       (try_begin),
         (ge, ":center_object", 0),
         (str_store_party_name,   s51, ":center_object"),
       (try_end),
       (try_begin),
         (ge, ":center_object_lord", 0),
         (str_store_troop_name,   s52, ":center_object_lord"),
       (try_end),
       (try_begin),
         (ge, ":center_object_faction", 0),
         (str_store_faction_name, s53, ":center_object_faction"),
       (try_end),
       (try_begin),
         (ge, ":troop_object", 0),
         (str_store_troop_name,   s54, ":troop_object"),
       (try_end),
       (try_begin),
         (ge, ":troop_object_faction", 0),
         (str_store_faction_name, s55, ":troop_object_faction"),
       (try_end),
       (try_begin),
         (ge, ":faction_object", 0),
         (str_store_faction_name, s56, ":faction_object"),
       (try_end),
       (str_store_string, s42, ":best_comment_so_far"),
     (try_end),
     
     (assign, reg0, ":comment_found"),
     (assign, "$log_comment_relation_change", ":comment_relation_change"),
     ]),

#Troop Commentaries end

#Rebellion changes begin
  ("find_rival_from_faction",
    [
     (store_script_param, ":source_lord", 1),
     (store_script_param, ":target_faction", 2),
	
     (assign, ":rival", 0),
     (troop_get_slot, ":source_reputation", ":source_lord", slot_lord_reputation_type),
		
     (try_for_range, ":target_lord", kingdom_heroes_begin, kingdom_heroes_end),
         (store_troop_faction, ":test_faction", ":target_lord"),
         (eq, ":test_faction", ":target_faction"),
         (troop_get_slot, ":target_reputation", ":target_lord", slot_lord_reputation_type),
		(try_begin),
             (eq, ":source_reputation", lrep_martial),
             (eq, ":target_reputation", lrep_martial),
             (assign, ":rival", ":target_lord"),
		(else_try),	
             (eq, ":source_reputation", lrep_debauched),
             (eq, ":target_reputation", lrep_upstanding),
             (assign, ":rival", ":target_lord"),
		(else_try),
             (eq, ":source_reputation", lrep_selfrighteous),
             (eq, ":target_reputation", lrep_goodnatured),
             (assign, ":rival", ":target_lord"),
		(else_try),	
             (eq, ":source_reputation", lrep_cunning),
             (eq, ":target_reputation", lrep_quarrelsome),
             (assign, ":rival", ":target_lord"),
		(else_try),	
             (eq, ":source_reputation", lrep_quarrelsome),
             (eq, ":target_reputation", lrep_cunning),
             (assign, ":rival", ":target_lord"),
		(else_try),
             (eq, ":source_reputation", lrep_goodnatured),
             (eq, ":target_reputation", lrep_selfrighteous),
             (assign, ":rival", ":target_lord"),
		(else_try),
             (eq, ":source_reputation", lrep_upstanding),
             (eq, ":target_reputation", lrep_debauched),
             (assign, ":rival", ":target_lord"),
			(try_end),
		(try_end),
	 
     (assign, reg0, ":rival"),
]),
		
		

	



  ("rebellion_arguments",
    [
     (store_script_param, ":lord", 1),
     (store_script_param, ":argument", 2),

     (assign, ":argument_value", 0),
     (troop_get_slot, ":reputation", ":lord", slot_lord_reputation_type),

     (try_begin),
         (eq, ":reputation", lrep_martial),
         (try_begin),
             (eq, ":argument", argument_claim),
             (assign, ":argument_value", 30),
         (else_try),
             (eq, ":argument", argument_ruler),
             (assign, ":argument_value", 10),
         (else_try),
             (eq, ":argument", argument_benefit),
             (assign, ":argument_value", -20),
         (else_try),
             (eq, ":argument", argument_victory),
             (assign, ":argument_value", -30),
         (try_end),
     (else_try),
        (eq, ":reputation", lrep_quarrelsome),
        (try_begin),
             (eq, ":argument", argument_claim),
             (assign, ":argument_value", -20),
		(else_try),
             (eq, ":argument", argument_ruler),
             (assign, ":argument_value", -30),
		(else_try),
             (eq, ":argument", argument_benefit),
             (assign, ":argument_value", 30),
	    (else_try),
             (eq, ":argument", argument_victory),
             (assign, ":argument_value", 10),
		(try_end),
     (else_try),
         (eq, ":reputation", lrep_selfrighteous),
         (try_begin),
             (eq, ":argument", argument_claim),
             (assign, ":argument_value", -20),
		 (else_try),
             (eq, ":argument", argument_ruler),
             (assign, ":argument_value", -30),
         (else_try),
             (eq, ":argument", argument_benefit),
             (assign, ":argument_value", 20),
		 (else_try),
             (eq, ":argument", argument_victory),
             (assign, ":argument_value", 20),
         (try_end),
     (else_try),
         (eq, ":reputation", lrep_cunning),
         (try_begin),
             (eq, ":argument", argument_claim),
             (assign, ":argument_value", -30),
         (else_try),
             (eq, ":argument", argument_ruler),
             (assign, ":argument_value", 20),
         (else_try),
             (eq, ":argument", argument_benefit),
             (assign, ":argument_value", -20),
         (else_try),
             (eq, ":argument", argument_victory),
             (assign, ":argument_value", 20),
         (try_end),
     (else_try),
         (eq, ":reputation", lrep_debauched),
         (try_begin),
             (eq, ":argument", argument_claim),
             (assign, ":argument_value", -20),
         (else_try),
             (eq, ":argument", argument_ruler),
             (assign, ":argument_value", -20),
         (else_try),
             (eq, ":argument", argument_benefit),
             (assign, ":argument_value", 20),
         (else_try),
             (eq, ":argument", argument_victory),
             (assign, ":argument_value", 10),
         (try_end),
	 (else_try),
         (eq, ":reputation", lrep_goodnatured),
         (try_begin),
             (eq, ":argument", argument_claim),
             (assign, ":argument_value", 10),
         (else_try),
             (eq, ":argument", argument_ruler),
             (assign, ":argument_value", 20),
         (else_try),
             (eq, ":argument", argument_benefit),
             (assign, ":argument_value", -15),
         (else_try),
             (eq, ":argument", argument_victory),
             (assign, ":argument_value", -25),
         (try_end),
     (else_try),
         (eq, ":reputation", lrep_upstanding),
         (try_begin),
             (eq, ":argument", argument_claim),
             (assign, ":argument_value", 10),
		 (else_try),
             (eq, ":argument", argument_ruler),
             (assign, ":argument_value", 0),
         (else_try),
             (eq, ":argument", argument_benefit),
             (assign, ":argument_value", -40),
		 (else_try),
             (eq, ":argument", argument_victory),
             (assign, ":argument_value", 10),
         (try_end),
     (try_end),
	 
     (assign, reg0, ":argument_value"),
	 	 
]),



#Rebellion changes end

  # script_get_culture_with_party_faction_for_music
  # Input: arg1 = party_no
  # Output: reg0 = culture
  ("get_culture_with_party_faction_for_music",
    [
      (store_script_param, ":party_no", 1),
      (store_faction_of_party, ":faction_no", ":party_no"),
      (try_begin),
        (this_or_next|eq, ":faction_no", "fac_player_faction"),
        (eq, ":faction_no", "fac_player_supporters_faction"),
        (assign, ":faction_no", "$players_kingdom"),
      (try_end),
      (try_begin),
        (is_between, ":party_no", centers_begin, centers_end),
        (this_or_next|eq, ":faction_no", "fac_player_supporters_faction"),
        (neg|is_between, ":faction_no", kingdoms_begin, kingdoms_end),
        (party_get_slot, ":faction_no", ":party_no", slot_center_original_faction),
      (try_end),
      (try_begin),
        (eq, ":faction_no", "fac_kingdom_1"),
        (assign, ":result", mtf_culture_1),
      (else_try),
        (eq, ":faction_no", "fac_kingdom_2"),
        (assign, ":result", mtf_culture_2),
      (else_try),
        (eq, ":faction_no", "fac_kingdom_3"),
        (assign, ":result", mtf_culture_3),
      (else_try),
        (eq, ":faction_no", "fac_kingdom_4"),
        (assign, ":result", mtf_culture_4),
      (else_try),
        (eq, ":faction_no", "fac_kingdom_5"),
        (assign, ":result", mtf_culture_5),
      (else_try),
        (this_or_next|eq, ":faction_no", "fac_outlaws"),
        (this_or_next|eq, ":faction_no", "fac_peasant_rebels"),
        (this_or_next|eq, ":faction_no", "fac_deserters"),
        (this_or_next|eq, ":faction_no", "fac_mountain_bandits"),
        (eq, ":faction_no", "fac_forest_bandits"),
        (assign, ":result", mtf_culture_6),
      (else_try),
        (assign, ":result", 0), #no culture, including player with no bindings to another kingdom
      (try_end),
      (assign, reg0, ":result"),
     ]),

  # script_music_set_situation_with_culture
  # Input: arg1 = music_situation
  # Output: none
  ("music_set_situation_with_culture",
    [
      (store_script_param, ":situation", 1),
      (assign, ":culture", 0), #no culture
      (try_begin),
        (this_or_next|eq, ":situation", mtf_sit_town),
        (this_or_next|eq, ":situation", mtf_sit_day),
        (this_or_next|eq, ":situation", mtf_sit_night),
        (this_or_next|eq, ":situation", mtf_sit_town_infiltrate),
        (eq, ":situation", mtf_sit_encounter_hostile),
        (call_script, "script_get_culture_with_party_faction_for_music", "$g_encountered_party"),
        (val_or, ":culture", reg0),
      (else_try),
        (this_or_next|eq, ":situation", mtf_sit_ambushed),
        (eq, ":situation", mtf_sit_fight),
        (call_script, "script_get_culture_with_party_faction_for_music", "$g_encountered_party"),
        (val_or, ":culture", reg0),
        (call_script, "script_get_culture_with_party_faction_for_music", "p_main_party"),
        (val_or, ":culture", reg0),
        (call_script, "script_get_closest_center", "p_main_party"),
        (call_script, "script_get_culture_with_party_faction_for_music", reg0),
        (val_or, ":culture", reg0),
      (else_try),
        (eq, ":situation", mtf_sit_travel),
        (call_script, "script_get_culture_with_party_faction_for_music", "p_main_party"),
        (val_or, ":culture", reg0),
        (call_script, "script_get_closest_center", "p_main_party"),
        (call_script, "script_get_culture_with_party_faction_for_music", reg0),
        (val_or, ":culture", reg0),
      (else_try),
        (eq, ":situation", mtf_sit_victorious),
        (call_script, "script_get_culture_with_party_faction_for_music", "p_main_party"),
        (val_or, ":culture", reg0),
      (else_try),
        (eq, ":situation", mtf_sit_killed),
        (call_script, "script_get_culture_with_party_faction_for_music", "$g_encountered_party"),
        (val_or, ":culture", reg0),
      (try_end),
      (try_begin),
        (this_or_next|eq, ":situation", mtf_sit_town),
        (eq, ":situation", mtf_sit_day),
        (try_begin),
          (is_currently_night),
          (assign, ":situation", mtf_sit_night),
        (try_end),
      (try_end),
      (music_set_situation, ":situation"),
      (music_set_culture, ":culture"),
     ]),

  
  # script_combat_music_set_situation_with_culture
  # Input: none
  # Output: none
  ("combat_music_set_situation_with_culture",
    [
      (assign, ":situation", mtf_sit_fight),
      (assign, ":num_allies", 0),
      (assign, ":num_enemies", 0),
      (try_for_agents, ":agent_no"),
        (agent_is_alive, ":agent_no"),
        (agent_is_human, ":agent_no"),
        (agent_get_troop_id, ":agent_troop_id", ":agent_no"),
        (store_character_level, ":troop_level", ":agent_troop_id"),
        (val_add,  ":troop_level", 10),
        (val_mul, ":troop_level", ":troop_level"),
        (try_begin),
          (agent_is_ally, ":agent_no"),
          (val_add, ":num_allies", ":troop_level"),
        (else_try),
          (val_add, ":num_enemies", ":troop_level"),
        (try_end),
      (try_end),
      (val_mul, ":num_allies", 4), #play ambushed music if we are 2 times outnumbered.
      (val_div, ":num_allies", 3),
      (try_begin),
        (lt, ":num_allies", ":num_enemies"),
        (assign, ":situation", mtf_sit_ambushed),
      (try_end),
      (call_script, "script_music_set_situation_with_culture", ":situation"),
     ]),

  # script_play_victorious_sound
  # Input: none
  # Output: none
  ("play_victorious_sound",
   [
     (call_script, "script_music_set_situation_with_culture", mtf_sit_victorious),
#      (play_cue_track, "track_victorious_neutral_1"),
#      (play_track, "track_victorious_neutral_1", 1),
     ]),
  
  # script_set_items_for_tournament
  # Input: arg1 = horse_chance, arg2 = lance_chance (with horse only), arg3 = sword_chance, arg4 = axe_chance, arg5 = bow_chance (without horse only), arg6 = javelin_chance (with horse only), arg7 = mounted_bow_chance (with horse only), arg8 = crossbow_sword_chance, arg9 = armor_item_begin, arg10 = helm_item_begin
  # Output: none (sets mt_arena_melee_fight items)
  ("set_items_for_tournament",
    [
      (store_script_param, ":horse_chance", 1),
      (store_script_param, ":lance_chance", 2),
      (store_script_param, ":sword_chance", 3),
      (store_script_param, ":axe_chance", 4),
      (store_script_param, ":bow_chance", 5),
      (store_script_param, ":javelin_chance", 6),
      (store_script_param, ":mounted_bow_chance", 7),
      (store_script_param, ":crossbow_sword_chance", 8),
      (store_script_param, ":armor_item_begin", 9),
      (store_script_param, ":helm_item_begin", 10),
      (store_add, ":total_chance", ":sword_chance", ":axe_chance"),
      (val_add, ":total_chance", ":crossbow_sword_chance"),
      (try_for_range, ":i_ep", 0, 32),
        (mission_tpl_entry_clear_override_items, "mt_arena_melee_fight", ":i_ep"),
        (assign, ":has_horse", 0),
        (store_div, ":cur_team", ":i_ep", 8),
        (try_begin),
          (store_random_in_range, ":random_no", 0, 100),
          (lt, ":random_no", ":horse_chance"),
          (assign, ":has_horse", 1),
          (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":i_ep", "itm_practice_horse"),
        (try_end),
        (try_begin),
          (eq, ":has_horse", 1),
          (store_add, ":cur_total_chance", ":total_chance", ":lance_chance"),
          (val_add, ":cur_total_chance", ":javelin_chance"),
          (val_add, ":cur_total_chance", ":mounted_bow_chance"),
        (else_try),
          (store_add, ":cur_total_chance", ":total_chance", ":bow_chance"),
        (try_end),
        (store_random_in_range, ":random_no", 0, ":cur_total_chance"),
        (store_add, ":cur_shield_item", "itm_arena_shield_red", ":cur_team"),
        (try_begin),
          (val_sub, ":random_no", ":sword_chance"),
          (lt, ":random_no", 0),
          (try_begin),
            (store_random_in_range, ":sub_random_no", 0, 100),
            (lt, ":sub_random_no", 50),
            (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":i_ep", "itm_practice_sword"),
            (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":i_ep", ":cur_shield_item"),
#            (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":i_ep", "itm_practice_shield"),
          (else_try),
            (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":i_ep", "itm_heavy_practice_sword"),
          (try_end),
        (else_try),
          (val_sub, ":random_no", ":axe_chance"),
          (lt, ":random_no", 0),
          (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":i_ep", "itm_practice_axe"),
          (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":i_ep", ":cur_shield_item"),
#         (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":i_ep", "itm_practice_shield"),
        (else_try),
          (val_sub, ":random_no", ":crossbow_sword_chance"),
          (lt, ":random_no", 0),
          (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":i_ep", "itm_practice_sword"),
          (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":i_ep", "itm_practice_crossbow"),
          (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":i_ep", "itm_practice_bolts"),
        (else_try),
          (eq, ":has_horse", 0),
          (val_sub, ":random_no", ":bow_chance"),
          (lt, ":random_no", 0),
          (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":i_ep", "itm_practice_bow"),
          (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":i_ep", "itm_practice_arrows"),
        (else_try),
          (eq, ":has_horse", 1),
          (val_sub, ":random_no", ":lance_chance"),
          (lt, ":random_no", 0),
          (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":i_ep", "itm_practice_lance"),
          (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":i_ep", ":cur_shield_item"),
#          (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":i_ep", "itm_practice_shield"),
        (else_try),
          (eq, ":has_horse", 1),
          (val_sub, ":random_no", ":javelin_chance"),
          (lt, ":random_no", 0),
          (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":i_ep", "itm_practice_javelin"),
          (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":i_ep", ":cur_shield_item"),
#          (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":i_ep", "itm_practice_shield"),
        (else_try),
          (eq, ":has_horse", 1),
          (val_sub, ":random_no", ":mounted_bow_chance"),
          (lt, ":random_no", 0),
          (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":i_ep", "itm_practice_bow"),
          (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":i_ep", "itm_practice_arrows"),
        (try_end),
        (try_begin),
          (ge, ":armor_item_begin", 0),
          (store_add, ":cur_armor_item", ":armor_item_begin", ":cur_team"),
          (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":i_ep", ":cur_armor_item"),
        (try_end),
        (try_begin),
          (ge, ":helm_item_begin", 0),
          (store_add, ":cur_helm_item", ":helm_item_begin", ":cur_team"),
          (mission_tpl_entry_add_override_item, "mt_arena_melee_fight", ":i_ep", ":cur_helm_item"),
        (try_end),
      (try_end),
     ]),

  
  # script_custom_battle_end
  # Input: none
  # Output: none
  ("custom_battle_end",
    [
      (assign, "$g_custom_battle_team1_death_count", 0),
      (assign, "$g_custom_battle_team2_death_count", 0),
      (try_for_agents, ":cur_agent"),
        (agent_is_human, ":cur_agent"),
        (neg|agent_is_alive, ":cur_agent"),
        (agent_get_team, ":cur_team", ":cur_agent"),
        (try_begin),
          (eq, ":cur_team", 0),
          (val_add, "$g_custom_battle_team1_death_count", 1),
        (else_try),
          (val_add, "$g_custom_battle_team2_death_count", 1),
        (try_end),
      (try_end),
      ]),  

  # script_remove_troop_from_prison
  # Input: troop_no
  # Output: none
  ("remove_troop_from_prison",
    [
      (store_script_param, ":troop_no", 1),
      (troop_set_slot, ":troop_no", slot_troop_prisoner_of_party, -1),
      (try_begin),
        (check_quest_active, "qst_rescue_lord_by_replace"),
        (quest_slot_eq, "qst_rescue_lord_by_replace", slot_quest_target_troop, ":troop_no"),        
        (call_script, "script_cancel_quest", "qst_rescue_lord_by_replace"),
      (try_end),
      (try_begin),
        (check_quest_active, "qst_deliver_message_to_prisoner_lord"),
        (quest_slot_eq, "qst_deliver_message_to_prisoner_lord", slot_quest_target_troop, ":troop_no"),
        (call_script, "script_cancel_quest", "qst_deliver_message_to_prisoner_lord"),
      (try_end),
      ]),
  # script_replace_scene_items_with_spawn_items_before_ms
  # Input: none
  # Output: none
  ("replace_scene_items_with_spawn_items_before_ms",
    [
     ]),

  # script_replace_scene_items_with_spawn_items_after_ms
  # Input: none
  # Output: none
  ("replace_scene_items_with_spawn_items_after_ms",
    [
     ]),

  # script_cf_is_melee_weapon_for_tutorial
  # Input: arg1 = item_no
  # Output: none (can fail)
  ("cf_is_melee_weapon_for_tutorial",
    [
     ]),

  # script_iterate_pointer_arrow
  # Input: none
  # Output: none
  ("iterate_pointer_arrow",
    [
      (store_mission_timer_a_msec, ":cur_time"),
      (try_begin),
        (assign, ":up_down", ":cur_time"),
        (assign, ":turn_around", ":cur_time"),
        (val_mod, ":up_down", 1080),
        (val_div, ":up_down", 3),
        (scene_prop_get_instance, ":prop_instance", "spr_pointer_arrow", 0),
        (prop_instance_get_position, pos0, ":prop_instance"),
        (position_set_z_to_ground_level, pos0),
        (position_move_z, pos0, "$g_pointer_arrow_height_adder", 1),
        (set_fixed_point_multiplier, 100),
        (val_mul, ":up_down", 100),
        (store_sin, ":up_down_sin", ":up_down"),
        (position_move_z, pos0, ":up_down_sin", 1),
        (position_move_z, pos0, 100, 1),
        (val_mod, ":turn_around", 2880),
        (val_div, ":turn_around", 8),
        (init_position, pos1),
        (position_rotate_z, pos1, ":turn_around"),
        (position_copy_rotation, pos0, pos1),
        (prop_instance_set_position, ":prop_instance", pos0),
      (try_end),
     ]),

  ##OiM Code
  # Input: 
  # Output: none
  ("naem_set_param",
    [
		(store_script_param, ":nation_num", 1),
		(assign, "$g_cur_nation", ":nation_num"),

		(store_mul, ":index", "$g_cur_nation", 3),
		
		(store_add, ":infantry_index", ":index", 0),
		(store_add, ":musketman_index", ":index", 1),
		(store_add, ":cavalry_index", ":index", 2),

		(troop_get_slot, ":count_infantry", "trp_week_limit_array", ":infantry_index"),
		(troop_get_slot, ":count_musketman", "trp_week_limit_array", ":musketman_index"),
		(troop_get_slot, ":count_cavalry", "trp_week_limit_array", ":cavalry_index"),

		(store_add, "$g_naem_count_total", ":count_infantry", ":count_musketman"),
		(val_add, "$g_naem_count_total", ":count_cavalry"),

		#(assign, reg11, "$g_naem_count_total"),
		#(display_message, "@OZANDEBUG : g_naem_count_total={reg11}"),

		(val_add, ":nation_num", merch_capitan_begin),
		(modify_visitors_at_site, "scn_meeting_scene_plain_forest"),
		(reset_visitors),
		(set_visitor,0,"trp_player"),
		(set_visitor,17,":nation_num"),
		(jump_to_scene,"scn_meeting_scene_plain_forest"),
		(change_screen_map_conversation, ":nation_num"), 
      ]),  

  # Input: none
  # Output: none
  ("get_mercenary_price",
    [ 
		(store_mul, ":troop_displace", "$g_cur_nation", 3),
		(val_add, ":troop_displace", "$g_naem_tip"),
		(troop_get_slot, ":price", "trp_merch_price_array", ":troop_displace"),
        (troop_get_slot, "$g_cur_troop", "trp_merch_array", ":troop_displace"),		

		(store_mul, ":index", "$g_cur_nation", 3),
		
		(val_add, ":index", "$g_naem_tip"),

		(troop_get_slot, ":count", "trp_week_limit_array", ":index"),

		(try_begin),
		  (eq, "$g_naem_tip", 0),
		  (assign, ":max_count", 40), #5 * 8 (it will reach full capacity in 8 weeks if nobody takes them)
		(else_try),
		  (eq, "$g_naem_tip", 1),
		  (assign, ":max_count", 40), #5 * 8 (it will reach full capacity in 8 weeks if nobody takes them)
		(else_try),
		  (eq, "$g_naem_tip", 2),
		  (assign, ":max_count", 32), #4 * 8 (it will reach full capacity in 8 weeks if nobody takes them)
		(try_end),

		(store_mul, ":count_mul_100", ":count", 100),
		(store_div, ":remaining_men_ratio", ":count_mul_100", ":max_count"),

		#(assign, reg7, ":count_mul_100"),
		#(assign, reg8, ":max_count"),
		#(assign, reg9, ":remaining_men_ratio"),
		#(display_message, "@OZANDEBUG : count_mul_100={reg7}, max_count={reg8}, remaining_men_ratio={reg9}"),

		#price inflation
		(try_begin), #if less men remained then price will be more... (max 2.4x, min 0.6x)
		  (le, ":remaining_men_ratio", 10), #0%..10%
		  (val_mul, ":price", 240),
		  (val_div, ":price", 100),
		(else_try),
		  (le, ":remaining_men_ratio", 20), #11%..20%
		  (val_mul, ":price", 190),
		  (val_div, ":price", 100),
		(else_try),
		  (le, ":remaining_men_ratio", 30), #21%..30%
		  (val_mul, ":price", 150),
		  (val_div, ":price", 100),
		(else_try),
		  (le, ":remaining_men_ratio", 40), #31%..40%
		  (val_mul, ":price", 120),
		  (val_div, ":price", 100),
		(else_try),
		  (le, ":remaining_men_ratio", 50), #41%..50%
		  (val_mul, ":price", 100),
		  (val_div, ":price", 100),
		(else_try),
		  (le, ":remaining_men_ratio", 60), #51%..60%
		  (val_mul, ":price", 90),
		  (val_div, ":price", 100),
		(else_try),
		  (le, ":remaining_men_ratio", 70), #61%..70%
		  (val_mul, ":price", 80),
		  (val_div, ":price", 100),
		(else_try),
		  (le, ":remaining_men_ratio", 80), #71%..80%
		  (val_mul, ":price", 70),
		  (val_div, ":price", 100),
		(else_try),                         #81%..100%
		  (val_mul, ":price", 60),
		  (val_div, ":price", 100),
		(try_end),

		(call_script, "script_recalculate_price", ":price"),
		(assign, "$g_naem_price", reg10),
		(store_troop_gold,"$g_trp_player_gold","trp_player"),		
    ]),  
	  
	  
# Input: none
  # Output: none
  ("naem_get_items",
    [
      (store_script_param, ":item_param", 1),
	  (store_script_param, ":item_variant", 2),
	  (store_mul, ":item_displace", "$g_cur_nation", 30),
	  (store_mul, ":displ", ":item_param", 3),
	  (val_add, ":item_displace", ":displ"),
	  (val_add, ":item_displace", "$g_naem_tip"),
	  (troop_get_slot, ":old_item",  "trp_cur_merch_arms_array", ":item_displace"),
	  (store_mul, ":displace", "$g_cur_nation", 50),
	  (store_mul, ":displ", ":item_param", 5),
	  (val_add, ":displace", ":displ"),
	  (val_add, ":displace", ":item_variant"),
	  (troop_get_slot, ":price", "trp_merch_arms_price_array", ":displace"),
	  (troop_get_slot, ":item", "trp_merch_arms_array", ":displace"),
	  (try_begin),
	    (eq, ":old_item", ":item"),
		(assign, reg0, 0),
      (else_try),
	    (str_store_item_name, s20 , ":item"),
		(val_mul, ":price", "$g_count_naem"),
		(call_script, "script_recalculate_price", ":price"),
		(assign, reg1, reg10),
		(assign, reg6, reg1),
		(str_store_string, s22, "@, {reg6} dinarov "),		
		(call_script, "script_cf_oim_item_cant_use_mounted_to_s5", ":item"), 
		(str_store_string, s21, "@ {s20}, {s22} {s5}"),
		(store_troop_gold,"$g_trp_player_gold","trp_player"),
		(assign, reg0, 0),
		(try_begin),
		  (ge, "$g_trp_player_gold", reg1),
		  (gt, "$g_count_naem", 0),
		  (assign, reg0, 1),
		(try_end),
      (try_end),
    ]), 
	  
	  
  # script_set_merch_limit  
  # Input: no
  # Output: no
  ("set_merch_limit",
    [
		(try_for_range, ":nation_num", nation_begin, nation_end),
		  (store_mul, ":index", ":nation_num", 3),
		  (store_add, ":infantry_index", ":index", 0),
		  (store_add, ":musketman_index", ":index", 1),
		  (store_add, ":cavalry_index", ":index", 2),
		  (troop_get_slot, ":num_infantry", "trp_week_limit_array", ":infantry_index"),
		  (troop_get_slot, ":num_musketman", "trp_week_limit_array", ":musketman_index"),
		  (troop_get_slot, ":num_cavalry", "trp_week_limit_array", ":cavalry_index"),

		  (val_add, ":num_infantry", 5),
		  (val_clamp,":num_infantry", 0, 40), #5 * 8 (it will reach full capacity in 8 weeks if nobody takes them)
		  (val_add, ":num_musketman", 5),
		  (val_clamp,":num_musketman", 0, 40), #5 * 8 (it will reach full capacity in 8 weeks if nobody takes them)
		  (val_add, ":num_cavalry", 4),
		  (val_clamp,":num_cavalry", 0, 32), #4 * 8 (it will reach full capacity in 8 weeks if nobody takes them)

		  (troop_set_slot, "trp_week_limit_array", ":infantry_index", ":num_infantry"),
		  (troop_set_slot, "trp_week_limit_array", ":musketman_index", ":num_musketman"),
		  (troop_set_slot, "trp_week_limit_array", ":cavalry_index", ":num_cavalry"),
		(try_end),
    ]),
	 
  # script_set_merch_item_parametres  
  # Input: no
  # Output: no
  ("set_merch_item_parametres",
    [
		(try_for_range, ":nation_num", nation_begin, nation_end),
		  (store_mul, ":index", ":nation_num", 3),
		  (store_add, ":infantry_index", ":index", 0),
		  (store_add, ":musketman_index", ":index", 1),
		  (store_add, ":cavalry_index", ":index", 2),
		  (troop_set_slot, "trp_week_limit_array", ":infantry_index", 15), #3 x 5 (initial starting is like 3 weeks past and nobody took them)
		  (troop_set_slot, "trp_week_limit_array", ":musketman_index", 15), #3 x 5 (initial starting is like 3 weeks past and nobody took them)
		  (troop_set_slot, "trp_week_limit_array", ":cavalry_index", 12), #3 x 4 (initial starting is like 3 weeks past and nobody took them)
		(try_end),	

		(troop_set_slot, "trp_merch_type_price_array", 0, 30), #was 10
		(troop_set_slot, "trp_merch_type_price_array", 1, 30), #was 12
		(troop_set_slot, "trp_merch_type_price_array", 2, 30), #was 17 (horse prices already increased no need to make cavalry men very expensive)
		(try_for_range, ":num", 0, 150),
			(troop_set_slot, "trp_cur_merch_arms_array", ":num", 0),
			(troop_set_slot, "trp_cur_merch_arms_price_array", ":num", 0),
		(try_end),

		# turok head alternatives
		(troop_set_slot, "trp_merch_arms_array", 0, "itm_tatar_oglan_hat"),
		(troop_set_slot, "trp_merch_arms_price_array", 0, 14),
		(troop_set_slot, "trp_merch_arms_array", 1, "itm_misurka_s_barmizoy_pure"),
		(troop_set_slot, "trp_merch_arms_price_array", 1, 50),
		(troop_set_slot, "trp_merch_arms_array", 2, "itm_tatar_misurka"),
		(troop_set_slot, "trp_merch_arms_price_array", 2, 103),
		(troop_set_slot, "trp_merch_arms_array", 3, "itm_tatar_helmet_b"),
		(troop_set_slot, "trp_merch_arms_price_array", 3, 172),
		(troop_set_slot, "trp_merch_arms_array", 4, "itm_tatar_han_helmet"),
		(troop_set_slot, "trp_merch_arms_price_array", 4, 222),
		# turok tulub alternatives
		(troop_set_slot, "trp_merch_arms_array", 5, "itm_tatar_halat_b"),
		(troop_set_slot, "trp_merch_arms_price_array", 5, 33),
		(troop_set_slot, "trp_merch_arms_array", 6, "itm_tatar_steg_halat_b"),
		(troop_set_slot, "trp_merch_arms_price_array", 6, 67),
		(troop_set_slot, "trp_merch_arms_array", 7, "itm_tatar_seymen_armor"),
		(troop_set_slot, "trp_merch_arms_price_array", 7, 223),
		(troop_set_slot, "trp_merch_arms_array", 8, "itm_tatar_bahter_b"),
		(troop_set_slot, "trp_merch_arms_price_array", 8, 244),
		(troop_set_slot, "trp_merch_arms_array", 9, "itm_tatar_yushman"),
		(troop_set_slot, "trp_merch_arms_price_array", 9, 577),
		# turok horse alternatives
		(troop_set_slot, "trp_merch_arms_array", 10, "itm_speshitsa"),
		(troop_set_slot, "trp_merch_arms_price_array", 10, 0),
		(troop_set_slot, "trp_merch_arms_array", 11, "itm_saddle_horse_c"),
		(troop_set_slot, "trp_merch_arms_price_array", 11, 120),
		(troop_set_slot, "trp_merch_arms_array", 12, "itm_steppe_horse"),
		(troop_set_slot, "trp_merch_arms_price_array", 12, 160),
		(troop_set_slot, "trp_merch_arms_array", 13, "itm_courser"),
		(troop_set_slot, "trp_merch_arms_price_array", 13, 240),
		(troop_set_slot, "trp_merch_arms_array", 14, "itm_rich_horse"),
		(troop_set_slot, "trp_merch_arms_price_array", 14, 420),
		# turok boots alternatives
		(troop_set_slot, "trp_merch_arms_array", 15, "itm_selo_boots"),
		(troop_set_slot, "trp_merch_arms_price_array", 15, 1),
		(troop_set_slot, "trp_merch_arms_array", 16, "itm_sapogi"),
		(troop_set_slot, "trp_merch_arms_price_array", 16, 10),
		(troop_set_slot, "trp_merch_arms_array", 17, "itm_kozak_boots"),
		(troop_set_slot, "trp_merch_arms_price_array", 17, 16),
		(troop_set_slot, "trp_merch_arms_array", 18, "itm_good_sapogi"),
		(troop_set_slot, "trp_merch_arms_price_array", 18, 30),
		(troop_set_slot, "trp_merch_arms_array", 19, "itm_cavalry_boots"),
		(troop_set_slot, "trp_merch_arms_price_array", 19, 48),
		# turok arms hot alternatives
		(troop_set_slot, "trp_merch_arms_array", 20, "itm_luk_b"),
		(troop_set_slot, "trp_merch_arms_price_array", 20, 80),
		(troop_set_slot, "trp_merch_arms_array", 21, "itm_kompozit_bow_b"),
		(troop_set_slot, "trp_merch_arms_price_array", 21, 200),
		(troop_set_slot, "trp_merch_arms_array", 22, "itm_kompozit_bow"),
		(troop_set_slot, "trp_merch_arms_price_array", 22, 300),
		(troop_set_slot, "trp_merch_arms_array", 23, "itm_turk_musket_koleso"),
		(troop_set_slot, "trp_merch_arms_price_array", 23, 300),
		(troop_set_slot, "trp_merch_arms_array", 24, "itm_turk_musket"),
		(troop_set_slot, "trp_merch_arms_price_array", 24, 530),
		# turok arms cold alternatives
		(troop_set_slot, "trp_merch_arms_array", 25, "itm_sablya_turk_c"),
		(troop_set_slot, "trp_merch_arms_price_array", 25, 250),
		(troop_set_slot, "trp_merch_arms_array", 26, "itm_yatagan_rich"),
		(troop_set_slot, "trp_merch_arms_price_array", 26, 110),
		(troop_set_slot, "trp_merch_arms_array", 27, "itm_sablya_tatar_a"),
		(troop_set_slot, "trp_merch_arms_price_array", 27, 200),
		(troop_set_slot, "trp_merch_arms_array", 28, "itm_klevetz_good"),
		(troop_set_slot, "trp_merch_arms_price_array", 28, 250),
		(troop_set_slot, "trp_merch_arms_array", 29, "itm_cavalry_pika_b"),
		(troop_set_slot, "trp_merch_arms_price_array", 29, 60),
		# turok shield alternatives
		(troop_set_slot, "trp_merch_arms_array", 30, "itm_round_shield_d"),
		(troop_set_slot, "trp_merch_arms_price_array", 30, 14),
		(troop_set_slot, "trp_merch_arms_array", 31, "itm_round_shield_c"),
		(troop_set_slot, "trp_merch_arms_price_array", 31, 30),
		(troop_set_slot, "trp_merch_arms_array", 32, "itm_round_shield_b"),
		(troop_set_slot, "trp_merch_arms_price_array", 32, 63),
		(troop_set_slot, "trp_merch_arms_array", 33, "itm_round_shield"),
		(troop_set_slot, "trp_merch_arms_price_array", 33, 120),
		(troop_set_slot, "trp_merch_arms_array", 34, "itm_round_shield_steel_b"),
		(troop_set_slot, "trp_merch_arms_price_array", 34, 232),
		# turok snaryad alternatives
		(troop_set_slot, "trp_merch_arms_array", 35, "itm_khergit_arrows"),
		(troop_set_slot, "trp_merch_arms_price_array", 35, 0),
		(troop_set_slot, "trp_merch_arms_array", 36, "itm_barbed_arrows"),
		(troop_set_slot, "trp_merch_arms_price_array", 36, 0),
		(troop_set_slot, "trp_merch_arms_array", 37, "itm_bodkin_arrows"),
		(troop_set_slot, "trp_merch_arms_price_array", 37, 0),
		(troop_set_slot, "trp_merch_arms_array", 38, "itm_bolts"),
		(troop_set_slot, "trp_merch_arms_price_array", 38, 0),
		(troop_set_slot, "trp_merch_arms_array", 39, "itm_bolts"),
		(troop_set_slot, "trp_merch_arms_price_array", 39, 0),
		# turok gloves alternatives
		(troop_set_slot, "trp_merch_arms_array", 40, "itm_infantry_gloves"),
		(troop_set_slot, "trp_merch_arms_price_array", 40, 10),
		(troop_set_slot, "trp_merch_arms_array", 41, "itm_leather_gloves"),
		(troop_set_slot, "trp_merch_arms_price_array", 41, 21),
		(troop_set_slot, "trp_merch_arms_array", 42, "itm_cavalry_gloves"),
		(troop_set_slot, "trp_merch_arms_price_array", 42, 80),
		(troop_set_slot, "trp_merch_arms_array", 43, "itm_armor_gauntlets"),
		(troop_set_slot, "trp_merch_arms_price_array", 43, 225),
		(troop_set_slot, "trp_merch_arms_array", 44, "itm_reytar_gauntlets"),
		(troop_set_slot, "trp_merch_arms_price_array", 44, 350),
		# turok rhand alternatives
		(troop_set_slot, "trp_merch_arms_array", 45, "itm_good_kopyo"),
		(troop_set_slot, "trp_merch_arms_price_array", 45, 2),
		(troop_set_slot, "trp_merch_arms_array", 46, "itm_good_kopyo"),
		(troop_set_slot, "trp_merch_arms_price_array", 46, 2),
		(troop_set_slot, "trp_merch_arms_array", 47, "itm_good_kopyo"),
		(troop_set_slot, "trp_merch_arms_price_array", 47, 2),
		(troop_set_slot, "trp_merch_arms_array", 48, "itm_good_kopyo"),
		(troop_set_slot, "trp_merch_arms_price_array", 48, 2),
		(troop_set_slot, "trp_merch_arms_array", 49, "itm_good_kopyo"),
		(troop_set_slot, "trp_merch_arms_price_array", 49, 2),

		# kazak head alternatives
		(troop_set_slot, "trp_merch_arms_array", 50, "itm_nichego"),
		(troop_set_slot, "trp_merch_arms_price_array", 50, 0),
		(troop_set_slot, "trp_merch_arms_array", 51, "itm_serduk_shapka"),
		(troop_set_slot, "trp_merch_arms_price_array", 51, 16),
		(troop_set_slot, "trp_merch_arms_array", 52, "itm_misurka_s_barmizoy_pure"),
		(troop_set_slot, "trp_merch_arms_price_array", 52, 50),
		(troop_set_slot, "trp_merch_arms_array", 53, "itm_misurka_s_barmizoy_b"),
		(troop_set_slot, "trp_merch_arms_price_array", 53, 89),
		(troop_set_slot, "trp_merch_arms_array", 54, "itm_kozacka_shapka_s_misurkoy"),
		(troop_set_slot, "trp_merch_arms_price_array", 54, 117),
		# kazak tulub alternatives
		(troop_set_slot, "trp_merch_arms_array", 55, "itm_kozak_jupan_usileniy"),
		(troop_set_slot, "trp_merch_arms_price_array", 55, 60),
		(troop_set_slot, "trp_merch_arms_array", 56, "itm_cavalry_koja_kurtka"),
		(troop_set_slot, "trp_merch_arms_price_array", 56, 113),
		(troop_set_slot, "trp_merch_arms_array", 57, "itm_serduk_jupan"),
		(troop_set_slot, "trp_merch_arms_price_array", 57, 120),
		(troop_set_slot, "trp_merch_arms_array", 58, "itm_kolchuga"),
		(troop_set_slot, "trp_merch_arms_price_array", 58, 244),
		(troop_set_slot, "trp_merch_arms_array", 59, "itm_kozak_jupan_na_kolchuge"),
		(troop_set_slot, "trp_merch_arms_price_array", 59, 405),
		# kazak horse alternatives
		(troop_set_slot, "trp_merch_arms_array", 60, "itm_speshitsa"),
		(troop_set_slot, "trp_merch_arms_price_array", 60, 0),
		(troop_set_slot, "trp_merch_arms_array", 61, "itm_saddle_horse_c"),
		(troop_set_slot, "trp_merch_arms_price_array", 61, 60), #kazak horses are 50% cheap
		(troop_set_slot, "trp_merch_arms_array", 62, "itm_steppe_horse_b"),
		(troop_set_slot, "trp_merch_arms_price_array", 62, 80), #kazak horses are 50% cheap
		(troop_set_slot, "trp_merch_arms_array", 63, "itm_courser"),
		(troop_set_slot, "trp_merch_arms_price_array", 63, 120), #kazak horses are 50% cheap
		(troop_set_slot, "trp_merch_arms_array", 64, "itm_rich_horse_b"),
		(troop_set_slot, "trp_merch_arms_price_array", 64, 210), #kazak horses are 50% cheap
		# kazak boots alternatives
		(troop_set_slot, "trp_merch_arms_array", 65, "itm_sapogi"),
		(troop_set_slot, "trp_merch_arms_price_array", 65, 6),
		(troop_set_slot, "trp_merch_arms_array", 66, "itm_kozak_boots"),
		(troop_set_slot, "trp_merch_arms_price_array", 66, 16),
		(troop_set_slot, "trp_merch_arms_array", 67, "itm_good_sapogi"),
		(troop_set_slot, "trp_merch_arms_price_array", 67, 30),
		(troop_set_slot, "trp_merch_arms_array", 68, "itm_cavalry_boots"),
		(troop_set_slot, "trp_merch_arms_price_array", 68, 45),
		(troop_set_slot, "trp_merch_arms_array", 69, "itm_good_cavalry_boots"),
		(troop_set_slot, "trp_merch_arms_price_array", 69, 65),
		# kazak arms hot alternatives
		(troop_set_slot, "trp_merch_arms_array", 70, "itm_pistol_b"),
		(troop_set_slot, "trp_merch_arms_price_array", 70, 60),
		(troop_set_slot, "trp_merch_arms_array", 71, "itm_karabin_batarey"),
		(troop_set_slot, "trp_merch_arms_price_array", 71, 480),
		(troop_set_slot, "trp_merch_arms_array", 72, "itm_good_pistol_c"),
		(troop_set_slot, "trp_merch_arms_price_array", 72, 340),
		(troop_set_slot, "trp_merch_arms_array", 73, "itm_turk_musket_koleso"),
		(troop_set_slot, "trp_merch_arms_price_array", 73, 300),
		(troop_set_slot, "trp_merch_arms_array", 74, "itm_turk_musket_b"),
		(troop_set_slot, "trp_merch_arms_price_array", 74, 600),
		# kazak arms cold alternatives
		(troop_set_slot, "trp_merch_arms_array", 75, "itm_good_kopyo"),
		(troop_set_slot, "trp_merch_arms_price_array", 75, 45),
		(troop_set_slot, "trp_merch_arms_array", 76, "itm_sablya_turk_b"),
		(troop_set_slot, "trp_merch_arms_price_array", 76, 290),
		(troop_set_slot, "trp_merch_arms_array", 77, "itm_kozacka_pika"),
		(troop_set_slot, "trp_merch_arms_price_array", 77, 90),
		(troop_set_slot, "trp_merch_arms_array", 78, "itm_kozak_good_shablya"),
		(troop_set_slot, "trp_merch_arms_price_array", 78, 215),
		(troop_set_slot, "trp_merch_arms_array", 79, "itm_shestoper"),
		(troop_set_slot, "trp_merch_arms_price_array", 79, 340),
		# kazak shield alternatives
		(troop_set_slot, "trp_merch_arms_array", 80, -1),
		(troop_set_slot, "trp_merch_arms_price_array", 80, 2),
		(troop_set_slot, "trp_merch_arms_array", 81, -1),
		(troop_set_slot, "trp_merch_arms_price_array", 81, 1),
		(troop_set_slot, "trp_merch_arms_array", 82, -1),
		(troop_set_slot, "trp_merch_arms_price_array", 82, 2),
		(troop_set_slot, "trp_merch_arms_array", 83, -1),
		(troop_set_slot, "trp_merch_arms_price_array", 83, 1),
		(troop_set_slot, "trp_merch_arms_array", 84, -1),
		(troop_set_slot, "trp_merch_arms_price_array", 84, 2),
		# kazak snaryad alternatives
		(troop_set_slot, "trp_merch_arms_array", 85, "itm_bolts"),
		(troop_set_slot, "trp_merch_arms_price_array", 85, 0),
		(troop_set_slot, "trp_merch_arms_array", 86, "itm_bolts"),
		(troop_set_slot, "trp_merch_arms_price_array", 86, 0),
		(troop_set_slot, "trp_merch_arms_array", 87, "itm_steel_bolts"),
		(troop_set_slot, "trp_merch_arms_price_array", 87, 0),
		(troop_set_slot, "trp_merch_arms_array", 88, "itm_steel_bolts"),
		(troop_set_slot, "trp_merch_arms_price_array", 88, 0),
		(troop_set_slot, "trp_merch_arms_array", 89, "itm_steel_bolts"),
		(troop_set_slot, "trp_merch_arms_price_array", 89, 0),
		# kazak gloves alternatives
		(troop_set_slot, "trp_merch_arms_array", 90, "itm_infantry_gloves"),
		(troop_set_slot, "trp_merch_arms_price_array", 90, 10),
		(troop_set_slot, "trp_merch_arms_array", 91, "itm_leather_gloves"),
		(troop_set_slot, "trp_merch_arms_price_array", 91, 21),
		(troop_set_slot, "trp_merch_arms_array", 92, "itm_cavalry_gloves"),
		(troop_set_slot, "trp_merch_arms_price_array", 92, 80),
		(troop_set_slot, "trp_merch_arms_array", 93, "itm_armor_gauntlets"),
		(troop_set_slot, "trp_merch_arms_price_array", 93, 225),
		(troop_set_slot, "trp_merch_arms_array", 94, "itm_reytar_gauntlets"),
		(troop_set_slot, "trp_merch_arms_price_array", 94, 350),
		# kazak rhand alternatives
		(troop_set_slot, "trp_merch_arms_array", 95, "itm_good_kopyo"),
		(troop_set_slot, "trp_merch_arms_price_array", 95, 2),
		(troop_set_slot, "trp_merch_arms_array", 96, "itm_good_kopyo"),
		(troop_set_slot, "trp_merch_arms_price_array", 96, 2),
		(troop_set_slot, "trp_merch_arms_array", 97, "itm_good_kopyo"),
		(troop_set_slot, "trp_merch_arms_price_array", 97, 2),
		(troop_set_slot, "trp_merch_arms_array", 98, "itm_good_kopyo"),
		(troop_set_slot, "trp_merch_arms_price_array", 98, 2),
		(troop_set_slot, "trp_merch_arms_array", 99, "itm_good_kopyo"),
		(troop_set_slot, "trp_merch_arms_price_array", 99, 2),

		# polyak head alternatives
		(troop_set_slot, "trp_merch_arms_array", 100, "itm_poland_mehova_shapka"),
		(troop_set_slot, "trp_merch_arms_price_array", 100, 10),
		(troop_set_slot, "trp_merch_arms_array", 101,"itm_misurka_s_barmizoy_pure"),
		(troop_set_slot, "trp_merch_arms_price_array", 101, 60),
		(troop_set_slot, "trp_merch_arms_array", 102, "itm_misurka_s_barmizoy_rich"),
		(troop_set_slot, "trp_merch_arms_price_array", 102, 112),
		(troop_set_slot, "trp_merch_arms_array", 103, "itm_kabasset"),
		(troop_set_slot, "trp_merch_arms_price_array", 103, 178),
		(troop_set_slot, "trp_merch_arms_array", 104, "itm_poland_gusar_helmet"),
		(troop_set_slot, "trp_merch_arms_price_array", 104, 302),
		# polyak tulub alternatives
		(troop_set_slot, "trp_merch_arms_array", 105, "itm_poland_dragoon_uniform"),
		(troop_set_slot, "trp_merch_arms_price_array", 105, 20),
		(troop_set_slot, "trp_merch_arms_array", 106,"itm_koja_kurtka_s_podbivom"),
		(troop_set_slot, "trp_merch_arms_price_array", 106, 124),
		(troop_set_slot, "trp_merch_arms_array", 107, "itm_kolchuga_panzernika"),
		(troop_set_slot, "trp_merch_arms_price_array", 107, 252),
		(troop_set_slot, "trp_merch_arms_array", 108, "itm_poland_uniforma_german_line"),
		(troop_set_slot, "trp_merch_arms_price_array", 108, 540),
		(troop_set_slot, "trp_merch_arms_array", 109, "itm_poland_gusar_panzer_bez_kril"),
		(troop_set_slot, "trp_merch_arms_price_array", 109, 550),
		# polyak horse alternatives
		(troop_set_slot, "trp_merch_arms_array", 110, "itm_speshitsa"),
		(troop_set_slot, "trp_merch_arms_price_array", 110, 0),
		(troop_set_slot, "trp_merch_arms_array", 111,"itm_saddle_horse_b"),
		(troop_set_slot, "trp_merch_arms_price_array", 111, 100),
		(troop_set_slot, "trp_merch_arms_array", 112, "itm_hunter"),
		(troop_set_slot, "trp_merch_arms_price_array", 112, 160),
		(troop_set_slot, "trp_merch_arms_array", 113, "itm_courser"),
		(troop_set_slot, "trp_merch_arms_price_array", 113, 240),
		(troop_set_slot, "trp_merch_arms_array", 114, "itm_rich_horse"),
		(troop_set_slot, "trp_merch_arms_price_array", 114, 420),
		# polyak boots alternatives
		(troop_set_slot, "trp_merch_arms_array", 115, "itm_sapogi"),
		(troop_set_slot, "trp_merch_arms_price_array", 115, 10),
		(troop_set_slot, "trp_merch_arms_array", 116, "itm_kozak_boots"),
		(troop_set_slot, "trp_merch_arms_price_array", 116, 16),
		(troop_set_slot, "trp_merch_arms_array", 117, "itm_old_cavalry_boots"),
		(troop_set_slot, "trp_merch_arms_price_array", 117, 25),
		(troop_set_slot, "trp_merch_arms_array", 118, "itm_cavalry_boots"),
		(troop_set_slot, "trp_merch_arms_price_array", 118, 43),
		(troop_set_slot, "trp_merch_arms_array", 119, "itm_cavalry_boots"),
		(troop_set_slot, "trp_merch_arms_price_array", 119, 60),
		# polyak arms hot alternatives
		(troop_set_slot, "trp_merch_arms_array", 120, "itm_pistol"),
		(troop_set_slot, "trp_merch_arms_price_array", 120, 50),
		(troop_set_slot, "trp_merch_arms_array", 121, "itm_kompozit_bow_b"),
		(troop_set_slot, "trp_merch_arms_price_array", 121, 260),
		(troop_set_slot, "trp_merch_arms_array", 122, "itm_karabin_good"),
		(troop_set_slot, "trp_merch_arms_price_array", 122, 340),
		(troop_set_slot, "trp_merch_arms_array", 123, "itm_good_pistol_b"),
		(troop_set_slot, "trp_merch_arms_price_array", 123, 310),
		(troop_set_slot, "trp_merch_arms_array", 124, "itm_good_musket"),
		(troop_set_slot, "trp_merch_arms_price_array", 124, 360),
		# polyak arms cold alternatives
		(troop_set_slot, "trp_merch_arms_array", 125, "itm_good_shpaga_c"),
		(troop_set_slot, "trp_merch_arms_price_array", 125, 215),
		(troop_set_slot, "trp_merch_arms_array", 126, "itm_cavalry_pika_a"),
		(troop_set_slot, "trp_merch_arms_price_array", 126, 50),
		(troop_set_slot, "trp_merch_arms_array", 127, "itm_prosta_pike"),
		(troop_set_slot, "trp_merch_arms_price_array", 127, 60),
		(troop_set_slot, "trp_merch_arms_array", 128, "itm_toporik_rich"),
		(troop_set_slot, "trp_merch_arms_price_array", 128, 170),
		(troop_set_slot, "trp_merch_arms_array", 129, "itm_sablya_a"),
		(troop_set_slot, "trp_merch_arms_price_array", 129, 260),
		# polyak shield alternatives
		(troop_set_slot, "trp_merch_arms_array", 130, "itm_shield"),
		(troop_set_slot, "trp_merch_arms_price_array", 130, 10),
		(troop_set_slot, "trp_merch_arms_array", 131, "itm_round_shield_d"),
		(troop_set_slot, "trp_merch_arms_price_array", 131, 31),
		(troop_set_slot, "trp_merch_arms_array", 132, "itm_round_shield_c"),
		(troop_set_slot, "trp_merch_arms_price_array", 132, 74),
		(troop_set_slot, "trp_merch_arms_array", 133, "itm_round_shield_b"),
		(troop_set_slot, "trp_merch_arms_price_array", 133, 134),
		(troop_set_slot, "trp_merch_arms_array", 134, "itm_round_shield"),
		(troop_set_slot, "trp_merch_arms_price_array", 134, 330),
		# polyak snaryad alternatives
		(troop_set_slot, "trp_merch_arms_array", 135, "itm_bolts"),
		(troop_set_slot, "trp_merch_arms_price_array", 135, 0),
		(troop_set_slot, "trp_merch_arms_array", 136, "itm_barbed_arrows"),
		(troop_set_slot, "trp_merch_arms_price_array", 136, 0),
		(troop_set_slot, "trp_merch_arms_array", 137, "itm_bolts"),
		(troop_set_slot, "trp_merch_arms_price_array", 137, 0),
		(troop_set_slot, "trp_merch_arms_array", 138, "itm_bolts"),
		(troop_set_slot, "trp_merch_arms_price_array", 138, 0),
		(troop_set_slot, "trp_merch_arms_array", 139, "itm_steel_bolts"),
		(troop_set_slot, "trp_merch_arms_price_array", 139, 0),
		# polyak gloves alternatives
		(troop_set_slot, "trp_merch_arms_array", 140,"itm_infantry_gloves"),
		(troop_set_slot, "trp_merch_arms_price_array", 140, 10),
		(troop_set_slot, "trp_merch_arms_array", 141, "itm_leather_gloves"),
		(troop_set_slot, "trp_merch_arms_price_array", 141, 21),
		(troop_set_slot, "trp_merch_arms_array", 142, "itm_cavalry_gloves"),
		(troop_set_slot, "trp_merch_arms_price_array", 142, 80),
		(troop_set_slot, "trp_merch_arms_array", 143, "itm_armor_gauntlets"),
		(troop_set_slot, "trp_merch_arms_price_array", 143, 225),
		(troop_set_slot, "trp_merch_arms_array", 144, "itm_reytar_gauntlets"),
		(troop_set_slot, "trp_merch_arms_price_array", 144, 350),
		# polyak rhand alternatives
		(troop_set_slot, "trp_merch_arms_array", 145, "itm_good_kopyo"),
		(troop_set_slot, "trp_merch_arms_price_array", 145, 2),
		(troop_set_slot, "trp_merch_arms_array", 146, "itm_good_kopyo"),
		(troop_set_slot, "trp_merch_arms_price_array", 146, 2),
		(troop_set_slot, "trp_merch_arms_array", 147, "itm_good_kopyo"),
		(troop_set_slot, "trp_merch_arms_price_array", 147, 2),
		(troop_set_slot, "trp_merch_arms_array", 148, "itm_good_kopyo"),
		(troop_set_slot, "trp_merch_arms_price_array", 148, 2),
		(troop_set_slot, "trp_merch_arms_array", 149, "itm_good_kopyo"),
		(troop_set_slot, "trp_merch_arms_price_array", 149, 2),

		# sved head alternatives
		(troop_set_slot, "trp_merch_arms_array", 150, "itm_evropa_shapka"),
		(troop_set_slot, "trp_merch_arms_price_array", 150, 10),
		(troop_set_slot, "trp_merch_arms_array", 151,"itm_morion"),
		(troop_set_slot, "trp_merch_arms_price_array", 151, 100),
		(troop_set_slot, "trp_merch_arms_array", 152, "itm_kabasset"),
		(troop_set_slot, "trp_merch_arms_price_array", 152, 140),
		(troop_set_slot, "trp_merch_arms_array", 153, "itm_morion_good"),
		(troop_set_slot, "trp_merch_arms_price_array", 153, 205),
		(troop_set_slot, "trp_merch_arms_array", 154, "itm_black_reytar_helmet"),
		(troop_set_slot, "trp_merch_arms_price_array", 154, 274),
		# sved tulub alternatives
		(troop_set_slot, "trp_merch_arms_array", 155, "itm_evropa_gvardia_uniforma"),
		(troop_set_slot, "trp_merch_arms_price_array", 155, 50),
		(troop_set_slot, "trp_merch_arms_array", 156,"itm_kirasa"),
		(troop_set_slot, "trp_merch_arms_price_array", 156, 151),
		(troop_set_slot, "trp_merch_arms_array", 157, "itm_simple_reytar_armor"),
		(troop_set_slot, "trp_merch_arms_price_array", 157, 378),
		(troop_set_slot, "trp_merch_arms_array", 158, "itm_merc_pika_uniforma_b"),
		(troop_set_slot, "trp_merch_arms_price_array", 158, 560),
		(troop_set_slot, "trp_merch_arms_array", 159, "itm_dospeh"),
		(troop_set_slot, "trp_merch_arms_price_array", 159, 760),
		# sved horse alternatives
		(troop_set_slot, "trp_merch_arms_array", 160, "itm_speshitsa"),
		(troop_set_slot, "trp_merch_arms_price_array", 160, 0),
		(troop_set_slot, "trp_merch_arms_array", 161, "itm_saddle_horse"),
		(troop_set_slot, "trp_merch_arms_price_array", 161, 100),
		(troop_set_slot, "trp_merch_arms_array", 162, "itm_saddle_horse_c"),
		(troop_set_slot, "trp_merch_arms_price_array", 162, 120),
		(troop_set_slot, "trp_merch_arms_array", 163, "itm_hunter"),
		(troop_set_slot, "trp_merch_arms_price_array", 163, 240),
		(troop_set_slot, "trp_merch_arms_array", 164, "itm_rich_horse_b"),
		(troop_set_slot, "trp_merch_arms_price_array", 164, 420),
		# sved boots alternatives
		(troop_set_slot, "trp_merch_arms_array", 165, "itm_selo_boots"),
		(troop_set_slot, "trp_merch_arms_price_array", 165, 5),
		(troop_set_slot, "trp_merch_arms_array", 166, "itm_infantry_boots"),
		(troop_set_slot, "trp_merch_arms_price_array", 166, 16),
		(troop_set_slot, "trp_merch_arms_array", 167, "itm_old_cavalry_botforts"),
		(troop_set_slot, "trp_merch_arms_price_array", 167, 30),
		(troop_set_slot, "trp_merch_arms_array", 168, "itm_cavalry_botforts"),
		(troop_set_slot, "trp_merch_arms_price_array", 168, 45),
		(troop_set_slot, "trp_merch_arms_array", 169, "itm_good_cavalry_botforts"),
		(troop_set_slot, "trp_merch_arms_price_array", 169, 70),
		# sved arms hot alternatives
		(troop_set_slot, "trp_merch_arms_array", 170, "itm_old_pistol"),
		(troop_set_slot, "trp_merch_arms_price_array", 170, 55),
		(troop_set_slot, "trp_merch_arms_array", 171, "itm_good_pistol"),
		(troop_set_slot, "trp_merch_arms_price_array", 171, 360),
		(troop_set_slot, "trp_merch_arms_array", 172, "itm_karabin_batarey"),
		(troop_set_slot, "trp_merch_arms_price_array", 172, 480),
		(troop_set_slot, "trp_merch_arms_array", 173, "itm_good_musket"),
		(troop_set_slot, "trp_merch_arms_price_array", 173, 360),
		(troop_set_slot, "trp_merch_arms_array", 174, "itm_mushket_udarniy"),
		(troop_set_slot, "trp_merch_arms_price_array", 174, 600),
		# sved arms cold alternatives
		(troop_set_slot, "trp_merch_arms_array", 175, "itm_good_shpaga_d"),
		(troop_set_slot, "trp_merch_arms_price_array", 175, 260),
		(troop_set_slot, "trp_merch_arms_array", 176, "itm_good_pike"),
		(troop_set_slot, "trp_merch_arms_price_array", 176, 100),
		(troop_set_slot, "trp_merch_arms_array", 177, "itm_good_palash"),
		(troop_set_slot, "trp_merch_arms_price_array", 177, 350),
		(troop_set_slot, "trp_merch_arms_array", 178, "itm_chekan"),
		(troop_set_slot, "trp_merch_arms_price_array", 178, 190),
		(troop_set_slot, "trp_merch_arms_array", 179, "itm_alebarda"),
		(troop_set_slot, "trp_merch_arms_price_array", 179, 450),
		# sved shield alternatives
		(troop_set_slot, "trp_merch_arms_array", 180, -1),
		(troop_set_slot, "trp_merch_arms_price_array", 180, 2),
		(troop_set_slot, "trp_merch_arms_array", 181, -1),
		(troop_set_slot, "trp_merch_arms_price_array", 181, 1),
		(troop_set_slot, "trp_merch_arms_array", 182, -1),
		(troop_set_slot, "trp_merch_arms_price_array", 182, 2),
		(troop_set_slot, "trp_merch_arms_array", 183, -1),
		(troop_set_slot, "trp_merch_arms_price_array", 183, 1),
		(troop_set_slot, "trp_merch_arms_array", 184, -1),
		(troop_set_slot, "trp_merch_arms_price_array", 184, 2),
		# sved snaryad alternatives
		(troop_set_slot, "trp_merch_arms_array", 185, "itm_bolts"),
		(troop_set_slot, "trp_merch_arms_price_array", 185, 0),
		(troop_set_slot, "trp_merch_arms_array", 186, "itm_steel_bolts"),
		(troop_set_slot, "trp_merch_arms_price_array", 186, 0),
		(troop_set_slot, "trp_merch_arms_array", 187, "itm_bolts"),
		(troop_set_slot, "trp_merch_arms_price_array", 187, 0),
		(troop_set_slot, "trp_merch_arms_array", 188, "itm_bolts"),
		(troop_set_slot, "trp_merch_arms_price_array", 188, 0),
		(troop_set_slot, "trp_merch_arms_array", 189, "itm_steel_bolts"),
		(troop_set_slot, "trp_merch_arms_price_array", 189, 0),
		# sved gloves alternatives
		(troop_set_slot, "trp_merch_arms_array", 190, "itm_infantry_gloves"),
		(troop_set_slot, "trp_merch_arms_price_array", 190, 10),
		(troop_set_slot, "trp_merch_arms_array", 191, "itm_leather_gloves"),
		(troop_set_slot, "trp_merch_arms_price_array", 191, 21),
		(troop_set_slot, "trp_merch_arms_array", 192, "itm_cavalry_gloves"),
		(troop_set_slot, "trp_merch_arms_price_array", 192, 80),
		(troop_set_slot, "trp_merch_arms_array", 193, "itm_armor_gauntlets"),
		(troop_set_slot, "trp_merch_arms_price_array", 193, 225),
		(troop_set_slot, "trp_merch_arms_array", 194, "itm_black_reytar_gauntlets"),
		(troop_set_slot, "trp_merch_arms_price_array", 194, 350),
		# sved rhand alternatives
		(troop_set_slot, "trp_merch_arms_array", 195, "itm_good_kopyo"),
		(troop_set_slot, "trp_merch_arms_price_array", 195, 2),
		(troop_set_slot, "trp_merch_arms_array", 196, "itm_good_kopyo"),
		(troop_set_slot, "trp_merch_arms_price_array", 196, 2),
		(troop_set_slot, "trp_merch_arms_array", 197, "itm_good_kopyo"),
		(troop_set_slot, "trp_merch_arms_price_array", 197, 2),
		(troop_set_slot, "trp_merch_arms_array", 198, "itm_good_kopyo"),
		(troop_set_slot, "trp_merch_arms_price_array", 198, 2),
		(troop_set_slot, "trp_merch_arms_array", 199, "itm_good_kopyo"),
		(troop_set_slot, "trp_merch_arms_price_array", 199, 2),

		# moskov head alternatives
		(troop_set_slot, "trp_merch_arms_array", 200, "itm_streletz_shapka_c"),
		(troop_set_slot, "trp_merch_arms_price_array", 200, 14),
		(troop_set_slot, "trp_merch_arms_array", 201,"itm_shapka_bumajna_a"),
		(troop_set_slot, "trp_merch_arms_price_array", 201, 50),
		(troop_set_slot, "trp_merch_arms_array", 202, "itm_misurka_s_barmizoy_c"),
		(troop_set_slot, "trp_merch_arms_price_array", 202, 100),
		(troop_set_slot, "trp_merch_arms_array", 203, "itm_shishak"),
		(troop_set_slot, "trp_merch_arms_price_array", 203, 121),
		(troop_set_slot, "trp_merch_arms_array", 204, "itm_mosk_shishak"),
		(troop_set_slot, "trp_merch_arms_price_array", 204, 183),
		# moskov tulub alternatives
		(troop_set_slot, "trp_merch_arms_array", 205, "itm_moskow_tulup_c"),
		(troop_set_slot, "trp_merch_arms_price_array", 205, 230),
		(troop_set_slot, "trp_merch_arms_array", 206,"itm_mosk_bahter_b"),
		(troop_set_slot, "trp_merch_arms_price_array", 206, 200),
		(troop_set_slot, "trp_merch_arms_array", 207, "itm_moskow_reytar_armor"),
		(troop_set_slot, "trp_merch_arms_price_array", 207, 266),
		(troop_set_slot, "trp_merch_arms_array", 208, "itm_moskow_kuyak"),
		(troop_set_slot, "trp_merch_arms_price_array", 208, 441),
		(troop_set_slot, "trp_merch_arms_array", 209, "itm_moskow_boyar_uniform"),
		(troop_set_slot, "trp_merch_arms_price_array", 209, 600),
		# moskov horse alternatives
		(troop_set_slot, "trp_merch_arms_array", 210, "itm_speshitsa"),
		(troop_set_slot, "trp_merch_arms_price_array", 210, 0),
		(troop_set_slot, "trp_merch_arms_array", 211,"itm_saddle_horse"),
		(troop_set_slot, "trp_merch_arms_price_array", 211, 100),
		(troop_set_slot, "trp_merch_arms_array", 212, "itm_saddle_horse_c"),
		(troop_set_slot, "trp_merch_arms_price_array", 212, 120),
		(troop_set_slot, "trp_merch_arms_array", 213, "itm_hunter"),
		(troop_set_slot, "trp_merch_arms_price_array", 213, 240),
		(troop_set_slot, "trp_merch_arms_array", 214, "itm_rich_horse"),
		(troop_set_slot, "trp_merch_arms_price_array", 214, 420),
		# moskov boots alternatives
		(troop_set_slot, "trp_merch_arms_array", 215, "itm_selo_boots"),
		(troop_set_slot, "trp_merch_arms_price_array", 215, 5),
		(troop_set_slot, "trp_merch_arms_array", 216, "itm_sapogi"),
		(troop_set_slot, "trp_merch_arms_price_array", 216, 12),
		(troop_set_slot, "trp_merch_arms_array", 217, "itm_kozak_boots"),
		(troop_set_slot, "trp_merch_arms_price_array", 217, 20),
		(troop_set_slot, "trp_merch_arms_array", 218, "itm_good_sapogi"),
		(troop_set_slot, "trp_merch_arms_price_array", 218, 40),
		(troop_set_slot, "trp_merch_arms_array", 219, "itm_good_cavalry_boots"),
		(troop_set_slot, "trp_merch_arms_price_array", 219, 60),
		# moskov arms hot alternatives
		(troop_set_slot, "trp_merch_arms_array", 220, "itm_pistol_b"),
		(troop_set_slot, "trp_merch_arms_price_array", 220, 60),
		(troop_set_slot, "trp_merch_arms_array", 221, "itm_karabin"),
		(troop_set_slot, "trp_merch_arms_price_array", 221, 250),
		(troop_set_slot, "trp_merch_arms_array", 222, "itm_kompozit_bow_b"),
		(troop_set_slot, "trp_merch_arms_price_array", 222, 260),
		(troop_set_slot, "trp_merch_arms_array", 223, "itm_musket"),
		(troop_set_slot, "trp_merch_arms_price_array", 223, 270),
		(troop_set_slot, "trp_merch_arms_array", 224, "itm_good_musket"),
		(troop_set_slot, "trp_merch_arms_price_array", 224, 360),
		# moskov arms cold alternatives
		(troop_set_slot, "trp_merch_arms_array", 225, "itm_toporik_good"),
		(troop_set_slot, "trp_merch_arms_price_array", 225, 150),
		(troop_set_slot, "trp_merch_arms_array", 226, "itm_sablya_b"),
		(troop_set_slot, "trp_merch_arms_price_array", 226, 235),
		(troop_set_slot, "trp_merch_arms_array", 227, "itm_sovnya"),
		(troop_set_slot, "trp_merch_arms_price_array", 227, 250),
		(troop_set_slot, "trp_merch_arms_array", 228, "itm_palitza"),
		(troop_set_slot, "trp_merch_arms_price_array", 228, 330),
		(troop_set_slot, "trp_merch_arms_array", 229, "itm_berdish"),
		(troop_set_slot, "trp_merch_arms_price_array", 229, 250),
		# moskov shield alternatives
		(troop_set_slot, "trp_merch_arms_array", 230, "itm_round_shield_d"),
		(troop_set_slot, "trp_merch_arms_price_array", 230, 8),
		(troop_set_slot, "trp_merch_arms_array", 231, "itm_round_shield_c"),
		(troop_set_slot, "trp_merch_arms_price_array", 231, 24),
		(troop_set_slot, "trp_merch_arms_array", 232, "itm_round_shield_b"),
		(troop_set_slot, "trp_merch_arms_price_array", 232, 63),
		(troop_set_slot, "trp_merch_arms_array", 233, "itm_round_shield"),
		(troop_set_slot, "trp_merch_arms_price_array", 233, 120),
		(troop_set_slot, "trp_merch_arms_array", 234, "itm_round_shield_steel_b"),
		(troop_set_slot, "trp_merch_arms_price_array", 234, 300),
		# moskov snaryad alternatives
		(troop_set_slot, "trp_merch_arms_array", 235, "itm_bolts"),
		(troop_set_slot, "trp_merch_arms_price_array", 235, 0),
		(troop_set_slot, "trp_merch_arms_array", 236, "itm_bolts"),
		(troop_set_slot, "trp_merch_arms_price_array", 236, 0),
		(troop_set_slot, "trp_merch_arms_array", 237, "itm_bodkin_arrows"),
		(troop_set_slot, "trp_merch_arms_price_array", 237, 0),
		(troop_set_slot, "trp_merch_arms_array", 238, "itm_bolts"),
		(troop_set_slot, "trp_merch_arms_price_array", 238, 0),
		(troop_set_slot, "trp_merch_arms_array", 239, "itm_bolts"),
		(troop_set_slot, "trp_merch_arms_price_array", 239, 0),
		# moskov gloves alternatives
		(troop_set_slot, "trp_merch_arms_array", 240, "itm_infantry_gloves"),
		(troop_set_slot, "trp_merch_arms_price_array", 240, 10),
		(troop_set_slot, "trp_merch_arms_array", 241, "itm_leather_gloves"),
		(troop_set_slot, "trp_merch_arms_price_array", 241, 21),
		(troop_set_slot, "trp_merch_arms_array", 242, "itm_cavalry_gloves"),
		(troop_set_slot, "trp_merch_arms_price_array", 242, 80),
		(troop_set_slot, "trp_merch_arms_array", 243, "itm_armor_gauntlets"),
		(troop_set_slot, "trp_merch_arms_price_array", 243, 225),
		(troop_set_slot, "trp_merch_arms_array", 244, "itm_reytar_gauntlets"),
		(troop_set_slot, "trp_merch_arms_price_array", 244, 350),
		# moscow rhand alternatives
		(troop_set_slot, "trp_merch_arms_array", 245, "itm_good_kopyo"),
		(troop_set_slot, "trp_merch_arms_price_array", 245, 2),
		(troop_set_slot, "trp_merch_arms_array", 246, "itm_good_kopyo"),
		(troop_set_slot, "trp_merch_arms_price_array", 246, 2),
		(troop_set_slot, "trp_merch_arms_array", 247, "itm_good_kopyo"),
		(troop_set_slot, "trp_merch_arms_price_array", 247, 2),
		(troop_set_slot, "trp_merch_arms_array", 248, "itm_good_kopyo"),
		(troop_set_slot, "trp_merch_arms_price_array", 248, 2),
		(troop_set_slot, "trp_merch_arms_array", 249, "itm_good_kopyo"),
		(troop_set_slot, "trp_merch_arms_price_array", 249, 2),		



		# turok head first
		(troop_set_slot, "trp_cur_merch_arms_array", 0, "itm_tatar_man_hat"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 0, 3),
		(troop_set_slot, "trp_cur_merch_arms_array", 1, "itm_tatar_man_hat"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 1, 3),
		(troop_set_slot, "trp_cur_merch_arms_array", 2, "itm_tatar_man_hat"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 2, 3),
		# turok tulub first
		(troop_set_slot, "trp_cur_merch_arms_array", 3, "itm_tatar_halat_pure_a"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 3, 8),
		(troop_set_slot, "trp_cur_merch_arms_array", 4, "itm_tatar_halat_pure_a"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 4, 8),
		(troop_set_slot, "trp_cur_merch_arms_array", 5, "itm_tatar_halat_pure_a"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 5, 8),
		# turok horse first 
		(troop_set_slot, "trp_cur_merch_arms_array", 6, "itm_speshitsa"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 6, 0),
		(troop_set_slot, "trp_cur_merch_arms_array", 7, "itm_speshitsa"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 7, 0),
		(troop_set_slot, "trp_cur_merch_arms_array", 8, "itm_sumpter_horse"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 8, 60),
		# turok boots first 
		(troop_set_slot, "trp_cur_merch_arms_array", 9, "itm_janissary_tapki"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 9, 1),
		(troop_set_slot, "trp_cur_merch_arms_array", 10, "itm_janissary_tapki"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 10, 1),
		(troop_set_slot, "trp_cur_merch_arms_array", 11, "itm_janissary_tapki"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 11, 1),
		# turok arms hot first 
		(troop_set_slot, "trp_cur_merch_arms_array", 12, 0),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 12, 0),
		(troop_set_slot, "trp_cur_merch_arms_array", 13, "itm_turk_musket_fitil_a"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 13, 20),
		(troop_set_slot, "trp_cur_merch_arms_array", 14, "itm_luk"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 14, 10),
		# turok arms cold first 
		(troop_set_slot, "trp_cur_merch_arms_array", 15, "itm_sablya_turk_pure_a"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 15, 10),
		(troop_set_slot, "trp_cur_merch_arms_array", 16, "itm_yatagan_a"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 16, 9),
		(troop_set_slot, "trp_cur_merch_arms_array", 17, "itm_yatagan_a"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 17, 9),
		# turok shield first 
		(troop_set_slot, "trp_cur_merch_arms_array", 18, "itm_shield"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 18, 5),
		(troop_set_slot, "trp_cur_merch_arms_array", 19, 0),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 19, 0),
		(troop_set_slot, "trp_cur_merch_arms_array", 20, 0),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 20, 0),
		# turok snaryad first 
		(troop_set_slot, "trp_cur_merch_arms_array", 21, 0),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 21, 0),
		(troop_set_slot, "trp_cur_merch_arms_array", 22, "itm_cartridges"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 22, 1),
		(troop_set_slot, "trp_cur_merch_arms_array", 23, "itm_arrows"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 23, 1),
		# turok glooves first
		(troop_set_slot, "trp_cur_merch_arms_array", 24, 0),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 24, 0),
		(troop_set_slot, "trp_cur_merch_arms_array", 25, 0),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 25, 0),
		(troop_set_slot, "trp_cur_merch_arms_array", 26, 0),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 26, 0),
		# turok rhand first
		(troop_set_slot, "trp_cur_merch_arms_array", 27, 0),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 27, 0),
		(troop_set_slot, "trp_cur_merch_arms_array", 28, 0),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 28, 0),
		(troop_set_slot, "trp_cur_merch_arms_array", 29, 0),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 29, 0),		



		# kazak head first
		(troop_set_slot, "trp_cur_merch_arms_array", 30, "itm_kozak_prosta_shapka"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 30, 3),
		(troop_set_slot, "trp_cur_merch_arms_array", 31, "itm_kozak_prosta_shapka"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 31, 3),
		(troop_set_slot, "trp_cur_merch_arms_array", 32, "itm_kozak_prosta_shapka"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 32, 3),
		# kazak tulub first
		(troop_set_slot, "trp_cur_merch_arms_array", 33, "itm_prostoy_jupan"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 33, 20),
		(troop_set_slot, "trp_cur_merch_arms_array", 34, "itm_prostoy_jupan_b"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 34, 15),
		(troop_set_slot, "trp_cur_merch_arms_array", 35, "itm_prostoy_jupan_b"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 35, 15),
		# kazak horse first 
		(troop_set_slot, "trp_cur_merch_arms_array", 36, "itm_speshitsa"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 36, 0),
		(troop_set_slot, "trp_cur_merch_arms_array", 37, "itm_speshitsa"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 37, 0),
		(troop_set_slot, "trp_cur_merch_arms_array", 38, "itm_sumpter_horse"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 38, 60),
		# kazak boots first 
		(troop_set_slot, "trp_cur_merch_arms_array", 39, "itm_selo_boots"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 39, 1),
		(troop_set_slot, "trp_cur_merch_arms_array", 40, "itm_selo_boots"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 40, 1),
		(troop_set_slot, "trp_cur_merch_arms_array", 41, "itm_selo_boots"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 41, 1),
		# kazak arms hot first 
		(troop_set_slot, "trp_cur_merch_arms_array", 42, 0),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 42, 0),
		(troop_set_slot, "trp_cur_merch_arms_array", 43, "itm_pistol"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 43, 10),
		(troop_set_slot, "trp_cur_merch_arms_array", 44, "itm_karabin_old_b"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 44, 8),
		# kazak arms cold first 
		(troop_set_slot, "trp_cur_merch_arms_array", 45, "itm_kozak_shablya"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 45, 8),
		(troop_set_slot, "trp_cur_merch_arms_array", 46, "itm_kopyo"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 46, 6),
		(troop_set_slot, "trp_cur_merch_arms_array", 47, "itm_sablya_pure_d"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 47, 7),
		# kazak shield first 
		(troop_set_slot, "trp_cur_merch_arms_array", 48, 0),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 48, 0),
		(troop_set_slot, "trp_cur_merch_arms_array", 49, 0),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 49, 0),
		(troop_set_slot, "trp_cur_merch_arms_array", 50, 0),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 50, 0),
		# kazak snaryad first 
		(troop_set_slot, "trp_cur_merch_arms_array", 51, 0),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 51, 0),
		(troop_set_slot, "trp_cur_merch_arms_array", 52, itm_cartridges),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 52, 1),
		(troop_set_slot, "trp_cur_merch_arms_array", 53, "itm_cartridges"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 53, 1),
		# kazak glooves first
		(troop_set_slot, "trp_cur_merch_arms_array", 54, 0),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 54, 0),
		(troop_set_slot, "trp_cur_merch_arms_array", 55, 0),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 55, 0),
		(troop_set_slot, "trp_cur_merch_arms_array", 56, 0),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 56, 0),
		# kazak rhand first
		(troop_set_slot, "trp_cur_merch_arms_array", 57, 0),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 57, 0),
		(troop_set_slot, "trp_cur_merch_arms_array", 58, 0),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 58, 0),
		(troop_set_slot, "trp_cur_merch_arms_array", 59, 0),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 59, 0),	
		
		
			
		# polyak head first
		(troop_set_slot, "trp_cur_merch_arms_array", 60, "itm_poland_army_hat_simple"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 60, 3),
		(troop_set_slot, "trp_cur_merch_arms_array", 61, "itm_poland_army_hat_simple"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 61, 3),
		(troop_set_slot, "trp_cur_merch_arms_array", 62, "itm_poland_army_hat_simple"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 62, 3),	
		# polyak tulub first
		(troop_set_slot, "trp_cur_merch_arms_array", 63, "itm_poland_svitka_a"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 63, 3),
		(troop_set_slot, "trp_cur_merch_arms_array", 64, "itm_poland_svitka_b"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 64, 3),
		(troop_set_slot, "trp_cur_merch_arms_array", 65, "itm_poland_svitka_b"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 65, 3),	
		# polyak horse first 
		(troop_set_slot, "trp_cur_merch_arms_array", 66, "itm_speshitsa"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 66, 0),
		(troop_set_slot, "trp_cur_merch_arms_array", 67, "itm_sumpter_horse"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 67, 60),
		(troop_set_slot, "trp_cur_merch_arms_array", 68, "itm_sumpter_horse"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 68, 60),	
		# polyak boots first 
		(troop_set_slot, "trp_cur_merch_arms_array", 69, "itm_selo_boots"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 69, 1),
		(troop_set_slot, "trp_cur_merch_arms_array", 70, "itm_selo_boots"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 70, 1),
		(troop_set_slot, "trp_cur_merch_arms_array", 71, "itm_selo_boots"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 71, 1),	
		# polyak arms hot first 
		(troop_set_slot, "trp_cur_merch_arms_array", 72, 0),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 72, 0),
		(troop_set_slot, "trp_cur_merch_arms_array", 73, "itm_pistol"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 73, 10),
		(troop_set_slot, "trp_cur_merch_arms_array", 74, 0),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 74, 0),	
		# polyak arms cold first 
		(troop_set_slot, "trp_cur_merch_arms_array", 75, "itm_kopyo"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 75, 8),
		(troop_set_slot, "trp_cur_merch_arms_array", 76, "itm_sablya_pure_d"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 76, 10),
		(troop_set_slot, "trp_cur_merch_arms_array", 77, "itm_cavalry_pika_a"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 77, 9),	
		# polyak shield first 
		(troop_set_slot, "trp_cur_merch_arms_array", 78, 0),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 78, 0),
		(troop_set_slot, "trp_cur_merch_arms_array", 79, 0),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 79,0),
		(troop_set_slot, "trp_cur_merch_arms_array", 80, 0),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 80, 0),	
		# polyak snaryad first 
		(troop_set_slot, "trp_cur_merch_arms_array", 81, 0),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 81, 0),
		(troop_set_slot, "trp_cur_merch_arms_array", 82, "itm_cartridges"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 82, 1),
		(troop_set_slot, "trp_cur_merch_arms_array", 83, 0),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 83, 0),
		# polyak glooves first
		(troop_set_slot, "trp_cur_merch_arms_array", 84, 0),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 84, 0),
		(troop_set_slot, "trp_cur_merch_arms_array", 85, 0),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 85, 0),
		(troop_set_slot, "trp_cur_merch_arms_array", 86, 0),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 86, 0),
		# polyak rhand first
		(troop_set_slot, "trp_cur_merch_arms_array", 87, 0),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 87, 0),
		(troop_set_slot, "trp_cur_merch_arms_array", 88, 0),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 88, 0),
		(troop_set_slot, "trp_cur_merch_arms_array", 89, 0),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 89, 0),		
		



		# sved head first
		(troop_set_slot, "trp_cur_merch_arms_array", 90, "itm_evropa_kava_shlapa"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 90, 3),
		(troop_set_slot, "trp_cur_merch_arms_array", 91, "itm_evropa_kava_shlapa"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 91, 3),
		(troop_set_slot, "trp_cur_merch_arms_array", 92, "itm_evropa_shlapa_b"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 92, 2),	
		# sved tulub first
		(troop_set_slot, "trp_cur_merch_arms_array", 93, "itm_evropa_odejda_sela"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 93, 9),
		(troop_set_slot, "trp_cur_merch_arms_array", 94, "itm_evropa_odejda_sela"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 94, 9),
		(troop_set_slot, "trp_cur_merch_arms_array", 95, "itm_evropa_odejda_sela_b"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 95, 7),	
		# sved horse first 
		(troop_set_slot, "trp_cur_merch_arms_array", 96, "itm_speshitsa"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 96, 0),
		(troop_set_slot, "trp_cur_merch_arms_array", 97, "itm_speshitsa"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 97, 0),
		(troop_set_slot, "trp_cur_merch_arms_array", 98, "itm_sumpter_horse"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 98, 60),	
		# sved boots first 
		(troop_set_slot, "trp_cur_merch_arms_array", 99, "itm_evropa_pehot_tufli"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 99, 3),
		(troop_set_slot, "trp_cur_merch_arms_array", 100, "itm_evropa_pehot_tufli"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 100, 3),
		(troop_set_slot, "trp_cur_merch_arms_array", 101, "itm_evropa_pehot_tufli"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 101, 3),	
		# sved arms hot first 
		(troop_set_slot, "trp_cur_merch_arms_array", 102, 0),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 102, 0),
		(troop_set_slot, "trp_cur_merch_arms_array", 103, "itm_old_musket_b"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 103, 10),
		(troop_set_slot, "trp_cur_merch_arms_array", 104, "itm_karabin_old_b"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 104, 10),	
		# sved arms cold first 
		(troop_set_slot, "trp_cur_merch_arms_array", 105, "itm_pika"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 105, 18),
		(troop_set_slot, "trp_cur_merch_arms_array", 106, "itm_pehot_palash_old"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 106, 21),
		(troop_set_slot, "trp_cur_merch_arms_array", 107, "itm_rusty_shpaga"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 107, 16),	
		# sved shield first 
		(troop_set_slot, "trp_cur_merch_arms_array", 108, 0),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 108, 0),
		(troop_set_slot, "trp_cur_merch_arms_array", 109, 0),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 109, 0),
		(troop_set_slot, "trp_cur_merch_arms_array", 110, 0),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 110, 0),	
		# sved snaryad first 
		(troop_set_slot, "trp_cur_merch_arms_array", 111, 0),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 111, 0),
		(troop_set_slot, "trp_cur_merch_arms_array", 112, "itm_bolts"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 112, 1),
		(troop_set_slot, "trp_cur_merch_arms_array", 113, "itm_cartridges"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 113, 1),
		# sved glooves first
		(troop_set_slot, "trp_cur_merch_arms_array", 114, 0),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 114, 0),
		(troop_set_slot, "trp_cur_merch_arms_array", 115, 0),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 115, 0),
		(troop_set_slot, "trp_cur_merch_arms_array", 116, 0),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 116, 0),
		# sved rhand first
		(troop_set_slot, "trp_cur_merch_arms_array", 117, 0),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 117, 0),
		(troop_set_slot, "trp_cur_merch_arms_array", 118, 0),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 118, 0),
		(troop_set_slot, "trp_cur_merch_arms_array", 119, 0),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 119, 0),	
		
		
			
		# moskov head first
		(troop_set_slot, "trp_cur_merch_arms_array", 120, "itm_streletz_shapka"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 120, 3),
		(troop_set_slot, "trp_cur_merch_arms_array", 121, "itm_streletz_shapka_b"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 121, 2),
		(troop_set_slot, "trp_cur_merch_arms_array", 122, "itm_streletz_shapka_b"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 122, 2),	
		# moskov tulub first
		(troop_set_slot, "trp_cur_merch_arms_array", 123, "itm_mosk_armyak"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 123, 3),
		(troop_set_slot, "trp_cur_merch_arms_array", 124, "itm_mosk_armyak"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 124, 3),
		(troop_set_slot, "trp_cur_merch_arms_array", 125, "itm_mosk_sermyaga"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 125, 2),	
		# moskov horse first 
		(troop_set_slot, "trp_cur_merch_arms_array", 126, "itm_speshitsa"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 126, 0),
		(troop_set_slot, "trp_cur_merch_arms_array", 127, "itm_speshitsa"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 127, 0),
		(troop_set_slot, "trp_cur_merch_arms_array", 128, "itm_sumpter_horse"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 128, 60),	
		# moskov boots first 
		(troop_set_slot, "trp_cur_merch_arms_array", 129, "itm_moskowit_postoli"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 129, 3),
		(troop_set_slot, "trp_cur_merch_arms_array", 130, "itm_moskowit_postoli"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 130, 3),
		(troop_set_slot, "trp_cur_merch_arms_array", 131, "itm_moskowit_postoli_b"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 131, 3),	
		# moskov arms hot first 
		(troop_set_slot, "trp_cur_merch_arms_array", 132, 0),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 132, 0),
		(troop_set_slot, "trp_cur_merch_arms_array", 133, "itm_luk"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 133, 5),
		(troop_set_slot, "trp_cur_merch_arms_array", 134, "itm_luk"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 134, 5),	
		# moskov arms cold first 
		(troop_set_slot, "trp_cur_merch_arms_array", 135, "itm_kopyo"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 135, 20),
		(troop_set_slot, "trp_cur_merch_arms_array", 136, "itm_sablya_pure_c"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 136, 20),
		(troop_set_slot, "trp_cur_merch_arms_array", 137, "itm_sablya_pure_c"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 137, 20),
		# moskov shield first 
		(troop_set_slot, "trp_cur_merch_arms_array", 138, 0),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 138, 0),
		(troop_set_slot, "trp_cur_merch_arms_array", 139, "itm_shield"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 139, 5),
		(troop_set_slot, "trp_cur_merch_arms_array", 140, 0),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 140, 0),
		# moskov snaryad first 
		(troop_set_slot, "trp_cur_merch_arms_array", 141, 0),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 141, 0),
		(troop_set_slot, "trp_cur_merch_arms_array", 142, "itm_arrows"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 142, 1),
		(troop_set_slot, "trp_cur_merch_arms_array", 143, "itm_arrows"),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 143, 1),
		# moskov glooves first
		(troop_set_slot, "trp_cur_merch_arms_array", 144, 0),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 144, 0),
		(troop_set_slot, "trp_cur_merch_arms_array", 145, 0),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 145, 0),
		(troop_set_slot, "trp_cur_merch_arms_array", 146, 0),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 146, 0),
		# moskov rhand first
		(troop_set_slot, "trp_cur_merch_arms_array", 147, 0),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 147, 0),
		(troop_set_slot, "trp_cur_merch_arms_array", 148, 0),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 148, 0),
		(troop_set_slot, "trp_cur_merch_arms_array", 149, 0),
		(troop_set_slot, "trp_cur_merch_arms_price_array", 149, 0),		

		
		(assign, ":start", merch_begin),
		(assign, ":cur_nation", 0),
		(assign, ":cur_troop_type", 0),
		(try_for_range, ":cur_troop_displace", 0, 15),
			(try_begin),
				(eq,  ":cur_troop_type", 3),
				(assign, ":cur_troop_type", 0),
				(val_add, ":cur_nation", 1),
			(try_end),
			(troop_set_slot, "trp_merch_array", ":cur_troop_displace", ":start"),	
			(troop_get_slot, ":total_price", "trp_merch_type_price_array", ":cur_troop_type"),
			(store_mul, ":item_displace", ":cur_nation", 30),
			(val_add, ":item_displace", ":cur_troop_type"),
			(try_for_range, ":unused", 0, 10),
				(troop_get_slot, ":new_item",  "trp_cur_merch_arms_array", ":item_displace"),
				(try_begin),
					(gt, ":new_item", 0),
					(troop_get_slot, ":new_item_price",  "trp_cur_merch_arms_price_array", ":item_displace"),
					(val_add, ":total_price", ":new_item_price"),
					(try_for_range, ":cur_troop_upgrade", 0, 4),
						(store_add, ":troop", ":start", ":cur_troop_upgrade"),
						(troop_add_item, ":troop", ":new_item"),
					(try_end),
				(try_end),
				(val_add, ":item_displace", 3),
			(try_end),						

			(troop_set_slot, "trp_merch_price_array", ":cur_troop_displace", ":total_price"),
			(val_add, ":start", 4),
			(val_add, ":cur_troop_type", 1),
		(try_end),	
		(try_for_range, ":cur_troop_displace", 0, 15),
			(troop_get_slot, ":cur_troop", "trp_merch_array", ":cur_troop_displace"),
			(try_for_range, ":cur_troop_upgrade", 0, 4),
				(store_add, ":troop", ":cur_troop", ":cur_troop_upgrade"),
				(troop_equip_items, ":troop"),
			(try_end),
		(try_end),								
     ]),	


  # script_remove_merch_count_for_nation
  # Input: naem_count
  # Output: no
 ("remove_merch_count_for_nation",
    [
		(store_script_param, ":naem_count", 1),
		(store_mul, ":index", "$g_cur_nation", 3),		
		(val_add, ":index", "$g_naem_tip"),
		(troop_get_slot, ":type_count", "trp_week_limit_array", ":index"),
		(val_sub, ":type_count", ":naem_count"),
		(troop_set_slot, "trp_week_limit_array", ":index", ":type_count"),
		(assign, "$g_naem_count", ":type_count"),
     ]),	 
	 
   # script_update_items 
  # Input: slot_itemov, item
  # Output: no
  ("update_items",
    [
		(store_script_param, ":item_param", 1),
		(store_script_param, ":item_variant", 2),
		(try_begin),
			(eq, ":item_param", 4),
			(call_script, "script_update_items_next", 7, ":item_variant"),
			(call_script, "script_update_items_next", 4, ":item_variant"),
		(else_try),
			(call_script, "script_update_items_next", ":item_param", ":item_variant"),
		(try_end),
     ]),
			
			
			
			
	 
  # script_update_items_next
  # Input: slot_itemov, item
  # Output: no
  ("update_items_next",
    [
		(store_script_param, ":item_param", 1),
		(store_script_param, ":item_variant", 2),
		(store_mul, ":item_displace", "$g_cur_nation", 30),
		(store_mul, ":displ", ":item_param", 3),
		(val_add, ":item_displace", ":displ"),
		(val_add, ":item_displace", "$g_naem_tip"),
		(troop_get_slot, ":old_item",  "trp_cur_merch_arms_array", ":item_displace"),
		(troop_get_slot, ":old_price",  "trp_cur_merch_arms_price_array", ":item_displace"),
		(assign, ":total_old_item_value", 0),
		(try_begin),
			(gt, ":old_item", 0),
			(try_for_range, ":cur_troop_upgrade", 0, 4),
				(store_add, ":troop", "$g_cur_troop", ":cur_troop_upgrade"),
				(troop_remove_item, ":troop", ":old_item"),				
			(try_end),
		(try_end),
		(store_mul, ":displace", "$g_cur_nation", 50),
		(store_mul, ":displ", ":item_param", 5),
		(val_add, ":displace", ":displ"),
		(val_add, ":displace", ":item_variant"),
		(troop_get_slot, ":new_item", "trp_merch_arms_array", ":displace"),
		(troop_get_slot, ":new_price", "trp_merch_arms_price_array", ":displace"),		
		(try_for_range, ":cur_troop_upgrade", 0, 4),
			(store_add, ":troop", "$g_cur_troop", ":cur_troop_upgrade"),
			(troop_add_item, ":troop", ":new_item"),
		(try_end),
		(troop_set_slot, "trp_cur_merch_arms_array", ":item_displace", ":new_item"),	
		(troop_set_slot, "trp_cur_merch_arms_price_array", ":item_displace", ":new_price"),	
		(store_mul, ":troop_displace", "$g_cur_nation", 3),
		(val_add, ":troop_displace", "$g_naem_tip"),
		(troop_get_slot, ":troop_price", "trp_merch_price_array", ":troop_displace"),
		(val_sub, ":troop_price", ":old_price"),
		(val_add, ":troop_price", ":new_price"),
		(troop_set_slot, "trp_merch_price_array", ":troop_displace", ":troop_price"),
		(val_mul,  ":new_price", "$g_count_naem"),
		(store_mul, ":total_old_item_value", ":old_price", "$g_count_naem"),

		(call_script, "script_recalculate_price", ":total_old_item_value"),
		(assign, ":total_old_item_value", reg10),
		(val_div, ":total_old_item_value", 2), #50% of total cost of old equipment is paid back.		
		(try_begin),
		  (gt, ":total_old_item_value", 0),
		  (troop_add_gold, "trp_player", ":total_old_item_value"),
        (try_end),		

		(call_script, "script_recalculate_price",  ":new_price"),		
		(troop_remove_gold, "trp_player", reg10),

		(store_troop_gold,"$g_trp_player_gold","trp_player"),
		(try_for_range, ":cur_troop_upgrade", 0, 4),
			(store_add, ":troop", "$g_cur_troop", ":cur_troop_upgrade"),
			(troop_equip_items, ":troop"),
		(try_end),
     ]),

#OiM scripts
	("cf_oim_trakay_fight_check",
    [(assign, ":alive_count", 0),
     (try_for_agents, ":cur_agent"),
       (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
	   (try_begin),
		(eq, "trp_oim_polish_taver_visitor", ":cur_agent_troop"),
		(agent_is_alive, ":cur_agent"),
		(val_add, ":alive_count", 1),
	   (try_end), 
	   (try_begin),
		(eq, "trp_oim_trakai_ksendz", ":cur_agent_troop"),
		(agent_is_alive, ":cur_agent"),
		(val_add, ":alive_count", 1),
	   (try_end),	   
     (try_end),
     (le, ":alive_count", 1),
     ]),
 
 ("cf_oim_check_quest_sem_samuraev",
  [
	(is_between, "$g_talk_troop", "trp_knight_3_1", "trp_knight_3_20"), 
	(store_character_level, ":level", "trp_player"),	
	(lt, ":level", 12), 
  ]), 
  
  ("cf_oim_check_quest_lendliz",
  [
	(is_between, "$g_talk_troop", "trp_knight_2_1", "trp_knight_2_20"), 
	(store_character_level, ":level", "trp_player"),	
	#(store_distance_to_party_from_party, ":cur_dist", "$g_talk_troop", "trp_knight_2_7"),
	(store_relation, ":ralation", "$g_encountered_party_faction", "fac_player_faction"),

	(troop_get_slot, ":king_party", "trp_knight_2_7", slot_troop_leaded_party),
	(troop_get_slot, ":lord_party", "$g_talk_troop", slot_troop_leaded_party),
	(store_relation, ":ralation", "$g_talk_troop_faction", "fac_player_faction"),
	(try_begin), 
		(ge, ":king_party", 0), 
		(ge, ":lord_party", 0), 
		(store_distance_to_party_from_party, ":cur_dist", ":lord_party", ":king_party"),	
	(else_try), 
		(assign, ":cur_dist", 0), 
	(try_end), 	
	
	(lt, ":level", 12), 
	(ge, ":cur_dist", 13),
	(ge, ":ralation", 0),
  ]), 
  
  ("cf_oim_check_quest_monfor_shved",
  [
	(store_character_level, ":level", "trp_player"),	
	(store_relation, ":ralation", "$g_encountered_party_faction", "fac_player_faction"),
	(is_between, "$g_talk_troop", "trp_knight_4_1", "trp_knight_4_20"), 
	(lt, ":level", 12), 
	(ge, ":ralation", 0),
  ]), 
  
  

  ("cf_oim_check_quest_mest_i_zakon",
  [
	(store_character_level, ":level", "trp_player"),	
	(store_relation, ":ralation", "$g_encountered_party_faction", "fac_player_faction"),
	(is_between, "$g_talk_troop", "trp_knight_1_1", "trp_knight_1_20"), 
	(lt, ":level", 12), 
	(ge, ":ralation", 0),
  ]), 

   ("cf_oim_check_quest_kidalovo_z_konyem",
	[
		(is_between, "$g_talk_troop", kingdom_heroes_begin, kingdom_heroes_end), 
		(faction_get_slot, ":king", "$g_talk_troop_faction", slot_faction_leader), 
		(neq, ":king", "$g_talk_troop"), 
		(store_character_level, ":level", "trp_player"),			
		(troop_get_slot, ":king_party", ":king", slot_troop_leaded_party),
		(troop_get_slot, ":lord_party", "$g_talk_troop", slot_troop_leaded_party),
		(store_relation, ":ralation", "$g_talk_troop_faction", "fac_player_faction"),
		(store_free_inventory_capacity,":capacity"),	
		(try_begin), 
			(ge, ":king_party", 0), 
			(ge, ":lord_party", 0), 
			(store_distance_to_party_from_party, ":cur_dist", ":lord_party", ":king_party"),	
		(else_try), 
			(assign, ":cur_dist", 0), 
		(try_end), 
		(this_or_next|eq, "$g_talk_troop_faction", "fac_kingdom_2"),
		(this_or_next|eq, "$g_talk_troop_faction", "fac_kingdom_5"),
		(             ge, "$player_honor", 1),
		(lt, ":level", 12), 
		(ge, ":capacity", 1),		
		(ge, ":ralation", 2),
		(ge, ":cur_dist", 13),
	]), 
	
  ("cf_oim_check_quest_invest",
  [
	(store_character_level, ":level", "trp_player"),	
	(store_relation, ":ralation", "$g_encountered_party_faction", "fac_player_faction"),
	(eq, "$g_talk_troop_faction", "fac_kingdom_5"), 
	(lt, ":level", 12), 
	(ge, ":ralation", 0),
  ]), 

  ("cf_oim_check_letter_to_trubeckoy",
  [
	(store_character_level, ":level", "trp_player"),	
	(lt, ":level", 12), 
	(ge, ":level", 3),
  ]), 
  
  #(troop_get_slot, ":center_no", ":stack_troop", slot_troop_cur_center),  
  ("cf_check_potop_start_condition",
  [
	(assign, ":result", 0), 
    (try_for_range, ":troop_no", "trp_knight_1_1", "trp_knight_1_20"), 
		(troop_get_slot, ":center_no", ":troop_no", slot_troop_cur_center),
		(try_begin), 
			(eq, ":center_no", "p_town_6"), 
			(val_add, ":result", 1), 
		(else_try), 
			(eq, ":center_no", "p_town_16"), 
			(val_add, ":result", 1), 
		(try_end), 
	(try_end), 
	(eq, ":result", 0), 
  ]),
  
  ("oim_get_zagloba_dlg_idx",
  [
	(try_begin), 
		(eq, "$oim_zagloba_crn_dlg_direction", 0), 
		(val_add, "$oim_zagloba_crn_dlg", 1), 
	(else_try), 
		(val_add, "$oim_zagloba_crn_dlg", -1), 
	(try_end), 
	(try_begin), 
		(gt, "$oim_zagloba_crn_dlg", 34),
		(call_script, "script_oim_init_zagloba_dlg"), 
	(else_try), 
		(lt, "$oim_zagloba_crn_dlg", 1),
		(call_script, "script_oim_init_zagloba_dlg"), 
	(try_end), 	
  ]),
  
  ("oim_init_zagloba_dlg",
  [
	(store_random_in_range, "$oim_zagloba_crn_dlg", 1, 34),
	(store_random_in_range, "$oim_zagloba_crn_dlg_direction", 0, 2),
  ]), 
  
  ("cf_oim_get_swedish_prisoner_count",
  [
   (assign, ":result", 0), 
   (try_for_range, ":trp_dest", "trp_nord_recruit", "trp_nord_castle_guard"),
		(party_count_prisoners_of_type, ":rslt", "p_main_party", ":trp_dest"), 
		(val_add, ":result", ":rslt"), 
   (try_end), 
   (try_for_range, ":trp_dest", kingdom_heroes_begin, kingdom_heroes_end),
		(store_troop_faction, ":fac", ":trp_dest"), 
		(eq, ":fac", "fac_kingdom_4"),
		(party_count_prisoners_of_type, ":rslt", "p_main_party", ":trp_dest"), 
		(val_add, ":result", ":rslt"), 
   (try_end),    
   (assign, reg0, ":result"),    
  ]), 
  
  ("cf_oim_remove_swedish_prisoner",
  [
    (assign, ":result", -1), 
	(try_for_range, ":troop_no", kingdom_heroes_begin, kingdom_heroes_end),
		(store_troop_faction, ":fac", ":troop_no"), 
		(eq, ":fac", "fac_kingdom_4"),
		(troop_slot_eq, ":troop_no", slot_troop_prisoner_of_party, "p_main_party"),	
		(assign, ":result", ":troop_no"), 
	(try_end), 
	(party_get_num_prisoner_stacks, ":num_prisoner_stacks","p_main_party"),
    (try_for_range_backwards, ":stack_no", 0, ":num_prisoner_stacks"),
      (party_prisoner_stack_get_troop_id,   ":stack_troop","p_main_party",":stack_no"),
	  (is_between, ":stack_troop", "trp_nord_recruit", "trp_nord_castle_guard"),
      #(party_remove_prisoners, "p_main_party", ":stack_troop", 1),
	  (assign, ":result", ":stack_troop"),
    (try_end), 
	(try_begin),
		(is_between, ":result", kingdom_heroes_begin, kingdom_heroes_end),
		(call_script, "script_remove_troop_from_prison", ":result"),
	(else_try), 	
	(party_remove_prisoners, "p_main_party", ":result", 1),
	(try_end),	
  ]), 
  
  ("cf_oim_get_swedish_lord_prisoner_count",
   [
    (assign, ":result", 0), 
    (try_for_range, ":trp_dest", kingdom_heroes_begin, kingdom_heroes_end),
		(store_troop_faction, ":fac", ":trp_dest"), 
		(eq, ":fac", "fac_kingdom_4"),
		(party_count_prisoners_of_type, ":rslt", "p_main_party", ":trp_dest"), 
		(val_add, ":result", ":rslt"), 
    (try_end), 
    (assign, reg0, ":result"),    
  ]), 
     
  ("cf_oim_remove_swedish_lord_prisoner",
  [
    (assign, ":result", 0),
    (try_for_range, ":troop_no", kingdom_heroes_begin, kingdom_heroes_end),
		(store_troop_faction, ":fac", ":troop_no"), 
		(eq, ":fac", "fac_kingdom_4"),
		(troop_slot_eq, ":troop_no", slot_troop_prisoner_of_party, "p_main_party"),	
		(try_begin), 
			(eq, ":result", 0), 	
			(call_script, "script_remove_troop_from_prison", ":troop_no"),
			(party_remove_prisoners, "p_main_party", ":troop_no", 1),
			(assign, ":result", 1), 
		(try_end), 	
	(try_end), 
    (assign, reg0, ":result"),    	
  ]), 

  ("remove_lords_from_center",
    [
      (store_script_param, ":center_no", 1),
      (party_get_num_attached_parties, ":num_attached_parties", ":center_no"),
      (try_for_range_backwards, ":attached_party_rank", 0, ":num_attached_parties"),
         (party_get_attached_party_with_rank, ":attached_party", ":center_no", ":attached_party_rank"),
         (party_detach, ":attached_party"),		 
         (party_set_ai_behavior, ":attached_party", ai_bhvr_travel_to_party),
         (party_set_ai_object, ":attached_party", "p_town_7"),
         (party_set_flags, ":attached_party", pf_default_behavior, 0),
      (try_end),
      (call_script, "script_clear_party_group", ":center_no"),	  
    ]), 

#input param Faction no
#out random_village
   ("cf_get_village_of_faction",
	[
		(store_script_param, ":faction_no", 1),
		#hack - to garantie that there will at lease something like result
		(assign, reg0, villages_begin), 
		(try_for_range, ":village_no", villages_begin, villages_end),
			(store_faction_of_party, ":village_fac", ":village_no"), 
			(try_begin), 
				(eq, ":village_fac", ":faction_no"), 
				(assign, reg0, ":village_no"), 
			(try_end), 
		(try_end), 		
	]), 
	
	 ("cf_set_agent_mode_hostile",
	 [
		(set_party_battle_mode),
		(try_for_agents, ":cur_agent"),
			(agent_is_human, ":cur_agent"),
			(agent_is_alive, ":cur_agent"),
			(agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
			(try_begin),
				(neq, ":cur_agent_troop", "trp_player"),
				(agent_set_team, ":cur_agent", 1),
			(try_end),
		(try_end),
		(val_add, "$tutorial_4_state", 2), 
	 ]), 
	
	("player_check_tatarin_costume", 
	[
		(assign, ":result", 0), 
		#tatar_bayrak_hat
		#janissar_hat_b
		(try_for_range, ":item_no", "itm_tatar_halat_a", "itm_ttr_civil_b"), 
			(troop_has_item_equipped, "trp_player", ":item_no"), 
			(val_add, ":result", 1), 
		(try_end), 
		(try_for_range, ":item_no", "itm_tatar_bayrak_hat", "itm_janissar_hat_b"), 
			(troop_has_item_equipped, "trp_player", ":item_no"), 
			(val_add, ":result", 1), 
		(try_end), 
		(assign, reg0, ":result"), 
	]),
	
	("cf_check_agent_count",
	 [
		(assign, ":alive_count", 0),
		(try_for_agents, ":cur_agent"),
			(agent_is_alive, ":cur_agent"),
			(agent_is_human, ":cur_agent"),
			(agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
			(try_begin),
				(neq, ":cur_agent_troop", "trp_player"),
				(val_add, ":alive_count", 1),
			(try_end), 
		(try_end),
		(eq, ":alive_count", 0),
	]), 


  # script_open_town_doors
  # Input: no
  # Output: no
  ("open_town_doors",
   [   (assign, ":end_cond", 1),
      (try_for_range, ":i_instance", 0, ":end_cond"),
        (scene_prop_get_instance, ":object", "spr_towngate_door_left", ":i_instance"),
        (ge, ":object", 0),
        (val_add, ":end_cond", 1),
        (prop_instance_get_position, pos1, ":object"),
        (position_rotate_z, pos1, -100),
        (prop_instance_animate_to_position, ":object", pos1, 1),
      (try_end),
      (assign, ":end_cond", 1),
      (try_for_range, ":i_instance", 0, ":end_cond"),
        (scene_prop_get_instance, ":object", "spr_towngate_rectangle_door_left", ":i_instance"),
        (ge, ":object", 0),
        (val_add, ":end_cond", 1),
        (prop_instance_get_position, pos1, ":object"),
        (position_rotate_z, pos1, -80),
        (prop_instance_animate_to_position, ":object", pos1, 1),
      (try_end),
      (assign, ":end_cond", 1),
      (try_for_range, ":i_instance", 0, ":end_cond"),
        (scene_prop_get_instance, ":object", "spr_towngate_door_right", ":i_instance"),
        (ge, ":object", 0),
        (val_add, ":end_cond", 1),
        (prop_instance_get_position, pos1, ":object"),
        (position_rotate_z, pos1, 100),
        (prop_instance_animate_to_position, ":object", pos1, 1),
      (try_end),
      (assign, ":end_cond", 1),
      (try_for_range, ":i_instance", 0, ":end_cond"),
        (scene_prop_get_instance, ":object", "spr_towngate_rectangle_door_right", ":i_instance"),
        (ge, ":object", 0),
        (val_add, ":end_cond", 1),
        (prop_instance_get_position, pos1, ":object"),
        (position_rotate_z, pos1, 80),
        (prop_instance_animate_to_position, ":object", pos1, 1),
      (try_end),
    
  ]),
	 	 
	 
  # script_calc_voin_raznica
  # Input: no
  # Output: reg0 - rezult (raznica mezhdu frendami i vragami v kolichistve)
  ("calc_voin_raznica",
   [   
  ]),
  
  
  # script_horse_fifty_percen_check 
  # Input: no
  # Output: horse flag
 ("horse_fifty_percen_check",
    [
	  (assign, ":with_horse_count", 0),
	  (assign, ":without_horse_count", 0),
	  (party_get_num_companion_stacks, ":stacks_count", "p_main_party"),
      (try_for_range, ":cur_stack", 0, ":stacks_count"),
        (party_stack_get_troop_id,  ":stack_troop","p_main_party",":cur_stack"),
        (party_stack_get_size,   ":stack_size","p_main_party",":cur_stack"),
        (party_stack_get_num_wounded, ":wounded_count","p_main_party",":cur_stack"),
        (val_sub, ":stack_size", ":wounded_count"),
		(troop_get_inventory_slot, ":horse", ":stack_troop", 8),
			(try_begin),
				 (ge, ":horse", 0),
				 (val_add, ":with_horse_count", ":stack_size"),
			(else_try),
				(val_add, ":without_horse_count", ":stack_size"),
			(try_end),
			
	   (try_end),
		
		(try_begin),
			(gt, ":with_horse_count", ":without_horse_count"),
			(assign, reg0, 1),
		(else_try),
			(assign, reg0, 0),
		(try_end),
     ]),

  # script_remove_percent_of_each_kind_of_troops  
  # Input: percent, party
  # Output: no
 ("remove_percent_of_each_kind_of_troops",
    [
	  (store_script_param_1, ":percent"),
	  (store_script_param_2, ":party"),
	  (assign, ":first", 1),
	  (str_store_string, s50, "str_empty_string"),
      (party_get_num_companion_stacks, ":stacks_count", ":party"),
	  (assign, ":removed_count", 0),
      (try_for_range, ":cur_stack", 0, ":stacks_count"),
        (party_stack_get_troop_id,  ":stack_troop",":party",":cur_stack"),
        (neg|troop_is_hero, ":stack_troop"),
        (party_stack_get_size,   ":stack_size",":party",":cur_stack"),
        (party_stack_get_num_wounded, ":wounded_count",":party",":cur_stack"),
        (val_sub, ":stack_size", ":wounded_count"),
		(store_mul, ":delete_trp_count", ":percent", ":stack_size"), 
		(val_div, ":delete_trp_count", 100),
		(ge, ":delete_trp_count", 1), 
			(try_begin),
				(eq, ":first",1),
				(assign, reg1, ":delete_trp_count"),
				(str_store_troop_name,s0,":stack_troop"),
				(str_store_string, s50, "@{s0} - {reg1}"),
			(else_try),
				(assign, reg1, ":delete_trp_count"),
				(str_store_troop_name,s0,":stack_troop"),
				(str_store_string, s51, "@{s0} - {reg1}"),
				(str_store_string, s1, "str_s50_comma_s51"),
				(str_store_string, s50, s1),
			(try_end),
		(assign, ":first", 0),
        (party_remove_members,":party",":stack_troop",":delete_trp_count"),
		(val_add, ":removed_count", ":delete_trp_count"),
      (try_end),
	  (try_begin), 
		(eq, ":removed_count", 0),
		(str_store_string, s50, "str_no"),
	  (try_end), 
											
     ]),

  # script_remove_one_random_troop 
  # Input: no
  # Output: no
 ("remove_one_random_troop",
   [
   ]),
   
   # Output: reg0 center_no
   # Input: arg1 = party_no, arg2 = kingdom_no arg3 = except_center
   ("oim_get_closest_walled_center_of_faction_except_center",
    [
      (store_script_param_1, ":party_no"),
      (store_script_param_2, ":kingdom_no"),
	  (store_script_param, ":exc_center_no", 3),
      (assign, ":min_distance", 99999),
      (assign, ":result", -1),
      (try_for_range, ":center_no", walled_centers_begin, walled_centers_end),
        (store_faction_of_party, ":faction_no", ":center_no"),
        (eq, ":faction_no", ":kingdom_no"),
		(neq, ":exc_center_no", ":center_no"), 
        (store_distance_to_party_from_party, ":party_distance", ":party_no", ":center_no"),
        (lt, ":party_distance", ":min_distance"),
        (assign, ":min_distance", ":party_distance"),
        (assign, ":result", ":center_no"),
      (try_end),
      (assign, reg0, ":result"),
    ]),
      
   
  # cf_set_oim_potop_target_centers 
  # Input: no
  # Output: s3-s6 string regesters - town names
  ("cf_set_oim_potop_target_centers",
   [
	(assign, "$oim_potop_target_city_1", -1),
	(assign, "$oim_potop_target_city_2", -1),
	(assign, "$oim_potop_target_city_3", -1),
	(assign, "$oim_potop_target_city_4", -1),
	
	(call_script, "script_get_closest_town_of_faction", "p_main_party", "fac_kingdom_4"), 
	(assign, "$oim_potop_target_city_1", reg0), 
	(call_script, "script_oim_get_closest_walled_center_of_faction_except_center", "p_main_party", "fac_kingdom_4", "$oim_potop_target_city_1"), 
	(assign, "$oim_potop_target_city_2", reg0), 
	(call_script, "script_get_closest_town_of_faction", "p_main_party", "fac_kingdom_5"), 
	(assign, "$oim_potop_target_city_3", reg0), 
	(call_script, "script_oim_get_closest_walled_center_of_faction_except_center", "p_main_party", "fac_kingdom_5", "$oim_potop_target_city_3"), 
	(assign, "$oim_potop_target_city_4", reg0), 
	
	
	
	(try_begin), 
		(eq, "$oim_potop_target_city_1", -1),
		(try_for_parties, ":center_no"), 
			(this_or_next|party_slot_eq, ":center_no", slot_party_type, spt_town), 
			(             party_slot_eq, ":center_no", slot_party_type, spt_castle), 
			(store_faction_of_party, ":faction_no", ":center_no"), 
			(neq, ":faction_no", "fac_kingdom_1"), 
			(neq, ":center_no", "$oim_potop_target_city_2"),
			(neq, ":center_no", "$oim_potop_target_city_3"),
			(neq, ":center_no", "$oim_potop_target_city_4"),
			(assign, "$oim_potop_target_city_1", ":center_no"),
		(try_end), 
	(try_end),	

	(try_begin), 
		(eq, "$oim_potop_target_city_2", -1),
		(try_for_parties, ":center_no"), 
			(this_or_next|party_slot_eq, ":center_no", slot_party_type, spt_town), 
			(             party_slot_eq, ":center_no", slot_party_type, spt_castle), 
			(store_faction_of_party, ":faction_no", ":center_no"), 
			(neq, ":faction_no", "fac_kingdom_1"), 
			(neq, ":center_no", "$oim_potop_target_city_1"),
			(neq, ":center_no", "$oim_potop_target_city_3"),
			(neq, ":center_no", "$oim_potop_target_city_4"),
			(assign, "$oim_potop_target_city_2", ":center_no"),
		(try_end), 
	(try_end),	

	(try_begin), 
		(eq, "$oim_potop_target_city_3", -1),
		(try_for_parties, ":center_no"), 
			(this_or_next|party_slot_eq, ":center_no", slot_party_type, spt_town), 
			(             party_slot_eq, ":center_no", slot_party_type, spt_castle), 
			(store_faction_of_party, ":faction_no", ":center_no"), 
			(neq, ":faction_no", "fac_kingdom_1"), 
			(neq, ":center_no", "$oim_potop_target_city_2"),
			(neq, ":center_no", "$oim_potop_target_city_1"),
			(neq, ":center_no", "$oim_potop_target_city_4"),
			(assign, "$oim_potop_target_city_3", ":center_no"),
		(try_end), 
	(try_end),	
	
	(try_begin), 
		(eq, "$oim_potop_target_city_4", -1),
		(try_for_parties, ":center_no"), 
			(this_or_next|party_slot_eq, ":center_no", slot_party_type, spt_town), 
			(             party_slot_eq, ":center_no", slot_party_type, spt_castle), 
			(store_faction_of_party, ":faction_no", ":center_no"), 
			(neq, ":faction_no", "fac_kingdom_1"), 
			(neq, ":center_no", "$oim_potop_target_city_2"),
			(neq, ":center_no", "$oim_potop_target_city_3"),
			(neq, ":center_no", "$oim_potop_target_city_1"),
			(assign, "$oim_potop_target_city_4", ":center_no"),
		(try_end), 
	(try_end),	
	
	
	(str_store_party_name, s3, "$oim_potop_target_city_1"), 
	(str_store_party_name, s4, "$oim_potop_target_city_2"), 
	(str_store_party_name, s5, "$oim_potop_target_city_3"), 
	(str_store_party_name, s6, "$oim_potop_target_city_4"), 
	
	
   ]), 
   
   
   # oim_spawn_defend_army
   # Input: arg1 = center_no
   # Output: reg0 = ":oim_pout_party"
   ("oim_spawn_defend_army", 
	[
		(store_script_param, ":center_no", 1),
		(store_faction_of_party, ":party_faction", ":center_no"),
        (assign, ":oim_pout_party", -1),
        (set_spawn_radius,2),
        (spawn_around_party,":center_no", "pt_kingdom_hero_party"),
        (assign, ":oim_pout_party", reg0),
        (party_set_faction, ":oim_pout_party", ":party_faction"),
		(party_set_ai_behavior, ":oim_pout_party", ai_bhvr_patrol_party),
		(party_set_ai_object, ":oim_pout_party", ":center_no"),
		(party_set_flags, ":oim_pout_party", pf_default_behavior, 0),
        (faction_get_slot, ":tier_2_troop", ":party_faction", slot_faction_tier_2_troop),
        (faction_get_slot, ":tier_3_troop", ":party_faction", slot_faction_tier_3_troop),
        (faction_get_slot, ":tier_4_troop", ":party_faction", slot_faction_tier_4_troop),
        (faction_get_slot, ":tier_5_troop", ":party_faction", slot_faction_tier_5_troop),
		(call_script, "script_party_count_fit_for_battle", "p_main_party"), 
		(assign, ":main_party_count",reg0), 
		(assign, ":reiters_count", ":main_party_count"), 
		(assign, ":mushket_count", ":main_party_count"), 
		(assign, ":pikeman_count", ":main_party_count"), 
		(assign, ":dragoons_count", ":main_party_count"), 
		(val_mul, ":reiters_count", 35),
		(val_div, ":reiters_count", 100),
		(val_mul, ":mushket_count", 55),
		(val_div, ":mushket_count", 100),
		(val_mul, ":pikeman_count", 35),
		(val_div, ":pikeman_count", 100),
		(val_mul, ":dragoons_count", 35),
		(val_div, ":dragoons_count", 100),
		(try_begin),
			(lt, ":mushket_count", 70), 
			(assign, ":mushket_count", 80),
		(try_end),
		(try_begin),
			(lt, ":reiters_count", 40), 
			(assign, ":reiters_count", 55),
		(try_end),
		(try_begin),
			(lt, ":dragoons_count", 30), 
			(assign, ":dragoons_count", 40),
		(try_end),
		(try_begin),
			(lt, ":pikeman_count", 25), 
			(assign, ":pikeman_count", 40),
		(try_end),
		(party_add_members, ":oim_pout_party", ":tier_3_troop", ":mushket_count"),
		(party_add_members, ":oim_pout_party", ":tier_5_troop", ":reiters_count"),
		(party_add_members, ":oim_pout_party", ":tier_4_troop", ":dragoons_count"),
		(party_add_members, ":oim_pout_party", ":tier_2_troop", ":pikeman_count"),	
		(assign, reg0, ":oim_pout_party"), 
	]), 

	
   # oim_spawn_defend_army
   # Input: arg1 = faction_no; arg2 = unit_type (1..4)
   # Output: reg0 = ":oim_pout_party"
   ("get_faction_unit_of_type",
    [
		(store_script_param, ":faction_no", 1),
		(store_script_param, ":unit_type", 2),
		(assign, ":result", -1),
		(try_begin), 
			(eq, ":faction_no", "fac_kingdom_1"), 
			(try_begin), 
				(eq, ":unit_type", 1), #pikeman
				(assign, ":result", "trp_swadian_footman"), 
			(else_try), 
				(eq, ":unit_type", 2), #mushketman
				(assign, ":result", "trp_swadian_crossbowman"), 
			(else_try), 
				(eq, ":unit_type", 3), #dragoon
				(assign, ":result", "trp_polish_dragoon"), 
			(else_try), 
				(eq, ":unit_type", 4), #heavy cavalry
				(assign, ":result", "trp_swadian_knight"), 
			(try_end), 		
		(else_try), 
			(eq, ":faction_no", "fac_kingdom_2"), 
			(try_begin), 
				(eq, ":unit_type", 1), #pikeman
				(assign, ":result", "trp_vaegir_veteran"), 
			(else_try), 
				(eq, ":unit_type", 2), #mushketman
				(assign, ":result", "trp_vaegir_archer"), 
			(else_try), 
				(eq, ":unit_type", 3), #dragoon
				(assign, ":result", "trp_vaegir_knight"), 
			(else_try), 
				(eq, ":unit_type", 4), #heavy cavalry
				(assign, ":result", "trp_vaegir_guard"), 
			(try_end), 		
		(else_try), 
			(eq, ":faction_no", "fac_kingdom_3"), 
			(try_begin), 
				(eq, ":unit_type", 1), #pikeman
				(assign, ":result", "trp_khergit_skirmisher"), 
			(else_try), 
				(eq, ":unit_type", 2), #mushketman
				(assign, ":result", "trp_khergit_horseman"), 
			(else_try), 
				(eq, ":unit_type", 3), #dragoon
				(assign, ":result", "trp_khergit_veteran_horse_archer"), 
			(else_try), 
				(eq, ":unit_type", 4), #heavy cavalry
				(assign, ":result", "trp_khergit_lancer"), 
			(try_end), 		
		(else_try), 
			(eq, ":faction_no", "fac_kingdom_4"), 
			(try_begin), 
				(eq, ":unit_type", 1), #pikeman
				(assign, ":result", "trp_nord_trained_footman"), 
			(else_try), 
				(eq, ":unit_type", 2), #mushketman
				(assign, ":result", "trp_nord_archer"), 
			(else_try), 
				(eq, ":unit_type", 3), #dragoon
				(assign, ":result", "trp_nord_warrior"), 
			(else_try), 
				(eq, ":unit_type", 4), #heavy cavalry
				(assign, ":result", "trp_nord_veteran"), 
			(try_end), 		
		(else_try), 
			(eq, ":faction_no", "fac_kingdom_5"), 
			(try_begin), 
				(eq, ":unit_type", 1), #pikeman
				(assign, ":result", "trp_rhodok_spearman"), 
			(else_try), 
				(eq, ":unit_type", 2), #mushketman
				(assign, ":result", "trp_rhodok_sergeant"), 
			(else_try), 
				(eq, ":unit_type", 3), #dragoon
				(assign, ":result", "trp_rhodok_crossbowman"), 
			(else_try), 
				(eq, ":unit_type", 4), #heavy cavalry
				(assign, ":result", "trp_rhodok_veteran_crossbowman"), 
			(try_end), 		
		(try_end), 		
		(try_begin), 
			(eq, ":result",  -1), 
			(assign, ":result", "trp_rhodok_sergeant"), 
		(try_end),
		(assign, reg0, ":result"), 
	]),


	
   # oim_spawn_defend_army
   # Input: arg1 = party_no arg2 = faction_no 
   # Output: reg0 = no
   ("oim_spawn_strong_army", 
	[
		(store_script_param, ":oim_pout_party", 1),
		(store_script_param, ":party_faction", 2),
		(call_script, "script_get_faction_unit_of_type", ":party_faction", 1), #pikeman
		(assign, ":tier_2_troop", reg0), 
		(call_script, "script_get_faction_unit_of_type", ":party_faction", 2), #mushketman
		(assign, ":tier_3_troop", reg0), 
		(call_script, "script_get_faction_unit_of_type", ":party_faction", 3), #dragoon
		(assign, ":tier_4_troop", reg0), 
		(call_script, "script_get_faction_unit_of_type", ":party_faction", 4), #heavy cavalry
		(assign, ":tier_5_troop", reg0), 
		#(faction_get_slot, ":tier_2_troop", ":party_faction", slot_faction_tier_2_troop),
		#(faction_get_slot, ":tier_3_troop", ":party_faction", slot_faction_tier_3_troop),
		#(faction_get_slot, ":tier_4_troop", ":party_faction", slot_faction_tier_4_troop),
		#(faction_get_slot, ":tier_5_troop", ":party_faction", slot_faction_tier_5_troop),
		(call_script, "script_party_count_fit_for_battle", "p_main_party"), 
		(assign, ":main_party_count",reg0), 
		(assign, ":reiters_count", ":main_party_count"), 
		(assign, ":mushket_count", ":main_party_count"), 
		(assign, ":pikeman_count", ":main_party_count"), 
		(assign, ":dragoons_count", ":main_party_count"), 
		(val_mul, ":reiters_count", 35),
		(val_div, ":reiters_count", 100),
		(val_mul, ":mushket_count", 55),
		(val_div, ":mushket_count", 100),
		(val_mul, ":pikeman_count", 35),
		(val_div, ":pikeman_count", 100),
		(val_mul, ":dragoons_count", 35),
		(val_div, ":dragoons_count", 100),
		(try_begin),
			(lt, ":mushket_count", 70), 
			(assign, ":mushket_count", 80),
		(try_end),
		(try_begin),
			(lt, ":reiters_count", 40), 
			(assign, ":reiters_count", 55),
		(try_end),
		(try_begin),
			(lt, ":dragoons_count", 30), 
			(assign, ":dragoons_count", 40),
		(try_end),
		(try_begin),
			(lt, ":pikeman_count", 25), 
			(assign, ":pikeman_count", 40),
		(try_end),
		(party_add_members, ":oim_pout_party", ":tier_3_troop", ":mushket_count"),
		(party_add_members, ":oim_pout_party", ":tier_5_troop", ":reiters_count"),
		(party_add_members, ":oim_pout_party", ":tier_4_troop", ":dragoons_count"),
		(party_add_members, ":oim_pout_party", ":tier_2_troop", ":pikeman_count"),	
		(assign, reg0, ":oim_pout_party"), 
	]), 
	
	
	
   # oim_spawn_defend_army
   # Input: arg1 = target_faction, arg2 = rebell_troop
   # Output: no
   # this script uses global variables:
   # $oim_rebel_target_faction
   # $
   # fac_oim_rebel_faction
	("oim_rise_rebellion",
	[
		(store_script_param, ":target_faction", 1),	
		(store_script_param, ":rebell_troop", 2),	
		(call_script, "script_change_troop_faction", ":rebell_troop", "fac_oim_rebel_faction"), 
		(faction_set_slot, "fac_oim_rebel_faction", slot_faction_leader, ":rebell_troop"),
		(assign, "$g_recalculate_ais", 1),
        (faction_set_slot, "fac_oim_rebel_faction", slot_faction_state, sfs_active),
        (str_store_faction_name, s1, ":target_faction"),
        (faction_set_name, "fac_oim_rebel_faction", "@{s1} Rebels"),
        (faction_set_color, "fac_oim_rebel_faction", 0xFF0000),
		(set_relation, ":target_faction", "fac_kingdom_1", -100), 
		(call_script, "script_update_all_notes"),
	]), 

	
	# count_parties_of_faction_and_party_template
    # Input: arg1 = target_faction, arg2 = rebell_troop
    # Output: party count
   ("count_parties_of_faction_and_party_template",
    [
      (store_script_param_1, ":faction_no"),
      (store_script_param_2, ":party_type"),
      (assign, reg0, 0),
      (try_for_parties, ":party_no"),
        (party_is_active, ":party_no"),
		(party_get_template_id, ":cur_party_template", ":party_no"),
        (store_faction_of_party, ":cur_faction", ":party_no"),
        (eq, ":cur_party_template", ":party_type"),
        (eq, ":cur_faction", ":faction_no"),
        (val_add, reg0, 1),
      (try_end),
  ]),

  	# count_count_centers_of_faction
    # Input: arg1 = faction_no
    # Output: center_count
   ("count_centers_of_faction",
    [
	  (store_script_param_1, ":faction_no"),
      (assign, ":num_centers", 0),
      (try_for_range, ":center_no", centers_begin, centers_end),
		(store_faction_of_party, ":town_faction", ":center_no"),
		(eq, ":town_faction", ":faction_no"),
        (val_add, ":num_centers", 1),
      (try_end),
	  (assign, reg0, ":num_centers"),
	  
	]),
	
   ("count_centers",
    [
      (assign, ":num_centers", 0),
      (try_for_range, ":center_no", centers_begin, centers_end),
		(gt, ":center_no", -1),
        (val_add, ":num_centers", 1),
      (try_end),
	  (assign, reg0, ":num_centers"),
	]),

   ("get_troop_descr",
	[
		(store_script_param_1, ":type_no"),
		(store_mul, ":displace", "$g_cur_nation", 3),
		(val_add, ":displace", ":type_no"),
		(party_count_members_of_type, ":count", "p_main_party"), 
		(val_add, ":displace", merch_str_begin),
		(str_store_string, s19, ":displace"),
		(assign, reg0, ":count"), 
	]),

   #oim_potop_za_zaglobu_check
   ("cf_oim_potop_za_zaglobu_check",
    [
		(assign, ":all_parties", 0),
		(assign, ":sup_parties", 0),
		(try_for_range, ":cur_troop", kingdom_heroes_begin, kingdom_heroes_end),
			(store_troop_faction, ":cur_faction", ":cur_troop"), 
			(try_begin),
				(eq, ":cur_faction", "fac_kingdom_1"),
				(val_add, ":all_parties", 1),
				(try_begin),
					(troop_slot_eq, ":cur_troop", slot_troop_support_hero, 1), 
					(val_add, ":sup_parties", 1),
				(try_end), 
			(try_end), 
		(try_end), 	
		(val_div, ":all_parties", 2), 
		(ge, ":sup_parties", ":all_parties"),
	]), 

  # script_cf_troop_get_random_center_of_faction_except_center
  # Input: arg1 = faction_no arg2 = except_center_no
  # Output: reg0 = center_no (Can fail)
  ("cf_troop_get_random_center_of_faction_except_center",
    [
      (store_script_param_1, ":faction_no"),
      (store_script_param_2, ":except_center_no"),

      (assign, ":num_centers", 0),
      (try_for_range, ":center_no", centers_begin, centers_end),
		(store_faction_of_party, ":town_faction", ":center_no"),
		(eq, ":town_faction", ":faction_no"),
        (neq, ":center_no", ":except_center_no"),
        (val_add, ":num_centers", 1),
      (try_end),

      (gt, ":num_centers", 0),
      (store_random_in_range, ":random_center", 0, ":num_centers"),
      (assign, ":end_cond", centers_end),
      (try_for_range, ":center_no", centers_begin, ":end_cond"),
        (neg|party_slot_eq, ":center_no", slot_party_type, spt_castle),
		(store_faction_of_party, ":town_faction", ":center_no"),
		(eq, ":town_faction", ":faction_no"),
        (neq, ":center_no", ":except_center_no"),
        (val_sub, ":random_center", 1),
        (lt, ":random_center", 0),
        (assign, ":target_center", ":center_no"),
        (assign, ":end_cond", 0),
      (try_end),
      (assign, reg0, ":target_center"),
  ]),	

	#oim_check_radzivil_sneak_in
 	("cf_oim_check_radzivil_sneak_in", 
	[
		(assign, ":result", 2), 
		##armor
		#(try_begin),
		#	(troop_has_item_equipped, "trp_player", "itm_poland_uniforma_german_line"), 
		#	(val_add, ":result", 1), 
		#(else_try),
		#	(troop_has_item_equipped, "trp_player", "itm_poland_uniforma_german_line_musketeer"), 
		#	(val_add, ":result", 1), 
		#(else_try),
		#	(troop_has_item_equipped, "trp_player", "itm_evropa_pika_uniforma"), 
		#	(val_add, ":result", 1), 
		#(try_end),
		##head
		#(try_begin),
		#	(troop_has_item_equipped, "trp_player", "itm_morion"), 
		#	(val_add, ":result", 1), 
		#(else_try),
		#	(troop_has_item_equipped, "trp_player", "itm_morion_good"), 
		#	(val_add, ":result", 1), 
		#(else_try),
		#	(troop_has_item_equipped, "trp_player", "itm_morion_perfect"), 
		#	(val_add, ":result", 1), 
		#(else_try),
		#	(troop_has_item_equipped, "trp_player", "itm_kabasset"), 
		#	(val_add, ":result", 1), 
		#(try_end),
		(eq, ":result", 2), 
	]), 
	
	#oim_kill_radzivill
	("oim_kill_radzivill",
	[
	]), 


	
	#get_random_troop_from_party
	# Input: arg1 = party_no 
   ("get_random_troop_from_party",
   [
	  (store_script_param_1, ":party_no"),
	  (assign, ":ended", 0),
      (party_get_num_companion_stacks, ":stacks_count", ":party_no"),
      (try_for_range, ":cur_stack", 0, ":stacks_count"),
		(eq, ":ended", 0),
		(store_random_in_range,":cur_stack", 0,":stacks_count"),
		(party_stack_get_troop_id,  ":stack_troop",":party_no",":cur_stack"),
        (try_begin),
        (neg|troop_is_hero, ":stack_troop"),
        (party_stack_get_size,   ":stack_size",":party_no",":cur_stack"),
        (party_stack_get_num_wounded, ":wounded_count",":party_no",":cur_stack"),
        (val_sub, ":stack_size", ":wounded_count"),
			(try_begin),
				(gt, ":stack_size", 0),
				(assign, ":ended", 1),
				(assign, reg0, ":stack_troop"),
			(try_end),	
	    (try_end),
      (try_end),
   ]),
   
   #count_lords_of_faction
   #Input: arg1 = faction_no 
   #Output reg = count
   ("count_lords_of_faction", 
   [
    (store_script_param_1, ":faction_no"),
    (assign, ":count_lords", 0),
    (try_for_range, ":lord_no", heroes_begin, heroes_end),
		(store_troop_faction, ":lord_faction_no", ":lord_no"),
		(eq, ":faction_no", ":lord_faction_no"),
		(troop_slot_eq, ":lord_no", slot_troop_occupation, slto_kingdom_hero),
		(troop_get_slot, ":lord_party", ":lord_no", slot_troop_leaded_party),
		(ge, ":lord_party", 0),
		(val_add, ":count_lords", 1),
	(try_end),
	(assign, reg0, ":count_lords"),
   ]), 

   ("oim_count_suppurters", 
   [
    (store_script_param_1, ":faction_no"),
    (assign, ":count_lords", 0),
	(assign, ":count_lords_all", 0),
    (try_for_range, ":lord_no", heroes_begin, heroes_end),
		(store_troop_faction, ":lord_faction_no", ":lord_no"),
		(eq, ":faction_no", ":lord_faction_no"),
		(troop_slot_eq, ":lord_no", slot_troop_occupation, slto_kingdom_hero),
		(troop_get_slot, ":lord_party", ":lord_no", slot_troop_leaded_party),
		(ge, ":lord_party", 0),
		(val_add, ":count_lords_all", 1),
		(try_begin), 
			(troop_slot_eq, ":lord_no", slot_troop_support_hero, 1), 
			(val_add, ":count_lords", 1),
		(try_end), 
	(try_end),
	(val_mul, ":count_lords", 100), 
	(val_div, ":count_lords", ":count_lords_all"), 
	(assign, reg0, ":count_lords"),
   ]), 

    #check_nearest_enemy
    ("cf_set_nearby_agents_hostile",
    [
      (get_player_agent_no, ":player_agent"),
      (agent_is_alive, ":player_agent"),
      (agent_get_position, pos1, ":player_agent"),
      (set_fixed_point_multiplier, 100),
      (try_for_agents,":cur_agent"),
        (neq, ":cur_agent", ":player_agent"),
        (agent_is_alive, ":cur_agent"),
        (agent_is_human, ":cur_agent"),
        #(neg|agent_is_ally, ":cur_agent"),
        (agent_get_position, pos2, ":cur_agent"),
        (get_distance_between_positions, ":cur_distance", pos1, pos2),
        (le, ":cur_distance", 4500), #45 meters
		(agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
		(try_begin),
			(neq, ":cur_agent_troop", "trp_player"),
			(agent_set_team, ":cur_agent", 1),
		(try_end),
      (try_end),
  ]),

	("select_random_polish_center",
	[
	 (store_random_in_range, ":random", 0, 18), 
	 (try_begin),
	 	(eq, ":random", 0), 
	 	(assign, reg0, "p_town_1"),
	 (else_try), 	
	 	(eq, ":random", 1), 
	 	(assign, reg0, "p_town_2"),
	 (else_try), 	
	 	(eq, ":random", 2), 
	 	(assign, reg0, "p_town_4"),
	 (else_try), 	
	 	(eq, ":random", 3), 
	 	(assign, reg0, "p_town_6"),
	 (else_try), 	
	 	(eq, ":random", 4), 
	 	(assign, reg0, "p_town_7"),
	 (else_try), 	
	 	(eq, ":random", 5), 
	 	(assign, reg0, "p_town_12"),
	 (else_try), 	
	 	(eq, ":random", 6), 
	 	(assign, reg0, "p_town_16"),
	 (else_try), 	
	 	(eq, ":random", 7), 
	 	(assign, reg0, "p_castle_1"),
	 (else_try), 	
	 	(eq, ":random", 8), 
	 	(assign, reg0, "p_castle_11"),
	 (else_try), 	
	 	(eq, ":random", 9), 
	 	(assign, reg0, "p_castle_12"),
	 (else_try), 	
	 	(eq, ":random", 10), 
	 	(assign, reg0, "p_castle_13"),
	 (else_try), 	
	 	(eq, ":random", 11), 
	 	(assign, reg0, "p_castle_14"),
	 (else_try), 	
	 	(eq, ":random", 12), 
	 	(assign, reg0, "p_castle_20"),
	 (else_try), 	
	 	(eq, ":random", 13), 
	 	(assign, reg0, "p_castle_23"),
	 (else_try), 	
	 	(eq, ":random", 14), 
	 	(assign, reg0, "p_castle_24"),
	 (else_try), 	
	 	(eq, ":random", 15), 
	 	(assign, reg0, "p_castle_28"),
	 (else_try), 	
	 	(eq, ":random", 16), 
	 	(assign, reg0, "p_castle_34"),
	 (else_try), 	
	 	(assign, reg0, "p_castle_36"),
	 (try_end),
	 ]),

    ("oim_get_scene_walls_destroyed",
    [	
		(store_script_param_1, ":party_no"),
		(try_begin),
			(eq, ":party_no", "p_town_1"),
			(assign, reg0, "scn_town_1_destroyed_walls"),
		(else_try),
			(eq, ":party_no", "p_town_2"),
			(assign, reg0, "scn_town_2_destroyed_walls"),
		(else_try),
			(eq, ":party_no", "p_town_3"),
			(assign, reg0, "scn_town_3_destroyed_walls"),
		(else_try),
			(eq, ":party_no", "p_town_4"),
			(assign, reg0, "scn_town_4_destroyed_walls"),
		(else_try),
			(eq, ":party_no", "p_town_5"),
			(assign, reg0, "scn_town_5_destroyed_walls"),
		(else_try),
			(eq, ":party_no", "p_town_6"),
			(assign, reg0, "scn_town_6_destroyed_walls"),
		(else_try),
			(eq, ":party_no", "p_town_7"),
			(assign, reg0, "scn_town_7_destroyed_walls"),
		(else_try),
			(eq, ":party_no", "p_town_8"),
			(assign, reg0, "scn_town_8_destroyed_walls"),
		(else_try),
			(eq, ":party_no", "p_town_9"),
			(assign, reg0, "scn_town_9_destroyed_walls"),
		(else_try),
			(eq, ":party_no", "p_town_10"),
			(assign, reg0, "scn_town_10_destroyed_walls"),
		(else_try),
			(eq, ":party_no", "p_town_11"),
			(assign, reg0, "scn_town_11_destroyed_walls"),
		(else_try),
			(eq, ":party_no", "p_town_12"),
			(assign, reg0, "scn_town_12_destroyed_walls"),
		(else_try),
			(eq, ":party_no", "p_town_13"),
			(assign, reg0, "scn_town_13_destroyed_walls"),
		(else_try),
			(eq, ":party_no", "p_town_14"),
			(assign, reg0, "scn_town_14_destroyed_walls"),
		(else_try),
			(eq, ":party_no", "p_town_15"),
			(assign, reg0, "scn_town_15_destroyed_walls"),
		(else_try),
			(eq, ":party_no", "p_town_16"),
			(assign, reg0, "scn_town_16_destroyed_walls"),
		(else_try),
			(eq, ":party_no", "p_town_17"),
			(assign, reg0, "scn_town_17_destroyed_walls"),
		(else_try),
			(eq, ":party_no", "p_town_18"),
			(assign, reg0, "scn_town_18_destroyed_walls"),
		(else_try),
			(eq, ":party_no", "p_castle_1"),
			(assign, reg0, "scn_castle_1_destroyed_walls"),
		(else_try),
			(eq, ":party_no", "p_castle_2"),
			(assign, reg0, "scn_castle_2_destroyed_walls"),
		(else_try),
			(eq, ":party_no", "p_castle_3"),
			(assign, reg0, "scn_castle_3_destroyed_walls"),
		(else_try),
			(eq, ":party_no", "p_castle_4"),
			(assign, reg0, "scn_castle_4_destroyed_walls"),
		(else_try),
			(eq, ":party_no", "p_castle_5"),
			(assign, reg0, "scn_castle_5_destroyed_walls"),
		(else_try),
			(eq, ":party_no", "p_castle_6"),
			(assign, reg0, "scn_castle_6_destroyed_walls"),
		(else_try),
			(eq, ":party_no", "p_castle_7"),
			(assign, reg0, "scn_castle_7_destroyed_walls"),
		(else_try),
			(eq, ":party_no", "p_castle_8"),
			(assign, reg0, "scn_castle_8_destroyed_walls"),
		(else_try),
			(eq, ":party_no", "p_castle_9"),
			(assign, reg0, "scn_castle_9_destroyed_walls"),
		(else_try),
			(eq, ":party_no", "p_castle_10"),
			(assign, reg0, "scn_castle_10_destroyed_walls"),
		(else_try),
			(eq, ":party_no", "p_castle_11"),
			(assign, reg0, "scn_castle_11_destroyed_walls"),
		(else_try),
			(eq, ":party_no", "p_castle_12"),
			(assign, reg0, "scn_castle_12_destroyed_walls"),
		(else_try),
			(eq, ":party_no", "p_castle_13"),
			(assign, reg0, "scn_castle_13_destroyed_walls"),
		(else_try),
			(eq, ":party_no", "p_castle_14"),
			(assign, reg0, "scn_castle_14_destroyed_walls"),
		(else_try),
			(eq, ":party_no", "p_castle_15"),
			(assign, reg0, "scn_castle_15_destroyed_walls"),
		(else_try),
			(eq, ":party_no", "p_castle_16"),
			(assign, reg0, "scn_castle_16_destroyed_walls"),
		(else_try),
			(eq, ":party_no", "p_castle_17"),
			(assign, reg0, "scn_castle_17_destroyed_walls"),
		(else_try),
			(eq, ":party_no", "p_castle_18"),
			(assign, reg0, "scn_castle_18_destroyed_walls"),
		(else_try),
			(eq, ":party_no", "p_castle_19"),
			(assign, reg0, "scn_castle_19_destroyed_walls"),
		(else_try),
			(eq, ":party_no", "p_castle_20"),
			(assign, reg0, "scn_castle_20_destroyed_walls"),
		(else_try),
			(eq, ":party_no", "p_castle_21"),
			(assign, reg0, "scn_castle_21_destroyed_walls"),
		(else_try),
			(eq, ":party_no", "p_castle_22"),
			(assign, reg0, "scn_castle_22_destroyed_walls"),
		(else_try),
			(eq, ":party_no", "p_castle_23"),
			(assign, reg0, "scn_castle_23_destroyed_walls"),
		(else_try),
			(eq, ":party_no", "p_castle_24"),
			(assign, reg0, "scn_castle_24_destroyed_walls"),
		(else_try),
			(eq, ":party_no", "p_castle_25"),
			(assign, reg0, "scn_castle_25_destroyed_walls"),
		(else_try),
			(eq, ":party_no", "p_castle_26"),
			(assign, reg0, "scn_castle_26_destroyed_walls"),
		(else_try),
			(eq, ":party_no", "p_castle_27"),
			(assign, reg0, "scn_castle_27_destroyed_walls"),
		(else_try),
			(eq, ":party_no", "p_castle_28"),
			(assign, reg0, "scn_castle_28_destroyed_walls"),
		(else_try),
			(eq, ":party_no", "p_castle_29"),
			(assign, reg0, "scn_castle_29_destroyed_walls"),
		(else_try),
			(eq, ":party_no", "p_castle_30"),
			(assign, reg0, "scn_castle_30_destroyed_walls"),
		(else_try),
			(eq, ":party_no", "p_castle_31"),
			(assign, reg0, "scn_castle_31_destroyed_walls"),
		(else_try),
			(eq, ":party_no", "p_castle_32"),
			(assign, reg0, "scn_castle_32_destroyed_walls"),
		(else_try),
			(eq, ":party_no", "p_castle_33"),
			(assign, reg0, "scn_castle_33_destroyed_walls"),
		(else_try),
			(eq, ":party_no", "p_castle_34"),
			(assign, reg0, "scn_castle_34_destroyed_walls"),
		(else_try),
			(eq, ":party_no", "p_castle_35"),
			(assign, reg0, "scn_castle_35_destroyed_walls"),
		(else_try),
			(eq, ":party_no", "p_castle_36"),
			(assign, reg0, "scn_castle_36_destroyed_walls"),
		(else_try),
			(eq, ":party_no", "p_castle_37"),
			(assign, reg0, "scn_castle_37_destroyed_walls"),
		(else_try),
			(eq, ":party_no", "p_castle_38"),
			(assign, reg0, "scn_castle_38_destroyed_walls"),
		(else_try),
			(eq, ":party_no", "p_castle_39"),
			(assign, reg0, "scn_castle_39_destroyed_walls"),
		(else_try),
			(assign, reg0, "scn_castle_40_destroyed_walls"),
		(try_end),
	]),

	#script_oim_check_dmitriy_auto_msg
    ("cf_oim_check_dmitriy_auto_msg",
	[
		(try_begin), 
			(assign, ":count", 0), 
			(try_for_range, ":troop_no", kingdom_heroes_begin, kingdom_heroes_end), 
				(store_troop_faction, ":troop_faction", ":troop_no"),	
				(try_begin), 
					(eq, ":troop_faction", "fac_player_supporters_faction"), 
					(val_add, ":count", 1), 
				(try_end), 
			(try_end), 
		(try_end), 
		(eq, "$supported_pretender", "trp_kingdom_2_pretender"),
		(ge, ":count", 5), 
	]),
	
	#cf_oim_get_tavern_visitor
	("cf_oim_get_tavern_visitor",
	[
		(store_faction_of_party, ":faction_no", "$g_encountered_party"), 
		(try_begin), 
			(eq, ":faction_no", "fac_kingdom_1"), 
			(assign, reg0, "trp_oim_tavern_visitor_rp"), 
		(else_try), 	
			(eq, ":faction_no", "fac_kingdom_2"), 
			(assign, reg0, "trp_oim_tavern_visitor_mc"), 
		(else_try), 	
			(eq, ":faction_no", "fac_kingdom_3"), 
			(assign, reg0, "trp_oim_tavern_visitor_tatar"), 
		(else_try), 	
			(eq, ":faction_no", "fac_kingdom_4"), 
			(assign, reg0, "trp_oim_tavern_visitor_swed"), 
		(else_try), 	
			(assign, reg0, "trp_oim_tavern_visitor_cossack"), 
		(try_end), 	
	]),
	
	#oim_get_alcohol_status
	("oim_get_alcohol_status",
	[
		(str_clear, s2), 
		(troop_get_slot, ":alc_count", "$g_talk_troop", slot_troop_alcohol_count), 
		(try_begin),
			(eq, ":alc_count", 0), 
			(str_store_string, s2, "@ ^not drunk"), 
		(else_try),
			(is_between, ":alc_count", 1, 3), 
			(str_store_string, s2, "@ ^slightly drinken"),
		(else_try),
			(is_between, ":alc_count", 3, 6), 
			(str_store_string, s2, "@ ^quite drunk"),
		(else_try),
			(ge, ":alc_count", 6), 
			(str_store_string, s2, "@ ^cant say few words..."),
		(try_end),
		(try_begin), 
			(eq, "$g_talk_troop_faction", "fac_kingdom_3"),
			(str_store_string, s2, "@ ^not drunk"), 
		(try_end),
	]),
	
	#get_tavern_visitor_store_to_s2
	("get_tavern_visitor_store_to_s2",
	[
		(str_clear, s2), 
		(store_random_in_range, ":rand", 0, 2), 
		(try_begin), 
			(eq, "$g_talk_troop_faction", "fac_kingdom_1"), 
			(try_begin),
				(eq, ":rand", 0), 
				(str_store_string, s2, "str_tavern_rp_story_0"), 
			(else_try),
				(eq, ":rand", 1), 
				(str_store_string, s2, "str_tavern_rp_story_1"), 
			(else_try),
				(str_store_string, s2, "str_tavern_rp_story_2"), 
			(try_end),
		(else_try),
			(eq, "$g_talk_troop_faction", "fac_kingdom_2"), 
			(try_begin),
				(eq, ":rand", 0), 
				(str_store_string, s2, "str_tavern_mc_story_0"), 
			(else_try),
				(eq, ":rand", 1), 
				(str_store_string, s2, "str_tavern_mc_story_1"), 
			(else_try),
				(str_store_string, s2, "str_tavern_mc_story_2"), 
			(try_end),
		(else_try),
			(eq, "$g_talk_troop_faction", "fac_kingdom_3"), 
			(try_begin),
				(eq, ":rand", 0), 
				(str_store_string, s2, "str_tavern_tatar_story_0"), 
			(else_try),
				(eq, ":rand", 1), 
				(str_store_string, s2, "str_tavern_tatar_story_1"), 
			(else_try),
				(str_store_string, s2, "str_tavern_tatar_story_2"), 
			(try_end),	
		(else_try),
			(eq, "$g_talk_troop_faction", "fac_kingdom_4"), 
			(try_begin),
				(eq, ":rand", 0), 
				(str_store_string, s2, "str_tavern_swed_story_0"), 
			(else_try),
				(eq, ":rand", 1), 
				(str_store_string, s2, "str_tavern_swed_story_1"), 
			(else_try),
				(str_store_string, s2, "str_tavern_swed_story_2"), 
			(try_end),				
		(else_try),
			(eq, "$g_talk_troop_faction", "fac_kingdom_5"), 
			(try_begin),
				(eq, ":rand", 0), 
				(str_store_string, s2, "str_tavern_cossack_story_0"), 
			(else_try),
				(eq, ":rand", 1), 
				(str_store_string, s2, "str_tavern_cossack_story_1"), 
			(else_try),
				(str_store_string, s2, "str_tavern_cossack_story_2"), 
			(try_end),				
		(try_end), 

	]),
	
	#oim_set_hero_hp
	("oim_set_hero_hp",
	[
		##(store_mul, ":dest", 10, "$g_oim_hero_alcohol_count"),
		##(store_sub, ":dest", 100, ":dest"),
		##(troop_set_health, "trp_player", ":dest"),		
	]),
	
	#oim_setup_fighter
	("cf_oim_setup_fighter",
	[
		(call_script, "script_cf_oim_get_tavern_visitor"),
		(assign, ":troop", reg0),
		(troop_set_health, ":troop", 100), 
		(troop_get_slot, ":alcohol_count", ":troop", slot_troop_alcohol_count),
		(store_mul, ":dest", 3, ":alcohol_count"),
		(store_sub, ":dest", 100, ":dest"),
		(troop_set_health, ":troop", ":dest"),		
		(assign, reg0, ":troop"),
	]),
	
	#oim_get_distance_for_ranged_duel
	("oim_get_distance_for_ranged_duel",
	[
		(try_begin), 
			(lt, "$g_oim_bet", 11), 
			(assign, reg0, 20), 
		(else_try), 
			(gt, "$g_oim_bet", 10), 
			(lt, "$g_oim_bet", 25), 
			(assign, reg0, 20), 
		(else_try), 
			(assign, reg0, 30), 
		(try_end),
		(try_begin),
			(ge, "$g_oim_hero_alcohol_count", 3),
			(lt, "$g_oim_hero_alcohol_count", 6),
			(val_add, reg0, 10), 
		(else_try), 
			(ge, "$g_oim_hero_alcohol_count", 6), 
			(val_add, reg0, 20), 
		(try_end),	
	]), 

	#script_remove_captured_enemies
   ("remove_captured_enemies",
    [
	 (party_get_num_prisoner_stacks, ":num_stacks", "p_temp_party"),
     (try_for_range, ":stack_no", 0, ":num_stacks"),
       (party_prisoner_stack_get_troop_id, ":cur_troop", "p_temp_party", ":stack_no"),
	   (neg|troop_is_hero, ":cur_troop"),
       (party_stack_get_size, ":stack_size","p_temp_party",":stack_no"),
       (party_remove_members,"p_temp_party",":cur_troop",":stack_size"),
     (try_end),
	]), 
	
	
	#script_spawn_enemies_as_deserters
   ("spawn_enemies_as_deserters",
    [
	 (set_spawn_radius, 12),
     (spawn_around_party, "$g_enemy_party", "pt_deserters"),
	 (assign, ":deserter_party", reg0),
	 (party_get_num_prisoner_stacks, ":num_stacks", "p_temp_party"),
     (try_for_range, ":stack_no", 0, ":num_stacks"),
       (party_prisoner_stack_get_troop_id, ":cur_troop", "p_temp_party", ":stack_no"),
	   (neg|troop_is_hero, ":cur_troop"),
       (party_stack_get_size, ":stack_size","p_temp_party",":stack_no"),
       (party_add_members,":deserter_party",":cur_troop",":stack_size"),
     (try_end),
	]), 
	
		
	#script_capture_as_guards
   ("capture_as_guards",
    [
	 (party_get_num_companion_stacks, ":num_stacks", "p_temp_party"),
     (try_for_range, ":stack_no", 0, ":num_stacks"),
       (party_stack_get_troop_id, ":cur_troop", "p_temp_party", ":stack_no"),
	   (neg|troop_is_hero, ":cur_troop"),
       (party_stack_get_size, ":stack_size","p_temp_party",":stack_no"),
       (party_add_members,"$current_town",":cur_troop",":stack_size"),
     (try_end),
	 
	]), 
	
	
	#script_spawn_prisioners_as_deserters
   ("spawn_prisioners_as_deserters",
    [
	  (assign, ":swadian_party", 0),
	  (assign, ":vaegir_party", 0),
	  (assign, ":khergit_party", 0),
	  (assign, ":nord_party", 0),
	  (assign, ":rhodok_party", 0),
	  (assign, ":other_party", 0),
	  (party_get_num_companion_stacks, ":num_stacks", "p_temp_party"),
	  (try_for_range, ":stack_no", 0, ":num_stacks"),
       (party_stack_get_troop_id, ":cur_troop", "p_temp_party", ":stack_no"),
	   (neg|troop_is_hero, ":cur_troop"),
       (party_stack_get_size, ":stack_size","p_temp_party",":stack_no"),
	   (try_begin),
			(is_between,":cur_troop","trp_swadian_recruit","trp_vaegir_recruit"),
			(try_begin),
				(eq, ":swadian_party", 0),
				(set_spawn_radius, 12),
				(spawn_around_party, "$g_enemy_party", "pt_deserters"),
				(assign, ":swadian_party", reg0),
			(try_end),
			(party_add_members,":swadian_party",":cur_troop",":stack_size"),
	   (else_try),
			(is_between,":cur_troop","trp_vaegir_recruit","trp_khergit_tribesman"),
			(try_begin),
				(eq, ":vaegir_party", 0),
				(set_spawn_radius, 12),
				(spawn_around_party, "$g_enemy_party", "pt_deserters"),
				(assign, ":vaegir_party", reg0),
			(try_end),
			(party_add_members,":vaegir_party",":cur_troop",":stack_size"),
	   (else_try),
			(is_between,":cur_troop","trp_khergit_tribesman","trp_nord_recruit"),
			(try_begin),
				(eq, ":khergit_party", 0),
				(set_spawn_radius, 12),
				(spawn_around_party, "$g_enemy_party", "pt_deserters"),
				(assign, ":khergit_party", reg0),
			(try_end),
			(party_add_members,":khergit_party",":cur_troop",":stack_size"),	
	   (else_try),
			(is_between,":cur_troop","trp_nord_recruit","trp_rhodok_tribesman"),
			(try_begin),
				(eq, ":nord_party", 0),
				(set_spawn_radius, 12),
				(spawn_around_party, "$g_enemy_party", "pt_deserters"),
				(assign, ":nord_party", reg0),
			(try_end),
			(party_add_members,":nord_party",":cur_troop",":stack_size"),	
	   (else_try),
			(is_between,":cur_troop","trp_rhodok_tribesman","trp_looter"),
			(try_begin),
				(eq, ":rhodok_party", 0),
				(set_spawn_radius, 12),
				(spawn_around_party, "$g_enemy_party", "pt_deserters"),
				(assign, ":rhodok_party", reg0),
			(try_end),
			(party_add_members,":rhodok_party",":cur_troop",":stack_size"),	
	   (else_try),
			(try_begin),
				(eq, ":other_party", 0),
				(set_spawn_radius, 12),
				(spawn_around_party, "$g_enemy_party", "pt_deserters"),
				(assign, ":other_party", reg0),
			(try_end),
			(party_add_members,":other_party",":cur_troop",":stack_size"),	
	   (try_end),	   
       
     (try_end),
	  
	 
	]), 
	
	#get_map_for_wagenburg_battle
	("get_map_for_wagenburg_battle",
	[
         (store_script_param_1, ":party"),
		(call_script, "script_party_count_fit_regulars", ":party"),
        (assign, ":party_size", reg0),
		(try_begin), 
			(le, ":party_size", 20), 
			(assign, reg0, "scn_oim_wagenburg_small"),
		(else_try),
			(is_between, ":party_size", 20, 50), 
			(assign, reg0, "scn_oim_wagenburg_medium"),
		(else_try),
			(assign, reg0, "scn_oim_wagenburg_big"),
		(try_end), 
	]),
	
 
	 # script_oim_get_tavern_scene
	 # In: pary_no
	 # Out: reg0 = tavern_scene
	 # scn_ttr_castle_tavern
	 ("oim_get_tavern_scene",
     [	
		 (store_script_param_1, ":party_no"),
		 (try_begin),
			 (eq, ":party_no", "p_castle_1"),
			 (assign, reg0, "scn_pol_castle_tavern"),
		 (else_try),
			 (eq, ":party_no", "p_castle_2"),
			 (assign, reg0, "scn_ttr_castle_tavern"),
		 (else_try),
			 (eq, ":party_no", "p_castle_3"),
			 (assign, reg0, "scn_evro_castle_tavern"),
		 (else_try),
			 (eq, ":party_no", "p_castle_4"),
			 (assign, reg0, "scn_evro_castle_tavern"),
		 (else_try),
			 (eq, ":party_no", "p_castle_5"),
			 (assign, reg0, "scn_evro_castle_tavern"),
		 (else_try),
			 (eq, ":party_no", "p_castle_6"),
			 (assign, reg0, "scn_mosk_castle_tavern"),
		 (else_try),
			 (eq, ":party_no", "p_castle_7"),
			 (assign, reg0, "scn_town_7_tavern"),
		 (else_try),
			 (eq, ":party_no", "p_castle_8"),
			 (assign, reg0, "scn_pol_castle_tavern"),
		 (else_try),
			 (eq, ":party_no", "p_castle_9"),
			 (assign, reg0, "scn_pol_castle_tavern"),
		 (else_try),
			 (eq, ":party_no", "p_castle_10"),
			 (assign, reg0, "scn_evro_castle_tavern"),
		 (else_try),
			 (eq, ":party_no", "p_castle_11"),
			 (assign, reg0, "scn_evro_castle_tavern"),
		 (else_try),
			 (eq, ":party_no", "p_castle_12"),
			 (assign, reg0, "scn_evro_castle_tavern"),
		 (else_try),
			 (eq, ":party_no", "p_castle_13"),
			 (assign, reg0, "scn_pol_castle_tavern"),
		 (else_try),
			 (eq, ":party_no", "p_castle_14"),
			 (assign, reg0, "scn_ukr_castle_tavern"),
		 (else_try),
			 (eq, ":party_no", "p_castle_15"),
			 (assign, reg0, "scn_ukr_castle_tavern"),
		 (else_try),
			 (eq, ":party_no", "p_castle_16"),
			 (assign, reg0, "scn_ukr_castle_tavern"),
		 (else_try),
			 (eq, ":party_no", "p_castle_17"),
			 (assign, reg0, "scn_ttr_castle_tavern"),
		 (else_try),
			 (eq, ":party_no", "p_castle_18"),
			 (assign, reg0, "scn_mosk_castle_tavern"),
		 (else_try),
			 (eq, ":party_no", "p_castle_19"),
			 (assign, reg0, "scn_mosk_castle_tavern"),
		 (else_try),
			 (eq, ":party_no", "p_castle_20"),
			 (assign, reg0, "scn_pol_castle_tavern"),
		 (else_try),
			 (eq, ":party_no", "p_castle_21"),
			 (assign, reg0, "scn_ukr_castle_tavern"),
		 (else_try),
			 (eq, ":party_no", "p_castle_22"),
			 (assign, reg0, "scn_ttr_castle_tavern"),
		 (else_try),
			 (eq, ":party_no", "p_castle_23"),
			 (assign, reg0, "scn_pol_castle_tavern"),
		 (else_try),
			 (eq, ":party_no", "p_castle_24"),
			 (assign, reg0, "scn_pol_castle_tavern"),
		 (else_try),
			 (eq, ":party_no", "p_castle_25"),
			 (assign, reg0, "scn_pol_castle_tavern"),
		 (else_try),
			 (eq, ":party_no", "p_castle_26"),
			 (assign, reg0, "scn_pol_castle_tavern"),
		 (else_try),
			 (eq, ":party_no", "p_castle_27"),
			 (assign, reg0, "scn_mosk_castle_tavern"),
		 (else_try),
			 (eq, ":party_no", "p_castle_28"),
			 (assign, reg0, "scn_pol_castle_tavern"),
		 (else_try),
			 (eq, ":party_no", "p_castle_29"),
			 (assign, reg0, "scn_mosk_castle_tavern"),
		 (else_try),
			 (eq, ":party_no", "p_castle_30"),
			 (assign, reg0, "scn_ttr_castle_tavern"),
		 (else_try),
			 (eq, ":party_no", "p_castle_31"),
			 (assign, reg0, "scn_mosk_castle_tavern"),
		 (else_try),
			 (eq, ":party_no", "p_castle_32"),
			 (assign, reg0, "scn_evro_castle_tavern"),
		 (else_try),
			 (eq, ":party_no", "p_castle_33"),
			 (assign, reg0, "scn_mosk_castle_tavern"),
		 (else_try),
			 (eq, ":party_no", "p_castle_34"),
			 (assign, reg0, "scn_evro_castle_tavern"),
		 (else_try),
			 (eq, ":party_no", "p_castle_35"),
			 (assign, reg0, "scn_evro_castle_tavern"),
		 (else_try),
			 (eq, ":party_no", "p_castle_36"),
			 (assign, reg0, "scn_evro_castle_tavern"),
		 (else_try),
			 (eq, ":party_no", "p_castle_37"),
			 (assign, reg0, "scn_mosk_castle_tavern"),
		 (else_try),
			 (eq, ":party_no", "scn_ttr_castle_tavern"),
			 (assign, reg0, "scn_town_2_tavern"),
		 (else_try),
			 (eq, ":party_no", "p_castle_39"),
			 (assign, reg0, "scn_mosk_castle_tavern"),
		 (else_try),
			 (assign, reg0, "scn_ttr_castle_tavern"),
		 (try_end),
	 ]),
	
   
   


  #script_update_ransom_brokers_units_of_castle
  ("update_ransom_brokers_units_of_castle",
    [(try_for_range, ":castle_no", castles_begin, castles_end),
       (party_set_slot, ":castle_no", slot_center_ransom_broker, 0),
     (try_end),
     
     (try_for_range, ":troop_no", ransom_brokers_begin, ransom_brokers_end),
       (store_random_in_range, ":castle_no", castles_begin, castles_end),
       (party_set_slot, ":castle_no", slot_center_ransom_broker, ":troop_no"),
     (try_end),
    
     ]),

  #script_update_tavern_travelers_units_of_castle
  ("update_tavern_travelers_units_of_castle",
    [(try_for_range, ":castle_no", castles_begin, castles_end),
       (party_set_slot, ":castle_no", slot_center_tavern_traveler, 0),
     (try_end),
     
     (try_for_range, ":troop_no", tavern_travelers_begin, tavern_travelers_end),
       (store_random_in_range, ":castle_no", castles_begin, castles_end),
       (party_set_slot, ":castle_no", slot_center_tavern_traveler, ":troop_no"),
       (assign, ":end_cond", 15),
       (try_for_range, ":unused", 0, ":end_cond"),
         (store_random_in_range, ":info_faction", kingdoms_begin, kingdoms_end),
         (faction_slot_eq, ":info_faction", slot_faction_state, sfs_active),
         (neq, ":info_faction", "$players_kingdom"),
         (neq, ":info_faction", "fac_player_supporters_faction"),
         (party_set_slot, ":castle_no", slot_center_traveler_info_faction, ":info_faction"),
         (assign, ":end_cond", 0),
       (try_end),
     (try_end),
     ]),

	
 #script_update_mercen_units_of_castle
  ("update_mercen_units_of_castle",
    [(try_for_range, ":castle_no", castles_begin, castles_end),
      (store_random_in_range, ":troop_no", mercenary_troops_begin, mercenary_troops_end),
      (party_set_slot, ":castle_no", slot_center_mercenary_troop_type, ":troop_no"),
      (store_random_in_range, ":amount", 2, 10),
      (party_set_slot, ":castle_no", slot_center_mercenary_troop_amount, ":amount"),
    (try_end),
   ]),

	
  #script_update_booksellers_units_of_castle
  ("update_booksellers_units_of_castle",
    [(try_for_range, ":castle_no", castles_begin, castles_end),
       (party_set_slot, ":castle_no", slot_center_tavern_bookseller, 0),
     (try_end),
     
     (try_for_range, ":troop_no", tavern_booksellers_begin, tavern_booksellers_end),
       (store_random_in_range, ":castle_no", castles_begin, castles_end),
       (party_set_slot, ":castle_no", slot_center_tavern_bookseller, ":troop_no"),
     (try_end),
     ]),
	 
  #script_start_bunt
   ("start_bunt",
    [
	  (assign, ":companion_count", 0),
	  (assign, ":faction_count", 0),
	  (assign, ":troop_count", 0),
	  
	  (party_get_num_companion_stacks, ":num_stacks","p_main_party"),
      (try_for_range, ":i_stack", 0, ":num_stacks"),
        (party_stack_get_troop_id, ":stack_troop","p_main_party",":i_stack"),
        (try_begin),
			(neg|troop_is_hero, ":stack_troop"),
			(party_stack_get_size, ":stack_size","p_main_party",":i_stack"),
			(party_stack_get_num_wounded, ":num_wounded","p_main_party",":i_stack"),
			(val_sub, ":stack_size", ":num_wounded"),
			(try_begin),
				(is_between, ":stack_troop", companions_begin, companions_end),
				(is_between, ":stack_troop", "trp_kingdom_1_pretender", "trp_heroes_end"),
				(is_between, ":stack_troop", "trp_local_merchant", "trp_spy_partner"),
				(val_add, ":companion_count", ":stack_size"),
			(else_try),
				(val_add, ":troop_count", ":stack_size"),
				(store_troop_faction,":cur_faction",":stack_troop"),
				(try_begin),
					(eq, ":faction_count", 0),
					(troop_set_slot, "trp_array_factions", 0, ":cur_faction"),
					(troop_set_slot, "trp_array_faction_troop_count_without_npc", 0, ":stack_size"),
					(val_add, ":faction_count", 1),
				(else_try),
					(assign, ":is_new", 1),
					(try_for_range, ":cur_ind", 0, ":faction_count"),
						(troop_get_slot, ":arr_faction", "trp_array_factions", ":cur_ind"),
						(try_begin),
							(eq, ":cur_faction", ":arr_faction"),
							(troop_get_slot, ":arr_count", "trp_array_faction_troop_count_without_npc", ":cur_faction"),
							(val_add, ":arr_count", ":stack_size"),
							(troop_set_slot, "trp_array_faction_troop_count_without_npc", ":arr_faction", ":arr_count"),
							(assign,  ":is_new", 0),
						(try_end),
					(try_end),
					(try_begin),
						(eq, ":is_new", 1),
						(troop_set_slot, "trp_array_factions", ":faction_count", ":cur_faction"),
						(troop_set_slot, "trp_array_faction_troop_count_without_npc", ":faction_count", ":stack_size"),
						(val_add, ":faction_count", 1),
					(try_end),
				(try_end),
			(try_end),
		(try_end),
	  (try_end),
	 	
	  (try_begin),
	    (eq, ":troop_count", 0),
		(assign, ":go_next", 0),
	  (else_try),
		(lt, ":troop_count", 5),
		(set_spawn_radius, 0),
        (spawn_around_party, "p_main_party", "pt_deserters"),
        (assign, "$oim_deserters_party", reg0),		
		(party_set_ai_behavior, "$oim_deserters_party", ai_bhvr_attack_party),
        (party_set_ai_object, "$oim_deserters_party", "p_main_party"),
        (party_set_flags, "$oim_deserters_party", pf_default_behavior, 0),
		(party_get_num_companion_stacks, ":num_stacks","p_main_party"),
		(try_for_range, ":i_stack", 0, ":num_stacks"),
			(party_stack_get_troop_id, ":stack_troop","p_main_party",":i_stack"),
			(try_begin),
				(neg|troop_is_hero, ":stack_troop"),
				(neg|is_between, ":stack_troop", companions_begin, companions_end),
				(neg|is_between, ":stack_troop", "trp_kingdom_1_pretender", "trp_heroes_end"),
				(neg|is_between, ":stack_troop", "trp_local_merchant", "trp_spy_partner"),
				(party_stack_get_size, ":stack_size","p_main_party",":i_stack"),
				(party_stack_get_num_wounded, ":num_wounded","p_main_party",":i_stack"), 
				(party_remove_members_wounded_first,"p_main_party",":stack_troop",":num_wounded"),
				(val_sub, ":stack_size", ":num_wounded"),
				(party_remove_members, "p_main_party", ":stack_troop", ":stack_size"),
				(party_add_members,"$oim_deserters_party", ":stack_troop",":stack_size"),
			(try_end),
		(try_end),
		(assign, ":go_next", 1),
	  (else_try),
		(try_begin),
			(le, ":faction_count", 3),
			(assign, ":go_next", 2),
		(else_try),
			(assign, ":smallest_index", 0),
			(assign, ":smallest_count", ":troop_count"),
			(try_for_range, ":cur_ind", 0, ":faction_count"),
				(troop_get_slot, ":arr_faction", "trp_array_factions", ":cur_ind"),
				(troop_get_slot, ":arr_count", "trp_array_faction_troop_count_without_npc", ":arr_faction"),
				(try_begin),
					(le, ":arr_count", ":smallest_count"),
					(assign, ":smallest_index", ":arr_faction"),
					(assign, ":smallest_count", ":arr_count"),
				(try_end),
			(try_end),
			(store_add, ":start_count", ":troop_count", ":companion_count"),
			(val_add, ":start_count", 1),
			(store_sub, ":troop_wo_npc", ":troop_count", ":smallest_count"),
			(store_add, ":player_troops_count", ":smallest_count", ":companion_count"),
			(val_add, ":player_troops_count", 1),
			(store_mod, ":koef", ":player_troops_count", ":start_count"),
			(try_begin),
				(this_or_next|lt, ":koef", 15),
				(gt, ":troop_wo_npc", ":player_troops_count"),
				(assign, ":go_next", 2),
			(try_end),
		(try_end),
		(try_begin),
			(eq, ":go_next", 2),
			(set_spawn_radius, 0),
			(spawn_around_party, "p_main_party", "pt_deserters"),
			(assign, "$oim_deserters_party", reg0),			
			(party_set_ai_behavior, "$oim_deserters_party", ai_bhvr_attack_party),
			(party_set_ai_object, "$oim_deserters_party", "p_main_party"),
			(party_set_flags, "$oim_deserters_party", pf_default_behavior, 0),
			(party_get_num_companion_stacks, ":num_stacks","p_main_party"),
			(try_for_range, ":i_stack", 0, ":num_stacks"),
				(party_stack_get_troop_id, ":stack_troop","p_main_party",":i_stack"),
				(try_begin),
					(neg|troop_is_hero, ":stack_troop"),
					(neg|is_between, ":stack_troop", companions_begin, companions_end),
					(neg|is_between, ":stack_troop", "trp_kingdom_1_pretender", "trp_heroes_end"),
					(neg|is_between, ":stack_troop", "trp_local_merchant", "trp_spy_partner"),
					(party_stack_get_size, ":stack_size","p_main_party",":i_stack"),
					(party_stack_get_num_wounded, ":num_wounded","p_main_party",":i_stack"),
					(party_remove_members_wounded_first,"p_main_party",":stack_troop",":num_wounded"),
					(val_sub, ":stack_size", ":num_wounded"),
					(store_div, ":number", ":stack_size", 5),
					(val_add, ":number", 1),
					(val_sub, ":stack_size", ":number"),
					(party_remove_members, "p_main_party", ":stack_troop", ":stack_size"),
					(party_add_members,"$oim_deserters_party", ":stack_troop",":stack_size"),
				(try_end),
			(try_end),
			(assign, ":go_next", 1),
		(else_try),
			(set_spawn_radius, 0),
			(spawn_around_party, "p_main_party", "pt_deserters"),
			(assign, "$oim_deserters_party", reg0),			
			(party_set_ai_behavior, "$oim_deserters_party", ai_bhvr_attack_party),
			(party_set_ai_object, "$oim_deserters_party", "p_main_party"),
			(party_set_flags, "$oim_deserters_party", pf_default_behavior, 0),
			(party_get_num_companion_stacks, ":num_stacks","p_main_party"),
			(try_for_range, ":i_stack", 0, ":num_stacks"),
				(party_stack_get_troop_id, ":stack_troop","p_main_party",":i_stack"),
				(try_begin),
					(neg|troop_is_hero, ":stack_troop"),
					(neg|is_between, ":stack_troop", companions_begin, companions_end),
					(neg|is_between, ":stack_troop", "trp_kingdom_1_pretender", "trp_heroes_end"),
					(neg|is_between, ":stack_troop", "trp_local_merchant", "trp_spy_partner"),
					(store_troop_faction,":cur_faction",":stack_troop"),
					(try_begin),
						(neg|eq, ":cur_faction", ":smallest_index"),
						(party_stack_get_size, ":stack_size","p_main_party",":i_stack"),
						(party_stack_get_num_wounded, ":num_wounded","p_main_party",":i_stack"),
						(party_remove_members_wounded_first,"p_main_party",":stack_troop",":num_wounded"),
						(val_sub, ":stack_size", ":num_wounded"),
						(party_remove_members, "p_main_party", ":stack_troop", ":stack_size"),
						(party_add_members,"$oim_deserters_party", ":stack_troop", ":stack_size"),
					(try_end),
				(try_end),
			(try_end),
			(assign, ":go_next", 1),
		(try_end),		
	  (try_end),
	  
	  (try_begin),
		(eq, ":go_next", 1),		
		(party_get_num_companion_stacks, ":num_stacks","$oim_deserters_party"),
		(try_begin), 
			(eq, ":num_stacks", 0), 
			(party_get_num_companion_stacks, ":num_stacks","p_main_party"),
			(assign, ":soldiers_stacks", 0),
			(try_for_range, ":i_stack", 0, ":num_stacks"),
				(party_stack_get_troop_id, ":stack_troop","p_main_party",":i_stack"),
				(neg|troop_is_hero, ":stack_troop"),
				(neg|is_between, ":stack_troop", companions_begin, companions_end),
				(neg|is_between, ":stack_troop", "trp_kingdom_1_pretender", "trp_heroes_end"),
				(neg|is_between, ":stack_troop", "trp_local_merchant", "trp_spy_partner"),
				(val_add, ":soldiers_stacks", 1), 
			(try_end),
			(try_begin), 
				(ge, ":soldiers_stacks", 1), 
				(val_sub, ":soldiers_stacks", 2), 
				(val_max, ":soldiers_stacks", 1), 
				(try_for_range, ":i_stack", 0, ":num_stacks"),
					(party_stack_get_troop_id, ":stack_troop","p_main_party",":i_stack"),
					(neg|troop_is_hero, ":stack_troop"),
					(neg|is_between, ":stack_troop", companions_begin, companions_end),
					(neg|is_between, ":stack_troop", "trp_kingdom_1_pretender", "trp_heroes_end"),
					(neg|is_between, ":stack_troop", "trp_local_merchant", "trp_spy_partner"),
					(gt,  ":soldiers_stacks", 0), 
					(party_stack_get_size, ":stack_size","p_main_party",":i_stack"),
					(party_remove_members, "p_main_party", ":stack_troop", ":stack_size"),
					(party_add_members,"$oim_deserters_party", ":stack_troop", ":stack_size"),
					(val_sub, ":soldiers_stacks", 1), 
				(try_end),				
				(party_add_members,"$oim_deserters_party", "trp_bandit", 1),			
			(else_try), 
				(party_add_members,"$oim_deserters_party", "trp_bandit", 1),			
			(try_end), 
		(try_end), 
		(jump_to_menu, "mnu_charge_with_bunt"),
	  (try_end),	 
	]), 
	
    #script_remove_player_aimed_weapons
    ("remove_player_aimed_weapons",
    [
     (try_begin), 
	    (store_character_level, ":level", "trp_player"), 
		(ge, ":level", 4),
		(troop_get_inventory_capacity, ":i_size", "trp_player"),
		(try_for_range, ":i_slot", 0, ":i_size"),
			(troop_get_inventory_slot, ":cur_item", "trp_player", ":i_slot"),
			(ge, ":cur_item", 0),
			(try_begin),
				(troop_has_item_equipped,"trp_player",":cur_item"),
				(this_or_next|is_between,":cur_item",weapons_begin,weapons_end),
				(is_between,":cur_item",ranged_weapons_begin,ranged_weapons_end),
				(troop_remove_item,"trp_player",":cur_item"),
			(try_end),
		(try_end),
	 (try_end),	
   ]),
	 	 
	#script_check_food_variation (maybe rotten food modifier also can be added later)
    ("check_food_variation",
    [
	  (assign, reg0, 1),
	  (try_begin),

	    (assign, ":food_variation", 0),		
		(assign, ":number_of_rotten_food", 0),
		(try_for_range, ":cur_food", food_begin, food_end),
		  (player_has_item,":cur_food"),     

		  (assign, ":found_not_rotten", 0),
          (troop_get_inventory_capacity, ":inv_size", "trp_player"),
          (try_for_range, ":i_slot", 0, ":inv_size"),
            (troop_get_inventory_slot, ":cur_item", "trp_player", ":i_slot"),
            (eq, ":cur_item", ":cur_food"),
            (troop_get_inventory_slot_modifier, ":cur_modifier", "trp_player", ":i_slot"),
			(try_begin),
			  (neq, ":cur_modifier", imod_rotten),
			  (assign, ":found_not_rotten", 1),
			(else_try),
			  (val_add, ":number_of_rotten_food", 1),
			(try_end),
          (try_end),

		  (eq, ":found_not_rotten", 1),

		  (val_add, ":food_variation", 1),
		(try_end),
		
		(try_begin),		  
		  (try_begin),
		    (eq, ":food_variation", 0),
		    (assign, ":max_limit_for_starting_illness", 40),
			(assign, ":recovery", 2),
		  (else_try),
		    (eq, ":food_variation", 1),
			(assign, ":max_limit_for_starting_illness", 200),
			(assign, ":recovery", 6),
		  (else_try),
		    (eq, ":food_variation", 2),
			(assign, ":max_limit_for_starting_illness", 800),
			(assign, ":recovery", 9),
		  (else_try),
		    (eq, ":food_variation", 3),
			(assign, ":max_limit_for_starting_illness", 2400),
			(assign, ":recovery", 12),
		  (else_try),
		    (eq, ":food_variation", 4),
			(assign, ":max_limit_for_starting_illness", 4800),
			(assign, ":recovery", 14),
		  (else_try),
		    (eq, ":food_variation", 5),
			(assign, ":max_limit_for_starting_illness", 9600),
			(assign, ":recovery", 16),
		  (else_try),
		    (eq, ":food_variation", 6),
			(assign, ":max_limit_for_starting_illness", 19200),
			(assign, ":recovery", 18),
		  (else_try),
		    (assign, ":max_limit_for_starting_illness", 38400),
			(assign, ":recovery", 20),
		  (try_end),

		  (party_get_morale, ":player_party_morale", "p_main_party"),		  

		  (try_begin),
		    (le, ":player_party_morale", 60),
			(store_add, ":player_party_morale_plus_30", ":player_party_morale", 30),
			(val_mul, ":max_limit_for_starting_illness", ":player_party_morale_plus_30"),
			(val_div, ":max_limit_for_starting_illness", 90),
		  (else_try),
			(store_sub, ":player_party_morale_sub_60", ":player_party_morale", 60),
			(store_add, ":player_party_morale_sub_60_plus_20", ":player_party_morale_sub_60", 20),
			(val_mul, ":max_limit_for_starting_illness", ":player_party_morale_sub_60_plus_20"),
			(val_div, ":max_limit_for_starting_illness", 20),
		  (try_end),

		  (store_div, ":player_party_morale_div_10", ":player_party_morale", 10),
		  (val_add, ":recovery", ":player_party_morale_div_10"),

		  (call_script, "script_get_max_skill_of_player_party", "skl_first_aid"),
		  (assign, ":first_aid_skill", reg0),
		  (store_add, ":first_aid_skill_plus_8", ":first_aid_skill", 8),
		  (val_mul, ":max_limit_for_starting_illness", ":first_aid_skill_plus_8"),
		  (val_div, ":max_limit_for_starting_illness", 10), #assumed average first_aid_skill is 2

		  (call_script, "script_get_max_skill_of_player_party", "skl_surgery"),
		  (assign, ":surgery_skill", reg0),
		  (val_add, ":recovery", ":surgery_skill"),

		  (call_script, "script_get_max_skill_of_player_party", "skl_wound_treatment"),
		  (assign, ":wound_treatment_skill", reg0),
		  (val_add, ":recovery", ":wound_treatment_skill"),

		  (try_begin),
		    (eq, ":number_of_rotten_food", 0),
			(assign, ":rotten_food_modifier", 1),
		  (else_try),
		    (eq, ":number_of_rotten_food", 1),
			(assign, ":rotten_food_modifier", 4),
		  (else_try),
		    (eq, ":number_of_rotten_food", 2),
			(assign, ":rotten_food_modifier", 6),
		  (else_try),
		    (eq, ":number_of_rotten_food", 3),
			(assign, ":rotten_food_modifier", 8),
		  (else_try),
		    (eq, ":number_of_rotten_food", 4),
			(assign, ":rotten_food_modifier", 10),
		  (else_try),
		    (eq, ":number_of_rotten_food", 5),
			(assign, ":rotten_food_modifier", 12),
		  (else_try),
		    (eq, ":number_of_rotten_food", 6),
			(assign, ":rotten_food_modifier", 14),
		  (else_try),
		    (eq, ":number_of_rotten_food", 7),
			(assign, ":rotten_food_modifier", 16),
		  (else_try),
		    (eq, ":number_of_rotten_food", 8),
			(assign, ":rotten_food_modifier", 18),
		  (else_try),
		    (eq, ":number_of_rotten_food", 9),
			(assign, ":rotten_food_modifier", 19),
		  (else_try),
			(assign, ":rotten_food_modifier", 20),
		  (try_end),

		  (val_div, ":max_limit_for_starting_illness", ":rotten_food_modifier"),

		  (assign, reg6, ":food_variation"),
		  (assign, reg7, ":max_limit_for_starting_illness"),
		  (assign, reg8, ":player_party_morale"),
		  (assign, reg9, "$oim_illness_recovery_status"),
		  (assign, reg10, ":number_of_rotten_food"),
		  #(display_message, "@OZANDEBUG : illness prob:1/{reg7}; food variation:{reg6}, recovery:{reg9}, rotten food:{reg10}"),
		  
		  (try_begin),
		    (gt, "$oim_illness_count", 0),
			(store_random_in_range, ":random_recovery", 0, ":recovery"), #average is (expectred number of food is 3 = 12, expected morale is  70, 270 + 70 + 120 = 460 hours, expected first_aid is 2 (multipication is 1.0), = once in about 20 days)
			(val_add, "$oim_illness_recovery_status", ":random_recovery"),
		  (try_end),

		  (store_random_in_range, ":random_for_starting_illness", 0, ":max_limit_for_starting_illness"), #average is (expectred number of food is 3 = 270, expected morale is 70, 270 + 70 + 120 = 460 hours, expected first_aid is 4 (multipication is 1.0), = once in about 20 days)
		  (eq, ":random_for_starting_illness", 0),

     	  (assign, reg0, 0),
		(else_try),
		  (assign, reg0, 1),
		(try_end),
	  (try_end),
    ]),	 		
	 
	#script_start_quests_illness
    ("start_quests_illness",
    [
	  (assign, ":ill_count", 1),
	  (store_random_in_range, ":random", 0, 5),
	  (try_for_range, ":cur_ind", 0, ":ill_count"),
	    (try_begin),
		  (eq, ":cur_ind", 1),
		  (try_begin),
		    (eq, ":random", 2),
			(val_add, ":random", 1),
		  (try_end),
		  (val_sub, ":random", 4),
		  (val_abs, ":random"),
		(try_end),

		(store_add, ":cur_quest", "qst_oim_illness_1", ":random"),
		(quest_set_slot, ":cur_quest", slot_quest_giver_troop, "trp_player"), 
		(quest_set_slot, ":cur_quest", slot_quest_current_state, 0),
		(quest_set_slot, ":cur_quest", slot_quest_expiration_days, 21),
		(setup_quest_text, ":cur_quest"),
		(store_add, ":str_num", "str_illness_1", ":random"),
		(str_store_string, s0, ":str_num"),
		(str_store_string, s2, "@V otryade nachalas epidemiya {s0}."),
		(call_script, "script_start_quest", ":cur_quest", "trp_player"),
		(quest_set_slot, ":cur_quest", slot_quest_is_active, 1),
		(troop_raise_attribute, "trp_player", ca_strength, -1), 
		(troop_raise_attribute, "trp_player", ca_agility, -1), 		  
		(try_begin),
		  (eq, ":cur_ind", 0),
		  (str_store_string, s50, "@{s0}"),
		(else_try),
		  (str_store_string, s50, "@{s50} i {s0}"),
		(try_end),
      (try_end),
	  
	  (try_begin),
	    (eq, ":ill_count", 1),
		(str_store_string, s0, "@v otryade nachalas epidemiya {s50}."),
      (else_try),
        (str_store_string, s0, "@v otryade nachalis epidemiyi {s50}."),
      (try_end),
      
	  (jump_to_menu, "mnu_illness_warning"),
     ]),
	 
	 #script_illness_day_action
    ("illness_day_action",
    [
	  (str_store_string, s1, "str_your_troops_are_dying_because_of_illness"),
	  (str_clear, s2),
	  
	  (assign, ":illness_found", 0),
	  (try_for_range, ":cur_displace", 0, 5),
		(eq, ":illness_found", 0),
	    (store_add, ":cur_quest", "qst_oim_illness_1", ":cur_displace"),
		(quest_get_slot, ":illness_found", ":cur_quest", slot_quest_is_active),
		(eq, ":illness_found", 1),
		(store_add, ":illness_string", "str_illness_1", ":cur_displace"),
        (str_store_string, s4, ":illness_string"),
		(assign, ":cur_illness", ":cur_displace"),
      (try_end),
		
	  (assign, ":num_died_total", 0),
	  (party_get_num_companion_stacks, ":num_stacks", "p_main_party"),
	  (try_for_range, ":i_stack", 0, ":num_stacks"),
	    (party_stack_get_troop_id, ":stack_troop", "p_main_party", ":i_stack"),
	    (try_begin),
	      (neg|troop_is_hero, ":stack_troop"),
		  (party_stack_get_size, ":stack_size", "p_main_party", ":i_stack"),
		  (party_stack_get_num_wounded, ":num_wounded", "p_main_party", ":i_stack"),

		  (try_begin), #fever (less killing, moderate wounding)
		    (eq, ":cur_illness", 0),
		    (store_mul, ":remove_max_limit", ":stack_size", 8),
		  (else_try), #gout (high killing, moderate wounding)
		    (eq, ":cur_illness", 1), 
		    (store_mul, ":remove_max_limit", ":stack_size", 16),
		  (else_try), #dropsy (moderate killing, moderate wounding)
		    (eq, ":cur_illness", 2), 
		    (store_mul, ":remove_max_limit", ":stack_size", 12),
		  (else_try), #dysentery (very high killing, moderate wounding)
		    (eq, ":cur_illness", 3),
		    (store_mul, ":remove_max_limit", ":stack_size", 20),
		  (else_try), #scabies (very less killing, high wounding)
		    (store_mul, ":remove_max_limit", ":stack_size", 4),
		  (try_end),
		  (val_div, ":remove_max_limit", 100),

		  (val_add, ":remove_max_limit", 4),
		  (store_random_in_range, ":num_remove", 0, ":remove_max_limit"),
		  (val_sub, ":num_remove", 2),
          (val_clamp, ":num_remove", 0, 10),
		
		  (party_remove_members_wounded_first, "p_main_party", ":stack_troop", ":num_remove"),
		
		  (try_begin),
		    (ge, ":num_remove", 1),
		    (str_store_troop_name, s2, ":stack_troop"),
		    (assign, reg0, ":num_remove"),
		    (try_begin),
		      (ge, ":num_died_total", 1),
			  (str_store_string, s1, "str_s1_reg0_s2"),
            (else_try),
              (str_store_string, s3, s1),
              (str_store_string, s1, "str_s3_reg0_s2"),
            (try_end),

            (val_add, ":num_died_total", ":num_remove"),
		  (try_end),
		
		  (try_begin), #fever (less killing, high wounding)
		    (eq, ":cur_illness", 0),
		    (store_mul, ":num_to_wound", ":stack_size", 30),
		  (else_try), #gout (high killing, moderate wounding)
		    (eq, ":cur_illness", 1),
		    (store_mul, ":num_to_wound", ":stack_size", 20),
		  (else_try), #dropsy (moderate killing, moderate wounding)
		    (eq, ":cur_illness", 2),
		    (store_mul, ":num_to_wound", ":stack_size", 20),
		  (else_try), #dysentery (very high killing, moderate wounding)
		    (eq, ":cur_illness", 3),
		    (store_mul, ":num_to_wound", ":stack_size", 20),
		  (else_try), #scabies (very less killing, high wounding)
		    (store_mul, ":num_to_wound", ":stack_size", 40),
		  (try_end),

		  (val_div, ":num_to_wound", 100),
		  (val_sub, ":num_to_wound", ":num_wounded"),
		  (try_begin),
		    (gt, ":num_to_wound", 0),
		    (party_wound_members, "p_main_party", ":stack_troop", ":num_to_wound"),
		  (try_end),
        (try_end),
      (try_end),  

      (try_begin),
	    (ge, ":num_died_total", 1),

        (try_begin),
          (ge, ":num_died_total", 2),
          (str_store_string, s2, "str_have_died_because_of_illness"),
        (else_try),
          (str_store_string, s2, "str_has_died_because_of_illness"),
        (try_end),          

        (str_store_string, s1, "str_s1_s2"),
         
        (tutorial_box, s1, s4),
      (try_end),      
     ]),
	 
	#script_remove_health
    ("remove_health",
    [
		(call_script, "script_recalculate_ills_count"), 
		(try_begin),
			(gt, "$oim_illness_count", 0),
			(party_get_num_companion_stacks, ":num_stacks", "p_main_party"),
			(try_for_range, ":i_stack", 0, ":num_stacks"),
				(party_stack_get_troop_id, ":stack_troop", "p_main_party",":i_stack"),
				(try_begin),
					(neg|troop_is_hero, ":stack_troop"),
					(is_between, ":stack_troop", companions_begin, companions_end),
					(troop_set_health, ":stack_troop", 0),
				(try_end),
			(try_end),
		(try_end),
     ]),
	 
	 #script_end_one_illness_quest
    ("end_one_illness_quest",
    [
		(assign, ":is_active", 0),
		(try_for_range, ":cur_displace", 0, 5),
			(eq, ":is_active", 0),
			(store_add, ":cur_quest", "qst_oim_illness_1", ":cur_displace"),
			(quest_get_slot, ":is_active", ":cur_quest", slot_quest_is_active),
		    (try_begin),
				(eq, ":is_active", 1),
                (troop_raise_attribute, "trp_player", ca_strength, 1), 
			    (troop_raise_attribute, "trp_player", ca_agility, 1), 
				(store_add, ":str_num", "str_illness_1", ":cur_displace"),
			    (str_store_string, s0, ":str_num"),
				(call_script, "script_end_quest", ":cur_quest"),
				
                (get_achievement_stat, ":achievement_stat", ACHIEVEMENT_DONT_DIE_OF_DYSENTERY, 0),
                (val_add, ":achievement_stat", 1),
                (set_achievement_stat, ACHIEVEMENT_DONT_DIE_OF_DYSENTERY, 0, ":achievement_stat"),				

				(try_begin),
				  (eq, ":achievement_stat", 5),
				  (unlock_achievement, ACHIEVEMENT_DONT_DIE_OF_DYSENTERY),				  
				(try_end),

				(quest_set_slot, ":cur_quest", slot_quest_is_active, 0),				
				(call_script, "script_recalculate_ills_count"), 
				(try_begin),
				    (eq, "$oim_illness_count", 1),
					(assign, "$oim_illness_camp_start", 1),
				(else_try),
					(assign, "$oim_illness_camp_start", 0),
				(try_end),
			(try_end),
		(try_end),
		(jump_to_menu, "mnu_illness_end"),
     ]),
	 
	 
	#script_doctor_check
    ("doctor_check",
    [
		(assign, ":has_doctor", 0),
		(party_get_num_companion_stacks, ":num_stacks","p_main_party"),
		(try_for_range, ":i_stack", 0, ":num_stacks"),
			(party_stack_get_troop_id, ":stack_troop","p_main_party",":i_stack"),
			(try_begin),
				(neg|troop_is_hero, ":stack_troop"),
				(this_or_next| eq, ":stack_troop", "trp_npc12"),
				(eq, ":stack_troop", "trp_npc13"),
				(assign, ":has_doctor", 1),
			(try_end),
		(try_end),
		
		(try_begin),
			(eq, ":has_doctor", 1),
			(assign, reg0, 1),
		(else_try),
			(assign, reg0, 0),
		(try_end),
     ]),
	 
   # script_check_grain_flour
   ("check_grain_flour",
    [
  ]),
  
   # script_check_faction_count
   ("check_faction_count",
    [
      (assign, ":faction_count", 0),
	  (party_get_num_companion_stacks, ":num_stacks","p_main_party"),
      (try_for_range, ":i_stack", 0, ":num_stacks"),
        (party_stack_get_troop_id, ":stack_troop","p_main_party",":i_stack"),
        (try_begin),
			(neg|troop_is_hero, ":stack_troop"),
			(this_or_next|is_between, ":stack_troop", regular_troops_begin, regular_troops_end),
			(this_or_next|is_between, ":stack_troop", mercenary_troops_begin, mercenary_troops_end),
			(             is_between, ":stack_troop", oim_pol_begin, oim_koz_end),
			(store_troop_faction,":cur_faction",":stack_troop"),
			(try_begin),
				(eq, ":faction_count", 0),
				(troop_set_slot, "trp_array_factions_2", 0, ":cur_faction"),
				(val_add, ":faction_count", 1),
			(else_try),
				(assign, ":is_new", 1),
				(try_for_range, ":cur_ind", 0, ":faction_count"),
					(troop_get_slot, ":arr_faction", "trp_array_factions_2", ":cur_ind"),
					(try_begin),
						(eq, ":cur_faction", ":arr_faction"),
						(assign,  ":is_new", 0),
					(try_end),
				(try_end),
				(try_begin),
					(eq, ":is_new", 1),
					(troop_set_slot, "trp_array_factions_2", ":faction_count", ":cur_faction"),
					(val_add, ":faction_count", 1),
				(try_end),
			(try_end),
		(try_end),
	  (try_end),
	  (try_begin),
		(gt, ":faction_count", 4),
		(assign, reg0, 1),
	  (else_try),
		(assign, reg0, 0),
	  (try_end),
  ]),
	 
  
   # script_check_treat_attempt
   ("check_treat_attempt",
    [
  ]),

#script_refill_agents_array
  ("refill_agents_array",
     []),
	 
  #script_replace_shturm_item_begin
  ("replace_shturm_item_begin",
    [
     ]),
	 
	 
  #script_replace_shturm_item_end
  ("replace_shturm_item_end",[
     ]),
	 
	 
  #script_replace_shturm_item_init_first
  ("replace_shturm_item_init_first",
    [
     ]),
	 
  #script_spawn_party
  ("spawn_party",
    [
    (store_script_param, ":cur_faction", 1),
    (store_script_param, ":cur_template", 2),
	(assign, ":spawn_point", -1),
	(try_begin),
		(eq, ":cur_template", "pt_forager_party"),
		(call_script, "script_random_hero_party_not_in_town", ":cur_faction"),
		(assign, ":spawn_point", reg0),
	(else_try),
		(eq, ":cur_template", "pt_scout_party"),
		(call_script, "script_random_hero_party_not_in_town", ":cur_faction"),
		(assign, ":spawn_point", reg0),
	(else_try),
		(eq, ":cur_template", "pt_patrol_party"),
		(call_script, "script_random_town_party", ":cur_faction"),
		(assign, ":spawn_point", reg0),
	(try_end),
	(try_begin),
		(neg|eq, ":spawn_point", -1),
		(set_spawn_radius, 3),
		(spawn_around_party, ":spawn_point", ":cur_template"),
		(assign, ":spawn_party", reg0),
		(party_set_faction, ":spawn_party", ":cur_faction"),
		
		(assign, ":units_faction", ":cur_faction"), 
		(try_begin),
			(eq, ":units_faction", "fac_player_supporters_faction"),
			(assign, ":units_faction", "$supported_pretender_old_faction"),
		(try_end),
		
		(call_script, "script_get_faction_unit_of_type", ":units_faction", 1), 
		(assign, ":troop_1", reg0), 
		(call_script, "script_get_faction_unit_of_type", ":units_faction", 2), 
		(assign, ":troop_2", reg0), 
		(call_script, "script_get_faction_unit_of_type", ":units_faction", 3), 
		(assign, ":troop_3", reg0), 
		(call_script, "script_get_faction_unit_of_type", ":units_faction", 4), 
		(assign, ":troop_4", reg0), 
		(try_begin),
			(eq, ":cur_template", "pt_forager_party"),
			(party_add_members, ":spawn_party", ":troop_1", 4),
			(party_add_members, ":spawn_party", ":troop_2", 6),
			(party_add_members, ":spawn_party", ":troop_3", 3),
			(party_add_members, ":spawn_party", ":troop_4", 2),
		(else_try),
			(eq, ":cur_template", "pt_scout_party"),
			(party_add_members, ":spawn_party", ":troop_3", 6),
			(party_add_members, ":spawn_party", ":troop_4", 4),				
		(else_try),
			(eq, ":cur_template", "pt_patrol_party"),
			(party_add_members, ":spawn_party", ":troop_1", 2),
			(party_add_members, ":spawn_party", ":troop_2", 4),
			(party_add_members, ":spawn_party", ":troop_3", 6),
			(party_add_members, ":spawn_party", ":troop_4", 2),				
		(try_end),
		(call_script, "script_get_nearest_location_to_patrol", ":spawn_party"),
		(assign, ":party_to_patrol", reg0),
		(party_set_slot, ":spawn_party", slot_spawn_party_main_object, ":party_to_patrol"),
		(party_set_slot, ":spawn_party", slot_spawn_party_attack, 0),
		(call_script, "script_party_set_ai_state", ":spawn_party", spai_patrolling_around_center, ":party_to_patrol"),
		(party_set_ai_behavior, ":spawn_party", ai_bhvr_patrol_location),
		(party_set_slot, ":spawn_party", slot_spawn_party_is_control, 17),
 	(try_end),
	(try_begin),
		(eq, ":units_faction", "fac_kingdom_1"), 
		(assign, ":party_icon", "icon_rp_lord"), 
	(else_try), 	
		(eq, ":units_faction", "fac_kingdom_2"), 
		(assign, ":party_icon", "icon_rus_lord"), 
	(else_try), 	
		(eq, ":units_faction", "fac_kingdom_3"), 
		(assign, ":party_icon", "icon_tatar_lord"), 
	(else_try), 	
		(eq, ":units_faction", "fac_kingdom_4"), 
		(assign, ":party_icon", "icon_ewro_lord"), 
	(else_try), 	
		(assign, ":party_icon", "icon_ukr_lord"),
	(try_end), 
	(try_begin),   
		(this_or_next|eq, ":cur_template", "pt_forager_party"),
		(this_or_next|eq, ":cur_template", "pt_scout_party"),
		(             eq, ":cur_template", "pt_patrol_party"),
		(gt, ":spawn_party", "p_village_90"),
		(party_set_icon, ":spawn_party", ":party_icon"),	  
	(try_end), 	
   ]),
	 
  #script_random_hero_party_not_in_town
  ("random_hero_party_not_in_town",
    [
    (store_script_param, ":cur_faction", 1),
	(assign, ":hero", -1),
	(assign, ":count", 1),
	(try_for_parties, ":party_no"),
        (party_is_active, ":party_no"),
		(neg|party_is_in_any_town,":party_no"),
        (store_faction_of_party, ":faction", ":party_no"),
		(party_get_template_id,":template", ":party_no"),
        (try_begin),
			(eq, ":faction", ":cur_faction"),
			(eq, ":template", "pt_kingdom_hero_party"),
			(val_add, ":count", 1),
		(try_end),
	(try_end),
	(try_begin),
		(gt, ":count", 1),
		(store_random_in_range,":random",1,":count"),
		(assign, ":count", 0),
		(try_for_parties, ":party_no"),
			(lt, ":count", ":random"),
			(party_is_active, ":party_no"),
			(neg|party_is_in_any_town,":party_no"),
			(store_faction_of_party, ":faction", ":party_no"),
			(party_get_template_id,":template", ":party_no"),
			(try_begin),
				(eq, ":faction", ":cur_faction"),
				(eq, ":template", "pt_kingdom_hero_party"),
				(assign, ":hero", ":party_no"),
				(val_add, ":count", 1),
			(try_end),
		(try_end),
	(try_end),
	(assign, reg0,":hero"),
	    
     ]),
	 
	 
  #script_random_town_party
  ("random_town_party",
    [
    (store_script_param, ":cur_faction", 1),
	(assign, ":town", -1),
	(assign, ":count", 1),
	(try_for_range,":cur_town", towns_begin, towns_end),
		(store_faction_of_party, ":faction", ":cur_town"),
        (try_begin),
			(eq, ":cur_faction", ":faction"),
			(val_add, ":count", 1),
		(try_end),
	(try_end),
	(try_begin),
		(gt, ":count", 1),
		(store_random_in_range,":random",1,":count"),
		(assign, ":count", 0),
		(try_for_range,":cur_town", towns_begin, towns_end),
			(lt, ":count", ":random"),
			(store_faction_of_party, ":faction", ":cur_town"),
			(try_begin),
				(eq, ":cur_faction", ":faction"),
				(assign, ":town", ":cur_town"),
				(val_add, ":count", 1),
			(try_end),
		(try_end),
	(try_end),
	(assign, reg0,":town"),
	    
     ]),
	 
   #script_check_attack_and_dist_condition
  ("check_attack_and_dist_condition",
    [
     (try_for_parties, ":party_no"),
		(party_slot_eq, ":party_no", slot_spawn_party_is_control, 17),
		(party_is_active, ":party_no"),		
		(party_get_slot, ":patrol_party",":party_no", slot_spawn_party_main_object),
		(store_distance_to_party_from_party, ":cur_distance_to_patrol_party", ":party_no", ":patrol_party"),
		(try_begin),
			(party_slot_ge, ":party_no", slot_spawn_party_attack, 1),
			(party_get_slot, ":enemy_party",":party_no", slot_spawn_party_attack),
			(try_begin),
				(this_or_next|ge, ":cur_distance_to_patrol_party", 5),
				(neg|party_is_active, ":enemy_party"),	
				(party_set_slot, ":party_no", slot_spawn_party_attack, 0),
				(call_script, "script_party_set_ai_state", ":party_no", spai_patrolling_around_center, ":patrol_party"),
				(party_set_ai_behavior, ":party_no", ai_bhvr_patrol_location),
			(try_end),
		(else_try),
			(party_slot_eq, ":party_no", slot_spawn_party_attack, 0),
			(lt, ":cur_distance_to_patrol_party", 5),
			(store_faction_of_party, ":faction_no",  ":party_no"),
			(call_script, "script_party_calculate_regular_strength", ":party_no"),
			(assign, ":strength_no", reg0),

			(assign, ":it_should_not_attack_protected_parties", 0),
			(try_begin),
			  (party_get_slot,":protected_until_hours", ":party_no", slot_party_ignore_player_until),
			  (store_current_hours,":cur_hours"),
			  (store_sub, ":protection_remaining",":protected_until_hours",":cur_hours"),
			  (gt, ":protection_remaining", 0),
			  (assign, ":it_should_not_attack_protected_parties", 1),
			(try_end),

			(try_for_parties, ":second_party"),
				(party_is_active, ":second_party"),	
				(neg|eq, ":party_no", ":second_party"),
				(store_faction_of_party, ":second_faction", ":second_party"),
				(store_relation, ":party_relation", ":faction_no", ":second_faction"),
				(try_begin),
					(lt, ":party_relation", 0),
					(call_script, "script_party_calculate_regular_strength", ":second_faction"),
					(assign, ":second_strength", reg0),
					(store_distance_to_party_from_party, ":cur_distance_to_second", ":party_no", ":second_party"),
					(try_begin),
						(gt, ":strength_no", ":second_strength"),
						(lt, ":cur_distance_to_second", 3),						

						(party_get_ignore_with_player_party, ":ignore_with_player_party", ":second_party"),
						(this_or_next|le, ":ignore_with_player_party", 0),
						(eq, ":it_should_not_attack_protected_parties", 0),						

						(str_store_party_name, s1, ":party_no"),
						(str_store_party_name, s2, ":second_party"),						

						(party_set_ai_object, ":party_no", ":second_party"),
						(party_set_ai_behavior, ":party_no", ai_bhvr_attack_party),
						(party_set_flags, ":party_no", pf_default_behavior, 0),
						(party_set_slot, ":party_no", slot_spawn_party_attack, ":second_party"),
					(try_end),
				(try_end),
			(try_end),
		(try_end),
	(try_end),
	
	    
     ]),
	
  # script_get_nearest_town_of_party_faction
  # Input: arg1 = party_no
  # Output: reg0 = town_no
  ("get_nearest_town_of_party_faction",
    [
      (store_script_param_1, ":party_no"),
      (assign, ":result_party", -1),
      (assign, ":min_dist", 100000),
      (store_faction_of_party, ":party_faction", ":party_no"),
      (try_for_range, ":town_no", towns_begin, towns_end),
		(store_faction_of_party, ":faction_no", ":town_no"),
		(try_begin),
			(eq, ":faction_no", ":party_faction"),
			(store_distance_to_party_from_party, ":cur_distance", ":town_no", ":party_no"),
			(try_begin),
				(lt, ":cur_distance", ":min_dist"),
				(assign, ":min_dist", ":cur_distance"),
				(assign, ":result_party", ":town_no"),
			(try_end),
		(try_end),
      (try_end),
	  (assign, reg0, ":result_party"),
  ]),
	
  # script_get_nearest_village_of_party_faction
  # Input: arg1 = party_no
  # Output: reg0 = village_no
  ("get_nearest_village_of_party_faction",
    [
      (store_script_param_1, ":party_no"),
      (assign, ":result_party", -1),
      (assign, ":min_dist", 100000),
      (store_faction_of_party, ":party_faction", ":party_no"),
      (try_for_range, ":village_no", villages_begin, villages_end),
		(store_faction_of_party, ":faction_no", ":village_no"),
		(try_begin),
			(eq, ":faction_no", ":party_faction"),
			(store_distance_to_party_from_party, ":cur_distance", ":village_no", ":party_no"),
			(try_begin),
				(lt, ":cur_distance", ":min_dist"),
				(assign, ":min_dist", ":cur_distance"),
				(assign, ":result_party", ":village_no"),
			(try_end),
		(try_end),
      (try_end),
	  (assign, reg0, ":result_party"),
  ]),
  	
  # script_get_nearest_town_of_any_faction
  # Input: arg1 = party_no
  # Output: reg0 = town_no
  ("get_nearest_town_of_any_faction",
    [
      (store_script_param_1, ":party_no"),
      (assign, ":result_party", -1),
      (assign, ":min_dist", 100000),
      (try_for_range, ":town_no", towns_begin, towns_end),
		(store_distance_to_party_from_party, ":cur_distance", ":town_no", ":party_no"),
		(try_begin),
			(lt, ":cur_distance", ":min_dist"),
			(assign, ":min_dist", ":cur_distance"),
			(assign, ":result_party", ":town_no"),
		(try_end),
	  (try_end),
	  (assign, reg0, ":result_party"),
  ]),
  
  # script_get_nearest_location_to_patrol
  # Input: arg1 = party_no
  # Output: reg0 = location
  ("get_nearest_location_to_patrol",
    [
      (store_script_param_1, ":party_no"),
      (assign, ":location", -1),
	  (call_script, "script_get_nearest_town_of_party_faction", ":party_no"),
	  (assign, ":location", reg0),
	  (try_begin),
		(eq, ":location", -1),
		(call_script, "script_get_nearest_village_of_party_faction", ":party_no"),
		(assign, ":location", reg0),
	  (try_end),
	  (try_begin),
		(eq, ":location", -1),
		(call_script, "script_get_nearest_town_of_any_faction", ":party_no"),
		(assign, ":location", reg0),
	  (try_end),
	  (assign, reg0, ":location"),
  ]),

	
	("recalculate_ills_count",
	[
	    (assign, ":count", 0), 
		(try_for_range, ":cur_displace", 0, 5),
			(store_add, ":cur_quest", "qst_oim_illness_1", ":cur_displace"),
			(quest_get_slot, ":is_active", ":cur_quest", slot_quest_is_active),
			(val_add, ":count", ":is_active"), 
		(try_end),
		(assign, "$oim_illness_count", ":count"), 
	]), 

	("oim_remove_lord",
	[
      (store_script_param_1, ":troop_no"),
      (store_script_param_2, ":faction_no"),

  	  (try_for_parties, ":party_no"), 
			(party_remove_prisoners, ":party_no", ":troop_no"), 
	  (try_end), 
	  (party_get_num_prisoner_stacks, ":num_stacks", "p_main_party"),
	  (try_for_range_backwards, ":troop_iterator", 0, ":num_stacks"),
		(party_prisoner_stack_get_troop_id, ":cur_troop_id", "p_main_party", ":troop_iterator"),
		(store_troop_faction, ":cur_faction", ":cur_troop_id"),
		(eq, ":cur_troop_id", "trp_kingdom_2_pretender"),
		(call_script, "script_remove_troop_from_prison", ":cur_troop_id"),
		(party_remove_prisoners, "p_main_party", ":cur_troop_id", 1),
	  (try_end),
	  
      (troop_set_faction, ":troop_no", "fac_commoners"),
      (try_for_range, ":center_no", walled_centers_begin, walled_centers_end),
        (party_slot_eq, ":center_no", slot_town_lord, ":troop_no"),
        (party_set_faction, ":center_no", ":faction_no"),
        (try_for_range, ":village_no", villages_begin, villages_end),
          (party_slot_eq, ":village_no", slot_village_bound_center, ":center_no"),
          (party_set_faction, ":village_no", ":faction_no"),
          (party_get_slot, ":farmer_party_no", ":village_no", slot_village_farmer_party),
          (try_begin),
            (gt, ":farmer_party_no", 0),
            (party_is_active, ":farmer_party_no"),
            (party_set_faction, ":farmer_party_no", ":faction_no"),
          (try_end),
          (try_begin),
            (party_get_slot, ":old_town_lord", ":village_no", slot_town_lord),
            (neq, ":old_town_lord", ":troop_no"),
            (party_set_slot, ":village_no", slot_town_lord, stl_unassigned),
          (try_end),
        (try_end),
      (try_end),
      (try_for_range, ":village_no", villages_begin, villages_end),
        (party_slot_eq, ":village_no", slot_town_lord, ":troop_no"),
        (store_faction_of_party, ":village_faction", ":village_no"),
        (try_begin),
          (neq, ":village_faction", ":faction_no"),
          (party_set_slot, ":village_no", slot_town_lord, stl_unassigned),
        (try_end),
      (try_end),
      (try_begin),
        (troop_get_slot, ":leaded_party", ":troop_no", slot_troop_leaded_party),
		(try_begin), 
			(ge, ":leaded_party", 0),
			#(party_set_faction, ":leaded_party", ":faction_no"),
			(party_get_num_prisoner_stacks, ":num_stacks", ":leaded_party"),
			(try_for_range_backwards, ":troop_iterator", 0, ":num_stacks"),
				(party_prisoner_stack_get_troop_id, ":cur_troop_id", ":leaded_party", ":troop_iterator"),
				(store_troop_faction, ":cur_faction", ":cur_troop_id"),
				(troop_is_hero, ":cur_troop_id"),
				(eq, ":cur_faction", ":faction_no"),
				(call_script, "script_remove_troop_from_prison", ":cur_troop_id"),
				(party_remove_prisoners, ":leaded_party", ":cur_troop_id", 1),
			(try_end),
  		    (call_script, "script_cf_oim_remove_party", ":leaded_party"),
      (try_end),
	  
	  (try_for_range, ":quest_no", all_quests_begin, "qst_talk_to_zamoshie_elder"), 
		(quest_slot_eq, ":quest_no", slot_quest_giver_troop, ":troop_no"),
		(call_script, "script_cancel_quest", ":quest_no"),
	  (try_end),
	  
	  (troop_set_slot, ":troop_no", slot_troop_leaded_party, -1),	  
	  (troop_set_slot, ":troop_no", slot_troop_occupation, -2),	  
	  (troop_set_slot, ":troop_no", slot_troop_prisoner_of_party, -1),	  
	  
      (call_script, "script_update_all_notes"),
      (call_script, "script_update_village_market_towns"),
      (assign, "$g_recalculate_ais", 1),
	]), 
	
	("get_party_position_to_s1",
	[
		(store_script_param_1, ":party_no"),
		(call_script, "script_get_closest_center", ":party_no"),
		(assign, reg3, 1),
		(assign, reg4, 1),
		(str_store_party_name_link, s3, reg0),
		(str_store_party_name, s2, ":party_no"),
		(str_store_string, s1, "@{s2} {reg3?was:is} in wilderness and {reg4?she:he} {reg3?was:should be} close to {s3}{reg3?: at the moment}."),
	]), 
	
	("clear_scripted",
	[
		(store_script_param_1, ":type"),
		(try_begin),
			(eq, ":type", grc_infantry),
			(assign, ":count", "$g_infantry_count"),
			(assign, ":array", "trp_ladder_infantry_array"),
			(assign, "$g_infantry_is", 0),
		(else_try),
			(eq, ":type", grc_archers),
			(assign, ":count", "$g_archers_count"),
			(assign, ":array", "trp_ladder_archers_array"),
			(assign, "$g_archers_is", 0),
		(try_end),
		
		(try_for_range, ":i_agent", 0, ":count"),
			(troop_get_slot,":cur_i_agent", ":array", ":i_agent"),
			(try_begin),
				(agent_is_alive, ":cur_i_agent"),
				(agent_clear_scripted_mode,":cur_i_agent"),
			(try_end),
		(try_end),
				
		(try_for_agents,":cur_agent"),
			(agent_is_alive, ":cur_agent"),
			(agent_is_human, ":cur_agent"),
			(neg|agent_is_defender, ":cur_agent"),
			(agent_slot_ge, ":cur_agent", slot_agent_is_old, 2),
			(agent_get_class , ":cur_class", ":cur_agent"),
			(try_begin),
				(eq, ":cur_class", ":type"),
				(agent_clear_scripted_mode,":cur_agent"),
				(agent_set_slot, ":cur_agent", slot_agent_is_old, 5),
			(try_end),
		(try_end),					
	]), 
	
	("recalculate_price",
	[
		(store_script_param_1, ":old_price"),
		(party_get_skill_level, ":trade_skill", "p_main_party", skl_trade),
		(val_mul, ":trade_skill", 5),
		(store_sub, ":koef", 100, ":trade_skill"),
		(val_mul, ":old_price", ":koef"),
		(store_div, ":new_price", ":old_price", 100),
		#OiM crab mode
		(options_get_campaign_ai, ":ai"),
		(try_begin), 
			(eq, ":ai", 2), 
			(val_mul, ":new_price", 1), 
			(val_div, ":new_price", 2), 
		(else_try), 
			(eq, ":ai", 1), 
			(val_mul, ":new_price", 3), 
			(val_div, ":new_price", 4), 
		(try_end),
		#OiM crab mode end
		(assign, reg10, ":new_price"),		
	]), 
	
	("get_merch_string",
    [ 
		(store_script_param_1, ":count"),
		(store_mul, reg6, "$g_naem_price", ":count"),
		(str_store_string, s20, "@, {reg6} dinarov "),
		(assign, reg0, 0),
		(try_begin),
			(ge, "$g_trp_player_gold", reg6),
			(ge, "$g_naem_count", ":count"),
			(ge, "$g_free_capacity", ":count"),
			(assign, reg0, 1),
		(try_end),		
	]), 
	
  ("add_merch_members",
    [ 
		(store_script_param_1, ":count"),
		(store_mul, ":price_gold", "$g_naem_price", ":count"),		
		(troop_remove_gold, "trp_player", ":price_gold"),
		(party_add_members, "p_main_party", "$g_cur_troop", ":count"),
		(call_script, "script_remove_merch_count_for_nation", ":count"),
	]), 
		
   ("get_scene_for_shturm_podkup",
    [	
		(store_script_param_1, ":party_no"),
		(try_begin),
			(eq, ":party_no", "p_town_1"),
			(assign, reg0, "scn_town_1_interrior_assault"),
		(else_try),
			(eq, ":party_no", "p_town_2"),
			(assign, reg0, "scn_town_2_interrior_assault"),
		(else_try),
			(eq, ":party_no", "p_town_3"),
			(assign, reg0, "scn_town_3_interrior_assault"),
		(else_try),
			(eq, ":party_no", "p_town_4"),
			(assign, reg0, "scn_town_4_interrior_assault"),
		(else_try),
			(eq, ":party_no", "p_town_5"),
			(assign, reg0, "scn_town_5_interrior_assault"),
		(else_try),
			(eq, ":party_no", "p_town_6"),
			(assign, reg0, "scn_town_6_interrior_assault"),
		(else_try),
			(eq, ":party_no", "p_town_7"),
			(assign, reg0, "scn_town_7_interrior_assault"),
		(else_try),
			(eq, ":party_no", "p_town_8"),
			(assign, reg0, "scn_town_8_interrior_assault"),
		(else_try),
			(eq, ":party_no", "p_town_9"),
			(assign, reg0, "scn_town_9_interrior_assault"),
		(else_try),
			(eq, ":party_no", "p_town_10"),
			(assign, reg0, "scn_town_10_interrior_assault"),
		(else_try),
			(eq, ":party_no", "p_town_11"),
			(assign, reg0, "scn_town_11_interrior_assault"),
		(else_try),
			(eq, ":party_no", "p_town_12"),
			(assign, reg0, "scn_town_12_interrior_assault"),
		(else_try),
			(eq, ":party_no", "p_town_13"),
			(assign, reg0, "scn_town_13_interrior_assault"),
		(else_try),
			(eq, ":party_no", "p_town_14"),
			(assign, reg0, "scn_town_14_interrior_assault"),
		(else_try),
			(eq, ":party_no", "p_town_15"),
			(assign, reg0, "scn_town_15_interrior_assault"),
		(else_try),
			(eq, ":party_no", "p_town_16"),
			(assign, reg0, "scn_town_16_interrior_assault"),
		(else_try),
			(eq, ":party_no", "p_town_17"),
			(assign, reg0, "scn_town_17_interrior_assault"),
		(else_try),
			(eq, ":party_no", "p_town_18"),
			(assign, reg0, "scn_town_18_interrior_assault"),
		(else_try),
			(eq, ":party_no", "p_castle_1"),
			(assign, reg0, "scn_castle_1_interrior_assault"),
		(else_try),
			(eq, ":party_no", "p_castle_2"),
			(assign, reg0, "scn_castle_2_interrior_assault"),
		(else_try),
			(eq, ":party_no", "p_castle_3"),
			(assign, reg0, "scn_castle_3_interrior_assault"),
		(else_try),
			(eq, ":party_no", "p_castle_4"),
			(assign, reg0, "scn_castle_4_interrior_assault"),
		(else_try),
			(eq, ":party_no", "p_castle_5"),
			(assign, reg0, "scn_castle_5_interrior_assault"),
		(else_try),
			(eq, ":party_no", "p_castle_6"),
			(assign, reg0, "scn_castle_6_interrior_assault"),
		(else_try),
			(eq, ":party_no", "p_castle_7"),
			(assign, reg0, "scn_castle_7_interrior_assault"),
		(else_try),
			(eq, ":party_no", "p_castle_8"),
			(assign, reg0, "scn_castle_8_interrior_assault"),
		(else_try),
			(eq, ":party_no", "p_castle_9"),
			(assign, reg0, "scn_castle_9_interrior_assault"),
		(else_try),
			(eq, ":party_no", "p_castle_10"),
			(assign, reg0, "scn_castle_10_interrior_assault"),
		(else_try),
			(eq, ":party_no", "p_castle_11"),
			(assign, reg0, "scn_castle_11_interrior_assault"),
		(else_try),
			(eq, ":party_no", "p_castle_12"),
			(assign, reg0, "scn_castle_12_interrior_assault"),
		(else_try),
			(eq, ":party_no", "p_castle_13"),
			(assign, reg0, "scn_castle_13_interrior_assault"),
		(else_try),
			(eq, ":party_no", "p_castle_14"),
			(assign, reg0, "scn_castle_14_interrior_assault"),
		(else_try),
			(eq, ":party_no", "p_castle_15"),
			(assign, reg0, "scn_castle_15_interrior_assault"),
		(else_try),
			(eq, ":party_no", "p_castle_16"),
			(assign, reg0, "scn_castle_16_interrior_assault"),
		(else_try),
			(eq, ":party_no", "p_castle_17"),
			(assign, reg0, "scn_castle_17_interrior_assault"),
		(else_try),
			(eq, ":party_no", "p_castle_18"),
			(assign, reg0, "scn_castle_18_interrior_assault"),
		(else_try),
			(eq, ":party_no", "p_castle_19"),
			(assign, reg0, "scn_castle_19_interrior_assault"),
		(else_try),
			(eq, ":party_no", "p_castle_20"),
			(assign, reg0, "scn_castle_20_interrior_assault"),
		(else_try),
			(eq, ":party_no", "p_castle_21"),
			(assign, reg0, "scn_castle_21_interrior_assault"),
		(else_try),
			(eq, ":party_no", "p_castle_22"),
			(assign, reg0, "scn_castle_22_interrior_assault"),
		(else_try),
			(eq, ":party_no", "p_castle_23"),
			(assign, reg0, "scn_castle_23_interrior_assault"),
		(else_try),
			(eq, ":party_no", "p_castle_24"),
			(assign, reg0, "scn_castle_24_interrior_assault"),
		(else_try),
			(eq, ":party_no", "p_castle_25"),
			(assign, reg0, "scn_castle_25_interrior_assault"),
		(else_try),
			(eq, ":party_no", "p_castle_26"),
			(assign, reg0, "scn_castle_26_interrior_assault"),
		(else_try),
			(eq, ":party_no", "p_castle_27"),
			(assign, reg0, "scn_castle_27_interrior_assault"),
		(else_try),
			(eq, ":party_no", "p_castle_28"),
			(assign, reg0, "scn_castle_28_interrior_assault"),
		(else_try),
			(eq, ":party_no", "p_castle_29"),
			(assign, reg0, "scn_castle_29_interrior_assault"),
		(else_try),
			(eq, ":party_no", "p_castle_30"),
			(assign, reg0, "scn_castle_30_interrior_assault"),
		(else_try),
			(eq, ":party_no", "p_castle_31"),
			(assign, reg0, "scn_castle_31_interrior_assault"),
		(else_try),
			(eq, ":party_no", "p_castle_32"),
			(assign, reg0, "scn_castle_32_interrior_assault"),
		(else_try),
			(eq, ":party_no", "p_castle_33"),
			(assign, reg0, "scn_castle_33_interrior_assault"),
		(else_try),
			(eq, ":party_no", "p_castle_34"),
			(assign, reg0, "scn_castle_34_interrior_assault"),
		(else_try),
			(eq, ":party_no", "p_castle_35"),
			(assign, reg0, "scn_castle_35_interrior_assault"),
		(else_try),
			(eq, ":party_no", "p_castle_36"),
			(assign, reg0, "scn_castle_36_interrior_assault"),
		(else_try),
			(eq, ":party_no", "p_castle_37"),
			(assign, reg0, "scn_castle_37_interrior_assault"),
		(else_try),
			(eq, ":party_no", "p_castle_38"),
			(assign, reg0, "scn_castle_38_interrior_assault"),
		(else_try),
			(eq, ":party_no", "p_castle_39"),
			(assign, reg0, "scn_castle_39_interrior_assault"),
		(else_try),
			(assign, reg0, "scn_castle_40_interrior_assault"),
		(try_end),
	]),

	
	("cf_getman_test_riga_cond", 
	[
		(assign, reg0, -1), 
		(try_begin), 
			(store_faction_of_party, ":party_faction", "p_town_12"),
			#(quest_slot_ge, "qst_oim_getman_tampliers_archives", slot_quest_current_state, 1),
			(party_get_slot, ":center_lord", "p_town_12", slot_town_lord),
	
			(try_begin), 
				(ge, ":center_lord", 0),
				(call_script, "script_troop_get_player_relation", ":center_lord"),
				(assign, ":center_lord_relation", reg0),
			(else_try), 	
				(assign, ":center_lord_relation", 0),
			(try_end),	
			
			(this_or_next|eq, ":party_faction", "fac_player_supporters_faction"), 
			(this_or_next|ge, ":center_lord_relation", 25), 
			(             eq, ":party_faction", "$players_kingdom"), 	
			(assign, reg0, 1), 			
		(try_end), 
	]), 
	
	("get_ladder_mission",
    [	
		(party_set_slot,"p_town_1", slot_party_ladders_count, 4),
		(party_set_slot,"p_town_2", slot_party_ladders_count, 4),
		(party_set_slot,"p_town_3", slot_party_ladders_count, 2),
		(party_set_slot,"p_town_4", slot_party_ladders_count, 3),
		(party_set_slot,"p_town_5", slot_party_ladders_count, 5),
		(party_set_slot,"p_town_6", slot_party_ladders_count, 5),
		(party_set_slot,"p_town_7", slot_party_ladders_count, 3),
		(party_set_slot,"p_town_8", slot_party_ladders_count, 4),
		(party_set_slot,"p_town_9", slot_party_ladders_count, 2),
		(party_set_slot,"p_town_10", slot_party_ladders_count, 3),
		(party_set_slot,"p_town_11", slot_party_ladders_count, 4),
		(party_set_slot,"p_town_12", slot_party_ladders_count, 3),
		(party_set_slot,"p_town_13", slot_party_ladders_count, 2),
		(party_set_slot,"p_town_14", slot_party_ladders_count, 2),
		(party_set_slot,"p_town_15", slot_party_ladders_count, 2),
		(party_set_slot,"p_town_16", slot_party_ladders_count, 3),
		(party_set_slot,"p_town_17", slot_party_ladders_count, 2),
		(party_set_slot,"p_town_18", slot_party_ladders_count, 2),
		
		(party_set_slot,"p_castle_1", slot_party_ladders_count, 4),
		(party_set_slot,"p_castle_2", slot_party_ladders_count, 2),
		(party_set_slot,"p_castle_3", slot_party_ladders_count, 3),
		(party_set_slot,"p_castle_4", slot_party_ladders_count, 4),
		(party_set_slot,"p_castle_5", slot_party_ladders_count, 2),
		(party_set_slot,"p_castle_6", slot_party_ladders_count, 2),
		(party_set_slot,"p_castle_7", slot_party_ladders_count, 2),
		(party_set_slot,"p_castle_8", slot_party_ladders_count, 2),
		(party_set_slot,"p_castle_9", slot_party_ladders_count, 4),
		(party_set_slot,"p_castle_10", slot_party_ladders_count, 3),
		(party_set_slot,"p_castle_11", slot_party_ladders_count, 4),
		(party_set_slot,"p_castle_12", slot_party_ladders_count, 5),
		(party_set_slot,"p_castle_13", slot_party_ladders_count, 3),
		(party_set_slot,"p_castle_14", slot_party_ladders_count, 2),
		(party_set_slot,"p_castle_15", slot_party_ladders_count, 3),
		(party_set_slot,"p_castle_16", slot_party_ladders_count, 3),
		(party_set_slot,"p_castle_17", slot_party_ladders_count, 2),
		(party_set_slot,"p_castle_18", slot_party_ladders_count, 2),
		(party_set_slot,"p_castle_19", slot_party_ladders_count, 2),
		(party_set_slot,"p_castle_20", slot_party_ladders_count, 2),
		(party_set_slot,"p_castle_21", slot_party_ladders_count, 4),
		(party_set_slot,"p_castle_22", slot_party_ladders_count, 3),
		(party_set_slot,"p_castle_23", slot_party_ladders_count, 4),
		(party_set_slot,"p_castle_24", slot_party_ladders_count, 3),
		(party_set_slot,"p_castle_25", slot_party_ladders_count, 4),
		(party_set_slot,"p_castle_26", slot_party_ladders_count, 4),
		(party_set_slot,"p_castle_27", slot_party_ladders_count, 3),
		(party_set_slot,"p_castle_28", slot_party_ladders_count, 4),
		(party_set_slot,"p_castle_29", slot_party_ladders_count, 2),
		(party_set_slot,"p_castle_30", slot_party_ladders_count, 2),
		(party_set_slot,"p_castle_31", slot_party_ladders_count, 2),
		(party_set_slot,"p_castle_32", slot_party_ladders_count, 3),
		(party_set_slot,"p_castle_33", slot_party_ladders_count, 2),
		(party_set_slot,"p_castle_34", slot_party_ladders_count, 4),
		(party_set_slot,"p_castle_35", slot_party_ladders_count, 3),
		(party_set_slot,"p_castle_36", slot_party_ladders_count, 4),
		(party_set_slot,"p_castle_37", slot_party_ladders_count, 2),
		(party_set_slot,"p_castle_38", slot_party_ladders_count, 2),
		(party_set_slot,"p_castle_39", slot_party_ladders_count, 2),
		(party_set_slot,"p_castle_40", slot_party_ladders_count, 2),
			
		(party_get_slot, ":ladders_count", "$g_encountered_party", slot_party_ladders_count),
		##(val_sub, ":ladders_count", 2),
		##(store_add, reg0, "mt_castle_attack_walls_2_ladder", ":ladders_count"),
		(assign, reg0, "mt_oim_castle_attack_walls_2_ladder"),
		(assign, reg1, ":ladders_count"),
		
	]),
	
	("oim_remove_lord_and_replace", 
	[
		(store_script_param_1, ":lord_to_remove"),
		(store_script_param_2, ":lord_no"),
		
		(store_troop_faction, ":cur_faction", ":lord_to_remove"),
		
		#creating a new hero party with lord_no
		(try_begin), 
			(neq, ":lord_no", "trp_player"),
			(troop_set_slot, ":lord_no", slot_troop_occupation, slto_kingdom_hero),
			(try_begin), 
				(troop_slot_ge, ":lord_no", slot_troop_prisoner_of_party, 0),
				(troop_get_slot, ":party_no", ":lord_no", slot_troop_prisoner_of_party),
				(party_remove_prisoners, ":party_no", ":lord_no", 1),
			(try_end),	
			(troop_set_slot, ":lord_no", slot_troop_prisoner_of_party, -1),
			(troop_set_slot, ":lord_no", slot_troop_leaded_party, -1),
        
			(call_script, "script_change_troop_faction", ":lord_no", ":cur_faction"),
			(try_begin),
				(call_script, "script_cf_select_random_walled_center_with_faction_and_owner_priority_no_siege", ":cur_faction", ":lord_no"),#Can fail
				(assign, ":center_no", reg0),
				(call_script, "script_create_kingdom_hero_party", ":lord_no", ":center_no", 1),
				(party_attach_to_party, "$pout_party", ":center_no"),
			(try_end),
		(try_end),
		
		#moving centers
		(try_for_range, ":center_no", centers_begin, centers_end),
			(party_slot_eq, ":center_no", slot_town_lord, ":lord_to_remove"),
			(party_set_slot, ":center_no", slot_town_lord, ":lord_no"),
		(try_end), 
		
		#canceling quests
		(try_for_range, ":quest_no", all_quests_begin, "qst_talk_to_zamoshie_elder"), 
			(quest_slot_eq, ":quest_no", slot_quest_giver_troop, ":lord_no"),
			(call_script, "script_cancel_quest", ":quest_no"),
		(try_end),
		
		#removing lord and hir party		
		(troop_get_slot, ":party_no", ":lord_to_remove", slot_troop_leaded_party),
		(try_begin), 
			(ge, ":party_no", 0), 
			(call_script, "script_cf_oim_remove_party", ":party_no"),
		(try_end),	
		
		(troop_set_slot, ":lord_to_remove", slot_troop_leaded_party, -1),
		(call_script, "script_change_troop_faction", ":lord_to_remove", "fac_commoners"),
		(troop_set_slot, ":lord_to_remove", slot_troop_occupation, -1),
		(try_begin), 
			(troop_slot_ge, ":lord_to_remove", slot_troop_prisoner_of_party, 0),
			(troop_get_slot, ":party_no", ":lord_to_remove", slot_troop_prisoner_of_party),
			(party_remove_prisoners, ":party_no", ":lord_to_remove", 1),
		(try_end),			
		#seting lord as a king
		(faction_set_slot, ":cur_faction", slot_faction_leader, ":lord_no"),
		(call_script, "script_update_all_notes"),
		(assign, "$g_recalculate_ais", 1),		
		
	]), 
	
	("oim_restore_player_to_faction", 
	[
		(store_script_param_1, ":faction_no"),
		(faction_get_slot, ":leader", ":faction_no", slot_faction_leader),
		(try_begin),
			(is_between, "$players_oath_renounced_against_kingdom", kingdoms_begin, kingdoms_end),
			(neq, "$players_oath_renounced_against_kingdom", ":faction_no"),
			(store_relation, ":relation", "fac_player_supporters_faction", "$players_oath_renounced_against_kingdom"),
			(val_min, ":relation", -40),
			(call_script, "script_set_player_relation_with_faction", "$players_oath_renounced_against_kingdom", ":relation"),
		(try_end),
		(try_begin),
			(is_between, "$players_kingdom", kingdoms_begin, kingdoms_end),
			(neq, "$players_kingdom", "fac_player_supporters_faction"),
			(faction_get_slot, ":old_leader", "$players_kingdom", slot_faction_leader),
			(call_script, "script_add_log_entry", logent_renounced_allegiance,   "trp_player",  -1, ":old_leader", "$players_kingdom"),
			(call_script, "script_player_leave_faction", 1),
		(try_end),
		(call_script, "script_player_join_faction", ":faction_no"),
		(call_script, "script_add_log_entry", logent_pledged_allegiance,   "trp_player",  -1, ":leader", ":faction_no"),
		(assign, "$player_has_homage" ,1),
		(assign, "$g_player_banner_granted", 1),
		(assign, "$g_invite_faction", 0),
		(assign, "$g_invite_faction_lord", 0),
		(assign, "$g_invite_offered_center", 0),	
		
		(faction_set_slot, ":faction_no", slot_faction_marshall, "trp_player"),
		
		(call_script, "script_update_all_notes"),
		(assign, "$g_recalculate_ais", 1),
	]),
	
	
	  # script_diplomacy_start_peace_between_kingdoms
  # Input: arg1 = kingdom_1, arg2 = kingdom_2, arg3 = initializing_war_peace_cond
  # Output: none
  ("oim_diplomacy_start_peace_between_kingdoms", #sets relations between two kingdoms
    [
      (store_script_param, ":kingdom_a", 1),
      (store_script_param, ":kingdom_b", 2),
      (store_script_param, ":initializing_war_peace_cond", 3),

      (store_relation, ":relation", ":kingdom_a", ":kingdom_b"),
      (val_max, ":relation", 0),
      (set_relation, ":kingdom_a", ":kingdom_b", ":relation"),
      (call_script, "script_exchange_prisoners_between_factions", ":kingdom_a", ":kingdom_b"),

      (try_begin),
        (eq, "$players_kingdom", ":kingdom_a"),
        (store_relation, ":relation", "fac_player_supporters_faction", ":kingdom_b"),
        (val_max, ":relation", 0),
        (call_script, "script_set_player_relation_with_faction", ":kingdom_b", ":relation"),
        (call_script, "script_event_kingdom_make_peace_with_kingdom", ":kingdom_b", "fac_player_supporters_faction"),
      (else_try),
        (eq, "$players_kingdom", ":kingdom_b"),
        (store_relation, ":relation", "fac_player_supporters_faction", ":kingdom_a"),
        (val_max, ":relation", 0),
        (call_script, "script_set_player_relation_with_faction", ":kingdom_a", ":relation"),
        (call_script, "script_event_kingdom_make_peace_with_kingdom", ":kingdom_a", "fac_player_supporters_faction"),
      (try_end),

      (try_begin),
        (eq, ":initializing_war_peace_cond", 1),
        (str_store_faction_name_link, s1, ":kingdom_a"),
        (str_store_faction_name_link, s2, ":kingdom_b"),
        #(display_log_message, "@{s1} and {s2} have made peace with each other."),
        (call_script, "script_update_faction_notes", ":kingdom_a"),
        (call_script, "script_update_faction_notes", ":kingdom_b"),

        #(call_script, "script_add_notification_menu", "mnu_notification_peace_declared", ":kingdom_a", ":kingdom_b"),

        (call_script, "script_event_kingdom_make_peace_with_kingdom", ":kingdom_a", ":kingdom_b"),
        (call_script, "script_event_kingdom_make_peace_with_kingdom", ":kingdom_b", ":kingdom_a"),
        (assign, "$g_recalculate_ais", 1),
      (try_end),
  ]),
  
  ("oim_diplomacy_start_war_between_kingdoms", #sets relations between two kingdoms and their vassals.
    [
      (store_script_param, ":kingdom_a", 1),
      (store_script_param, ":kingdom_b", 2),
      (store_script_param, ":initializing_war_peace_cond", 3),
      
      (store_relation, ":relation", ":kingdom_a", ":kingdom_b"),
      (val_min, ":relation", -10),
      (val_add, ":relation", -30),
      (set_relation, ":kingdom_a", ":kingdom_b", ":relation"),

      (try_begin),
        (eq, "$players_kingdom", ":kingdom_a"),
        (store_relation, ":relation", "fac_player_supporters_faction", ":kingdom_b"),
        (val_min, ":relation", -30),
        (call_script, "script_set_player_relation_with_faction", ":kingdom_b", ":relation"),
      (else_try),
        (eq, "$players_kingdom", ":kingdom_b"),
        (store_relation, ":relation", "fac_player_supporters_faction", ":kingdom_a"),
        (val_min, ":relation", -30),
        (call_script, "script_set_player_relation_with_faction", ":kingdom_a", ":relation"),
      (try_end),

      (try_begin),
        (eq, ":initializing_war_peace_cond", 1),
        (try_begin),
          (store_random_in_range, ":random_no", 0, 2),
          (this_or_next|eq, ":kingdom_a", "fac_player_supporters_faction"),
          (eq, ":random_no", 0),
          (assign, ":local_temp", ":kingdom_a"),
          (assign, ":kingdom_a", ":kingdom_b"),
          (assign, ":kingdom_b", ":local_temp"),
        (try_end),
        (str_store_faction_name_link, s1, ":kingdom_a"),
        (str_store_faction_name_link, s2, ":kingdom_b"),
        #(display_log_message, "@{s1} has declared war against {s2}."),

        #(call_script, "script_add_notification_menu", "mnu_notification_war_declared", ":kingdom_a", ":kingdom_b"),

        (call_script, "script_update_faction_notes", ":kingdom_a"),
        (call_script, "script_update_faction_notes", ":kingdom_b"),
        (assign, "$g_recalculate_ais", 1),
      (try_end),
  ]),  
  
  ("cf_oim_check_condition_for_talk",
  [
	(store_faction_of_party, ":g_talk_troop_party_faction1", "$g_encountered_party"),
	
	(assign, reg0, 0), 
	(try_begin),
		(eq, "$talk_context", tc_court_talk),
        (is_between,"$g_talk_troop",regular_troops_begin, regular_troops_end),
        (is_between,"$g_encountered_party_faction",kingdoms_begin, kingdoms_end),
		(assign, reg0, 1), 
	(else_try), 
		(party_get_template_id, ":template", "$g_talk_troop_party"),
		(this_or_next|eq, ":template", "pt_forager_party"), 
		(this_or_next|eq, ":template", "pt_scout_party"), 
		(             eq, ":template", "pt_patrol_party"), 
		(eq, ":g_talk_troop_party_faction1", "$players_kingdom"),
		(assign, reg0, 1), 
		(assign, "$g_leave_encounter", 1),
	(try_end),
  ]), 

 ("cf_oim_remove_party", 
 [
	(store_script_param, ":party_no", 1),
	(try_begin), 
		(neq, ":party_no", "p_collective_enemy"), 
		(remove_party, ":party_no"), 
	(else_try), 	
		(display_log_message, "@{!}Attempt to delete p_collective_enemy!!!"), 
	(try_end), 
 ]),   
	#Expanded management system -begin
	#MS Init scripts -begin
	("ms_init",
    [	
		(assign, "$g_ms_cur_elements_type", ms_flag_building),
		(try_for_range, ":cur_element", ms_elenents_start, ms_elements_end),
			(store_sub, ":offset", ":cur_element", ms_elenents_start),
			(val_mul, ":offset", 15),
			(store_add, ":start_string", ":offset", ms_descr_strings_start),
			(try_for_range, ":slot_offset", 0, 15),
				(store_add, ":cur_descr_string", ":start_string", ":slot_offset"),
				(troop_set_slot, ":cur_element", ":slot_offset", ":cur_descr_string"),
			(try_end),
			(troop_set_slot, ":cur_element", slot_ms_was_used, ms_flag_empty),
			(troop_set_slot, ":cur_element", slot_ms_construct_requirements, ms_flag_empty),
			(troop_set_slot, ":cur_element", slot_ms_ai_requirements, ms_flag_empty),
			(troop_set_slot, ":cur_element", slot_ms_additional_menu, ms_flag_empty),
			(troop_set_slot, ":cur_element", slot_ms_additional_menu_p1, "script_ms_add_always_true"),
			(troop_set_slot, ":cur_element", slot_ms_script_before_attack, ms_flag_empty),
			(troop_set_slot, ":cur_element", slot_ms_script_looted, ms_flag_empty),
			(troop_set_slot, ":cur_element", slot_ms_script_captured, ms_flag_empty),
			(troop_set_slot, ":cur_element", slot_ms_script_after_construct, ms_flag_empty),
			(troop_set_slot, ":cur_element", slot_ms_script_24_hour, ms_flag_empty),
			(troop_set_slot, ":cur_element", slot_ms_script_7_day, ms_flag_empty),
			(troop_set_slot, ":cur_element", slot_ms_script_30_day, ms_flag_empty),
		(try_end),
		
		#(troop_set_slot, "trp_town_building_merchant_guild", slot_ms_construct_requirements, ms_flag_empty),
		(troop_set_slot, "trp_town_building_treasury", slot_ms_construct_requirements, "script_ms_construct_only_one_instanse_for_player"),
		(troop_set_slot, "trp_town_upgrade_trading_master", slot_ms_construct_requirements, "script_ms_construct_party_has_merchant_guild"),
		(troop_set_slot, "trp_town_upgrade_garrison_commander", slot_ms_construct_requirements, "script_ms_construct_party_has_arm_buildings"),
		(troop_set_slot, "trp_town_upgrade_officer_infantry", slot_ms_construct_requirements, "script_ms_construct_party_has_certain_officer"),
		(troop_set_slot, "trp_town_upgrade_officer_infantry", slot_ms_construct_requirements_p1, "trp_town_upgrade_garrison_commander"),
		(troop_set_slot, "trp_town_upgrade_officer_infantry", slot_ms_construct_requirements_p2, ms_flag_infantry),
		(troop_set_slot, "trp_town_upgrade_officer_cavalry", slot_ms_construct_requirements, "script_ms_construct_party_has_certain_officer"),
		(troop_set_slot, "trp_town_upgrade_officer_cavalry", slot_ms_construct_requirements_p1, "trp_town_upgrade_officer_infantry"),
		(troop_set_slot, "trp_town_upgrade_officer_cavalry", slot_ms_construct_requirements_p2, ms_flag_cavalry),
		(troop_set_slot, "trp_town_upgrade_officer_infantry_guard", slot_ms_construct_requirements, "script_ms_construct_party_has_certain_officer"),
		(troop_set_slot, "trp_town_upgrade_officer_infantry_guard", slot_ms_construct_requirements_p1, "trp_town_upgrade_officer_infantry"),
		(troop_set_slot, "trp_town_upgrade_officer_infantry_guard", slot_ms_construct_requirements_p2, ms_flag_infantry),
		(troop_set_slot, "trp_town_upgrade_officer_cavalry_guard", slot_ms_construct_requirements, "script_ms_construct_party_has_certain_officer"),
		(troop_set_slot, "trp_town_upgrade_officer_cavalry_guard", slot_ms_construct_requirements_p1, "trp_town_upgrade_officer_cavalry"),
		(troop_set_slot, "trp_town_upgrade_officer_cavalry_guard", slot_ms_construct_requirements_p2, ms_flag_cavalry),
		(troop_set_slot, "trp_town_upgrade_officer_elite_guard", slot_ms_construct_requirements, "script_ms_construct_party_has_certain_officers"),
		(troop_set_slot, "trp_town_upgrade_officer_elite_guard", slot_ms_construct_requirements_p1, "trp_town_upgrade_officer_infantry_guard"),
		(troop_set_slot, "trp_town_upgrade_officer_elite_guard", slot_ms_construct_requirements_p2, "trp_town_upgrade_officer_cavalry_guard"),
		(troop_set_slot, "trp_town_upgrade_officer_elite_guard", slot_ms_construct_requirements_p3, ms_flag_cavalry),
		(troop_set_slot, "trp_town_upgrade_officer_mercenary", slot_ms_construct_requirements, "script_ms_construct_party_has_certain_officer"),
		(troop_set_slot, "trp_town_upgrade_officer_mercenary", slot_ms_construct_requirements_p1, "trp_town_upgrade_officer_infantry"),
		(troop_set_slot, "trp_town_upgrade_officer_mercenary", slot_ms_construct_requirements_p2, ms_flag_cavalry),
		(troop_set_slot, "trp_town_building_merchant_guild", slot_ms_ai_requirements, "script_ms_construct_prosperity_rich_or_greater"),
		(troop_set_slot, "trp_town_building_treasury", slot_ms_ai_requirements, "script_ms_construct_only_one_instanse_for_lord_faction"),
		(troop_set_slot, "trp_town_upgrade_garrison_commander", slot_ms_ai_requirements, "script_ms_construct_party_has_arm_buildings"),
		(troop_set_slot, "trp_town_upgrade_officer_infantry", slot_ms_ai_requirements, "script_ms_construct_party_has_certain_officer"),
		(troop_set_slot, "trp_town_upgrade_officer_infantry", slot_ms_ai_requirements_p1, "trp_town_upgrade_garrison_commander"),
		(troop_set_slot, "trp_town_upgrade_officer_infantry", slot_ms_ai_requirements_p2, ms_flag_infantry),
		(troop_set_slot, "trp_town_upgrade_officer_cavalry", slot_ms_ai_requirements, "script_ms_construct_party_has_certain_officer"),
		(troop_set_slot, "trp_town_upgrade_officer_cavalry", slot_ms_ai_requirements_p1, "trp_town_upgrade_officer_infantry"),
		(troop_set_slot, "trp_town_upgrade_officer_cavalry", slot_ms_ai_requirements_p2, ms_flag_cavalry),
		(troop_set_slot, "trp_town_upgrade_officer_infantry_guard", slot_ms_ai_requirements, "script_ms_construct_party_has_certain_officer"),
		(troop_set_slot, "trp_town_upgrade_officer_infantry_guard", slot_ms_ai_requirements_p1, "trp_town_upgrade_officer_infantry"),
		(troop_set_slot, "trp_town_upgrade_officer_infantry_guard", slot_ms_ai_requirements_p2, ms_flag_infantry),
		(troop_set_slot, "trp_town_upgrade_officer_cavalry_guard", slot_ms_ai_requirements, "script_ms_construct_party_has_certain_officer"),
		(troop_set_slot, "trp_town_upgrade_officer_cavalry_guard", slot_ms_ai_requirements_p1, "trp_town_upgrade_officer_cavalry"),
		(troop_set_slot, "trp_town_upgrade_officer_cavalry_guard", slot_ms_ai_requirements_p2, ms_flag_cavalry),
		(troop_set_slot, "trp_town_upgrade_officer_elite_guard", slot_ms_ai_requirements, "script_ms_construct_party_has_certain_officers"),
		(troop_set_slot, "trp_town_upgrade_officer_elite_guard", slot_ms_ai_requirements_p1, "trp_town_upgrade_officer_infantry_guard"),
		(troop_set_slot, "trp_town_upgrade_officer_elite_guard", slot_ms_ai_requirements_p2, "trp_town_upgrade_officer_cavalry_guard"),
		(troop_set_slot, "trp_town_upgrade_officer_elite_guard", slot_ms_ai_requirements_p3, ms_flag_cavalry),
		(troop_set_slot, "trp_town_upgrade_officer_mercenary", slot_ms_ai_requirements, "script_ms_construct_party_has_certain_officer"),
		(troop_set_slot, "trp_town_upgrade_officer_mercenary", slot_ms_ai_requirements_p1, "trp_town_upgrade_officer_infantry"),
		(troop_set_slot, "trp_town_upgrade_officer_mercenary", slot_ms_ai_requirements_p2, ms_flag_cavalry),
		
		(troop_set_slot, "trp_town_building_arsenal", slot_ms_ai_priority, 100),
		(troop_set_slot, "trp_town_building_waterpipe", slot_ms_ai_priority, 90),
		(troop_set_slot, "trp_town_building_school", slot_ms_ai_priority, 90),
		(troop_set_slot, "trp_town_building_merchant_guild", slot_ms_ai_priority, 90),
		(troop_set_slot, "trp_town_building_defense", slot_ms_ai_priority, 70),
		(troop_set_slot, "trp_town_building_treasury", slot_ms_ai_priority, 10),
		(troop_set_slot, "trp_town_upgrade_armourer", slot_ms_ai_priority, 80),
		(troop_set_slot, "trp_town_upgrade_protection", slot_ms_ai_priority, 70),
		(troop_set_slot, "trp_town_upgrade_groom", slot_ms_ai_priority, 80),
		(troop_set_slot, "trp_town_upgrade_adviser", slot_ms_ai_priority, 0),
		(troop_set_slot, "trp_town_upgrade_secret_order", slot_ms_ai_priority, 80),
		(troop_set_slot, "trp_town_upgrade_tax_supervisor", slot_ms_ai_priority, 80),
		(troop_set_slot, "trp_town_upgrade_trading_master", slot_ms_ai_priority, 80),
		(troop_set_slot, "trp_town_upgrade_priest", slot_ms_ai_priority, 80),
		(troop_set_slot, "trp_town_upgrade_garrison_commander", slot_ms_ai_priority, 80),
		(troop_set_slot, "trp_village_building_mill", slot_ms_ai_priority, 80),
		(troop_set_slot, "trp_village_building_barn", slot_ms_ai_priority, 80),
		(troop_set_slot, "trp_village_building_school", slot_ms_ai_priority, 80),
		(troop_set_slot, "trp_village_building_secret_place", slot_ms_ai_priority, 80),
		(troop_set_slot, "trp_village_building_administration", slot_ms_ai_priority, 80),
		(troop_set_slot, "trp_village_upgrade_judge", slot_ms_ai_priority, 80),
		(troop_set_slot, "trp_village_upgrade_treasurer", slot_ms_ai_priority, 80),
		(troop_set_slot, "trp_village_upgrade_priest", slot_ms_ai_priority, 80),
		(troop_set_slot, "trp_village_upgrade_police_master", slot_ms_ai_priority, 80),
		(troop_set_slot, "trp_town_building_barrack", slot_ms_ai_priority, 80),
		(troop_set_slot, "trp_town_building_stable", slot_ms_ai_priority, 60),
		(troop_set_slot, "trp_town_upgrade_officer_infantry", slot_ms_ai_priority, 80),
		(troop_set_slot, "trp_town_upgrade_officer_cavalry", slot_ms_ai_priority, 80),
		(troop_set_slot, "trp_town_upgrade_officer_infantry_guard", slot_ms_ai_priority, 70),
		(troop_set_slot, "trp_town_upgrade_officer_cavalry_guard", slot_ms_ai_priority, 70),
		(troop_set_slot, "trp_town_upgrade_officer_elite_guard", slot_ms_ai_priority, 60),
		(troop_set_slot, "trp_town_upgrade_officer_mercenary", slot_ms_ai_priority, 60),
		
		(troop_set_slot, "trp_town_building_arsenal", slot_ms_price, 8000),
		(troop_set_slot, "trp_town_building_waterpipe", slot_ms_price, 4000),
		(troop_set_slot, "trp_town_building_school", slot_ms_price, 11000),
		(troop_set_slot, "trp_town_building_merchant_guild", slot_ms_price, 4000),
		(troop_set_slot, "trp_town_building_defense", slot_ms_price, 12000),
		(troop_set_slot, "trp_town_building_treasury", slot_ms_price, 3000),
		(troop_set_slot, "trp_town_upgrade_armourer", slot_ms_price, 2000),
		(troop_set_slot, "trp_town_upgrade_protection", slot_ms_price, 2000),
		(troop_set_slot, "trp_town_upgrade_groom", slot_ms_price, 3000),
		(troop_set_slot, "trp_town_upgrade_adviser", slot_ms_price, 1500),
		(troop_set_slot, "trp_town_upgrade_secret_order", slot_ms_price, 1300),
		(troop_set_slot, "trp_town_upgrade_tax_supervisor", slot_ms_price, 1200),
		(troop_set_slot, "trp_town_upgrade_trading_master", slot_ms_price, 1400),
		(troop_set_slot, "trp_town_upgrade_priest", slot_ms_price, 2000),
		(troop_set_slot, "trp_town_upgrade_garrison_commander", slot_ms_price, 1500),
		(troop_set_slot, "trp_village_building_mill", slot_ms_price, 2500),
		(troop_set_slot, "trp_village_building_barn", slot_ms_price, 1200),
		(troop_set_slot, "trp_village_building_school", slot_ms_price, 1200),
		(troop_set_slot, "trp_village_building_secret_place", slot_ms_price, 2000),
		(troop_set_slot, "trp_village_building_administration", slot_ms_price, 1100),
		(troop_set_slot, "trp_village_upgrade_judge", slot_ms_price, 1100),
		(troop_set_slot, "trp_village_upgrade_treasurer", slot_ms_price, 1100),
		(troop_set_slot, "trp_village_upgrade_priest", slot_ms_price, 900),
		(troop_set_slot, "trp_village_upgrade_police_master", slot_ms_price, 500),
		(troop_set_slot, "trp_town_building_barrack", slot_ms_price, 4000),
		(troop_set_slot, "trp_town_building_stable", slot_ms_price, 6500),
		(troop_set_slot, "trp_town_upgrade_officer_infantry", slot_ms_price, 1800),
		(troop_set_slot, "trp_town_upgrade_officer_cavalry", slot_ms_price, 2900),
		(troop_set_slot, "trp_town_upgrade_officer_infantry_guard", slot_ms_price, 4050),
		(troop_set_slot, "trp_town_upgrade_officer_cavalry_guard", slot_ms_price, 4200),
		(troop_set_slot, "trp_town_upgrade_officer_elite_guard", slot_ms_price, 10000),
		(troop_set_slot, "trp_town_upgrade_officer_mercenary", slot_ms_price, 3500),
		
		(troop_set_slot, "trp_town_building_arsenal", slot_ms_construct_time, 12*14),
		(troop_set_slot, "trp_town_building_waterpipe", slot_ms_construct_time, 10*12),
		(troop_set_slot, "trp_town_building_school", slot_ms_construct_time, 10*24),
		#(troop_set_slot, "trp_town_building_merchant_guild", slot_ms_construct_time, 10*24),
		(troop_set_slot, "trp_town_building_merchant_guild", slot_ms_construct_time, 1),
		(troop_set_slot, "trp_town_building_defense", slot_ms_construct_time, 21*24),
		(troop_set_slot, "trp_town_building_treasury", slot_ms_construct_time, 20*24),
		(troop_set_slot, "trp_town_upgrade_armourer", slot_ms_construct_time, 5*24),
		(troop_set_slot, "trp_town_upgrade_protection", slot_ms_construct_time, 5*24),
		(troop_set_slot, "trp_town_upgrade_groom", slot_ms_construct_time, 5*24),
		(troop_set_slot, "trp_town_upgrade_adviser", slot_ms_construct_time, 3*24),
		(troop_set_slot, "trp_town_upgrade_secret_order", slot_ms_construct_time, 4*24),
		(troop_set_slot, "trp_town_upgrade_tax_supervisor", slot_ms_construct_time, 4*24),
		(troop_set_slot, "trp_town_upgrade_trading_master", slot_ms_construct_time, 4*24),
		(troop_set_slot, "trp_town_upgrade_priest", slot_ms_construct_time, 5*24),
		(troop_set_slot, "trp_town_upgrade_garrison_commander", slot_ms_construct_time, 5*24),
		(troop_set_slot, "trp_village_building_mill", slot_ms_construct_time, 10*24),
		(troop_set_slot, "trp_village_building_barn", slot_ms_construct_time, 7*24),
		(troop_set_slot, "trp_village_building_school", slot_ms_construct_time, 7*24),
		(troop_set_slot, "trp_village_building_secret_place", slot_ms_construct_time, 3*24),
		(troop_set_slot, "trp_village_building_administration", slot_ms_construct_time, 4*24),
		(troop_set_slot, "trp_village_upgrade_judge", slot_ms_construct_time, 3*24),
		(troop_set_slot, "trp_village_upgrade_treasurer", slot_ms_construct_time, 4*24),
		(troop_set_slot, "trp_village_upgrade_priest", slot_ms_construct_time, 5*24),
		(troop_set_slot, "trp_village_upgrade_police_master", slot_ms_construct_time, 3*24),
		(troop_set_slot, "trp_town_building_barrack", slot_ms_construct_time, 5*24),
		(troop_set_slot, "trp_town_building_stable", slot_ms_construct_time, 6*24),
		(troop_set_slot, "trp_town_upgrade_officer_infantry", slot_ms_construct_time, 4*24),
		(troop_set_slot, "trp_town_upgrade_officer_cavalry", slot_ms_construct_time, 5*24),
		(troop_set_slot, "trp_town_upgrade_officer_infantry_guard", slot_ms_construct_time, 4*24),
		(troop_set_slot, "trp_town_upgrade_officer_cavalry_guard", slot_ms_construct_time, 4*24),
		(troop_set_slot, "trp_town_upgrade_officer_elite_guard", slot_ms_construct_time, 10*24),
		(troop_set_slot, "trp_town_upgrade_officer_mercenary", slot_ms_construct_time, 12*24),
		
		(troop_set_slot, "trp_town_building_school", slot_ms_additional_menu, "mnu_ms_additional_school"),
		(troop_set_slot, "trp_town_building_merchant_guild", slot_ms_additional_menu, "mnu_ms_additional_merchant_guild"),
		(troop_set_slot, "trp_town_building_merchant_guild", slot_ms_additional_menu_p1, "script_ms_add_check_troop_faction_relations"),
		(troop_set_slot, "trp_town_upgrade_armourer", slot_ms_additional_menu, "mnu_ms_additional_extra_goods"),
		(troop_set_slot, "trp_town_upgrade_protection", slot_ms_additional_menu, "mnu_ms_additional_extra_goods"),
		(troop_set_slot, "trp_town_upgrade_groom", slot_ms_additional_menu, "mnu_ms_additional_extra_goods"),
		(troop_set_slot, "trp_town_upgrade_adviser", slot_ms_additional_menu, "mnu_ms_additional_adviser"),
		(troop_set_slot, "trp_town_upgrade_adviser", slot_ms_additional_menu_p1, "script_ms_add_always_false"),
		(troop_set_slot, "trp_town_upgrade_garrison_commander", slot_ms_additional_menu, "mnu_ms_additional_officer"),
		(troop_set_slot, "trp_town_upgrade_garrison_commander", slot_ms_additional_menu_p1, "script_ms_check_for_any_officer"),
		
		(troop_set_slot, "trp_town_building_arsenal", slot_ms_script_before_attack, ms_flag_empty), #Suvorov Removed somewhat bugged scripts. 
		(troop_set_slot, "trp_town_building_defense", slot_ms_script_before_attack, ms_flag_empty),
		(troop_set_slot, "trp_town_upgrade_garrison_commander", slot_ms_script_before_attack, ms_flag_empty),
		
		(troop_set_slot, "trp_village_building_mill", slot_ms_script_looted, "script_ms_event_destroy_element"),
		(troop_set_slot, "trp_village_building_mill", slot_ms_script_looted_p1, 10),
		(troop_set_slot, "trp_village_building_barn", slot_ms_script_looted, "script_ms_event_destroy_element"),
		(troop_set_slot, "trp_village_building_barn", slot_ms_script_looted_p1, 10),
		(troop_set_slot, "trp_village_building_school", slot_ms_script_looted, "script_ms_event_destroy_element"),
		(troop_set_slot, "trp_village_building_school", slot_ms_script_looted_p1, 10),
		(troop_set_slot, "trp_village_building_secret_place", slot_ms_script_looted, "script_ms_event_destroy_element"),
		(troop_set_slot, "trp_village_building_secret_place", slot_ms_script_looted_p1, 15),
		(troop_set_slot, "trp_village_building_administration", slot_ms_script_looted, "script_ms_event_destroy_element"),
		(troop_set_slot, "trp_village_building_administration", slot_ms_script_looted_p1, 10),
		(troop_set_slot, "trp_village_upgrade_judge", slot_ms_script_looted, "script_ms_event_destroy_element"),
		(troop_set_slot, "trp_village_upgrade_judge", slot_ms_script_looted_p1, 10),
		(troop_set_slot, "trp_village_upgrade_treasurer", slot_ms_script_looted, "script_ms_event_destroy_element"),
		(troop_set_slot, "trp_village_upgrade_treasurer", slot_ms_script_looted_p1, 10),
		(troop_set_slot, "trp_village_upgrade_priest", slot_ms_script_looted, "script_ms_event_destroy_element"),
		(troop_set_slot, "trp_village_upgrade_priest", slot_ms_script_looted_p1, 10),
		(troop_set_slot, "trp_village_upgrade_police_master", slot_ms_script_looted, "script_ms_event_destroy_element"),
		(troop_set_slot, "trp_village_upgrade_police_master", slot_ms_script_looted_p1, 10),
				
		(troop_set_slot, "trp_town_building_arsenal", slot_ms_script_captured, "script_ms_event_capture_v1"),
		(troop_set_slot, "trp_town_building_arsenal", slot_ms_script_captured_p1, 10),
		(troop_set_slot, "trp_town_building_waterpipe", slot_ms_script_captured, "script_ms_event_capture_without_msg"),
		(troop_set_slot, "trp_town_building_waterpipe", slot_ms_script_captured_p1, 10),
		(troop_set_slot, "trp_town_building_school", slot_ms_script_captured, "script_ms_event_capture_without_msg"),
		(troop_set_slot, "trp_town_building_school", slot_ms_script_captured_p1, 10),
		(troop_set_slot, "trp_town_building_merchant_guild", slot_ms_script_captured, "script_ms_event_capture_without_msg"),
		(troop_set_slot, "trp_town_building_merchant_guild", slot_ms_script_captured_p1, -1), #do not destroy this, causes credit bag
		(troop_set_slot, "trp_town_building_defense", slot_ms_script_captured, "script_ms_event_capture_without_msg"),
		(troop_set_slot, "trp_town_building_defense", slot_ms_script_captured_p1, 100),
		(troop_set_slot, "trp_town_building_treasury", slot_ms_script_captured, "script_ms_event_capture_treasure"),
		(troop_set_slot, "trp_town_upgrade_armourer", slot_ms_script_captured, "script_ms_event_capture_without_msg"),
		(troop_set_slot, "trp_town_upgrade_armourer", slot_ms_script_captured_p1, 70),
		(troop_set_slot, "trp_town_upgrade_protection", slot_ms_script_captured, "script_ms_event_capture_without_msg"),
		(troop_set_slot, "trp_town_upgrade_protection", slot_ms_script_captured_p1, 70),
		(troop_set_slot, "trp_town_upgrade_groom", slot_ms_script_captured, "script_ms_event_capture_without_msg"),
		(troop_set_slot, "trp_town_upgrade_groom", slot_ms_script_captured_p1, 70),
		(troop_set_slot, "trp_town_upgrade_adviser", slot_ms_script_captured, "script_ms_event_capture_without_msg"),
		(troop_set_slot, "trp_town_upgrade_adviser", slot_ms_script_captured_p1, 100),
		(troop_set_slot, "trp_town_upgrade_secret_order", slot_ms_script_captured, "script_ms_event_capture_without_msg"),
		(troop_set_slot, "trp_town_upgrade_secret_order", slot_ms_script_captured_p1, 40),
		(troop_set_slot, "trp_town_upgrade_tax_supervisor", slot_ms_script_captured, "script_ms_event_capture_without_msg"),
		(troop_set_slot, "trp_town_upgrade_tax_supervisor", slot_ms_script_captured_p1, 70),
		(troop_set_slot, "trp_town_upgrade_trading_master", slot_ms_script_captured, "script_ms_event_capture_without_msg"),
		(troop_set_slot, "trp_town_upgrade_trading_master", slot_ms_script_captured_p1, 70),
		(troop_set_slot, "trp_town_upgrade_priest", slot_ms_script_captured, "script_ms_event_capture_without_msg"),
		(troop_set_slot, "trp_town_upgrade_priest", slot_ms_script_captured_p1, 40),
		(troop_set_slot, "trp_town_upgrade_garrison_commander", slot_ms_script_captured, "script_ms_event_capture_without_msg"),
		(troop_set_slot, "trp_town_upgrade_garrison_commander", slot_ms_script_captured_p1, 100),
		(troop_set_slot, "trp_village_building_secret_place", slot_ms_script_captured, "script_ms_event_capture_without_msg"),
		(troop_set_slot, "trp_village_building_secret_place", slot_ms_script_captured_p1, 100),
		(troop_set_slot, "trp_village_upgrade_judge", slot_ms_script_captured, "script_ms_event_capture_with_msg"),
		(troop_set_slot, "trp_village_upgrade_judge", slot_ms_script_captured_p1, 25),
		(troop_set_slot, "trp_village_upgrade_treasurer", slot_ms_script_captured, "script_ms_event_capture_with_msg"),
		(troop_set_slot, "trp_village_upgrade_treasurer", slot_ms_script_captured_p1, 25),
		(troop_set_slot, "trp_village_upgrade_priest", slot_ms_script_captured, "script_ms_event_capture_with_msg"),
		(troop_set_slot, "trp_village_upgrade_priest", slot_ms_script_captured_p1, 100),
		(troop_set_slot, "trp_village_upgrade_police_master", slot_ms_script_captured, "script_ms_event_capture_with_msg"),
		(troop_set_slot, "trp_village_upgrade_police_master", slot_ms_script_captured_p1, 25),
		
		(troop_set_slot, "trp_town_building_arsenal", slot_ms_script_after_construct, "script_ms_event_change_prosperity"),
		(troop_set_slot, "trp_town_building_arsenal", slot_ms_script_after_construct_p1, 5),
		(troop_set_slot, "trp_town_building_waterpipe", slot_ms_script_after_construct, "script_ms_event_raise_relation_with_party"),
		(troop_set_slot, "trp_town_building_waterpipe", slot_ms_script_after_construct_p1, 100),
		(troop_set_slot, "trp_town_building_waterpipe", slot_ms_script_after_construct_p2, 10),
		(troop_set_slot, "trp_town_building_school", slot_ms_script_after_construct, "script_ms_event_raise_random_skill_which_need_intelligence"),
		(troop_set_slot, "trp_town_building_merchant_guild", slot_ms_script_after_construct, "script_ms_event_once_raise_trade_skill"),
		(troop_set_slot, "trp_town_upgrade_armourer", slot_ms_script_after_construct, "script_ms_event_raise_mercenary_max_count"),
		(troop_set_slot, "trp_town_upgrade_armourer", slot_ms_script_after_construct_p1, 2),
		(troop_set_slot, "trp_town_upgrade_armourer", slot_ms_script_after_construct_p2, ms_flag_all),
		(troop_set_slot, "trp_town_upgrade_protection", slot_ms_script_after_construct, "script_ms_event_raise_mercenary_max_count"),
		(troop_set_slot, "trp_town_upgrade_protection", slot_ms_script_after_construct_p1, 1),
		(troop_set_slot, "trp_town_upgrade_protection", slot_ms_script_after_construct_p2, ms_flag_all),
		(troop_set_slot, "trp_town_upgrade_groom", slot_ms_script_after_construct, "script_ms_event_raise_mercenary_max_count"),
		(troop_set_slot, "trp_town_upgrade_groom", slot_ms_script_after_construct_p1, 2),
		(troop_set_slot, "trp_town_upgrade_groom", slot_ms_script_after_construct_p2, ms_flag_horsed),
		(troop_set_slot, "trp_town_upgrade_secret_order", slot_ms_script_after_construct, "script_ms_event_raise_relation_with_party"),
		(troop_set_slot, "trp_town_upgrade_secret_order", slot_ms_script_after_construct_p1, 100),
		(troop_set_slot, "trp_town_upgrade_secret_order", slot_ms_script_after_construct_p2, 5),
		(troop_set_slot, "trp_town_upgrade_tax_supervisor", slot_ms_script_after_construct, "script_ms_event_notification_about_gold_usage"),
		(troop_set_slot, "trp_town_upgrade_tax_supervisor", slot_ms_script_after_construct_p1, 35),
		(troop_set_slot, "trp_town_upgrade_tax_supervisor", slot_ms_script_after_construct_p2, "str_ms_gold_notification_tax"),
		(troop_set_slot, "trp_town_upgrade_tax_supervisor", slot_ms_script_after_construct_p3, ms_flag_with_element_name),
		(troop_set_slot, "trp_town_upgrade_tax_supervisor", slot_ms_script_after_construct_p4, 4),
		(troop_set_slot, "trp_town_upgrade_tax_supervisor", slot_ms_script_after_construct_p5, 8),
		(troop_set_slot, "trp_town_upgrade_tax_supervisor", slot_ms_script_after_construct_p6, 1000),
		(troop_set_slot, "trp_town_upgrade_trading_master", slot_ms_script_after_construct, "script_ms_event_change_prosperity"),
		(troop_set_slot, "trp_town_upgrade_trading_master", slot_ms_script_after_construct_p1, 6),
		(troop_set_slot, "trp_town_upgrade_priest", slot_ms_script_after_construct, "script_ms_event_raise_relation_with_party"),
		(troop_set_slot, "trp_town_upgrade_priest", slot_ms_script_after_construct_p1, 100),
		(troop_set_slot, "trp_town_upgrade_priest", slot_ms_script_after_construct_p2, 4),
		
		(troop_set_slot, "trp_town_building_treasury", slot_ms_script_24_hour, "script_ms_event_raise_taxes"),
		(troop_set_slot, "trp_town_building_treasury", slot_ms_script_24_hour_p1, 1),
		(troop_set_slot, "trp_town_upgrade_armourer", slot_ms_script_24_hour, "script_ms_event_night_attack_by_bandits"),
		(troop_set_slot, "trp_town_upgrade_armourer", slot_ms_script_24_hour_p1, 15),
		(troop_set_slot, "trp_town_upgrade_protection", slot_ms_script_24_hour, "script_ms_event_add_troops"),
		(troop_set_slot, "trp_town_upgrade_protection", slot_ms_script_24_hour_p1, 15),
		(troop_set_slot, "trp_town_upgrade_protection", slot_ms_script_24_hour_p2, 1),
		(troop_set_slot, "trp_town_upgrade_protection", slot_ms_script_24_hour_p3, 2),
		(troop_set_slot, "trp_town_upgrade_protection", slot_ms_script_24_hour_p4, 1),
		(troop_set_slot, "trp_town_upgrade_protection", slot_ms_script_24_hour_p5, 4),
		(troop_set_slot, "trp_town_upgrade_secret_order", slot_ms_script_24_hour, "script_ms_event_raise_relation_with_party"),
		(troop_set_slot, "trp_town_upgrade_secret_order", slot_ms_script_24_hour_p1, 20),
		(troop_set_slot, "trp_town_upgrade_secret_order", slot_ms_script_24_hour_p2, 2),
		
		(troop_set_slot, "trp_town_building_arsenal", slot_ms_script_7_day, "script_ms_event_add_troops"),
		(troop_set_slot, "trp_town_building_arsenal", slot_ms_script_7_day_p1, 100),
		(troop_set_slot, "trp_town_building_arsenal", slot_ms_script_7_day_p2, 1),
		(troop_set_slot, "trp_town_building_arsenal", slot_ms_script_7_day_p3, 5),
		(troop_set_slot, "trp_town_building_arsenal", slot_ms_script_7_day_p4, 3),
		(troop_set_slot, "trp_town_building_arsenal", slot_ms_script_7_day_p5, 5),
		(troop_set_slot, "trp_town_building_waterpipe", slot_ms_script_7_day, "script_ms_event_change_prosperity"),
		(troop_set_slot, "trp_town_building_waterpipe", slot_ms_script_7_day_p1, 5),
		(troop_set_slot, "trp_town_building_merchant_guild", slot_ms_script_7_day, "script_ms_event_raise_taxes"),
		(troop_set_slot, "trp_town_building_merchant_guild", slot_ms_script_7_day_p1, 10),
		(troop_set_slot, "trp_town_building_treasury", slot_ms_script_7_day, "script_ms_get_all_taxes"),
		(troop_set_slot, "trp_town_upgrade_armourer", slot_ms_script_7_day, "script_ms_event_raise_taxes"),
		(troop_set_slot, "trp_town_upgrade_armourer", slot_ms_script_7_day_p1, 5),
		(troop_set_slot, "trp_town_upgrade_protection", slot_ms_script_7_day, "script_ms_event_raise_taxes"),
		(troop_set_slot, "trp_town_upgrade_protection", slot_ms_script_7_day_p1, 5),
		(troop_set_slot, "trp_town_upgrade_groom", slot_ms_script_7_day, "script_ms_event_raise_taxes"),
		(troop_set_slot, "trp_town_upgrade_groom", slot_ms_script_7_day_p1, 5),
		(troop_set_slot, "trp_town_upgrade_adviser", slot_ms_script_7_day, "script_ms_event_raise_taxes"),
		(troop_set_slot, "trp_town_upgrade_adviser", slot_ms_script_7_day_p1, 3),
		(troop_set_slot, "trp_town_upgrade_secret_order", slot_ms_script_7_day, "script_ms_event_raise_taxes"),
		(troop_set_slot, "trp_town_upgrade_secret_order", slot_ms_script_7_day_p1, 3),
		(troop_set_slot, "trp_town_upgrade_tax_supervisor", slot_ms_script_7_day, "script_ms_event_raise_taxes"),
		(troop_set_slot, "trp_town_upgrade_tax_supervisor", slot_ms_script_7_day_p1, 13),
		(troop_set_slot, "trp_town_upgrade_trading_master", slot_ms_script_7_day, "script_ms_event_raise_taxes"),
		(troop_set_slot, "trp_town_upgrade_trading_master", slot_ms_script_7_day_p1, 6),
		(troop_set_slot, "trp_town_upgrade_priest", slot_ms_script_7_day, "script_ms_event_raise_taxes"),
		(troop_set_slot, "trp_town_upgrade_priest", slot_ms_script_7_day_p1, 4),
		(troop_set_slot, "trp_town_upgrade_garrison_commander", slot_ms_script_7_day, "script_ms_event_add_troops"),
		(troop_set_slot, "trp_town_upgrade_garrison_commander", slot_ms_script_7_day_p1, 100),
		(troop_set_slot, "trp_town_upgrade_garrison_commander", slot_ms_script_7_day_p2, 3),
		(troop_set_slot, "trp_town_upgrade_garrison_commander", slot_ms_script_7_day_p3, 5),
		(troop_set_slot, "trp_town_upgrade_garrison_commander", slot_ms_script_7_day_p4, 4),
		(troop_set_slot, "trp_town_upgrade_garrison_commander", slot_ms_script_7_day_p5, 6),
		(troop_set_slot, "trp_village_building_mill", slot_ms_script_7_day, "script_ms_event_raise_taxes"),
		(troop_set_slot, "trp_village_building_mill", slot_ms_script_7_day_p1, 5),
		(troop_set_slot, "trp_village_building_barn", slot_ms_script_7_day, "script_ms_event_raise_taxes"),
		(troop_set_slot, "trp_village_building_barn", slot_ms_script_7_day_p1, 3),
		(troop_set_slot, "trp_village_building_school", slot_ms_script_7_day, "script_ms_event_raise_taxes"),
		(troop_set_slot, "trp_village_building_school", slot_ms_script_7_day_p1, 3),
		(troop_set_slot, "trp_village_building_administration", slot_ms_script_7_day, "script_ms_event_raise_taxes"),
		(troop_set_slot, "trp_village_building_administration", slot_ms_script_7_day_p1, 4),
		(troop_set_slot, "trp_village_upgrade_judge", slot_ms_script_7_day, "script_ms_event_raise_taxes"),
		(troop_set_slot, "trp_village_upgrade_judge", slot_ms_script_7_day_p1, 5),
		(troop_set_slot, "trp_village_upgrade_treasurer", slot_ms_script_7_day, "script_ms_event_raise_taxes"),
		(troop_set_slot, "trp_village_upgrade_treasurer", slot_ms_script_7_day_p1, 6),
		(troop_set_slot, "trp_village_upgrade_priest", slot_ms_script_7_day, "script_ms_event_raise_taxes"),
		(troop_set_slot, "trp_village_upgrade_priest", slot_ms_script_7_day_p1, 3),
		(troop_set_slot, "trp_village_upgrade_police_master", slot_ms_script_7_day, "script_ms_event_raise_taxes"),
		(troop_set_slot, "trp_village_upgrade_police_master", slot_ms_script_7_day_p1, 2),
		
		(troop_set_slot, "trp_town_building_arsenal", slot_ms_script_30_day, "script_ms_event_notification_about_gold_usage"),
		(troop_set_slot, "trp_town_building_arsenal", slot_ms_script_30_day_p1, 100),
		(troop_set_slot, "trp_town_building_arsenal", slot_ms_script_30_day_p2, "str_ms_gold_notification_barrack"),
		(troop_set_slot, "trp_town_building_arsenal", slot_ms_script_30_day_p3, ms_flag_simple),
		(troop_set_slot, "trp_town_building_arsenal", slot_ms_script_30_day_p4, -250),
		(troop_set_slot, "trp_town_building_waterpipe", slot_ms_script_30_day, "script_ms_event_notification_about_gold_usage"),
		(troop_set_slot, "trp_town_building_waterpipe", slot_ms_script_30_day_p1, 15),
		(troop_set_slot, "trp_town_building_waterpipe", slot_ms_script_30_day_p2, "str_ms_gold_notification_barrack"),
		(troop_set_slot, "trp_town_building_waterpipe", slot_ms_script_30_day_p3, ms_flag_simple),
		(troop_set_slot, "trp_town_building_waterpipe", slot_ms_script_30_day_p4, -400),
		(troop_set_slot, "trp_town_building_school", slot_ms_script_30_day, "script_ms_event_change_prosperity"),
		(troop_set_slot, "trp_town_building_school", slot_ms_script_30_day_p1, 7),
		(troop_set_slot, "trp_town_building_merchant_guild", slot_ms_script_30_day, "script_ms_event_change_prosperity"),
		(troop_set_slot, "trp_town_building_merchant_guild", slot_ms_script_30_day_p1, -7),
		(troop_set_slot, "trp_town_building_treasury", slot_ms_script_30_day, "script_ms_event_change_prosperity"),
		(troop_set_slot, "trp_town_building_treasury", slot_ms_script_30_day_p1, 10),
		(troop_set_slot, "trp_town_upgrade_armourer", slot_ms_script_30_day, "script_ms_event_change_prosperity"),
		(troop_set_slot, "trp_town_upgrade_armourer", slot_ms_script_30_day_p1, 7),
		(troop_set_slot, "trp_town_upgrade_protection", slot_ms_script_30_day, "script_ms_event_change_prosperity"),
		(troop_set_slot, "trp_town_upgrade_protection", slot_ms_script_30_day_p1, 5),
		(troop_set_slot, "trp_town_upgrade_groom", slot_ms_script_30_day, "script_ms_event_change_prosperity"),
		(troop_set_slot, "trp_town_upgrade_groom", slot_ms_script_30_day_p1, 3),
		(troop_set_slot, "trp_town_upgrade_secret_order", slot_ms_script_30_day, "script_ms_event_notification_about_gold_usage"),
		(troop_set_slot, "trp_town_upgrade_secret_order", slot_ms_script_30_day_p1, 35),
		(troop_set_slot, "trp_town_upgrade_secret_order", slot_ms_script_30_day_p2, "str_ms_gold_notification_secret_order"),
		(troop_set_slot, "trp_town_upgrade_secret_order", slot_ms_script_30_day_p3, ms_flag_random),
		(troop_set_slot, "trp_town_upgrade_secret_order", slot_ms_script_30_day_p4, 3),
		(troop_set_slot, "trp_town_upgrade_secret_order", slot_ms_script_30_day_p5, 5),
		(troop_set_slot, "trp_town_upgrade_secret_order", slot_ms_script_30_day_p6, 1300),
		(troop_set_slot, "trp_town_upgrade_tax_supervisor", slot_ms_script_30_day, "script_ms_event_change_prosperity"),
		(troop_set_slot, "trp_town_upgrade_tax_supervisor", slot_ms_script_30_day_p1, -6),
		(troop_set_slot, "trp_town_upgrade_trading_master", slot_ms_script_30_day, "script_ms_event_change_prosperity"),
		(troop_set_slot, "trp_town_upgrade_trading_master", slot_ms_script_30_day_p1, 4),
		(troop_set_slot, "trp_town_upgrade_priest", slot_ms_script_30_day, "script_ms_event_notification_about_gold_usage"),
		(troop_set_slot, "trp_town_upgrade_priest", slot_ms_script_30_day_p1, 30),
		(troop_set_slot, "trp_town_upgrade_priest", slot_ms_script_30_day_p2, "str_ms_gold_notification_priest"),
		(troop_set_slot, "trp_town_upgrade_priest", slot_ms_script_30_day_p3, ms_flag_random),
		(troop_set_slot, "trp_town_upgrade_priest", slot_ms_script_30_day_p4, 20),
		(troop_set_slot, "trp_town_upgrade_priest", slot_ms_script_30_day_p5, 41),
		(troop_set_slot, "trp_town_upgrade_priest", slot_ms_script_30_day_p6, 100),
		(troop_set_slot, "trp_village_building_mill", slot_ms_script_30_day, "script_ms_event_change_prosperity"),
		(troop_set_slot, "trp_village_building_mill", slot_ms_script_30_day_p1, 6),
		(troop_set_slot, "trp_village_building_barn", slot_ms_script_30_day, "script_ms_event_change_prosperity"),
		(troop_set_slot, "trp_village_building_barn", slot_ms_script_30_day_p1, 7),
		(troop_set_slot, "trp_village_building_school", slot_ms_script_30_day, "script_ms_event_change_prosperity"),
		(troop_set_slot, "trp_village_building_school", slot_ms_script_30_day_p1, 4),
		(troop_set_slot, "trp_village_building_administration", slot_ms_script_30_day, "script_ms_event_change_prosperity"),
		(troop_set_slot, "trp_village_building_administration", slot_ms_script_30_day_p1, 4),
		(troop_set_slot, "trp_village_upgrade_judge", slot_ms_script_30_day, "script_ms_event_notification_about_gold_usage"),
		(troop_set_slot, "trp_village_upgrade_judge", slot_ms_script_30_day_p1, 25),
		(troop_set_slot, "trp_village_upgrade_judge", slot_ms_script_30_day_p2, "str_ms_gold_notification_judge"),
		(troop_set_slot, "trp_village_upgrade_judge", slot_ms_script_30_day_p3, ms_flag_random),
		(troop_set_slot, "trp_village_upgrade_judge", slot_ms_script_30_day_p4, 20),
		(troop_set_slot, "trp_village_upgrade_judge", slot_ms_script_30_day_p5, 41),
		(troop_set_slot, "trp_village_upgrade_judge", slot_ms_script_30_day_p6, 100),
		(troop_set_slot, "trp_village_upgrade_treasurer", slot_ms_script_30_day, "script_ms_event_notification_about_gold_usage"),
		(troop_set_slot, "trp_village_upgrade_treasurer", slot_ms_script_30_day_p1, 35),
		(troop_set_slot, "trp_village_upgrade_treasurer", slot_ms_script_30_day_p2, "str_ms_gold_notification_treasurer"),
		(troop_set_slot, "trp_village_upgrade_treasurer", slot_ms_script_30_day_p3,  ms_flag_random),
		(troop_set_slot, "trp_village_upgrade_treasurer", slot_ms_script_30_day_p4,20),
		(troop_set_slot, "trp_village_upgrade_treasurer", slot_ms_script_30_day_p5, 36),
		(troop_set_slot, "trp_village_upgrade_treasurer", slot_ms_script_30_day_p6, 100),
		(troop_set_slot, "trp_village_upgrade_priest", slot_ms_script_30_day, "script_ms_event_change_prosperity"),
		(troop_set_slot, "trp_village_upgrade_priest", slot_ms_script_30_day_p1, 4),
		(troop_set_slot, "trp_village_upgrade_police_master", slot_ms_script_30_day, "script_ms_event_raise_relation_with_party"),
		(troop_set_slot, "trp_village_upgrade_police_master", slot_ms_script_30_day_p1, 100),
		(troop_set_slot, "trp_village_upgrade_police_master", slot_ms_script_30_day_p2, 5),
		(troop_set_slot, "trp_town_building_barrack", slot_ms_script_30_day, "script_ms_event_notification_about_gold_usage"),
		(troop_set_slot, "trp_town_building_barrack", slot_ms_script_30_day_p1, 100),
		(troop_set_slot, "trp_town_building_barrack", slot_ms_script_30_day_p2, "str_ms_gold_notification_barrack"),
		(troop_set_slot, "trp_town_building_barrack", slot_ms_script_30_day_p3, ms_flag_simple),
		(troop_set_slot, "trp_town_building_barrack", slot_ms_script_30_day_p4, -900),		
		(troop_set_slot, "trp_town_building_stable", slot_ms_script_30_day, "script_ms_event_notification_about_gold_usage"),
		(troop_set_slot, "trp_town_building_stable", slot_ms_script_30_day_p1, 100),
		(troop_set_slot, "trp_town_building_stable", slot_ms_script_30_day_p2, "str_ms_gold_notification_stable"),
		(troop_set_slot, "trp_town_building_stable", slot_ms_script_30_day_p3, ms_flag_simple),
		(troop_set_slot, "trp_town_building_stable", slot_ms_script_30_day_p4, -1500),		
		(troop_set_slot, "trp_town_upgrade_garrison_commander", slot_ms_script_7_day, "script_ms_event_notification_about_gold_usage"),
		(troop_set_slot, "trp_town_upgrade_garrison_commander", slot_ms_script_7_day_p1, 100),
		(troop_set_slot, "trp_town_upgrade_garrison_commander", slot_ms_script_7_day_p2, "str_ms_gold_notification_officer_lower_level"),
		(troop_set_slot, "trp_town_upgrade_garrison_commander", slot_ms_script_7_day_p3, ms_flag_simple),
		(troop_set_slot, "trp_town_upgrade_garrison_commander", slot_ms_script_7_day_p4, -250),		
		(troop_set_slot, "trp_town_upgrade_officer_infantry", slot_ms_script_7_day, "script_ms_event_notification_about_gold_usage"),
		(troop_set_slot, "trp_town_upgrade_officer_infantry", slot_ms_script_7_day_p1, 100),
		(troop_set_slot, "trp_town_upgrade_officer_infantry", slot_ms_script_7_day_p2, "str_ms_gold_notification_barrack"),
		(troop_set_slot, "trp_town_upgrade_officer_infantry", slot_ms_script_7_day_p3, ms_flag_simple),
		(troop_set_slot, "trp_town_upgrade_officer_infantry", slot_ms_script_7_day_p4, -300),		
		(troop_set_slot, "trp_town_upgrade_officer_cavalry", slot_ms_script_7_day, "script_ms_event_notification_about_gold_usage"),
		(troop_set_slot, "trp_town_upgrade_officer_cavalry", slot_ms_script_7_day_p1, 100),
		(troop_set_slot, "trp_town_upgrade_officer_cavalry", slot_ms_script_7_day_p2, "str_ms_gold_notification_barrack"),
		(troop_set_slot, "trp_town_upgrade_officer_cavalry", slot_ms_script_7_day_p3, ms_flag_simple),
		(troop_set_slot, "trp_town_upgrade_officer_cavalry", slot_ms_script_7_day_p4, -400),		
		(troop_set_slot, "trp_town_upgrade_officer_infantry_guard", slot_ms_script_7_day, "script_ms_event_notification_about_gold_usage"),
		(troop_set_slot, "trp_town_upgrade_officer_infantry_guard", slot_ms_script_7_day_p1, 100),
		(troop_set_slot, "trp_town_upgrade_officer_infantry_guard", slot_ms_script_7_day_p2, "str_ms_gold_notification_barrack"),
		(troop_set_slot, "trp_town_upgrade_officer_infantry_guard", slot_ms_script_7_day_p3, ms_flag_simple),
		(troop_set_slot, "trp_town_upgrade_officer_infantry_guard", slot_ms_script_7_day_p4, -500),		
		(troop_set_slot, "trp_town_upgrade_officer_cavalry_guard", slot_ms_script_7_day, "script_ms_event_notification_about_gold_usage"),
		(troop_set_slot, "trp_town_upgrade_officer_cavalry_guard", slot_ms_script_7_day_p1, 100),
		(troop_set_slot, "trp_town_upgrade_officer_cavalry_guard", slot_ms_script_7_day_p2, "str_ms_gold_notification_barrack"),
		(troop_set_slot, "trp_town_upgrade_officer_cavalry_guard", slot_ms_script_7_day_p3, ms_flag_simple),
		(troop_set_slot, "trp_town_upgrade_officer_cavalry_guard", slot_ms_script_7_day_p4, -600),		
		(troop_set_slot, "trp_town_upgrade_officer_elite_guard", slot_ms_script_7_day, "script_ms_event_notification_about_gold_usage"),
		(troop_set_slot, "trp_town_upgrade_officer_elite_guard", slot_ms_script_7_day_p1, 100),
		(troop_set_slot, "trp_town_upgrade_officer_elite_guard", slot_ms_script_7_day_p2, "str_ms_gold_notification_barrack"),
		(troop_set_slot, "trp_town_upgrade_officer_elite_guard", slot_ms_script_7_day_p3, ms_flag_simple),
		(troop_set_slot, "trp_town_upgrade_officer_elite_guard", slot_ms_script_7_day_p4, -650),		
		(troop_set_slot, "trp_town_upgrade_officer_mercenary", slot_ms_script_7_day, "script_ms_event_notification_about_gold_usage"),
		(troop_set_slot, "trp_town_upgrade_officer_mercenary", slot_ms_script_7_day_p1, 100),
		(troop_set_slot, "trp_town_upgrade_officer_mercenary", slot_ms_script_7_day_p2, "str_ms_gold_notification_barrack"),
		(troop_set_slot, "trp_town_upgrade_officer_mercenary", slot_ms_script_7_day_p3, ms_flag_simple),
		(troop_set_slot, "trp_town_upgrade_officer_mercenary", slot_ms_script_7_day_p4, -750),

		(troop_set_slot, "trp_town_upgrade_garrison_commander", slot_ms_officer_lower_level_count, 6),
		(troop_set_slot, "trp_town_upgrade_officer_infantry", slot_ms_officer_kostyak_count, 4),
		(troop_set_slot, "trp_town_upgrade_officer_infantry", slot_ms_officer_militiaman_count, 5),
		(troop_set_slot, "trp_town_upgrade_officer_infantry", slot_ms_officer_region_count, 3),
		(troop_set_slot, "trp_town_upgrade_officer_cavalry", slot_ms_officer_elementar_cavalry_count, 4),
		(troop_set_slot, "trp_town_upgrade_officer_infantry_guard", slot_ms_officer_elite_infantry_count, 4),
		(troop_set_slot, "trp_town_upgrade_officer_cavalry_guard", slot_ms_officer_elite_cavalry_count, 3),
		(troop_set_slot, "trp_town_upgrade_officer_elite_guard", slot_ms_officer_uniq_count, 3),
		(troop_set_slot, "trp_town_upgrade_officer_mercenary", slot_ms_officer_mercenary_count, 4),
		(troop_set_slot, "trp_town_upgrade_protection", slot_ms_officer_lower_level_count, 2),
		(troop_set_slot, "trp_town_upgrade_protection", slot_ms_officer_militiaman_count, 2),
		(troop_set_slot, "trp_town_upgrade_protection", slot_ms_officer_elementar_cavalry_count, 2),
		(troop_set_slot, "trp_town_upgrade_armourer", slot_ms_officer_elementar_cavalry_count, 1),
		(troop_set_slot, "trp_town_upgrade_armourer", slot_ms_officer_militiaman_count, 1),
		(troop_set_slot, "trp_town_upgrade_groom", slot_ms_officer_elementar_cavalry_count, 1),
				
		(troop_set_slot, "trp_town_upgrade_garrison_commander", slot_ms_officer_lower_level_time, 4*24),
		(troop_set_slot, "trp_town_upgrade_officer_infantry", slot_ms_officer_kostyak_time, 4*24),
		(troop_set_slot, "trp_town_upgrade_officer_infantry", slot_ms_officer_militiaman_time, 4*24),
		(troop_set_slot, "trp_town_upgrade_officer_infantry", slot_ms_officer_region_time, 4*24),
		(troop_set_slot, "trp_town_upgrade_officer_cavalry", slot_ms_officer_elementar_cavalry_time, 4*24),
		(troop_set_slot, "trp_town_upgrade_officer_infantry_guard", slot_ms_officer_elite_infantry_time, 4*24),
		(troop_set_slot, "trp_town_upgrade_officer_cavalry_guard", slot_ms_officer_elite_cavalry_time, 4*24),
		(troop_set_slot, "trp_town_upgrade_officer_elite_guard", slot_ms_officer_uniq_time, 4*24),
		(troop_set_slot, "trp_town_upgrade_officer_mercenary", slot_ms_officer_mercenary_time, 4*24),
		
		(troop_set_slot, "trp_ms_ai_officer_fac1", slot_ms_inf_limit, -1),
		(troop_set_slot, "trp_ms_ai_officer_fac1", slot_ms_kav_limit, 3),
		(troop_set_slot, "trp_ms_ai_officer_fac1", slot_ms_elit_limit, 1),
		(troop_set_slot, "trp_ms_ai_officer_fac1", slot_ms_merc_limit, 1),
		(troop_set_slot, "trp_ms_ai_officer_fac1", slot_ms_inf_chance_factor, 1),
		(troop_set_slot, "trp_ms_ai_officer_fac1", slot_ms_cav_chance_factor, 1),
		(troop_set_slot, "trp_ms_ai_officer_fac1", slot_ms_elit_chance_factor, 3),
		(troop_set_slot, "trp_ms_ai_officer_fac1", slot_ms_merc_chance_factor, 2),
		(troop_set_slot, "trp_ms_ai_officer_fac1", slot_ms_officer_troops_start, ms_flag_troop_infantry),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 9, 0),	
		(troop_set_slot, "trp_ms_ai_officer_fac1", 10, "trp_swadian_footman"),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 11, 20),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 12, "trp_swadian_crossbowman"),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 13, 10),		
		(troop_set_slot, "trp_ms_ai_officer_fac1", 14, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 15, 0),	

		(troop_set_slot, "trp_ms_ai_officer_fac1", 16, ms_flag_troop_infantry),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 17, 0),	
		(troop_set_slot, "trp_ms_ai_officer_fac1", 18, "trp_swadian_crossbowman"),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 19, 20),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 20, "trp_swadian_footman"),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 21, 10),		
		(troop_set_slot, "trp_ms_ai_officer_fac1", 22, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 23, 0),		
		
		(troop_set_slot, "trp_ms_ai_officer_fac1", 24, ms_flag_troop_infantry),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 25, 0),	
		(troop_set_slot, "trp_ms_ai_officer_fac1", 26, "trp_swadian_militia"),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 27, 25),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 28, "trp_swadian_skirmisher"),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 29, 20),		
		(troop_set_slot, "trp_ms_ai_officer_fac1", 30, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 31, 0),		
		
		(troop_set_slot, "trp_ms_ai_officer_fac1", 32, ms_flag_troop_cavalry),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 33, 0),	
		(troop_set_slot, "trp_ms_ai_officer_fac1", 34, "trp_swadian_man_at_arms"),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 35, 30),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 36, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 37, 0),		
		(troop_set_slot, "trp_ms_ai_officer_fac1", 38, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 39, 0),		
		
		(troop_set_slot, "trp_ms_ai_officer_fac1", 40, ms_flag_troop_cavalry),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 41, 0),	
		(troop_set_slot, "trp_ms_ai_officer_fac1", 42, "trp_polish_dragoon"),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 43, 25),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 44, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 45, 0),		
		(troop_set_slot, "trp_ms_ai_officer_fac1", 46, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 47, 0),		
		
		(troop_set_slot, "trp_ms_ai_officer_fac1", 48, ms_flag_troop_cavalry),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 49, 0),	
		(troop_set_slot, "trp_ms_ai_officer_fac1", 50, "trp_swadian_sergeant"),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 51, 21),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 52, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 53, 0),		
		(troop_set_slot, "trp_ms_ai_officer_fac1", 54, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 55, 0),		
		
		(troop_set_slot, "trp_ms_ai_officer_fac1", 56, ms_flag_troop_cavalry),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 57, 0),	
		(troop_set_slot, "trp_ms_ai_officer_fac1", 58, "trp_polish_reytar"),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 59, 18),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 60, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 61, 0),		
		(troop_set_slot, "trp_ms_ai_officer_fac1", 62, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 63, 0),		
		
		(troop_set_slot, "trp_ms_ai_officer_fac1", 64, ms_flag_troop_elite_infantry),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 65, 0),	
		(troop_set_slot, "trp_ms_ai_officer_fac1", 66, "trp_swadian_infantry"),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 67, 15),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 68, "trp_swadian_sharpshooter"),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 69, 15),		
		(troop_set_slot, "trp_ms_ai_officer_fac1", 70, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 71, 0),		
		
		(troop_set_slot, "trp_ms_ai_officer_fac1", 72, ms_flag_troop_elite_cavalry),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 73, 0),	
		(troop_set_slot, "trp_ms_ai_officer_fac1", 74, "trp_swadian_knight"),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 75, 18),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 76, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 77, 0),		
		(troop_set_slot, "trp_ms_ai_officer_fac1", 78, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 79, 0),		
		
		(troop_set_slot, "trp_ms_ai_officer_fac1", 80, ms_flag_troop_mercenary_infantry),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 81, 0),	
		(troop_set_slot, "trp_ms_ai_officer_fac1", 82, "trp_scott_musket"),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 83, 15),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 84, "trp_scott_pika"),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 85, 10),		
		(troop_set_slot, "trp_ms_ai_officer_fac1", 86, "trp_scott_sword"),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 87, 5),		
		
		(troop_set_slot, "trp_ms_ai_officer_fac1", 88, ms_flag_troop_mercenary_infantry),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 89, 0),	
		(troop_set_slot, "trp_ms_ai_officer_fac1", 90, "trp_gorod_kozak"),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 91, 30),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 92, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 93, 0),		
		(troop_set_slot, "trp_ms_ai_officer_fac1", 94, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 95, 0),		
		
		(troop_set_slot, "trp_ms_ai_officer_fac1", 96, ms_flag_troop_mercenary_infantry),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 97, 0),	
		(troop_set_slot, "trp_ms_ai_officer_fac1", 98, "trp_litva_musket"),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 99, 25),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 100, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 101, 0),		
		(troop_set_slot, "trp_ms_ai_officer_fac1", 102, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 103, 0),		
		
		(troop_set_slot, "trp_ms_ai_officer_fac1", 104, ms_flag_troop_mercenary_cavalry),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 105, 0),	
		(troop_set_slot, "trp_ms_ai_officer_fac1", 106, "trp_reestrovuy_kozak"),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 107, 20),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 108, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 109, 0),		
		(troop_set_slot, "trp_ms_ai_officer_fac1", 110, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 111, 0),		
		
		(troop_set_slot, "trp_ms_ai_officer_fac1", 112, ms_flag_troop_mercenary_cavalry),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 113, 0),	
		(troop_set_slot, "trp_ms_ai_officer_fac1", 114, "trp_lisovchiki"),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 115, 20),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 116, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 117, 0),		
		(troop_set_slot, "trp_ms_ai_officer_fac1", 118, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 119, 0),		
		
		(troop_set_slot, "trp_ms_ai_officer_fac1", 120, ms_flag_troop_mercenary_cavalry),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 121, 0),	
		(troop_set_slot, "trp_ms_ai_officer_fac1", 122, "trp_litva_lipki"),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 123, 18),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 124, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 125, 0),		
		(troop_set_slot, "trp_ms_ai_officer_fac1", 126, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 127, 0),		
		
		(troop_set_slot, "trp_ms_ai_officer_fac1", 128, ms_flag_troop_uniq),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 129, "trp_knight_1_2"),	
		(troop_set_slot, "trp_ms_ai_officer_fac1", 130, "trp_litva_lipki"),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 131, 35),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 132, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 133, 0),		
		(troop_set_slot, "trp_ms_ai_officer_fac1", 134, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 135, 0),		
		
		(troop_set_slot, "trp_ms_ai_officer_fac1", 136, ms_flag_troop_uniq),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 137, "trp_kingdom_1_lord"),	
		(troop_set_slot, "trp_ms_ai_officer_fac1", 138, "trp_swadian_knight"),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 139, 33),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 140, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 141, 0),		
		(troop_set_slot, "trp_ms_ai_officer_fac1", 142, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 143, 0),		
		
		(troop_set_slot, "trp_ms_ai_officer_fac1", 144, ms_flag_troop_uniq),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 145, "trp_knight_1_1"),	
		(troop_set_slot, "trp_ms_ai_officer_fac1", 146, "trp_litva_lipki"),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 147, 10),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 148, "trp_lisovchiki"),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 149, 10),		
		(troop_set_slot, "trp_ms_ai_officer_fac1", 150, "trp_swadian_man_at_arms"),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 151, 20),		
		
		(troop_set_slot, "trp_ms_ai_officer_fac1", 152, ms_flag_troop_uniq),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 153, "trp_knight_1_3"),	
		(troop_set_slot, "trp_ms_ai_officer_fac1", 154, "trp_swadian_sergeant"),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 155, 30),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 156, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 157, 0),		
		(troop_set_slot, "trp_ms_ai_officer_fac1", 158, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac1", 159, 0),		
		
		
		(troop_set_slot, "trp_ms_ai_officer_fac2", slot_ms_inf_limit, -1),
		(troop_set_slot, "trp_ms_ai_officer_fac2", slot_ms_kav_limit, 2),
		(troop_set_slot, "trp_ms_ai_officer_fac2", slot_ms_elit_limit, 1),
		(troop_set_slot, "trp_ms_ai_officer_fac2", slot_ms_merc_limit, 1),
		(troop_set_slot, "trp_ms_ai_officer_fac2", slot_ms_inf_chance_factor, 1),
		(troop_set_slot, "trp_ms_ai_officer_fac2", slot_ms_cav_chance_factor, 1),
		(troop_set_slot, "trp_ms_ai_officer_fac2", slot_ms_elit_chance_factor, 3),
		(troop_set_slot, "trp_ms_ai_officer_fac2", slot_ms_merc_chance_factor, 2),
		(troop_set_slot, "trp_ms_ai_officer_fac2", slot_ms_officer_troops_start, ms_flag_troop_infantry),
		(troop_set_slot, "trp_ms_ai_officer_fac2", 9, 0),	
		(troop_set_slot, "trp_ms_ai_officer_fac2", 10, "trp_vaegir_archer"),
		(troop_set_slot, "trp_ms_ai_officer_fac2", 11, 25), #changed
		(troop_set_slot, "trp_ms_ai_officer_fac2", 12, "trp_vaegir_veteran"),
		(troop_set_slot, "trp_ms_ai_officer_fac2", 13, 15),		
		(troop_set_slot, "trp_ms_ai_officer_fac2", 14, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac2", 15, 0),	

		(troop_set_slot, "trp_ms_ai_officer_fac2", 16, ms_flag_troop_infantry),
		(troop_set_slot, "trp_ms_ai_officer_fac2", 17, 0),	
		(troop_set_slot, "trp_ms_ai_officer_fac2", 18, "trp_vaegir_skirmisher"),
		(troop_set_slot, "trp_ms_ai_officer_fac2", 19, 20),
		(troop_set_slot, "trp_ms_ai_officer_fac2", 20, "trp_vaegir_footman"),
		(troop_set_slot, "trp_ms_ai_officer_fac2", 21, 10),		
		(troop_set_slot, "trp_ms_ai_officer_fac2", 22, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac2", 23, 0),		
		
		(troop_set_slot, "trp_ms_ai_officer_fac2", 24, ms_flag_troop_cavalry),
		(troop_set_slot, "trp_ms_ai_officer_fac2", 25, 0),	
		(troop_set_slot, "trp_ms_ai_officer_fac2", 26, "trp_moskow_dragoon"),
		(troop_set_slot, "trp_ms_ai_officer_fac2", 27, 7),
		(troop_set_slot, "trp_ms_ai_officer_fac2", 28, "trp_vaegir_horseman"),
		(troop_set_slot, "trp_ms_ai_officer_fac2", 29, 17),		
		(troop_set_slot, "trp_ms_ai_officer_fac2", 30, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac2", 31, 0),		
		
		(troop_set_slot, "trp_ms_ai_officer_fac2", 32, ms_flag_troop_cavalry),
		(troop_set_slot, "trp_ms_ai_officer_fac2", 33, 0),	
		(troop_set_slot, "trp_ms_ai_officer_fac2", 34, "trp_vaegir_knight"),
		(troop_set_slot, "trp_ms_ai_officer_fac2", 35, 20),
		(troop_set_slot, "trp_ms_ai_officer_fac2", 36, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac2", 37, 0),		
		(troop_set_slot, "trp_ms_ai_officer_fac2", 38, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac2", 39, 0),		
		
		(troop_set_slot, "trp_ms_ai_officer_fac2", 40, ms_flag_troop_elite_infantry),
		(troop_set_slot, "trp_ms_ai_officer_fac2", 41, 0),	
		(troop_set_slot, "trp_ms_ai_officer_fac2", 42, "trp_vaegir_marksman"),
		(troop_set_slot, "trp_ms_ai_officer_fac2", 43, 20),
		(troop_set_slot, "trp_ms_ai_officer_fac2", 44, "trp_vaegir_infantry"),
		(troop_set_slot, "trp_ms_ai_officer_fac2", 45, 10),		
		(troop_set_slot, "trp_ms_ai_officer_fac2", 46, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac2", 47, 0),		
		
		(troop_set_slot, "trp_ms_ai_officer_fac2", 48, ms_flag_troop_elite_cavalry),
		(troop_set_slot, "trp_ms_ai_officer_fac2", 49, 0),	
		(troop_set_slot, "trp_ms_ai_officer_fac2", 50, "trp_vaegir_guard"),
		(troop_set_slot, "trp_ms_ai_officer_fac2", 51, 17),
		(troop_set_slot, "trp_ms_ai_officer_fac2", 52, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac2", 53, 0),		
		(troop_set_slot, "trp_ms_ai_officer_fac2", 54, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac2", 55, 0),		
		
		(troop_set_slot, "trp_ms_ai_officer_fac2", 56, ms_flag_troop_mercenary_cavalry),
		(troop_set_slot, "trp_ms_ai_officer_fac2", 57, 0),	
		(troop_set_slot, "trp_ms_ai_officer_fac2", 58, "trp_don_cossack"),
		(troop_set_slot, "trp_ms_ai_officer_fac2", 59, 25),
		(troop_set_slot, "trp_ms_ai_officer_fac2", 60, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac2", 61, 0),		
		(troop_set_slot, "trp_ms_ai_officer_fac2", 62, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac2", 63, 0),		
		
		(troop_set_slot, "trp_ms_ai_officer_fac2", 64, ms_flag_troop_mercenary_cavalry),
		(troop_set_slot, "trp_ms_ai_officer_fac2", 65, 0),	
		(troop_set_slot, "trp_ms_ai_officer_fac2", 66, "trp_mosk_kalmyk"),
		(troop_set_slot, "trp_ms_ai_officer_fac2", 67, 16),
		(troop_set_slot, "trp_ms_ai_officer_fac2", 68, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac2", 69, 0),		
		(troop_set_slot, "trp_ms_ai_officer_fac2", 70, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac2", 71, 0),		
		
		(troop_set_slot, "trp_ms_ai_officer_fac2", 72, ms_flag_troop_uniq),
		(troop_set_slot, "trp_ms_ai_officer_fac2", 73, "trp_knight_2_7"),	
		(troop_set_slot, "trp_ms_ai_officer_fac2", 74, "trp_don_cossack"),
		(troop_set_slot, "trp_ms_ai_officer_fac2", 75, 40),
		(troop_set_slot, "trp_ms_ai_officer_fac2", 76, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac2", 77, 0),		
		(troop_set_slot, "trp_ms_ai_officer_fac2", 78, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac2", 79, 0),		
		
		(troop_set_slot, "trp_ms_ai_officer_fac2", 80, ms_flag_troop_uniq),
		(troop_set_slot, "trp_ms_ai_officer_fac2", 81, "trp_kingdom_2_lord"),	
		(troop_set_slot, "trp_ms_ai_officer_fac2", 82, "trp_vaegir_guard"),
		(troop_set_slot, "trp_ms_ai_officer_fac2", 83, 15),
		(troop_set_slot, "trp_ms_ai_officer_fac2", 84, "trp_moskow_dragoon"),
		(troop_set_slot, "trp_ms_ai_officer_fac2", 85, 15),		
		(troop_set_slot, "trp_ms_ai_officer_fac2", 86, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac2", 87, 0),		
		
		
		(troop_set_slot, "trp_ms_ai_officer_fac3", slot_ms_inf_limit, 2),
		(troop_set_slot, "trp_ms_ai_officer_fac3", slot_ms_kav_limit, -1),
		(troop_set_slot, "trp_ms_ai_officer_fac3", slot_ms_elit_limit, 1),
		(troop_set_slot, "trp_ms_ai_officer_fac3", slot_ms_merc_limit, 1),
		(troop_set_slot, "trp_ms_ai_officer_fac3", slot_ms_inf_chance_factor, 1),
		(troop_set_slot, "trp_ms_ai_officer_fac3", slot_ms_cav_chance_factor, 1),
		(troop_set_slot, "trp_ms_ai_officer_fac3", slot_ms_elit_chance_factor, 3),
		(troop_set_slot, "trp_ms_ai_officer_fac3", slot_ms_merc_chance_factor, 2),
		(troop_set_slot, "trp_ms_ai_officer_fac3", slot_ms_officer_troops_start, ms_flag_troop_infantry),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 9, 0),	
		(troop_set_slot, "trp_ms_ai_officer_fac3", 10, "trp_khergit_skirmisher"),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 11, 35),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 12, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 13, 0),		
		(troop_set_slot, "trp_ms_ai_officer_fac3", 14, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 15, 0),	

		(troop_set_slot, "trp_ms_ai_officer_fac3", 16, ms_flag_troop_infantry),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 17, 0),	
		(troop_set_slot, "trp_ms_ai_officer_fac3", 18, "trp_saymen"),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 19, 25),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 20, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 21, 0),		
		(troop_set_slot, "trp_ms_ai_officer_fac3", 22, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 23, 0),		
		
		(troop_set_slot, "trp_ms_ai_officer_fac3", 24, ms_flag_troop_cavalry),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 25, 0),	
		(troop_set_slot, "trp_ms_ai_officer_fac3", 26, "trp_khergit_horseman"),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 27, 40),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 28, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 29, 0),		
		(troop_set_slot, "trp_ms_ai_officer_fac3", 30, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 31, 0),		
		
		(troop_set_slot, "trp_ms_ai_officer_fac3", 32, ms_flag_troop_cavalry),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 33, 0),	
		(troop_set_slot, "trp_ms_ai_officer_fac3", 34, "trp_khergit_lancer"),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 35, 25),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 36, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 37, 0),		
		(troop_set_slot, "trp_ms_ai_officer_fac3", 38, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 39, 0),		
		
		(troop_set_slot, "trp_ms_ai_officer_fac3", 40, ms_flag_troop_cavalry),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 41, 0),	
		(troop_set_slot, "trp_ms_ai_officer_fac3", 42, "trp_khergit_horse_archer"),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 43, 25),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 44, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 45, 0),		
		(troop_set_slot, "trp_ms_ai_officer_fac3", 46, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 47, 0),		
		
		(troop_set_slot, "trp_ms_ai_officer_fac3", 48, ms_flag_troop_elite_cavalry),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 49, 0),	
		(troop_set_slot, "trp_ms_ai_officer_fac3", 50, "trp_asak_bey"),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 51, 20),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 52, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 53, 0),		
		(troop_set_slot, "trp_ms_ai_officer_fac3", 54, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 55, 0),		
		
		(troop_set_slot, "trp_ms_ai_officer_fac3", 56, ms_flag_troop_elite_cavalry),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 57, 0),	
		(troop_set_slot, "trp_ms_ai_officer_fac3", 58, "trp_khergit_veteran_horse_archer"),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 59, 20),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 60, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 61, 0),		
		(troop_set_slot, "trp_ms_ai_officer_fac3", 62, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 63, 0),		
		
		(troop_set_slot, "trp_ms_ai_officer_fac3", 64, ms_flag_troop_elite_cavalry),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 65, 0),	
		(troop_set_slot, "trp_ms_ai_officer_fac3", 66, "trp_zyndjirli"),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 67, 18),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 68, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 69, 0),		
		(troop_set_slot, "trp_ms_ai_officer_fac3", 70, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 71, 0),		
		
		(troop_set_slot, "trp_ms_ai_officer_fac3", 72, ms_flag_troop_mercenary_infantry),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 73, 0),	
		(troop_set_slot, "trp_ms_ai_officer_fac3", 74, "trp_janissar"),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 75, 25),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 76, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 77, 0),		
		(troop_set_slot, "trp_ms_ai_officer_fac3", 78, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 79, 0),		
		
		(troop_set_slot, "trp_ms_ai_officer_fac3", 80, ms_flag_troop_mercenary_infantry),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 81, 0),	
		(troop_set_slot, "trp_ms_ai_officer_fac3", 82, "trp_basurman_azap"),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 83, 40),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 84, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 85, 0),		
		(troop_set_slot, "trp_ms_ai_officer_fac3", 86, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 87, 0),		
		
		(troop_set_slot, "trp_ms_ai_officer_fac3", 88, ms_flag_troop_mercenary_cavalry),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 89, 0),	
		(troop_set_slot, "trp_ms_ai_officer_fac3", 90, "trp_basurman_jebelu"),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 91, 25),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 92, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 93, 0),		
		(troop_set_slot, "trp_ms_ai_officer_fac3", 94, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 95, 0),		
		
		(troop_set_slot, "trp_ms_ai_officer_fac3", 96, ms_flag_troop_mercenary_cavalry),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 97, 0),	
		(troop_set_slot, "trp_ms_ai_officer_fac3", 98, "trp_ttr_cherkes"),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 99, 22),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 100, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 101, 0),		
		(troop_set_slot, "trp_ms_ai_officer_fac3", 102, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 103, 0),		
		
		(troop_set_slot, "trp_ms_ai_officer_fac3", 104, ms_flag_troop_mercenary_cavalry),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 105, 0),	
		(troop_set_slot, "trp_ms_ai_officer_fac3", 106, "trp_ttr_nogay"),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 107, 25),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 108, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 109, 0),		
		(troop_set_slot, "trp_ms_ai_officer_fac3", 110, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 111, 0),		
		
		(troop_set_slot, "trp_ms_ai_officer_fac3", 112, ms_flag_troop_uniq),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 113, "trp_kingdom_3_lord"),	
		(troop_set_slot, "trp_ms_ai_officer_fac3", 114, "trp_janissar"),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 115, 30),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 116, "trp_zyndjirli"),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 117, 15),		
		(troop_set_slot, "trp_ms_ai_officer_fac3", 118, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac3", 119, 0),		
		
		
		(troop_set_slot, "trp_ms_ai_officer_fac4", slot_ms_inf_limit, -1),
		(troop_set_slot, "trp_ms_ai_officer_fac4", slot_ms_kav_limit, 1),
		(troop_set_slot, "trp_ms_ai_officer_fac4", slot_ms_elit_limit, 1),
		(troop_set_slot, "trp_ms_ai_officer_fac4", slot_ms_merc_limit, 1),
		(troop_set_slot, "trp_ms_ai_officer_fac4", slot_ms_inf_chance_factor, 1),
		(troop_set_slot, "trp_ms_ai_officer_fac4", slot_ms_cav_chance_factor, 1),
		(troop_set_slot, "trp_ms_ai_officer_fac4", slot_ms_elit_chance_factor, 3),
		(troop_set_slot, "trp_ms_ai_officer_fac4", slot_ms_merc_chance_factor, 2),
		(troop_set_slot, "trp_ms_ai_officer_fac4", slot_ms_officer_troops_start, ms_flag_troop_infantry),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 9, 0),	
		(troop_set_slot, "trp_ms_ai_officer_fac4", 10, "trp_nord_trained_footman"),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 11, 15),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 12, "trp_nord_archer"),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 13, 12),		
		(troop_set_slot, "trp_ms_ai_officer_fac4", 14, "trp_sved_swordmaster"),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 15, 3),	

		(troop_set_slot, "trp_ms_ai_officer_fac4", 16, ms_flag_troop_infantry),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 17, 0),	
		(troop_set_slot, "trp_ms_ai_officer_fac4", 18, "trp_nord_archer"),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 19, 25),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 20, "trp_nord_trained_footman"),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 21, 5),		
		(troop_set_slot, "trp_ms_ai_officer_fac4", 22, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 23, 0),		
		
		(troop_set_slot, "trp_ms_ai_officer_fac4", 24, ms_flag_troop_infantry),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 25, 0),	
		(troop_set_slot, "trp_ms_ai_officer_fac4", 26, "trp_nord_huntsman"),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 27, 20),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 28, "trp_nord_footman"),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 29, 25),		
		(troop_set_slot, "trp_ms_ai_officer_fac4", 30, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 31, 0),		
		
		(troop_set_slot, "trp_ms_ai_officer_fac4", 32, ms_flag_troop_cavalry),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 33, 0),	
		(troop_set_slot, "trp_ms_ai_officer_fac4", 34, "trp_nord_warrior"),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 35, 30),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 36, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 37, 0),		
		(troop_set_slot, "trp_ms_ai_officer_fac4", 38, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 39, 0),		
		
		(troop_set_slot, "trp_ms_ai_officer_fac4", 40, ms_flag_troop_cavalry),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 41, 0),	
		(troop_set_slot, "trp_ms_ai_officer_fac4", 42, "trp_nord_champion"),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 43, 13),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 44, "trp_sved_lancers"),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 45, 13),		
		(troop_set_slot, "trp_ms_ai_officer_fac4", 46, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 47, 0),		
		
		(troop_set_slot, "trp_ms_ai_officer_fac4", 48, ms_flag_troop_cavalry),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 49, 0),	
		(troop_set_slot, "trp_ms_ai_officer_fac4", 50, "trp_nord_veteran"),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 51, 20),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 52, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 53, 0),		
		(troop_set_slot, "trp_ms_ai_officer_fac4", 54, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 55, 0),		
		
		(troop_set_slot, "trp_ms_ai_officer_fac4", 56, ms_flag_troop_elite_infantry),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 57, 0),	
		(troop_set_slot, "trp_ms_ai_officer_fac4", 58, "trp_nord_veteran_archer"),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 59, 25),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 60, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 61, 0),		
		(troop_set_slot, "trp_ms_ai_officer_fac4", 62, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 63, 0),		
		
		(troop_set_slot, "trp_ms_ai_officer_fac4", 64, ms_flag_troop_mercenary_infantry),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 65, 0),	
		(troop_set_slot, "trp_ms_ai_officer_fac4", 66, "trp_pruss_pike"),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 67, 30),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 68, "trp_mercenary_crossbowman"),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 69, 10),		
		(troop_set_slot, "trp_ms_ai_officer_fac4", 70, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 71, 0),		
		
		(troop_set_slot, "trp_ms_ai_officer_fac4", 72, ms_flag_troop_mercenary_infantry),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 73, 0),	
		(troop_set_slot, "trp_ms_ai_officer_fac4", 74, "trp_scott_musket"),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 75, 15),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 76, "trp_scott_pika"),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 77, 10),		
		(troop_set_slot, "trp_ms_ai_officer_fac4", 78, "trp_scott_sword"),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 79, 5),		
		
		(troop_set_slot, "trp_ms_ai_officer_fac4", 80, ms_flag_troop_mercenary_infantry),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 81, 0),	
		(troop_set_slot, "trp_ms_ai_officer_fac4", 82, "trp_finn_arcebuz"),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 83, 25),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 84, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 85, 0),		
		(troop_set_slot, "trp_ms_ai_officer_fac4", 86, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 87, 0),		
		
		(troop_set_slot, "trp_ms_ai_officer_fac4", 88, ms_flag_troop_mercenary_cavalry),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 89, 0),	
		(troop_set_slot, "trp_ms_ai_officer_fac4", 90, "trp_merc_reytar"),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 91, 18),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 92, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 93, 0),		
		(troop_set_slot, "trp_ms_ai_officer_fac4", 94, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 95, 0),		
		
		(troop_set_slot, "trp_ms_ai_officer_fac4", 96, ms_flag_troop_uniq),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 97, "trp_knight_4_9"),	
		(troop_set_slot, "trp_ms_ai_officer_fac4", 98, "trp_scott_musket"),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 99, 25),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 100, "trp_scott_pika"),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 101, 20),		
		(troop_set_slot, "trp_ms_ai_officer_fac4", 102, "trp_scott_sword"),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 103, 5),		
		
		(troop_set_slot, "trp_ms_ai_officer_fac4", 104, ms_flag_troop_uniq),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 105, "trp_knight_4_19"),	
		(troop_set_slot, "trp_ms_ai_officer_fac4", 106, "trp_scott_musket"),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 107, 25),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 108, "trp_scott_pika"),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 109, 20),		
		(troop_set_slot, "trp_ms_ai_officer_fac4", 110, "trp_scott_sword"),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 111, 5),		
		
		(troop_set_slot, "trp_ms_ai_officer_fac4", 112, ms_flag_troop_uniq),
		(party_get_slot, ":gubernator", "p_castle_4", slot_town_lord),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 113, ":gubernator"),	
		(troop_set_slot, "trp_ms_ai_officer_fac4", 114, "trp_finn_arcebuz"),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 115, 35),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 116, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 117, 0),		
		(troop_set_slot, "trp_ms_ai_officer_fac4", 118, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 119, 0),		
		
		(troop_set_slot, "trp_ms_ai_officer_fac4", 120, ms_flag_troop_uniq),
		(party_get_slot, ":gubernator", "p_town_1", slot_town_lord),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 121, ":gubernator"),	
		(troop_set_slot, "trp_ms_ai_officer_fac4", 122, "trp_pruss_pike"),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 123, 20),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 124, "trp_mercenary_crossbowman"),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 125, 15),		
		(troop_set_slot, "trp_ms_ai_officer_fac4", 126, "trp_merc_reytar"),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 127, 10),		
		
		(troop_set_slot, "trp_ms_ai_officer_fac4", 128, ms_flag_troop_uniq),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 129, "trp_kingdom_4_lord"),	
		(troop_set_slot, "trp_ms_ai_officer_fac4", 130, "trp_nord_veteran_archer"),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 131, 50),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 132, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 133, 0),		
		(troop_set_slot, "trp_ms_ai_officer_fac4", 134, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac4", 135, 0),		
				
		(troop_set_slot, "trp_ms_ai_officer_fac5", slot_ms_inf_limit, -1),
		(troop_set_slot, "trp_ms_ai_officer_fac5", slot_ms_kav_limit, 2),
		(troop_set_slot, "trp_ms_ai_officer_fac5", slot_ms_elit_limit, 1),
		(troop_set_slot, "trp_ms_ai_officer_fac5", slot_ms_merc_limit, 1),
		(troop_set_slot, "trp_ms_ai_officer_fac5", slot_ms_inf_chance_factor, 1),
		(troop_set_slot, "trp_ms_ai_officer_fac5", slot_ms_cav_chance_factor, 1),
		(troop_set_slot, "trp_ms_ai_officer_fac5", slot_ms_elit_chance_factor, 3),
		(troop_set_slot, "trp_ms_ai_officer_fac5", slot_ms_merc_chance_factor, 2),
		(troop_set_slot, "trp_ms_ai_officer_fac5", slot_ms_officer_troops_start, ms_flag_troop_infantry),
		(troop_set_slot, "trp_ms_ai_officer_fac5", 9, 0),	
		(troop_set_slot, "trp_ms_ai_officer_fac5", 10, "trp_rhodok_sergeant"),
		(troop_set_slot, "trp_ms_ai_officer_fac5", 11, 25),
		(troop_set_slot, "trp_ms_ai_officer_fac5", 12, "trp_rhodok_trained_crossbowman"),
		(troop_set_slot, "trp_ms_ai_officer_fac5", 13, 5),		
		(troop_set_slot, "trp_ms_ai_officer_fac5", 14, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac5", 15, 0),	

		(troop_set_slot, "trp_ms_ai_officer_fac5", 16, ms_flag_troop_infantry),
		(troop_set_slot, "trp_ms_ai_officer_fac5", 17, 0),	
		(troop_set_slot, "trp_ms_ai_officer_fac5", 18, "trp_rhodok_spearman"),
		(troop_set_slot, "trp_ms_ai_officer_fac5", 19, 30),
		(troop_set_slot, "trp_ms_ai_officer_fac5", 20, "trp_ukr_golota"),
		(troop_set_slot, "trp_ms_ai_officer_fac5", 21, 20),		
		(troop_set_slot, "trp_ms_ai_officer_fac5", 22, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac5", 23, 0),		
		
		(troop_set_slot, "trp_ms_ai_officer_fac5", 24, ms_flag_troop_cavalry),
		(troop_set_slot, "trp_ms_ai_officer_fac5", 25, 0),	
		(troop_set_slot, "trp_ms_ai_officer_fac5", 26, "trp_rhodok_trained_spearman"),
		(troop_set_slot, "trp_ms_ai_officer_fac5", 27, 27),
		(troop_set_slot, "trp_ms_ai_officer_fac5", 28, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac5", 29, 0),		
		(troop_set_slot, "trp_ms_ai_officer_fac5", 30, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac5", 31, 0),		
		
		(troop_set_slot, "trp_ms_ai_officer_fac5", 32, ms_flag_troop_cavalry),
		(troop_set_slot, "trp_ms_ai_officer_fac5", 33, 0),	
		(troop_set_slot, "trp_ms_ai_officer_fac5", 34, "trp_rhodok_crossbowman"),
		(troop_set_slot, "trp_ms_ai_officer_fac5", 35, 12),
		(troop_set_slot, "trp_ms_ai_officer_fac5", 36, "trp_ukr_storoja"),
		(troop_set_slot, "trp_ms_ai_officer_fac5", 37, 12),		
		(troop_set_slot, "trp_ms_ai_officer_fac5", 38, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac5", 39, 0),		
		
		(troop_set_slot, "trp_ms_ai_officer_fac5", 40, ms_flag_troop_elite_infantry),
		(troop_set_slot, "trp_ms_ai_officer_fac5", 41, 0),	
		(troop_set_slot, "trp_ms_ai_officer_fac5", 42, "trp_rhodok_veteran_spearman"),
		(troop_set_slot, "trp_ms_ai_officer_fac5", 43, 30),
		(troop_set_slot, "trp_ms_ai_officer_fac5", 44, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac5", 45, 0),		
		(troop_set_slot, "trp_ms_ai_officer_fac5", 46, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac5", 47, 0),		
		
		(troop_set_slot, "trp_ms_ai_officer_fac5", 48, ms_flag_troop_elite_cavalry),
		(troop_set_slot, "trp_ms_ai_officer_fac5", 49, 0),	
		(troop_set_slot, "trp_ms_ai_officer_fac5", 50, "trp_rhodok_veteran_crossbowman"),
		(troop_set_slot, "trp_ms_ai_officer_fac5", 51, 25),
		(troop_set_slot, "trp_ms_ai_officer_fac5", 52, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac5", 53, 0),		
		(troop_set_slot, "trp_ms_ai_officer_fac5", 54, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac5", 55, 0),		
		
		(troop_set_slot, "trp_ms_ai_officer_fac5", 56, ms_flag_troop_mercenary_infantry),
		(troop_set_slot, "trp_ms_ai_officer_fac5", 57, 0),	
		(troop_set_slot, "trp_ms_ai_officer_fac5", 58, "trp_gorod_kozak"),
		(troop_set_slot, "trp_ms_ai_officer_fac5", 59, 30),
		(troop_set_slot, "trp_ms_ai_officer_fac5", 60, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac5", 61, 0),		
		(troop_set_slot, "trp_ms_ai_officer_fac5", 62, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac5", 63, 0),		
		
		(troop_set_slot, "trp_ms_ai_officer_fac5", 64, ms_flag_troop_mercenary_cavalry),
		(troop_set_slot, "trp_ms_ai_officer_fac5", 65, 0),	
		(troop_set_slot, "trp_ms_ai_officer_fac5", 66, "trp_reestrovuy_kozak"),
		(troop_set_slot, "trp_ms_ai_officer_fac5", 67, 25),
		(troop_set_slot, "trp_ms_ai_officer_fac5", 68, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac5", 69, 0),		
		(troop_set_slot, "trp_ms_ai_officer_fac5", 70, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac5", 71, 0),		
		
		(troop_set_slot, "trp_ms_ai_officer_fac5", 72, ms_flag_troop_uniq),
		(troop_set_slot, "trp_ms_ai_officer_fac5", 73, "trp_kingdom_5_lord"),	
		(troop_set_slot, "trp_ms_ai_officer_fac5", 74, "trp_rhodok_veteran_spearman"),
		(troop_set_slot, "trp_ms_ai_officer_fac5", 75, 50),
		(troop_set_slot, "trp_ms_ai_officer_fac5", 76, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac5", 77, 0),		
		(troop_set_slot, "trp_ms_ai_officer_fac5", 78, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac5", 79, 0),		
		
		(troop_set_slot, "trp_ms_ai_officer_fac5", 80, ms_flag_troop_uniq),
		(troop_set_slot, "trp_ms_ai_officer_fac5", 81, "trp_knight_5_8"),	
		(troop_set_slot, "trp_ms_ai_officer_fac5", 82, "trp_reestrovuy_kozak"),
		(troop_set_slot, "trp_ms_ai_officer_fac5", 83, 40),
		(troop_set_slot, "trp_ms_ai_officer_fac5", 84, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac5", 85, 0),		
		(troop_set_slot, "trp_ms_ai_officer_fac5", 86, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac5", 87, 0),	

		(troop_set_slot, "trp_ms_ai_officer_fac5", 88, ms_flag_troop_uniq),
		(troop_set_slot, "trp_ms_ai_officer_fac5", 89, "trp_knight_5_5"),	
		(troop_set_slot, "trp_ms_ai_officer_fac5", 90, "trp_reestrovuy_kozak"),
		(troop_set_slot, "trp_ms_ai_officer_fac5", 91, 40),
		(troop_set_slot, "trp_ms_ai_officer_fac5", 92, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac5", 93, 0),		
		(troop_set_slot, "trp_ms_ai_officer_fac5", 94, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac5", 95, 0),		

		(troop_set_slot, "trp_ms_ai_officer_fac5", 96, ms_flag_troop_uniq),
		(troop_set_slot, "trp_ms_ai_officer_fac5", 97, "trp_knight_5_6"),	
		(troop_set_slot, "trp_ms_ai_officer_fac5", 98, "trp_reestrovuy_kozak"),
		(troop_set_slot, "trp_ms_ai_officer_fac5", 99, 40),
		(troop_set_slot, "trp_ms_ai_officer_fac5", 100, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac5", 101, 0),		
		(troop_set_slot, "trp_ms_ai_officer_fac5", 102, 0),
		(troop_set_slot, "trp_ms_ai_officer_fac5", 103, 0),			
	]),
		#MS Init scripts -end
		
		#MS Menu scripts -begin
	("ms_elder_dialog",
    [	
		(store_script_param, "$g_next_menu", 1),
		(assign, "$g_ms_center", "$current_town"),
		(party_get_slot, ":elder_troop", "$g_ms_center", slot_town_elder),
		(try_begin), 
			(eq, "$g_next_menu", "mnu_town"), 
			(party_get_slot, ":scene", "$current_town", slot_town_castle),
		(else_try), 	
			#(party_get_slot, ":scene", "$current_town", slot_castle_exterior),
			(assign, ":scene", "scn_meeting_scene_plain_forest"),
		(try_end), 	
		#(assign, "$g_ms_elder_dialog", 1),
		(modify_visitors_at_site, ":scene"),
		(reset_visitors),
		(set_visitor,0, "trp_player"),
		(set_visitor,17, ":elder_troop"),
		(jump_to_scene,":scene"),
		(change_screen_map_conversation, ":elder_troop"),
	]),	
	
	("ms_go_to_view_element_menu",
    [	
		(store_script_param, ":flag", 1),
		(assign, "$g_ms_cur_elements_type", ":flag"),
		(call_script, "script_ms_clear_array", "trp_ms_elder_menu_array", 101),
		(assign, "$g_ms_temp", 0),
		(call_script, "script_ms_get_kind_bounds", "script_ms_check_element_array", 1),
		(try_begin),
			(ge, "$g_ms_temp", 1),
			(call_script, "script_ms_clear_array", "trp_ms_elder_menu_array", 101),
		(try_end),
	]),		
	
	("ms_check_element_array",
    [	
		(store_script_param, ":element", 1),
		(store_script_param, ":interaction", 2),
		(try_begin),
			(troop_slot_eq, ":element",  "$g_ms_offset", ms_flag_already_builded),
			(troop_set_slot, "trp_ms_elder_menu_array", ":interaction", ":element"),
		(else_try),	
			(troop_slot_eq, ":element",  "$g_ms_offset", ms_flag_is_building),
			(assign, "$g_ms_temp", ":element"),
		(else_try),
			(troop_slot_eq, ":element",  "$g_ms_offset", ms_flag_empty),
			(troop_set_slot, "trp_ms_elder_menu_array", ":interaction", ":element"),
			(store_troop_gold, ":player_gold", "trp_player"),
			(troop_get_slot, ":price", ":element", slot_ms_price),
			(try_begin),
				(gt, ":price", ":player_gold"),
				(troop_set_slot, "trp_ms_elder_menu_array", ":interaction", 0),
			(else_try),
				(neg|troop_slot_eq, ":element", slot_ms_construct_requirements, ms_flag_empty),
				(troop_get_slot, ":script", ":element", slot_ms_construct_requirements),
				(call_script, ":script", "$g_ms_center", ":element", slot_ms_construct_requirements),
				(try_begin),
					(eq, reg1, 0),
					(troop_set_slot, "trp_ms_elder_menu_array", ":interaction", 0),
				(try_end),
			(try_end),
		(try_end),
	]),		
	
	("ms_clear_array",
    [	
		(store_script_param, ":array", 1),
		(store_script_param, ":upper", 2),
		(try_for_range, ":cur_slot", 0, ":upper"),
			(troop_set_slot, ":array", ":cur_slot", ms_flag_empty),
		(try_end),
	]),		

	("ms_get_kind_bounds",
    [	
		(store_script_param, ":script", 1),
		(store_script_param, ":do_script", 2),
		(try_begin),
			(party_slot_eq, "$g_ms_center", slot_party_type, spt_village),
			(try_begin),
				(eq, "$g_ms_cur_elements_type", ms_flag_building),
				(assign, ":start_element", ms_village_elements_start),
				(assign, ":end_element", ms_village_upgrade_start),
			(else_try),
				(eq, "$g_ms_cur_elements_type", ms_flag_upgrade),
				(assign, ":start_element", ms_village_upgrade_start),
				(assign, ":end_element", ms_elements_end),
			(try_end),
		(else_try),
			(try_begin),
				(eq, "$g_ms_cur_elements_type", ms_flag_building),
				(assign, ":start_element", ms_towns_elements_start),
				(assign, ":end_element", ms_towns_upgrade_start),
			(else_try),
				(eq, "$g_ms_cur_elements_type", ms_flag_upgrade),
				(assign, ":start_element", ms_towns_upgrade_start),
				(assign, ":end_element", ms_village_elements_start),
			(try_end),
		(try_end),
		(try_begin),
			(eq, ":do_script", 1),
			(assign, ":interaction", 0),
			(try_for_range, ":temp_element", ":start_element", ":end_element"),
				(call_script, ":script", ":temp_element", ":interaction"),
				(val_add, ":interaction", 1),
			(try_end),
		(try_end),
		(assign, reg0, ":start_element"),
	]),		
		
	("ms_get_faction_description_for_element",
    [	
		(store_script_param, ":element", 1),
		(store_script_param, ":flag", 2),
		(store_script_param, ":party", 3),
		(store_faction_of_party, ":party_faction", ":party"),
		(try_begin),
			(eq, ":party_faction", "fac_player_supporters_faction"),
			(assign, ":party_faction", "$supported_pretender_old_faction"),
		(try_end),
		(try_begin),
			(neg|is_between, ":party_faction", "fac_kingdom_1", kingdoms_end),
			(party_get_slot, ":party_faction", ":party", slot_center_original_faction),
		(try_end),
		(try_begin),
			(eq, ":flag", ms_flag_short),
			(assign, ":offset", 0),
		(else_try),
			(eq, ":flag", ms_flag_long),
			(assign, ":offset", 5),
		(else_try),
			(eq, ":flag", ms_flag_remour),
			(assign, ":offset", 10),
		(try_end),
	    (val_sub, ":party_faction", "fac_kingdom_1"),
		(val_add, ":party_faction", ":offset"),
	    (troop_get_slot, reg0, ":element", ":party_faction"),
	]),		
	
	("ms_get_wait_time",
    [	
		(store_script_param, ":wait_time", 1),
		(assign, reg1, 0),
		(try_begin),
			(ge, ":wait_time", 24),
			(val_div, ":wait_time", 24),
			(assign, reg1, 1),
		(try_end),
		(assign, reg2, ":wait_time"),
	]),		
	
	("ms_go_to_element_menu",
    [	
		(store_script_param, ":element_kind", 1),
		(call_script, "script_ms_get_kind_bounds", -1, 0),
		(store_add, "$g_cur_element", reg0, ":element_kind"),
	]),		
	
	("ms_start_build_element",
    [	
		(troop_get_slot, ":price", "$g_cur_element", slot_ms_price),		
		(troop_get_slot, ":wait_time", "$g_cur_element", slot_ms_construct_time),	
		(try_begin),
			(eq, "$g_ms_extra_adviser_dialog", 1),
			(store_distance_to_party_from_party, ":dist", "p_main_party", "$g_ms_center"),
			(val_add, ":wait_time", ":dist"),
		(try_end),
		(store_add, ":time_to_built_slot", ms_time_to_build_start_slot,  "$g_ms_offset"),
		(troop_set_slot, "$g_cur_element", ":time_to_built_slot", ":wait_time"),
		(troop_set_slot, "$g_cur_element", "$g_ms_offset", ms_flag_is_building),
		(try_begin),
			(eq, debug_mode, 1),
			(str_store_party_name, s30, "$g_ms_center"),			
			(call_script, "script_ms_get_faction_description_for_element", "$g_cur_element", ms_flag_short, "$g_ms_center"),
			(str_store_string, s31, reg0),
			(try_begin), 
				(party_slot_eq, "$g_ms_center", slot_town_lord, "trp_player"),
				(display_log_message, "@Player: v gorode {s30} nachata postroyka {s31}"),
			(else_try), 
				(eq, debug_mode, 1),
				(display_log_message, "@Player: v gorode {s30} nachata postroyka {s31}"),
			(try_end), 				
		(try_end),		
		(troop_remove_gold, "trp_player", ":price"),
		(call_script, "script_ms_go_to_view_element_menu", "$g_ms_cur_elements_type"),
	]),			
	
	("ms_already_builded_to_s2",
    [	
		(store_script_param, ":element", 1),
		(try_begin),
			(troop_slot_eq, ":element",  "$g_ms_offset", ms_flag_already_builded),
			(call_script, "script_ms_get_faction_description_for_element", ":element", ms_flag_short, "$g_ms_center"),
			(str_store_string, s0, reg0),
			(try_begin), 
				(eq, "$g_ms_temp_2", 0),
				(str_store_string, s2, "@{s0}"),
			(else_try), 
				(str_store_string, s2, "@{s0}, {s2}"),
			(try_end), 	
			(assign, "$g_ms_temp_2", 1),
		(try_end),
	]),				
		#MS Menu scripts -end
		
		#MS Construcr requirements -begin
	("ms_construct_prosperity_rich_or_greater",
    [	
		(store_script_param, ":cur_party", 1),
		(try_begin),
			(neg|party_slot_ge, ":cur_party", slot_town_prosperity, 60),
			(assign, reg1, 1),
		(else_try),
			(assign, reg1, 0),
		(try_end),
	]),
	
	("ms_construct_only_one_instanse_for_player",
    [	
		(assign, reg1, 1),
		(try_for_range, ":temp_party", towns_begin, castles_end),
			(party_slot_eq, ":temp_party", slot_town_lord, "trp_player"),
			(store_sub, ":offset", ":temp_party", towns_begin),
			(val_add, ":offset", ms_party_has_element_start_slot),
			(try_begin),
				(neg|troop_slot_eq, "$g_cur_element", ":offset", ms_flag_empty),
				(assign, reg1, 0),
			(try_end),
		(try_end),
		(str_store_string, s32, "str_oim_ms_construct_only_one_instanse_for_player"),
	]),
	
	("ms_construct_party_has_merchant_guild",
    [	
		(assign, reg1, 0),
		(try_begin),
			(troop_slot_eq, "trp_town_building_merchant_guild",  "$g_ms_offset", ms_flag_already_builded),
			(assign, reg1, 1),
		(try_end),
		(str_store_string, s32, "str_oim_ms_construct_party_has_merchant_guild"),
	]),
	
	("ms_construct_only_one_instanse_for_lord_faction",
    [	
		(store_script_param, ":cur_party", 1),
		(store_script_param, ":cur_element", 2),
		(store_faction_of_party, ":cur_party_faction", ":cur_party"),
		(faction_get_slot, ":cur_party_faction_leader", ":cur_party_faction", slot_faction_leader),
		(assign, reg1, 1),
		(try_begin),
			(party_slot_eq, ":cur_party", slot_town_lord, ":cur_party_faction_leader"),
			(try_for_range, ":temp_party", towns_begin, castles_end),
				(store_faction_of_party, ":temp_party_faction", ":temp_party"),
				(try_begin),
					(eq, ":temp_party_faction", ":cur_party_faction"),
					(store_sub, ":offset", ":temp_party", towns_begin),
					(val_add, ":offset", ms_party_has_element_start_slot),
					(try_begin),
						(neg|troop_slot_eq, ":cur_element", ":offset", ms_flag_empty),
						(assign, reg1, 0),
					(try_end),
				(try_end),
			(try_end),
		(try_end),
	]),
		#MS Construcr requirements -end
		
		#MS Building control scripts -begin
	("ms_check_building_process",
    [	
		(try_for_range, ":temp_element", ms_elenents_start, ms_elements_end),
			(try_for_range, ":cur_center", ms_parties_start, villages_end),
				(store_sub, ":offset",  ":cur_center", towns_begin),
				(val_add, ":offset", ms_party_has_element_start_slot),
				(try_begin),
					(troop_slot_eq, ":temp_element", ":offset", ms_flag_is_building),
					(store_add, ":time_to_built_slot", ms_time_to_build_start_slot, ":offset"),
					(troop_get_slot, ":wait_time", ":temp_element",  ":time_to_built_slot"),
					(val_sub, ":wait_time", 1),
					(try_begin),
						(eq, ":wait_time", 0),
						
						(troop_set_slot, ":temp_element", ":offset", ms_flag_already_builded),
						(try_begin),
							(str_store_party_name, s30, ":cur_center"),
							(call_script, "script_ms_get_faction_description_for_element", ":temp_element", ms_flag_short, ":cur_center"),
							(str_store_string, s31, reg0),							
							(try_begin), 
								(party_slot_eq, ":cur_center", slot_town_lord, "trp_player"),

                                (get_achievement_stat, ":achievement_stat", ACHIEVEMENT_CITY_PLANNER, 0),
						        (val_add, ":achievement_stat", 1),
						        (set_achievement_stat, ACHIEVEMENT_CITY_PLANNER, 0, ":achievement_stat"),
						        (try_begin),
						          (eq, ":achievement_stat", 3),
						          (unlock_achievement, ACHIEVEMENT_CITY_PLANNER),						          
						        (try_end),

								(display_log_message, "@V gorode {s30} zavershena postroyka {s31}"),
							(else_try), 
								(eq, debug_mode, 1),
								(display_log_message, "@V gorode {s30} zavershena postroyka {s31}"),
							(try_end), 	
						(try_end),
						(try_begin),
							(neg|troop_slot_eq, ":temp_element", slot_ms_script_after_construct, ms_flag_empty),
							(troop_get_slot, ":script", ":temp_element", slot_ms_script_after_construct),
							(call_script, ":script", ":cur_center", ":temp_element", slot_ms_script_after_construct),
						(try_end),
					(try_end),
					(troop_set_slot, ":temp_element", ":time_to_built_slot", ":wait_time"),
				(try_end),
			(try_end),
		(try_end),
	]),		
		#MS Building control scripts -end
		
		#MS AI control scripts -begin
	("ms_check_ai_process",
    [	
		(try_for_range, ":cur_center", ms_parties_start, villages_end),
			(neg|party_slot_eq, ":cur_center", slot_town_lord, "trp_player"),
			(assign, ":is_building", 0),
			(assign, ":count_with_prior", 0),
			(assign, ":largest_prior", 1),
			(store_sub, ":offset", ":cur_center", towns_begin),
			(val_add, ":offset", ms_party_has_element_start_slot),
			(try_begin),
				(party_slot_eq, ":cur_center", slot_party_type, spt_village),
				(assign, ":start_element", ms_village_elements_start),
				(assign, ":end_element", ms_elements_end),
			(else_try),
				(assign, ":start_element", ms_towns_elements_start),
				(assign, ":end_element", ms_village_elements_start),
			(try_end),
			(try_for_range, ":temp_element", ":start_element", ":end_element"),
				(neg|troop_slot_eq, ":temp_element", ":offset", ms_flag_already_builded),
				(eq, ":is_building", 0),
				(try_begin),
					(troop_slot_eq, ":temp_element", ":offset", ms_flag_is_building),
					(assign, ":is_building", 1),
				(try_end),
				(troop_get_slot, ":script", ":temp_element", slot_ms_ai_requirements),
				(assign, reg1, 1),
				(try_begin),
					(gt, ":script", ms_flag_empty),
					(call_script, ":script", ":cur_center", ":temp_element", slot_ms_ai_requirements),
				(try_end),
				(try_begin),
					(eq, reg1, 1),
					(troop_slot_ge, ":temp_element", slot_ms_ai_priority, ":largest_prior"),
					(try_begin),
						(neg|troop_slot_eq, ":temp_element", slot_ms_ai_priority, ":largest_prior"),
						(troop_get_slot, ":largest_prior", ":temp_element", slot_ms_ai_priority),
						(assign, ":count_with_prior", 0),
					(try_end),
					(troop_set_slot, "trp_ms_ai_array", ":count_with_prior", ":temp_element"),
					(val_add, ":count_with_prior", 1),
				(try_end),
			(try_end),
			(try_begin),
				(eq, ":is_building", 0),
				(ge, ":count_with_prior", 1),
				(store_random_in_range, ":cur_ind", 0, ":count_with_prior"),
				(troop_get_slot, ":element_to_build", "trp_ms_ai_array", ":cur_ind"),
				(troop_get_slot, ":wait_time", ":element_to_build", slot_ms_construct_time),	
				(val_mul, ":wait_time", time_multiplier),
				(store_add, ":time_to_built_slot", ms_time_to_build_start_slot, ":offset"),
				(troop_set_slot, ":element_to_build", ":time_to_built_slot", ":wait_time"),
				(troop_set_slot, ":element_to_build", ":offset", ms_flag_is_building),
				(try_begin),
					(eq, debug_mode, 1),
					(str_store_party_name, s30, ":cur_center"),
					(call_script, "script_ms_get_faction_description_for_element", ":element_to_build", ms_flag_short, ":cur_center"),
					(str_store_string, s31, reg0),
					#(str_store_troop_name, s31, ":temp_element"),
					#(str_store_troop_name, s31, ":element_to_build"),
					(try_begin), 
						(party_slot_eq, ":cur_center", slot_town_lord, "trp_player"),
						(display_log_message, "@V gorode {s30} zavershena postroyka {s31}"),
					(else_try), 
						(eq, debug_mode, 1),
						(display_log_message, "@V gorode {s30} zavershena postroyka {s31}"),
					(try_end), 	
					#(display_log_message, "@Ai: v gorode {s30} nachata postroyka {s31}"),
				(try_end),
			(try_end),
		(try_end),
	]),		
		#MS AI control scripts -end
		
		#MS Event triger scripts (slot_ms_script_after_construct)-begin
	("ms_event_change_prosperity",
    [	
		(store_script_param, ":party", 1),
		(store_script_param, ":element", 2),
		(store_script_param, ":slot", 3),
		(val_add, ":slot", 1),
		(troop_get_slot, ":percent", ":element", ":slot"),
		(party_get_slot, ":old_prosperity", ":party", slot_town_prosperity),
		(val_add, ":percent", 100),
		(store_mul, ":new_prosperity", ":old_prosperity", ":percent"),
		(val_div, ":new_prosperity", 100),
		(try_begin),
			(neg|eq, ":new_prosperity", ":old_prosperity"),
			(store_sub, ":differ", ":new_prosperity", ":old_prosperity"),			
			(call_script, "script_change_center_prosperity", ":party", ":differ"),
		(try_end),
	]),
	
	("ms_event_raise_relation_with_party",
    [	
		(store_script_param, ":party", 1),
		(store_script_param, ":element", 2),
		(store_script_param, ":slot", 3),
		(try_begin),
			(party_slot_eq, ":party", slot_town_lord, "trp_player"),
			(val_add, ":slot", 1),
			(troop_get_slot, ":chance", ":element", ":slot"),
			(store_random_in_range, ":cur_num", 1, 101),
			(try_begin),
				(le, ":cur_num", ":chance"),
				(val_add, ":slot", 1),
				(troop_get_slot, ":value", ":element", ":slot"),
				(call_script, "script_change_player_relation_with_center", ":party", ":value"),
			(try_end),
		(try_end),
	]),
	
	("ms_event_raise_random_skill_which_need_intelligence",
    [	
		(store_script_param, ":party", 1),
		(try_begin),
			(party_slot_eq, ":party", slot_town_lord, "trp_player"),
			(assign, ":skill_count", 0),
			(try_for_range, ":cur_skill", "skl_trade", "skl_reserved_18"),
				(this_or_next|eq, ":cur_skill", "skl_tactics"),
				(this_or_next|eq, ":cur_skill", "skl_persuasion"),
				(this_or_next|eq, ":cur_skill", "skl_leadership"),
				(this_or_next|eq, ":cur_skill", "skl_trade"),
				(this_or_next|eq, ":cur_skill", "skl_weapon_master"),
				(this_or_next|eq, ":cur_skill", "skl_engineer"),
				(this_or_next|eq, ":cur_skill", "skl_wound_treatment"),
				(this_or_next|eq, ":cur_skill", "skl_trainer"),
				(eq, ":cur_skill", "skl_surgery"),
				(try_begin),
					(store_skill_level, ":cur_skill_level", ":cur_skill", "trp_player"),
					(try_begin),
						(lt, ":cur_skill_level", 10),
						(troop_set_slot, "trp_ms_temp_array", ":skill_count", ":cur_skill"),
						(val_add, ":skill_count", 1),
					(try_end),
				(try_end),
			(try_end),
			(try_begin),
				(gt, ":skill_count", 0),
				(store_random_in_range, ":cur_num", 0, ":skill_count"),
				(troop_get_slot, ":skill_to_raise", "trp_ms_temp_array", ":cur_num"),
				(troop_raise_skill, "trp_player", ":skill_to_raise", 1),
			(try_end),
		(try_end),
	]),
	
	("ms_event_once_raise_trade_skill",
    [	
		(store_script_param, ":party", 1),
		(store_script_param, ":element", 2),
		(try_begin),
			(party_slot_eq, ":party", slot_town_lord, "trp_player"),
			(troop_slot_eq, ":element", slot_ms_was_used, ms_flag_empty),
			(troop_raise_skill, "trp_player", "skl_trade", 1),
			(troop_set_slot, ":element", slot_ms_was_used, ms_flag_already_was_used),
		(try_end),
	]),
	
	("ms_event_raise_mercenary_max_count",
    [	
		#(store_script_param, ":party", 1),
		(store_script_param, ":element", 2),
		#(troop_get_slot, ":change", ":element", slot_ms_script_after_construct_p1),
		(troop_get_slot, ":type", ":element", slot_ms_script_after_construct_p2),
		(try_begin),
			(eq, ":type", ms_flag_all),
			#Max mercenary system
		(else_try),
			(eq,  ":type", ms_flag_horsed),
			#Max mercenary system
		(try_end),
	]),
	
	("ms_event_notification_about_gold_usage",
    [	
		(store_script_param, ":party", 1),
		(store_script_param, ":element", 2),
		(store_script_param, ":slot", 3),
		(try_begin),
			(party_slot_eq, ":party", slot_town_lord, "trp_player"),
			(store_add, ":cur_slot", ":slot", 1),
			(troop_get_slot, ":chance", ":element", ":cur_slot"),
			(store_random_in_range, ":cur_num", 1, 101),
			(try_begin),
				(le, ":cur_num", ":chance"),
				(try_begin),
					(eq, ":slot", slot_ms_script_after_construct),
					(call_script, "script_add_notification_menu", "mnu_notification_about_gold_usage_after_construct", ":party", ":element"),
				(else_try),
					(eq, ":slot", slot_ms_script_30_day),
					(call_script, "script_add_notification_menu", "mnu_notification_about_gold_usage_30_day", ":party", ":element"),
				(else_try),	
					(eq, ":slot", slot_ms_script_7_day),
					(call_script, "script_add_notification_menu", "mnu_notification_about_gold_usage_7_day", ":party", ":element"),
				(try_end),
			(try_end),
		(try_end),
	]),
	
	("ms_fill_string",
    [	
		(store_script_param, ":party", 1),
		(store_script_param, ":element", 2),
		(store_script_param, ":slot", 3),
		(val_add, ":slot", 2),
		(troop_get_slot, ":string", ":element", ":slot"),
		(val_add, ":slot", 1),
		(troop_get_slot, ":flag", ":element", ":slot"),
		(val_add, ":slot", 1),
		(troop_get_slot, ":lower", ":element", ":slot"),
		(try_begin),
			(this_or_next|eq, ":flag", ms_flag_with_element_name),
			(eq, ":flag", ms_flag_random),
			(val_add, ":slot", 1),
			(troop_get_slot, ":upper", ":element", ":slot"),
			(val_add, ":slot", 1),
			(troop_get_slot, ":multiplier", ":element", ":slot"),
			(store_random_in_range, ":cur_num", ":lower", ":upper"),
			(try_begin),
				(eq, ":flag", ms_flag_with_element_name),
				(store_sub, ":offset", ":party", towns_begin),
				(val_add, ":offset", ms_party_has_element_start_slot),
				(assign, ":upgrade_count", 0),
				(try_for_range, ":temp_element", ms_towns_upgrade_start, ms_village_elements_start),
					(troop_slot_eq, ":temp_element", ":offset", ms_flag_already_builded),
					(troop_set_slot, "trp_ms_temp_array_rank", ":upgrade_count", ":temp_element"),
					(val_add, ":upgrade_count", 1),
				(try_end),
				(try_begin),
					(gt, ":upgrade_count", 0),
					(store_random_in_range, ":cur_num", 0, ":upgrade_count"),
					(troop_get_slot, ":temp_upgrade", "trp_ms_temp_array_rank", ":cur_num"),
					(call_script, "script_ms_get_faction_description_for_element", ":temp_upgrade", ms_flag_short, ":party"),
					(assign, ":descr", reg0),
					(str_store_string, s50, ":descr"),
					(troop_set_slot, ":temp_upgrade", ":offset", ms_flag_empty),
				(else_try),
					(str_store_string, s50, "@Glava"),
				(try_end),
			(try_end),
		(try_end),
		(try_begin),
			(eq, ":flag", ms_flag_simple),
			(assign, reg0, ":lower"),		
		(else_try),
			(store_mul, reg0, ":cur_num", ":multiplier"),
		(try_end),
		(try_begin),
			(ge, reg0, 0),
			(troop_add_gold, "trp_player", reg0),
		(else_try),
			(val_abs, reg0),			
			(troop_remove_gold, "trp_player", reg0),			
		(try_end),
		(str_store_string, s51, ":string"),
	]),
		#MS Event triger scripts (slot_ms_script_after_construct)-end
		
		#MS Time scripts -begin
	("ms_check_time_event",
    [	
		(store_script_param, ":time_slot", 1),		
		(try_for_range, ":temp_element", ms_elenents_start, ms_elements_end),
			(neg|troop_slot_eq, ":temp_element", ":time_slot", ms_flag_empty), 
			(try_for_range, ":cur_center", ms_parties_start, villages_end),
				(this_or_next|party_slot_eq, ":cur_center", slot_town_lord, "trp_player"),
				(troop_slot_eq, ":temp_element", ":time_slot", "script_ms_event_change_prosperity"),
				(store_sub, ":offset",  ":cur_center", towns_begin),
				(val_add, ":offset", ms_party_has_element_start_slot),
				(try_begin),
					(troop_slot_eq, ":temp_element", ":offset", ms_flag_already_builded),
					(troop_get_slot, ":script", ":temp_element", ":time_slot"),					
					(neq, ":script", "script_ms_get_all_taxes"),					
					(call_script, ":script", ":cur_center", ":temp_element", ":time_slot"),
				(try_end),
			(try_end),
		(try_end),
				
		(try_for_range, ":temp_element", ms_elenents_start, ms_elements_end),
			(neg|troop_slot_eq, ":temp_element", ":time_slot", ms_flag_empty), 
			(try_for_range, ":cur_center", ms_parties_start, villages_end),
				(this_or_next|party_slot_eq, ":cur_center", slot_town_lord, "trp_player"),
				(troop_slot_eq, ":temp_element", ":time_slot", "script_ms_event_change_prosperity"),
				(store_sub, ":offset",  ":cur_center", towns_begin),
				(val_add, ":offset", ms_party_has_element_start_slot),
				(try_begin),
					(troop_slot_eq, ":temp_element", ":offset", ms_flag_already_builded),
					(troop_get_slot, ":script", ":temp_element", ":time_slot"),
					(eq, ":script", "script_ms_get_all_taxes"),
					(call_script, ":script", ":cur_center", ":temp_element", ":time_slot"),
				(try_end),
			(try_end),
		(try_end),
	]),		
	
		#MS 1 day scripts -begin
	("ms_event_raise_taxes",
    [	
		(store_script_param, ":party", 1),
		(store_script_param, ":element", 2),
		(store_script_param, ":slot", 3),
		(try_begin),
			(party_slot_eq, ":party", slot_town_lord, "trp_player"),
			(val_add, ":slot", 1),
			(troop_get_slot, ":percent",":element",  ":slot"),
			(val_add, ":percent", 100),
			(party_get_slot, ":accumulated_rents", ":party", slot_center_accumulated_rents),
			#(party_get_slot, ":accumulated_tariffs", ":party", slot_center_accumulated_tariffs),
			(assign, ":old_total_tax", ":accumulated_rents"),
			(store_mul, ":new_total_tax", ":old_total_tax", ":percent"),
			(val_div, ":new_total_tax", 100),
			(party_set_slot, ":party", slot_center_accumulated_rents, ":new_total_tax"),
		(try_end),
	]),		
	
	("ms_event_night_attack_by_bandits",
    [	
		(store_script_param, ":party", 1),
		(store_script_param, ":element", 2),
		(store_script_param, ":slot", 3),
		(try_begin),
			(party_is_in_town, "p_main_party", ":party"),
			(val_add, ":slot", 1),
			(troop_get_slot, ":chance", ":element", ":slot"),
			(store_random_in_range, ":cur_num", 1, 101),
			(try_begin),
				(le, ":cur_num", ":chance"),
				(party_get_slot, ":has_bandits", ":party", slot_center_has_bandits),
				(try_begin),
					(le, ":has_bandits", 0),
					(store_random_in_range, ":random_no", 0, 3),
					(try_begin),
						(eq, ":random_no", 0),
						(assign, ":bandit_troop", "trp_bandit"),
					(else_try),
						(eq, ":random_no", 1),
						(assign, ":bandit_troop", "trp_mountain_bandit"),
					(else_try),
						(assign, ":bandit_troop", "trp_forest_bandit"),
					(try_end),
					(party_set_slot, ":party", slot_center_has_bandits, ":bandit_troop"),
				(try_end),
				(call_script, "script_cf_enter_center_location_bandit_check"),
			(try_end),
		(try_end),
	]),		
	
	("ms_event_add_troops",
    [	
		(store_script_param, ":party", 1),
		(store_script_param, ":element", 2),
		(store_script_param, ":slot", 3),
		(try_begin),
			(party_slot_eq, ":party", slot_town_lord, "trp_player"),
			(val_add, ":slot", 1),
			(troop_get_slot, ":chance", ":element", ":slot"),
			(store_random_in_range, ":cur_num", 1, 101),
			(try_begin),
				(le, ":cur_num", ":chance"),
				(store_faction_of_party, ":party_faction", ":party"),
				(store_sub, ":tier_slot_offset", slot_faction_tier_1_troop, 1),
				(val_add, ":slot", 1),
				(troop_get_slot, ":lower_count", ":element", ":slot"),
				(val_add, ":slot", 1),
				(troop_get_slot, ":upper_count", ":element", ":slot"),
				(val_add, ":slot", 1),
				(troop_get_slot, ":lower_level", ":element", ":slot"),
				(val_add, ":slot", 1),
				(troop_get_slot, ":upper_level", ":element", ":slot"),
				(store_random_in_range, ":cur_count", ":lower_count", ":upper_count"),	
				(try_for_range, ":cur_pos", 0, ":cur_count"),
					(eq, ":cur_pos", ":cur_pos"),
					(store_random_in_range, ":cur_level", ":lower_level", ":upper_level"),
					(store_add, ":cur_troop_slot", ":tier_slot_offset", ":cur_level"),
					(faction_get_slot, ":cur_tier_troop", ":party_faction", ":cur_troop_slot"),
					(party_add_members, ":party", ":cur_tier_troop", 1),
				(try_end),
			(try_end),
		(try_end),
	]),		
			#MS 1 day scripts -end

			#MS 7 day scripts -begin
	("ms_get_all_taxes",
    [	
		(store_script_param, ":party", 1),
		(try_begin),
			(party_slot_eq, ":party", slot_town_lord, "trp_player"),
			(try_for_range, ":cur_center", ms_parties_start, villages_end),
				(party_slot_eq, ":cur_center", slot_town_lord, "trp_player"),
				(party_slot_ge,  ":cur_center", slot_center_accumulated_rents, 1),
				(party_get_slot, ":accumulated_rents", ":cur_center", slot_center_accumulated_rents),
				#(party_get_slot, ":accumulated_tariffs", ":cur_center", slot_center_accumulated_tariffs),
				(assign, ":total_tax", ":accumulated_rents"),
				(try_begin), 
					(party_slot_eq, ":cur_center", slot_party_type, spt_town),
					(val_mul, ":total_tax", tax_town_multiplier), 
				(else_try), 
					(party_slot_eq, ":cur_center", slot_party_type, spt_castle),
					(val_mul, ":total_tax", tax_castle_multiplier), 
				(else_try),  
					(val_mul, ":total_tax", tax_village_multiplier), 
				(try_end), 
				(call_script, "script_cf_mul_total_tax", ":total_tax"),
				(assign, reg0, ":total_tax"),
				#(troop_add_gold, "trp_player",":total_tax"),
				(call_script, "script_add_notification_menu", "mnu_notification_tax_collected", ":total_tax", ":cur_center"),
				(call_script, "script_troop_add_gold", "trp_player", ":total_tax"),
				(try_begin), 
					(eq, debug_mode, 1),
					(assign, reg3, ":total_tax"),
					(display_log_message, "@tax: {reg3}"),
				(try_end), 
				(party_set_slot,  ":cur_center", slot_center_accumulated_rents, 0),
				#(party_set_slot,  ":cur_center", slot_center_accumulated_tariffs, 0),
			(try_end),
		(try_end),
	]),		
			#MS 7 day scripts -end
			
			#MS 30 day scripts -begin
	("ms_event_fill_army",
    [	
	]),
			#MS 30 day scripts -end
		#MS Time scripts -end

    #MS Event triger scripts (slot_ms_script_before_attack)-begin
	("ms_before_attack",
    [	
		(store_script_param, ":defender_party", 1),
		(store_script_param, ":attacker_party", 2),
		(store_script_param, ":attacker_troop", 3),
		(store_sub, ":offset", ":defender_party", towns_begin),
		(val_add, ":offset", ms_party_has_element_start_slot),
		(try_for_range, ":temp_element", ms_elenents_start, ms_elements_end),
			(troop_slot_eq, ":temp_element", ":offset", ms_flag_already_builded),
			(neg|troop_slot_eq, ":temp_element", slot_ms_script_before_attack, ms_flag_empty), 
			(troop_get_slot, ":script", ":temp_element", slot_ms_script_before_attack),
			(call_script, ":script", ":defender_party", ":attacker_party", ":attacker_troop"),
		(try_end),
	]),
	
	("ms_event_add_militiaman",
    [	
		(store_script_param, ":unused", 1),
		(store_script_param, ":unused", 2),
		(store_script_param, ":unused", 3),
		(store_script_param, ":unused", 4),
		(store_script_param, ":unused", 5),
		(store_script_param, ":unused", 6),
		(store_script_param, ":unused", 7),
		##(store_script_param, ":defender_party", 1),
		##(store_script_param, ":player_chance", 2),
		##(store_script_param, ":player_upper", 3),
		##(store_script_param, ":player_lower", 4),
		##(store_script_param, ":ai_chance", 5),
		##(store_script_param, ":ai_upper", 6),
		##(store_script_param, ":ai_lower", 7),
		##(try_begin),
		##	(party_slot_eq, ":defender_party", slot_town_lord, "trp_player"),
		##	(assign, ":chance", ":player_chance"),
		##	(assign, ":upper", ":player_upper"),
		##	(assign, ":lower", ":player_lower"),
		##(else_try),
		##	(assign, ":chance", ":ai_chance"),
		##	(assign, ":upper", ":ai_upper"),
		##	(assign, ":lower", ":ai_lower"),
		##(try_end),
		##(store_random_in_range, ":cur_num", 1, 101),
		##(try_begin),
		##	(le, ":cur_num", ":chance"),
		##	(store_random_in_range, ":count", ":lower", ":upper"),
		##	
		##	(party_get_slot, ":center_culture", ":defender_party", slot_center_culture),
		##	(store_faction_of_party, ":faction", ":defender_party"), 
		##	(try_begin), 
		##		(eq, ":faction", "fac_kingdom_1"), 
		##		(faction_get_slot, ":volunteer_troop", "fac_kingdom_1", slot_faction_tier_1_troop),
		##	(else_try), 
		##		(eq, ":faction", "fac_kingdom_2"), 
		##		(faction_get_slot, ":volunteer_troop", "fac_kingdom_2", slot_faction_tier_1_troop),
		##	(else_try), 
		##		(eq, ":faction", "fac_kingdom_3"), 
		##		(faction_get_slot, ":volunteer_troop", "fac_kingdom_3", slot_faction_tier_1_troop),
		##	(else_try), 
		##		(eq, ":faction", "fac_kingdom_4"), 
		##		(faction_get_slot, ":volunteer_troop", "fac_kingdom_4", slot_faction_tier_1_troop),
		##	(else_try), 
		##		(eq, ":faction", "fac_kingdom_5"), 
		##		(faction_get_slot, ":volunteer_troop", "fac_kingdom_5", slot_faction_tier_1_troop),
		##	(else_try), 
		##		(faction_get_slot, ":volunteer_troop", ":center_culture", slot_faction_tier_1_troop),
		##	(try_end), 
		##
		##	#(party_add_members, ":defender_party", ":volunteer_troop", ":count"),
		##(try_end),
	]),

	("ms_event_add_militiaman_arsenal",
    [	
		(store_script_param, ":defender_party", 1),
		(call_script, "script_ms_event_add_militiaman", ":defender_party", 40, 30, 41, 75, 40, 51),
	]),
	
	("ms_event_defense",
    [	
		(store_script_param, ":defender_party", 1),
		(store_script_param, ":attacker_party", 2),
		(store_script_param, ":unused", 3),
		(store_sub, ":offset", ":defender_party", towns_begin),
		(val_add, ":offset", ms_party_has_element_start_slot),
		(try_begin),
			(troop_slot_eq, "trp_town_building_defense", ":offset", ms_flag_already_builded),
			(troop_set_slot, "trp_town_building_defense", ":offset", ms_flag_temporary_inactive),
		(try_end),
		(store_distance_to_party_from_party, ":distance", "p_main_party", ":attacker_party"),
		(store_faction_of_party, ":defender_faction", ":defender_party"),
		(try_begin),
			(lt, ":distance", 5),
			(this_or_next|party_slot_eq, ":attacker_party", slot_town_lord, "trp_player"),
			(this_or_next|party_slot_eq, ":defender_party", slot_town_lord, "trp_player"),
			(                        eq, ":defender_faction", "fac_player_supporters_faction"),
			(call_script, "script_add_notification_menu", "mnu_notification_party_under_siege_with_defence", ":defender_party", ":attacker_party"),
		(else_try), 
			(call_script, "script_remove_percent_of_each_kind_of_troops", 10, ":attacker_party"),	
		(try_end),
	]),
	
	("ms_event_add_militiaman_garrison_commander",
    [	
		(store_script_param, ":defender_party", 1),
		(call_script, "script_ms_event_add_militiaman", ":defender_party", 100, 20, 26, 100, 20, 31),	
	]),
			#MS Event triger scripts (slot_ms_script_before_attack)-end	
			
			#MS Event triger scripts (slot_ms_script_looted)-begin
	("ms_event_looted",
    [	
		(store_script_param, ":looted_party", 1),
		(store_sub, ":offset", ":looted_party", towns_begin),
		(val_add, ":offset", ms_party_has_element_start_slot),
		(try_for_range, ":temp_element", ms_elenents_start, ms_elements_end),
			(this_or_next|troop_slot_eq, ":temp_element", ":offset", ms_flag_already_builded),
			(troop_slot_eq, ":temp_element", ":offset", ms_flag_is_building),
			(neg|troop_slot_eq, ":temp_element", slot_ms_script_looted, ms_flag_empty), 
			(troop_get_slot, ":script", ":temp_element", slot_ms_script_looted),
			(call_script, ":script", ":looted_party", ":temp_element", slot_ms_script_looted, 0),
		(try_end),
	]),
		
	("ms_event_destroy_element",
    [	
		(store_script_param, ":party", 1),
		(store_script_param, ":element", 2),
		(store_script_param, ":parameter_slot_id", 3),
		(store_script_param, ":show_message", 4),
		(val_add, ":parameter_slot_id", 1),
		(troop_get_slot, ":chance",  ":element", ":parameter_slot_id"),
		(store_sub, ":offset", ":party", towns_begin),
		(val_add, ":offset", ms_party_has_element_start_slot),
		(store_random_in_range, ":cur_num", 1, 101),
		(try_begin),
			(le, ":cur_num", ":chance"),
			(neq, ":chance", -1),
				(troop_set_slot, ":element", ":offset", ms_flag_empty),
				(try_begin),
					(eq, ":element", "trp_town_building_merchant_guild"),
					(troop_set_slot, "trp_town_upgrade_trading_master", ":offset", ms_flag_empty),
				(try_end),
				(try_begin),
					(eq, ":show_message", 1),
					(party_slot_eq, ":party", slot_town_lord, "trp_player"),
					(call_script, "script_add_notification_menu", "mnu_notification_village_element_leave_service", ":party", ":element"),
				(try_end),
		(try_end),
	]),
			#MS Event triger scripts (slot_ms_script_looted)-end	

			#MS Event triger scripts (slot_ms_script_captured)-begin
	("ms_event_captured",
    [	
		(store_script_param, ":captured_party", 1),
		(try_begin),
			(is_between, ":captured_party", ms_parties_start, villages_end),
			(store_sub, ":offset", ":captured_party", towns_begin),
			(val_add, ":offset", ms_party_has_element_start_slot),
			(try_for_range, ":temp_element", ms_elenents_start, ms_elements_end),
				(troop_slot_eq, ":temp_element", ":offset", ms_flag_already_builded),
				(neg|troop_slot_eq, ":temp_element", slot_ms_script_captured, ms_flag_empty), 
				(troop_get_slot, ":script", ":temp_element", slot_ms_script_captured),
				(call_script, ":script", ":captured_party", ":temp_element"),
			(try_end),
		(try_end),
	]),		
				
	("ms_event_capture_v1",
    [	
		(store_script_param, ":captured_party", 1),
		(store_script_param, ":element", 2),
		(call_script, "script_ms_event_destroy_element", ":captured_party", ":element",  slot_ms_script_captured, 0),
			#(call_script, "script_ms_event_get_random_weapon_with_chance", 10),
	]),

	("ms_event_get_random_weapon_with_chance",
    [	
		(store_script_param, ":chance", 1),
		(store_random_in_range, ":cur_num", 1, 101),
		(try_begin),
			(lt, ":cur_num", ":chance"),
			(store_random_in_range, ":rand_weapon", weapons_begin, weapons_end),
			(troop_add_item, "trp_player", ":rand_weapon"),
		(try_end),
	]),
	
	("ms_event_capture_without_msg",
    [	
		(store_script_param, ":captured_party", 1),
		(store_script_param, ":element", 2),
		(call_script, "script_ms_event_destroy_element", ":captured_party", ":element", slot_ms_script_captured, 0),
	]),
	
	("ms_event_capture_treasure",
    [	
		(store_script_param, ":captured_party", 1),
		(try_begin),
			(eq, 0, 1), 
			(party_slot_eq, ":captured_party", slot_town_lord, "trp_player"),
			(store_character_level, ":player_level", "trp_player"),
			(try_begin),
				(le, ":player_level", 17),
				(assign, ":koef", ":player_level"),
			(else_try),
				(store_mul, ":koef", ":player_level", 17),
				(val_div, ":koef", 10),
			(try_end),
			(store_troop_gold, ":player_gold", "trp_player"),
			(val_clamp, ":koef", 0, 101),
			(store_mul, ":gold_to_remove", ":player_gold", ":koef"),
			(val_div, ":gold_to_remove", 100),
			(gt, ":gold_to_remove", 0),			
			(troop_remove_gold, "trp_player", ":gold_to_remove"),
		(try_end),
	]),
	
	("ms_event_capture_with_msg",
    [	
		(store_script_param, ":captured_party", 1),
		(store_script_param, ":element", 2),
		(call_script, "script_ms_event_destroy_element", ":captured_party", ":element", slot_ms_script_captured, 1),
	]),
			#MS Event triger scripts (slot_ms_script_captured)-end		

			#MS Event triger scripts (slot_ms_script_unsieged)-begin
	("ms_event_unsieged",
    [	
		(store_script_param, ":unsieged_party", 1),
		(store_sub, ":offset", ":unsieged_party", towns_begin),
		(val_add, ":offset", ms_party_has_element_start_slot),
		(try_begin),
			(troop_slot_eq, "trp_town_building_defense", ":offset", ms_flag_temporary_inactive),
			(troop_set_slot, "trp_town_building_defense", ":offset", ms_flag_already_builded),
		(try_end),
		
		##(party_get_slot, ":center_culture", ":unsieged_party", slot_center_culture),
		##(store_faction_of_party, ":faction", ":unsieged_party"), 
		##(try_begin), 
		##	(eq, ":faction", "fac_kingdom_1"), 
		##	(faction_get_slot, ":volunteer_troop", "fac_kingdom_1", slot_faction_tier_1_troop),
		##(else_try), 
		##	(eq, ":faction", "fac_kingdom_2"), 
		##	(faction_get_slot, ":volunteer_troop", "fac_kingdom_2", slot_faction_tier_1_troop),
		##(else_try), 
		##	(eq, ":faction", "fac_kingdom_3"), 
		##	(faction_get_slot, ":volunteer_troop", "fac_kingdom_3", slot_faction_tier_1_troop),
		##(else_try), 
		##	(eq, ":faction", "fac_kingdom_4"), 
		##	(faction_get_slot, ":volunteer_troop", "fac_kingdom_4", slot_faction_tier_1_troop),
		##(else_try), 
		##	(eq, ":faction", "fac_kingdom_5"), 
		##	(faction_get_slot, ":volunteer_troop", "fac_kingdom_5", slot_faction_tier_1_troop),
		##(else_try), 
		##	(faction_get_slot, ":volunteer_troop", ":center_culture", slot_faction_tier_1_troop),
		##(try_end), 
		
		#(party_count_members_of_type, ":militian_count", ":unsieged_party", ":volunteer_troop"),
		#(party_remove_members, ":unsieged_party", ":volunteer_troop", ":militian_count"),
	]),
			#MS Event triger scripts (slot_ms_script_unsieged)-end	

			#MS Additional menu scripts -begin
	("ms_has_party_additional_menus",
    [	
		(try_begin),
			(party_slot_eq, "$g_encountered_party", slot_party_type, spt_village),
			(assign, ":start_element", ms_village_elements_start),
			(assign, ":end_element", ms_elements_end),
		(else_try),
			(assign, ":start_element", ms_towns_elements_start),
			(assign, ":end_element", ms_village_elements_start),
		(try_end),
		(store_sub, ":offset", "$g_encountered_party", towns_begin),
		(val_add, ":offset", ms_party_has_element_start_slot),
		(call_script, "script_ms_clear_array", "trp_ms_temp_array_additional", 11),
		(assign, ":count", 1),
		(try_for_range, ":temp_element", ":start_element", ":end_element"),
			(neg|troop_slot_eq, ":temp_element", slot_ms_additional_menu, ms_flag_empty),
			(troop_slot_eq, ":temp_element", ":offset", ms_flag_already_builded),
			(troop_get_slot, ":script", ":temp_element", slot_ms_additional_menu_p1),
			(call_script, ":script"),
			(try_begin),
				(ge, reg0, 1),
				(troop_set_slot, "trp_ms_temp_array_additional", ":count", ":temp_element"),
				(val_add, ":count", 1),
			(try_end),			
		(try_end),
		(troop_set_slot, "trp_ms_temp_array_additional", 0, ":count"),
	]),		
	
	("ms_add_check_troop_faction_relations",
    [	
		(store_troop_faction, ":player_faction", "trp_player"),
		(store_faction_of_party, ":party_faction", "$g_encountered_party"),
		(store_relation, ":relation", ":player_faction", ":party_faction"),
		(try_begin), 
			(eq, ":relation", 0),
			(val_add, ":relation", 1), 
		(try_end), 
		(assign, reg0, ":relation"), 
		#(store_relation, reg0, ":player_faction", ":party_faction"),
	]),	
	
	("ms_add_always_true",
    [	
		(assign, reg0, 1),
	]),	
	
	("ms_add_always_false",
    [	
		(assign, reg0, 0),
	]),	
	
	("ms_player_has_any_companion",
    [	
		(assign, "$g_ms_temp", 0),
		(try_for_range, ":cur_npc", companions_begin, companions_end),
			(party_count_companions_of_type, ":count", "p_main_party", ":cur_npc"),
			(try_begin),
				(ge, ":count", 1),
				(assign, "$g_ms_temp", 1),
			(try_end),
		(try_end),
	]),	
	
	("ms_start_npc_study",
    [	
		(remove_member_from_party, "$g_cur_npc", "p_main_party"),		
		(troop_remove_gold, "trp_player", "$g_study_price"),
		(troop_set_slot, "$g_cur_npc", slot_troop_is_studing, 24*7),
		(troop_set_slot, "$g_cur_npc", slot_troop_occupation, slto_at_univesity),
		(troop_set_slot, "$g_cur_npc", slot_troop_studing_profile, "$g_cur_npc_branch"),
		(troop_get_slot, ":count", "$g_cur_npc", slot_troop_studing_count), 
		(val_add, ":count", 1), 
		(troop_set_slot, "$g_cur_npc", slot_troop_studing_count, ":count"), 
		(val_add, "$g_study_count", 1),
	]),		
	
	("ms_check_npc_studing",
    [	
		(try_for_range, ":cur_npc", companions_begin, companions_end),
			(troop_slot_ge, ":cur_npc", slot_troop_is_studing, 1),
			(troop_get_slot, ":wait_time", ":cur_npc", slot_troop_is_studing),
			(try_begin), 
				(eq, debug_mode, 1), 
				(assign, reg0, ":wait_time"),
				(str_store_troop_name, s2, ":cur_npc"), 
				(display_log_message, "@ {s2} stud: {reg0}"), 
			(try_end), 	
			(try_begin),
				(eq, ":wait_time", 1),
				(try_begin),
					(troop_slot_eq, ":cur_npc", slot_troop_studing_profile, ms_flag_medicine),
					(troop_raise_skill, ":cur_npc", skl_surgery, 1),
					(troop_raise_skill, ":cur_npc", skl_first_aid, 1),
					(troop_raise_skill, ":cur_npc", skl_wound_treatment, 1),
					(troop_set_slot, ":cur_npc", slot_troop_studing_medicine, 1),
				(else_try),
					(troop_slot_eq, ":cur_npc", slot_troop_studing_profile, ms_flag_war_work),
					(troop_raise_skill, ":cur_npc", skl_tactics, 1),
					(troop_raise_skill, ":cur_npc", skl_engineer, 1),
					(troop_raise_skill, ":cur_npc", skl_trainer, 1),
					(troop_raise_skill, ":cur_npc", skl_pathfinding, 1),
					(troop_set_slot, ":cur_npc", slot_troop_studing_war_work, 1),
				(else_try),
					(troop_slot_eq, ":cur_npc", slot_troop_studing_profile, ms_flag_war_prepare),
					(troop_raise_skill, ":cur_npc", skl_weapon_master, 1),
					(troop_raise_skill, ":cur_npc", skl_power_draw, 1),
					(troop_raise_skill, ":cur_npc", skl_athletics, 1),
					(troop_raise_skill, ":cur_npc", skl_shield, 1),
					(troop_set_slot, ":cur_npc", slot_troop_studing_war, 1),
				(try_end),
				(troop_set_slot, ":cur_npc", slot_troop_occupation, slto_player_companion),
				(party_force_add_members, "p_main_party", ":cur_npc", 1),
				(str_store_troop_name, s2, ":cur_npc"), 
				(display_log_message, "str_member_finished_studying"),
			(try_end),
			(val_sub, ":wait_time", 1),
			(troop_set_slot, ":cur_npc", slot_troop_is_studing, ":wait_time"),
		(try_end),
	]),	
	
	("ms_get_deposit_percent",
    [	
		(call_script, "script_ms_add_check_troop_faction_relations"),
		(store_mul, ":percent", 20, reg0),
		(val_div, ":percent", 100),
		(val_clamp, ":percent", 14, 101),
		(party_set_slot,  "$g_encountered_party", slot_ms_party_deposit_percent, ":percent"),
		(assign, reg0, ":percent"),
	]),	
	
	("ms_get_credit_percent",
    [	
		(call_script, "script_ms_add_check_troop_faction_relations"),
		(store_mul, ":percent", 20, 50),
		(val_mul, ":percent", 15),
		(val_div, ":percent", 10),
		(val_div, ":percent", reg0),
		(val_clamp, ":percent", 20, 36),
		(party_set_slot,  "$g_encountered_party", slot_ms_party_credit_percent, ":percent"),
		(assign, reg0, ":percent"),
	]),	
	
	("ms_get_deposit_value",
    [	
		(party_get_slot, ":time", "$g_encountered_party", slot_ms_party_operation_time),
		(party_get_slot, ":balance", "$g_encountered_party", slot_ms_party_main_balance),
		(party_get_slot, ":percent", "$g_encountered_party", slot_ms_party_deposit_percent),
		(store_mul, ":percent_value", ":time", ":percent"),
		(val_mul, ":percent_value", ":balance"),
		(val_div, ":percent_value", 3000),
		(val_add, ":balance", ":percent_value"),
		(party_set_slot,  "$g_encountered_party", slot_ms_party_percent_balance, ":balance"),
		(assign, reg0, ":balance"),
	]),	
	
	("ms_get_credit_value",
    [	
		(party_get_slot, ":time", "$g_encountered_party", slot_ms_party_operation_time),
		(party_get_slot, ":balance", "$g_encountered_party", slot_ms_party_main_balance),
		(party_get_slot, ":percent", "$g_encountered_party", slot_ms_party_credit_percent),
		(store_mul, ":percent_value", ":time", ":percent"),
		(val_mul, ":percent_value", ":balance"),
		(val_div, ":percent_value", 700),
		(val_add, ":balance", ":percent_value"),
		(party_set_slot,  "$g_encountered_party", slot_ms_party_percent_balance, ":balance"),
		(assign, reg0, ":balance"),
	]),	
	
	("ms_get_value_with_corrections",
    [	
		(try_begin),
			(eq, "$g_guild_flag", ms_flag_deposit),
			(str_store_string, s0,"@depozita"),
			(store_troop_gold, ":max_depozit_value", "trp_player"),
		(else_try),
			(eq, "$g_guild_flag", ms_flag_credit),
			(str_store_string, s0,"@kredita"),
			(assign, ":max_depozit_value", 1000000),
		(try_end),
		(party_get_slot, ":value", "$g_encountered_party", slot_ms_party_main_balance),
		(store_character_level, ":level", "trp_player"),
		(store_mul, ":max_value", ":level", 350),
		(try_begin), 
			(neq, "$g_guild_flag", ms_flag_credit),
			(assign, ":max_value", ":max_depozit_value"),
		(try_end), 	
		##(try_begin),
		##	(gt, ":max_value", ":value"),
			(val_clamp, ":value", 1000, ":max_value"),
		##(else_try),
		##	(assign, ":value", 4000),
		##(try_end),
		(party_set_slot,  "$g_encountered_party", slot_ms_party_main_balance, ":value"),
		(assign, reg5, ":value"),
	]),	
		
	("ms_correct_balance",
    [	
		(store_script_param, ":change", 1),
		(party_get_slot, ":value", "$g_encountered_party", slot_ms_party_main_balance),
		(val_add, ":value", ":change"),
		(party_set_slot, "$g_encountered_party", slot_ms_party_main_balance, ":value"),
	]),	
	
	("ms_make_deal",
    [	
		(party_set_slot, "$g_encountered_party", slot_ms_party_operation_type, "$g_guild_flag"),
		(party_get_slot, ":value", "$g_encountered_party", slot_ms_party_main_balance),
		(try_begin),
			(eq, "$g_guild_flag", ms_flag_deposit),			
			(troop_remove_gold, "trp_player", ":value"),
		(else_try),
			(eq, "$g_guild_flag", ms_flag_credit),
			(troop_add_gold, "trp_player", ":value"),
		(try_end),
	]),	
		
	("ms_check_deposit_credit",
    [	
		(try_for_range, ":cur_center", ms_parties_start, villages_begin),
			(party_is_active, ":cur_center"),			
			(neg|party_slot_eq, ":cur_center", slot_ms_party_operation_type, ms_flag_none),
			(party_get_slot, ":value", ":cur_center", slot_ms_party_operation_time),
			(val_add, ":value", 1),
			(party_set_slot, ":cur_center", slot_ms_party_operation_time, ":value"),	
		(try_end),
	]),	
	
	("ms_end_deal",
    [	
		(party_get_slot, ":value", "$g_encountered_party", slot_ms_party_percent_balance),
		(try_begin),
			(eq, "$g_guild_flag", ms_flag_deposit),
			(troop_add_gold, "trp_player", ":value"),
		(else_try),
			(eq, "$g_guild_flag", ms_flag_credit),			
			(troop_remove_gold, "trp_player", ":value"),
		(try_end),
		(party_set_slot, "$g_encountered_party", slot_ms_party_operation_type, ms_flag_none),
		(party_set_slot, "$g_encountered_party", slot_ms_party_operation_time, 0),
		(assign, "$g_guild_flag", ms_flag_none),
	]),	
	
	("ms_remove_gold_if_become_as_prisoner",
    [	
		(call_script, "script_ms_get_credit_value"),
		(store_mul, ":gold_to_remove", reg0, 130),
		(val_div, ":gold_to_remove", 100),		
		(troop_remove_gold, "trp_player", ":gold_to_remove"),
	]),	
	
	("ms_fill_category_array",
    [	
		(call_script, "script_ms_clear_array", "trp_ms_temp_array_extra_category", 102),
		(try_begin),
			(eq, "$g_ms_cur_add_menu", "trp_town_upgrade_armourer"),
			(assign, ":start", "str_ms_category_armourer_1"),
			(assign, ":end", "str_ms_category_protection_1"),	
			(str_store_string, s0, "@Zdes vi mozhete zakazat sebe otlichnoe oruzhie"),
			(assign, ":slot", slot_ms_party_armourer_time),
		(else_try),
			(eq, "$g_ms_cur_add_menu", "trp_town_upgrade_protection"),
			(assign, ":start", "str_ms_category_protection_1"),
			(assign, ":end", "str_ms_category_horse_1"),		
			(str_store_string, s0, "@Zdes vi mozhete zakazat sebe otlichnote obmundirovanie"),
			(assign, ":slot", slot_ms_party_protection_time),
		(else_try),
			(eq, "$g_ms_cur_add_menu", "trp_town_upgrade_groom"),
			(assign, ":start", "str_ms_category_horse_1"),
			(assign, ":end", "str_ms_category_end"),		
			(str_store_string, s0, "str_ms_order_for_horse"),
			(assign, ":slot", slot_ms_party_horse_time),
		(try_end),
		(store_add, ":element_slot", ":slot", 1),
		(try_begin),
			(party_slot_eq, "$g_encountered_party", ":slot", ms_flag_none),
			(party_slot_eq, "$g_encountered_party", ":element_slot", ms_flag_none),
			(assign, ":cur_count", 0),
			(try_for_range, ":cur_str", ":start", ":end"),
				(troop_set_slot, "trp_ms_temp_array_extra_category", ":cur_count", ":cur_str"),
				(val_add, ":cur_count", 1),
			(try_end),
		(else_try),
			(party_slot_ge, "$g_encountered_party", ":slot", 1),
			(str_store_string, s1, "@Vash zakaz esche ne gotov"),
			(party_get_slot, ":time", "$g_encountered_party", ":slot"),
			(val_div, ":time", 24), 
			(val_max, ":time", 1), 
			(assign, reg0, ":time"),
			(str_store_string, s0, "str_time_left_forge"),
			(troop_set_slot, "trp_ms_temp_array_extra_category", 101, 1),
		(else_try),
			(party_slot_ge, "$g_encountered_party", ":element_slot", 1),
			(str_store_string, s0, "@Vi esche ne zabrali svoy prediuduschiy zakaz"),
		(try_end),
	]),	
	
	("ms_go_to_category_elements",
    [	
		(store_script_param, ":kind", 1),
		(call_script, "script_ms_clear_array", "trp_ms_temp_extra_category_elements", 101),
		(call_script, "script_ms_clear_array", "trp_ms_temp_extra_category_elements_prices", 101),
		(try_begin),
			(eq, "$g_ms_cur_add_menu", "trp_town_upgrade_armourer"),
			(try_begin),
				(eq, ":kind", 0),
				(troop_set_slot, "trp_ms_temp_extra_category_elements", 1, "itm_zakaz_sabla1"),
				(troop_set_slot, "trp_ms_temp_extra_category_elements_prices", 1, 11000),
				(troop_set_slot, "trp_ms_temp_extra_category_elements", 2, "itm_zakaz_sabla2"),
				(troop_set_slot, "trp_ms_temp_extra_category_elements_prices", 2, 14000),
				(troop_set_slot, "trp_ms_temp_extra_category_elements", 3, "itm_zakaz_spaga"),
				(troop_set_slot, "trp_ms_temp_extra_category_elements_prices", 3, 16000),
				(troop_set_slot, "trp_ms_temp_extra_category_elements", 4, "itm_zakaz_berd"),
				(troop_set_slot, "trp_ms_temp_extra_category_elements_prices", 4, 15000),
				(troop_set_slot, "trp_ms_temp_extra_category_elements", 5, "itm_zakaz_palash"),
				(troop_set_slot, "trp_ms_temp_extra_category_elements_prices", 5, 18000),
				(troop_set_slot, "trp_ms_temp_extra_category_elements", 6, "itm_zakaz_chekan"),
				(troop_set_slot, "trp_ms_temp_extra_category_elements_prices", 6, 20000),
				(troop_set_slot, "trp_ms_temp_extra_category_elements", 7, "itm_zakaz_twohand"),
				(troop_set_slot, "trp_ms_temp_extra_category_elements_prices", 7, 30000),
			(else_try),
				(eq, ":kind", 1),
				(troop_set_slot, "trp_ms_temp_extra_category_elements", 1, "itm_zakaz_pistol1"),
				(troop_set_slot, "trp_ms_temp_extra_category_elements_prices", 1, 12000),
				(troop_set_slot, "trp_ms_temp_extra_category_elements", 2, "itm_zakaz_pistol2"),
				(troop_set_slot, "trp_ms_temp_extra_category_elements_prices", 2, 16000),
				(troop_set_slot, "trp_ms_temp_extra_category_elements", 3, "itm_zakaz_2stwol_koleso"),
				(troop_set_slot, "trp_ms_temp_extra_category_elements_prices", 3, 45000),
				(troop_set_slot, "trp_ms_temp_extra_category_elements", 4, "itm_zakaz_2stwol_udar1"),
				(troop_set_slot, "trp_ms_temp_extra_category_elements_prices", 4, 55000),
				(troop_set_slot, "trp_ms_temp_extra_category_elements", 5, "itm_zakaz_2stwol_udar2"),
				(troop_set_slot, "trp_ms_temp_extra_category_elements_prices", 5, 70000),
				(troop_set_slot, "trp_ms_temp_extra_category_elements", 6, "itm_zakaz_karabin"),
				(troop_set_slot, "trp_ms_temp_extra_category_elements_prices", 6, 15000),
				(troop_set_slot, "trp_ms_temp_extra_category_elements", 7, "itm_zakaz_turok_puha"),
				(troop_set_slot, "trp_ms_temp_extra_category_elements_prices", 7, 25000),
				(troop_set_slot, "trp_ms_temp_extra_category_elements", 8, "itm_zakaz_ewro_puha"),
				(troop_set_slot, "trp_ms_temp_extra_category_elements_prices", 8, 28000),
				(troop_set_slot, "trp_ms_temp_extra_category_elements", 9, "itm_zakaz_luk1"),
				(troop_set_slot, "trp_ms_temp_extra_category_elements_prices", 9, 14000),
				(troop_set_slot, "trp_ms_temp_extra_category_elements", 10, "itm_zakaz_luk2"),
				(troop_set_slot, "trp_ms_temp_extra_category_elements_prices", 10, 25000),
			(try_end),
		(else_try),
			(eq, "$g_ms_cur_add_menu", "trp_town_upgrade_protection"),
			(try_begin),
				(eq, ":kind", 0),
				(troop_set_slot, "trp_ms_temp_extra_category_elements", 1, "itm_zakaz_armet"),
				(troop_set_slot, "trp_ms_temp_extra_category_elements_prices", 1, 45000),
				(troop_set_slot, "trp_ms_temp_extra_category_elements", 2, "itm_zakaz_greben"),
				(troop_set_slot, "trp_ms_temp_extra_category_elements_prices", 2, 35000),
				(troop_set_slot, "trp_ms_temp_extra_category_elements", 3, "itm_zakaz_boyar"),
				(troop_set_slot, "trp_ms_temp_extra_category_elements_prices", 3, 30000),
				(troop_set_slot, "trp_ms_temp_extra_category_elements", 4, "itm_zakaz_morion"),
				(troop_set_slot, "trp_ms_temp_extra_category_elements_prices", 4, 20000),
				(troop_set_slot, "trp_ms_temp_extra_category_elements", 5, "itm_zakaz_reytar_b"),
				(troop_set_slot, "trp_ms_temp_extra_category_elements_prices", 5, 28000),
				(troop_set_slot, "trp_ms_temp_extra_category_elements", 6, "itm_zakaz_helm_tatar"),
				(troop_set_slot, "trp_ms_temp_extra_category_elements_prices", 6, 15000),
			(else_try),
				(eq, ":kind", 1),
				(troop_set_slot, "trp_ms_temp_extra_category_elements", 1, "itm_zakaz_panzer_shkura"),
				(troop_set_slot, "trp_ms_temp_extra_category_elements_prices", 1, 40000),
				(troop_set_slot, "trp_ms_temp_extra_category_elements", 2, "itm_zakaz_laty"),
				(troop_set_slot, "trp_ms_temp_extra_category_elements_prices", 2, 50000),
				(troop_set_slot, "trp_ms_temp_extra_category_elements", 3, "itm_zakaz_zertzalo"),
				(troop_set_slot, "trp_ms_temp_extra_category_elements_prices", 3, 45000),
				(troop_set_slot, "trp_ms_temp_extra_category_elements", 4, "itm_zakaz_ushman"),
				(troop_set_slot, "trp_ms_temp_extra_category_elements_prices", 4, 40000),
				(troop_set_slot, "trp_ms_temp_extra_category_elements", 5, "itm_zakaz_black_lat"),
				(troop_set_slot, "trp_ms_temp_extra_category_elements_prices", 5, 60000),
			(try_end),
		(else_try), 
			(eq, "$g_ms_cur_add_menu", "trp_town_upgrade_groom"),
			(troop_set_slot, "trp_ms_temp_extra_category_elements", 1, "itm_rich_horse_b"),
			(troop_set_slot, "trp_ms_temp_extra_category_elements_prices", 1, 50000),
		(try_end),
		##(store_troop_gold, ":player_gold", "trp_player"),
		##(troop_set_slot, "trp_ms_temp_extra_category_elements", 0, 0),
		##(try_for_range, ":cur_item_ind", 1, 101),
		##	(troop_slot_ge, "trp_ms_temp_extra_category_elements", ":cur_item_ind", 1),
		##	(troop_get_slot, ":temp_item", "trp_ms_temp_extra_category_elements", ":cur_item_ind"), 
		##	(troop_get_slot, ":temp_price", "trp_ms_temp_extra_category_elements_prices", ":cur_item_ind"), 
		##	(try_begin),
		##		(this_or_next|player_has_item, ":temp_item"),
		##		(gt, ":temp_price", ":player_gold"),
		##		(troop_set_slot, "trp_ms_temp_extra_category_elements", ":cur_item_ind", 0),
		##		(troop_set_slot, "trp_ms_temp_extra_category_elements_prices", ":cur_item_ind", 0),
		##	(try_end),
		##	(try_begin),
		##		(troop_slot_ge, "trp_ms_temp_extra_category_elements", ":cur_item_ind", 1),
		##		(troop_set_slot, "trp_ms_temp_extra_category_elements", 0, 1),
		##	(try_end),
		##(try_end),
	]),	
	
	("ms_buy_extra_good",
    [	
		(store_script_param, ":kind", 1),
		(troop_get_slot, ":temp_item", "trp_ms_temp_extra_category_elements", ":kind"), 
		(troop_get_slot, ":temp_price", "trp_ms_temp_extra_category_elements_prices", ":kind"), 
		(call_script, "script_ms_recalculate_extra_price", ":temp_price"),		
		(troop_remove_gold, "trp_player", reg2),
		(try_begin),
			(eq, "$g_ms_cur_add_menu", "trp_town_upgrade_armourer"),
			(assign, ":slot", slot_ms_party_armourer_time),
		(else_try),
			(eq, "$g_ms_cur_add_menu", "trp_town_upgrade_protection"),
			(assign, ":slot", slot_ms_party_protection_time),
		(else_try), 
			(eq, "$g_ms_cur_add_menu", "trp_town_upgrade_groom"),
			(assign, ":slot", slot_ms_party_horse_time),
		(try_end),
		(party_set_slot, "$g_encountered_party", ":slot", 14*24),	
		(val_add, ":slot", 1),
		(party_set_slot, "$g_encountered_party", ":slot", ":temp_item"),	
	]),	
	
	("ms_check_extra_weapon_time",
    [	
		(store_script_param, ":slot", 1),
		(store_add, ":element_slot", ":slot", 1),
		(try_for_range, ":cur_center", towns_begin, villages_begin),
			(neg|party_slot_eq, ":cur_center", ":slot", ms_flag_none),
				(party_get_slot, ":wait_time", ":cur_center", ":slot"),
				(val_sub, ":wait_time", 1),
				(party_set_slot, ":cur_center", ":slot", ":wait_time"),	
				(try_begin),
				(eq, ":wait_time", 0),
				(party_get_slot, ":element", ":cur_center", ":element_slot"),
				(call_script, "script_add_notification_menu", "mnu_notification_extra_good_ready", ":cur_center", ":element"),
			(try_end),
		(try_end),
	]),	
	
	("ms_check_for_any_additional_adviser_menu",
    [	
		(call_script, "script_ms_clear_array", "trp_ms_temp_extra_adviser_menu", 59),
		(assign, ":cur_count", 1),
		(try_for_range, ":cur_center", towns_begin, villages_begin),
			(neg|party_slot_eq, ":cur_center", slot_village_state, svs_under_siege),
            (party_slot_eq, ":cur_center", slot_town_lord, "trp_player"),
			(store_sub, ":offset", ":cur_center", towns_begin),
			(val_add, ":offset", ms_party_has_element_start_slot),
			(try_begin),
				(troop_slot_eq, "trp_town_upgrade_adviser", ":offset", ms_flag_already_builded),
				(troop_set_slot, "trp_ms_temp_extra_adviser_menu", ":cur_count", ":cur_center"),
				(troop_set_slot, "trp_ms_temp_extra_adviser_menu", 0, 1),
				(val_add, ":cur_count", 1),
			(try_end),
		(try_end),
	]),	
	
	("ms_send_adviser",
    [	
		(store_script_param, ":kind", 1),
		(troop_get_slot, "$g_ms_center", "trp_ms_temp_extra_adviser_menu", ":kind"),
		(assign, "$g_next_menu", "mnu_ms_additional_adviser"),
		(store_sub, "$g_ms_offset", "$g_ms_center", towns_begin),
		(val_add, "$g_ms_offset", ms_party_has_element_start_slot),
		(call_script, "script_ms_go_to_view_element_menu", ms_flag_upgrade),
	]),	
	
			#MS Additional menu scripts -end
	#Expanded management system -end
	
	("check_ai_wagenburg",
    [	
		(assign, ":ai_wagenburg", 0),
		(call_script, "script_oim_calculate_battle_advantage"),
		(assign, ":battle_adv", reg0),
		(try_begin), 
			(ge, ":battle_adv", 1),
			(assign, ":ai_wagenburg", 1),
		
			(call_script, "script_get_troops_count_for_party_with_flag", "p_main_party", flag_mounted),
			(assign, ":ally_party_horsed", reg0),
        
			(call_script, "script_get_troops_count_for_party_with_flag", "p_collective_ally", flag_mounted),
			(val_add, ":ally_party_horsed", reg0),
        
			(call_script, "script_get_troops_count_for_party_with_flag", "p_collective_enemy", flag_mounted),
			(assign, ":enemy_party_horsed", reg0),
			
			(call_script, "script_get_troops_count_for_party_with_flag", "p_collective_enemy", flag_horse_archer),
			(assign, ":enemy_party_ha", reg0),

			(call_script, "script_get_troops_count_for_party_with_flag", "p_collective_enemy", flag_ranged),
			(assign, ":enemy_party_ranged", reg0),
			
			#count all fit for battle
			(call_script, "script_party_count_fit_regulars", "p_main_party"),
			(assign, ":ally_count", reg0), 
			(call_script, "script_party_count_fit_regulars", "p_collective_ally"),
			(val_add, ":ally_count", reg0), 
			(call_script, "script_party_count_fit_regulars", "p_collective_enemy"),
			(assign, ":enemy_count", reg0), 

			(val_mul, ":ally_party_horsed", 100),
			(val_mul, ":enemy_party_horsed", 100),
			(val_mul, ":enemy_party_ha", 100),
			(val_mul, ":enemy_party_ranged", 100),

			(val_add, ":ally_party_horsed", 100),
			(val_add, ":enemy_party_horsed", 100),
			(val_add, ":enemy_party_ha", 100),
			(val_add, ":enemy_party_ranged", 100),
			
			(val_add, ":ally_count", 1), 
			(val_add, ":enemy_count", 1), 
			
			(val_div, ":ally_party_horsed", ":ally_count"),
			(val_div, ":enemy_party_horsed", ":enemy_count"),
			(val_div, ":enemy_party_ha", ":enemy_count"),
			(val_div, ":enemy_party_ranged", ":enemy_count"),
			
			(try_begin), 
				(ge, ":enemy_party_ha", 40), 
				(assign, ":ai_wagenburg", 0),
			(try_end), 
		
			(try_begin), 
				(ge, ":enemy_party_horsed", 70), 
				(assign, ":ai_wagenburg", 0),
			(try_end), 
		
			(try_begin), 
				(lt, ":enemy_party_ranged", 50), 
				(assign, ":ai_wagenburg", 0),
			(try_end), 
		
		(try_end), 
		(assign, "$g_ai_wagenburg_is_on", ":ai_wagenburg"),
		#(assign, "$g_ai_wagenburg_is_on", 1),
	]),	
	
	("get_troops_count_for_party_with_flag",
    [
		(store_script_param, ":party", 1),
		(store_script_param, ":flag", 2),
		(assign, ":count", 0),
		(assign, ":no_count", 0),
		(party_get_num_companion_stacks, ":stacks_count", ":party"),
		(try_for_range, ":cur_stack", 0, ":stacks_count"),
			(party_stack_get_troop_id, ":stack_troop", ":party", ":cur_stack"),
			(troop_get_inventory_slot, ":horse", ":stack_troop", 8),
			(assign, ":need_check", 0),
			(try_begin),
				(try_begin),
					(eq, ":flag", flag_horse_archer),
					(troop_is_guarantee_ranged, ":stack_troop"),
					(ge, ":horse", 0),
					(assign, ":need_check", 1),
				(try_end),
				(try_begin),
					(eq, ":flag", flag_mounted),
					(ge, ":horse", 0),
					(assign, ":need_check", 1),
				(try_end),
				(try_begin),
					(eq, ":flag", flag_ranged),
					(troop_is_guarantee_ranged, ":stack_troop"),
					(assign, ":need_check", 1),
				(try_end),
				(party_stack_get_size, ":stack_size", ":party", ":cur_stack"),
				(party_stack_get_num_wounded, ":wounded_count", ":party", ":cur_stack"),
				(val_sub, ":stack_size", ":wounded_count"),
				(try_begin),
					(eq, ":need_check", 1),
					(val_add, ":count", ":stack_size"),
				(else_try),
					(val_add, ":no_count", ":stack_size"),
				(try_end),
			(try_end),
		(try_end),
		(assign, reg0, ":count"),
		(assign, reg1, ":no_count"),
	]),
	
	("ai_wagenburg_start",
    [
		(store_script_param, ":flag", 1),
		(assign, "$g_battle_result", 0),
		(assign, "$g_engaged_enemy", 1),
		(call_script, "script_calculate_renown_value"),
		(call_script, "script_calculate_battle_advantage"),
		(set_battle_advantage, reg0),
		(set_party_battle_mode),
		(try_begin),
			(eq, ":flag", flag_mounted),
			(set_jump_mission,"mt_lead_charge_ai_wagenburg_horsed"),
		(else_try),
			(set_jump_mission,"mt_lead_charge_ai_wagenburg"),
		(try_end),
		(call_script, "script_get_map_for_wagenburg_battle", "$g_encountered_party"),
		(jump_to_scene, reg0),
		(assign, "$g_next_menu", "mnu_simple_encounter"),
		(jump_to_menu, "mnu_battle_debrief"),
		(change_screen_mission),
	]),
	
	("check_diplomatic_capital",
    [
		(try_begin),
			(neg|eq, "$g_diplomatic_capital", -1),
			(assign, ":old_center", "$g_diplomatic_capital"),
			(assign, ":need_to_chose", flag_no),
			(try_begin),
				(faction_slot_eq, "fac_kingdom_2", slot_faction_leader, "trp_player"),
				(assign, ":faction", "fac_kingdom_2"),
				(assign, ":new_center", "p_town_8"),
			(else_try),
				(faction_slot_eq, "fac_kingdom_1", slot_faction_leader, "trp_player"),
				(assign, ":faction", "fac_kingdom_1"),
				(assign, ":new_center", "p_town_6"),
			(else_try),
				(assign, ":faction", 0),
				(assign, ":new_center", 0),
				(assign, "$g_diplomatic_capital", 0),
			(try_end),
			(try_begin),
				(gt, ":faction", 0),
				(store_faction_of_party, ":center_faction", ":new_center"),
				(store_faction_of_party, ":old_faction", ":old_center"),
				(try_begin),
					(this_or_next|party_slot_eq, ":new_center", slot_village_state, svs_under_siege),
					(neg|eq, ":center_faction", ":faction"),
					(this_or_next|eq, ":old_center", 0),
					(neg|eq, ":old_faction", ":faction"),
					(assign, ":need_to_chose", flag_choose),
				(try_end),
				(try_begin),
					(neg|party_slot_eq, ":new_center", slot_village_state, svs_under_siege),
					(eq, ":center_faction", ":faction"),
					(this_or_next|eq, ":new_center", "p_town_8"),
					(eq, ":new_center", "p_town_6"),
					(neg|eq, ":new_center", ":old_center"),
					(assign, ":need_to_chose", flag_notify),
				(try_end),
			(try_end),
			(try_begin),
				(eq, ":need_to_chose", flag_choose),
				(assign, "$g_diplomatic_capital", -1),
				(jump_to_menu, "mnu_messenger_for_capital"),
			(else_try),
				(eq, ":need_to_chose", flag_notify),
				(call_script, "script_add_notification_menu", "mnu_notification_change_diplomatic_capital", ":new_center", "trp_player"),
				(assign, "$g_diplomatic_capital", ":new_center"),
			(try_end),
		(try_end),
	]),
	
	("check_potential_faction_diplomatic_capital",
    [	
		(call_script, "script_ms_clear_array", "trp_diplomatic_array", 19),
		(try_begin),
			(eq, "$g_diplomatic_capital", -1),
			(assign, ":cur_count", 1),
			(try_for_range, ":cur_center", towns_begin, towns_end),
				(store_faction_of_party, ":center_faction", ":cur_center"),
				(try_begin),
					(neg|party_slot_eq, ":cur_center", slot_village_state, svs_under_siege),
					(faction_slot_eq, ":center_faction",  slot_faction_leader, "trp_player"),
					(troop_set_slot, "trp_diplomatic_array", ":cur_count", ":cur_center"),
					(troop_set_slot, "trp_diplomatic_array", 0, 1),
					(val_add, ":cur_count", 1),
				(try_end),
			(try_end),	
		(else_try),
			(troop_set_slot, "trp_diplomatic_array", 0, 2),
		(try_end),
	]),	
	
	("get_ambassador_name_condition",
    [	
		(store_script_param, ":faction", 1),
		(try_begin),
			(this_or_next|faction_slot_eq, ":faction",  slot_faction_leader, "trp_player"),
			(neg|faction_slot_eq, ":faction", slot_faction_state, sfs_active),
			(assign, reg0, 0),
		(else_try),
			(store_sub, ":offset", ":faction", "fac_kingdom_1"),
			(val_add, ":offset", ambassador_start),
			(str_store_troop_name, s0, ":offset"),
			(assign, reg0, 1),
		(try_end),
	]),	
	
	("ambassador_dialog",
    [	
		(store_script_param, ":faction", 1),
		(store_sub, ":offset", ":faction", "fac_kingdom_1"),
		(val_add, ":offset", ambassador_start),
		(assign, "$g_ambassador_dialog", 1),
		(modify_visitors_at_site, "scn_meeting_scene_plain_forest"),
		(reset_visitors),
		(set_visitor,0, "trp_player"),
		(set_visitor,17, ":offset"),
		(assign, "$g_ambassador_dialog", 1),
		(jump_to_scene,"scn_meeting_scene_plain_forest"),
		(change_screen_map_conversation, ":offset"),
	]),	
	
	("check_ambassador_variant",
    [	
		(store_script_param, ":flag", 1),
		(assign, ":opposite_faction", "$g_talk_troop_faction"),
		(try_begin),
			(faction_slot_eq, "fac_kingdom_1",  slot_faction_leader, "trp_player"),
			(assign, ":player_leaded_faction", "fac_kingdom_1"),
		(else_try),
			(assign, ":player_leaded_faction", "fac_kingdom_2"),
		(try_end),
		(store_relation, ":relation", ":player_leaded_faction", ":opposite_faction"),
		(assign, reg0, 0),
		(try_begin),
			(eq, ":flag", flag_peace),
			(le, ":relation", -40),
			(assign, reg0, 1),
		(try_end),
		(try_begin),
			(eq, ":flag", flag_war),
			(gt, ":relation", -40),
			(assign, reg0, 1),
		(try_end),
		(try_begin),
			(eq, ":flag", flag_trade),
			(ge, ":relation", 0),
			(faction_slot_eq, ":opposite_faction", slot_faction_trade_deal, 0),
			(store_troop_gold, ":player_gold", "trp_player"),
			(try_begin),
				(ge, ":player_gold", 4000),
				(assign, reg0, 1),
			(try_end),
		(try_end),
	]),	
		
	("check_peace_condition",
    [	
		(try_begin),
			(faction_slot_eq, "fac_kingdom_1",  slot_faction_leader, "trp_player"),
			(assign, ":player_faction", "fac_kingdom_1"),
		(else_try),
			(assign, ":player_faction", "fac_kingdom_2"),
		(try_end),
		(call_script, "script_faction_recalculate_strength", ":player_faction"),
		(assign, ":player_faction_strength", reg0),
		(assign, ":enemy_factions_strength", 0),
		(assign, ":enemy_factions_count", 0),
		(try_for_range, ":cur_faction", "fac_kingdom_1", fac_kingdoms_end),
			(neg|eq, ":cur_faction", ":player_faction"),
			(faction_slot_eq, ":cur_faction", slot_faction_state, sfs_active),
			(store_relation, ":relation", ":player_faction", ":cur_faction"),
			(try_begin),
				(le, ":relation", -40),
				(call_script, "script_faction_recalculate_strength", ":cur_faction"),
				(val_add, ":enemy_factions_strength", reg0),
				(val_add, ":enemy_factions_count", 1),
			(try_end),
		(try_end),
		(try_begin),
			(gt, ":player_faction_strength", ":enemy_factions_strength"),
			(troop_set_slot, "trp_diplomatic_temp_array", 0, flag_give_nothing),
		(else_try),
			(store_sub, ":opposite_faction", "$g_talk_troop", ambassador_start),
			(val_add, ":opposite_faction", "fac_kingdom_1"),
			(assign, ":cur_count", 1),
			(try_for_range, ":cur_center", towns_begin, towns_end),
				(store_faction_of_party, ":center_faction", ":cur_center"),
				(try_begin),
					(eq, ":center_faction", ":player_faction"),
					(party_slot_eq, ":cur_center", slot_center_original_faction, ":opposite_faction"),
					(troop_set_slot, "trp_diplomatic_temp_array", ":cur_count", ":cur_center"),
					(val_add, ":cur_count", 1),
				(try_end),
			(try_end),	
			(try_begin),
				(eq, ":cur_count", 1),
				(assign, ":nearest_dist", 1000000),
				(try_for_range, ":cur_center", towns_begin, towns_end),
					(store_faction_of_party, ":center_faction", ":cur_center"),
					(eq, ":center_faction", ":player_faction"),
					(try_for_range, ":cur_center_opposite", towns_begin, towns_end),
						(store_faction_of_party, ":center_faction_opposite", ":cur_center_opposite"),
						(eq, ":center_faction_opposite", ":opposite_faction"),
						(store_distance_to_party_from_party, ":distance", ":cur_center", ":cur_center_opposite"),
						(le, ":distance", ":nearest_dist"),
						(assign, ":nearest_dist", ":distance"),
						(troop_set_slot, "trp_diplomatic_temp_array", 1, ":cur_center"),
					(try_end),
				(try_end),	
				(try_begin),
					(le, ":nearest_dist", 12),
					(val_add, ":cur_count", 1),
				(try_end),
			(try_end),
			(try_begin),
				(eq, ":cur_count", 2),
				(troop_set_slot, "trp_diplomatic_temp_array", 0, flag_give_one_town),
			(else_try),
				(gt, ":cur_count", 2),
				(store_random_in_range, ":cur_num", 0, 2),
				(try_begin),
					(eq, ":cur_num", 0),
					(troop_set_slot, "trp_diplomatic_temp_array", 0, flag_give_one_town),
				(else_try),
					(troop_set_slot, "trp_diplomatic_temp_array", 0, flag_give_two_town),
				(try_end),
			(else_try),
				(eq, ":cur_count", 1),
				(troop_set_slot, "trp_diplomatic_temp_array", 0, flag_give_money),
				(store_mul, ":gold", ":enemy_factions_count", 60000), 
				(val_max, ":gold", 120000),
				(troop_set_slot, "trp_diplomatic_temp_array", 1, ":gold"),
			(try_end),
		(try_end),
		(try_begin),
			(troop_slot_eq, "trp_diplomatic_temp_array", 0, flag_give_one_town),
			(troop_get_slot, ":party_1", "trp_diplomatic_temp_array", 1),
			(str_store_party_name, s5, ":party_1"),
			(str_clear, s0),
			(str_store_string, s0,"@Za mir nuzhno budet otdat {s5}."),
		(else_try),
			(troop_slot_eq, "trp_diplomatic_temp_array", 0, flag_give_two_town),
			(troop_get_slot, ":party_1", "trp_diplomatic_temp_array", 1),
			(troop_get_slot, ":party_2", "trp_diplomatic_temp_array", 2),
			(str_store_party_name, s5, ":party_1"),
			(str_store_party_name, s2, ":party_2"),
			(str_store_string, s0,"@Za mir nuzhno budet otdat {s5} i {s2}."),
		(else_try),
			(troop_slot_eq, "trp_diplomatic_temp_array", 0, flag_give_nothing),	
			(str_store_string, s0,"@Uchitivaya silu vashey frakcii protivnik soglasen na mir."),
		(else_try),
			(troop_slot_eq, "trp_diplomatic_temp_array", 0, flag_give_money),	
			(troop_get_slot, reg1, "trp_diplomatic_temp_array", 1),
			(str_store_string, s0,"@Za mir vam nuzhno budet zaplatit {reg1} tallerov."),
		(try_end),
	]),	
	
	
	("ambassador_start_peace",
    [	
		(store_sub, ":opposite_faction", "$g_talk_troop", ambassador_start),
		(val_add, ":opposite_faction", "fac_kingdom_1"),
		(try_begin),
			(faction_slot_eq, "fac_kingdom_1",  slot_faction_leader, "trp_player"),
			(assign, ":player_faction", "fac_kingdom_1"),
		(else_try),
			(assign, ":player_faction", "fac_kingdom_2"),
		(try_end),
		(try_begin),
			(troop_slot_eq, "trp_diplomatic_temp_array", 0, flag_give_one_town),
			(troop_get_slot, ":party_1", "trp_diplomatic_temp_array", 1),
			(call_script, "script_give_center_to_faction", ":party_1", ":opposite_faction"),  
		(else_try),
			(troop_slot_eq, "trp_diplomatic_temp_array", 0, flag_give_two_town),
			(troop_get_slot, ":party_1", "trp_diplomatic_temp_array", 1),
			(troop_get_slot, ":party_2", "trp_diplomatic_temp_array", 2),
			(call_script, "script_give_center_to_faction", ":party_1", ":opposite_faction"),  
			(call_script, "script_give_center_to_faction", ":party_2", ":opposite_faction"),  
		(else_try),
			(troop_slot_eq, "trp_diplomatic_temp_array", 0, flag_give_money),	
			(troop_get_slot, ":gold", "trp_diplomatic_temp_array", 1),			
			(troop_remove_gold, "trp_player", ":gold"),
		(try_end),
		(call_script, "script_diplomacy_start_peace_between_kingdoms", ":player_faction", ":opposite_faction", 1),	  
	]),	
	
	("ambassador_start_war",
    [	
		(store_sub, ":opposite_faction", "$g_talk_troop", ambassador_start),
		(val_add, ":opposite_faction", "fac_kingdom_1"),
		(try_begin),
			(faction_slot_eq, "fac_kingdom_1",  slot_faction_leader, "trp_player"),
			(assign, ":player_faction", "fac_kingdom_1"),
		(else_try),
			(assign, ":player_faction", "fac_kingdom_2"),
		(try_end),
		(call_script, "script_faction_recalculate_strength", ":player_faction"),
		(assign, ":player_faction_strength", reg0),
		(call_script, "script_faction_recalculate_strength", ":opposite_faction"),
		(assign, ":opposite_faction_strength", reg0),
		(assign, ":has_defeated_faction", 0),
		(try_for_range, ":cur_faction", "fac_kingdom_1", fac_kingdoms_end),
			(faction_slot_eq, ":cur_faction", slot_faction_state, sfs_defeated),
			(assign, ":has_defeated_faction", 1),
		(try_end),
		(try_for_range, ":cur_faction", "fac_kingdom_1", fac_kingdoms_end),
			(neg|eq, ":cur_faction", ":player_faction"),
			(neg|eq, ":cur_faction", ":opposite_faction"),
			(faction_slot_eq, ":cur_faction", slot_faction_state, sfs_active),
			(store_relation, ":relation_1", ":player_faction", ":cur_faction"),
			(try_begin),
				(le, ":relation_1", -40),
				(call_script, "script_diplomacy_start_peace_between_kingdoms", ":cur_faction", ":opposite_faction", 1),	  
			(try_end),
			(try_begin),
				(eq, ":has_defeated_faction", 1),
				(store_relation, ":relation_2", ":opposite_faction", ":cur_faction"),
				(try_begin),
					(gt, ":relation_2", -40),
					(call_script, "script_diplomacy_start_war_between_kingdoms", ":cur_faction", ":player_faction", 1),	  
				(try_end),
			(try_end),
			(store_relation, ":relation_1", ":player_faction", ":cur_faction"),
			(try_begin),
				(neg|eq, ":cur_faction", ":opposite_faction"),
				(eq, ":relation_1", 0),
				(call_script, "script_faction_recalculate_strength", ":cur_faction"),
				(assign, ":cur_faction_strength", reg0),
				(store_add, ":sum_strength", ":cur_faction_strength", ":opposite_faction_strength"),
				(try_begin),
					(gt, ":player_faction_strength", ":sum_strength"),
					(assign, ":enemy_factions_strength", ":player_faction_strength"),
					(try_for_range, ":cur_faction_enemy", "fac_kingdom_1", fac_kingdoms_end),
						(neg|eq, ":cur_faction", ":cur_faction_enemy"),
						(faction_slot_eq, ":cur_faction_enemy", slot_faction_state, sfs_active),
						(store_relation, ":relation_3", ":cur_faction_enemy", ":cur_faction"),
						(try_begin),
							(le, ":relation_3", -40),
							(call_script, "script_faction_recalculate_strength", ":cur_faction_enemy"),
							(val_add, ":enemy_factions_strength", reg0),
						(try_end),
					(try_end),
					(try_begin),
						(gt, ":cur_faction_strength", ":enemy_factions_strength"),
						(call_script, "script_diplomacy_start_war_between_kingdoms", ":cur_faction", ":player_faction", 1),	  
					(try_end),
				(try_end),
			(try_end),
		(try_end),
		(call_script, "script_diplomacy_start_war_between_kingdoms", ":player_faction", ":opposite_faction", 1),	  
	]),
	
	("do_trade_deal",
    [	
		(store_sub, ":opposite_faction", "$g_talk_troop", ambassador_start),
		(val_add, ":opposite_faction", "fac_kingdom_1"),		
		(troop_remove_gold, "trp_player", 4000),
		(faction_set_slot, ":opposite_faction", slot_faction_trade_deal, 1),
	]),	
	
	("check_trade_deal",
    [	
		(try_begin),
			(faction_slot_eq, "fac_kingdom_1",  slot_faction_leader, "trp_player"),
			(assign, ":player_faction", "fac_kingdom_1"),
		(else_try),
			(assign, ":player_faction", "fac_kingdom_2"),
		(try_end),
		(try_for_range, ":cur_faction", "fac_kingdom_1", fac_kingdoms_end),
			(neg|eq, ":cur_faction", ":player_faction"),
			(faction_slot_eq, ":cur_faction", slot_faction_trade_deal, 1),
			(store_relation, ":relation", ":player_faction", ":cur_faction"),
			(try_begin),
				(gt, ":relation", 0),
				(troop_add_gold, "trp_player", 2500),
			(else_try),
				(faction_set_slot, ":cur_faction", slot_faction_trade_deal, 0),
			(try_end),
		(try_end),
	]),	
	
	("check_peace_gold",
    [	
		(assign, reg0, 1),
		(try_begin),
			(troop_slot_eq, "trp_diplomatic_temp_array", 0, flag_give_money),
			(troop_get_slot, ":gold", "trp_diplomatic_temp_array", 1),
			(store_troop_gold, ":player_gold", "trp_player"),
			(try_begin),
				(gt, ":gold", ":player_gold"),
				(assign, reg0, 0),
			(try_end),
		(try_end),
											
	]),	
	
	("ms_store_remour_descr_to_s21",
    [	
		(store_sub, ":offset", "$g_encountered_party", towns_begin),
		(val_add, ":offset", ms_party_has_element_start_slot),
                (str_clear, s20),
                (str_clear, s21),
##		(str_store_string, s20, "@ "),
##		(str_store_string, s21, "@ "),
		(call_script, "script_ms_clear_array", "trp_ms_elder_menu_array", 100),
		(assign, ":count", 0),
		(try_for_range, ":temp_element", ms_elenents_start, ms_elements_end),
			(troop_slot_eq, ":temp_element", ":offset", ms_flag_already_builded),
			(troop_set_slot, "trp_ms_elder_menu_array", ":count", ":temp_element"),
			(val_add, ":count", 1),
		(try_end),
		(assign, ":max", ":count"),
		(try_begin),
			(ge, ":max", 1),
			(val_min, ":max", 2),
			(assign, ":prev", -1),
			(try_for_range, ":cur_ind", 0, ":max"),
				(eq, ":cur_ind", ":cur_ind"),
				(store_random_in_range, ":random", 0, ":count"),
				(neg|eq, ":prev", ":random"),
				(troop_get_slot, ":temp_element", "trp_ms_elder_menu_array", ":random"),
			(call_script, "script_ms_get_faction_description_for_element", ":temp_element", ms_flag_remour, "$g_encountered_party"),
			(str_store_string, s20, reg0),
			(str_store_string, s21, "@^{s20} {s21}"),
				(assign, ":prev", ":random"),
			(try_end),
		(try_end),
		(str_clear, s22),
		(try_begin),
            (party_slot_eq, "$g_encountered_party", slot_party_type, spt_town),
            (str_store_string, s22, "@gorode"),
        (else_try),
			(party_slot_eq, "$g_encountered_party", slot_party_type, spt_castle),
            (str_store_string, s22, "@zamke"),
		(else_try),
			(str_store_string, s22, "@sele"),
        (try_end),
        (try_begin),
			(ge, ":count", 1),
			(str_store_string, s21, "@V {s22} hodyat sluhi: {s21}"),
##			(str_store_string, s20, "@ "),
                        (str_clear, s20),
		(else_try),
                        (str_clear, s21),
##			(str_store_string, s21, "@ "),
			(str_store_string, s20, "@V etom {s22} nichego primechatelnogo net"),
		(try_end),
	]),				
	
	("ms_recalculate_extra_price",
    [	
		(store_script_param, ":old_price", 1),
		(store_troop_faction, ":player_faction", "trp_player"),
		(store_faction_of_party, ":party_faction", "$g_encountered_party"),
		(store_relation, ":relation", ":player_faction", ":party_faction"),
		(assign, ":new_price", ":old_price"),
		(try_begin),
			(party_slot_eq, "$g_encountered_party", slot_town_lord, "trp_player"),
			(assign, ":new_price", ":old_price"),
		(else_try),
			(eq, ":player_faction", ":party_faction"),
			(store_mul, ":new_price", ":old_price", 150),
			(val_div, ":new_price", 100),
		(else_try),
			(ge, ":relation", 0),
			(store_mul, ":new_price", ":old_price", 180),
			(val_div, ":new_price", 100),
		(try_end),
		(assign, reg2, ":new_price"),
	]),		
	
	("ms_construct_party_has_arm_buildings",
    [	
		(store_script_param, ":party", 1),
		(store_sub, ":offset", ":party", towns_begin),
		(val_add, ":offset", ms_party_has_element_start_slot),
		(try_begin),
			(troop_slot_eq, "trp_town_building_arsenal", ":offset", ms_flag_already_builded),
			(troop_slot_eq, "trp_town_building_barrack", ":offset", ms_flag_already_builded),
			(assign, reg1, 1),
		(else_try),
			(assign, reg1, 0),
		(try_end),
		(str_store_string, s32, "str_oim_ms_construct_party_has_arm_buildings"),
	]),
	
	("ms_construct_party_has_certain_officer",
    [	
		(store_script_param, ":party", 1),
		(store_script_param, ":send_element", 2),
		(store_script_param, ":slot", 3),
		(val_add, ":slot", 1),
		(troop_get_slot, ":element", ":send_element", ":slot"),
		(val_add, ":slot", 1),
		(troop_get_slot, ":flag", ":send_element", ":slot"),
		(store_sub, ":offset", ":party", towns_begin),
		(val_add, ":offset", ms_party_has_element_start_slot),
		(try_begin),
			(troop_slot_eq, ":element", ":offset", ms_flag_already_builded),
			(assign, reg1, 1),
			(try_begin),
				(eq, ":flag", ms_flag_cavalry),
				(assign, reg1, 0),
				(try_begin),
					(troop_slot_eq, "trp_town_building_stable", ":offset", ms_flag_already_builded),
					(assign, reg1, 1),
				(try_end),
			(try_end),
		(else_try),
			(assign, reg1, 0),
		(try_end),
		(call_script, "script_ms_get_faction_description_for_element_faction", ":element", ms_flag_short, "fac_kingdom_1"), 
		(str_store_string, s30, reg0),
		(str_store_string, s32, "str_oim_ms_construct_party_has_certain_officer"),
	]),
	
	("ms_construct_party_has_certain_officers",
    [	
		(store_script_param, ":party", 1),
		(store_script_param, ":send_element", 2),
		(store_script_param, ":slot", 3),
		(val_add, ":slot", 1),
		(troop_get_slot, ":element_1", ":send_element", ":slot"),
		(val_add, ":slot", 1),
		(troop_get_slot, ":element_2", ":send_element", ":slot"),
		(val_add, ":slot", 1),
		(troop_get_slot, ":flag", ":send_element", ":slot"),
		(store_sub, ":offset", ":party", towns_begin),
		(val_add, ":offset", ms_party_has_element_start_slot),
		(try_begin),
			(troop_slot_eq, ":element_1", ":offset", ms_flag_already_builded),
			(troop_slot_eq, ":element_2", ":offset", ms_flag_already_builded),
			(assign, reg1, 1),
			(try_begin),
				(eq, ":flag", ms_flag_cavalry),
				(assign, reg1, 0),
				(try_begin),
					(troop_slot_eq, "trp_town_building_stable", ":offset", ms_flag_already_builded),
					(assign, reg1, 1),
				(try_end),
			(try_end),
		(else_try),
			(assign, reg1, 0),
		(try_end),
		(call_script, "script_ms_get_faction_description_for_element_faction", ":element_1", ms_flag_short, "fac_kingdom_1"), 
		(str_store_string, s29, reg0),
		(call_script, "script_ms_get_faction_description_for_element_faction", ":element_1", ms_flag_short, "fac_kingdom_1"), 
		(str_store_string, s30, reg0),
		(str_store_string, s32, "str_oim_ms_construct_party_has_certain_officers"),
	]),
	
	("ms_check_for_any_officer",
    [	
		(store_faction_of_party, ":party_faction", "$g_encountered_party"),
		(assign, reg0, 0),
		(try_begin),
			(this_or_next|eq, ":party_faction", "$players_kingdom"),
			(this_or_next|eq, ":party_faction", "$supported_pretender_old_faction"),
			(this_or_next|eq, debug_mode, 1),
			(eq, ":party_faction", "fac_player_faction"),
			(store_sub, ":offset", "$g_encountered_party", towns_begin),
			(val_add, ":offset", ms_party_has_element_start_slot),
			(try_for_range, ":temp_element", "trp_town_upgrade_garrison_commander", "trp_village_building_mill"),
				(troop_slot_eq, ":temp_element", ":offset", ms_flag_already_builded),
				(assign, reg0, 1),
			(try_end),
		(try_end),
	]),
	
	("ms_fill_officer_elements_array_with_faction",
    [	
		(store_faction_of_party, ":party_faction", "$g_encountered_party"),
		(try_begin),
			(eq, ":party_faction", "fac_player_supporters_faction"),
			(assign, ":party_faction", "$supported_pretender_old_faction"),
			(try_begin),
				(eq, ":party_faction", 0),
				(party_get_slot, ":party_faction", "$g_encountered_party", slot_center_original_faction),
			(try_end),
		#(else_try),
		#	(party_get_slot, ":party_faction", "$g_encountered_party", slot_center_original_faction),
		(try_end),
		(call_script, "script_ms_clear_array", "trp_ms_player_officer_elements", 27),
		#(call_script, "script_ms_clear_array", "trp_ms_player_officer_elements_status", 27),
		#(call_script, "script_ms_clear_array", "trp_ms_player_officer_elements_timer", 27),
		(call_script, "script_ms_clear_array", "trp_ms_player_officer_elements_prices", 27),
		(store_sub, ":offset", "$g_encountered_party", towns_begin),
		(val_add, ":offset", ms_party_has_element_start_slot),
		(try_begin),
			(eq, ":party_faction", "fac_kingdom_1"),
			(try_begin),
				(troop_slot_eq, "trp_town_upgrade_garrison_commander", ":offset", ms_flag_already_builded),
				(party_slot_eq, "$g_encountered_party", slot_ms_officer_lower_level_trp, 0),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_lower_lewel_1, "trp_swadian_militia"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_lower_lewel_1, 200),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_lower_lewel_2, "trp_swadian_skirmisher"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_lower_lewel_2, 200),
			(try_end),
			(try_begin),
				(troop_slot_eq, "trp_town_upgrade_officer_infantry", ":offset", ms_flag_already_builded),
				(party_slot_eq, "$g_encountered_party", slot_ms_officer_infantry_trp, 0),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_kostyak_1, "trp_swadian_crossbowman"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_kostyak_1, 200),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_kostyak_2, "trp_swadian_footman"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_kostyak_2, 200),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_militiaman_1, "trp_swadian_recruit"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_militiaman_1, 200),
				(try_begin),
					(this_or_next|eq, "$g_encountered_party", "p_town_7"),
					(this_or_next|eq, "$g_encountered_party", "p_town_16"),
					(this_or_next|eq, "$g_encountered_party", "p_castle_26"),
					(eq, "$g_encountered_party", "p_castle_13"),
					(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_region_1, "trp_reestrovuy_kozak"),
					(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_region_1, 200),
					(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_region_2, "trp_gorod_kozak"),
					(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_region_2, 200),
				(else_try),
					(this_or_next|eq, "$g_encountered_party", "p_castle_3"),
					(this_or_next|eq, "$g_encountered_party", "p_castle_10"),
					(eq, "$g_encountered_party", "p_town_6"),
					(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_region_1, "trp_litva_musket"),
					(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_region_1, 200),
					(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_region_2, "trp_litva_lipki"),
					(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_region_2, 200),
				(try_end),
			(try_end),
			(try_begin),
				(troop_slot_eq, "trp_town_upgrade_officer_cavalry", ":offset", ms_flag_already_builded),
				(party_slot_eq, "$g_encountered_party", slot_ms_officer_cavalry_trp, 0),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_elementar_cavalry_1, "trp_swadian_man_at_arms"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_elementar_cavalry_1, 200),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_elementar_cavalry_2, "trp_polish_dragoon"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_elementar_cavalry_2, 200),
			(try_end),
			(try_begin),
				(troop_slot_eq, "trp_town_upgrade_officer_infantry_guard", ":offset", ms_flag_already_builded),
				(party_slot_eq, "$g_encountered_party", slot_ms_officer_infantry_guard_trp, 0),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_elite_infantry_1, "trp_swadian_infantry"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_elite_infantry_1, 200),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_elite_infantry_2, "trp_swadian_sharpshooter"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_elite_infantry_2, 200),
			(try_end),
			(try_begin),
				(troop_slot_eq, "trp_town_upgrade_officer_cavalry_guard", ":offset", ms_flag_already_builded),
				(party_slot_eq, "$g_encountered_party", slot_ms_officer_cavalry_guard_trp, 0),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_elite_cavalry_1, "trp_swadian_sergeant"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_elite_cavalry_1, 200),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_elite_cavalry_2, "trp_polish_reytar"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_elite_cavalry_2, 200),
			(try_end),
			(try_begin),
				(troop_slot_eq, "trp_town_upgrade_officer_elite_guard", ":offset", ms_flag_already_builded),
				(party_slot_eq, "$g_encountered_party", slot_ms_officer_elite_guard_trp, 0),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_uniq_1, "trp_swadian_knight"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_uniq_1, 200),
			(try_end),
			(try_begin),
				(troop_slot_eq, "trp_town_upgrade_officer_mercenary", ":offset", ms_flag_already_builded),
				(party_slot_eq, "$g_encountered_party", slot_ms_officer_mercenary_trp, 0),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_mercenary_1, "trp_scott_musket"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_mercenary_1, 200),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_mercenary_2, "trp_scott_pika"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_mercenary_2, 200),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_mercenary_3, "trp_scott_sword"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_mercenary_3, 200),
			(try_end),
		(else_try),
			(eq, ":party_faction", "fac_kingdom_2"),
			(try_begin),
				(troop_slot_eq, "trp_town_upgrade_garrison_commander", ":offset", ms_flag_already_builded),
				(party_slot_eq, "$g_encountered_party", slot_ms_officer_lower_level_trp, 0),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_lower_lewel_1, "trp_vaegir_skirmisher"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_lower_lewel_1, 200),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_lower_lewel_2, "trp_vaegir_footman"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_lower_lewel_2, 200),
			(try_end),
			(try_begin),
				(troop_slot_eq, "trp_town_upgrade_officer_infantry", ":offset", ms_flag_already_builded),
				(party_slot_eq, "$g_encountered_party", slot_ms_officer_infantry_trp, 0),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_kostyak_1, "trp_vaegir_archer"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_kostyak_1, 200),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_kostyak_2, "trp_vaegir_veteran"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_kostyak_2, 200),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_militiaman_1, "trp_vaegir_recruit"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_militiaman_1, 200),
				(try_begin),
					(this_or_next|eq, "$g_encountered_party", "p_castle_39"),
					(eq, "$g_encountered_party", "p_town_11"),
					(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_region_1, "trp_don_cossack"),
					(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_region_1, 200),
				(try_end),
			(try_end),
			(try_begin),
				(troop_slot_eq, "trp_town_upgrade_officer_cavalry", ":offset", ms_flag_already_builded),
				(party_slot_eq, "$g_encountered_party", slot_ms_officer_cavalry_trp, 0),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_elementar_cavalry_1, "trp_vaegir_horseman"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_elementar_cavalry_1, 200),
			(try_end),
			(try_begin),
				(troop_slot_eq, "trp_town_upgrade_officer_infantry_guard", ":offset", ms_flag_already_builded),
				(party_slot_eq, "$g_encountered_party", slot_ms_officer_infantry_guard_trp, 0),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_elite_infantry_1, "trp_vaegir_infantry"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_elite_infantry_1, 200),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_elite_infantry_2, "trp_vaegir_marksman"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_elite_infantry_2, 200),
			(try_end),
			(try_begin),
				(troop_slot_eq, "trp_town_upgrade_officer_cavalry_guard", ":offset", ms_flag_already_builded),
				(party_slot_eq, "$g_encountered_party", slot_ms_officer_cavalry_guard_trp, 0),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_elite_cavalry_1, "trp_moskow_dragoon"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_elite_cavalry_1, 200),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_elite_cavalry_2, "trp_vaegir_knight"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_elite_cavalry_2, 200),
			(try_end),
			(try_begin),
				(troop_slot_eq, "trp_town_upgrade_officer_elite_guard", ":offset", ms_flag_already_builded),
				(party_slot_eq, "$g_encountered_party", slot_ms_officer_elite_guard_trp, 0),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_uniq_1, "trp_vaegir_guard"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_uniq_1, 200),
			(try_end),
			(try_begin),
				(troop_slot_eq, "trp_town_upgrade_officer_mercenary", ":offset", ms_flag_already_builded),
				(party_slot_eq, "$g_encountered_party", slot_ms_officer_mercenary_trp, 0),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_mercenary_1, "trp_mosk_kalmyk"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_mercenary_1, 200),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_mercenary_2, "trp_swadian_infantry"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_mercenary_2, 200),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_mercenary_3, "trp_swadian_sharpshooter"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_mercenary_3, 200),
			(try_end),
		(else_try),
			(eq, ":party_faction", "fac_kingdom_3"),
			(try_begin),
				(troop_slot_eq, "trp_town_upgrade_garrison_commander", ":offset", ms_flag_already_builded),
				(party_slot_eq, "$g_encountered_party", slot_ms_officer_lower_level_trp, 0),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_lower_lewel_1, "trp_khergit_skirmisher"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_lower_lewel_1, 200),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_lower_lewel_2, "trp_khergit_horseman"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_lower_lewel_2, 200),
			(try_end),
			(try_begin),
				(troop_slot_eq, "trp_town_upgrade_officer_infantry", ":offset", ms_flag_already_builded),
				(party_slot_eq, "$g_encountered_party", slot_ms_officer_infantry_trp, 0),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_kostyak_1, "trp_khergit_lancer"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_kostyak_1, 200),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_kostyak_2, "trp_khergit_horse_archer"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_kostyak_2, 200),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_militiaman_1, "trp_khergit_tribesman"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_militiaman_1, 200),
				(try_begin),
					(this_or_next|eq, "$g_encountered_party", "p_castle_39"),
					(eq, "$g_encountered_party", "p_castle_2"),
					(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_region_1, "trp_ttr_nogay"),
					(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_region_1, 200),
				(else_try),
					(this_or_next|eq, "$g_encountered_party", "p_castle_7"),
					(eq, "$g_encountered_party", "p_town_10"),
					(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_region_1, "trp_ttr_cherkes"),
					(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_region_1, 200),
				(try_end),
			(try_end),
			(try_begin),
				(troop_slot_eq, "trp_town_upgrade_officer_infantry_guard", ":offset", ms_flag_already_builded),
				(party_slot_eq, "$g_encountered_party", slot_ms_officer_infantry_guard_trp, 0),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_elite_infantry_1, "trp_saymen"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_elite_infantry_1, 200),
			(try_end),
			(try_begin),
				(troop_slot_eq, "trp_town_upgrade_officer_cavalry_guard", ":offset", ms_flag_already_builded),
				(party_slot_eq, "$g_encountered_party", slot_ms_officer_cavalry_guard_trp, 0),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_elite_cavalry_1, "trp_asak_bey"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_elite_cavalry_1, 200),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_elite_cavalry_2, "trp_khergit_veteran_horse_archer"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_elite_cavalry_2, 200),
			(try_end),
			(try_begin),
				(troop_slot_eq, "trp_town_upgrade_officer_elite_guard", ":offset", ms_flag_already_builded),
				(party_slot_eq, "$g_encountered_party", slot_ms_officer_elite_guard_trp, 0),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_uniq_1, "trp_zyndjirli"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_uniq_1, 200),
			(try_end),
			(try_begin),
				(troop_slot_eq, "trp_town_upgrade_officer_mercenary", ":offset", ms_flag_already_builded),
				(party_slot_eq, "$g_encountered_party", slot_ms_officer_mercenary_trp, 0),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_mercenary_1, "trp_janissar"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_mercenary_1, 200),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_mercenary_2, "trp_basurman_azap"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_mercenary_2, 200),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_mercenary_3, "trp_basurman_jebelu"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_mercenary_3, 200),
			(try_end),
		(else_try),
			(eq, ":party_faction", "fac_kingdom_4"),
			(try_begin),
				(troop_slot_eq, "trp_town_upgrade_garrison_commander", ":offset", ms_flag_already_builded),
				(party_slot_eq, "$g_encountered_party", slot_ms_officer_lower_level_trp, 0),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_lower_lewel_1, "trp_nord_huntsman"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_lower_lewel_1, 200),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_lower_lewel_2, "trp_nord_footman"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_lower_lewel_2, 200),
			(try_end),
			(try_begin),
				(troop_slot_eq, "trp_town_upgrade_officer_infantry", ":offset", ms_flag_already_builded),
				(party_slot_eq, "$g_encountered_party", slot_ms_officer_infantry_trp, 0),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_kostyak_1, "trp_nord_trained_footman"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_kostyak_1, 200),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_kostyak_2, "trp_nord_archer"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_kostyak_2, 200),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_militiaman_1, "trp_nord_recruit"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_militiaman_1, 200),
				(try_begin),
					(this_or_next|eq, "$g_encountered_party", "p_town_1"),
					(eq, "$g_encountered_party", "p_town_12"),
					(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_region_1, "trp_finn_arcebuz"),
					(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_region_1, 200),
				(else_try),
					(this_or_next|eq, "$g_encountered_party", "p_castle_32"),
					(eq, "$g_encountered_party", "p_castle_12"),
					(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_region_1, "trp_merc_reytar"),
					(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_region_1, 200),
					(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_region_2, "trp_pruss_pike"),
					(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_region_2, 200),
				(try_end),
			(try_end),
			(try_begin),
				(troop_slot_eq, "trp_town_upgrade_officer_cavalry", ":offset", ms_flag_already_builded),
				(party_slot_eq, "$g_encountered_party", slot_ms_officer_cavalry_trp, 0),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_elementar_cavalry_1, "trp_nord_warrior"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_elementar_cavalry_1, 200),
			(try_end),
			(try_begin),
				(troop_slot_eq, "trp_town_upgrade_officer_infantry_guard", ":offset", ms_flag_already_builded),
				(party_slot_eq, "$g_encountered_party", slot_ms_officer_infantry_guard_trp, 0),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_elite_infantry_1, "trp_sved_swordmaster"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_elite_infantry_1, 200),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_elite_infantry_2, "trp_nord_veteran_archer"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_elite_infantry_2, 200),
			(try_end),
			(try_begin),
				(troop_slot_eq, "trp_town_upgrade_officer_cavalry_guard", ":offset", ms_flag_already_builded),
				(party_slot_eq, "$g_encountered_party", slot_ms_officer_cavalry_guard_trp, 0),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_elite_cavalry_1, "trp_nord_champion"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_elite_cavalry_1, 200),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_elite_cavalry_2, "trp_sved_lancers"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_elite_cavalry_2, 200),
			(try_end),
			(try_begin),
				(troop_slot_eq, "trp_town_upgrade_officer_elite_guard", ":offset", ms_flag_already_builded),
				(party_slot_eq, "$g_encountered_party", slot_ms_officer_elite_guard_trp, 0),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_uniq_1, "trp_nord_veteran"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_uniq_1, 200),
			(try_end),
			(try_begin),
				(troop_slot_eq, "trp_town_upgrade_officer_mercenary", ":offset", ms_flag_already_builded),
				(party_slot_eq, "$g_encountered_party", slot_ms_officer_mercenary_trp, 0),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_mercenary_1, "trp_scott_musket"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_mercenary_1, 200),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_mercenary_2, "trp_scott_pika"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_mercenary_2, 200),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_mercenary_3, "trp_scott_sword"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_mercenary_3, 200),
			(try_end),
		(else_try),
			(eq, ":party_faction", "fac_kingdom_5"),
			(try_begin),
				(troop_slot_eq, "trp_town_upgrade_garrison_commander", ":offset", ms_flag_already_builded),
				(party_slot_eq, "$g_encountered_party", slot_ms_officer_lower_level_trp, 0),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_lower_lewel_1, "trp_ukr_golota"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_lower_lewel_1, 200),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_lower_lewel_2, "trp_rhodok_spearman"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_lower_lewel_2, 200),
			(try_end),
			(try_begin),
				(troop_slot_eq, "trp_town_upgrade_officer_infantry", ":offset", ms_flag_already_builded),
				(party_slot_eq, "$g_encountered_party", slot_ms_officer_infantry_trp, 0),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_kostyak_1, "trp_rhodok_sergeant"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_kostyak_1, 200),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_kostyak_2, "trp_rhodok_trained_crossbowman"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_kostyak_2, 200),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_militiaman_1, "trp_rhodok_tribesman"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_militiaman_1, 200),
			(try_end),
			(try_begin),
				(troop_slot_eq, "trp_town_upgrade_officer_cavalry", ":offset", ms_flag_already_builded),
				(party_slot_eq, "$g_encountered_party", slot_ms_officer_cavalry_trp, 0),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_elementar_cavalry_1, "trp_rhodok_trained_spearman"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_elementar_cavalry_1, 200),
			(try_end),
			(try_begin),
				(troop_slot_eq, "trp_town_upgrade_officer_infantry_guard", ":offset", ms_flag_already_builded),
				(party_slot_eq, "$g_encountered_party", slot_ms_officer_infantry_guard_trp, 0),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_elite_infantry_1, "trp_rhodok_veteran_spearman"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_elite_infantry_1, 200),
			(try_end),
			(try_begin),
				(troop_slot_eq, "trp_town_upgrade_officer_cavalry_guard", ":offset", ms_flag_already_builded),
				(party_slot_eq, "$g_encountered_party", slot_ms_officer_cavalry_guard_trp, 0),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_elite_cavalry_1, "trp_rhodok_crossbowman"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_elite_cavalry_1, 200),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_elite_cavalry_2, "trp_ukr_storoja"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_elite_cavalry_2, 200),
			(try_end),
			(try_begin),
				(troop_slot_eq, "trp_town_upgrade_officer_elite_guard", ":offset", ms_flag_already_builded),
				(party_slot_eq, "$g_encountered_party", slot_ms_officer_elite_guard_trp, 0),
				(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_uniq_1, "trp_rhodok_veteran_crossbowman"),
				(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_uniq_1, 200),
			(try_end),
			(try_begin),
				(troop_slot_eq, "trp_town_upgrade_officer_mercenary", ":offset", ms_flag_already_builded),
				(party_slot_eq, "$g_encountered_party", slot_ms_officer_mercenary_trp, 0),
				(store_relation, ":relation", "fac_kingdom_5", "fac_kingdom_3"),
				(try_begin),
					(gt, ":relation", -40),
					(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_mercenary_1, "trp_tatar_merc_peh"),
					(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_mercenary_1, 200),
					(troop_set_slot, "trp_ms_player_officer_elements", ms_flag_mercenary_2, "trp_tatar_merc_cav"),
					(troop_set_slot, "trp_ms_player_officer_elements_prices", ms_flag_mercenary_2, 200),
				(try_end),
			(try_end),
		(try_end),
		(troop_set_slot, "trp_ms_player_officer_elements", 101, 0),
		(troop_set_slot, "trp_ms_player_officer_elements", 102, 0),
		(try_for_range, ":cur_slot", 0, 27),
			(troop_slot_ge, "trp_ms_player_officer_elements", ":cur_slot", 1),
			(troop_set_slot, "trp_ms_player_officer_elements", 101, 1),
		(try_end),
		(try_for_range, ":cur_trp_slot", slot_ms_officer_lower_level_trp, slot_ms_officer_lower_level_timer),
			(party_slot_ge, "$g_encountered_party", ":cur_trp_slot", 1),
			(store_add, ":cur_time_slot", ":cur_trp_slot", 7),
			(try_begin),
				(party_slot_eq, "$g_encountered_party", ":cur_time_slot", 0),
				(troop_set_slot, "trp_ms_player_officer_elements", 102, 1),
			(try_end),
		(try_end),
	]),	
	
	("ms_officer_calculate_troop_cost",
    [	
		(assign, "$g_ms_officer_timer", 0),
		(assign, "$g_ms_officer_troop_slot", 0),
		(assign, "$g_ms_officer_troop_price", 0),
		(assign, "$g_ms_officer_max_count", 0),
		(assign, ":troop", 0),
		(assign, ":slot", 0),
		(try_begin),
			(is_between, "$g_ms_officer_slot", ms_flag_lower_lewel_1, ms_flag_kostyak_1),
			(assign, ":slot", slot_ms_officer_lower_level_count),
			(assign, ":troop", "trp_town_upgrade_garrison_commander"),
			(assign, "$g_ms_officer_troop_slot", slot_ms_officer_lower_level_trp),
		(else_try),
			(this_or_next|is_between, "$g_ms_officer_slot", ms_flag_kostyak_1, ms_flag_elementar_cavalry_1),
			(is_between, "$g_ms_officer_slot", ms_flag_region_1, ms_flag_mercenary_1),
			(assign, ":slot", slot_ms_officer_kostyak_count),
			(assign, ":troop", "trp_town_upgrade_officer_infantry"),
			(assign, "$g_ms_officer_troop_slot", slot_ms_officer_infantry_trp),
		(else_try),
			(is_between, "$g_ms_officer_slot", ms_flag_elementar_cavalry_1, ms_flag_elite_infantry_1),
			(assign, ":slot", slot_ms_officer_elementar_cavalry_count),
			(assign, ":troop", "trp_town_upgrade_officer_cavalry"),
			(assign, "$g_ms_officer_troop_slot", slot_ms_officer_cavalry_trp),
		(else_try),
			(is_between, "$g_ms_officer_slot", ms_flag_elite_infantry_1, ms_flag_elite_cavalry_1),
			(assign, ":slot", slot_ms_officer_elite_infantry_count),
			(assign, ":troop", "trp_town_upgrade_officer_infantry_guard"),
			(assign, "$g_ms_officer_troop_slot", slot_ms_officer_infantry_guard_trp),
		(else_try),
			(is_between, "$g_ms_officer_slot", ms_flag_elite_cavalry_1, ms_flag_uniq_1),
			(assign, ":slot", slot_ms_officer_elite_cavalry_count),
			(assign, ":troop", "trp_town_upgrade_officer_cavalry_guard"),
			(assign, "$g_ms_officer_troop_slot", slot_ms_officer_cavalry_guard_trp),
		(else_try),
			(is_between, "$g_ms_officer_slot", ms_flag_uniq_1, ms_flag_region_1),
			(assign, ":slot", slot_ms_officer_uniq_count),
			(assign, ":troop", "trp_town_upgrade_officer_elite_guard"),
			(assign, "$g_ms_officer_troop_slot", slot_ms_officer_elite_guard_trp),
		(else_try),
			(is_between, "$g_ms_officer_slot", ms_flag_mercenary_1, 27),
			(assign, ":slot", slot_ms_officer_mercenary_count),
			(assign, ":troop", "trp_town_upgrade_officer_mercenary"),
			(assign, "$g_ms_officer_troop_slot", slot_ms_officer_mercenary_trp),
		(try_end),
		(assign, ":max_count", 0),
		(store_sub, ":offset",  "$g_encountered_party", towns_begin),
		(val_add, ":offset", ms_party_has_element_start_slot),
		(try_for_range, ":temp_element", ms_elenents_start, ms_elements_end),
			(troop_slot_eq, ":temp_element", ":offset", ms_flag_already_builded),
			(troop_get_slot, ":temp_count", ":temp_element", ":slot"),
			(val_add, ":max_count", ":temp_count"),
		(try_end),
		(try_for_range, ":village_no", villages_begin, villages_end),
			(party_slot_eq, ":village_no", slot_village_bound_center, "$g_encountered_party"),
			(party_get_slot, ":prosperity", ":village_no", slot_town_prosperity),
			(try_begin),
				(gt, ":prosperity", 60),
				(try_begin),
					(this_or_next|eq, ":slot", slot_ms_officer_lower_level_count),
					(this_or_next|eq, ":slot", slot_ms_officer_kostyak_count),
					(eq, ":slot", slot_ms_officer_elementar_cavalry_count),
					(val_add, ":max_count", 1),
				(try_end),
			(try_end),
		(try_end),
		(troop_get_slot, ":troop_no", "trp_ms_player_officer_elements", "$g_ms_officer_slot"),
		(store_character_level, ":wage", ":troop_no"),
        (val_add, ":wage", 3),
        (val_mul, ":wage", ":wage"),
        (val_div, ":wage", 25),
		(try_begin),
			(troop_is_mounted, ":troop_no"),
			(val_mul, ":wage", 5),
			(val_div, ":wage", 3),
		(try_end),
	    (try_begin), 
			(is_between, ":troop_no", mercenary_troops_begin, mercenary_troops_end),
			(val_mul, ":wage", 3),
		(try_end),
		(store_skill_level, ":leadership_level", "skl_leadership", "trp_player"),
		(store_mul, ":leadership_bonus", 5, ":leadership_level"),
		(store_sub, ":leadership_factor", 100, ":leadership_bonus"), 
		(val_mul, ":wage", ":leadership_factor"),
		(val_div, ":wage", 100),
		(val_max, ":wage", 1),
		(val_mul, ":wage", 2),
		(troop_set_slot, "trp_ms_player_officer_elements_prices", "$g_ms_officer_slot", ":wage"),
		(troop_get_slot, "$g_ms_officer_troop_price", "trp_ms_player_officer_elements_prices", "$g_ms_officer_slot"), #delete upper code if you want to use custom prices
		(store_troop_gold, ":player_gold", "trp_player"),
		(store_div, ":maximum", ":player_gold", "$g_ms_officer_troop_price"),
		(val_min, ":max_count", ":maximum"),
		(assign, "$g_ms_officer_max_count", ":max_count"),
		(val_add, ":slot", 9),
		(troop_get_slot, "$g_ms_officer_timer", ":troop", ":slot"),
	]),
	
	("ms_buy_extra_troop",
    [	
		(store_script_param, ":count", 1),
		(store_mul, ":full_price", "$g_ms_officer_troop_price", ":count"),		
		(troop_remove_gold, "trp_player", ":full_price"),
		(troop_get_slot, ":troop_no", "trp_ms_player_officer_elements", "$g_ms_officer_slot"),
		(party_set_slot,  "$g_encountered_party", "$g_ms_officer_troop_slot", ":troop_no"),
		(store_add, ":slot", "$g_ms_officer_troop_slot", 7),
		(party_set_slot,  "$g_encountered_party", ":slot", "$g_ms_officer_timer"),
		(val_add, ":slot", 7),
		(party_set_slot,  "$g_encountered_party", ":slot", ":count"),
		(call_script, "script_ms_init"), 
	]),
	
	("ms_officer_get_troops_to_player_party",
    [	
		(try_for_range, ":cur_trp_slot", slot_ms_officer_lower_level_trp, slot_ms_officer_lower_level_timer),
			(party_slot_ge, "$g_encountered_party", ":cur_trp_slot", 1),
			(store_add, ":cur_time_slot", ":cur_trp_slot", 7),
			(try_begin),
				(party_slot_eq, "$g_encountered_party", ":cur_time_slot", 0),
				(party_get_slot, ":troop", "$g_encountered_party", ":cur_trp_slot"),
				(store_add, ":cur_amount_slot", ":cur_trp_slot", 14),
				(party_get_slot, ":amount", "$g_encountered_party", ":cur_amount_slot"),
				(party_add_members, "p_main_party", ":troop", ":amount"),
				(party_set_slot,  "$g_encountered_party", ":cur_trp_slot", 0),
				(party_set_slot,  "$g_encountered_party", ":cur_time_slot", 0),
				(party_set_slot,  "$g_encountered_party", ":cur_amount_slot", 0),
			(try_end),
		(try_end),
	]),
	
	("ms_fill_ai_officer_troops",
    [	
		(call_script, "script_ms_init"),
		(store_current_day, ":day"), 
		(try_for_parties, ":cur_party"),
			(party_is_active, ":cur_party"),
			#(neg|party_slot_eq, ":cur_party", slot_party_type, spt_village),
			(this_or_next|party_slot_eq, ":cur_party", slot_party_type, spt_kingdom_hero_party),
			(this_or_next|party_slot_eq, ":cur_party", slot_party_type, spt_castle),
			(             party_slot_eq, ":cur_party", slot_party_type, spt_town),
			(neg|eq, ":cur_party", "p_main_party"),
			(store_faction_of_party, ":cur_faction", ":cur_party"),
			(try_begin),
				(eq, ":cur_faction", "fac_player_supporters_faction"),
				(assign, ":cur_faction", "$supported_pretender_old_faction"),
			(try_end),
			(try_begin),
				(neg|is_between, ":cur_faction", "fac_kingdom_1", kingdoms_end),
				(party_get_slot, ":cur_faction", ":cur_party", slot_center_original_faction),
			(try_end),
			(assign, ":tmp_flag", 1), 
			(try_begin),
				(this_or_next|party_slot_eq, ":cur_party", slot_party_type, spt_castle),
				(             party_slot_eq, ":cur_party", slot_party_type, spt_town),
				(try_begin), 
					(neg|party_slot_eq, ":cur_party", slot_center_is_besieged_by, -1),
					(assign, ":tmp_flag", 0), 
				(else_try), 	
					(party_slot_eq, ":cur_party", slot_town_lord, "trp_player"),
					(assign, ":tmp_flag", 0),
				(try_end), 
			(try_end), 
			(assign, ":tmp_flag", 0),
			(try_begin), 
				(party_slot_eq, ":cur_party", slot_party_type, spt_kingdom_hero_party),
				(party_stack_get_troop_id, ":leader_troop", ":cur_party",0),
				(troop_get_slot, ":last_day", ":leader_troop", slot_troop_last_recruting_time),
				(store_sub, ":last_day", ":day", ":last_day"),
				(ge, ":last_day", 3), #lord increases its party once per 3 days
				(troop_set_slot, ":leader_troop", slot_troop_last_recruting_time, ":day"), #I fixed a bug here but is it lastday or day?
				(assign, ":tmp_flag", 1),
			(else_try), 
				(party_get_slot, ":last_day", ":cur_party", slot_center_last_recruting_time),
				(store_sub, ":last_day", ":day", ":last_day"),
				(ge, ":last_day", 4), #city increases its party once per 4 days
				(assign, ":tmp_flag", 1),
				(party_set_slot, ":cur_party", slot_center_last_recruting_time, ":day"), #I fixed a bug here but is it lastday or day?
			(end_try), 
			(try_begin), 
				(party_get_num_companions, ":num_companions", ":cur_party"),
				(le, ":num_companions", 10), 
				(assign, ":tmp_flag", 1),
				(try_begin), 
					(party_slot_eq, ":cur_party", slot_party_type, spt_kingdom_hero_party),
					(party_stack_get_troop_id, ":leader_troop",":cur_party",0),
					(troop_set_slot, ":leader_troop", slot_troop_last_recruting_time, ":day"), #I fixed a bug here but is it lastday or day?
				(else_try), 
					(this_or_next|party_slot_eq, ":cur_party", slot_party_type, spt_castle),
					(             party_slot_eq, ":cur_party", slot_party_type, spt_town),
					(party_set_slot, ":cur_party", slot_center_last_recruting_time, ":day"), #I fixed a bug here but is it lastday or day?
				(end_try), 
			(end_try), 
			(try_begin),
				(party_slot_eq, ":cur_party", slot_party_type, spt_kingdom_hero_party),
				(assign, ":tmp_flag", 0),
				(party_get_attached_to, ":attached_to_party", ":cur_party"),
				(is_between, ":attached_to_party", walled_centers_begin, walled_centers_end),
				(assign, ":tmp_flag", 1),
			(end_try),
			(eq, ":tmp_flag", 1), 
			(assign, ":added_troops", 0),
			(try_begin),
				(is_between, ":cur_faction", "fac_kingdom_1", kingdoms_end),	
				(store_sub, ":offset", ":cur_faction", "fac_kingdom_1"),
				(store_add, ":troop_array", "trp_ms_ai_officer_fac1", ":offset"),
				(party_stack_get_troop_id, ":leader_troop",":cur_party",0),
				(party_get_attached_to, ":attached_to_party", ":cur_party"),

				##(try_begin), 
				##	(eq, debug_mode, 1), 
				##	(eq, ":troop_array", -1), 
				##	(assign, reg0, ":cur_party"), 
				##	(str_store_party_name, s1,  ":cur_party"), 
				##	(assign, reg1, ":leader_troop"), 
				##	(str_store_troop_name, s2,  ":leader_troop"), 
				##	(assign, reg2, ":cur_faction"), 
				##	(display_log_message, "@result: {reg0}, {reg1}, {reg2}, str: {s1}. {s2}"),
				##(try_end), 				
				
				(assign, ":party_is_in_town", 0),
				(try_begin),
					(is_between, ":attached_to_party", centers_begin, centers_end),
					(assign, ":party_is_in_town", ":attached_to_party"),
				(try_end),
				(try_begin),
					(faction_slot_eq, ":cur_faction", slot_faction_leader, ":leader_troop"),
					(this_or_next|party_slot_eq, ":cur_party", slot_party_ai_state, spai_undefined),
					(this_or_next|party_slot_eq, ":cur_party", slot_party_ai_state, spai_holding_center),
					(this_or_next|party_slot_eq, ":cur_party", slot_party_ai_state, spai_recruiting_troops),
					(             party_slot_eq, ":cur_party", slot_party_ai_state, spai_trading_with_town),
					(gt, ":party_is_in_town", 0),
					(assign, ":max_cell_count", 8),
					(assign, ":add_inf_cell", 0),
					(assign, ":add_cav_cell", 2),
					(assign, ":add_merc_cell", 0),
					(assign, ":add_elite_cell", 2),
				(else_try),	
					(faction_slot_eq, ":cur_faction", slot_faction_marshall, ":leader_troop"),
					(this_or_next|party_slot_eq, ":cur_party", slot_party_ai_state, spai_undefined),
					(this_or_next|party_slot_eq, ":cur_party", slot_party_ai_state, spai_holding_center),
					(this_or_next|party_slot_eq, ":cur_party", slot_party_ai_state, spai_recruiting_troops),
					(             party_slot_eq, ":cur_party", slot_party_ai_state, spai_trading_with_town),
					(gt, ":party_is_in_town", 0),
					(assign, ":max_cell_count", 6),
					(assign, ":add_inf_cell", 0),
					(assign, ":add_cav_cell", 1),
					(assign, ":add_merc_cell", 1),
					(assign, ":add_elite_cell", 0),
				#(else_try),
				#	#(is_between, ":leader_troop", "trp_knight_1_1", "trp_kingdom_1_pretender"),
				#	(assign, ":max_cell_count", 5),
				#	(assign, ":add_inf_cell", 0),
				#	(assign, ":add_cav_cell", 1),
				#	(assign, ":add_merc_cell", 1),
				#	(assign, ":add_elite_cell", 0),
				(else_try),
					(party_slot_eq, ":cur_party", slot_party_type, spt_kingdom_hero_party),
					(this_or_next|party_slot_eq, ":cur_party", slot_party_ai_state, spai_undefined),
					(this_or_next|party_slot_eq, ":cur_party", slot_party_ai_state, spai_holding_center),
					(this_or_next|party_slot_eq, ":cur_party", slot_party_ai_state, spai_recruiting_troops),
					(             party_slot_eq, ":cur_party", slot_party_ai_state, spai_trading_with_town),
					(gt, ":party_is_in_town", 0),

					(assign, ":max_cell_count", 4),
					(assign, ":add_inf_cell", 0),
					(assign, ":add_cav_cell", 0),
					(assign, ":add_merc_cell", 0),
					(assign, ":add_elite_cell", 0),
				(else_try),	#for towns and castles code
					(this_or_next|party_slot_eq, ":cur_party", slot_party_type, spt_castle),
					(             party_slot_eq, ":cur_party", slot_party_type, spt_town),
					(party_get_slot, ":prosperity", ":cur_party", slot_town_prosperity),
					(val_div, ":prosperity", 20),
					(try_begin),
						(eq, ":prosperity", 0), #very poor
						(assign, ":max_cell_count", 5),
						(assign, ":add_inf_cell", 0),
						(assign, ":add_cav_cell", 0),
						(assign, ":add_merc_cell", 0),
						(assign, ":add_elite_cell", 0),
					(else_try), 
						(eq, ":prosperity", 1), #poor
						(assign, ":max_cell_count", 5),
						(assign, ":add_inf_cell", 0),
						(assign, ":add_cav_cell", 0),
						(assign, ":add_merc_cell", 0),
						(assign, ":add_elite_cell", 0),
					(else_try), 
						(eq, ":prosperity", 2), #Avg
						(assign, ":max_cell_count", 6),
						(assign, ":add_inf_cell", 0),
						(assign, ":add_cav_cell", 1),
						(assign, ":add_merc_cell", 1),
						(assign, ":add_elite_cell", 0),
					(else_try), 
						(eq, ":prosperity", 3), #Rich
						(assign, ":max_cell_count", 7),
						(assign, ":add_inf_cell", 0),
						(assign, ":add_cav_cell", 1),
						(assign, ":add_merc_cell", 0),
						(assign, ":add_elite_cell", 1),
					(else_try), 
						#Very Rich
						(assign, ":max_cell_count", 8),
						(assign, ":add_inf_cell", 0),
						(assign, ":add_cav_cell", 2),
						(assign, ":add_merc_cell", 0),
						(assign, ":add_elite_cell", 3),
					(try_end), 
				(try_end),
				(assign, ":first_slot", slot_ms_officer_ai_slot_1),
				(store_add, ":last_slot", ":first_slot", ":max_cell_count"),
				(assign, ":count_inf_cells", 0),
				(assign, ":count_cav_cells", 0),
				(assign, ":count_merc_cells", 0),
				(assign, ":count_elite_cells", 0),
				(assign, ":count_uniq_cells", 0),
				(call_script, "script_ms_clear_array", "trp_ms_ai_officer_temp", 200),
				(try_for_range, ":cur_party_slot", ":first_slot", ":last_slot"),
					(party_slot_eq, ":cur_party", ":cur_party_slot", 0),
					(assign, ":is_free", ":cur_party_slot"),
				(else_try),
					(assign, ":trp_1", 0),
					(assign, ":trp_2", 0),
					(assign, ":trp_3", 0),
					(assign, ":trp_1_count", 0),
					(assign, ":trp_2_count", 0),
					(assign, ":trp_3_count", 0),
					(assign, ":amount_1", 0),
					(assign, ":amount_2", 0),
					(assign, ":amount_3", 0),
					(assign, ":is_null_1", 0),
					(assign, ":is_null_2", 0),
					(assign, ":is_null_3", 0),
					(party_get_slot, ":group_slot", ":cur_party", ":cur_party_slot"),
					(troop_get_slot, ":instanse", "trp_ms_ai_officer_temp", ":group_slot"),
					(val_add, ":instanse", 1),
					(store_add, ":next_group_slot", ":group_slot", 2),
					(try_begin),
						(troop_slot_ge, ":troop_array", ":next_group_slot", 1),
						(troop_get_slot, ":trp_1", ":troop_array", ":next_group_slot"),
						(val_add, ":next_group_slot", 1),
						(troop_get_slot, ":need_count_for_one_1", ":troop_array", ":next_group_slot"),
						(store_mul, ":need_count", ":need_count_for_one_1", ":instanse"),
						#(party_count_members_of_type, ":amount_1", ":cur_party", ":trp_1"),
						(call_script, "script_ms_get_troop_count_including_upgrades", ":cur_party", ":trp_1"),
						(assign, ":amount_1", reg0),
						(try_begin),
							(gt, ":need_count", ":amount_1"),
							(store_sub, ":trp_1_count", ":need_count", ":amount_1"),
							(eq, ":need_count_for_one_1", ":trp_1_count"),
							(assign, ":is_null_1", 0),
						(try_end),
					(else_try),
						(assign, ":is_null_1", 1),
					(try_end),
					(store_add, ":next_group_slot", ":group_slot", 4),
					(try_begin),
						(troop_slot_ge, ":troop_array", ":next_group_slot", 1),
						(troop_get_slot, ":trp_2", ":troop_array", ":next_group_slot"),
						(val_add, ":next_group_slot", 1),
						(troop_get_slot, ":need_count_for_one_2", ":troop_array", ":next_group_slot"),
						(store_mul, ":need_count", ":need_count_for_one_2", ":instanse"),
						#(party_count_members_of_type, ":amount_2", ":cur_party", ":trp_2"),
						(call_script, "script_ms_get_troop_count_including_upgrades", ":cur_party", ":trp_2"),
						(assign, ":amount_2", reg0),
						(try_begin),
							(gt, ":need_count", ":amount_2"),
							(store_sub, ":trp_2_count", ":need_count", ":amount_2"),
							(eq, ":need_count_for_one_2", ":trp_2_count"),
							(assign, ":is_null_2", 0),
						(try_end),
					(else_try),
						(assign, ":is_null_2", 1),
					(try_end),
					(store_add, ":next_group_slot", ":group_slot", 6),
					(try_begin),
						(troop_slot_ge, ":troop_array", ":next_group_slot", 1),
						(troop_get_slot, ":trp_3", ":troop_array", ":next_group_slot"),
						(val_add, ":next_group_slot", 1),
						(troop_get_slot, ":need_count_for_one_3", ":troop_array", ":next_group_slot"),
						(store_mul, ":need_count", ":need_count_for_one_3", ":instanse"),
						#(party_count_members_of_type, ":amount_3", ":cur_party", ":trp_3"),
						(call_script, "script_ms_get_troop_count_including_upgrades", ":cur_party", ":trp_3"),
						(assign, ":amount_3", reg0),
						(try_begin),
							(gt, ":need_count", ":amount_3"),
							(store_sub, ":trp_3_count", ":need_count", ":amount_3"),
							(eq, ":need_count_for_one_3", ":trp_3_count"),
							(assign, ":is_null_3", 0),
						(try_end),
					(else_try),
						(assign, ":is_null_3", 1),
					(try_end),
					(try_begin),
						(eq, ":is_null_1", 1),
						(eq, ":is_null_2", 1),
						(eq, ":is_null_3", 1),
						(party_set_slot,  ":cur_party", ":cur_party_slot", 0),
						(assign, ":is_free", ":cur_party_slot"),
					(else_try),
						(eq, ":added_troops", 0),
						(val_sub, ":max_cell_count", 1),
						(troop_set_slot, "trp_ms_ai_officer_temp", ":group_slot", ":instanse"),
						(try_begin),
							(gt, ":trp_1_count", 0),
							(party_add_members, ":cur_party", ":trp_1", ":trp_1_count"),
							(assign, ":added_troops", 1),
						(try_end),
						(try_begin),
							(gt, ":trp_2_count", 0),
							(party_add_members, ":cur_party", ":trp_2", ":trp_2_count"),
							(assign, ":added_troops", 1),
						(try_end),
						(try_begin),
							(gt, ":trp_3_count", 0),
							(party_add_members, ":cur_party", ":trp_3", ":trp_3_count"),
							(assign, ":added_troops", 1),
						(try_end),
						(try_begin),
							(troop_slot_eq, ":troop_array", ":group_slot", ms_flag_troop_infantry),
							(val_add, ":count_inf_cells", 1),
						(else_try),
							(troop_slot_eq, ":troop_array", ":group_slot", ms_flag_troop_cavalry),
							(val_add, ":count_cav_cells", 1),
						(else_try),
							(troop_slot_eq, ":troop_array", ":group_slot", ms_flag_troop_elite_infantry),
							(val_add, ":count_inf_cells", 1),
							(val_add, ":count_elite_cells", 1),
						(else_try),
							(troop_slot_eq, ":troop_array", ":group_slot", ms_flag_troop_elite_cavalry),
							(val_add, ":count_cav_cells", 1),
							(val_add, ":count_elite_cells", 1),
						(else_try),
							(this_or_next|troop_slot_eq, ":troop_array", ":group_slot", ms_flag_troop_mercenary_infantry),
							(troop_slot_eq, ":troop_array", ":group_slot", ms_flag_troop_mercenary_cavalry),
							(val_add, ":count_merc_cells", 1),
						(else_try),
							(troop_slot_eq, ":troop_array", ":group_slot", ms_flag_troop_uniq),
							(val_add, ":count_uniq_cells", 1),	
						(try_end),
					(try_end),
				(try_end),
				(troop_get_slot, ":inf_limit", ":troop_array", slot_ms_inf_limit),
				(try_begin),
					(neg|eq, ":inf_limit", -1),
					(val_add, ":inf_limit", ":add_inf_cell"),
				(try_end),
				(troop_get_slot, ":cav_limit", ":troop_array", slot_ms_kav_limit),
				(try_begin),
					(neg|eq, ":cav_limit", -1),
					(val_add, ":cav_limit", ":add_cav_cell"),
				(try_end),
				(troop_get_slot, ":merc_limit", ":troop_array", slot_ms_merc_limit),
				(try_begin),
					(neg|eq, ":merc_limit", -1),
					(val_add, ":merc_limit", ":add_merc_cell"),
				(try_end),
				(troop_get_slot, ":elite_limit", ":troop_array", slot_ms_elit_limit),
				(try_begin),
					(neg|eq, ":elite_limit", -1),
					(val_add, ":elite_limit", ":add_elite_cell"),
				(try_end),
				(assign, ":uniq_limit", 1),
				(try_begin),
					(gt, ":max_cell_count", 0),
					(try_begin),
						(lt, ":count_uniq_cells", ":uniq_limit"),
						(try_for_range, ":cur_num", 0, 21),
							(store_mul, ":gr_slot", slot_ms_officer_troops_start, ":cur_num"),
							(val_add, ":gr_slot", slot_ms_officer_troops_start),
							(try_begin),
								(troop_slot_eq, ":troop_array", ":gr_slot", ms_flag_troop_uniq),
								(store_add, ":leader_slot",":gr_slot", 1),
								(troop_get_slot, ":leader", ":troop_array", ":leader_slot"),
								(try_begin),
									(ge, ":leader", 0),
									(troop_slot_eq, ":leader", slot_troop_leaded_party, ":cur_party"),
									(val_sub, ":max_cell_count", 1),
									(party_set_slot, ":cur_party", ":is_free", ":gr_slot"),
									(val_add, ":count_uniq_cells", 1),
									(store_add, ":next_trp_slot",":gr_slot", 2),
									(try_begin),
										(troop_slot_ge, ":troop_array", ":next_trp_slot", 1),
										(eq, ":added_troops", 0),
										(troop_get_slot, ":trp_to_add", ":troop_array", ":next_trp_slot"),
										(val_add, ":next_trp_slot", 1),
										(troop_get_slot, ":count_to_add", ":troop_array", ":next_trp_slot"),
										(party_add_members, ":cur_party", ":trp_to_add", ":count_to_add"),
										(assign, ":added_troops", 1),
										(store_add, ":next_trp_slot",":gr_slot", 4),
									(try_end),
									(try_begin),
										(troop_slot_ge, ":troop_array", ":next_trp_slot", 1),
										(eq, ":added_troops", 0),
										(troop_get_slot, ":trp_to_add", ":troop_array", ":next_trp_slot"),
										(val_add, ":next_trp_slot", 1),
										(troop_get_slot, ":count_to_add", ":troop_array", ":next_trp_slot"),
										(party_add_members, ":cur_party", ":trp_to_add", ":count_to_add"),
										(assign, ":added_troops", 1),
										(store_add, ":next_trp_slot",":gr_slot", 6),
									(try_end),
									(try_begin),
										(troop_slot_ge, ":troop_array", ":next_trp_slot", 1),
										(eq, ":added_troops", 0),
										(troop_get_slot, ":trp_to_add", ":troop_array", ":next_trp_slot"),
										(val_add, ":next_trp_slot", 1),
										(troop_get_slot, ":count_to_add", ":troop_array", ":next_trp_slot"),
										(party_add_members, ":cur_party", ":trp_to_add", ":count_to_add"),
										(assign, ":added_troops", 1),
									(try_end),
								(try_end),
							(try_end),
						(try_end),
					(try_end),
				(try_end),
				(try_begin),
					(gt, ":max_cell_count", 0),
					(try_for_range, ":cur_cell_slot_for_groups", ":first_slot", ":last_slot"),
						(party_slot_eq, ":cur_party", ":cur_cell_slot_for_groups", 0),
						(assign, ":inf_possible", 0),
						(assign, ":cav_possible", 0),
						(assign, ":inf_elite_possible", 0),
						(assign, ":cav_elite_possible", 0),
						(assign, ":merc_possible", 0),
						(assign, ":multiplier", 1),
						(assign, ":multiplier_inf_count", 0),
						(assign, ":multiplier_cav_count", 0),
						(assign, ":multiplier_elite_count", 0),
						(assign, ":multiplier_merc_count", 0),
						(try_begin),
							(this_or_next|gt, ":inf_limit", ":count_inf_cells"),		
							(eq, ":inf_limit", -1),		
							(assign, ":inf_possible", 1),
							(troop_get_slot, ":factor", ":troop_array", slot_ms_inf_chance_factor),
							(val_mul, ":multiplier", ":factor"),
							(try_begin),
								(this_or_next|gt, ":elite_limit", ":count_elite_cells"),		
								(eq, ":elite_limit", -1),		
								(assign, ":inf_elite_possible", 1),
								(troop_get_slot, ":factor", ":troop_array", slot_ms_elit_chance_factor),
								(val_mul, ":multiplier", ":factor"),
							(try_end),
						(try_end),
						(try_begin),
							(this_or_next|gt, ":cav_limit", ":count_cav_cells"),		
							(eq, ":cav_limit", -1),		
							(assign, ":cav_possible", 1),
							(troop_get_slot, ":factor", ":troop_array", slot_ms_cav_chance_factor),
							(val_mul, ":multiplier", ":factor"),
							(try_begin),
								(this_or_next|gt, ":elite_limit", ":count_elite_cells"),		
								(eq, ":elite_limit", -1),		
								(assign, ":cav_elite_possible", 1),
								(neg|eq, ":cav_elite_possible", ":inf_elite_possible"),
								(troop_get_slot, ":factor", ":troop_array", slot_ms_elit_chance_factor),
								(val_mul, ":multiplier", ":factor"),
							(try_end),
						(try_end),
						(try_begin),
							(this_or_next|gt, ":merc_limit", ":count_merc_cells"),		
							(eq, ":merc_limit", -1),		
							(assign, ":merc_possible", 1),
							(troop_get_slot, ":factor", ":troop_array", slot_ms_merc_chance_factor),
							(val_mul, ":multiplier", ":factor"),
						(try_end),
						(assign, ":pos", 0),
						(try_begin),
							(eq, ":inf_possible", 1),
							(troop_get_slot, ":factor", ":troop_array", slot_ms_inf_chance_factor),
							(store_div, ":multiplier_inf_count", ":multiplier", ":factor"),
							(store_add, ":upper_pos", ":pos", ":multiplier_inf_count"),
							(try_for_range, ":cur_pos", ":pos", ":upper_pos"),
								(troop_set_slot, "trp_ms_ai_chance_temp", ":cur_pos", ms_flag_troop_infantry),
							(try_end),
							(assign, ":pos", ":upper_pos"),
						(try_end),	
						(try_begin),
							(eq, ":cav_possible", 1),
							(troop_get_slot, ":factor", ":troop_array", slot_ms_cav_chance_factor),
							(store_div, ":multiplier_cav_count", ":multiplier", ":factor"),
							(store_add, ":upper_pos", ":pos", ":multiplier_cav_count"),
							(try_for_range, ":cur_pos", ":pos", ":upper_pos"),
								(troop_set_slot, "trp_ms_ai_chance_temp", ":cur_pos", ms_flag_troop_cavalry),
							(try_end),
							(assign, ":pos", ":upper_pos"),
						(try_end),	
						(try_begin),
							(this_or_next|eq, ":inf_elite_possible", 1),
							(eq, ":cav_elite_possible", 1),
							(troop_get_slot, ":factor", ":troop_array", slot_ms_elit_chance_factor),
							(store_div, ":multiplier_elite_count", ":multiplier", ":factor"),
							(store_add, ":upper_pos", ":pos", ":multiplier_elite_count"),
							(try_for_range, ":cur_pos", ":pos", ":upper_pos"),
								(try_begin),
									(eq, ":inf_elite_possible", 1),
									(eq, ":cav_elite_possible", 1),
									(store_mod, ":koef", ":cur_pos", 2),
									(try_begin),
										(eq, ":koef", 0),
										(troop_set_slot, "trp_ms_ai_chance_temp", ":cur_pos", ms_flag_troop_elite_infantry),
									(else_try),
										(troop_set_slot, "trp_ms_ai_chance_temp", ":cur_pos", ms_flag_troop_elite_cavalry),
									(try_end),
								(else_try),
									(eq, ":inf_elite_possible", 1),
									(troop_set_slot, "trp_ms_ai_chance_temp", ":cur_pos", ms_flag_troop_elite_infantry),
								(else_try),
									(eq, ":cav_elite_possible", 1),
									(troop_set_slot, "trp_ms_ai_chance_temp", ":cur_pos", ms_flag_troop_elite_cavalry),
								(try_end),
							(try_end),
							(assign, ":pos", ":upper_pos"),
						(try_end),	
						(try_begin),
							(eq, ":merc_possible", 1),
							(troop_get_slot, ":factor", ":troop_array", slot_ms_merc_chance_factor),
							(store_div, ":multiplier_merc_count", ":multiplier", ":factor"),
							(store_add, ":upper_pos", ":pos", ":multiplier_merc_count"),
							(try_for_range, ":cur_pos", ":pos", ":upper_pos"),
								(store_mod, ":koef", ":cur_pos", 2),
								(try_begin),
									(eq, ":koef", 0),
									(troop_set_slot, "trp_ms_ai_chance_temp", ":cur_pos", ms_flag_troop_mercenary_infantry),
								(else_try),
									(troop_set_slot, "trp_ms_ai_chance_temp", ":cur_pos", ms_flag_troop_mercenary_cavalry),
								(try_end),
							(try_end),
							(assign, ":pos", ":upper_pos"),
						(try_end),
						(store_random_in_range, ":random_kind", 0, ":pos"),	
						(troop_get_slot, ":troops_kind", "trp_ms_ai_chance_temp", ":random_kind"),
						(assign, ":pos", 0),
						(try_for_range, ":cur_num", 0, 21),
							(store_mul, ":gr_slot", slot_ms_officer_troops_start, ":cur_num"),
							(val_add, ":gr_slot", slot_ms_officer_troops_start),
							(try_begin),
								(troop_slot_eq, ":troop_array", ":gr_slot", ":troops_kind"),
								(troop_set_slot, "trp_ms_ai_chance_temp", ":pos", ":gr_slot"),
								(val_add, ":pos", 1),
							(try_end),
						(try_end),
						(try_begin),
							(gt, ":pos", 0),
							(store_random_in_range, ":rnd_slot", 0, ":pos"),
							(troop_get_slot, ":officer_groupe_kind_slot", "trp_ms_ai_chance_temp", ":rnd_slot"),	
							(val_sub, ":max_cell_count", 1),	
							(assign, reg7, ":max_cell_count"),
							(try_begin),
								(troop_slot_eq, ":troop_array", ":officer_groupe_kind_slot", ms_flag_troop_infantry),
								(val_add, ":count_inf_cells", 1),
							(else_try),
								(troop_slot_eq, ":troop_array", ":officer_groupe_kind_slot", ms_flag_troop_cavalry),
								(val_add, ":count_cav_cells", 1),
							(else_try),
								(troop_slot_eq, ":troop_array", ":officer_groupe_kind_slot", ms_flag_troop_elite_infantry),
								(val_add, ":count_inf_cells", 1),
								(val_add, ":count_elite_cells", 1),
							(else_try),
								(troop_slot_eq, ":troop_array", ":officer_groupe_kind_slot", ms_flag_troop_elite_cavalry),
								(val_add, ":count_cav_cells", 1),
								(val_add, ":count_elite_cells", 1),
							(else_try),
								(this_or_next|troop_slot_eq, ":troop_array", ":officer_groupe_kind_slot", ms_flag_troop_mercenary_infantry),
								(troop_slot_eq, ":troop_array", ":officer_groupe_kind_slot", ms_flag_troop_mercenary_cavalry),
								(val_add, ":count_merc_cells", 1),
							(try_end),
							(party_set_slot, ":cur_party", ":cur_cell_slot_for_groups", ":officer_groupe_kind_slot"),
							(store_add, ":start_slot",":officer_groupe_kind_slot", 2),
							(try_for_range, ":cur_nom", 0, 3),
								(store_mul, ":offset", ":cur_nom", 2),
								(store_add, ":cur_work_slot", ":start_slot", ":offset"),
								(try_begin),
									(troop_slot_ge, ":troop_array", ":cur_work_slot", 1),
									(eq, ":added_troops", 0),
									(troop_get_slot, ":trp_to_add", ":troop_array", ":cur_work_slot"),
									(val_add, ":cur_work_slot", 1),
									(troop_get_slot, ":count_to_add", ":troop_array", ":cur_work_slot"),
									(party_add_members, ":cur_party", ":trp_to_add", ":count_to_add"),
								(try_end),
							(try_end),
							(assign, ":added_troops", 1),
						(try_end),
					(try_end),
				(try_end),
			(try_end),
		(try_end),
	]),
	  
  ##oim_get_guild_master
  ("oim_get_guild_master", 
  [
	(store_script_param, ":unused", 1),
	(assign, reg0, "trp_oim_guild_master"),
  ]), 
  
  ("oim_get_item_base_price", 
  [
	(store_script_param, ":item_no", 1), 
	(store_item_value, ":price", ":item_no"),
	#(item_get_slot, ":price", ":item_no", slot_item_base_price),
	(assign, reg0, ":price"),
  ]), 
	
  ("oim_is_trade_good_availible", 
  [
    (store_script_param, ":town_no", 1),  
	(store_script_param, ":trade_good", 2),  
	
	(party_get_slot, ":merchant", ":town_no", slot_town_merchant), 
	(store_item_kind_count, ":count", ":trade_good", ":merchant"), 
	(assign, reg0, ":count"),
  ]), 	
  
  ("get_relation_between_factions", 
  [
    (store_script_param, ":faction_1", 1),  
	(store_script_param, ":faction_2", 2),  
		
		(try_begin), 
			(eq, ":faction_1", ":faction_2"),
			(assign, reg0, 100), 
		(else_try),
			(store_relation, reg0, ":faction_1", ":faction_2"), 
		(try_end),
  ]),    
  

  ("oim_init_goods_prices", 
  [
	#array_item_prices
	(item_set_slot, "itm_spice", slot_item_base_price, 880),
	(item_set_slot, "itm_salt", slot_item_base_price, 255),
	(item_set_slot, "itm_oil", slot_item_base_price, 450),
	(item_set_slot, "itm_pottery", slot_item_base_price, 100),
	(item_set_slot, "itm_raw_flax", slot_item_base_price, 150),
	(item_set_slot, "itm_linen", slot_item_base_price, 250),
	(item_set_slot, "itm_wool", slot_item_base_price, 130),
	(item_set_slot, "itm_wool_cloth", slot_item_base_price, 250),
	(item_set_slot, "itm_raw_silk", slot_item_base_price, 600),
	(item_set_slot, "itm_raw_dyes", slot_item_base_price, 200),
	(item_set_slot, "itm_velvet", slot_item_base_price, 1025),
	(item_set_slot, "itm_iron", slot_item_base_price, 264),		
	(item_set_slot, "itm_tools", slot_item_base_price, 410),
	(item_set_slot, "itm_raw_leather", slot_item_base_price, 120),
	(item_set_slot, "itm_leatherwork", slot_item_base_price, 220),
	(item_set_slot, "itm_raw_date_fruit", slot_item_base_price, 120),	
	(item_set_slot, "itm_furs", slot_item_base_price, 391),	
	(item_set_slot, "itm_oim_powder", slot_item_base_price, 400),
	(item_set_slot, "itm_oim_alcohol", slot_item_base_price, 350),
	(item_set_slot, "itm_oim_penka", slot_item_base_price, 125),
	(item_set_slot, "itm_oim_tutun", slot_item_base_price, 400),	
	(item_set_slot, "itm_wine", slot_item_base_price, 220),
	(item_set_slot, "itm_ale", slot_item_base_price, 120),
	(item_set_slot, "itm_smoked_fish", slot_item_base_price, 65),
	(item_set_slot, "itm_cheese", slot_item_base_price, 75),
	(item_set_slot, "itm_honey", slot_item_base_price, 220),
	(item_set_slot, "itm_sausages", slot_item_base_price, 85),
	(item_set_slot, "itm_cabbages", slot_item_base_price, 30),
	(item_set_slot, "itm_dried_meat", slot_item_base_price, 85),
	(item_set_slot, "itm_apples", slot_item_base_price, 44),
	(item_set_slot, "itm_raw_grapes", slot_item_base_price, 75),
	(item_set_slot, "itm_raw_olives", slot_item_base_price, 100),
	(item_set_slot, "itm_grain", slot_item_base_price, 30),
	(item_set_slot, "itm_flour", slot_item_base_price, 85),			
	(item_set_slot, "itm_cattle_meat", slot_item_base_price, 80),
	(item_set_slot, "itm_bread", slot_item_base_price, 50),	
	(item_set_slot, "itm_chicken", slot_item_base_price, 95),
	(item_set_slot, "itm_pork", slot_item_base_price, 75),	
	(item_set_slot, "itm_butter", slot_item_base_price, 150),				
  ]), 
    
  ("oim_game_get_item_buy_price_factor",
    [
      (store_script_param_1, ":item_kind_id"),
	  (store_script_param_2, ":town_no"),
      (assign, ":price_factor", 100),
	  (assign, ":encountered_party", "$g_encountered_party"),
	  (assign, "$g_encountered_party", ":town_no"),
	  
      (call_script, "script_get_trade_penalty", ":item_kind_id"),
      (assign, ":trade_penalty", reg0),

      (try_begin),
        (is_between, "$g_encountered_party", centers_begin, centers_end),
        (is_between, ":item_kind_id", trade_goods_begin, trade_goods_end),
        (store_sub, ":item_slot_no", ":item_kind_id", trade_goods_begin),
        (val_add, ":item_slot_no", slot_town_trade_good_prices_begin),
        (party_get_slot, ":price_factor", ":town_no", ":item_slot_no"),
        (val_mul, ":price_factor", 100), #normalize price factor to range 0..100
        (val_div, ":price_factor", average_price_factor),
      (try_end),
      
      (store_add, ":penalty_factor", 100, ":trade_penalty"),
      
      (val_mul, ":price_factor", ":penalty_factor"),
      (val_div, ":price_factor", 100),

	  (assign, "$g_encountered_party", ":encountered_party"),

      (assign, reg0, ":price_factor"),
      #(set_trigger_result, reg0),
  ]),  
  
  
	#oim_change_price_factors
	#arg1 :town_no
	#arg2 :item_no
	#arg3 :count
	#arg4 :flag (1 for selling items, 0 for buying)
	("oim_change_price_factors", 
	[
		(store_script_param, ":town_no", 1),
		(store_script_param, ":trade_item_no", 2),
		(store_script_param, ":count", 3),
		(store_script_param, ":flag", 4),

		(try_for_range, ":unused", 0, ":count"),          
          (store_sub, ":item_slot_no", ":trade_item_no", trade_goods_begin),
          (val_add, ":item_slot_no", slot_town_trade_good_prices_begin),
          (party_get_slot, ":multiplier", ":town_no", ":item_slot_no"),
		  
		  (try_begin),
		    (eq, ":flag", 0),
            (assign, ":multiplier_change", 10), #effect is 40% at big amounts of buying
          (else_try),
		    (assign, ":multiplier_change", 7), #effect is 30% at big amounts of selling
		  (try_end),

		  (store_item_value, ":item_value", ":trade_item_no"),

		  (try_begin),
		    (ge, ":item_value", 100),
		    (store_sub, ":item_value_sub_100", ":item_value", 100),
		    (store_div, ":item_value_sub_100_div_20", ":item_value_sub_100", 20),
		    (val_add, ":multiplier_change", ":item_value_sub_100_div_20"),
		  (try_end),

		  (try_begin),
		    (eq, ":flag", 0),
            (val_add, ":multiplier", ":multiplier_change"), 
          (else_try),
		    (val_sub, ":multiplier", ":multiplier_change"), 
		  (try_end),

		  (val_clamp, ":multiplier", minimum_price_factor, maximum_price_factor),

          (party_set_slot, ":town_no", ":item_slot_no", ":multiplier"),
        (try_end),


		#(try_for_range, ":item_no", trade_goods_begin, trade_goods_end),
		#	(store_sub, ":offset", ":item_no", trade_goods_begin),
		#	(val_add, ":offset", slot_town_trade_good_prices_begin),
		#	(try_begin), 
		#		(eq, ":trade_item_no", ":item_no"), 
		#		(try_begin), 
		#			(eq, ":count", 100),
		#			(assign, ":shift", -10),
		#		(else_try), 
		#			(eq, ":count", 60),
		#			(assign, ":shift", -7),
		#		(else_try), 	
		#			(assign, ":shift", -5),
		#		(end_try),
		#		(try_begin), 
		#			(eq, ":flag", 1), 
		#			(val_mul, ":shift", -1),
		#		(end_try), 			
		#		(call_script, "script_center_change_trade_good_production", ":town_no", ":trade_item_no", ":shift", 0),
		#	(end_try), 	
		#(try_end),
		#(call_script, "script_update_trade_good_prices"),		
	]),
	
	("add_upgrade_to_town", 
	[
		(store_script_param, ":town_no", 1),
		(store_script_param, ":upgrade", 2),
		(store_sub, ":offset",  ":town_no", towns_begin),
		(val_add, ":offset", ms_party_has_element_start_slot),
		(troop_set_slot, ":upgrade", ":offset", ms_flag_already_builded),
	]),
	
	("ms_officer_get_troops_list_to_s5",
    [	
		(str_clear, s2),
		(str_clear, s3),
		(str_clear, s5),
		(assign, ":count", 0),
		(try_for_range, ":cur_trp_slot", slot_ms_officer_lower_level_trp, slot_ms_officer_lower_level_timer),
			(party_slot_ge, "$g_encountered_party", ":cur_trp_slot", 1),
			(store_add, ":cur_time_slot", ":cur_trp_slot", 7),
			(try_begin),
				(party_slot_eq, "$g_encountered_party", ":cur_time_slot", 0),
				(party_get_slot, ":troop", "$g_encountered_party", ":cur_trp_slot"),
				(store_add, ":cur_amount_slot", ":cur_trp_slot", 14),
				(party_get_slot, ":amount", "$g_encountered_party", ":cur_amount_slot"),
				#(party_add_members, "p_main_party", ":troop", ":amount"),
				(str_store_troop_name, s3, ":troop"), 
				(assign, reg1, ":amount"), 
				(try_begin),
					(eq, ":count", 0), 
					(str_store_string, s4, "@{s3}({reg1})"), 
				(else_try), 
					(str_store_string, s4, "@{s4}, {s3}({reg1})"), 
				(try_end), 
				(val_add, ":count", 1),
			(try_end),
		(try_end),
		(try_begin), 
			(ge, ":count", 1), 
			(str_store_string, s5, "str_troops_ready"), 
		(try_end), 
	]),
	
	#party_count_members_of_type
	("ms_get_troop_count_including_upgrades", 
	[
		(store_script_param, ":party_no", 1),
		(store_script_param, ":troop_no", 2),
		(assign, ":result", 0), 
		(party_count_members_of_type, ":result", ":party_no", ":troop_no"),
		(troop_get_upgrade_troop, ":level_up", ":troop_no", 0), 
		(try_begin), 
			(gt, ":level_up", 0), 
			(party_count_members_of_type, ":count", ":party_no", ":level_up"),
			(val_add, ":result", ":count"),
		(try_end), 	
		(troop_get_upgrade_troop, ":level_up", ":troop_no", 1), 
		(try_begin), 
			(gt, ":level_up", 0), 
			(party_count_members_of_type, ":count", ":party_no", ":level_up"),
			(val_add, ":result", ":count"),
		(try_end), 	
		(assign, reg0, ":result"), 	
	]), 

  ("oim_calculate_battle_advantage",
    [
      (call_script, "script_party_count_fit_for_battle", "p_collective_friends"),
      (assign, ":friend_count", reg(0)),
      
      (party_get_skill_level, ":player_party_tactics",  "p_main_party", skl_tactics),
      (party_get_skill_level, ":ally_party_tactics",  "p_collective_friends", skl_tactics),
      (val_max, ":player_party_tactics", ":ally_party_tactics"),
     
      (call_script, "script_party_count_fit_for_battle", "p_collective_enemy"),
      (assign, ":enemy_count", reg(0)),
      
      (party_get_skill_level, ":enemy_party_tactics",  "p_collective_enemy", skl_tactics),
      
      (val_add, ":friend_count", 1),
      (val_add, ":enemy_count", 1),
      
      (try_begin),
        (ge, ":friend_count", ":enemy_count"),
        (val_mul, ":friend_count", 100),
        (store_div, ":ratio", ":friend_count", ":enemy_count"),
        (store_sub, ":raw_advantage", ":ratio", 100),
      (else_try),
        (val_mul, ":enemy_count", 100),
        (store_div, ":ratio", ":enemy_count", ":friend_count"),
        (store_sub, ":raw_advantage", 100, ":ratio"),
      (try_end),
      (val_mul, ":raw_advantage", 2),
      
      (val_mul, ":player_party_tactics", 30),
      (val_mul, ":enemy_party_tactics", 30),
      (val_add, ":raw_advantage", ":player_party_tactics"),
      (val_sub, ":raw_advantage", ":enemy_party_tactics"),
      (val_div, ":raw_advantage", 100),
      
      
      (assign, reg0, ":raw_advantage"),
  ]),
  	
  ("cf_oim_item_cant_use_mounted_to_s5", 
  [
	(store_script_param, ":item_no", 1),
	(str_clear, s5), 
	(try_begin), 
		(this_or_next|eq, ":item_no", "itm_old_pike"),
		(this_or_next|eq, ":item_no", "itm_prosta_pike"),
		(this_or_next|eq, ":item_no", "itm_pika"),
		(this_or_next|eq, ":item_no", "itm_good_pike"),
		(this_or_next|eq, ":item_no", "itm_plotnik_topor"),
		(this_or_next|eq, ":item_no", "itm_twohand_sword"),
		(this_or_next|eq, ":item_no", "itm_twohand_sword_b"),
		(this_or_next|eq, ":item_no", "itm_alebarda"),
		(this_or_next|eq, ":item_no", "itm_berdish"),
		(this_or_next|eq, ":item_no", "itm_berdish_b"),
		(this_or_next|eq, ":item_no", "itm_scott_kleymor_a"),
		(this_or_next|eq, ":item_no", "itm_scott_kleymor_b"),
		(this_or_next|eq, ":item_no", "itm_old_musket"),
		(this_or_next|eq, ":item_no", "itm_old_musket_b"),
		(this_or_next|eq, ":item_no", "itm_musket"),
		(this_or_next|eq, ":item_no", "itm_good_musket"),
		(this_or_next|eq, ":item_no", "itm_turk_musket_fitil_a"),
		(this_or_next|eq, ":item_no", "itm_turk_musket_fitil_b"),
		(this_or_next|eq, ":item_no", "itm_turk_musket_koleso"),
		(this_or_next|eq, ":item_no", "itm_turk_musket"),
		(this_or_next|eq, ":item_no", "itm_turk_musket_b"),
		(this_or_next|eq, ":item_no", "itm_mushket_udarniy"),
		(this_or_next|eq, ":item_no", "itm_mushket_udarniy_b"),
		(this_or_next|eq, ":item_no", "itm_zakaz_ewro_puha"),
		(this_or_next|eq, ":item_no", "itm_zakaz_turok_puha"),
		(this_or_next|eq, ":item_no", "itm_zakaz_berd"),
		(             eq, ":item_no", "itm_zakaz_twohand"),
		(str_store_string, s5, "str_cant_use_mounted"),
	(try_end), 		
   ]), 


	#ms_get_armorer_troop
	("ms_get_armorer_troop", 
	[
		(store_script_param, ":troop_no", 1),
		(store_script_param, ":party_no", 2),
		(party_get_slot, ":party_faction", ":party_no", slot_center_original_faction),
		(try_begin),
			(eq, ":troop_no", "trp_town_upgrade_armourer"),
			(assign, ":result", "trp_weapon_smith_pol"),
		(else_try),
			(eq, ":troop_no", "trp_town_upgrade_protection"),
			(assign, ":result", "trp_armor_smith_pol"),
		(else_try),
			(eq, ":troop_no", "trp_town_upgrade_groom"),
			(assign, ":result", "trp_horse_smith_pol"),
		(try_end),
		(val_sub, ":party_faction", "fac_kingdom_1"),
		(val_add, ":result", ":party_faction"),
		(assign, reg0, ":result"), 	
	]), 

	("ms_get_commander_troop", 
	[
		(store_script_param, ":party", 1),
		(assign, ":result", "trp_castle_cmd_pol"),
		(store_faction_of_party, ":party_faction", ":party"),
		(try_begin),
			(eq, ":party_faction", "fac_player_supporters_faction"),
			(assign, ":party_faction", "$supported_pretender_old_faction"),
			(try_begin),
				(neg|is_between, ":party_faction", "fac_kingdom_1", kingdoms_end),
				(party_get_slot, ":party_faction", ":party", slot_center_original_faction),
			(try_end),
		(try_end),
		(val_sub, ":party_faction", "fac_kingdom_1"),
		(val_add, ":result", ":party_faction"),
		(assign, reg0, ":result"), 	
	]), 
	
	("ms_fill_random_army_template_to_party",
    [	
		(store_script_param, ":cur_party", 1), 
		(store_script_param, ":cur_faction", 2), 
		(store_script_param, ":count_multiplier", 3), 
        (try_begin),
          (is_between, ":cur_faction", "fac_kingdom_1", "fac_kingdoms_end"),     
          (store_sub, ":offset", ":cur_faction", "fac_kingdom_1"),
          (store_add, ":troop_array", "trp_ms_ai_officer_fac1", ":offset"),

          (store_random_in_range, ":random_template_type", ms_flag_troop_infantry, 8), #1,2,3,4,5,6 and 7
		  
          (assign, ":pos", 0),
          (try_for_range, ":cur_num", 0, 21),
            (store_mul, ":gr_slot", slot_ms_officer_troops_start, ":cur_num"),
            (val_add, ":gr_slot", slot_ms_officer_troops_start),
            (try_begin),
              (troop_slot_eq, ":troop_array", ":gr_slot", ":random_template_type"),
              (troop_set_slot, "trp_ms_ai_chance_temp", ":pos", ":gr_slot"),
              (val_add, ":pos", 1),
            (try_end),
          (try_end),
          
		  (try_begin),
            (gt, ":pos", 0),
            (store_random_in_range, ":rnd_slot", 0, ":pos"),
            (troop_get_slot, ":officer_groupe_kind_slot", "trp_ms_ai_chance_temp", ":rnd_slot"),
            (store_add, ":start_slot", ":officer_groupe_kind_slot", 2),
            (try_for_range, ":cur_nom", 0, 3),
              (store_mul, ":offset", ":cur_nom", 2),
              (store_add, ":cur_work_slot", ":start_slot", ":offset"),
              (try_begin),
                (troop_slot_ge, ":troop_array", ":cur_work_slot", 1),
                (troop_get_slot, ":trp_to_add", ":troop_array", ":cur_work_slot"),
                (val_add, ":cur_work_slot", 1),
                (troop_get_slot, ":count_to_add", ":troop_array", ":cur_work_slot"),
				(val_mul, ":count_to_add", ":count_multiplier"),
				(val_div, ":count_to_add", 4),				
                (party_add_members, ":cur_party", ":trp_to_add", ":count_to_add"),
              (try_end),
            (try_end),
          (try_end),
        (try_end),	
	]),

	#ms_init_recruitment_system
	("ms_init_recruitment_system", 
	[
		(store_script_param, ":center_no", 1), 
		(store_script_param, ":set_no", 2), 
		(try_begin), 
			(eq, ":set_no", 1), 
			(call_script, "script_add_upgrade_to_town", ":center_no", "trp_town_building_arsenal"), 
			(call_script, "script_add_upgrade_to_town", ":center_no", "trp_town_building_barrack"), 
			(call_script, "script_add_upgrade_to_town", ":center_no", "trp_town_upgrade_garrison_commander"), 
		(else_try), 
			(eq, ":set_no", 2), 
			(call_script, "script_add_upgrade_to_town", ":center_no", "trp_town_building_arsenal"), 
			(call_script, "script_add_upgrade_to_town", ":center_no", "trp_town_building_barrack"), 
			(call_script, "script_add_upgrade_to_town", ":center_no", "trp_town_upgrade_garrison_commander"), 
			(call_script, "script_add_upgrade_to_town", ":center_no", "trp_town_upgrade_officer_infantry"), 
		(else_try), 
			(eq, ":set_no", 3), 
			(call_script, "script_add_upgrade_to_town", ":center_no", "trp_town_building_arsenal"), 
			(call_script, "script_add_upgrade_to_town", ":center_no", "trp_town_building_barrack"), 
			(call_script, "script_add_upgrade_to_town", ":center_no", "trp_town_building_stable"), 
			(call_script, "script_add_upgrade_to_town", ":center_no", "trp_town_upgrade_garrison_commander"), 
			(call_script, "script_add_upgrade_to_town", ":center_no", "trp_town_upgrade_officer_infantry"), 
			(call_script, "script_add_upgrade_to_town", ":center_no", "trp_town_upgrade_officer_cavalry"), 
		(else_try), 
			(eq, ":set_no", 4), 
			(call_script, "script_add_upgrade_to_town", ":center_no", "trp_town_building_arsenal"), 
			(call_script, "script_add_upgrade_to_town", ":center_no", "trp_town_building_barrack"), 
			(call_script, "script_add_upgrade_to_town", ":center_no", "trp_town_building_stable"), 
			(call_script, "script_add_upgrade_to_town", ":center_no", "trp_town_upgrade_garrison_commander"), 
			(call_script, "script_add_upgrade_to_town", ":center_no", "trp_town_upgrade_officer_infantry"), 
			(call_script, "script_add_upgrade_to_town", ":center_no", "trp_town_upgrade_officer_cavalry"), 
			(call_script, "script_add_upgrade_to_town", ":center_no", "trp_town_upgrade_officer_infantry_guard"), 
		(else_try), 
			(eq, ":set_no", 5), 
			(call_script, "script_add_upgrade_to_town", ":center_no", "trp_town_building_arsenal"), 
			(call_script, "script_add_upgrade_to_town", ":center_no", "trp_town_building_barrack"), 
			(call_script, "script_add_upgrade_to_town", ":center_no", "trp_town_building_stable"), 
			(call_script, "script_add_upgrade_to_town", ":center_no", "trp_town_upgrade_garrison_commander"), 
			(call_script, "script_add_upgrade_to_town", ":center_no", "trp_town_upgrade_officer_infantry"), 
			(call_script, "script_add_upgrade_to_town", ":center_no", "trp_town_upgrade_officer_cavalry"), 
			(call_script, "script_add_upgrade_to_town", ":center_no", "trp_town_upgrade_officer_infantry_guard"), 
			(call_script, "script_add_upgrade_to_town", ":center_no", "trp_town_upgrade_officer_mercenary"), 
		(try_end), 
		
	]), 
	
	("ms_get_deposit_value_of_party",
    [	
		(store_script_param, ":center_no", 1), 
		(party_get_slot, ":time", ":center_no", slot_ms_party_operation_time),
		(party_get_slot, ":balance", ":center_no", slot_ms_party_main_balance),
		(party_get_slot, ":percent", ":center_no", slot_ms_party_deposit_percent),
		(store_mul, ":percent_value", ":time", ":percent"),
		(val_mul, ":percent_value", ":balance"),
		(val_div, ":percent_value", 3000),
		(val_add, ":balance", ":percent_value"),
		(party_set_slot,  ":center_no", slot_ms_party_percent_balance, ":balance"),
		(assign, reg0, ":balance"),
	]),	
	
	("ms_get_credit_value_of_party",
    [	
		(store_script_param, ":center_no", 1), 
		(party_get_slot, ":time", ":center_no", slot_ms_party_operation_time),
		(party_get_slot, ":balance", ":center_no", slot_ms_party_main_balance),
		(party_get_slot, ":percent", ":center_no", slot_ms_party_credit_percent),
		(store_mul, ":percent_value", ":time", ":percent"),
		(val_mul, ":percent_value", ":balance"),
		(val_div, ":percent_value", 700),
		(val_add, ":balance", ":percent_value"),
		(party_set_slot,  ":center_no", slot_ms_party_percent_balance, ":balance"),
		(assign, reg0, ":balance"),
	]),		
	
	("init_products",
	[
		(item_set_slot, "itm_bread", slot_item_food_bonus, 5),
		(item_set_slot, "itm_spice", slot_item_food_bonus, 0), 
		(item_set_slot, "itm_salt", slot_item_food_bonus, 0), 
		(item_set_slot, "itm_oil", slot_item_food_bonus, 0), 
		(item_set_slot, "itm_pottery", slot_item_food_bonus, 0), 
		(item_set_slot, "itm_raw_flax", slot_item_food_bonus, 0), 
		(item_set_slot, "itm_linen", slot_item_food_bonus, 0), 
		(item_set_slot, "itm_wool", slot_item_food_bonus, 0), 
		(item_set_slot, "itm_wool_cloth", slot_item_food_bonus, 0), 
		(item_set_slot, "itm_raw_silk", slot_item_food_bonus, 0), 
		(item_set_slot, "itm_raw_dyes", slot_item_food_bonus, 0), 
		(item_set_slot, "itm_velvet", slot_item_food_bonus, 0), 
		(item_set_slot, "itm_iron", slot_item_food_bonus, 0), 
		(item_set_slot, "itm_tools", slot_item_food_bonus, 0), 
		(item_set_slot, "itm_raw_leather", slot_item_food_bonus, 0), 
		(item_set_slot, "itm_leatherwork", slot_item_food_bonus, 0), 
		(item_set_slot, "itm_raw_date_fruit", slot_item_food_bonus, 0), 
		(item_set_slot, "itm_furs", slot_item_food_bonus, 0), 
		(item_set_slot, "itm_oim_powder", slot_item_food_bonus, 0), 
		(item_set_slot, "itm_oim_alcohol", slot_item_food_bonus, 0), 
		(item_set_slot, "itm_oim_penka", slot_item_food_bonus, 0), 
		(item_set_slot, "itm_oim_tutun", slot_item_food_bonus, 0), 
		(item_set_slot, "itm_wine", slot_item_food_bonus, 5), 
		(item_set_slot, "itm_ale", slot_item_food_bonus, 5), 
		(item_set_slot, "itm_smoked_fish", slot_item_food_bonus, 2), 
		(item_set_slot, "itm_cheese", slot_item_food_bonus, 3), 
		(item_set_slot, "itm_honey", slot_item_food_bonus, 3), 
		(item_set_slot, "itm_sausages", slot_item_food_bonus, 4), 
		(item_set_slot, "itm_cabbages", slot_item_food_bonus, 3), 
		(item_set_slot, "itm_dried_meat", slot_item_food_bonus, 2), 
		(item_set_slot, "itm_apples", slot_item_food_bonus, 3), 
		(item_set_slot, "itm_raw_grapes", slot_item_food_bonus, 2), 
		(item_set_slot, "itm_raw_olives", slot_item_food_bonus, 1), 
		(item_set_slot, "itm_grain", slot_item_food_bonus, 1), 
		(item_set_slot, "itm_flour", slot_item_food_bonus, 1), 
		(item_set_slot, "itm_cattle_meat", slot_item_food_bonus, 2), 
		(item_set_slot, "itm_bread", slot_item_food_bonus, 3), 
		(item_set_slot, "itm_chicken", slot_item_food_bonus, 3), 
		(item_set_slot, "itm_pork", slot_item_food_bonus, 3), 
		#(item_set_slot, "itm_common_food", slot_item_food_bonus, 1), 
		(item_set_slot, "itm_butter", slot_item_food_bonus, 2), 
		(item_set_slot, "itm_siege_supply", slot_item_food_bonus, 0), 
	]), 

	("cf_food_consumption",
	[
	  (eq, "$g_player_is_captive", 0),
	  
	  (party_get_num_companion_stacks, ":num_stacks","p_main_party"),
	  (assign, ":number_of_troops_player_has", 0),
	  
	  (try_for_range, ":i_stack", 0, ":num_stacks"),
	    (party_stack_get_size, ":stack_size","p_main_party",":i_stack"),
		(val_add, ":number_of_troops_player_has", ":stack_size"),
      (try_end),
	  
	  (store_div, ":consumption_amount", ":number_of_troops_player_has", 10), #each 10 men in party eats one food per 6 hour. 
	  
	  (try_begin),
	    (store_mod, ":number_of_troops_player_has_mod_10", ":number_of_troops_player_has", 10),
		(store_random_in_range, ":random_value", 0, ":number_of_troops_player_has_mod_10"), #setting a random election date
		(eq, ":random_value", 0),
		(val_add, ":consumption_amount", 1),
      (try_end),
	  	  
	  (assign, ":no_food_displayed", 0),
	  (try_for_range, ":unused", 0, ":consumption_amount"),
	    (assign, ":available_food", 0),
		
		(try_for_range, ":cur_food", food_begin, food_end),
		  (item_set_slot, ":cur_food", slot_item_is_checked, 0),
		  (call_script, "script_cf_player_has_item_without_modifier", ":cur_food", imod_rotten),
		  (val_add, ":available_food", 1),
		(try_end),
		
		(try_begin),
		  (gt, ":available_food", 0),
		  (store_random_in_range, ":selected_food", 0, ":available_food"),
          (call_script, "script_consume_food", ":selected_food"),
        (else_try),
          (eq, ":no_food_displayed", 0),
          (display_message, "@Party has nothing to eat!", 0xFF0000), 
          (call_script, "script_change_player_party_morale", -3),
          (assign, ":no_food_displayed", 1),
          #NPC companion changes begin
          (try_begin),
		    (call_script, "script_party_count_fit_regulars", "p_main_party"),
			(gt, reg0, 0),
			(call_script, "script_objectionable_action", tmt_egalitarian, "str_men_hungry"),
          (try_end),
          #NPC companion changes end
		(try_end),
	  (try_end),
	]), 
	
	#OiM multiplyer code
	
	# script_mp_clear_squad_info
	# clear squad info
	#MCA: new function
	("mp_clear_squad_info", 
	[		
		(store_script_param, ":player_id", 1), 
		
		#MCA
		#(assign, reg0, ":player_id"),
		#(display_debug_message, "@{!}mp_clear_squad_info for player {reg0}"),
		
		(try_for_range, ":slot_id", slot_player_captain_bot_data_begin, slot_player_captain_bot_data_end),
		  (player_set_slot, ":player_id", ":slot_id", 0),
		(try_end),
	]), 
	
	# script_mp_add_troop
	#MCA: add bot troop
	#returns troop count on reg0
	("mp_add_troop",
	[
		(store_script_param, ":troop_id", 1), 
		(store_script_param, ":player_id", 2),
		(store_script_param, ":add_count", 3),
		
		#MCA 
		#(assign, reg0, ":player_id"),
		#(assign, reg1, ":troop_id"),
		#(assign, reg2, ":add_count"),
		#(display_debug_message, "@{!}add troop  player id: {reg0} troop id: {reg1} count: {reg2}"),
		
		# limit add count by max squad size
		(call_script, "script_multiplayer_get_requested_squad_count", ":player_id"),
		(assign, ":requested_squad_count", reg0),
		(try_begin),
			(eq, "$g_multiplayer_game_type", multiplayer_game_type_captain_battle),
			(store_sub, ":vacancy_count", "$g_multiplayer_squad_size_calc", ":requested_squad_count"),
		(else_try),
			(store_sub, ":vacancy_count", "$g_multiplayer_squad_size", ":requested_squad_count"),
		(try_end),
		(try_begin),
			(gt, ":add_count", ":vacancy_count"),
			(assign, ":add_count", ":vacancy_count"),
		(try_end),
		
		(call_script, "script_mp_get_troop_squad_index_for_player", ":player_id", ":troop_id"),
		(store_add, ":slot_id", reg0, slot_player_captain_bot_data_begin),
		(try_begin),
		  (is_between, ":slot_id", slot_player_captain_bot_data_begin, slot_player_captain_bot_data_end),
		  (player_get_slot, ":cur_troop_type_count", ":player_id", ":slot_id"),	
		  (val_add, ":cur_troop_type_count", ":add_count"),
		  (val_max, ":cur_troop_type_count", 0),
		  (player_set_slot, ":player_id", ":slot_id", ":cur_troop_type_count"),
		  (assign, reg0, ":cur_troop_type_count"),
		(else_try),
		  (assign, reg0, 0),
		(try_end),
	]),
	
	
	# script_mp_ccoop_change_map
	#MCA: change map
	("mp_ccoop_change_map",
	[
		(try_begin),			
			(multiplayer_is_dedicated_server), 

			# random scene
			(store_random_in_range, ":scene_no", multiplayer_scenes_begin, multiplayer_scenes_end),      

			(assign, "$g_multiplayer_selected_map", ":scene_no"),
			(team_set_faction, 0, "$g_multiplayer_next_team_1_faction"),
			(team_set_faction, 1, "$g_multiplayer_next_team_2_faction"),
			(call_script, "script_game_multiplayer_get_game_type_mission_template", "$g_multiplayer_game_type"),
			(start_multiplayer_mission, reg0, "$g_multiplayer_selected_map", 1),
		(else_try),
			(multiplayer_is_server),
			(call_script, "script_game_multiplayer_get_game_type_mission_template", "$g_multiplayer_game_type"),
			(start_multiplayer_mission, reg0, "$g_multiplayer_selected_map", 1),
		(try_end),
	]	
	),
	
	# script_mp_get_player_squad_cost
	# MCA: rewritten
	#output: reg0: total cost of requested (non-spawned troops)  reg1: bot count
	("mp_get_player_squad_cost",  # parameters: 1. player_id 
	[
		(store_script_param, ":player_id", 1), 
		
		(assign, ":total_troops_cost", 0),
		(assign, ":total_bot_count", 0),
		
		(try_for_range, ":slot_id", slot_player_captain_bot_data_begin, slot_player_captain_bot_data_end),
		  (player_get_slot, ":troop_amount", ":player_id", ":slot_id"),
		  (gt, ":troop_amount", 0),
		  (store_sub, ":slot_index", ":slot_id", slot_player_captain_bot_data_begin),
		  (call_script, "script_mp_get_troop_with_squad_index_for_player", ":player_id", ":slot_index"),
		  (assign, ":troop_id", reg0),
		  (call_script, "script_mp_get_player_alive_troop_count", ":player_id", ":troop_id"),
		  (val_sub, ":troop_amount", reg0),
		  (gt, ":troop_amount", 0),
		  (troop_get_slot,  ":troop_cost", ":troop_id", slot_troop_mp_squad_price),
		  (store_mul, ":total_troop_cost", ":troop_cost", ":troop_amount"),
		  (val_add, ":total_troops_cost", ":total_troop_cost"),
		  (val_add, ":total_bot_count", ":troop_amount"),
		(try_end),
		(assign, reg0, ":total_troops_cost"),
		(assign, reg1, ":total_bot_count"),
		
		#(display_debug_message, "@{!}squad cost: {reg0} total squad: {reg1}"),
	]), 
	
	# script_mp_get_player_alive_squad_cost
	# MCA: rewritten
	#output: reg0: total cost of alive (spawned troops)  reg1: bot count
	("mp_get_player_alive_squad_cost",  # parameters: 1. player_id 
	[
		(store_script_param, ":player_id", 1),
		(player_get_team_no, ":player_team", ":player_id"),
		
		(assign, ":total_troops_cost", 0),
		(assign, ":total_bot_count", 0),
		
		(try_for_agents, ":cur_agent"),
			(agent_is_human, ":cur_agent"),
			(agent_is_alive, ":cur_agent"),
			(agent_is_non_player, ":cur_agent"),
			(agent_get_team, ":cur_agent_team", ":cur_agent"),
           
			(eq, ":player_team", ":cur_agent_team"),
			(agent_get_troop_id, ":agent_troop_id", ":cur_agent"),
				
			# if agent belongs to the player
			(agent_get_group, ":agent_group", ":cur_agent"),
			(eq, ":agent_group", ":player_id"),
			(val_add, ":total_bot_count", 1),
			(troop_get_slot,  ":troop_cost", ":agent_troop_id", slot_troop_mp_squad_price),
			(val_add, ":total_troops_cost", ":troop_cost"),
		(try_end),
		
		(assign, reg0, ":total_troops_cost"),
		(assign, reg1, ":total_bot_count"),
	]),
	
	# MCA
	# returns requested bot type count for player team on reg0
	("mp_get_player_requested_troop_count",   # parameters: 1. player_id   2. troop_id
	[
		(store_script_param, ":player_id", 1),
		(store_script_param, ":troop_id", 2),
		
		(call_script, "script_mp_get_troop_squad_index_for_player", ":player_id", ":troop_id"),
		(store_add, ":slot_id", reg0, slot_player_captain_bot_data_begin),
		(try_begin),
		  (is_between, ":slot_id", slot_player_captain_bot_data_begin, slot_player_captain_bot_data_end),
		  (player_get_slot, reg0, ":player_id", ":slot_id"),
		(else_try),
		  (assign, reg0, 0),
		(try_end),
	]),
	
	# script_mp_get_player_alive_troop_count
	# MCA
	# returns alive bot count for player team on reg0
	("mp_get_player_alive_troop_count",   # parameters: 1. player_id   2. troop_id
	[
		(store_script_param, ":player_id", 1),
		(store_script_param, ":troop_id", 2),
		
		(player_get_team_no, ":player_team", ":player_id"),
		
		(assign, ":troop_count", 0),
	
		(try_for_agents, ":cur_agent"),
			(agent_is_human, ":cur_agent"),
			(agent_is_alive, ":cur_agent"),
			(agent_is_non_player, ":cur_agent"),
			(agent_get_team, ":cur_agent_team", ":cur_agent"),
           
			(try_begin),
				(eq, ":player_team", ":cur_agent_team"),
				(agent_get_troop_id, ":agent_troop_id", ":cur_agent"),
				(eq, ":troop_id", ":agent_troop_id"),
				
				# if agent belongs to the player
				(agent_get_group, ":agent_group", ":cur_agent"),
				(eq, ":agent_group", ":player_id"),
				
				(val_add, ":troop_count", 1),
			(try_end),
		(try_end),
		
		(assign, reg0, ":troop_count"),
		
		#MCA
	#	(assign, reg1, ":troop_id"),
	#	(assign, reg2, ":player_id"),
	#	(display_debug_message, "@{!}alive troop ({reg1}) count: {reg0} for player {reg2}"),
	]),
	
	# script_mp_get_player_total_alive_troop_count
	# MCA
	# returns total alive bot count for player team on reg0
	("mp_get_player_total_alive_troop_count",   # parameters: 1. player_id 
	[
		(store_script_param, ":player_id", 1),
		
		(player_get_team_no, ":player_team", ":player_id"),
		
		(assign, ":troop_count", 0),
	
		(try_for_agents, ":cur_agent"),
			(agent_is_human, ":cur_agent"),
			(agent_is_alive, ":cur_agent"),
			(agent_is_non_player, ":cur_agent"),
			(agent_get_team, ":cur_agent_team", ":cur_agent"),
			
			# if agent belongs to the player
			(agent_get_group, ":agent_group", ":cur_agent"),
			(eq, ":agent_group", ":player_id"),
           
			(try_begin),
				(eq, ":player_team", ":cur_agent_team"),				
				(val_add, ":troop_count", 1),
			(try_end),
		(try_end),
		
		(assign, reg0, ":troop_count"),
		
		#MCA
	#	(assign, reg2, ":player_id"),
	#	(display_debug_message, "@{!}total alive troop count: {reg0} for player {reg2}"),
	]),
	
	# script_multiplayer_spawn_player_bot_squad_at_point
	("multiplayer_spawn_player_bot_squad_at_point", 
	[
		(store_script_param, ":player_no", 1),
		(store_script_param, ":player_team", 2),
		(store_script_param, ":point_no", 3),
		
		(try_begin),
			(player_get_gold, ":player_gold", ":player_no"),
			
			(call_script, "script_multiplayer_get_bots_count", ":player_no"),
			(assign, ":max_bot_player_can_have", reg0),
			
			(try_begin),
				(eq, "$g_multiplayer_game_type", multiplayer_game_type_captain_battle),
				(store_sub, ":max_bot_player_can_have", "$g_multiplayer_squad_size_calc", ":max_bot_player_can_have"),
			(else_try),
				(store_sub, ":max_bot_player_can_have", "$g_multiplayer_squad_size", ":max_bot_player_can_have"),
			(try_end),
			
			(try_for_range, ":slot_id", slot_player_captain_bot_data_begin, slot_player_captain_bot_data_end),
				(gt, ":max_bot_player_can_have", 0),
				(store_sub, ":squad_index", ":slot_id", slot_player_captain_bot_data_begin),
				(call_script, "script_mp_get_troop_with_squad_index_for_player", ":player_no", ":squad_index"),
				(assign, ":cur_troop_type", reg0),
				(player_get_slot, ":cur_troop_type_req_count", ":player_no", ":slot_id"),	
				(gt, ":cur_troop_type_req_count", 0),
				(call_script, "script_mp_get_player_alive_troop_count", ":player_no", ":cur_troop_type"),
				(val_sub, ":cur_troop_type_req_count", reg0),
				(gt, ":cur_troop_type_req_count", 0),
				(troop_get_slot,  ":cur_troop_cost", ":cur_troop_type", slot_troop_mp_squad_price),	
				(store_mul, ":total_troop_cost", ":cur_troop_cost", ":cur_troop_type_req_count"),
									
				(try_begin),
					(le, ":total_troop_cost", ":player_gold"),  # then spawn all bots
					(assign, ":spawn_count", ":cur_troop_type_req_count"),
				(else_try),
					(store_div, ":spawn_count", ":player_gold", ":cur_troop_cost"),
					(store_mul, ":total_troop_cost", ":cur_troop_cost", ":spawn_count"),
				(try_end),
				
				(try_begin),
					(lt, ":spawn_count", ":max_bot_player_can_have"), # unnecessary but do it anyways
					(val_sub, ":max_bot_player_can_have", ":spawn_count"),
				(else_try),
					(assign, ":spawn_count", ":max_bot_player_can_have"),
					(assign, ":max_bot_player_can_have", 0),
				(try_end),
		
				(store_current_scene, ":cur_scene"),
				(modify_visitors_at_site, ":cur_scene"),
				(add_visitors_to_current_scene, ":point_no", ":cur_troop_type", ":spawn_count", ":player_team", ":player_no"),
				
				(val_sub, ":player_gold", ":total_troop_cost"),
			(try_end),
			
			(player_set_gold, ":player_no", ":player_gold", multi_max_gold_that_can_be_stored),	
		(try_end),
	]),
	
	("multiplayer_get_spawn_point_close_to_bots",
	[
       (store_script_param, ":player_no", 1), 
	   (player_get_team_no, ":player_team", ":player_no"), 
	   (assign, ":x_pos", 0), 
	   (assign, ":y_pos", 0), 
	   (assign, ":num_living_players", 0),
	   (try_for_agents, ":agent_no"),
         (agent_is_human, ":agent_no"),
         (agent_is_alive, ":agent_no"),
		 (agent_is_non_player, ":agent_no"),           
		 (agent_get_group, ":agent_group", ":agent_no"),
		 (agent_get_team, ":agent_team", ":agent_no"),
		 (try_begin),
			(eq, ":agent_group", ":player_no"), 
			(eq, ":agent_team", ":player_team"), 
			(agent_get_position, pos2, ":agent_no"), 
			(position_get_x, ":x1", pos2), 
			(position_get_y, ":y1", pos2), 
			(val_add, ":x_pos", ":x1"), 
			(val_add, ":y_pos", ":y1"), 
			(val_add, ":num_living_players", 1),
		 (try_end), 
       (try_end),
	   (try_begin),
	     (gt, ":num_living_players", 0),
	     (val_div, ":x_pos", ":num_living_players"), 
	     (val_div, ":y_pos", ":num_living_players"), 
	   (try_end),
	   (position_set_x, pos0, ":x_pos"), 
	   (position_set_y, pos0, ":y_pos"), 
	   (position_set_z, pos0, 0), 
	   (assign, ":best_score", 0), 
	   (assign, ":best_point", 0), 
	   (try_for_range, ":i_point", 0, multi_num_valid_entry_points),
		(entry_point_get_position, pos1, ":i_point"), 
		(position_set_z, pos1, 0), 
		(get_sq_distance_between_positions_in_meters, ":dist", pos0, pos1), 
		(try_begin),	
			(le, ":dist", multi_distance_to_captain_spaw_point), 
			(val_max, ":dist", 1), 
			(store_mul, ":score", multi_distance_to_captain_spaw_point, 1000), 
			(val_div, ":score", ":dist"), 
			(try_begin), 	
				(gt, ":score", ":best_score"), 
				(assign, ":best_point", ":i_point"), 
				(assign, ":best_score", ":score"), 
			(try_end), 
		(try_end), 
   	   (try_end),
	   (assign, reg0, ":best_point"), 
	]), 
	
	# script_multiplayer_get_spawn_point_close_to_player
	# input: arg1 = player_no
	# output: reg0 = best_spawn_point
	("multiplayer_get_spawn_point_close_to_player",
	[
       (store_script_param, ":player_no", 1), 
	   (player_get_agent_id, ":player_agent", ":player_no"),
	   (position_set_x, pos0, 0), 
	   (position_set_y, pos0, 0), 
	   (try_begin),
         (agent_is_alive, ":player_agent"),          
		 (agent_get_position, pos0, ":player_agent"), 
       (try_end),
	   
	   (position_set_z, pos0, 0), 
	   (assign, ":best_score", 0), 
	   (assign, ":best_point", 0), 
	   (try_for_range, ":i_point", 0, multi_num_valid_entry_points),
		(entry_point_get_position, pos1, ":i_point"), 
		(position_set_z, pos1, 0), 
		(get_sq_distance_between_positions_in_meters, ":dist", pos0, pos1), 
		(try_begin),	
			(le, ":dist", multi_distance_to_captain_spaw_point), 
			(val_max, ":dist", 1), 
			(store_mul, ":score", multi_distance_to_captain_spaw_point, 1000), 
			(val_div, ":score", ":dist"), 
			(try_begin), 	
				(gt, ":score", ":best_score"), 
				(assign, ":best_point", ":i_point"), 
				(assign, ":best_score", ":score"), 
			(try_end), 
		(try_end), 
   	   (try_end),
	   (assign, reg0, ":best_point"), 
	]),
	
	("multiplayer_get_bots_count",
	[
       (store_script_param, ":player_no", 1), 
	   (player_get_team_no, ":player_team", ":player_no"), 
	   (assign, ":num_living_players", 0),
	   (try_for_agents, ":agent_no"),
         (agent_is_human, ":agent_no"),
         (agent_is_alive, ":agent_no"),
		 (agent_is_non_player, ":agent_no"),           
		 (agent_get_group, ":agent_group", ":agent_no"),
		 (agent_get_team, ":agent_team", ":agent_no"),
		 (try_begin),
			(eq, ":agent_group", ":player_no"), 
			(eq, ":agent_team", ":player_team"), 
			(val_add, ":num_living_players", 1),
		 (try_end), 
       (try_end),
	   (assign, reg0, ":num_living_players"),
	]), 
	
	("multiplayer_get_selected_squad_slot_id", 
	[
		(store_script_param, ":player_no", 1), 
		(assign, ":cur_troop_no", slot_player_bot_type_1_wanted), 
		(try_for_range, ":slot_no", slot_player_bot_type_1_wanted, slot_player_bot_type_4_wanted+1), 	
			(player_get_slot, ":value",  ":player_no", ":slot_no"),
			(try_begin), 
				(eq, ":value", 1), 
				(assign, ":cur_troop_no", ":slot_no"), 
			(try_end), 
		(try_end),		
		(assign, reg0, ":cur_troop_no"), 
	]), 
	
	#("multiplayer_get_squad_cost", 
	#[
	#	(store_script_param, ":player_no", 1), 
	#	(player_get_team_no, ":player_team", ":player_no"),
	#	(team_get_faction, ":faction_no", ":player_team"),
	#	(assign, ":result", 0), 
	#	(try_for_range, ":slot_no", slot_player_bot_type_1_wanted, slot_player_bot_type_4_wanted+1), 	
	#		(player_get_slot, ":value",  ":player_no", ":slot_no"),
	#		(try_begin), 
	#			(eq, ":value", 1), 
	#			(assign, ":cur_troop_no", ":slot_no"), 
	#		(try_end), 
	#	(try_end), 
	#	(val_sub, ":cur_troop_no", slot_player_bot_type_1_wanted), 
	#	(call_script, "script_mp_get_squad_info", ":cur_troop_no", ":player_no"), 
	#	(assign, ":result", reg2), 
	#	(assign, reg0, ":result"), 
	#]), 
	
	# script_cf_multiplayer_event_team_change
	("cf_multiplayer_event_team_change", 
	[
		(store_script_param, ":player_no", 1), 
		(try_begin), 	
			(eq, "$g_multiplayer_is_game_type_captain", 1),
			(player_get_team_no, ":player_team", ":player_no"),
			#(player_get_agent_id, ":player_agent", ":player_no"),
			(try_for_agents, ":agent_no"),
				(agent_is_human, ":agent_no"),
				(agent_is_alive, ":agent_no"),
				(agent_is_non_player, ":agent_no"),           
				(agent_get_group, ":agent_group", ":agent_no"),
				(agent_get_team, ":agent_team", ":agent_no"),
				(try_begin),
					(eq, ":agent_group", ":player_no"), 
					(eq, ":agent_team", ":player_team"), 
					
					## increase player's kill count by 2 since death of each squad member will cause -2 score on team change
					#(player_get_kill_count, ":player_kill_count", ":player_no"),
					#(val_add, ":player_kill_count", 2),
					#(player_set_kill_count, ":player_no", ":player_kill_count"),
					## also decrease death by 2 for the same reason
					#(player_get_death_count, ":player_death_count", ":player_no"),
					#(val_sub, ":player_death_count", 2),
					#(player_set_death_count, ":player_no", ":player_death_count"),
					
					#(call_script, "script_add_kill_death_counts", ":player_agent", ":agent_no"),
					(remove_agent, ":agent_no"),
				(try_end), 
			(try_end), 	
		(try_end), 
	]), 
	
	("multiplayer_event_agent_killed_or_wounded_ex",
	[
		(store_script_param, ":dead_agent_no", 1), 
		#code
		(store_current_scene, ":scene"), 
		(try_begin), 
			#(eq, 0, 1), 
			(eq, ":scene", "scn_mp_marketplace"), 
			(gt, ":dead_agent_no", -1),
			(agent_is_human, ":dead_agent_no"),
			(agent_get_horse, ":horse_agent", ":dead_agent_no"), 
			(gt, ":horse_agent", -1), 
			(agent_is_alive, ":horse_agent"),
			(store_random_in_range, ":random", 0, 100), 
			(try_begin), 
				(ge, ":random", 40), 
				(remove_agent, ":horse_agent"), 
			(else_try), 
				(store_random_in_range, ":point_no", 90, 92), 
				(entry_point_get_position, pos0, ":point_no"),
				(agent_set_scripted_destination, ":horse_agent", pos0, 1), 
			(try_end), 
		(try_end), 
	]), 
	
  # script_oim_deliver_granade_damage
  # input: shooter_agent_no
  #        max_damage
  #        max_range
  #        pos51 = position of grenade hit
  ("oim_deliver_granade_damage", 
  [
    (store_script_param, ":shooter_agent_no", 1),
    (store_script_param, ":max_damage", 2),
    (store_script_param, ":max_range", 3),
    
    (try_begin), 
      (this_or_next|multiplayer_is_server),
      (neg|game_in_multiplayer_mode),
      
      (gt,":shooter_agent_no",-1),
      (agent_get_troop_id, ":shooter_troop_no", ":shooter_agent_no"),
      (gt,":shooter_troop_no",-1),
      
      (store_skill_level, ":skill", skl_power_throw, ":shooter_troop_no"),
      (val_div, ":skill", 2), 
      (val_add, ":max_range", ":skill"),
      (val_mul, ":max_range", 100), #setting distance from meters to cm
      
      (set_fixed_point_multiplier, 100), # Make sure we have centimeters as the fixed point
      
      (copy_position,pos60,pos51), # copy hit position for sound
      (call_script,"script_multiplayer_server_play_sound_at_position","snd_pistol_shot"),
      (particle_system_burst, "psys_bomb_fire_1", pos51, 35),
      (particle_system_burst, "psys_bomb_smoke", pos51, 35),
      (particle_system_burst, "psys_bomb_dust", pos51, 15),
      ##(particle_system_burst, "psys_bomb_fire_big", pos51, 150),
	  ##(particle_system_burst, "psys_bomb_fire_2", pos51, 1),
	  
      (try_for_agents, ":agent_no"), 
        (agent_is_alive,":agent_no"),
        (agent_get_position,pos41,":agent_no"),
        (position_move_z,pos41,90), # Move 90 centimeter up (center of body) for better hit detection
        (get_distance_between_positions,":cur_dist",pos41,pos51),
        
        (lt, ":cur_dist", ":max_range"), # We are in range. 
		
		(agent_is_in_line_of_sight, ":agent_no", pos51),
        
        # For calculation example assuming 10 meter range hit 7 meters from agent. and a hit of 40 dmg.
        (store_mul,":dist_proc",":cur_dist",100), # distance 7 meter = 70000
        (val_div,":dist_proc",":max_range"), # distance 7 meter range 10 meter = 70%
        
        #(assign,":this_agent_is_hit",0),
        (assign, ":damage", 0),
        (try_begin),
          (le, ":dist_proc", 30), # distance is 0-30% of range hit this agent fully.
          (assign,":damage",":max_damage"),
          #(assign,":this_agent_is_hit",1),
        (else_try),
          (store_mul,":range_sub_70_proc",":max_range",30),
          (val_div,":range_sub_70_proc",100), # 30% of range.. 300cm
          (store_sub,":max_range",":max_range",":range_sub_70_proc"), # substract 30% of max range.. 700cm
          (val_sub,":cur_dist",":range_sub_70_proc"), # 700 cm - 300cm = 400cm left
          
          # (store_mul,":dist_proc",":cur_dist",1000), # distance 5 meter = 500000
          # (val_div,":dist_proc",":max_range"), # distance 5 meter range 8 meter = 625  ( 62.5 % )
          # (store_sub,":dist_proc",1000,":dist_proc"),  # 100% - 62.5% = 375  ( 37.5 % ) chance or hit.
          
          # (store_random_in_range, ":rand", 0, 1000), 
          # (lt, ":rand", ":dist_proc"), # 37.5% chance the random hit occurs at 7 meter
          
          # Calculate damage 100-25% of damage according to range
          # Damage = damage_max * (1 - ((0.75*distance)/range))   for our example:   40 * (1 - ((0.75*500)/800)) = 21.25  damage
          (store_mul,":damage",":cur_dist",750),
          (val_div,":damage",":max_range"),
          (store_sub,":damage",1000,":damage"),
          (val_mul,":damage",":max_damage"),
          (val_div,":damage",1000),
        (try_end),
        
		(gt, ":damage", 0),
        (agent_deliver_damage_to_agent_advanced, ":delivered_damage", ":shooter_agent_no", ":agent_no", ":damage"),
		(try_begin),
          (agent_is_alive,":agent_no"), # still alive? if not then dont do all this animation and sounds cause the death will trigger those.
		  (gt, ":delivered_damage", 10),
          (copy_position,pos60,pos41), # Copy agent position for sound script
          (try_begin),
            (agent_is_human,":agent_no"), 
            (call_script,"script_multiplayer_server_play_sound_at_position","snd_man_hit"),
            (agent_get_horse, ":horse", ":agent_no"),
            (try_begin),
              (le, ":horse", 0), # No horse so play the fall animation
              (agent_set_animation, ":agent_no", "anim_strike_fall_back_rise"),
            (try_end),
          (else_try),
            (call_script,"script_multiplayer_server_play_sound_at_position","snd_neigh"),
            (agent_set_animation, ":agent_no", "anim_horse_rear"),
          (try_end),
		(else_try),
		  (neg|game_in_multiplayer_mode),
		  (neg|agent_is_alive, ":agent_no"),
		  (agent_is_human, ":agent_no"),
		  (get_player_agent_no, ":player_agent"),
		  (eq, ":shooter_agent_no", ":player_agent"),
		  (get_achievement_stat, ":achievement_stat", ACHIEVEMENT_BOMBERMAN, 0),
		  (val_add, ":achievement_stat", 1),
		  (set_achievement_stat, ACHIEVEMENT_BOMBERMAN, 0, ":achievement_stat"),

		  (try_begin),
		    (ge, ":achievement_stat", 50),
			(unlock_achievement, ACHIEVEMENT_BOMBERMAN),			
		  (try_end),
		(try_end),
      (try_end),
      #prop_instance_receive_damage only for multiplayer.
      (try_begin),
        (game_in_multiplayer_mode),
        (try_for_range, ":obj_slot", multi_data_destruc_scene_props_begin, multi_data_destruc_scene_props_end), 
          (troop_get_slot, ":scene_prop_no", "trp_multiplayer_data", ":obj_slot"), 
          #code
          (scene_prop_get_num_instances, ":num_instances_of_scene_prop", ":scene_prop_no"),     
          (gt, ":num_instances_of_scene_prop", 0), 
          (try_for_range, ":cur_instance", 0, ":num_instances_of_scene_prop"),
            (scene_prop_get_instance, ":cur_instance_id", ":scene_prop_no", ":cur_instance"),
            (prop_instance_get_position, pos42, ":cur_instance_id"),
            (get_distance_between_positions, ":cur_dist", pos42, pos51),
            (lt, ":cur_dist", ":max_range"),
            (scene_prop_get_hit_points, ":cur_hp", ":cur_instance_id"), 
            (gt, ":cur_hp", 0), #usless to deliver damage to deadscnprops
            (store_div, ":cur_dist_ex", ":cur_dist", 100),
            #Calculating damage here!
            (try_begin), 
              (eq, ":cur_dist_ex", 0),
              (assign, ":damage", ":max_damage"),
            (else_try), 
              (store_div, ":damage", ":max_damage", ":cur_dist_ex"),
            (try_end), 
            (val_mul, ":damage", multiplayer_granade_damage_to_scene_prop_ex),
            (prop_instance_receive_damage, ":cur_instance_id", ":shooter_agent_no", ":damage"),
          (try_end),
        (try_end),
      (try_end),
    (try_end),
  ]), 	

	
  # script_oim_on_musket_on_attack
  # input: 
  #        type (pistol or musket)
  #        muzzle_position_x
  #        muzzle_position_y
  #        flashpan_position_x
  #        flashpan_position_y
  ("oim_on_musket_on_attack", 
  [
	(store_script_param, ":type", 1),
	(store_script_param, ":muzzle_position_x", 2),
	(store_script_param, ":muzzle_position_y", 3),
	(store_script_param, ":flashpan_position_x", 4),
	(store_script_param, ":flashpan_position_y", 5),
    
    (try_begin), 
      (set_fixed_point_multiplier, 100), # Make sure we have centimeters as the fixed point
	  (copy_position,pos51,pos1), 
	  (try_begin),	    
	     (eq, ":type", itp_type_pistol),
		 #PISTOL
         (position_move_x, pos51,":muzzle_position_x"),
         (position_move_y, pos51,":muzzle_position_y"),
         (particle_system_burst_no_sync, "psys_oim_pistol_smoke", pos51, 8),
         (particle_system_burst_no_sync, "psys_oim_pistol_ogon", pos51, 8),
         (particle_system_burst_no_sync, "psys_oim_pistol_svet", pos51, 8),
		 (position_move_x, pos51,":flashpan_position_x"),
         (position_move_y, pos51,":flashpan_position_y"),
         (position_move_z, pos51,3),
         (particle_system_burst_no_sync, "psys_oim_musket_powder_a", pos51, 8),
         (particle_system_burst_no_sync, "psys_oim_pistol_powder_b", pos51, 15),
      (else_try),
	     # MUSKET
         (position_move_x, pos51,":muzzle_position_x"),
         (position_move_y, pos51,":muzzle_position_y"),
         (particle_system_burst_no_sync, "psys_oim_musket_smoke", pos51, 8),
         (particle_system_burst_no_sync, "psys_oim_musket_ogon", pos51, 8),
         (particle_system_burst_no_sync, "psys_oim_musket_svet", pos51, 8),
         (position_move_x, pos51,":flashpan_position_x"),
         (position_move_y, pos51,":flashpan_position_y"),
         (position_move_z, pos51,3),
         (particle_system_burst_no_sync, "psys_oim_musket_powder_a", pos51, 8),
         (particle_system_burst_no_sync, "psys_oim_pistol_powder_b", pos51, 15),
	  (try_end),
    (try_end),
  ]), 	
	
  # script_oim_on_bullet_hit
  # input:         
  ("oim_on_bullet_hit", 
  [
	(store_trigger_param_2, ":collision_type"),
	(try_begin),
		# 0 = world
		# 1 = agent
		# 2 = dynamic prop
		# 3 = world
		# 4 = mission object
		# 8 = friend
		# 9 = neutral agent
		# 10 = under water
		(this_or_next|eq, ":collision_type", 0), # world collisions
		(eq, ":collision_type", 3), # world collisions
		(particle_system_burst_no_sync, "psys_musket_hit", pos1, 8),
		(particle_system_burst_no_sync, "psys_musket_hit_particle", pos1, 8),
	(else_try),
		(this_or_next|eq, ":collision_type", 2),
		(eq, ":collision_type", 4), # mission objects
		(particle_system_burst_no_sync, "psys_musket_hit_objects", pos1, 8),
	(try_end),
  ]), 	
  
	#kill_radzivill_sneak_condition
	("kill_radzivill_sneak_condition",
	[
		(assign, ":result", -1), 
		(try_begin), 
			(check_quest_active, "qst_oim_getman_kill_radzivill"), 
			(neg|check_quest_succeeded, "qst_oim_getman_kill_radzivill"), 
			(neg|check_quest_finished,"qst_oim_getman_kill_radzivill"),
			(quest_slot_eq, "qst_oim_getman_kill_radzivill", slot_quest_current_state, 0),
			(call_script, "script_get_troop_attached_party", "trp_kingdom_1_pretender"), 
			(assign, ":cur_center", reg0),
			(eq, ":cur_center", "$g_encountered_party"), 
			(assign, ":result", 1), 
		(try_end), 	
		(assign, reg0, ":result"), 
	]), 
	
	("get_inventory_items_count",  
	[
		(store_script_param, ":item_no", 1),
		(store_script_param, ":troop_no", 2),
		(assign, ":count", 0), 
		(troop_get_inventory_capacity, ":capacity", ":troop_no"),
		(try_for_range, ":cur_slot", 0, ":capacity"),
			(troop_get_inventory_slot, ":cur_item", ":troop_no", ":cur_slot"),
			(eq, ":cur_item", ":item_no"),
			(val_add, ":count", 1), 
		(try_end), 
		(assign, reg0, ":count"),
	]), 
	
	("remove_all_items", 
	[
		(store_script_param, ":troop_no", 1),
		(store_script_param, ":item_no", 2),
		(call_script, "script_get_inventory_items_count",  ":item_no", ":troop_no"), 
		(assign, ":count", reg0), 
		(try_begin), 
			(gt, ":count", 0), 
			(troop_remove_items, ":troop_no", ":item_no", ":count"), 
		(try_end), 
	]), 
	
	("remove_lord_from_prison", 
	[
		(store_script_param, ":troop_no", 1),
		(try_begin), 
			(troop_slot_ge, ":troop_no", slot_troop_prisoner_of_party, 0),
			(call_script, "script_randomly_make_prisoner_heroes_escape_from_party", ":troop_no", -1),
		(try_end), 	
	]), 
	
	("ms_remove_elemnts_in_construct", 
	[
		(store_script_param, ":party_no", 1),
		
        (party_set_slot, ":party_no", slot_center_accumulated_rents, 0),
        (party_set_slot, ":party_no", slot_center_accumulated_tariffs, 0),
		
		(assign, "$g_ms_center", ":party_no"), 
		(assign, "$g_ms_cur_elements_type", ms_flag_building),
		(call_script, "script_ms_get_kind_bounds", "script_ms_remove_elemnts_in_construct_ex", 1), 
		(assign, "$g_ms_cur_elements_type", ms_flag_upgrade),
		(call_script, "script_ms_get_kind_bounds", "script_ms_remove_elemnts_in_construct_ex", 1), 
		
		#(party_set_slot, "$g_encountered_party", slot_ms_party_operation_type, ms_flag_none),
	]), 
	
	("ms_remove_elemnts_in_construct_ex", 
	[
		(store_script_param, ":elemnt_no", 1),
		(store_sub, "$g_ms_offset", "$g_ms_center", towns_begin),
		(val_add, "$g_ms_offset", ms_party_has_element_start_slot),
		(store_add, ":time_to_built_slot", ms_time_to_build_start_slot,  "$g_ms_offset"),
		(try_begin), 
			(troop_slot_eq, ":elemnt_no", "$g_ms_offset", ms_flag_is_building),
			(troop_set_slot, ":elemnt_no", ":time_to_built_slot", ms_flag_empty),
			(troop_set_slot, ":elemnt_no", "$g_ms_offset", ms_flag_empty),
		(try_end),	
	]), 
	
	("multiplayer_fill_scene_props_ids",
	[
		(troop_set_slot, "trp_multiplayer_data", multi_data_destruc_scene_props_begin, "spr_catapult_destructible"),
		(troop_set_slot, "trp_multiplayer_data", multi_data_destruc_scene_props_begin + 1, "spr_door_destructible"),
		(troop_set_slot, "trp_multiplayer_data", multi_data_destruc_scene_props_begin + 2, "spr_dummy_a"),
		(troop_set_slot, "trp_multiplayer_data", multi_data_destruc_scene_props_begin + 3, "spr_castle_f_door_a"),
		(troop_set_slot, "trp_multiplayer_data", multi_data_destruc_scene_props_begin + 4, "spr_castle_f_sally_door_a"),
		(troop_set_slot, "trp_multiplayer_data", multi_data_destruc_scene_props_begin + 5, "spr_castle_e_sally_door_a"),
		(troop_set_slot, "trp_multiplayer_data", multi_data_destruc_scene_props_begin + 6, "spr_trebuchet_destructible"),
		(troop_set_slot, "trp_multiplayer_data", multi_data_destruc_scene_props_begin + 7, "spr_gourd"),
		(troop_set_slot, "trp_multiplayer_data", multi_data_destruc_scene_props_begin + 8, "spr_dummy_a_undestructable"),
		(troop_set_slot, "trp_multiplayer_data", multi_data_destruc_scene_props_begin + 9, "spr_earth_sally_gate_left"),
		(troop_set_slot, "trp_multiplayer_data", multi_data_destruc_scene_props_begin + 10, "spr_earth_sally_gate_right"),
		(troop_set_slot, "trp_multiplayer_data", multi_data_destruc_scene_props_begin + 11, "spr_viking_keep_destroy_sally_door_right"),
		(troop_set_slot, "trp_multiplayer_data", multi_data_destruc_scene_props_begin + 12, "spr_viking_keep_destroy_sally_door_left"),
		(troop_set_slot, "trp_multiplayer_data", multi_data_destruc_scene_props_begin + 13, "spr_castle_f_door_b"),
	]), 	
	
	
  #script_replace_shturm_item_begin
  ("replace_agent_items_assault",
    [
	(store_script_param, ":agent_no", 1),
	(get_player_agent_no, ":player_agent"), 
	(agent_get_troop_id, ":troop_id", ":agent_no"), 
	(try_begin),
		(agent_is_human, ":agent_no"), 
		(agent_is_active, ":agent_no"), 
		(neq, ":agent_no", ":player_agent"),
		(is_between, ":troop_id", regular_troops_begin, regular_troops_end), 
		(assign, ":has_item", -1),
		(assign, ":replace_item", -1),
		(try_begin),
			(agent_has_item_equipped, ":agent_no", "itm_kopyo"),
			(assign, ":has_item","itm_kopyo"),
			(assign, ":replace_item", "itm_sablya_pure_c"),
		(else_try),
			(agent_has_item_equipped, ":agent_no", "itm_prosta_pike"),
			(assign, ":has_item","itm_prosta_pike"),
			(assign, ":replace_item", "itm_sablya_pure_b"),
		(else_try),
			(agent_has_item_equipped, ":agent_no", "itm_pika"),
			(assign, ":has_item","itm_pika"),
			(assign, ":replace_item", "itm_good_shpaga_c"),
		(else_try),
			(agent_has_item_equipped, ":agent_no", "itm_cavalry_pika_a"),
			(assign, ":has_item","itm_cavalry_pika_a"),
			(assign, ":replace_item", "itm_sablya_d"),
		(else_try),
			(agent_has_item_equipped, ":agent_no", "itm_gusar_lanza"),
			(assign, ":has_item","itm_gusar_lanza"),
			(assign, ":replace_item", "itm_sablya_a"),
		(else_try),
			(agent_has_item_equipped, ":agent_no", "itm_gusar_lanza_b"),
			(assign, ":has_item","itm_gusar_lanza_b"),
			(assign, ":replace_item", "itm_sablya_b"),
		(else_try),
			(agent_has_item_equipped, ":agent_no", "itm_cavalry_pika_b"),
			(assign, ":has_item","itm_cavalry_pika_b"),
			(assign, ":replace_item", "itm_kozak_good_shablya"),
		(else_try),
			(agent_has_item_equipped, ":agent_no", "itm_kopyo"),
			(assign, ":has_item","itm_kopyo"),
			(assign, ":replace_item", "itm_rusty_toporik"),
		(else_try),
			(agent_has_item_equipped, ":agent_no", "itm_good_kopyo"),
			(assign, ":has_item","itm_good_kopyo"),
			(assign, ":replace_item", "itm_sablya_pure_b"),
		(else_try),
			(agent_has_item_equipped, ":agent_no", "itm_prosta_pike"),
			(assign, ":has_item","itm_prosta_pike"),
			(assign, ":replace_item", "itm_sablya_c"),
		(else_try),
			(agent_has_item_equipped, ":agent_no", "itm_cavalry_pika_b"),
			(assign, ":has_item","itm_cavalry_pika_b"),
			(assign, ":replace_item", "itm_toporik_rich"),
		(else_try),
			(agent_has_item_equipped, ":agent_no", "itm_cavalry_pika_a"),
			(assign, ":has_item","itm_cavalry_pika_a"),
			(assign, ":replace_item", "itm_toporik_good"),
		(else_try),
			(agent_has_item_equipped, ":agent_no", "itm_cavalry_pika_a"),
			(assign, ":has_item","itm_cavalry_pika_a"),
			(assign, ":replace_item", "itm_yatagan_a"),
		(else_try),
			(agent_has_item_equipped, ":agent_no", "itm_cavalry_pika_b"),
			(assign, ":has_item","itm_cavalry_pika_b"),
			(assign, ":replace_item", "itm_sablya_turk_pure_a"),
		(else_try),
			(agent_has_item_equipped, ":agent_no", "itm_kozacka_pika"),
			(assign, ":has_item","itm_kozacka_pika"),
			(assign, ":replace_item", "itm_sablya_tatar_pure_a"),
		(else_try),
			(agent_has_item_equipped, ":agent_no", "itm_kopyo"),
			(assign, ":has_item","itm_kopyo"),
			(assign, ":replace_item", "itm_rusty_shpaga"),
		(else_try),
			(agent_has_item_equipped, ":agent_no", "itm_pika"),
			(assign, ":has_item","itm_pika"),
			(assign, ":replace_item", "itm_prosta_shpaga_c"),
		(else_try),
			(agent_has_item_equipped, ":agent_no", "itm_good_pike"),
			(assign, ":has_item","itm_good_pike"),
			(assign, ":replace_item", "itm_pehot_palash"),
		(else_try),
			(agent_has_item_equipped, ":agent_no", "itm_cavalry_pika_a"),
			(assign, ":has_item","itm_cavalry_pika_a"),
			(assign, ":replace_item", "itm_kozak_shablya"),
		(else_try),
			(agent_has_item_equipped, ":agent_no", "itm_cavalry_pika_b"),
			(assign, ":has_item","itm_cavalry_pika_b"),
			(assign, ":replace_item", "itm_sablya_turk_pure_c"),
		(else_try),
			(agent_has_item_equipped, ":agent_no", "itm_kozacka_pika"),
			(assign, ":has_item","itm_kozacka_pika"),
			(assign, ":replace_item", "itm_kozak_good_shablya"),
		(else_try),
			(agent_has_item_equipped, ":agent_no", "itm_kopyo"),
			(assign, ":has_item","itm_kopyo"),
			(assign, ":replace_item", "itm_rusty_shpaga"),
		(else_try),
			(agent_has_item_equipped, ":agent_no", "itm_prosta_pike"),
			(assign, ":has_item","itm_prosta_pike"),
			(assign, ":replace_item", "itm_pehot_palash_old"),
		(else_try),
			(agent_has_item_equipped, ":agent_no", "itm_pika"),
			(assign, ":has_item","itm_pika"),
			(assign, ":replace_item", "itm_prosta_shpaga"),
		(else_try),
			(agent_has_item_equipped, ":agent_no", "itm_old_pike"),
			(assign, ":has_item","itm_old_pike"),
			(assign, ":replace_item", "itm_rusty_shpaga"),
		(else_try),
			(agent_has_item_equipped, ":agent_no", "itm_cavalry_pika_a"),
			(assign, ":has_item","itm_cavalry_pika_a"),
			(assign, ":replace_item", "itm_palash"),
		(else_try),
			(agent_has_item_equipped, ":agent_no", "itm_cavalry_pika_b"),
			(assign, ":has_item","itm_cavalry_pika_b"),
			(assign, ":replace_item", "itm_good_shpaga_b"),
		(else_try),
			(agent_has_item_equipped, ":agent_no", "itm_kozacka_pika"),
			(assign, ":has_item","itm_kozacka_pika"),
			(assign, ":replace_item", "itm_klevetz"),
		(try_end),
		(try_begin),
			(gt, ":replace_item", 0),
			(agent_unequip_item, ":agent_no", ":has_item"),
			(agent_equip_item, ":agent_no", ":replace_item"),
		(try_end),
	(try_end), 	
     ]),
	
	("process_siege_attackers", 
	[
	(get_player_agent_no, ":player_agent"),
	(store_mission_timer_a, ":cur_time"), 
	(try_for_agents, ":cur_agent"), 
		(neq, ":cur_agent", ":player_agent"),
		(agent_is_alive, ":cur_agent"),
		(agent_is_human, ":cur_agent"),
		(agent_get_team, ":agent_team", ":cur_agent"),
		(this_or_next|eq, ":agent_team", "$attacker_team"),
		(             eq, ":agent_team", "$attacker_team_2"),
		(agent_get_slot, ":cur_state", ":cur_agent", slot_agent_siege_state), 
		(neq, ":cur_state", -1),
		(agent_get_class , ":cur_class", ":cur_agent"),
		(agent_get_position, pos0, ":cur_agent"), 
		(agent_get_slot, ":cur_time_agent", ":cur_agent", slot_agent_time_since_last_command), 
		(val_sub, ":cur_time_agent", ":cur_time"),
		(try_for_range, ":cur_ladder", 0, "$num_ladders"), 
			(agent_slot_eq, ":cur_agent", slot_agent_target_ladder, ":cur_ladder"), 
			(try_begin), 
				(ge, ":cur_time_agent", time_force_rethink), 
				(agent_clear_scripted_mode, ":cur_agent"), 
				(agent_force_rethink, ":cur_agent"), 
				(agent_set_slot, ":cur_agent", slot_agent_siege_state, -1), 
			(try_end), 
			(try_begin), 
				(this_or_next|eq, ":cur_class", grc_infantry),
				(eq, ":cur_class", grc_archers),
				(try_begin), 
					(eq, ":cur_state", 1), 
					(store_add, ":target_entry_point", 80, ":cur_ladder"), 
					(entry_point_get_position, pos1, ":target_entry_point"), 
					(agent_set_scripted_destination, ":cur_agent", pos1), 
					(agent_force_rethink, ":cur_agent"), 
					#(agent_set_slot, ":cur_agent", slot_agent_time_since_last_command, ":cur_time"), #no need we just moving to ladder
					(agent_set_slot, ":cur_agent", slot_agent_siege_state, 2), 
				(else_try), 
					(eq, ":cur_state", 2), 
					(store_add, ":target_entry_point", 80, ":cur_ladder"), 
					(entry_point_get_position, pos1, ":target_entry_point"), 
					(get_distance_between_positions, ":distance" ,pos0, pos1), 
					(le, ":distance", 200),
					(store_add, ":target_entry_point", 90, ":cur_ladder"), 
					(entry_point_get_position, pos1, ":target_entry_point"), 
					(agent_set_scripted_destination, ":cur_agent", pos1), 
					(agent_force_rethink, ":cur_agent"), 
					(agent_set_slot, ":cur_agent", slot_agent_time_since_last_command, ":cur_time"), 
					(agent_set_slot, ":cur_agent", slot_agent_siege_state, 3), 
				(else_try), 
					(eq, ":cur_state", 3), 
					(store_add, ":target_entry_point", 90, ":cur_ladder"), 
					(entry_point_get_position, pos1, ":target_entry_point"), 
					(get_distance_between_positions, ":distance" ,pos0, pos1), 
					(le, ":distance", 200),
					(agent_clear_scripted_mode, ":cur_agent"), 
					(agent_force_rethink, ":cur_agent"), 
					(agent_set_slot, ":cur_agent", slot_agent_siege_state, -1), 
				(try_end), 
			(else_try), 
				(eq, ":cur_class", grc_archers),
				(eq, 0, 1),
				(agent_get_slot, ":agent_time", ":cur_agent", slot_agent_time_since_last_command), 
				(try_begin), 
					(eq, ":cur_state", 1), 
					(store_add, ":target_entry_point", 100, ":cur_ladder"), 
					(entry_point_get_position, pos1, ":target_entry_point"), 
					(agent_set_scripted_destination, ":cur_agent", pos0), 
					(agent_set_slot, ":cur_agent", slot_agent_siege_state, 2), 
				(else_try), 
					(eq, ":cur_state", 2), 
					(store_add, ":target_entry_point", 100, ":cur_ladder"), 
					(entry_point_get_position, pos1, ":target_entry_point"), 
					(get_distance_between_positions, ":distance" ,pos0, pos1), 
					(le, ":distance", 200),
					(agent_set_slot, ":cur_agent", slot_agent_siege_state, 3), 
					(agent_set_slot, ":cur_agent", slot_agent_time_since_last_command, ":cur_time"), 
				(else_try), 
					(eq, ":cur_state", 3), 
					(store_sub, ":time", ":cur_time", ":agent_time"), 
					(ge, ":time", 25), 
					(store_add, ":target_entry_point", 80, ":cur_ladder"), 
					(entry_point_get_position, pos1, ":target_entry_point"), 
					(agent_set_scripted_destination, ":cur_agent", pos1), 
					(agent_set_slot, ":cur_agent", slot_agent_siege_state, 4), 
				(else_try), 
					(eq, ":cur_state", 4), 
					(store_add, ":target_entry_point", 80, ":cur_ladder"), 
					(entry_point_get_position, pos1, ":target_entry_point"), 
					(get_distance_between_positions, ":distance" ,pos0, pos1), 
					(le, ":distance", 200),
					(store_add, ":target_entry_point", 90, ":cur_ladder"), 
					(entry_point_get_position, pos1, ":target_entry_point"), 
					(agent_set_scripted_destination, ":cur_agent", pos1), 
					(agent_set_slot, ":cur_agent", slot_agent_siege_state, 5), 
				(else_try), 
					(eq, ":cur_state", 5), 
					(store_add, ":target_entry_point", 90, ":cur_ladder"), 
					(entry_point_get_position, pos1, ":target_entry_point"), 
					(get_distance_between_positions, ":distance" ,pos0, pos1), 
					(le, ":distance", 200),
					(agent_clear_scripted_mode, ":cur_agent"), 
					(agent_force_rethink, ":cur_agent"), 
					(agent_set_slot, ":cur_agent", slot_agent_siege_state, -1), 
				(try_end), 
			(try_end), 
		(try_end), 
	(try_end), 
	
	]
	), 
	
	
	("setup_bot_initials", 
	[
	(store_script_param, ":cur_agent", 1),	
	(try_begin), 
		(get_player_agent_no, ":player_agent"),
		(neq, ":cur_agent", ":player_agent"),
		(agent_is_alive, ":cur_agent"),
		(agent_is_human, ":cur_agent"),
		(agent_get_team, ":agent_team", ":cur_agent"),
		(this_or_next|eq, ":agent_team", "$attacker_team"),
		(             eq, ":agent_team", "$attacker_team_2"),
		(agent_set_slot, ":cur_agent", slot_agent_siege_state, 1), 
		(agent_get_class , ":cur_class", ":cur_agent"),
		(try_begin),
			(eq, ":cur_class", grc_infantry),
			(le, "$cur_ladder_to_assign_infantry", "$num_ladders"), 
			(agent_set_slot, ":cur_agent", slot_agent_target_ladder, "$cur_ladder_to_assign_infantry"),
			(val_add, "$cur_ladder_to_assign_infantry", 1),
        (else_try),
			(eq, ":cur_class", grc_infantry),
			(assign, "$cur_ladder_to_assign_infantry", 0),
			(agent_set_slot, ":cur_agent", slot_agent_target_ladder, "$cur_ladder_to_assign_infantry"),
        (else_try),
			(eq, ":cur_class", grc_archers),
			(le, "$cur_ladder_to_assign_archers", "$num_ladders"), 
			(agent_set_slot, ":cur_agent", slot_agent_target_ladder, "$cur_ladder_to_assign_archers"),
			(val_add, "$cur_ladder_to_assign_archers", 1),
        (else_try),
			(eq, ":cur_class", grc_archers),
			(assign, "$cur_ladder_to_assign_archers", 0),
			(agent_set_slot, ":cur_agent", slot_agent_target_ladder, "$cur_ladder_to_assign_archers"),
		(try_end), 
	(try_end),
	]), 
	
	("remove_script_behavior",
	[
		(get_player_agent_no, ":player_agent"),
		(try_for_agents, ":cur_agent"), 
			(neq, ":cur_agent", ":player_agent"),
			(agent_is_alive, ":cur_agent"),
			(agent_is_human, ":cur_agent"),
			(agent_get_team, ":agent_team", ":cur_agent"),
			(this_or_next|eq, ":agent_team", "$attacker_team"),
			(             eq, ":agent_team", "$attacker_team_2"),
			(agent_set_slot, ":cur_agent", slot_agent_siege_state, -1), 
		(try_end), 	
	]), 
	
	("re_init_castle_traders", 
	[
	  (try_for_range, ":castle_no", castles_begin, castles_end),
	    (store_sub, ":offset", ":castle_no", castles_begin),
		(store_add, ":cur_object_no", "trp_castle_1_elder", ":offset"),
		(party_set_slot, ":castle_no", slot_town_elder, ":cur_object_no"),
		(store_add, ":cur_object_no", "trp_castle_1_weaponsmith", ":offset"),
		(party_set_slot,":castle_no", slot_town_weaponsmith, ":cur_object_no"),
		(store_add, ":cur_object_no", "trp_castle_1_armorer", ":offset"),
		(party_set_slot,":castle_no", slot_town_armorer, ":cur_object_no"),
		(store_add, ":cur_object_no", "trp_castle_1_horse_merchant", ":offset"),
		(party_set_slot,":castle_no", slot_town_horse_merchant, ":cur_object_no"),
		(store_add, ":cur_object_no", "trp_castle_1_merchant", ":offset"),
		(party_set_slot,":castle_no", slot_town_merchant, ":cur_object_no"),
	  (try_end),
	  
	  (reset_item_probabilities,100),
	  (set_merchandise_modifier_quality,150),
	  (try_for_range, ":cur_center" ,walled_centers_begin, walled_centers_end),
	    (party_get_slot,":cur_merchant",":cur_center",slot_town_armorer),
		(party_get_slot, ":cur_faction", ":cur_center", slot_center_original_faction), 
		(troop_clear_inventory, ":cur_merchant"),
		(troop_add_merchandise_with_faction, ":cur_merchant", ":cur_faction",itp_type_body_armor,16),
		(troop_add_merchandise_with_faction, ":cur_merchant", ":cur_faction",itp_type_head_armor,16),
		(troop_add_merchandise_with_faction, ":cur_merchant", ":cur_faction",itp_type_foot_armor,8),
		(troop_add_merchandise_with_faction, ":cur_merchant", ":cur_faction",itp_type_hand_armor,4),
		(troop_ensure_inventory_space,":cur_merchant",merchant_inventory_space),
		(troop_sort_inventory, ":cur_merchant"),
		(store_troop_gold, reg(6),":cur_merchant"),
		(lt,reg6,900),
		(store_random_in_range,":new_gold",500,4000),
		(call_script, "script_troop_add_gold", ":cur_merchant", ":new_gold"),
	  (try_end),
	  
	  (reset_item_probabilities,100),
	  (set_merchandise_modifier_quality,150),
	  (try_for_range, ":cur_center" ,walled_centers_begin, walled_centers_end),
	    (party_get_slot,":cur_merchant",":cur_center",slot_town_weaponsmith),
		(party_get_slot, ":cur_faction", ":cur_center", slot_center_original_faction), 
		(troop_clear_inventory, ":cur_merchant"),
		(troop_add_merchandise_with_faction, ":cur_merchant", ":cur_faction",itp_type_one_handed_wpn,5),
		(troop_add_merchandise_with_faction, ":cur_merchant", ":cur_faction",itp_type_two_handed_wpn,5),
		(troop_add_merchandise_with_faction, ":cur_merchant", ":cur_faction",itp_type_polearm,5),
		(troop_add_merchandise_with_faction, ":cur_merchant", ":cur_faction",itp_type_shield,6),
		(troop_add_merchandise_with_faction, ":cur_merchant", ":cur_faction",itp_type_bow,4),
		(troop_add_merchandise_with_faction, ":cur_merchant", ":cur_faction",itp_type_crossbow,3),
		(troop_add_merchandise_with_faction, ":cur_merchant", ":cur_faction",itp_type_thrown,5),
		(troop_add_merchandise_with_faction, ":cur_merchant", ":cur_faction",itp_type_arrows,2),
		(troop_add_merchandise_with_faction, ":cur_merchant", ":cur_faction",itp_type_bolts,2),
		(troop_ensure_inventory_space,":cur_merchant",merchant_inventory_space),
		(troop_sort_inventory, ":cur_merchant"),
		(store_troop_gold, reg(6),":cur_merchant"),
		(lt,reg6,900),
		(store_random_in_range,":new_gold",500,4000),
		(call_script, "script_troop_add_gold", ":cur_merchant", ":new_gold"),
	  (try_end),

	  (reset_item_probabilities,100),	  
	  (set_merchandise_modifier_quality,150),
	  (try_for_range, ":cur_center" ,walled_centers_begin, walled_centers_end),
	    (party_get_slot,":cur_merchant",":cur_center",slot_town_horse_merchant),
		(party_get_slot, ":cur_faction", ":cur_center", slot_center_original_faction), 
		(troop_clear_inventory, ":cur_merchant"),
		(troop_add_merchandise_with_faction,":cur_merchant", ":cur_faction",itp_type_horse,5),
		(troop_ensure_inventory_space,":cur_merchant",merchant_inventory_space),
		(troop_sort_inventory, ":cur_merchant"),
		(store_troop_gold, reg(6),":cur_merchant"),
		(lt,reg6,900),
		(store_random_in_range,":new_gold",500,4000),
		(call_script, "script_troop_add_gold", ":cur_merchant", ":new_gold"),
	  (try_end),		
	]),
	
	("parties_fix",
	[
		(try_for_range, ":center_no", towns_begin, towns_end),
			(party_set_slot, ":center_no", slot_party_type, spt_town),
		(try_end), 

		(try_for_range, ":center_no", castles_begin, castles_end),
			(party_set_slot, ":center_no", slot_party_type, spt_castle),
		(try_end), 
	]), 
	
	
	("cf_mul_total_tax",
	[
	    (store_script_param, ":taxes", 1),       
	    (game_get_reduce_campaign_ai, ":reduce_campaign_ai"),                
	    (try_begin),
          (eq, ":reduce_campaign_ai", 0), #hard (1x)
          #same
        (else_try),
          (eq, ":reduce_campaign_ai", 1), #moderate (1.5x)
          (val_mul, ":taxes", 3),
          (val_div, ":taxes", 2),
        (else_try),                        
          (eq, ":reduce_campaign_ai", 2), #easy (2x)
          (val_mul, ":taxes", 2),
        (try_end),  
		(assign, reg0, ":taxes"),
	]), 
	
	#slot_agent_time_since_last_command
	("process_siege_attackers_no_stack", 
	[
		(get_player_agent_no, ":player_agent"),
		(store_mission_timer_a_msec, ":cur_time"), 
		(try_for_agents, ":cur_agent"), 
			(neq, ":cur_agent", ":player_agent"),
			(agent_is_alive, ":cur_agent"),
			(agent_is_human, ":cur_agent"),
			(agent_get_team, ":agent_team", ":cur_agent"),
			(agent_get_slot, ":cur_agent_time", ":cur_agent", slot_agent_time_since_last_command), 
			(val_sub, ":cur_agent_time", ":cur_time"), 
			(this_or_next|ge, ":cur_agent_time", 4000), 
			(             le, ":cur_agent_time", 0), 
			(try_begin), 
				(this_or_next|eq, ":agent_team", "$attacker_team"),
				(             eq, ":agent_team", "$attacker_team_2"),
				(agent_get_slot, ":cur_state", ":cur_agent", slot_agent_siege_state), 
				(eq, ":cur_state", -1),
				(val_sub, ":cur_agent_time", ":cur_time"), 
				(agent_set_slot, ":cur_agent", slot_agent_time_since_last_command, ":cur_time"),
				(agent_force_rethink, ":cur_agent"), 
			(else_try),
				(this_or_next|eq, ":agent_team", "$defender_team"),
				(             eq, ":agent_team", "$defender_team_2"),
				(ge, "$defender_reinforcement_stage", 2),
				(agent_set_slot, ":cur_agent", slot_agent_time_since_last_command, ":cur_time"),
				(agent_force_rethink, ":cur_agent"), 
			(try_end), 
		(try_end), 
	]), 	
	
	("game_event_agent_dismounted", 
	[
		# this script is disabled due to bugs related with it. and also it seems over-protective.
		
		# (store_script_param, ":agent_no", 1),       
		# (try_begin),
			# (agent_is_active, ":agent_no"), 
			# (assign, ":has_item", -1),
			# (assign, ":replace_item", -1),
			# (try_begin), 
				# (agent_has_item_equipped, ":agent_no", "itm_gusar_lanza"),
				# (assign, ":has_item", "itm_gusar_lanza"),
				# (assign, ":replace_item", "itm_sablya_a"),
			# (else_try),
				# (agent_has_item_equipped, ":agent_no", "itm_gusar_lanza_b"),
				# (assign, ":has_item", "itm_gusar_lanza_b"),
				# (assign, ":replace_item", "itm_sablya_d"),
			# (try_end), 	
			# (try_begin),
				# (gt, ":replace_item", 0),
				# (agent_unequip_item, ":agent_no", ":has_item"),
				# (agent_equip_item, ":agent_no", ":replace_item"),
			# (try_end),
		# (try_end), 	
	]), 
	
	("get_mission_agent_count_of_kind", 
	[
		(store_script_param, ":troop_no", 1),  
		(assign, ":count", 0),
         (try_for_agents, ":cur_agent"),
           (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
           (eq, ":cur_agent_troop", ":troop_no"),
		   (agent_is_alive, ":cur_agent"),
           (val_add, ":count", 1),
         (try_end),
         (assign, reg0, ":count"),
	]), 
	
	("get_alive_enemies_count",
	[
		(store_script_param, ":team_no", 1),
		(assign, ":count", 0), 
		(try_for_agents,":cur_agent"),
			(agent_is_alive, ":cur_agent"),
			(agent_is_human, ":cur_agent"),
			(agent_get_team, ":agent_team", ":cur_agent"),
			(teams_are_enemies, ":agent_team", ":team_no"),
			(val_add, ":count", 1), 
		(try_end), 
		(assign, reg0, ":count"), 
	]), 
	
	# script_multiplayer_ccoop_prepare_spawn_wave
	# Input: none
	# Output: none
	("multiplayer_ccoop_prepare_spawn_wave",
	[
		(try_begin),
			(multiplayer_is_server),
			(set_fixed_point_multiplier, 100),
			
			#generate next wave spawn points
			(store_random_in_range, ":spawn_point1", 80, 88),
			(store_random_in_range, ":spawn_point2", 80, 88),
			(try_begin),
				(eq, ":spawn_point1", ":spawn_point2"),
				(assign, ":spawn_point2", -1),
			(end_try),
			
			(store_mod, ":wave_no_mod", "$g_multiplayer_ccoop_wave_no", 10),

			(assign, ":cur_tier", 100),
			(assign, ":num_troops_for_wave", 4),
			(assign, ":number_of_players_at_team_1", 0),
			(get_max_players, ":num_players"),
			(try_for_range, ":cur_player", 0, ":num_players"),
				(player_is_active, ":cur_player"),
				(player_get_team_no, ":player_team", ":cur_player"),
				(eq, ":player_team", 0),
				(val_add, ":number_of_players_at_team_1", 1),
			(try_end),
			
			(assign, reg0, ":number_of_players_at_team_1"), #debug, delete
			
			(val_sub, ":number_of_players_at_team_1", 1), # for simplifying the formula
			(try_for_range, ":cur_multiplier", 1, 4),
				(gt, ":number_of_players_at_team_1", 0),
				(store_mul, ":used_multiplier", ":cur_multiplier", 2),
				(val_min, ":used_multiplier", ":number_of_players_at_team_1"),
				(val_sub, ":number_of_players_at_team_1", ":used_multiplier"),
				(store_sub, ":used_multiplier_2", 5, ":cur_multiplier"),
				(store_mul, ":added_num_troops", ":used_multiplier_2", ":used_multiplier"),
				(val_add, ":num_troops_for_wave", ":added_num_troops"),
			(try_end),
						
			(try_begin),
				(le, "$g_multiplayer_ccoop_wave_no", 3),
				(assign, ":spawn_point2", -1), # for the first 3 waves, spawn from only 1 point
			(try_end),
			
			(try_begin),
				(eq, "$g_multiplayer_ccoop_wave_no", 1),
				(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin, 1),
				(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 1, 1), # enforce infantry
				(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 2, 100), # 100% amount
				(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 3, 0),
			(else_try),
				(eq, "$g_multiplayer_ccoop_wave_no", 2),
				(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin, 2),
				(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 1, 1), # enforce infantry
				(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 2, 50), # 50% amount
				(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 3, 0),
				(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 4, 2), # enforce ranged
				(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 5, 50), # 50% amount
				(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 6, 0),
			(else_try),
				(eq, "$g_multiplayer_ccoop_wave_no", 3),
				(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin, 3),
				(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 1, 1), # enforce infantry
				(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 2, 25), # 25% amount
				(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 3, 0),
				(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 4, 2), # enforce ranged
				(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 5, 25), # 25% amount
				(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 6, 0),
				(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 7, 3), # enforce cavalry
				(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 8, 50), # 50% amount
				(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 9, 0),
			(else_try),
				(assign, ":used_wave_no", ":wave_no_mod"),
				(val_max, ":used_wave_no", 4),
				(store_sub, ":new_tier_wave_value", ":used_wave_no", 3),
				(val_mul, ":new_tier_wave_value", 100),
				(store_sqrt, ":cur_tier", ":new_tier_wave_value"),
				(val_mul, ":cur_tier", 3),
				(val_div, ":cur_tier", 2), # formula is sqrt(wave_no - 3) * 1.5
				(store_random_in_range, ":cur_scheme", 0, 15),
				(try_begin),
					(eq, ":cur_scheme", 0),
					# [0] 100%
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin, 1),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 1, 0),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 2, 100),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 3, 0),
				(else_try),
					(eq, ":cur_scheme", 1),
					# [-] 75%, [+] 25%
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin, 2),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 1, 0),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 2, 75),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 3, -1),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 4, 0),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 5, 25),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 6, 0),
				(else_try),
					(eq, ":cur_scheme", 2),
					# [0] 50%, [0] 50%
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin, 2),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 1, 0),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 2, 50),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 3, 0),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 4, 0),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 5, 50),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 6, 0),
				(else_try),
					(eq, ":cur_scheme", 3),
					# [+] 60%, [-] 25%, [0] 15%
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin, 3),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 1, 0),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 2, 60),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 3, 0),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 4, 0),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 5, 25),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 6, -2),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 7, 0),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 8, 15),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 9, -1),
				(else_try),
					(eq, ":cur_scheme", 4),
					# [0] 50%, [+] 25%, [0] 25%
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin, 3),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 1, 0),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 2, 50),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 3, -1),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 4, 0),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 5, 25),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 6, 0),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 7, 0),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 8, 25),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 9, -1),
				(else_try),
					(eq, ":cur_scheme", 5),
					# [+] 50%, [0] 25%, [0] 25%
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin, 3),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 1, 0),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 2, 50),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 3, 0),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 4, 0),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 5, 25),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 6, -1),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 7, 0),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 8, 25),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 9, -1),
				(else_try),
					(eq, ":cur_scheme", 6),
					# [+] 60%, [0] 40%
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin, 2),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 1, 0),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 2, 60),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 3, 0),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 4, 0),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 5, 40),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 6, -1),
				(else_try),
					(eq, ":cur_scheme", 7),
					# [+] 34%, [0] 33%, [0] 33%
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin, 3),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 1, 0),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 2, 34),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 3, 0),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 4, 0),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 5, 33),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 6, -1),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 7, 0),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 8, 33),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 9, -1),
				(else_try),
					(eq, ":cur_scheme", 8),
					# [+] 40%, [0] 40%, [0] 20%
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin, 3),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 1, 0),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 2, 40),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 3, 0),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 4, 0),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 5, 40),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 6, -1),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 7, 0),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 8, 20),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 9, -1),
				(else_try),
					(eq, ":cur_scheme", 9),
					# [-] 40%, [0] 30%, [0] 30%
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin, 3),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 1, 0),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 2, 40),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 3, -1),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 4, 0),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 5, 30),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 6, 0),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 7, 0),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 8, 30),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 9, 0),
				(else_try),
					(eq, ":cur_scheme", 10),
					# [0] 25%, [0] 25%, [0] 25%, [0] 25%
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin, 4),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 1, 0),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 2, 25),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 3, 0),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 4, 0),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 5, 25),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 6, 0),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 7, 0),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 8, 25),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 9, 0),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 10, 0),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 11, 25),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 12, 0),
				(else_try),
					(eq, ":cur_scheme", 11),
					# [+] 75%, [-] 25%
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin, 2),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 1, 0),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 2, 75),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 3, 0),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 4, 0),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 5, 25),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 6, -1),
				(else_try),
					(eq, ":cur_scheme", 12),
					# [0] 70%, [-] 15%, [+] 15%
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin, 3),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 1, 0),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 2, 70),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 3, -1),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 4, 0),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 5, 15),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 6, -2),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 7, 0),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 8, 15),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 9, 0),
				(else_try),
					(eq, ":cur_scheme", 13),
					# [-] 80%, [+] 10%, [+] 10%
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin, 3),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 1, 0),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 2, 80),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 3, -1),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 4, 0),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 5, 10),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 6, 0),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 7, 0),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 8, 10),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 9, 0),
				(else_try),
					(eq, ":cur_scheme", 14),
					# [+] 40%, [0] 40%, [+] 20%
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin, 3),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 1, 0),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 2, 40),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 3, 0),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 4, 0),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 5, 40),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 6, -1),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 7, 0),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 8, 20),
					(troop_set_slot, "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 9, 0),
				(try_end),
			(try_end),
			
			(store_mod, ":cur_tier_mod", ":cur_tier", 100),
			(assign, ":avg_tier", 0),
			(troop_get_slot, ":num_bot_types", "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin),
			(try_for_range, ":cur_bot_readying", 0, ":num_bot_types"),
				(assign, ":most_prior_bot_type_no", -1),
				(assign, ":most_prior_bot_priority", -10),
				(assign, ":least_prior_bot_type_no", -1),
				(assign, ":least_prior_bot_priority", 1), # priorities can be -2, -1 and 0. resulting tiers can be 1, 2, 3, 4. so assigning this as 1 is the simplest solution.
				(try_for_range, ":cur_bot_type_no", 0, ":num_bot_types"),
					(store_mul, ":cur_slot", ":cur_bot_type_no", 3),
					(val_add, ":cur_slot", multi_data_ccoop_wave_spawn_data_begin + 3),
					(troop_get_slot, ":tier_priority", "trp_multiplayer_data", ":cur_slot"),
					(lt, ":tier_priority", 1), # ignore already assigned groups.
					(try_begin),
						(gt, ":tier_priority", ":most_prior_bot_priority"),
						(assign, ":most_prior_bot_priority", ":tier_priority"),
						(assign, ":most_prior_bot_type_no", ":cur_bot_type_no"),
					(try_end),
					(try_begin),
						(lt, ":tier_priority", ":least_prior_bot_priority"),
						(assign, ":least_prior_bot_priority", ":tier_priority"),
						(assign, ":least_prior_bot_type_no", ":cur_bot_type_no"),
					(try_end),
				(try_end),

				(store_div, ":used_tier", ":cur_tier", 100),
				(store_random_in_range, ":higher_tier_chance", 0, 100),
				(try_begin),
					(lt, ":higher_tier_chance", ":cur_tier_mod"),
					(val_add, ":used_tier", 1),
					(val_min, ":used_tier", 4), # there are at most 4 tiers
					# give this tier to the most prior bot type
					(store_mul, ":cur_slot", ":most_prior_bot_type_no", 3),
					(val_add, ":cur_slot", multi_data_ccoop_wave_spawn_data_begin + 3),
					(troop_set_slot, "trp_multiplayer_data", ":cur_slot", ":used_tier"),
				(else_try),
					# give this tier to the least prior bot type
					(store_mul, ":cur_slot", ":least_prior_bot_type_no", 3),
					(val_add, ":cur_slot", multi_data_ccoop_wave_spawn_data_begin + 3),
					(troop_set_slot, "trp_multiplayer_data", ":cur_slot", ":used_tier"),
				(try_end),
				(val_sub, ":cur_slot", 1),
				(troop_get_slot, ":cur_troop_count_percentage", "trp_multiplayer_data", ":cur_slot"),
				(store_mul, ":used_tier_weight", ":used_tier", ":cur_troop_count_percentage"),
				(val_add, ":avg_tier", ":used_tier_weight"),
			(try_end),
			
			# now avg_tier has its value multiplied by 100, which is the same as cur_tier
			(store_sub, ":tier_dif", ":cur_tier", ":avg_tier"),
			# every 0.5 difference in tier will result in 20% less troops
			(val_mul, ":tier_dif", 2),
			(val_div, ":tier_dif", 5),
			
			(assign, reg0, ":tier_dif"), # debug
			(assign, reg1, ":avg_tier"), # debug
			(assign, reg2, ":cur_tier"), # debug
			(display_debug_message, "@{!}avg tier is {reg1} cur tier is {reg2} tier dif is {reg0}"),
			
			(try_begin),
				(eq, ":wave_no_mod", 0),
				(assign, ":wave_no_mod", 10),
			(try_end),
			(store_mul, ":wave_effect_on_troops", 20, ":wave_no_mod"),
			(val_add, ":wave_effect_on_troops", 80), # it will be 100, 120, 140, 160, ... beginning from wave 1.
			(val_add, ":wave_effect_on_troops", ":tier_dif"), # tier difference is added to the multiplier.
			(val_mul, ":num_troops_for_wave", ":wave_effect_on_troops"),
			(val_div, ":num_troops_for_wave", 100),
			(try_begin),
				(gt, "$g_multiplayer_ccoop_wave_no", 20), # wave++ mode, 30% more troops
				(val_mul, ":num_troops_for_wave", 130),
				(val_div, ":num_troops_for_wave", 100),
			(else_try),
				(gt, "$g_multiplayer_ccoop_wave_no", 10), # wave+ mode, 20% more troops
				(val_mul, ":num_troops_for_wave", 120),
				(val_div, ":num_troops_for_wave", 100),
			(try_end),
			(assign, reg1, ":num_troops_for_wave"), #debug, delete
			(display_debug_message, "@{!}real num troops for {reg0} players: {reg1}"),
			
			(assign, ":num_troops_ready_for_wave", 0),
			(try_for_range, ":cur_bot_readying", 0, ":num_bot_types"),
				(try_begin),
					(store_add, ":cur_bot_readying_plus_one", ":cur_bot_readying", 1),
					(eq, ":cur_bot_readying_plus_one", ":num_bot_types"),
					# use the rest of the troop count
					(store_sub, ":used_troop_count", ":num_troops_for_wave", ":num_troops_ready_for_wave"),
				(else_try),
					(store_mul, ":cur_slot", ":cur_bot_readying", 3),
					(val_add, ":cur_slot", multi_data_ccoop_wave_spawn_data_begin + 2),
					(troop_get_slot, ":troop_count_percentage", "trp_multiplayer_data", ":cur_slot"),
					(store_mul, ":used_troop_count", ":num_troops_for_wave", ":troop_count_percentage"),
					(val_div, ":used_troop_count", 100),
				(try_end),
				
				(val_add, ":num_troops_ready_for_wave", ":used_troop_count"),
				
				(store_mul, ":cur_slot", ":cur_bot_readying", 3),
				(val_add, ":cur_slot", multi_data_ccoop_wave_spawn_data_begin + 3), # used tier
				(troop_get_slot, ":used_tier", "trp_multiplayer_data", ":cur_slot"),
				
				(val_sub, ":cur_slot", 2), # get the enforced troop type
				(troop_get_slot, ":used_troop_type", "trp_multiplayer_data", ":cur_slot"),
				(try_begin),
					(eq, ":used_troop_type", 0), # no enforcement
					(store_random_in_range, ":used_troop_type", 1, 4), # can be 1, 2 or 3
				(try_end),
				
				(try_begin),
					(eq, ":used_tier", 4),
					(store_random_in_range, ":selected_troop", 0, "$g_mp_num_troops_per_type_tier4"),
				(else_try),
					(store_random_in_range, ":selected_troop", 0, "$g_mp_num_troops_per_type_tier123"),
				(try_end),				
				
				(store_mul, ":used_troop_key", ":used_tier", 10),
				(val_add, ":used_troop_key", ":used_troop_type"),
				
				(assign, reg0, ":used_troop_key"), # debug
				(assign, reg1, ":used_tier"), # debug
				(assign, reg2, ":used_troop_type"), # debug
				(assign, reg3, ":selected_troop"), # debug
				(display_debug_message, "@{!}used_tier is {reg1} used troop type is {reg2} used troop key is {reg0} selected troop is {reg3}"),
				
				(try_for_range, ":troop_array_index", 0, 3),
					(ge, ":selected_troop", 0),
					(try_begin),
						(eq, ":troop_array_index", 0),
						(assign, ":troop_array_begin", captain_multiplayer_troops_begin),
						(assign, ":troop_array_end", captain_multiplayer_troops_end),
					(else_try),
						(eq, ":troop_array_index", 1),
						(assign, ":troop_array_begin", captain_multiplayer_new_troops_begin),
						(assign, ":troop_array_end", captain_multiplayer_new_troops_end),
					(else_try),
						(eq, ":troop_array_index", 2),
						(assign, ":troop_array_begin", captain_multiplayer_coop_new_troops_begin),
						(assign, ":troop_array_end", captain_multiplayer_coop_new_troops_end),
					(try_end),
                
					(try_for_range, ":cur_troop", ":troop_array_begin", ":troop_array_end"),
						(ge, ":selected_troop", 0),
						(troop_slot_eq, ":cur_troop", slot_troop_mp_squad_type, ":used_troop_key"),
						(val_sub, ":selected_troop", 1),
						(lt, ":selected_troop", 0),
						(assign, ":used_troop_no", ":cur_troop"),
						
						(assign, reg0, ":used_troop_no"), # debug
						(display_debug_message, "@{!}used troop no is {reg0}"),
					(try_end),
				(try_end),
				
				(store_mul, ":cur_slot", ":cur_bot_readying", 3),
				(val_add, ":cur_slot", multi_data_ccoop_wave_spawn_data_begin + 1), # used troop no
				(troop_set_slot, "trp_multiplayer_data", ":cur_slot", ":used_troop_no"),
				(val_add, ":cur_slot", 1), # used troop count
				(troop_set_slot, "trp_multiplayer_data", ":cur_slot", ":used_troop_count"),
				(store_random_in_range, ":used_entry_point", 0, 2),
				(try_begin),
					(this_or_next|eq, ":used_entry_point", 0),
					(le, ":spawn_point2", 0),
					(assign, ":used_entry_point", ":spawn_point1"),
				(else_try),
					(assign, ":used_entry_point", ":spawn_point2"),
				(try_end),
				(val_add, ":cur_slot", 1), # used entry point
				(troop_set_slot, "trp_multiplayer_data", ":cur_slot", ":used_entry_point"),
			(try_end),
			
			(get_max_players, ":max_players"),
			(try_for_range, ":cur_player", 1, ":max_players"),
				(player_is_active, ":cur_player"),
				(call_script, "script_multiplayer_ccoop_send_troop_data_to_client", ":cur_player"),
			(try_end),
		(try_end),
	]),
	
	
	# script_multiplayer_ccoop_calculate_round_duration
	# Input: none
	# Output: none
	("multiplayer_ccoop_calculate_round_duration",
	[
		(try_begin),
			(multiplayer_is_server),
			(assign, "$g_multiplayer_ccoop_enemy_respawn_secs", 300),  #5min
			
			(store_sub, ":wave_no", "$g_multiplayer_ccoop_wave_no", 1),
			(val_max, ":wave_no", 0),
			(store_mod, ":mod", ":wave_no", 10),		
			(val_mul, ":mod", 30),
			(val_add, "$g_multiplayer_ccoop_enemy_respawn_secs", ":mod"),
			
			(try_begin),
				(gt, "$g_multiplayer_ccoop_wave_no", 20),									
				(val_mul, "$g_multiplayer_ccoop_enemy_respawn_secs", 2), 
			(else_try),
				(gt, "$g_multiplayer_ccoop_wave_no", 10),				
				(val_mul, "$g_multiplayer_ccoop_enemy_respawn_secs", 3),
				(val_div, "$g_multiplayer_ccoop_enemy_respawn_secs", 2),				
			(try_end),
						
			(get_max_players, ":num_players"),
			(try_for_range, ":cur_player", 1, ":num_players"),
				(player_is_active, ":cur_player"),
				(assign, reg0, ":cur_player"),
				(display_debug_message, "@{!}sending message to {reg0} multiplayer_event_other_event_ccoop_count_down_invisible"),
				(multiplayer_send_3_int_to_player, ":cur_player", multiplayer_event_other_events, multiplayer_event_other_event_ccoop_count_down_invisible, "$g_multiplayer_ccoop_enemy_respawn_secs", "$g_multiplayer_ccoop_wave_no"),
			(try_end),
		(try_end),
	]),
	
	
	# script_multiplayer_ccoop_send_troop_data_to_client
	# Input: client number
	# Output: none
	("multiplayer_ccoop_send_troop_data_to_client",
	[		
		(try_begin),
			(store_script_param, ":cur_player", 1),	
			
			(troop_get_slot, ":data_1", "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin),
			(troop_get_slot, ":data_2", "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 1),
			(troop_get_slot, ":data_3", "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 2),
			(multiplayer_send_4_int_to_player, ":cur_player", multiplayer_event_other_events, multiplayer_event_other_event_ccoop_update_spawn_data_1, ":data_1", ":data_2", ":data_3"),
			(troop_get_slot, ":data_1", "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 3),
			(troop_get_slot, ":data_2", "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 4),
			(troop_get_slot, ":data_3", "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 5),
			(multiplayer_send_4_int_to_player, ":cur_player", multiplayer_event_other_events, multiplayer_event_other_event_ccoop_update_spawn_data_2, ":data_1", ":data_2", ":data_3"),
			(troop_get_slot, ":data_1", "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 6),
			(troop_get_slot, ":data_2", "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 7),
			(troop_get_slot, ":data_3", "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 8),
			(multiplayer_send_4_int_to_player, ":cur_player", multiplayer_event_other_events, multiplayer_event_other_event_ccoop_update_spawn_data_3, ":data_1", ":data_2", ":data_3"),
			(troop_get_slot, ":data_1", "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 9),
			(troop_get_slot, ":data_2", "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 10),
			(troop_get_slot, ":data_3", "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 11),
			(multiplayer_send_4_int_to_player, ":cur_player", multiplayer_event_other_events, multiplayer_event_other_event_ccoop_update_spawn_data_4, ":data_1", ":data_2", ":data_3"),
			(troop_get_slot, ":data_1", "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 12),
			(troop_get_slot, ":data_2", "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 13),
			(troop_get_slot, ":data_3", "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 14),
			(multiplayer_send_4_int_to_player, ":cur_player", multiplayer_event_other_events, multiplayer_event_other_event_ccoop_update_spawn_data_5, ":data_1", ":data_2", ":data_3"),
			(troop_get_slot, ":data_1", "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin + 15),
			(multiplayer_send_2_int_to_player, ":cur_player", multiplayer_event_other_events, multiplayer_event_other_event_ccoop_update_spawn_data_6, ":data_1"),				
		(try_end),
	]),
	
	# script_multiplayer_ccoop_spawn_wave
	# Input: spawn_required -> how many bots are needed 
	# Output: none
	("multiplayer_ccoop_spawn_wave",
	  [
		(try_begin),
			(multiplayer_is_server),
			(set_fixed_point_multiplier, 100),
			
			(store_script_param, ":spawn_required", 1),
			
			(assign, reg0, ":spawn_required"), # debug
			(display_debug_message, "@{!}spawn required is: {reg0}"),
			
			(assign, ":num_troops_for_wave", 0),
			
			(troop_get_slot, ":num_bot_types", "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin),
			(try_for_range, ":cur_bot_type", 0, ":num_bot_types"),
				(store_mul, ":cur_slot", ":cur_bot_type", 3),
				(val_add, ":cur_slot", multi_data_ccoop_wave_spawn_data_begin + 2),
				(troop_get_slot, ":cur_bot_count", "trp_multiplayer_data", ":cur_slot"),
				(val_add, ":num_troops_for_wave", ":cur_bot_count"),
			(try_end),

			(assign, reg0, ":num_troops_for_wave"), # debug
			(display_debug_message, "@{!}num_troops_for_wave is {reg0}"),
			
			(assign, ":reduced_spawn_amount", 0),
			(assign, ":reduced_spawn_amount_mod", 0),
			(try_begin),
				(gt, ":num_troops_for_wave", ":spawn_required"),
				(store_sub, ":reduced_spawn_amount", ":num_troops_for_wave", ":spawn_required"),
				(store_mod, ":reduced_spawn_amount_mod", ":reduced_spawn_amount", ":num_bot_types"),
				(val_div, ":reduced_spawn_amount", ":num_bot_types"),
				
				(assign, reg0, ":reduced_spawn_amount"), # debug
				(assign, reg1, ":reduced_spawn_amount_mod"), # debug
				(display_debug_message, "@{!}num_troops_for_wave is gt spawn_required. reduced_spawn_amount is {reg0}, reduced_spawn_amount_mod is {reg1}"),
			(try_end),
			
			(store_current_scene, ":cur_scene"),
			(modify_visitors_at_site, ":cur_scene"),
			(assign, ":num_troops_spawned", 0),

			(try_for_range, ":cur_bot_spawning", 0, ":num_bot_types"),
				(store_mul, ":cur_slot", ":cur_bot_spawning", 3),
				(val_add, ":cur_slot", multi_data_ccoop_wave_spawn_data_begin + 1),
				(troop_get_slot, ":spawned_troop_no", "trp_multiplayer_data", ":cur_slot"),
				(val_add, ":cur_slot", 1),
				(troop_get_slot, ":spawned_troop_count", "trp_multiplayer_data", ":cur_slot"),
				(assign, ":original_spawned_troop_count", ":spawned_troop_count"),
				
				(assign, reg0, ":original_spawned_troop_count"), # debug
				(display_debug_message, "@{!}original_spawned_troop_count is {reg0}"),
				
				(val_add, ":cur_slot", 1),
				(troop_get_slot, ":spawned_troop_entry_point", "trp_multiplayer_data", ":cur_slot"),

				(val_sub, ":spawned_troop_count", ":reduced_spawn_amount"),
				(try_begin),
					(lt, ":cur_bot_spawning", ":reduced_spawn_amount_mod"),
					(val_sub, ":spawned_troop_count", 1),
					
					(assign, reg0, ":cur_bot_spawning"), # debug
					(assign, reg1, ":reduced_spawn_amount_mod"), # debug
					(display_debug_message, "@{!}reducing spawn amount by one"),
				(try_end),
				
				(assign, reg0, ":cur_bot_spawning"), # debug
				(assign, reg1, ":spawned_troop_entry_point"), # debug
				(str_store_troop_name, s0, ":spawned_troop_no"), # debug
				(assign, reg2, ":spawned_troop_count"), # debug
				(display_debug_message, "@{!}spawning bot group {reg0}: {reg2} {s0} from entry point {reg1}"),

				(add_visitors_to_current_scene, ":spawned_troop_entry_point", ":spawned_troop_no", ":spawned_troop_count", 1, -1),
				(val_add, ":num_troops_spawned", ":spawned_troop_count"),
				(val_sub, ":original_spawned_troop_count", ":spawned_troop_count"),
				(store_mul, ":cur_slot", ":cur_bot_spawning", 3),
				(val_add, ":cur_slot", multi_data_ccoop_wave_spawn_data_begin + 2),
				(troop_set_slot, "trp_multiplayer_data", ":cur_slot", ":original_spawned_troop_count"),
			(try_end),
			
			# sync clients 
			(get_max_players, ":num_players"),
			(try_for_range, ":cur_player", 1, ":num_players"),
				(player_is_active, ":cur_player"),
				(call_script, "script_multiplayer_ccoop_send_troop_data_to_client", ":cur_player"),
			(try_end),			
		(try_end),
	]),
	
	# script_multiplayer_get_balance_dif
	# Input: arg1 = team 1 initial count, arg2 = team 2 initial count
	# Output: reg0 = number of players to be moved from team1 to team2 (can be negative).
	("multiplayer_ccoop_check_reinforcement",
	[
		(try_begin),
			(multiplayer_is_server),
			
			(call_script, "script_multiplayer_ccoop_get_alive_enemy_count"),
			(store_sub, ":free_enemy_slots", 100, reg0), #enemy required 
			
			(try_begin),
				(ge, ":free_enemy_slots", 50),  # if 50 or more enemy reinforcement needed
				
				(call_script, "script_multiplayer_ccoop_spawn_wave", ":free_enemy_slots"),
			(else_try),
				#(lt, ":free_enemy_slots", 50),
				(assign, ":num_troops_for_wave", 0),
				(troop_get_slot, ":num_bot_types", "trp_multiplayer_data", multi_data_ccoop_wave_spawn_data_begin),
				(try_for_range, ":cur_bot_type", 0, ":num_bot_types"),
					(store_mul, ":cur_slot", ":cur_bot_type", 3),
					(val_add, ":cur_slot", multi_data_ccoop_wave_spawn_data_begin + 2),
					(troop_get_slot, ":cur_bot_count", "trp_multiplayer_data", ":cur_slot"),
					(val_add, ":num_troops_for_wave", ":cur_bot_count"),
				(try_end),
			
				(ge, ":free_enemy_slots", ":num_troops_for_wave"),
				(call_script, "script_multiplayer_ccoop_spawn_wave", ":free_enemy_slots"),
			(try_end),
		(try_end),
	]),
	
	# script_multiplayer_get_balance_dif
	# Input: arg1 = team 1 initial count, arg2 = team 2 initial count
	# Output: reg0 = number of players to be moved from team1 to team2 (can be negative).
	("multiplayer_get_balance_dif",
	  [
	    (store_script_param, ":number_of_players_at_team_1", 1),
		(store_script_param, ":number_of_players_at_team_2", 2),
        (get_max_players, ":num_players"),
        (try_for_range, ":cur_player", 0, ":num_players"),
          (player_is_active, ":cur_player"),
          (player_get_team_no, ":player_team", ":cur_player"),
          (try_begin),
            (eq, ":player_team", 0),
            (val_add, ":number_of_players_at_team_1", 1),
          (else_try),
            (eq, ":player_team", 1),
            (val_add, ":number_of_players_at_team_2", 1),
          (try_end),
        (try_end),
		(assign, ":single_player_move_effect", 2),
		(try_begin),
		  (eq, "$g_multiplayer_game_type", multiplayer_game_type_captain_battle),
		  (store_add, ":single_player_move_effect", "$g_multiplayer_team_ratio", 1),
		  (val_mul, ":number_of_players_at_team_1", "$g_multiplayer_team_ratio"), #teams have a ratio of 1:"$g_multiplayer_team_ratio"
		(try_end),
		(store_sub, ":difference_of_number_of_players", ":number_of_players_at_team_1", ":number_of_players_at_team_2"),
		(assign, ":number_of_players_will_be_moved", 0),
        (try_begin),
          (store_mul, ":checked_value", "$g_multiplayer_auto_team_balance_limit", -1),
          (le, ":difference_of_number_of_players", ":checked_value"),
          (store_div, ":number_of_players_will_be_moved", ":difference_of_number_of_players", ":single_player_move_effect"),
        (else_try),
          (ge, ":difference_of_number_of_players", "$g_multiplayer_auto_team_balance_limit"),
          (store_div, ":number_of_players_will_be_moved", ":difference_of_number_of_players", ":single_player_move_effect"),
        (try_end),
		(assign, reg0, ":number_of_players_will_be_moved"),
	  ]
	),
	
 
  # script_multiplayer_server_play_sound_at_position
  # Input: arg1 = sound_id
  # Input: pos60 = position
  # Output: none
  ("multiplayer_server_play_sound_at_position",
   [
     (store_script_param, ":sound_id", 1),
     
     (try_begin),
       (this_or_next|multiplayer_is_server),
       (neg|game_in_multiplayer_mode),
       
       (is_between, ":sound_id", 0, "snd_sounds_end"), # Valid sound
       
       (try_begin),
         (neg|multiplayer_is_dedicated_server), # If a client and not a dedicated server that calls then play locally.
         (play_sound_at_position, ":sound_id", pos60),
       (try_end),
       
       (try_begin),
         (multiplayer_is_server), # If this is a server broadcast the sound to all players
         
         (set_fixed_point_multiplier, 100),
         (position_get_x,":xvalue", pos60),
         (position_get_y,":yvalue", pos60),
         (position_get_z,":zvalue", pos60),
         
         (get_max_players, ":num_players"),
         (try_for_range, ":cur_player", 1, ":num_players"),
           (player_is_active,":cur_player"),

           (multiplayer_send_4_int_to_player, ":cur_player", multiplayer_event_return_sound_at_pos,":xvalue",":yvalue",":zvalue",":sound_id"),
         (try_end),
       (try_end),
     (try_end),
   ]),
   
	("ms_get_faction_description_for_element_faction",
    [	
		(store_script_param, ":element", 1),
		(store_script_param, ":flag", 2),
		#(store_script_param, ":party", 3),
		(store_script_param, ":party_faction", 3),
		(try_begin),
			(eq, ":flag", ms_flag_short),
			(assign, ":offset", 0),
		(else_try),
			(eq, ":flag", ms_flag_long),
			(assign, ":offset", 5),
		(else_try),
			(eq, ":flag", ms_flag_remour),
			(assign, ":offset", 10),
		(try_end),
	    (val_sub, ":party_faction", "fac_kingdom_1"),
		(val_add, ":party_faction", ":offset"),
	    (troop_get_slot, reg0, ":element", ":party_faction"),
	]),		   
   
   ("oim_get_ms_descr_full",
   [
		(try_for_range, ":element", ms_elenents_start, ms_elements_end),
			(try_for_range, ":faction", npc_kingdoms_begin, kingdoms_end), 
				(call_script, "script_ms_get_faction_description_for_element_faction", ":element", ms_flag_short, ":faction"), 
				(str_store_string, s31, reg0),
				(display_log_message, "@{s31}"), 
			(try_end), 	
			##slot_ms_construct_requirements        = 15
			(try_begin), 
				(neg|troop_slot_eq, ":element", slot_ms_construct_requirements, ms_flag_empty),
				(troop_get_slot, ":script", ":element", slot_ms_construct_requirements),
				(call_script, ":script", "p_town_1", ":element", slot_ms_construct_requirements),
				(display_log_message, "@ {s32}"), 
			(try_end), 	
			##slot_ms_price                         = 24
			(troop_get_slot, ":price", ":element", slot_ms_price),
			(assign, reg0, ":price"), 
			(display_log_message, "str_oim_ms_price_log"), 
			##slot_ms_construct_time                = 25
			(troop_get_slot, ":time", ":element", slot_ms_construct_time),
			(assign, reg0, ":time"), 
			(display_log_message, "str_oim_ms_construct_time"), 
			##slot_ms_additional_menu               = 26
			(try_begin), 
				(neg|troop_slot_eq, ":element", slot_ms_additional_menu, ms_flag_empty),	
				(troop_get_slot, ":menu", ":element", slot_ms_additional_menu),
				(assign, reg0, ":menu"), 
				(try_begin), 
					(eq, ":menu", "mnu_ms_additional_school"),
					(str_store_string, s32, "str_oim_mnu_ms_additional_school"), 
					(display_log_message, "@ {s32}"), 
				(else_try), 	
					(eq, ":menu", "mnu_ms_additional_merchant_guild"),
					(str_store_string, s32, "str_oim_mnu_ms_additional_merchant_guild"), 
					(display_log_message, "@ {s32}"), 
				(else_try), 	
					(eq, ":menu", "mnu_ms_additional_extra_goods"),
					(str_store_string, s32, "str_oim_mnu_ms_additional_extra_goods"), 
					(display_log_message, "@ {s32}"), 
				(else_try), 	
					(eq, ":menu", "mnu_ms_additional_adviser"),
					(str_store_string, s32, "str_oim_mnu_ms_additional_adviser"),
					(display_log_message, "@ {s32}"), 
				(else_try), 	
					(eq, ":menu", "mnu_ms_additional_officer"),
					(str_store_string, s32, "str_oim_mnu_ms_additional_officer"),
					(display_log_message, "@ {s32}"), 
				(try_end), 
				
			(try_end), 
			(try_begin), 
				(neg|troop_slot_eq, ":element", slot_ms_script_looted, ms_flag_empty),	
				(neg|troop_slot_eq, ":element", slot_ms_script_looted, "script_ms_event_destroy_element"),	
				(display_log_message, "str_oim_slot_ms_script_looted"), 
			(try_end), 
			(try_begin), 
				(neg|troop_slot_eq, ":element", slot_ms_script_24_hour, ms_flag_empty),	
				(neg|troop_slot_eq, ":element", slot_ms_script_24_hour, "script_ms_event_raise_taxes"),	
				(str_store_string, s32, "str_oim_script_ms_event_raise_taxes"),
				(display_log_message, "@ {s32}"), 
			(try_end), 
			(try_begin), 
				(neg|troop_slot_eq, ":element", slot_ms_script_7_day, ms_flag_empty),	
				(troop_get_slot, ":script", ":element", slot_ms_script_7_day),
				(troop_get_slot, ":param", ":element", slot_ms_script_7_day_p1),
				(assign, reg0, ":param"), 
				(try_begin), 
					(eq, ":script", "script_ms_event_change_prosperity"), 
					(assign, reg0, ":param"), 
					(str_store_string, s32, "str_oim_script_ms_event_change_prosperity"),
					(display_log_message, "@ {s32}"), 
				(else_try), 
					(eq, ":script", "script_ms_event_raise_taxes"), 
					(assign, reg0, ":param"), 
					(str_store_string, s32, "str_oim_script_ms_event_raise_taxes_week"),
					(display_log_message, "@ {s32}"), 
				(else_try), 
					(eq, ":script", "script_ms_event_notification_about_gold_usage"),
					(troop_get_slot, ":param", ":element", slot_ms_script_7_day_p4),					
					(assign, reg0, ":param"), 
					(str_store_string, s32, "str_oim_script_ms_event_notification_about_gold_usage"),
					(display_log_message, "@ {s32}"), 
				(try_end), 
			(try_end), 
			(try_begin), 
				(neg|troop_slot_eq, ":element", slot_ms_script_30_day, ms_flag_empty),	
				(troop_slot_eq, ":element", slot_ms_script_30_day, "script_ms_event_notification_about_gold_usage"),
				(troop_get_slot, ":param", ":element", slot_ms_script_30_day_p6),
				(assign, reg0, ":param"), 
				(str_store_string, s32, "str_oim_script_ms_event_notification_about_gold_usage"),
				(display_log_message, "@ {s32}"), 
			(try_end), 
			(display_log_message, "@ "), 
			(display_log_message, "@ "), 
		(try_end), 
   ]),
 
  # script_refresh_center_inventories
  ("refresh_center_inventories",
  [   	
    (set_merchandise_modifier_quality,150),
    (reset_item_probabilities,100),	    

    # Add trade goods to merchant inventories
    (try_for_range,":cur_center",walled_centers_begin,walled_centers_end),
      (party_get_slot,":cur_merchant",":cur_center",slot_town_merchant),
      (reset_item_probabilities,100),
      (assign, ":total_probability", 0),
      (try_for_range, ":cur_goods", trade_goods_begin, trade_goods_end),
        (store_sub, ":item_production_slot_no", ":cur_goods", trade_goods_begin),
        (val_add, ":item_production_slot_no", slot_town_trade_good_productions_begin),
		(party_get_slot, ":cur_probability", ":cur_center", ":item_production_slot_no"),

		(val_max, ":cur_probability", 1),
		(val_mul, ":cur_probability", 4),

		(val_add, ":total_probability", ":cur_probability"),
      (try_end),

	  (assign, ":total_production", 0),
      (try_for_range, ":cur_goods", trade_goods_begin, trade_goods_end),
        (store_sub, ":item_production_slot_no", ":cur_goods", trade_goods_begin),
        (val_add, ":item_production_slot_no", slot_town_trade_good_productions_begin),
		(party_get_slot, ":cur_production", ":cur_center", ":item_production_slot_no"),
		(val_add, ":total_production", ":cur_production"),
      (try_end),

	  (party_get_slot, ":town_prosperity", ":cur_center", slot_town_prosperity),
	  (assign, reg7, ":town_prosperity"),
	  (str_store_party_name, s1, ":cur_center"),
	  (assign, reg8, ":total_production"),
	  #(display_message, "@OZANDEBUG:{s1} ; prosperity:{reg7} ; production:{reg8}"),
	  (assign, ":number_of_items_in_town", 35), #average number of items is 35
	  (val_add, ":total_production", 200),
      (val_div, ":total_production", 12),
	  (val_add, ":number_of_items_in_town", ":total_production"),
	  
	  (try_begin), #1.0x - 2.0x (50 - 100 prosperity)
	    (ge, ":town_prosperity", 50),
		(store_sub, ":ratio", ":town_prosperity", 50),
		(val_mul, ":ratio", 2),
		(val_add, ":ratio", 100),
		(val_mul, ":number_of_items_in_town", ":ratio"),
		(val_div, ":number_of_items_in_town", 100),
	  (else_try), #0.5x - 1.0x (0 - 50 prosperity)
		(store_sub, ":ratio", ":town_prosperity", 50),
		(val_add, ":ratio", 100),
		(val_mul, ":number_of_items_in_town", ":ratio"),
		(val_div, ":number_of_items_in_town", 100),
	  (try_end),

	  (val_clamp, ":number_of_items_in_town", 10, 60),	

	  (try_begin),
	    (is_between, ":cur_center", castles_begin, castles_end),
	    (val_div, ":number_of_items_in_town", 2),
      (try_end),

      (try_for_range, ":cur_goods", trade_goods_begin, trade_goods_end),
        (store_sub, ":item_production_slot_no", ":cur_goods", trade_goods_begin),
        (val_add, ":item_production_slot_no", slot_town_trade_good_productions_begin),
		(party_get_slot, ":cur_probability", ":cur_center", ":item_production_slot_no"),
		(str_store_party_name, s1, ":cur_center"),
		(str_store_item_name, s2, ":cur_goods"),		
		(assign, reg4, ":cur_probability"),
		(assign, reg5, ":total_probability"),
		#(display_log_message, "@OZANDEBUG:{s1}-{s2} production : {reg4}, total probability : {reg5}"),

		(val_max, ":cur_probability", 1),
		(val_mul, ":cur_probability", 4),

        (val_mul, ":cur_probability", ":number_of_items_in_town"),
		(val_mul, ":cur_probability", 100),
		(val_div, ":cur_probability", ":total_probability"),
        (set_item_probability_in_merchandise,":cur_goods",":cur_probability"),						  
      (try_end),

	  (assign, reg7, ":number_of_items_in_town"),
	  (str_store_party_name, s7, ":cur_center"),
	  #(display_log_message, "@OZANDEBUG : {s7} have {reg7} items."),

	  (troop_clear_inventory, ":cur_merchant"),
      (troop_add_merchandise, ":cur_merchant", itp_type_goods, ":number_of_items_in_town"),

      (troop_ensure_inventory_space, ":cur_merchant", 20),
      (troop_sort_inventory, ":cur_merchant"),
      (store_troop_gold, ":cur_gold",":cur_merchant"),
      (lt,":cur_gold",1500),
      (store_random_in_range,":new_gold",500,1000),
      (call_script, "script_troop_add_gold", ":cur_merchant", ":new_gold"),
    (try_end), 	
  ]), 

  # script_refresh_center_armories
  ("refresh_center_armories",
  [
    (reset_item_probabilities,100),
    (set_merchandise_modifier_quality,150),
	(try_for_range, ":cur_center" ,walled_centers_begin, walled_centers_end),
	  (party_get_slot,":cur_merchant",":cur_center",slot_town_armorer),
	  (party_get_slot, ":cur_faction", ":cur_center", slot_center_original_faction),
	  
	  (party_get_slot, ":prosperity", ":cur_center", slot_town_prosperity),
	  
	  (troop_clear_inventory, ":cur_merchant"),
	  
	  (store_div, ":prosperity_div_2", ":prosperity", 2),
	  (store_random_in_range, ":number_of_body_armors", 0, ":prosperity_div_2"),
	  (val_add, ":number_of_body_armors", 3),
	  (troop_add_merchandise_with_faction, ":cur_merchant", ":cur_faction",itp_type_body_armor, ":number_of_body_armors"),
	  
	  (store_random_in_range, ":number_of_head_armors", 0, ":prosperity_div_2"),
	  (val_add, ":number_of_head_armors", 3),
	  (troop_add_merchandise_with_faction, ":cur_merchant", ":cur_faction",itp_type_head_armor, ":number_of_head_armors"),
	  
	  (store_div, ":prosperity_div_4", ":prosperity", 4),
	  (store_random_in_range, ":number_of_foot_armors", 0, ":prosperity_div_4"),
	  (val_add, ":number_of_foot_armors", 2),
	  (troop_add_merchandise_with_faction, ":cur_merchant", ":cur_faction", itp_type_foot_armor, ":number_of_foot_armors"),
	  
	  (store_div, ":prosperity_div_8", ":prosperity", 8),
	  (store_random_in_range, ":number_of_hand_armors", 0, ":prosperity_div_8"),
	  (val_add, ":number_of_hand_armors", 1),
	  (troop_add_merchandise_with_faction, ":cur_merchant", ":cur_faction", itp_type_hand_armor, ":number_of_hand_armors"),
	  
	  (troop_ensure_inventory_space,":cur_merchant",merchant_inventory_space),
	  (troop_sort_inventory, ":cur_merchant"),
	  (store_troop_gold, reg6, ":cur_merchant"),
      (lt, reg6, 1000),
	  (store_random_in_range, ":new_gold", 250, 500),
	  (call_script, "script_troop_add_gold", ":cur_merchant", ":new_gold"),
	(try_end),
  ]),

  # script_refresh_center_stables
  ("refresh_center_stables",
  [
    (reset_item_probabilities, 100),
	(set_merchandise_modifier_quality, 150),
	(try_for_range, ":cur_center", walled_centers_begin, walled_centers_end),
	  (party_get_slot, ":cur_merchant", ":cur_center", slot_town_horse_merchant),
	  (party_get_slot, ":cur_faction", ":cur_center", slot_center_original_faction), 
	  
	  (party_get_slot, ":prosperity", ":cur_center", slot_town_prosperity),
	  
	  (troop_clear_inventory, ":cur_merchant"),
	  
	  (store_div, ":prosperity_div_4", ":prosperity", 4),
	  (store_random_in_range, ":number_of_horses", 0, ":prosperity_div_4"),
	  (val_add, ":number_of_horses", 2),	  
	  (troop_add_merchandise_with_faction, ":cur_merchant", ":cur_faction", itp_type_horse, ":number_of_horses"),
	  
	  (troop_ensure_inventory_space, ":cur_merchant", merchant_inventory_space),
	  (troop_sort_inventory, ":cur_merchant"),
	  (store_troop_gold, reg(6),":cur_merchant"),
	  (lt, reg6, 1000),
	  (store_random_in_range, ":new_gold", 250, 500),
	  (call_script, "script_troop_add_gold", ":cur_merchant", ":new_gold"),
	(end_try),
  ]),

  # script_refresh_center_weaponsmiths
  ("refresh_center_weaponsmiths",
  [
    (reset_item_probabilities,100),
    (set_merchandise_modifier_quality,150),
    (try_for_range, ":cur_center" ,walled_centers_begin, walled_centers_end),
      (party_get_slot,":cur_merchant",":cur_center",slot_town_weaponsmith),
      (party_get_slot, ":cur_faction", ":cur_center", slot_center_original_faction), 

	  (party_get_slot, ":prosperity", ":cur_center", slot_town_prosperity),

      (troop_clear_inventory, ":cur_merchant"),

	  (store_div, ":prosperity_div_8", ":prosperity", 8),
	  (store_random_in_range, ":number_of_one_handed_weapons", 0, ":prosperity_div_8"),
	  (val_add, ":number_of_one_handed_weapons", 1),	  
      (troop_add_merchandise_with_faction, ":cur_merchant", ":cur_faction", itp_type_one_handed_wpn, ":number_of_one_handed_weapons"),

	  (store_div, ":prosperity_div_8", ":prosperity", 8),
	  (store_random_in_range, ":number_of_two_handed_weapons", 0, ":prosperity_div_8"),
	  (val_add, ":number_of_two_handed_weapons", 1),	  
      (troop_add_merchandise_with_faction, ":cur_merchant", ":cur_faction", itp_type_two_handed_wpn, ":number_of_two_handed_weapons"),

	  (store_div, ":prosperity_div_8", ":prosperity", 8),
	  (store_random_in_range, ":number_of_polearms", 0, ":prosperity_div_8"),
	  (val_add, ":number_of_polearms", 1),	  
      (troop_add_merchandise_with_faction, ":cur_merchant", ":cur_faction", itp_type_polearm, ":number_of_polearms"),

	  (store_div, ":prosperity_div_8", ":prosperity", 8),
	  (store_random_in_range, ":number_of_shields", 0, ":prosperity_div_8"),
	  (val_add, ":number_of_shields", 2),
      (troop_add_merchandise_with_faction, ":cur_merchant", ":cur_faction", itp_type_shield, ":number_of_shields"),

	  (store_div, ":prosperity_div_10", ":prosperity", 10),
	  (store_random_in_range, ":number_of_bows", 0, ":prosperity_div_10"),
	  (val_add, ":number_of_bows", 1),
      (troop_add_merchandise_with_faction, ":cur_merchant", ":cur_faction", itp_type_bow, ":number_of_bows"),

	  (store_div, ":prosperity_div_10", ":prosperity", 10),
	  (store_random_in_range, ":number_of_crossbows", 0, ":prosperity_div_10"),
	  (val_add, ":number_of_crossbows", 1),
      (troop_add_merchandise_with_faction, ":cur_merchant", ":cur_faction", itp_type_crossbow, ":number_of_crossbows"),

	  (store_div, ":prosperity_div_8", ":prosperity", 8),
	  (store_random_in_range, ":number_of_thrown_weapons", 0, ":prosperity_div_8"),
	  (val_add, ":number_of_thrown_weapons", 1),	  
      (troop_add_merchandise_with_faction, ":cur_merchant", ":cur_faction", itp_type_thrown, ":number_of_thrown_weapons"),

	  (store_div, ":prosperity_div_20", ":prosperity", 20),
	  (store_random_in_range, ":number_of_arrows", 0, ":prosperity_div_20"),
	  (val_add, ":number_of_arrows", 1),	  
      (troop_add_merchandise_with_faction, ":cur_merchant", ":cur_faction", itp_type_arrows, ":number_of_arrows"),

	  (store_div, ":prosperity_div_20", ":prosperity", 20),
	  (store_random_in_range, ":number_of_bolts", 0, ":prosperity_div_20"),
	  (val_add, ":number_of_bolts", 1),	  
      (troop_add_merchandise_with_faction, ":cur_merchant", ":cur_faction", itp_type_bolts, ":number_of_bolts"),

      (troop_ensure_inventory_space, ":cur_merchant", merchant_inventory_space),
      (troop_sort_inventory, ":cur_merchant"),
      (store_troop_gold, reg(6), ":cur_merchant"),
      (lt,reg6, 1000),
	  (store_random_in_range,":new_gold",250,500),
      (call_script, "script_troop_add_gold", ":cur_merchant", ":new_gold"),
    (end_try),
  ]),

  # script_reduce_walled_center_prosperities
  ("reduce_walled_center_prosperities",
  [
    #besieged walled centers losses 1 prosperity per 2 hours with 16%(castles) and 33%(towns) probability, 
    #not besieged walled centers losses 1 prosperity per 2 hours with 1%(castles) and 2%(towns) probability.
	(try_for_range, ":center_no", walled_centers_begin, walled_centers_end),
	  (try_begin),
	    (neg|party_slot_eq, ":center_no", slot_center_is_besieged_by, -1), #center is under siege

	    (try_begin),        
		  (is_between, ":center_no", castles_begin, castles_end),
		  (assign, ":rand_upper_limit", 4),
		  (store_random_in_range, ":rand", 0, ":rand_upper_limit"),
		(else_try),
		  (assign, ":rand_upper_limit", 2),
		  (store_random_in_range, ":rand", 0, ":rand_upper_limit"),
		(try_end),
           
		(eq, ":rand", 0),

		(party_get_slot, ":prosperity", ":center_no", slot_town_prosperity),
		(val_sub, ":prosperity", 1),
		(val_max, ":prosperity", 5),
		(party_set_slot, ":center_no", slot_town_prosperity, ":prosperity"),
      (else_try),
		(try_begin),
		  (is_between, ":center_no", castles_begin, castles_end),
		  (assign, ":rand_upper_limit", 140),
		(else_try),
		  (assign, ":rand_upper_limit", 70),
		(try_end),

        (store_random_in_range, ":rand", 0, ":rand_upper_limit"),
		(eq, ":rand", 0),
		(party_get_slot, ":prosperity", ":center_no", slot_town_prosperity),
		(val_sub, ":prosperity", 1),
		(val_max, ":prosperity", 5),
		(party_set_slot, ":center_no", slot_town_prosperity, ":prosperity"),
	  (try_end),
    (try_end),
  ]), 

  # script_cf_enter_center_location_bandit_check_2
  # Input: none
  # Output: none
  ("cf_enter_center_location_thieves_check",
    [
      (neq, "$town_nighttime", 0),
      #(party_slot_ge, "$current_town", slot_center_has_bandits, 1),
	  #(quest_slot_ge, "qst_oim_hunt_down_thieves", slot_quest_is_active, 1),
	  (check_quest_active,"qst_oim_hunt_down_thieves"),
	  (check_quest_active,"qst_oim_hunt_down_thieves"),
      (eq, "$g_defending_against_siege", 0),#Skip if the center is under siege (because of resting)
      (eq, "$sneaked_into_town", 0),#Skip if sneaked
	  
	  (neg|check_quest_failed, "qst_oim_hunt_down_thieves"),
	  (neg|check_quest_succeeded, "qst_oim_hunt_down_thieves"),

	  (jump_to_menu, "mnu_meeting_with_thieves"),	  
      ]),

  # script_team_get_attack_readying_ranged_agent_percentage
  # Input: arg1: team_no, arg2: try for team's enemies
  # Output: reg0: percentage attack readying ranged agent,
  ("team_get_attack_readying_ranged_agent_percentage",
	[
      (store_script_param, ":team_no", 1),
      (store_script_param, ":negate", 2),
	  (assign, ":num_ranged_agents", 0),
      (assign, ":num_readying_attack", 0),
      (try_for_agents,":cur_agent"),
        (agent_is_alive, ":cur_agent"),
        (agent_is_human, ":cur_agent"),
        (agent_get_team, ":agent_team", ":cur_agent"),
        (assign, ":continue", 0),
        (try_begin),
          (eq, ":negate", 1),
          (teams_are_enemies, ":agent_team", ":team_no"),
          (assign, ":continue", 1),
        (else_try),
          (eq, ":agent_team", ":team_no"),
          (assign, ":continue", 1),
        (try_end),
        (eq, ":continue", 1),
		(agent_get_combat_state, ":agent_cs", ":cur_agent"),
		(agent_get_wielded_item, ":agent_wi0", ":cur_agent", 0),
		(try_begin),
		  (is_between,":agent_wi0",ranged_weapons_begin,ranged_weapons_end),
		  (val_add,  ":num_ranged_agents", 1),
		  (try_begin),
		    (eq, ":agent_cs", 1),#atkcs_readying_attack
		    (val_add, ":num_readying_attack", 1),
		  (try_end),
		(try_end),
      (try_end),
	  
      (try_begin),
        (eq,  ":num_ranged_agents", 0),
        (assign,  ":num_ranged_agents", 1),
      (try_end),
	  (store_mul, ":perc_readying_attack_over_rangeds", ":num_readying_attack", 100),
      (val_div, ":perc_readying_attack_over_rangeds", ":num_ranged_agents"),
	  (assign, reg0, ":perc_readying_attack_over_rangeds"),
  ]),
  
  # script_multiplayer_get_requested_squad_count
  # Input: none
  # Output: reg0 = requested squad count
  ("multiplayer_get_requested_squad_count",
   [
		(store_script_param, ":player_id", 1),
		(assign, ":total_troop_count", 0),
		(try_for_range, ":slot_id", slot_player_captain_bot_data_begin, slot_player_captain_bot_data_end),
			(player_get_slot, ":troop_count", ":player_id", ":slot_id"),
			(val_add, ":total_troop_count", ":troop_count"),
		(try_end),
		
		(assign, reg0, ":total_troop_count"),
   ]),
   
  # script_multiplayer_reset_squad_on_team_change_for_captain_game_types
  # Input: none
  # Output: none
  ("multiplayer_reset_squad_on_team_change_for_captain_game_types",
   [
	(try_begin),
	  # if game type is captain
	  (eq, "$g_multiplayer_is_game_type_captain", 1),
	  
	  #(display_debug_message, "@{!}multiplayer_reset_squad_on_team_change_for_captain_game_types"), #MCA
	  
	  # clear squad info
	  (store_script_param, ":player_no", 1),	  
	  (call_script, "script_mp_clear_squad_info", ":player_no"),  
	  
	(try_end),
   ]),
   
	 # Berk  # MCA
  # script_multiplayer_update_troop_max_number
  ("multiplayer_update_troop_max_number",
   [ 	
	(store_script_param, ":troop_num", 1),
	(store_script_param, ":troop_count", 2),
	 
	#MCA	 
	(try_begin),
		(val_mul, ":troop_num", 2),
		(val_add, ":troop_num", "$g_multiplayer_troop_selection_end"),
		(val_add, ":troop_num", 1),
		
		(assign, reg1, ":troop_count"),
		(overlay_set_text, ":troop_num", "str_reg1"),
	(try_end),
	
	#update requested troop count text	
	(multiplayer_get_my_player, ":my_player_no"),
	(call_script, "script_multiplayer_get_requested_squad_count", ":my_player_no"),
	(overlay_set_text, "$g_presentation_obj_item_select_20", "str_mp_squad_req_size_reg0"),
   ]),
	 
	 # Berk # MCA
  ("multiplayer_create_available_troops_buttons",
   [
	(store_script_param, ":player_no", 1),	
	(store_script_param, ":faction_no", 2),
	(assign, "$g_multiplayer_troop_selection_begin", -1),
	 
	(try_begin),		
		# create buttons		
		(assign, ":cur_x", 240),
		(assign, ":cur_y", 480),
		(assign, ":counter", 0),
		
		(try_for_range, ":troop_array_index", 0, 2),
			(try_begin),
				(eq, ":troop_array_index", 0),
				(assign, ":troop_array_begin", captain_multiplayer_troops_begin),
				(assign, ":troop_array_end", captain_multiplayer_troops_end),
			(else_try),
				(assign, ":troop_array_begin", captain_multiplayer_new_troops_begin),
				(assign, ":troop_array_end", captain_multiplayer_new_troops_end),
			(try_end),
		
			(try_for_range, ":cur_troop", ":troop_array_begin", ":troop_array_end"),
				(store_troop_faction, ":trp_faction", ":cur_troop"),
				(try_begin),
					(eq, ":faction_no", ":trp_faction"),
					(create_image_button_overlay, reg0, "mesh_mp_inventory_choose", "mesh_mp_inventory_choose"),
					(try_begin),
						(eq, "$g_multiplayer_troop_selection_begin", -1),
						(assign, "$g_multiplayer_troop_selection_begin", reg0),
					(try_end),				
					
					(position_set_x, pos1, ":cur_x"),
					(position_set_y, pos1, ":cur_y"),
					(overlay_set_position, reg0, pos1),
					(create_mesh_overlay_with_tableau_material, ":cur_obj", "mesh_mp_inventory_choose", "tableau_troop_multiplayer_color", ":cur_troop"),
					(store_add, "$g_multiplayer_troop_selection_end", ":cur_obj", 1),

					(position_set_x, pos1, 1000),
					(position_set_y, pos1, 1000),
					(overlay_set_size, ":cur_obj", pos1),
					
					(position_set_x, pos1, ":cur_x"),
					(position_set_y, pos1, ":cur_y"),
					(overlay_set_position, ":cur_obj", pos1),

					(val_add, ":counter", 1),
					(store_mod, ":mod", ":counter", 4),
					(try_begin),
						(eq, ":mod", 0),
						(assign, ":cur_x", 240),
						(val_sub, ":cur_y", 130),
					(else_try),
						(val_add, ":cur_x", 130),
					(end_try),				
				(try_end),
			(try_end),
		(try_end),
		
		# create labels
		(assign, ":cur_x", 235),
		(assign, ":cur_y", 615),
		(assign, ":counter", 0),
		(try_for_range, ":troop_array_index", 0, 2),
			(try_begin),
				(eq, ":troop_array_index", 0),
				(assign, ":troop_array_begin", captain_multiplayer_troops_begin),
				(assign, ":troop_array_end", captain_multiplayer_troops_end),
			(else_try),
				(assign, ":troop_array_begin", captain_multiplayer_new_troops_begin),
				(assign, ":troop_array_end", captain_multiplayer_new_troops_end),
			(try_end),
			
			(try_for_range, ":cur_troop", ":troop_array_begin", ":troop_array_end"),
				(store_troop_faction, ":trp_faction", ":cur_troop"),
				(try_begin),
					(eq, ":faction_no", ":trp_faction"),
					(call_script, "script_mp_get_player_alive_troop_count", ":player_no", ":cur_troop"),
					(assign, ":cur_troop_alive_count", reg0),
					
					(call_script, "script_mp_get_player_requested_troop_count", ":player_no", ":cur_troop"),
					(assign, ":cur_troop_req_count", reg0),

					(store_mod, ":mod", ":counter", 4),
					(try_begin),
						(eq, ":mod", 0),
						(assign, ":cur_x", 235),
						(val_sub, ":cur_y", 130),
					(end_try),
					(val_add, ":counter", 1),
					
					(try_begin),
						(gt, ":cur_troop_alive_count", 0),
						(assign, reg1, ":cur_troop_alive_count"),
						(create_text_overlay, reg0, "str_preg1p", tf_left_align|tf_with_outline),					
						(overlay_set_color, reg0, 0xffff00),
						(position_set_x, pos1, 1000), # set size
						(position_set_y, pos1, 900),
						(overlay_set_size, reg0, pos1),
					(else_try),
						(create_text_overlay, reg0, "str_empty_string"),
					(try_end),
					
					(val_add, ":cur_x", 5),
					(position_set_x, pos1, ":cur_x"),
					(position_set_y, pos1, ":cur_y"),
					(overlay_set_position, reg0, pos1),
					(val_add, ":cur_x", 95),
					
					(assign, reg1, ":cur_troop_req_count"),
					(create_text_overlay, reg0, "str_reg1", tf_left_align|tf_with_outline),
					(overlay_set_color, reg0, 0x00ff00),
					(position_set_y, pos1, ":cur_y"),
					(position_set_x, pos1, ":cur_x"),
					(overlay_set_position, reg0, pos1),
					(position_set_x, pos1, 1000),
					(position_set_y, pos1, 900),
					(overlay_set_size, reg0, pos1),
					(val_add, ":cur_x", 30),
				(try_end),
			(try_end),
		(try_end),
		
		# create wave info
		(try_begin),
			(eq, "$g_multiplayer_game_type", multiplayer_game_type_captain_coop),
			(assign, ":cur_x", 235),
			(assign, ":cur_y", 615),
			(assign, ":counter", 0),
			(try_for_range, ":troop_array_index", 0, 2),
				(try_begin),
					(eq, ":troop_array_index", 0),
					(assign, ":troop_array_begin", captain_multiplayer_troops_begin),
					(assign, ":troop_array_end", captain_multiplayer_troops_end),
				(else_try),
					(assign, ":troop_array_begin", captain_multiplayer_new_troops_begin),
					(assign, ":troop_array_end", captain_multiplayer_new_troops_end),
				(try_end),
				
				(try_for_range, ":cur_troop", ":troop_array_begin", ":troop_array_end"),
					(store_troop_faction, ":trp_faction", ":cur_troop"),
					(try_begin),
						(eq, ":faction_no", ":trp_faction"),

						(store_mod, ":mod", ":counter", 4),
						(try_begin),
							(eq, ":mod", 0),
							(assign, ":cur_x", 235),
							(val_sub, ":cur_y", 130),
						(end_try),
						(val_add, ":counter", 1),
						(val_add, ":cur_x", 100),
						
						(try_begin),
							(eq, ":mod", 0),
						(else_try),
							(eq, ":mod", 1),
							(lt, "$g_multiplayer_ccoop_wave_no", 4),
							(assign, reg1, 4),
							(assign, ":wave_cur_x", ":cur_x"),
							(assign, ":wave_cur_y", ":cur_y"),
							(val_sub, ":wave_cur_x", 45),
							(val_add, ":wave_cur_y", 50),
							(create_text_overlay, ":wave_text", "str_wave_reg1", tf_center_justify|tf_single_line|tf_with_outline),
							(overlay_set_color, ":wave_text", 0xffff00),
							(position_set_y, pos2, ":wave_cur_y"),
							(position_set_x, pos2, ":wave_cur_x"),
							(overlay_set_position, ":wave_text", pos2),
							(position_set_x, pos2, 1500), # set size
							(position_set_y, pos2, 1500),
							(overlay_set_size, ":wave_text", pos2),
						(else_try),
							(eq, ":mod", 2),
							(lt, "$g_multiplayer_ccoop_wave_no", 7),
							(assign, reg1, 7),
							(assign, ":wave_cur_x", ":cur_x"),
							(assign, ":wave_cur_y", ":cur_y"),
							(val_sub, ":wave_cur_x", 45),
							(val_add, ":wave_cur_y", 50),
							(create_text_overlay, ":wave_text", "str_wave_reg1", tf_center_justify|tf_single_line|tf_with_outline),
							(overlay_set_color, ":wave_text", 0xffff00),
							(position_set_y, pos2, ":wave_cur_y"),
							(position_set_x, pos2, ":wave_cur_x"),
							(overlay_set_position, ":wave_text", pos2),
							(position_set_x, pos2, 1500), # set size
							(position_set_y, pos2, 1500),
							(overlay_set_size, ":wave_text", pos2),
						(else_try),	
							(eq, ":mod", 3),
							(lt, "$g_multiplayer_ccoop_wave_no", 10),
							(assign, reg1, 10),
							(assign, ":wave_cur_x", ":cur_x"),
							(assign, ":wave_cur_y", ":cur_y"),
							(val_sub, ":wave_cur_x", 45),
							(val_add, ":wave_cur_y", 50),
							(create_text_overlay, ":wave_text", "str_wave_reg1", tf_center_justify|tf_single_line|tf_with_outline),
							(overlay_set_color, ":wave_text", 0xffff00),
							(position_set_y, pos2, ":wave_cur_y"),
							(position_set_x, pos2, ":wave_cur_x"),
							(overlay_set_position, ":wave_text", pos2),
							(position_set_x, pos2, 1500), # set size
							(position_set_y, pos2, 1500),
							(overlay_set_size, ":wave_text", pos2),
						(try_end),
						(val_add, ":cur_x", 30),
					(try_end),
				(try_end),
			(try_end),
		(try_end),		
	(try_end),
	]),  

	 
  # script_multiplayer_update_cost_labels
  # Input: none
  # Output: none 
  ("multiplayer_update_cost_labels",
    [ 
	  (multiplayer_get_my_player, ":my_player_no"),
      (player_get_gold, ":player_gold", ":my_player_no"),
      (call_script, "script_multiplayer_calculate_cur_selected_items_cost", ":my_player_no", 1),
	  (assign, ":items_cost", reg0),
	  
	  (try_begin), 
	    (call_script, "script_cf_multiplayer_can_buy_squad"),
		(call_script, "script_mp_get_player_squad_cost", ":my_player_no"),
		(assign, ":squad_cost", reg0),
		
		(assign, reg0, ":items_cost"),
		(overlay_set_text, "$g_presentation_obj_item_select_22", "str_item_cost_reg0"),
		(try_begin),
		  (ge, ":player_gold", reg0),
		  (overlay_set_color, "$g_presentation_obj_item_select_22", 0xFFFFFF),
		(else_try),
		  (overlay_set_color, "$g_presentation_obj_item_select_22", 0xFF0000),
		(try_end),
		
		(assign, reg0, ":squad_cost"),
		(overlay_set_text, "$g_presentation_obj_item_select_21", "str_squad_cost_reg0"),
		(store_add, reg0, ":items_cost", ":squad_cost"),
		(try_begin),
		  (ge, ":player_gold", reg0),
		  (overlay_set_color, "$g_presentation_obj_item_select_21", 0xFFFFFF),
		(else_try),
		  (overlay_set_color, "$g_presentation_obj_item_select_21", 0xFF0000),
		(try_end),
		
	  (else_try),
	    (assign, ":squad_cost", 0),
	  (end_try),
	  
	  (store_add, reg0, ":items_cost", ":squad_cost"),
	  (overlay_set_text, "$g_presentation_obj_item_select_12", "str_total_item_cost_reg0"),
	  (try_begin),
	 	 (ge, ":player_gold", reg0),
	 	 (overlay_set_color, "$g_presentation_obj_item_select_12", 0xFFFFFF),
	  (else_try),
	 	 (overlay_set_color, "$g_presentation_obj_item_select_12", 0xFF0000),
	  (try_end),	 
  ]),
  
  # script_multiplayer_set_g_multiplayer_is_game_type_captain
  # Input: none
  # Output: none 
  ("multiplayer_set_g_multiplayer_is_game_type_captain",
    [ 
	  (try_begin), 
		(this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_captain_team_deathmatch),
		(this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_captain_coop),
		(this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_captain_battle),
		(eq, "$g_multiplayer_game_type", multiplayer_game_type_captain_siege),
		(assign, "$g_multiplayer_is_game_type_captain", 1),
	 (else_try),
		(assign, "$g_multiplayer_is_game_type_captain", 0),
	 (try_end),
  ]),
  
  
  # script_cf_multiplayer_can_buy_squad
  # Input: none
  # Output: reg0:can buy squad 
  ("cf_multiplayer_can_buy_squad",
    [ 
	  (assign, ":can_buy_squad", 0),
	  (try_begin), 
		(eq, "$g_multiplayer_is_game_type_captain", 1),
		(assign, ":can_buy_squad", 1),
	  (try_end),
	  # disable squad buying for second team
	  (try_begin),
	    (eq, ":can_buy_squad", 1),
		(eq, "$g_multiplayer_game_type", multiplayer_game_type_captain_battle),
	    (multiplayer_get_my_team, ":my_team"),
	    (eq, ":my_team", 1),
		(assign, ":can_buy_squad", 0),
	  (try_end),
	  (eq, ":can_buy_squad", 1),
  ]),
    
  # script_game_missile_launch
  # Input: arg1 = shooter_agent_id, arg2 = weapon_item_id, pos1 = weapon_item_position
  # Output: none 
  ("game_missile_launch",
    [ 
	(store_script_param, ":item_id", 2),
    (try_begin),
      (this_or_next|eq, ":item_id", "itm_samopal"),
      (eq, ":item_id", "itm_samopal_b"),
      (call_script, "script_oim_on_musket_on_attack", itp_type_musket, 0, 115, -4, -106),
    (else_try),
      (this_or_next|eq, ":item_id", "itm_old_musket"),
      (eq, ":item_id", "itm_old_musket_b"),
      (call_script, "script_oim_on_musket_on_attack", itp_type_musket, 0, 125, -4, -115),
    (else_try),
      (eq, ":item_id", "itm_musket"),
      (call_script, "script_oim_on_musket_on_attack", itp_type_musket, 0, 130, -4, -120),
    (else_try),
      (eq, ":item_id", "itm_good_musket"),
      (call_script, "script_oim_on_musket_on_attack", itp_type_musket, 0, 140, -4, -130),
    (else_try),
      (this_or_next|eq, ":item_id", "itm_turk_musket_fitil_a"),
      (eq, ":item_id", "itm_turk_musket_fitil_b"),
      (call_script, "script_oim_on_musket_on_attack", itp_type_musket, 0, 140, -5, -135),
    (else_try),
      (eq, ":item_id", "itm_turk_musket_koleso"),
      (call_script, "script_oim_on_musket_on_attack", itp_type_musket, 0, 145, -4, -140),
    (else_try),
      (eq, ":item_id", "itm_turk_musket"),
      (call_script, "script_oim_on_musket_on_attack", itp_type_musket, 0, 145, -4, -138),
    (else_try),
      (eq, ":item_id", "itm_turk_musket_b"),
      (call_script, "script_oim_on_musket_on_attack", itp_type_musket, 0, 145, -4, -133),
    (else_try),
      (this_or_next|eq, ":item_id", "itm_mushket_udarniy"),
      (eq, ":item_id", "itm_mushket_udarniy_b"),
      (call_script, "script_oim_on_musket_on_attack", itp_type_musket, 0, 140, -4, -135),
    (else_try),
      (this_or_next|eq, ":item_id", "itm_karabin_old_a"),
      (this_or_next|eq, ":item_id", "itm_karabin_old_b"),
      (this_or_next|eq, ":item_id", "itm_karabin"),
      (eq, ":item_id", "itm_karabin_good"),
      (call_script, "script_oim_on_musket_on_attack", itp_type_musket, 0, 90, -4, -80),
    (else_try),
      (this_or_next|eq, ":item_id", "itm_karabin_batarey"),
      (eq, ":item_id", "itm_karabin_batarey_good"),
      (call_script, "script_oim_on_musket_on_attack", itp_type_musket, 0, 110, -4, -105),
    (else_try),
      (this_or_next|eq, ":item_id", "itm_old_pistol"),
      (eq, ":item_id", "itm_good_pistol"),
      (call_script, "script_oim_on_musket_on_attack", itp_type_pistol, 38, 48, -30, -30),
    (else_try),
      (this_or_next|eq, ":item_id", "itm_pistol"),
      (eq, ":item_id", "itm_good_pistol_b"),
      (call_script, "script_oim_on_musket_on_attack", itp_type_pistol, 32, 42, -30, -30),
    (else_try),
      (this_or_next|eq, ":item_id", "itm_pistol_b"),
      (eq, ":item_id", "itm_good_pistol_c"),
      (call_script, "script_oim_on_musket_on_attack", itp_type_pistol, 33, 45, -30, -30),
    (else_try),
      (this_or_next|eq, ":item_id", "itm_zakaz_pistol1"),
      (this_or_next|eq, ":item_id", "itm_bad_pistol"),
      (eq, ":item_id", "itm_fast_pistol"),
      (call_script, "script_oim_on_musket_on_attack", itp_type_pistol, 32, 42, -30, -30),
    (else_try),
      (this_or_next|eq, ":item_id", "itm_zakaz_pistol2"),
      (this_or_next|eq, ":item_id", "itm_zakaz_2stwol_udar1"),
      (this_or_next|eq, ":item_id", "itm_zakaz_2stwol_udar2"),
      (this_or_next|eq, ":item_id", "itm_norm_pistol"),
      (this_or_next|eq, ":item_id", "itm_uber_pistol"),
      (eq, ":item_id", "itm_m_dwustwol_pistol"),
      (call_script, "script_oim_on_musket_on_attack", itp_type_pistol, 33, 45, -30, -30),
    (else_try),
      (this_or_next|eq, ":item_id", "itm_zakaz_2stwol_koleso2"),
      (this_or_next|eq, ":item_id", "itm_zakaz_2stwol_koleso"),
      (this_or_next|eq, ":item_id", "itm_zakaz_karabin"),
      (this_or_next|eq, ":item_id", "itm_uber_karabin"),
      (eq, ":item_id", "itm_m_dwustwol_karabin"),
      (call_script, "script_oim_on_musket_on_attack", itp_type_musket, 0, 110, -4, -105),
    (else_try),
      (this_or_next|eq, ":item_id", "itm_zakaz_ewro_puha"),
      (this_or_next|eq, ":item_id", "itm_uber_mushket"),
      (eq, ":item_id", "itm_t_bad_musket"),
      (call_script, "script_oim_on_musket_on_attack", itp_type_musket, 0, 140, -4, -130),
    (else_try),
      (this_or_next|eq, ":item_id", "itm_zakaz_turok_puha"),
      (this_or_next|eq, ":item_id", "itm_t_norm_musket"),
      (this_or_next|eq, ":item_id", "itm_t_good_musket"),
      (eq, ":item_id", "itm_t_uber_musket"),
      (call_script, "script_oim_on_musket_on_attack", itp_type_musket, 0, 145, -4, -133),
    (else_try),
      (eq, ":item_id", "itm_samopal_m"),
      (call_script, "script_oim_on_musket_on_attack", itp_type_musket, 0, 115, -4, -106),
    (else_try),
      (eq, ":item_id", "itm_power_pistol"),
      (call_script, "script_oim_on_musket_on_attack", itp_type_pistol, 38, 48, -30, -30),
    (else_try),
      (this_or_next|eq, ":item_id", "itm_bad_karabin"),
      (this_or_next|eq, ":item_id", "itm_norm_karabin"),
      (eq, ":item_id", "itm_good_karabin"),
      (call_script, "script_oim_on_musket_on_attack", itp_type_musket, 0, 90, -4, -80),
    (else_try),
      (eq, ":item_id", "itm_bad_musket"),
      (call_script, "script_oim_on_musket_on_attack", itp_type_musket, 0, 125, -4, -115),
    (else_try),
      (this_or_next|eq, ":item_id", "itm_norm_musket"),
      (eq, ":item_id", "itm_good_musket_m"),
      (call_script, "script_oim_on_musket_on_attack", itp_type_musket, 0, 130, -4, -120),
    (try_end),
	  
  ]),
 
  # script_game_missile_dives_into_water
  # Input: arg1 = missile_item_id, pos1 = missile_position_on_water
  # Output: none 
  ("game_missile_dives_into_water",
    [ 
	#(store_script_param, ":missile_item_id", 1),
	(copy_position, pos51, pos1), 
	(particle_system_burst_no_sync, "psys_water_hit_a", pos51, 8),
	(position_move_z, pos51, 5, 1),
	(particle_system_burst_no_sync, "psys_water_hit_b", pos51, 4),
  ]),

#berk	
#script_add_troop_to_cur_tableau_for_multiplayer
  # INPUT: troop_no
  # OUTPUT: none
  ("add_troop_to_cur_tableau_for_multiplayer",
    [
       (store_script_param, ":troop_no",1),

       (set_fixed_point_multiplier, 100),

       (cur_tableau_clear_override_items),
       (cur_tableau_set_override_flags, af_override_fullhelm),
##       (cur_tableau_set_override_flags, af_override_head|af_override_weapons),
       
       (init_position, pos2),
       (cur_tableau_set_camera_parameters, 1, 8, 8, 10, 10000),

       (init_position, pos5),
       (assign, ":cam_height", 300),
#       (val_mod, ":camera_distance", 5),
       (assign, ":camera_distance", 1000),
       (assign, ":camera_yaw", -15),
       (assign, ":camera_pitch", -18),
       (assign, ":animation", anim_stand_man),
	   
	   (troop_get_inventory_slot, ":horse_item", ":troop_no", ek_horse),
       (try_begin),
         (gt, ":horse_item", 0),
         (cur_tableau_add_horse, ":horse_item", pos2, "anim_horse_stand", 0),
         (assign, ":animation", "anim_ride_0"),
         (assign, ":camera_pitch", -20),
		 (assign, ":camera_yaw", -25),
         (assign, ":cam_height", 500),
         (assign, ":camera_distance", 1400),
		 (position_move_x, pos5, 50, 0),
       (try_end),
       (position_set_z, pos5, ":cam_height"),

       # camera looks towards -z axis
       (position_rotate_x, pos5, -90),
       (position_rotate_z, pos5, 180),

       # now apply yaw and pitch
       (position_rotate_y, pos5, ":camera_yaw"),
       (position_rotate_x, pos5, ":camera_pitch"),
       (position_move_z, pos5, ":camera_distance", 0),
       (position_move_x, pos5, -120, 0),
	   (position_move_y, pos5, 130, 0),

       (try_begin),
         (troop_is_hero, ":troop_no"),
         (cur_tableau_add_troop, ":troop_no", pos2, ":animation", -1),
       (else_try),
         (store_mul, ":random_seed", ":troop_no", 126233),
         (val_mod, ":random_seed", 1000),
         (val_add, ":random_seed", 1),
         (cur_tableau_add_troop, ":troop_no", pos2, ":animation", ":random_seed"),
       (try_end),
       (cur_tableau_set_camera_position, pos5),

       (copy_position, pos8, pos5),
       (position_rotate_x, pos8, -90), #y axis aligned with camera now. z is up
       (position_rotate_z, pos8, 30), 
       (position_rotate_x, pos8, -60), 
       (cur_tableau_add_sun_light, pos8, 175,150,125),
     ]),	 

  # script_mp_set_player_troop_id
  # Input: arg1 = player_no, arg2 = troop_id, arg3 = sync with server
  # Output: none
  ("mp_set_player_troop_id",
    [ 
	  (store_script_param, ":player_no", 1),
	  (store_script_param, ":troop_id", 2),
	  (store_script_param, ":do_sync", 3),
	  (player_set_troop_id, ":player_no", ":troop_id"),
	  (try_begin),
	    (eq, ":troop_id", -1),
		(call_script, "script_multiplayer_clear_player_selected_items", ":player_no"), # just to make sure
	  (else_try),
		(call_script, "script_multiplayer_set_default_item_selections_for_troop", ":player_no", ":troop_id"),
	  (try_end),
	  # server will do the same, so no need to send the new selections
	  (try_begin),
		(neq, ":do_sync", 0),
		(multiplayer_send_int_to_server, multiplayer_event_change_troop_id, ":troop_id"),
	  (try_end),
  ]),

  # script_mp_set_player_team_no
  # Input: arg1 = player_no, arg2 = team_no, arg3 = sync with server
  # Output: none 
  ("mp_set_player_team_no",
    [
	  (store_script_param, ":player_no", 1),
	  (store_script_param, ":team_no", 2),
	  (store_script_param, ":do_sync", 3),
	  (player_set_team_no, ":player_no", ":team_no"),
	  (try_begin),
		(neq, ":do_sync", 0),
		
		#(assign, reg0, ":team_no"),
		#(display_debug_message, "@{!}multiplayer_event_change_team_no is sent with team_no: {reg0}"),
		
	    (multiplayer_send_int_to_server, multiplayer_event_change_team_no, ":team_no"),
	  (try_end),
	  (call_script, "script_mp_set_player_troop_id", ":player_no", -1, 0),
	  (call_script, "script_multiplayer_reset_squad_on_team_change_for_captain_game_types", ":player_no"),
	  # server will do the same, so no need to send the new selections
  ]),
  
  # script_mp_get_troop_squad_index_for_player
  # Input: arg1 = player_no, arg2 = troop_no
  # Output: reg0 = squad_index 
  ("mp_get_troop_squad_index_for_player",
    [
	  (store_script_param, ":player_no", 1),
	  (store_script_param, ":troop_no", 2),
	  (player_get_troop_id, ":player_troop_no", ":player_no"),
	  (store_troop_faction, ":player_faction_no", ":player_troop_no"),
	  (assign, ":found_troop", 0),
	  (assign, ":troop_index", -1),
	  (try_for_range, ":troop_array_index", 0, 2),
	    (eq, ":found_troop", 0),
		(try_begin),
		  (eq, ":troop_array_index", 0),
		  (assign, ":troop_array_begin", captain_multiplayer_troops_begin),
		  (assign, ":troop_array_end", captain_multiplayer_troops_end),
		(else_try),
		  (assign, ":troop_array_begin", captain_multiplayer_new_troops_begin),
		  (assign, ":troop_array_end", captain_multiplayer_new_troops_end),
		(try_end),
		(try_for_range, ":cur_troop", ":troop_array_begin", ":troop_array_end"),				
		  (eq, ":found_troop", 0),
		  (store_troop_faction, ":trp_faction", ":cur_troop"),
		  (eq, ":player_faction_no", ":trp_faction"),
		  (val_add, ":troop_index", 1),
		  (eq, ":cur_troop", ":troop_no"),
		  (assign, ":found_troop", 1),
		(try_end),
	  (try_end),
	  (assign, reg0, ":troop_index"),
  ]),
  
  # script_mp_get_troop_with_squad_index_for_player
  # Input: arg1 = player_no, arg2 = squad_index
  # Output: reg0 = troop_no  
  ("mp_get_troop_with_squad_index_for_player",
    [
	  (store_script_param, ":player_no", 1),
	  (store_script_param, ":squad_index", 2),
	  (player_get_troop_id, ":player_troop_no", ":player_no"),
	  (store_troop_faction, ":player_faction_no", ":player_troop_no"),
	  (assign, ":found_troop", -1),
	  (assign, ":troop_index", -1),
	  (try_for_range, ":troop_array_index", 0, 2),
	    (lt, ":found_troop", 0),
		(try_begin),
		  (eq, ":troop_array_index", 0),
		  (assign, ":troop_array_begin", captain_multiplayer_troops_begin),
		  (assign, ":troop_array_end", captain_multiplayer_troops_end),
		(else_try),
		  (assign, ":troop_array_begin", captain_multiplayer_new_troops_begin),
		  (assign, ":troop_array_end", captain_multiplayer_new_troops_end),
		(try_end),
		(try_for_range, ":cur_troop", ":troop_array_begin", ":troop_array_end"),				
		  (lt, ":found_troop", 0),
		  (store_troop_faction, ":trp_faction", ":cur_troop"),
		  (eq, ":player_faction_no", ":trp_faction"),
		  (val_add, ":troop_index", 1),
		  (eq, ":troop_index", ":squad_index"),
		  (assign, ":found_troop", ":cur_troop"),
		(try_end),
	  (try_end),
	  (assign, reg0, ":found_troop"),	  
  ]),
  
  
  # script_mp_add_players_last_rounds_alive_squad_earnings
  # Input: none
  # Output: none
  ("mp_add_players_last_rounds_alive_squad_earnings",
    [
		(try_for_agents, ":cur_agent"),
			(agent_is_alive, ":cur_agent"),
			(agent_is_human, ":cur_agent"),
			(agent_is_non_player, ":cur_agent"),
			(agent_get_group, ":owner_player", ":cur_agent"),
			(player_is_active, ":owner_player"),
			(agent_get_troop_id, ":agent_troop_id", ":cur_agent"),
			(this_or_next|is_between, ":agent_troop_id", captain_multiplayer_troops_begin, captain_multiplayer_troops_end),
			(is_between, ":agent_troop_id", captain_multiplayer_new_troops_begin, captain_multiplayer_new_troops_end), # just to make sure
			(player_get_slot, ":additional_gold", ":owner_player", slot_player_last_rounds_used_item_earnings),
			(troop_get_slot, ":squad_price", ":agent_troop_id", slot_troop_mp_squad_price),
			(val_add, ":additional_gold", ":squad_price"),
			(player_set_slot, ":owner_player", slot_player_last_rounds_used_item_earnings, ":additional_gold"),
			
			#(assign, reg0, ":squad_price"),
			#(assign, reg0, ":owner_player"),
			#(assign, reg0, ":additional_gold"),
			#(str_store_troop_name, s0, ":agent_troop_id"),
			#(display_debug_message, "@{!}{reg0} gold is added to player no: {reg1} due to an alive {s0} bot. new item_earnings is {reg2}"),
		(try_end),
	]),
	
	
	# script_multiplayer_ccoop_set_prison_cart_visibility
	# Input: arg1 = visible
	# Output: none
	("multiplayer_ccoop_set_prison_cart_visibility",	
	[
		(store_script_param, ":visibility", 1),	
		
		(set_fixed_point_multiplier, 100), 
		
		(try_begin),
			(scene_prop_get_instance, ":prison_cart", "spr_prison_cart", 0),
			(scene_prop_get_instance, ":prison_cart_door_left", "spr_prison_cart_door_left", 0),
			(scene_prop_get_instance, ":prison_cart_door_right", "spr_prison_cart_door_right", 0),
			
			(try_begin),				
				(eq, ":visibility", 0), # if make invisible
				
				(scene_prop_fade_out, ":prison_cart", 400),
				(scene_prop_fade_out, ":prison_cart_door_left", 400),
				(scene_prop_fade_out, ":prison_cart_door_right", 400),
				
				(prop_instance_enable_physics, ":prison_cart", 0),
				(prop_instance_enable_physics, ":prison_cart_door_left", 0),
				(prop_instance_enable_physics, ":prison_cart_door_right", 0),
				
				(store_mission_timer_a, "$g_multiplayer_ccoop_move_prison_cart"),
				(val_add, "$g_multiplayer_ccoop_move_prison_cart", 5), # after 5secs (related to 400)
				
				(assign, "$g_prison_cart_previous_point", "$g_prison_cart_point"),
				(assign, "$g_prison_cart_point", 0),
			(else_try),
				(gt, ":visibility", 0), # if make visible
			
				(scene_prop_fade_in, ":prison_cart", 300),
				(scene_prop_fade_in, ":prison_cart_door_left", 300),
				(scene_prop_fade_in, ":prison_cart_door_right", 300),
				
				(prop_instance_enable_physics, ":prison_cart", 1),
				(prop_instance_enable_physics, ":prison_cart_door_left", 1),
				(prop_instance_enable_physics, ":prison_cart_door_right", 1),
			(try_end),
		(try_end),
	]),
  
  	# script_multiplayer_ccoop_spawn_player_and_bots
	# INPUT: 1. player_no
	# OUTPUT: 0 if player not spawned, 1 if player spawned on reg0
	("multiplayer_ccoop_spawn_player_and_bots",
	[	
		(store_script_param, ":player_no", 1),
				
		(try_begin),
			(neg|player_is_busy_with_menus, ":player_no"),
			(player_get_team_no, ":player_team", ":player_no"), #if player is currently spectator do not spawn his agent
			(lt, ":player_team", multi_team_spectator),

			(player_get_troop_id, ":player_troop", ":player_no"), #if troop is not selected do not spawn his agent
			(ge, ":player_troop", 0),
			
			(call_script, "script_multiplayer_buy_agent_equipment", ":player_no"),

			(troop_get_inventory_slot, ":has_horse", ":player_troop", ek_horse),
			(try_begin),
				(ge, ":has_horse", 0),
				(assign, ":is_horseman", 1),
			(else_try),
				(assign, ":is_horseman", 0),
			(try_end),
			
			(call_script, "script_multiplayer_get_bots_count", ":player_no"), 
			(assign, ":bot_count", reg0),
			
			(try_begin),
				#(gt, "$g_prison_cart_point", 0),
				(gt, "$g_multiplayer_ccoop_enemy_respawn_secs", 31),
				
				(assign, reg0, "$g_prison_cart_previous_point"),
				(display_debug_message, "@{!}prison cart spawn at point {reg0}"),
				
				(player_spawn_new_agent, ":player_no", "$g_prison_cart_previous_point"),
				(call_script, "script_multiplayer_spawn_player_bot_squad_at_point", ":player_no", ":player_team", "$g_prison_cart_previous_point"), 
			(else_try),
				(try_begin),
					(gt, ":bot_count", 0),
					(call_script, "script_multiplayer_get_spawn_point_close_to_bots", ":player_no"), 
					(player_spawn_new_agent, ":player_no", reg0),
					
					# spawn requested bots
					(call_script, "script_multiplayer_get_spawn_point_close_to_bots", ":player_no"),
					(call_script, "script_multiplayer_spawn_player_bot_squad_at_point", ":player_no", ":player_team", reg0),
				(else_try), 
					(call_script, "script_multiplayer_find_spawn_point", ":player_team", 1, ":is_horseman"), 
					(assign, ":point_no", reg0),
					(player_spawn_new_agent, ":player_no", ":point_no"),
					(call_script, "script_multiplayer_spawn_player_bot_squad_at_point", ":player_no", ":player_team", ":point_no"), 
				(end_try),
			(end_try),
			
			(try_begin),
				(player_get_slot, ":player_first_spawn", ":player_no", slot_player_first_spawn),
				(gt, ":player_first_spawn", 0),
				#(player_set_slot, ":player_no", slot_player_join_time, ":player_join_time"),
				(player_set_slot, ":player_no", slot_player_first_spawn, 0),
			(try_end),
			
			(assign, reg0, 1),  # player spawned
		(else_try),
			(assign, reg0, 0),  # player not spawned
		(end_try),
	]),
	
	# script_multiplayer_ccoop_get_alive_enemy_count
	# Input: none
	# Output: reg0 = alive_enemy_count
	("multiplayer_ccoop_get_alive_enemy_count",
	[
		(assign, ":alive_enemy_count", 0),
		(try_for_agents, ":cur_agent"),
			(try_begin),
				(agent_is_human, ":cur_agent"),
				(agent_is_alive, ":cur_agent"),
				(agent_get_team, ":cur_agent_team", ":cur_agent"),
				(eq, ":cur_agent_team", 1),
				(val_add, ":alive_enemy_count", 1),
			(try_end),
		(try_end),
		(assign, reg0, ":alive_enemy_count"),
	]),
	
	# script_avarage_of_two_points
	# Input: pos1, pos2
	# Output: pos1
	("avarage_of_two_points",
	[
		(position_get_x, ":x_pos1", pos1),
		(position_get_x, ":x_pos2", pos2),
		(val_add, ":x_pos1", ":x_pos2"),
		(val_div, ":x_pos1", 2),
		(position_set_x, pos1, ":x_pos1"),
		
		(position_get_y, ":y_pos1", pos1),
		(position_get_y, ":y_pos2", pos2),
		(val_add, ":y_pos1", ":y_pos2"),
		(val_div, ":y_pos1", 2),
		(position_set_y, pos1, ":y_pos1"),
		
		(position_get_z, ":z_pos1", pos1),
		(position_get_z, ":z_pos2", pos2),
		(val_add, ":z_pos1", ":z_pos2"),
		(val_div, ":z_pos1", 2),
		(position_set_z, pos1, ":z_pos1"),
	]),
	
	# script_multiplayer_ccoop_give_round_bonus_gold
	# Input: none
	# Output: none
	("multiplayer_ccoop_give_round_bonus_gold",
	[
		(try_begin),
			(gt, "$g_multiplayer_ccoop_wave_no", 0),
			(store_mul, ":bonus_gold", "$g_multiplayer_ccoop_wave_no", 100),
			(val_add, ":bonus_gold", 400),
		
			(get_max_players, ":num_players"),
			(try_for_range, ":cur_player", 0, ":num_players"),
				(player_is_active, ":cur_player"),
				(player_get_gold, ":player_gold", ":cur_player"),
				(val_add, ":player_gold", ":bonus_gold"),
				(player_set_gold, ":cur_player", ":player_gold", multi_max_gold_that_can_be_stored),
			(try_end),
		(try_end),
	]),
	
	# script_multiplayer_ccoop_destroy_prison_cart
	# Input: none
	# Output: none
	("multiplayer_ccoop_destroy_prison_cart",
	[
		(try_begin),
			(multiplayer_is_server),
			
			(try_begin),
				(multiplayer_is_dedicated_server),
				
				(assign, "$g_prison_cart_previous_point", "$g_prison_cart_point"),
				(assign, "$g_prison_cart_point", 0),
								
				(scene_prop_get_instance, ":prison_cart", "spr_prison_cart", 0),
				(scene_prop_get_instance, ":prison_cart_door_left", "spr_prison_cart_door_left", 0),
				(scene_prop_get_instance, ":prison_cart_door_right", "spr_prison_cart_door_right", 0),
				
				(set_fixed_point_multiplier, 100), 
				
				(prop_instance_get_position, pos1, ":prison_cart"),
				(position_set_z, pos1, -4000), #40m down
				(prop_instance_set_position, ":prison_cart", pos1),						
				(prop_instance_set_position, ":prison_cart_door_left", pos1),						
				(prop_instance_set_position, ":prison_cart_door_right", pos1),			
			(try_end),
			
			(display_debug_message, "@{!}destroy prison cart"),
			
			# send destroy prison cart event to clients
			(get_max_players, ":max_players"),
			(try_for_range, ":cur_player", 0, ":max_players"),
				(player_is_active, ":cur_player"),	
				(multiplayer_send_int_to_player, ":cur_player", multiplayer_event_other_events, 
					multiplayer_event_other_destroy_prison_cart),
			(try_end),
			
		(try_end),
	]),
	
	# script_multiplayer_ccoop_spawn_prison_cart
	# INPUT: none
	# OUTPUT: none
	("multiplayer_ccoop_spawn_prison_cart",
	[
		(try_begin),
			(multiplayer_is_server),
			
			# get prison cart random spawn point
			(store_random_in_range, "$g_prison_cart_point", 70, 75),
			
			#
			(assign, reg0, "$g_prison_cart_point"),
			(display_debug_message, "@{!}spawning prison cart at point {reg0}"),
			#
			
			# set prison cart position
			(set_fixed_point_multiplier, 100),
			(scene_prop_get_instance, ":prison_cart", "spr_prison_cart", 0),			
			(entry_point_get_position, pos1, "$g_prison_cart_point"),
			(position_move_y, pos1, -400), #4m back
			(position_set_z_to_ground_level, pos1),
			(prop_instance_set_position, ":prison_cart", pos1),
		
			# place left door
			(scene_prop_get_instance, ":prison_cart_door_left", "spr_prison_cart_door_left", 0),
			(init_position, pos2),		
			(position_set_x, pos2, 84, 0),
			(position_set_y, pos2, -314, 0), 
			(position_set_z, pos2, 121, 0), 
			(position_transform_position_to_parent, pos3, pos1, pos2),
			(prop_instance_set_position, ":prison_cart_door_left", pos3),
			(scene_prop_set_hit_points, ":prison_cart_door_left", 300),
			
			# place right door
			(scene_prop_get_instance, ":prison_cart_door_right", "spr_prison_cart_door_right", 0),			
			(init_position, pos2),
			(position_set_x, pos2, -84, 0), 
			(position_set_y, pos2, -315, 0), 
			(position_set_z, pos2, 123, 0),
			(position_transform_position_to_parent, pos3, pos1, pos2),
			(prop_instance_set_position, ":prison_cart_door_right", pos3),
			(scene_prop_set_hit_points, ":prison_cart_door_right", 300),					
			
			(try_begin),
				#(neg|multiplayer_is_dedicated_server),
				(call_script, "script_multiplayer_ccoop_set_prison_cart_visibility", 1),
				
				# display prison cart hint message to alive players				
				(get_player_agent_no, ":player_agent"),
				(ge, ":player_agent", 0),
				(display_message, "str_prison_cart_hint"),	
				
				(start_presentation, "prsnt_multiplayer_ccoop_next_wave_time_counter"), # to display ask for help to respawn hint
			(try_end),
					
			# send destroy prison cart event to clients
			(get_max_players, ":max_players"),
			(try_for_range, ":cur_player", 1, ":max_players"),
				(try_begin),
					(player_is_active, ":cur_player"),	
					(multiplayer_send_3_int_to_player, ":cur_player", multiplayer_event_other_events, 
						multiplayer_event_other_spawn_prison_cart, "$g_prison_cart_point", 300),
				(try_end),
			(try_end),
		(try_end),
	]),
	
	# script_multiplayer_ccoop_start_player_and_squad_respawn_period
	# INPUT: arg1 = spawn_alive_player_squad
	# OUTPUT: none
	("multiplayer_ccoop_start_player_and_squad_respawn_period",
	[
		(try_begin),
			(multiplayer_is_server),
			
			(store_script_param, "$g_multiplayer_ccoop_spawn_alive_player_squad_and_minus_one_first_spawn_slots_and_minus_one_first_spawn_slots", 1),
			
			# reset first spawn slot
			(get_max_players, ":max_players"),
			(try_for_range, ":player_no", 0, ":max_players"),
				(player_is_active, ":player_no"),
				(try_begin),
					(eq, "$g_multiplayer_ccoop_spawn_alive_player_squad_and_minus_one_first_spawn_slots_and_minus_one_first_spawn_slots", 1),
					(player_set_slot, ":player_no", slot_player_first_spawn, 1),
				(else_try),
					(player_get_slot, ":player_first_spawn", ":player_no", slot_player_first_spawn),
					(ge, ":player_first_spawn", 0),
					(player_set_slot, ":player_no", slot_player_first_spawn, 1),
				(try_end),
			(try_end),
			
			# start player&squad spawn period
			(assign, "$g_multiplayer_ccoop_spawn_player_and_squad_counter", 30),
		(try_end),
	]),
      
	# script_multiplayer_upgrade_player_equipment
	# INPUT: arg1 = player_no
	# OUTPUT: none
	("multiplayer_upgrade_player_equipment",
	[
		(store_script_param, ":player_no", 1),
		
		(assign, reg0, ":player_no"),
		(display_debug_message, "@{!}multiplayer_upgrade_player_equipment: {reg0}"),	
		
		(player_get_troop_id, ":player_troop", ":player_no"),
		(player_get_agent_id, ":player_agent", ":player_no"),
		(player_get_gold, ":player_gold", ":player_no"),
		(try_for_range, ":cur_item_slot", 0, ek_horse), # don't include horse
			(store_add, ":cur_player_slot", ":cur_item_slot", slot_player_cur_selected_item_indices_begin),
			(try_begin),
				(player_item_slot_is_picked_up, ":player_no", ":cur_item_slot"),
				(player_set_slot, ":player_no", ":cur_player_slot", -1),
			(else_try),
				(agent_get_item_slot, ":agent_item", ":player_agent", ":cur_item_slot"),
				(player_set_slot, ":player_no", ":cur_player_slot", ":agent_item"),
			(try_end),
		(try_end),
		(player_set_slot, ":player_no", slot_player_cur_selected_item_indices_begin + 8, -1), # mark horse as -1
		(call_script, "script_multiplayer_calculate_cur_selected_items_cost", ":player_no", 0),
		(assign, ":added_gold", reg0),
		(val_add, ":player_gold", ":added_gold"),
		
		#moving original values to temp slots
		(try_for_range, ":i_item", slot_player_selected_item_indices_begin, slot_player_selected_item_indices_end),
			(player_get_slot, ":selected_item_index", ":player_no", ":i_item"),
			(store_sub, ":i_cur_selected_item", ":i_item", slot_player_selected_item_indices_begin),
			(try_begin),
				(this_or_next|le, ":selected_item_index", 0),
				(this_or_next|player_item_slot_is_picked_up, ":player_no", ":i_cur_selected_item"),
				(eq, ":i_cur_selected_item", ek_horse), # remove horse selection for this special case
				(assign, ":selected_item_index", -1),
			(try_end),
			(val_add, ":i_cur_selected_item", slot_player_cur_selected_item_indices_begin),
			(player_set_slot, ":player_no", ":i_cur_selected_item", ":selected_item_index"),
		(try_end),
		(assign, ":end_cond", 1000),
		(try_for_range, ":unused", 0, ":end_cond"),
			(call_script, "script_multiplayer_calculate_cur_selected_items_cost", ":player_no", 0),
			(assign, ":total_cost", reg0),
			(try_begin),
				(gt, ":total_cost", ":player_gold"),
				#downgrade one of the selected items
				#first normalize the prices
				#then prioritize some of the weapon classes for specific troop classes
				(call_script, "script_multiplayer_get_troop_class", ":player_troop"),
				(assign, ":player_troop_class", reg0),
				
				(assign, ":max_cost_value", 0),
				(assign, ":max_cost_value_index", -1),
				(try_for_range, ":i_item", slot_player_cur_selected_item_indices_begin, slot_player_cur_selected_item_indices_end),
					(player_get_slot, ":item_id", ":player_no", ":i_item"),
					(ge, ":item_id", 0), #might be -1 for horses etc.
					(call_script, "script_multiplayer_get_item_value_for_troop", ":item_id", ":player_troop"),
					(assign, ":item_value", reg0),
					(store_sub, ":item_type", ":i_item", slot_player_cur_selected_item_indices_begin),
					(try_begin), #items
						(this_or_next|eq, ":item_type", 0),
						(this_or_next|eq, ":item_type", 1),
						(this_or_next|eq, ":item_type", 2),
						(eq, ":item_type", 3),
						(val_mul, ":item_value", 5),
					(else_try), #head
						(eq, ":item_type", 4),
						(val_mul, ":item_value", 4),
					(else_try), #body
						(eq, ":item_type", 5),
						(val_mul, ":item_value", 2),
					(else_try), #foot
						(eq, ":item_type", 6),
						(val_mul, ":item_value", 8),
					(else_try), #gloves
						(eq, ":item_type", 7),
						(val_mul, ":item_value", 8),
					(else_try), #horse
					#base value (most expensive)
					(try_end),
					(item_get_slot, ":item_class", ":item_id", slot_item_multiplayer_item_class),
					(try_begin),
						(eq, ":player_troop_class", multi_troop_class_infantry),
						(this_or_next|eq, ":item_class", multi_item_class_type_sword),
						(this_or_next|eq, ":item_class", multi_item_class_type_axe),
						(this_or_next|eq, ":item_class", multi_item_class_type_blunt),
						(this_or_next|eq, ":item_class", multi_item_class_type_war_picks),
						(this_or_next|eq, ":item_class", multi_item_class_type_two_handed_sword),
						(this_or_next|eq, ":item_class", multi_item_class_type_small_shield),
						(eq, ":item_class", multi_item_class_type_two_handed_axe),
						(val_div, ":item_value", 2),
					(else_try),
						(eq, ":player_troop_class", multi_troop_class_spearman),
						(this_or_next|eq, ":item_class", multi_item_class_type_spear),
						(eq, ":item_class", multi_item_class_type_large_shield),
						(val_div, ":item_value", 2),
					(else_try),
						(eq, ":player_troop_class", multi_troop_class_cavalry),
						(this_or_next|eq, ":item_class", multi_item_class_type_lance),
						(this_or_next|eq, ":item_class", multi_item_class_type_sword),
						(eq, ":item_class", multi_item_class_type_horse),
						(val_div, ":item_value", 2),
					(else_try),
						(eq, ":player_troop_class", multi_troop_class_archer),
						(this_or_next|eq, ":item_class", multi_item_class_type_bow),
						(eq, ":item_class", multi_item_class_type_arrow),
						(val_div, ":item_value", 2),
					(else_try),
						(eq, ":player_troop_class", multi_troop_class_crossbowman),
						(this_or_next|eq, ":item_class", multi_item_class_type_crossbow),
						(eq, ":item_class", multi_item_class_type_bolt),
						(val_div, ":item_value", 2),
					(else_try),
						(eq, ":player_troop_class", multi_troop_class_mounted_archer),
						(this_or_next|eq, ":item_class", multi_item_class_type_bow),
						(this_or_next|eq, ":item_class", multi_item_class_type_arrow),
						(eq, ":item_class", multi_item_class_type_horse),
						(val_div, ":item_value", 2),
					(else_try),
						(eq, ":player_troop_class", multi_troop_class_mounted_crossbowman),
						(this_or_next|eq, ":item_class", multi_item_class_type_crossbow),
						(this_or_next|eq, ":item_class", multi_item_class_type_bolt),
						(eq, ":item_class", multi_item_class_type_horse),
						(val_div, ":item_value", 2),
					(try_end),

					(try_begin),
						(gt, ":item_value", ":max_cost_value"),
						(assign, ":max_cost_value", ":item_value"),
						(assign, ":max_cost_value_index", ":i_item"),
					(try_end),
				(try_end),

				#max_cost_value and max_cost_value_index will definitely be valid
				#unless no items are left (therefore some items must cost 0 gold)
				(player_get_slot, ":item_id", ":player_no", ":max_cost_value_index"),
				(call_script, "script_multiplayer_get_previous_item_for_item_and_troop", ":item_id", ":player_troop"),
				(assign, ":item_id", reg0),
				(player_set_slot, ":player_no", ":max_cost_value_index", ":item_id"),
			(else_try),
				(assign, ":end_cond", 0),
				(val_sub, ":player_gold", ":total_cost"),
				(player_set_gold, ":player_no", ":player_gold", multi_max_gold_that_can_be_stored),
				(try_for_range, ":i_item", slot_player_cur_selected_item_indices_begin, slot_player_cur_selected_item_indices_end),
					(player_get_slot, ":item_id", ":player_no", ":i_item"),
					# add the item to agent
					(try_begin),
						(ge, ":item_id", 0),
						(store_sub, ":item_slot", ":i_item", slot_player_cur_selected_item_indices_begin),
						(agent_get_item_slot, ":agent_item", ":player_agent", ":item_slot"),
						(neq, ":agent_item", ":item_id"),
						
						(get_max_players, ":num_players"),
						(try_begin),
							(ge, ":agent_item", 0),
							(agent_unequip_item, ":player_agent", ":agent_item", ":item_slot"),
														
							(try_for_range, ":cur_player", 1, ":num_players"),						
								(player_is_active, ":cur_player"),							
								(multiplayer_send_4_int_to_player, ":cur_player", multiplayer_event_other_events, multiplayer_event_other_event_unequip_item,
									":player_agent", ":agent_item", ":item_slot"),							
							(try_end),
						(try_end),
						(agent_equip_item, ":player_agent", ":item_id"),
						
						(try_for_range, ":cur_player", 1, ":num_players"),						
							(player_is_active, ":cur_player"),							
							(multiplayer_send_3_int_to_player, ":cur_player", multiplayer_event_other_events, multiplayer_event_other_event_equip_item,
								":player_agent", ":item_id"),							
						(try_end),
						
					(try_end),
				(try_end),
				(player_set_slot, ":player_no", slot_player_total_equipment_value, ":total_cost"),     
			(try_end),
		(try_end),
	]),
	
	# script_mp_calculate_auto_squad_size
	# Input: none
	# Output: none
	("mp_calculate_auto_squad_size",
	[
		(try_begin),
			(multiplayer_is_server),
			# squad balance
			(gt, "$g_multiplayer_cbf_enable_squad_ratio", 0),
			(eq, "$g_multiplayer_game_type", multiplayer_game_type_captain_battle),			
			
			# get actual player counts
			(assign, ":cap_player_num", 0),
			(assign, ":merc_player_num", 0),
			(get_max_players, ":max_players"),
			(try_for_range, ":player_no", 0, ":max_players"),
				(player_is_active, ":player_no"),
				(player_get_team_no, ":team_no", ":player_no"),
				
				(try_begin),
					(eq, ":team_no", 0),
					(val_add, ":cap_player_num", 1),
				(else_try),
					(eq, ":team_no", 1),
					(val_add, ":merc_player_num", 1),
				(try_end),
			(try_end),
			
			#
			#(assign, reg0,":cap_player_num"),
			#(assign, reg1,":merc_player_num"),
			#(display_debug_message, "@SARI CAP#{reg0}  MERC#{reg1}"),
			#
			(try_begin),
				(gt, ":cap_player_num", 0),
				(gt, ":merc_player_num", 0),
				
				(store_mul, "$g_multiplayer_squad_size_calc", ":merc_player_num", 100),			
				(val_div, "$g_multiplayer_squad_size_calc", ":cap_player_num"),
				(val_mul, "$g_multiplayer_squad_size_calc", "$g_multiplayer_squad_size"),
				(val_div, "$g_multiplayer_squad_size_calc", "$g_multiplayer_team_ratio"),
				(val_div, "$g_multiplayer_squad_size_calc", 100),
				
				#(assign, reg0, "$g_multiplayer_squad_size_calc"),
				#(display_debug_message, "@SARI $g_multiplayer_squad_size_calc:{reg0}"),
			(else_try),
				(assign, "$g_multiplayer_squad_size_calc", "$g_multiplayer_squad_size"),
				#(assign, reg0, "$g_multiplayer_squad_size_calc"),
				#(display_debug_message, "@SARI $g_multiplayer_squad_size_calc2:{reg0}"),
			(try_end),
			
			# send g_multiplayer_squad_size_calc to clients
			(get_max_players, ":max_players"),
			(try_for_range, ":cur_player", 1, ":max_players"),
				(player_is_active, ":cur_player"),	
				(multiplayer_send_2_int_to_player, ":cur_player", multiplayer_event_other_events, 
					multiplayer_event_other_event_set_squad_size_calc, "$g_multiplayer_squad_size_calc"),
			(try_end),
		(else_try),	
			(multiplayer_is_server),
			(eq, "$g_multiplayer_cbf_enable_squad_ratio", 0),
			(assign, "$g_multiplayer_squad_size_calc", "$g_multiplayer_squad_size"),
			# send g_multiplayer_squad_size_calc to clients
			(get_max_players, ":max_players"),
			(try_for_range, ":cur_player", 1, ":max_players"),
				(player_is_active, ":cur_player"),	
				(multiplayer_send_2_int_to_player, ":cur_player", multiplayer_event_other_events, 
					multiplayer_event_other_event_set_squad_size_calc, "$g_multiplayer_squad_size_calc"),
			(try_end),
		(try_end), 
	]),
	
]

